
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c68  080108b0  080108b0  000208b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013518  08013518  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08013518  08013518  00023518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013520  08013520  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013520  08013520  00023520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013524  08013524  00023524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08013528  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001e4  0801370c  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0801370c  000303a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e07  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235d  00000000  00000000  0004601b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00048378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00049430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028118  00000000  00000000  0004a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fcd  00000000  00000000  00072540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6fd7  00000000  00000000  0008750d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e4e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d08  00000000  00000000  0017e534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010898 	.word	0x08010898

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08010898 	.word	0x08010898

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <TinyBMS_UART_ACK>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  0x00 - CMD ERROR , 0x01 - CRC ERROR
 *
 */
uint8_t TinyBMS_UART_ACK(UART_HandleTypeDef *huart) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b092      	sub	sp, #72	; 0x48
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ACK\r\n");
 8000ef4:	485a      	ldr	r0, [pc, #360]	; (8001060 <TinyBMS_UART_ACK+0x174>)
 8000ef6:	f00c fc53 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8000efa:	23ff      	movs	r3, #255	; 0xff
 8000efc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint8_t rx_buffer[50];
	uint8_t cmd = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint16_t CRC_calc = 0, CRC_reply = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check ACK/NACK
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2202      	movs	r2, #2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4852      	ldr	r0, [pc, #328]	; (8001064 <TinyBMS_UART_ACK+0x178>)
 8000f1c:	f00a fc78 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8000f20:	7b3b      	ldrb	r3, [r7, #12]
 8000f22:	2baa      	cmp	r3, #170	; 0xaa
 8000f24:	f040 808e 	bne.w	8001044 <TinyBMS_UART_ACK+0x158>

		//[NACK]
		if(rx_buffer[1] == NACK) {
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d141      	bne.n	8000fb2 <TinyBMS_UART_ACK+0xc6>
			printf("Response from BMS [NACK]\r\n");
 8000f2e:	484e      	ldr	r0, [pc, #312]	; (8001068 <TinyBMS_UART_ACK+0x17c>)
 8000f30:	f00c fc36 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from NACK reply
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	3302      	adds	r3, #2
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4849      	ldr	r0, [pc, #292]	; (8001064 <TinyBMS_UART_ACK+0x178>)
 8000f40:	f00a fc66 	bl	800b810 <HAL_UART_Receive_IT>

			cmd = rx_buffer[2];
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			printf("cmd: 0x%02X\r\n", cmd);
 8000f4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4846      	ldr	r0, [pc, #280]	; (800106c <TinyBMS_UART_ACK+0x180>)
 8000f52:	f00c fb9f 	bl	800d694 <iprintf>

			uint8_t error = rx_buffer[3];
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8000f5c:	7c7b      	ldrb	r3, [r7, #17]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7c3b      	ldrb	r3, [r7, #16]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of NACK response
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	2104      	movs	r1, #4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 fcc5 	bl	8007904 <CRC16>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			if(CRC_calc == CRC_reply) {
 8000f80:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d106      	bne.n	8000f9a <TinyBMS_UART_ACK+0xae>
				printf("CRC pass\r\n");
 8000f8c:	4838      	ldr	r0, [pc, #224]	; (8001070 <TinyBMS_UART_ACK+0x184>)
 8000f8e:	f00c fc07 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8000f92:	23ff      	movs	r3, #255	; 0xff
 8000f94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000f98:	e005      	b.n	8000fa6 <TinyBMS_UART_ACK+0xba>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8000f9a:	4836      	ldr	r0, [pc, #216]	; (8001074 <TinyBMS_UART_ACK+0x188>)
 8000f9c:	f00c fc00 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8000fa0:	23ff      	movs	r3, #255	; 0xff
 8000fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
			reportBMSError(error);
 8000fa6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000faa:	4618      	mov	r0, r3
 8000fac:	f006 fc88 	bl	80078c0 <reportBMSError>
 8000fb0:	e050      	b.n	8001054 <TinyBMS_UART_ACK+0x168>

		//[ACK]
		} else if(rx_buffer[1] == UART_TBMS_ACK) {
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d13c      	bne.n	8001032 <TinyBMS_UART_ACK+0x146>
			printf("Response from BMS [ACK]\r\n");
 8000fb8:	482f      	ldr	r0, [pc, #188]	; (8001078 <TinyBMS_UART_ACK+0x18c>)
 8000fba:	f00c fbf1 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 3); //read bytes 3-5 from ACK reply
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4826      	ldr	r0, [pc, #152]	; (8001064 <TinyBMS_UART_ACK+0x178>)
 8000fca:	f00a fc21 	bl	800b810 <HAL_UART_Receive_IT>

			cmd = rx_buffer[2];
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			printf("cmd: 0x%02X\r\n", cmd);
 8000fd4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4824      	ldr	r0, [pc, #144]	; (800106c <TinyBMS_UART_ACK+0x180>)
 8000fdc:	f00c fb5a 	bl	800d694 <iprintf>

			CRC_reply = ((rx_buffer[4] << 8) | rx_buffer[3]);
 8000fe0:	7c3b      	ldrb	r3, [r7, #16]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			CRC_calc = CRC16(rx_buffer, 3); //Calc CRC for bytes 1-3 of ACK response
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f006 fc83 	bl	8007904 <CRC16>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			if(CRC_calc == CRC_reply) {
 8001004:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001008:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800100c:	429a      	cmp	r2, r3
 800100e:	d109      	bne.n	8001024 <TinyBMS_UART_ACK+0x138>
				printf("CRC pass\r\n");
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <TinyBMS_UART_ACK+0x184>)
 8001012:	f00c fbc5 	bl	800d7a0 <puts>
				printf("ACK!\r\n");
 8001016:	4819      	ldr	r0, [pc, #100]	; (800107c <TinyBMS_UART_ACK+0x190>)
 8001018:	f00c fbc2 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001022:	e017      	b.n	8001054 <TinyBMS_UART_ACK+0x168>
			} else {
				printf("CRC fail in BMS ACK\r\n");
 8001024:	4816      	ldr	r0, [pc, #88]	; (8001080 <TinyBMS_UART_ACK+0x194>)
 8001026:	f00c fbbb 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800102a:	23ff      	movs	r3, #255	; 0xff
 800102c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001030:	e010      	b.n	8001054 <TinyBMS_UART_ACK+0x168>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x01 but was 0x%02X\r\n", rx_buffer[1]);
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	4619      	mov	r1, r3
 8001036:	4813      	ldr	r0, [pc, #76]	; (8001084 <TinyBMS_UART_ACK+0x198>)
 8001038:	f00c fb2c 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 800103c:	23ff      	movs	r3, #255	; 0xff
 800103e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001042:	e007      	b.n	8001054 <TinyBMS_UART_ACK+0x168>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8001044:	7b3b      	ldrb	r3, [r7, #12]
 8001046:	4619      	mov	r1, r3
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <TinyBMS_UART_ACK+0x19c>)
 800104a:	f00c fb23 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 800104e:	23ff      	movs	r3, #255	; 0xff
 8001050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}
	return retval;
 8001054:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001058:	4618      	mov	r0, r3
 800105a:	3748      	adds	r7, #72	; 0x48
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	080108b0 	.word	0x080108b0
 8001064:	20000228 	.word	0x20000228
 8001068:	080108c4 	.word	0x080108c4
 800106c:	080108e0 	.word	0x080108e0
 8001070:	080108f0 	.word	0x080108f0
 8001074:	080108fc 	.word	0x080108fc
 8001078:	08010914 	.word	0x08010914
 800107c:	08010930 	.word	0x08010930
 8001080:	08010938 	.word	0x08010938
 8001084:	08010950 	.word	0x08010950
 8001088:	08010988 	.word	0x08010988

0800108c <TinyBMS_UART_ReadRegBlock>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated
 * 						   by malloc(size_t size).
 */
uint8_t TinyBMS_UART_ReadRegBlock(UART_HandleTypeDef *huart, uint8_t rl, uint16_t addr) {
 800108c:	b580      	push	{r7, lr}
 800108e:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8001092:	af00      	add	r7, sp, #0
 8001094:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001098:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800109c:	6018      	str	r0, [r3, #0]
 800109e:	4608      	mov	r0, r1
 80010a0:	4611      	mov	r1, r2
 80010a2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80010a6:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 80010aa:	4602      	mov	r2, r0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80010b2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80010b6:	460a      	mov	r2, r1
 80010b8:	801a      	strh	r2, [r3, #0]
	printf("TinyBMS_UART_ReadRegBlock\r\n");
 80010ba:	48d7      	ldr	r0, [pc, #860]	; (8001418 <TinyBMS_UART_ReadRegBlock+0x38c>)
 80010bc:	f00c fb70 	bl	800d7a0 <puts>

	uint8_t tx_buffer[50], rx_buffer[1000];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 343c 	strb.w	r3, [r7, #1084]	; 0x43c
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 343a 	strb.w	r3, [r7, #1082]	; 0x43a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438
 80010de:	2300      	movs	r3, #0
 80010e0:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80010ea:	23aa      	movs	r3, #170	; 0xaa
 80010ec:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
	tx_buffer[1] = UART_TBMS_READ_REG_BLOCK;
 80010f0:	2307      	movs	r3, #7
 80010f2:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9

	tx_buffer[2] = rl;
 80010f6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80010fa:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa

	ADDR_LSB = (addr & 0xFF);
 8001104:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001108:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
	ADDR_MSB = ((addr >> 8) & 0xFF);
 8001112:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001116:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	b29b      	uxth	r3, r3
 8001120:	f887 343c 	strb.w	r3, [r7, #1084]	; 0x43c
	tx_buffer[3] = ADDR_LSB;
 8001124:	f897 343d 	ldrb.w	r3, [r7, #1085]	; 0x43d
 8001128:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
	tx_buffer[4] = ADDR_MSB;
 800112c:	f897 343c 	ldrb.w	r3, [r7, #1084]	; 0x43c
 8001130:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc

	CRC_request = CRC16(tx_buffer, 5);
 8001134:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001138:	2105      	movs	r1, #5
 800113a:	4618      	mov	r0, r3
 800113c:	f006 fbe2 	bl	8007904 <CRC16>
 8001140:	4603      	mov	r3, r0
 8001142:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438
	CRC_LSB = (CRC_request & 0xFF);
 8001146:	f8b7 3438 	ldrh.w	r3, [r7, #1080]	; 0x438
 800114a:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 800114e:	f8b7 3438 	ldrh.w	r3, [r7, #1080]	; 0x438
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	f887 343a 	strb.w	r3, [r7, #1082]	; 0x43a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[5] = CRC_LSB;
 800115a:	f897 343b 	ldrb.w	r3, [r7, #1083]	; 0x43b
 800115e:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
	tx_buffer[6] = CRC_MSB;
 8001162:	f897 343a 	ldrb.w	r3, [r7, #1082]	; 0x43a
 8001166:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 7);
 800116a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800116e:	2207      	movs	r2, #7
 8001170:	4619      	mov	r1, r3
 8001172:	48aa      	ldr	r0, [pc, #680]	; (800141c <TinyBMS_UART_ReadRegBlock+0x390>)
 8001174:	f00a fade 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2202      	movs	r2, #2
 800117e:	4619      	mov	r1, r3
 8001180:	48a6      	ldr	r0, [pc, #664]	; (800141c <TinyBMS_UART_ReadRegBlock+0x390>)
 8001182:	f00a fb45 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8001186:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800118a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2baa      	cmp	r3, #170	; 0xaa
 8001192:	f040 815d 	bne.w	8001450 <TinyBMS_UART_ReadRegBlock+0x3c4>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8001196:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800119a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d13e      	bne.n	8001222 <TinyBMS_UART_ReadRegBlock+0x196>
			printf("Response from BMS [ERROR]\r\n");
 80011a4:	489e      	ldr	r0, [pc, #632]	; (8001420 <TinyBMS_UART_ReadRegBlock+0x394>)
 80011a6:	f00c fafb 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	3302      	adds	r3, #2
 80011b0:	2204      	movs	r2, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4899      	ldr	r0, [pc, #612]	; (800141c <TinyBMS_UART_ReadRegBlock+0x390>)
 80011b6:	f00a fb2b 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80011ba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80011be:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80011c2:	78db      	ldrb	r3, [r3, #3]
 80011c4:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80011c8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80011cc:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80011d0:	795b      	ldrb	r3, [r3, #5]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80011da:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2104      	movs	r1, #4
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fb87 	bl	8007904 <CRC16>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

			if(CRC_calc == CRC_reply) {
 80011fc:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 8001200:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	; 0x434
 8001204:	429a      	cmp	r2, r3
 8001206:	d103      	bne.n	8001210 <TinyBMS_UART_ReadRegBlock+0x184>
				printf("CRC pass\r\n");
 8001208:	4886      	ldr	r0, [pc, #536]	; (8001424 <TinyBMS_UART_ReadRegBlock+0x398>)
 800120a:	f00c fac9 	bl	800d7a0 <puts>
 800120e:	e002      	b.n	8001216 <TinyBMS_UART_ReadRegBlock+0x18a>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8001210:	4885      	ldr	r0, [pc, #532]	; (8001428 <TinyBMS_UART_ReadRegBlock+0x39c>)
 8001212:	f00c fac5 	bl	800d7a0 <puts>
			}
			reportBMSError(error);
 8001216:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800121a:	4618      	mov	r0, r3
 800121c:	f006 fb50 	bl	80078c0 <reportBMSError>
 8001220:	e11f      	b.n	8001462 <TinyBMS_UART_ReadRegBlock+0x3d6>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_REG_BLOCK) {
 8001222:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001226:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	2b07      	cmp	r3, #7
 800122e:	f040 80e9 	bne.w	8001404 <TinyBMS_UART_ReadRegBlock+0x378>
			printf("Response from BMS [OK]\r\n");
 8001232:	487e      	ldr	r0, [pc, #504]	; (800142c <TinyBMS_UART_ReadRegBlock+0x3a0>)
 8001234:	f00c fab4 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	3302      	adds	r3, #2
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	4876      	ldr	r0, [pc, #472]	; (800141c <TinyBMS_UART_ReadRegBlock+0x390>)
 8001244:	f00a fae4 	bl	800b810 <HAL_UART_Receive_IT>

			//Should be equal to (RL * 2) because 2 bytes per register
			uint8_t PL = rx_buffer[2];
 8001248:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800124c:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8001250:	789b      	ldrb	r3, [r3, #2]
 8001252:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433

			uint8_t bit7 = ((PL >> 7) & 1); //extract bit 7
 8001256:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800125a:	09db      	lsrs	r3, r3, #7
 800125c:	f887 3432 	strb.w	r3, [r7, #1074]	; 0x432
			uint8_t bits05 = (PL & 63); //extract bits 0-5
 8001260:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8001264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001268:	f887 3431 	strb.w	r3, [r7, #1073]	; 0x431

			//if bit7 == 1
			if(bit7) {
 800126c:	f897 3432 	ldrb.w	r3, [r7, #1074]	; 0x432
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <TinyBMS_UART_ReadRegBlock+0x1f6>
				printf("Current packet ID: 0x%02X\r\n", bits05);
 8001274:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 8001278:	4619      	mov	r1, r3
 800127a:	486d      	ldr	r0, [pc, #436]	; (8001430 <TinyBMS_UART_ReadRegBlock+0x3a4>)
 800127c:	f00c fa0a 	bl	800d694 <iprintf>
 8001280:	e005      	b.n	800128e <TinyBMS_UART_ReadRegBlock+0x202>
			//else bit7 == 0
			} else {
				printf("Payload size in bytes (last packet): 0x%02X\r\n", bits05);
 8001282:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 8001286:	4619      	mov	r1, r3
 8001288:	486a      	ldr	r0, [pc, #424]	; (8001434 <TinyBMS_UART_ReadRegBlock+0x3a8>)
 800128a:	f00c fa03 	bl	800d694 <iprintf>
			}

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 2*n+5 from OK reply
 800128e:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8001292:	b29b      	uxth	r3, r3
 8001294:	3302      	adds	r3, #2
 8001296:	b29a      	uxth	r2, r3
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	3303      	adds	r3, #3
 800129e:	4619      	mov	r1, r3
 80012a0:	485e      	ldr	r0, [pc, #376]	; (800141c <TinyBMS_UART_ReadRegBlock+0x390>)
 80012a2:	f00a fab5 	bl	800b810 <HAL_UART_Receive_IT>

			uint16_t DATA[] = {0};
 80012a6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80012aa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80012ae:	2200      	movs	r2, #0
 80012b0:	801a      	strh	r2, [r3, #0]
			uint32_t numDATA = (PL / 2); //2 bytes per data
 80012b2:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			uint32_t n = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

			for(uint32_t i = 0; i < numDATA; i++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80012ca:	e027      	b.n	800131c <TinyBMS_UART_ReadRegBlock+0x290>
				n++;
 80012cc:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80012d0:	3301      	adds	r3, #1
 80012d2:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
				//i=0,1,..,n-1 or n = 1,2,..,n
				DATA[i] = (rx_buffer[n+4-1] << 8) | rx_buffer[n+3-1];
 80012d6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80012da:	3303      	adds	r3, #3
 80012dc:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 80012e0:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80012ee:	3302      	adds	r3, #2
 80012f0:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80012f4:	f5a1 6187 	sub.w	r1, r1, #1080	; 0x438
 80012f8:	5ccb      	ldrb	r3, [r1, r3]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	b299      	uxth	r1, r3
 8001302:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001306:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800130a:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 800130e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(uint32_t i = 0; i < numDATA; i++) {
 8001312:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001316:	3301      	adds	r3, #1
 8001318:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800131c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8001320:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001324:	429a      	cmp	r2, r3
 8001326:	d3d1      	bcc.n	80012cc <TinyBMS_UART_ReadRegBlock+0x240>
			}

			CRC_reply = ((rx_buffer[n+6-1] << 8) | rx_buffer[n+5-1]);
 8001328:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800132c:	3305      	adds	r3, #5
 800132e:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001332:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21a      	sxth	r2, r3
 800133c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001340:	3304      	adds	r3, #4
 8001342:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8001346:	f5a1 6187 	sub.w	r1, r1, #1080	; 0x438
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8001356:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800135a:	b29b      	uxth	r3, r3
 800135c:	3303      	adds	r3, #3
 800135e:	b29a      	uxth	r2, r3
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f006 facc 	bl	8007904 <CRC16>
 800136c:	4603      	mov	r3, r0
 800136e:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

			if(CRC_calc == CRC_reply) {
 8001372:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 8001376:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	; 0x434
 800137a:	429a      	cmp	r2, r3
 800137c:	d13e      	bne.n	80013fc <TinyBMS_UART_ReadRegBlock+0x370>
				printf("CRC pass\r\n");
 800137e:	4829      	ldr	r0, [pc, #164]	; (8001424 <TinyBMS_UART_ReadRegBlock+0x398>)
 8001380:	f00c fa0e 	bl	800d7a0 <puts>

				//Print the Register Block Contents
				printf("************ TinyBMS Register Block Contents ************\r\n");
 8001384:	482c      	ldr	r0, [pc, #176]	; (8001438 <TinyBMS_UART_ReadRegBlock+0x3ac>)
 8001386:	f00c fa0b 	bl	800d7a0 <puts>
				printf("Printing Register Contents ranging from: 0x%04X to 0x%04X.\r\n", addr, addr+PL);
 800138a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800138e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001392:	8819      	ldrh	r1, [r3, #0]
 8001394:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001398:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800139c:	881a      	ldrh	r2, [r3, #0]
 800139e:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 80013a2:	4413      	add	r3, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4825      	ldr	r0, [pc, #148]	; (800143c <TinyBMS_UART_ReadRegBlock+0x3b0>)
 80013a8:	f00c f974 	bl	800d694 <iprintf>
				for(uint16_t i = 0; i < numDATA; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
 80013b2:	e018      	b.n	80013e6 <TinyBMS_UART_ReadRegBlock+0x35a>
					printf("Register 0x%04X: Value: %u\r\n", addr+i, DATA[i]);
 80013b4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80013b8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 80013c2:	18d1      	adds	r1, r2, r3
 80013c4:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 80013c8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80013cc:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80013d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013d4:	461a      	mov	r2, r3
 80013d6:	481a      	ldr	r0, [pc, #104]	; (8001440 <TinyBMS_UART_ReadRegBlock+0x3b4>)
 80013d8:	f00c f95c 	bl	800d694 <iprintf>
				for(uint16_t i = 0; i < numDATA; i++) {
 80013dc:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 80013e0:	3301      	adds	r3, #1
 80013e2:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
 80013e6:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 80013ea:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8e0      	bhi.n	80013b4 <TinyBMS_UART_ReadRegBlock+0x328>
				}
				printf("----------------------------------------\r\n");
 80013f2:	4814      	ldr	r0, [pc, #80]	; (8001444 <TinyBMS_UART_ReadRegBlock+0x3b8>)
 80013f4:	f00c f9d4 	bl	800d7a0 <puts>
				return CMD_SUCCESS;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e033      	b.n	8001464 <TinyBMS_UART_ReadRegBlock+0x3d8>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80013fc:	4812      	ldr	r0, [pc, #72]	; (8001448 <TinyBMS_UART_ReadRegBlock+0x3bc>)
 80013fe:	f00c f9cf 	bl	800d7a0 <puts>
 8001402:	e02e      	b.n	8001462 <TinyBMS_UART_ReadRegBlock+0x3d6>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x07 but was 0x%02X\r\n", rx_buffer[1]);
 8001404:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001408:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	4619      	mov	r1, r3
 8001410:	480e      	ldr	r0, [pc, #56]	; (800144c <TinyBMS_UART_ReadRegBlock+0x3c0>)
 8001412:	f00c f93f 	bl	800d694 <iprintf>
 8001416:	e024      	b.n	8001462 <TinyBMS_UART_ReadRegBlock+0x3d6>
 8001418:	080109b8 	.word	0x080109b8
 800141c:	20000228 	.word	0x20000228
 8001420:	080109d4 	.word	0x080109d4
 8001424:	080108f0 	.word	0x080108f0
 8001428:	080108fc 	.word	0x080108fc
 800142c:	080109f0 	.word	0x080109f0
 8001430:	08010a08 	.word	0x08010a08
 8001434:	08010a24 	.word	0x08010a24
 8001438:	08010a54 	.word	0x08010a54
 800143c:	08010a90 	.word	0x08010a90
 8001440:	08010ad0 	.word	0x08010ad0
 8001444:	08010af0 	.word	0x08010af0
 8001448:	08010b1c 	.word	0x08010b1c
 800144c:	08010b30 	.word	0x08010b30
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8001450:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001454:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <TinyBMS_UART_ReadRegBlock+0x3e4>)
 800145e:	f00c f919 	bl	800d694 <iprintf>
	}

	return CMD_FAILURE;
 8001462:	23ff      	movs	r3, #255	; 0xff
}
 8001464:	4618      	mov	r0, r3
 8001466:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08010988 	.word	0x08010988

08001474 <TinyBMS_UART_ReadRegIndividual>:
 * @note				-			Individual Register Response from BMS [OK]:
 * 						 	Byte n*4   Byte n*4+1  Byte n*4+2  Byte n*4+3  Byte n*4+4  Byte n*4+5
 * 						 	ADDRn:LSB  ADDRn:MSB   DATAn:LSB   DATAn:MSB   CRC:LSB     CRC:MSB
 * 						 	      [UINT16]			     [UINT16]
 */
uint8_t TinyBMS_UART_ReadRegIndividual(UART_HandleTypeDef *huart, uint8_t pl, uint16_t addr[]) {
 8001474:	b580      	push	{r7, lr}
 8001476:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 800147a:	af00      	add	r7, sp, #0
 800147c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001480:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8001484:	6018      	str	r0, [r3, #0]
 8001486:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800148a:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001494:	f6a3 0305 	subw	r3, r3, #2053	; 0x805
 8001498:	460a      	mov	r2, r1
 800149a:	701a      	strb	r2, [r3, #0]
	printf("TinyBMS_UART_ReadRegIndividual\r\n");
 800149c:	48b9      	ldr	r0, [pc, #740]	; (8001784 <TinyBMS_UART_ReadRegIndividual+0x310>)
 800149e:	f00c f97f 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f

	uint8_t tx_buffer[1000], rx_buffer[1000];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3803 	strb.w	r3, [r7, #2051]	; 0x803
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3802 	strb.w	r3, [r7, #2050]	; 0x802
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3801 	strb.w	r3, [r7, #2049]	; 0x801
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 3800 	strb.w	r3, [r7, #2048]	; 0x800
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8a7 37fc 	strh.w	r3, [r7, #2044]	; 0x7fc
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8a7 37fa 	strh.w	r3, [r7, #2042]	; 0x7fa

	uint8_t pl_request = pl;
 80014d2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80014d6:	f6a3 0305 	subw	r3, r3, #2053	; 0x805
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f887 37f9 	strb.w	r3, [r7, #2041]	; 0x7f9

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80014e0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80014e4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80014e8:	22aa      	movs	r2, #170	; 0xaa
 80014ea:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = UART_TBMS_READ_INDIVIDUAL_REGS;
 80014ec:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80014f0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80014f4:	2209      	movs	r2, #9
 80014f6:	705a      	strb	r2, [r3, #1]

	tx_buffer[2] = pl_request;
 80014f8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80014fc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001500:	f897 27f9 	ldrb.w	r2, [r7, #2041]	; 0x7f9
 8001504:	709a      	strb	r2, [r3, #2]
	uint16_t numAddresses = (pl_request / 2); //2 bytes per address
 8001506:	f897 37f9 	ldrb.w	r3, [r7, #2041]	; 0x7f9
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f8a7 37f6 	strh.w	r3, [r7, #2038]	; 0x7f6
	uint16_t n = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	f8a7 380c 	strh.w	r3, [r7, #2060]	; 0x80c

	//input array addr[] contains n uint16_t elements
	for(uint16_t i = 0; i < numAddresses; i++) {
 8001518:	2300      	movs	r3, #0
 800151a:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a
 800151e:	e03a      	b.n	8001596 <TinyBMS_UART_ReadRegIndividual+0x122>
		n++; //n = 1,2,3,.. addr#
 8001520:	f8b7 380c 	ldrh.w	r3, [r7, #2060]	; 0x80c
 8001524:	3301      	adds	r3, #1
 8001526:	f8a7 380c 	strh.w	r3, [r7, #2060]	; 0x80c
		ADDR_LSB = (addr[i] & 0xFF);
 800152a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8001534:	f6a2 020c 	subw	r2, r2, #2060	; 0x80c
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	4413      	add	r3, r2
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	f887 3803 	strb.w	r3, [r7, #2051]	; 0x803
		ADDR_MSB = ((addr[i] >> 8) & 0xFF);
 8001542:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800154c:	f6a2 020c 	subw	r2, r2, #2060	; 0x80c
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4413      	add	r3, r2
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	b29b      	uxth	r3, r3
 800155a:	f887 3802 	strb.w	r3, [r7, #2050]	; 0x802
		tx_buffer[(2*n)+2-1] = ADDR_LSB; //for n=1,2,3,.. index: 3,5,7,..
 800155e:	f8b7 380c 	ldrh.w	r3, [r7, #2060]	; 0x80c
 8001562:	3301      	adds	r3, #1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	3b01      	subs	r3, #1
 8001568:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800156c:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001570:	f897 1803 	ldrb.w	r1, [r7, #2051]	; 0x803
 8001574:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(2*n)+3-1] = ADDR_MSB; //for n=1,2,3,.. index: 4,6,8,..
 8001576:	f8b7 380c 	ldrh.w	r3, [r7, #2060]	; 0x80c
 800157a:	3301      	adds	r3, #1
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8001582:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001586:	f897 1802 	ldrb.w	r1, [r7, #2050]	; 0x802
 800158a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < numAddresses; i++) {
 800158c:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8001590:	3301      	adds	r3, #1
 8001592:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a
 8001596:	f8b7 280a 	ldrh.w	r2, [r7, #2058]	; 0x80a
 800159a:	f8b7 37f6 	ldrh.w	r3, [r7, #2038]	; 0x7f6
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3be      	bcc.n	8001520 <TinyBMS_UART_ReadRegIndividual+0xac>
	}

	CRC_request = CRC16(tx_buffer, pl_request+3); //Bytes 1:2n+3 or pl+3
 80015a2:	f897 37f9 	ldrb.w	r3, [r7, #2041]	; 0x7f9
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3303      	adds	r3, #3
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 f9a6 	bl	8007904 <CRC16>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f8a7 37fe 	strh.w	r3, [r7, #2046]	; 0x7fe
	CRC_LSB = (CRC_request & 0xFF);
 80015be:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 80015c2:	f887 3801 	strb.w	r3, [r7, #2049]	; 0x801
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80015c6:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	; 0x7fe
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f887 3800 	strb.w	r3, [r7, #2048]	; 0x800
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[(2*n)+4-1] = CRC_LSB;
 80015d2:	f8b7 380c 	ldrh.w	r3, [r7, #2060]	; 0x80c
 80015d6:	3302      	adds	r3, #2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	3b01      	subs	r3, #1
 80015dc:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80015e0:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80015e4:	f897 1801 	ldrb.w	r1, [r7, #2049]	; 0x801
 80015e8:	54d1      	strb	r1, [r2, r3]
	tx_buffer[(2*n)+5-1] = CRC_MSB;
 80015ea:	f8b7 380c 	ldrh.w	r3, [r7, #2060]	; 0x80c
 80015ee:	3302      	adds	r3, #2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80015f6:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80015fa:	f897 1800 	ldrb.w	r1, [r7, #2048]	; 0x800
 80015fe:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, pl_request+5); //Bytes 1:2n+5 or pl+5
 8001600:	f897 37f9 	ldrb.w	r3, [r7, #2041]	; 0x7f9
 8001604:	b29b      	uxth	r3, r3
 8001606:	3305      	adds	r3, #5
 8001608:	b29a      	uxth	r2, r3
 800160a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800160e:	4619      	mov	r1, r3
 8001610:	485d      	ldr	r0, [pc, #372]	; (8001788 <TinyBMS_UART_ReadRegIndividual+0x314>)
 8001612:	f00a f88f 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	2202      	movs	r2, #2
 800161c:	4619      	mov	r1, r3
 800161e:	485a      	ldr	r0, [pc, #360]	; (8001788 <TinyBMS_UART_ReadRegIndividual+0x314>)
 8001620:	f00a f8f6 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8001624:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001628:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2baa      	cmp	r3, #170	; 0xaa
 8001630:	f040 817d 	bne.w	800192e <TinyBMS_UART_ReadRegIndividual+0x4ba>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8001634:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001638:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d144      	bne.n	80016cc <TinyBMS_UART_ReadRegIndividual+0x258>
			printf("Response from BMS [ERROR]\r\n");
 8001642:	4852      	ldr	r0, [pc, #328]	; (800178c <TinyBMS_UART_ReadRegIndividual+0x318>)
 8001644:	f00c f8ac 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	3302      	adds	r3, #2
 800164e:	2204      	movs	r2, #4
 8001650:	4619      	mov	r1, r3
 8001652:	484d      	ldr	r0, [pc, #308]	; (8001788 <TinyBMS_UART_ReadRegIndividual+0x314>)
 8001654:	f00a f8dc 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8001658:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800165c:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 8001660:	78db      	ldrb	r3, [r3, #3]
 8001662:	f887 37ef 	strb.w	r3, [r7, #2031]	; 0x7ef

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8001666:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800166a:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001678:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21b      	sxth	r3, r3
 8001684:	f8a7 37fa 	strh.w	r3, [r7, #2042]	; 0x7fa
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2104      	movs	r1, #4
 800168e:	4618      	mov	r0, r3
 8001690:	f006 f938 	bl	8007904 <CRC16>
 8001694:	4603      	mov	r3, r0
 8001696:	f8a7 37fc 	strh.w	r3, [r7, #2044]	; 0x7fc

			if(CRC_calc == CRC_reply) {
 800169a:	f8b7 27fc 	ldrh.w	r2, [r7, #2044]	; 0x7fc
 800169e:	f8b7 37fa 	ldrh.w	r3, [r7, #2042]	; 0x7fa
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d106      	bne.n	80016b4 <TinyBMS_UART_ReadRegIndividual+0x240>
				printf("CRC pass\r\n");
 80016a6:	483a      	ldr	r0, [pc, #232]	; (8001790 <TinyBMS_UART_ReadRegIndividual+0x31c>)
 80016a8:	f00c f87a 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80016ac:	23ff      	movs	r3, #255	; 0xff
 80016ae:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
 80016b2:	e005      	b.n	80016c0 <TinyBMS_UART_ReadRegIndividual+0x24c>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 80016b4:	4837      	ldr	r0, [pc, #220]	; (8001794 <TinyBMS_UART_ReadRegIndividual+0x320>)
 80016b6:	f00c f873 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80016ba:	23ff      	movs	r3, #255	; 0xff
 80016bc:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
			}
			reportBMSError(error);
 80016c0:	f897 37ef 	ldrb.w	r3, [r7, #2031]	; 0x7ef
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 f8fb 	bl	80078c0 <reportBMSError>
 80016ca:	e13c      	b.n	8001946 <TinyBMS_UART_ReadRegIndividual+0x4d2>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_INDIVIDUAL_REGS) {
 80016cc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80016d0:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	2b09      	cmp	r3, #9
 80016d8:	f040 811c 	bne.w	8001914 <TinyBMS_UART_ReadRegIndividual+0x4a0>
			printf("Response from BMS [OK]\r\n");
 80016dc:	482e      	ldr	r0, [pc, #184]	; (8001798 <TinyBMS_UART_ReadRegIndividual+0x324>)
 80016de:	f00c f85f 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	3302      	adds	r3, #2
 80016e8:	2201      	movs	r2, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	4826      	ldr	r0, [pc, #152]	; (8001788 <TinyBMS_UART_ReadRegIndividual+0x314>)
 80016ee:	f00a f88f 	bl	800b810 <HAL_UART_Receive_IT>

			//equal to (RL * 2) because 2 bytes per register
			uint8_t pl_response = rx_buffer[2];
 80016f2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80016f6:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	f887 37f5 	strb.w	r3, [r7, #2037]	; 0x7f5

			uint8_t bit7 = ((pl_response >> 7) & 1); //extract bit 7
 8001700:	f897 37f5 	ldrb.w	r3, [r7, #2037]	; 0x7f5
 8001704:	09db      	lsrs	r3, r3, #7
 8001706:	f887 37f4 	strb.w	r3, [r7, #2036]	; 0x7f4
			uint8_t bits05 = (pl_response & 63); //extract bits 0-5
 800170a:	f897 37f5 	ldrb.w	r3, [r7, #2037]	; 0x7f5
 800170e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001712:	f887 37f3 	strb.w	r3, [r7, #2035]	; 0x7f3

			//if bit7 == 1
			if(bit7) {
 8001716:	f897 37f4 	ldrb.w	r3, [r7, #2036]	; 0x7f4
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <TinyBMS_UART_ReadRegIndividual+0x2b8>
				printf("Current packet ID: 0x%02X\r\n", bits05);
 800171e:	f897 37f3 	ldrb.w	r3, [r7, #2035]	; 0x7f3
 8001722:	4619      	mov	r1, r3
 8001724:	481d      	ldr	r0, [pc, #116]	; (800179c <TinyBMS_UART_ReadRegIndividual+0x328>)
 8001726:	f00b ffb5 	bl	800d694 <iprintf>
 800172a:	e005      	b.n	8001738 <TinyBMS_UART_ReadRegIndividual+0x2c4>
			//else bit7 == 0
			} else {
				printf("Payload size in bytes (last packet): 0x%02X\r\n", bits05);
 800172c:	f897 37f3 	ldrb.w	r3, [r7, #2035]	; 0x7f3
 8001730:	4619      	mov	r1, r3
 8001732:	481b      	ldr	r0, [pc, #108]	; (80017a0 <TinyBMS_UART_ReadRegIndividual+0x32c>)
 8001734:	f00b ffae 	bl	800d694 <iprintf>
			}

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], pl_response+2); //read from byte 4 to 4*n+5 from OK reply
 8001738:	f897 37f5 	ldrb.w	r3, [r7, #2037]	; 0x7f5
 800173c:	b29b      	uxth	r3, r3
 800173e:	3302      	adds	r3, #2
 8001740:	b29a      	uxth	r2, r3
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	3303      	adds	r3, #3
 8001748:	4619      	mov	r1, r3
 800174a:	480f      	ldr	r0, [pc, #60]	; (8001788 <TinyBMS_UART_ReadRegIndividual+0x314>)
 800174c:	f00a f860 	bl	800b810 <HAL_UART_Receive_IT>

			uint16_t ADDR[] = {0}, DATA[] = {0};
 8001750:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001754:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8001758:	2200      	movs	r2, #0
 800175a:	801a      	strh	r2, [r3, #0]
 800175c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001760:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 8001764:	2200      	movs	r2, #0
 8001766:	801a      	strh	r2, [r3, #0]
			uint16_t numDATA = (pl_response / 4); //4 bytes per data
 8001768:	f897 37f5 	ldrb.w	r3, [r7, #2037]	; 0x7f5
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f8a7 37f0 	strh.w	r3, [r7, #2032]	; 0x7f0
			uint16_t n = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808

			for(uint16_t i = 0; i < numDATA; i++) {
 800177a:	2300      	movs	r3, #0
 800177c:	f8a7 3806 	strh.w	r3, [r7, #2054]	; 0x806
 8001780:	e059      	b.n	8001836 <TinyBMS_UART_ReadRegIndividual+0x3c2>
 8001782:	bf00      	nop
 8001784:	08010b68 	.word	0x08010b68
 8001788:	20000228 	.word	0x20000228
 800178c:	080109d4 	.word	0x080109d4
 8001790:	080108f0 	.word	0x080108f0
 8001794:	080108fc 	.word	0x080108fc
 8001798:	080109f0 	.word	0x080109f0
 800179c:	08010a08 	.word	0x08010a08
 80017a0:	08010a24 	.word	0x08010a24
				n++; //n = 1,2,3,.. addr# data#
 80017a4:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 80017a8:	3301      	adds	r3, #1
 80017aa:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
				//i=0,1,..,numDATA-1 or n = 1,2,..,numDATA
				ADDR[i] = (rx_buffer[(4*n)+1-1] << 8) | rx_buffer[(4*n)-1];
 80017ae:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80017b8:	f2a2 72f4 	subw	r2, r2, #2036	; 0x7f4
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	3b01      	subs	r3, #1
 80017ca:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80017ce:	f2a1 71f4 	subw	r1, r1, #2036	; 0x7f4
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21b      	sxth	r3, r3
 80017da:	f8b7 2806 	ldrh.w	r2, [r7, #2054]	; 0x806
 80017de:	b299      	uxth	r1, r3
 80017e0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80017e4:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80017e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				DATA[i] = (rx_buffer[(4*n)+3-1] << 8) | rx_buffer[(4*n)+2-1];
 80017ec:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80017f8:	f2a2 72f4 	subw	r2, r2, #2036	; 0x7f4
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21a      	sxth	r2, r3
 8001802:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	3301      	adds	r3, #1
 800180a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 800180e:	f2a1 71f4 	subw	r1, r1, #2036	; 0x7f4
 8001812:	5ccb      	ldrb	r3, [r1, r3]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b21b      	sxth	r3, r3
 800181a:	f8b7 2806 	ldrh.w	r2, [r7, #2054]	; 0x806
 800181e:	b299      	uxth	r1, r3
 8001820:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001824:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 8001828:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(uint16_t i = 0; i < numDATA; i++) {
 800182c:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	; 0x806
 8001830:	3301      	adds	r3, #1
 8001832:	f8a7 3806 	strh.w	r3, [r7, #2054]	; 0x806
 8001836:	f8b7 2806 	ldrh.w	r2, [r7, #2054]	; 0x806
 800183a:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 800183e:	429a      	cmp	r2, r3
 8001840:	d3b0      	bcc.n	80017a4 <TinyBMS_UART_ReadRegIndividual+0x330>
			}

			CRC_reply = ((rx_buffer[(4*n)+5-1] << 8) | rx_buffer[(4*n)+4-1]);
 8001842:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 8001846:	3301      	adds	r3, #1
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800184e:	f2a2 72f4 	subw	r2, r2, #2036	; 0x7f4
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 800185c:	3301      	adds	r3, #1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	3b01      	subs	r3, #1
 8001862:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8001866:	f2a1 71f4 	subw	r1, r1, #2036	; 0x7f4
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21b      	sxth	r3, r3
 8001872:	f8a7 37fa 	strh.w	r3, [r7, #2042]	; 0x7fa
			CRC_calc = CRC16(rx_buffer, pl_response+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8001876:	f897 37f5 	ldrb.w	r3, [r7, #2037]	; 0x7f5
 800187a:	b29b      	uxth	r3, r3
 800187c:	3303      	adds	r3, #3
 800187e:	b29a      	uxth	r2, r3
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f006 f83c 	bl	8007904 <CRC16>
 800188c:	4603      	mov	r3, r0
 800188e:	f8a7 37fc 	strh.w	r3, [r7, #2044]	; 0x7fc

			if(CRC_calc == CRC_reply) {
 8001892:	f8b7 27fc 	ldrh.w	r2, [r7, #2044]	; 0x7fc
 8001896:	f8b7 37fa 	ldrh.w	r3, [r7, #2042]	; 0x7fa
 800189a:	429a      	cmp	r2, r3
 800189c:	d133      	bne.n	8001906 <TinyBMS_UART_ReadRegIndividual+0x492>
				printf("CRC pass\r\n");
 800189e:	482d      	ldr	r0, [pc, #180]	; (8001954 <TinyBMS_UART_ReadRegIndividual+0x4e0>)
 80018a0:	f00b ff7e 	bl	800d7a0 <puts>

				//Print the Register Block Contents
				printf("************ TinyBMS Individual Register Contents ************\r\n");
 80018a4:	482c      	ldr	r0, [pc, #176]	; (8001958 <TinyBMS_UART_ReadRegIndividual+0x4e4>)
 80018a6:	f00b ff7b 	bl	800d7a0 <puts>
				printf("Printing Individual Register Contents:\r\n");
 80018aa:	482c      	ldr	r0, [pc, #176]	; (800195c <TinyBMS_UART_ReadRegIndividual+0x4e8>)
 80018ac:	f00b ff78 	bl	800d7a0 <puts>
				for(uint16_t i = 0; i < numDATA; i++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8a7 3804 	strh.w	r3, [r7, #2052]	; 0x804
 80018b6:	e019      	b.n	80018ec <TinyBMS_UART_ReadRegIndividual+0x478>
					printf("Register 0x%04X: %u\r\n", ADDR[i], DATA[i]);
 80018b8:	f8b7 2804 	ldrh.w	r2, [r7, #2052]	; 0x804
 80018bc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80018c0:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80018c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f8b7 2804 	ldrh.w	r2, [r7, #2052]	; 0x804
 80018ce:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80018d2:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 80018d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018da:	461a      	mov	r2, r3
 80018dc:	4820      	ldr	r0, [pc, #128]	; (8001960 <TinyBMS_UART_ReadRegIndividual+0x4ec>)
 80018de:	f00b fed9 	bl	800d694 <iprintf>
				for(uint16_t i = 0; i < numDATA; i++) {
 80018e2:	f8b7 3804 	ldrh.w	r3, [r7, #2052]	; 0x804
 80018e6:	3301      	adds	r3, #1
 80018e8:	f8a7 3804 	strh.w	r3, [r7, #2052]	; 0x804
 80018ec:	f8b7 2804 	ldrh.w	r2, [r7, #2052]	; 0x804
 80018f0:	f8b7 37f0 	ldrh.w	r3, [r7, #2032]	; 0x7f0
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d3df      	bcc.n	80018b8 <TinyBMS_UART_ReadRegIndividual+0x444>
				}
				printf("----------------------------------------\r\n");
 80018f8:	481a      	ldr	r0, [pc, #104]	; (8001964 <TinyBMS_UART_ReadRegIndividual+0x4f0>)
 80018fa:	f00b ff51 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
 8001904:	e01f      	b.n	8001946 <TinyBMS_UART_ReadRegIndividual+0x4d2>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8001906:	4818      	ldr	r0, [pc, #96]	; (8001968 <TinyBMS_UART_ReadRegIndividual+0x4f4>)
 8001908:	f00b ff4a 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800190c:	23ff      	movs	r3, #255	; 0xff
 800190e:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
 8001912:	e018      	b.n	8001946 <TinyBMS_UART_ReadRegIndividual+0x4d2>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x09 but was 0x%02X\r\n", rx_buffer[1]);
 8001914:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001918:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	4619      	mov	r1, r3
 8001920:	4812      	ldr	r0, [pc, #72]	; (800196c <TinyBMS_UART_ReadRegIndividual+0x4f8>)
 8001922:	f00b feb7 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8001926:	23ff      	movs	r3, #255	; 0xff
 8001928:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
 800192c:	e00b      	b.n	8001946 <TinyBMS_UART_ReadRegIndividual+0x4d2>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800192e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001932:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <TinyBMS_UART_ReadRegIndividual+0x4fc>)
 800193c:	f00b feaa 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8001940:	23ff      	movs	r3, #255	; 0xff
 8001942:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
	}

	return retval;
 8001946:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
}
 800194a:	4618      	mov	r0, r3
 800194c:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	080108f0 	.word	0x080108f0
 8001958:	08010b88 	.word	0x08010b88
 800195c:	08010bc8 	.word	0x08010bc8
 8001960:	08010bf0 	.word	0x08010bf0
 8001964:	08010af0 	.word	0x08010af0
 8001968:	08010b1c 	.word	0x08010b1c
 800196c:	08010c08 	.word	0x08010c08
 8001970:	08010988 	.word	0x08010988

08001974 <TinyBMS_UART_WriteRegBlock>:
 *
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated by malloc(size_t size).
 */
uint8_t TinyBMS_UART_WriteRegBlock(UART_HandleTypeDef *huart, uint8_t pl, uint16_t addr, uint16_t data[]) {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 800197a:	af00      	add	r7, sp, #0
 800197c:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8001980:	f2a4 443c 	subw	r4, r4, #1084	; 0x43c
 8001984:	6020      	str	r0, [r4, #0]
 8001986:	4608      	mov	r0, r1
 8001988:	4611      	mov	r1, r2
 800198a:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800198e:	f2a2 4244 	subw	r2, r2, #1092	; 0x444
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001998:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 800199c:	4602      	mov	r2, r0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80019a4:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80019a8:	460a      	mov	r2, r1
 80019aa:	801a      	strh	r2, [r3, #0]
	printf("TinyBMS_UART_WriteRegBlock\r\n");
 80019ac:	48bf      	ldr	r0, [pc, #764]	; (8001cac <TinyBMS_UART_WriteRegBlock+0x338>)
 80019ae:	f00b fef7 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80019b2:	23ff      	movs	r3, #255	; 0xff
 80019b4:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447

	uint8_t tx_buffer[1000], rx_buffer[50];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, DATA_LSB = 0, DATA_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3441 	strb.w	r3, [r7, #1089]	; 0x441
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3440 	strb.w	r3, [r7, #1088]	; 0x440
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 343e 	strb.w	r3, [r7, #1086]	; 0x43e
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 343c 	strb.w	r3, [r7, #1084]	; 0x43c
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80019ee:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80019f2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80019f6:	22aa      	movs	r2, #170	; 0xaa
 80019f8:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = UART_TBMS_WRITE_REG_BLOCK;
 80019fa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80019fe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001a02:	220b      	movs	r2, #11
 8001a04:	705a      	strb	r2, [r3, #1]

	tx_buffer[2] = pl;
 8001a06:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001a0a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001a0e:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001a12:	f2a2 423d 	subw	r2, r2, #1085	; 0x43d
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	709a      	strb	r2, [r3, #2]

	uint8_t bit7 = ((pl >> 7) & 1); //extract bit 7
 8001a1a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001a1e:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	09db      	lsrs	r3, r3, #7
 8001a26:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
	uint8_t bits05 = (pl & 63); //extract bits 0-5
 8001a2a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001a2e:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a38:	f887 3434 	strb.w	r3, [r7, #1076]	; 0x434

	//if bit7 == 1
	if(bit7) {
 8001a3c:	f897 3435 	ldrb.w	r3, [r7, #1077]	; 0x435
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <TinyBMS_UART_WriteRegBlock+0xde>
		printf("Current packet ID: 0x%02X\r\n", bits05);
 8001a44:	f897 3434 	ldrb.w	r3, [r7, #1076]	; 0x434
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4899      	ldr	r0, [pc, #612]	; (8001cb0 <TinyBMS_UART_WriteRegBlock+0x33c>)
 8001a4c:	f00b fe22 	bl	800d694 <iprintf>
 8001a50:	e005      	b.n	8001a5e <TinyBMS_UART_WriteRegBlock+0xea>
	//else bit7 == 0
	} else {
		printf("Payload size in bytes (last packet): 0x%02X\r\n", bits05);
 8001a52:	f897 3434 	ldrb.w	r3, [r7, #1076]	; 0x434
 8001a56:	4619      	mov	r1, r3
 8001a58:	4896      	ldr	r0, [pc, #600]	; (8001cb4 <TinyBMS_UART_WriteRegBlock+0x340>)
 8001a5a:	f00b fe1b 	bl	800d694 <iprintf>
	}

	//Address out of bounds
	if((addr < 0x012C) || (addr > 0x018F)) {
 8001a5e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001a62:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a6c:	d307      	bcc.n	8001a7e <TinyBMS_UART_WriteRegBlock+0x10a>
 8001a6e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001a72:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a7c:	d308      	bcc.n	8001a90 <TinyBMS_UART_WriteRegBlock+0x11c>
		printf("Invalid - register address out of bounds. Must be between 0x012C-0x018F\r\n");
 8001a7e:	488e      	ldr	r0, [pc, #568]	; (8001cb8 <TinyBMS_UART_WriteRegBlock+0x344>)
 8001a80:	f00b fe8e 	bl	800d7a0 <puts>
		retval = CMD_FAILURE;
 8001a84:	23ff      	movs	r3, #255	; 0xff
 8001a86:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
		return retval;
 8001a8a:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8001a8e:	e186      	b.n	8001d9e <TinyBMS_UART_WriteRegBlock+0x42a>
	}

	ADDR_LSB = (addr & 0xFF);
 8001a90:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001a94:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	f887 3441 	strb.w	r3, [r7, #1089]	; 0x441
	ADDR_MSB = ((addr >> 8) & 0xFF);
 8001a9e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001aa2:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f887 3440 	strb.w	r3, [r7, #1088]	; 0x440
	tx_buffer[3] = ADDR_LSB;
 8001ab0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001ab4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001ab8:	f897 2441 	ldrb.w	r2, [r7, #1089]	; 0x441
 8001abc:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = ADDR_MSB;
 8001abe:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001ac2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001ac6:	f897 2440 	ldrb.w	r2, [r7, #1088]	; 0x440
 8001aca:	711a      	strb	r2, [r3, #4]

	uint16_t numDATA = ((pl - 2) / 2); //Subtract out 2 bytes for address, then 2 bytes per data
 8001acc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001ad0:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	3b02      	subs	r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <TinyBMS_UART_WriteRegBlock+0x16a>
 8001adc:	3301      	adds	r3, #1
 8001ade:	105b      	asrs	r3, r3, #1
 8001ae0:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432
	uint16_t n = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8a7 3444 	strh.w	r3, [r7, #1092]	; 0x444

	//input array data[] contains n uint16_t elements
	for(uint16_t i = 0; i < numDATA; i++) {
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8a7 3442 	strh.w	r3, [r7, #1090]	; 0x442
 8001af0:	e03a      	b.n	8001b68 <TinyBMS_UART_WriteRegBlock+0x1f4>
		n++; //n = 1,2,3,.. data#
 8001af2:	f8b7 3444 	ldrh.w	r3, [r7, #1092]	; 0x444
 8001af6:	3301      	adds	r3, #1
 8001af8:	f8a7 3444 	strh.w	r3, [r7, #1092]	; 0x444
		DATA_LSB = (data[i] & 0xFF);
 8001afc:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001b06:	f2a2 4244 	subw	r2, r2, #1092	; 0x444
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
		DATA_MSB = ((data[i] >> 8) & 0xFF);
 8001b14:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001b1e:	f2a2 4244 	subw	r2, r2, #1092	; 0x444
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f887 343e 	strb.w	r3, [r7, #1086]	; 0x43e
		tx_buffer[(2*n)+4-1] = DATA_LSB; //for n=1,2,3,.. index: 3,5,7,..
 8001b30:	f8b7 3444 	ldrh.w	r3, [r7, #1092]	; 0x444
 8001b34:	3302      	adds	r3, #2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001b3e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001b42:	f897 143f 	ldrb.w	r1, [r7, #1087]	; 0x43f
 8001b46:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(2*n)+5-1] = DATA_MSB; //for n=1,2,3,.. index: 4,6,8,..
 8001b48:	f8b7 3444 	ldrh.w	r3, [r7, #1092]	; 0x444
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001b54:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001b58:	f897 143e 	ldrb.w	r1, [r7, #1086]	; 0x43e
 8001b5c:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < numDATA; i++) {
 8001b5e:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001b62:	3301      	adds	r3, #1
 8001b64:	f8a7 3442 	strh.w	r3, [r7, #1090]	; 0x442
 8001b68:	f8b7 2442 	ldrh.w	r2, [r7, #1090]	; 0x442
 8001b6c:	f8b7 3432 	ldrh.w	r3, [r7, #1074]	; 0x432
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d3be      	bcc.n	8001af2 <TinyBMS_UART_WriteRegBlock+0x17e>
	}

	CRC_request = CRC16(tx_buffer, pl+3);
 8001b74:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001b78:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3303      	adds	r3, #3
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f005 feba 	bl	8007904 <CRC16>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
	CRC_LSB = (CRC_request & 0xFF);
 8001b96:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8001b9a:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8001b9e:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	f887 343c 	strb.w	r3, [r7, #1084]	; 0x43c
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[(2*n)+6-1] = CRC_LSB;
 8001baa:	f8b7 3444 	ldrh.w	r3, [r7, #1092]	; 0x444
 8001bae:	3303      	adds	r3, #3
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001bb8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001bbc:	f897 143d 	ldrb.w	r1, [r7, #1085]	; 0x43d
 8001bc0:	54d1      	strb	r1, [r2, r3]
	tx_buffer[(2*n)+7-1] = CRC_MSB;
 8001bc2:	f8b7 3444 	ldrh.w	r3, [r7, #1092]	; 0x444
 8001bc6:	3303      	adds	r3, #3
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8001bce:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001bd2:	f897 143c 	ldrb.w	r1, [r7, #1084]	; 0x43c
 8001bd6:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, pl+5);
 8001bd8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001bdc:	f2a3 433d 	subw	r3, r3, #1085	; 0x43d
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3305      	adds	r3, #5
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bec:	4619      	mov	r1, r3
 8001bee:	4833      	ldr	r0, [pc, #204]	; (8001cbc <TinyBMS_UART_WriteRegBlock+0x348>)
 8001bf0:	f009 fda0 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	482f      	ldr	r0, [pc, #188]	; (8001cbc <TinyBMS_UART_WriteRegBlock+0x348>)
 8001bfe:	f009 fe07 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8001c02:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001c06:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2baa      	cmp	r3, #170	; 0xaa
 8001c0e:	f040 80b8 	bne.w	8001d82 <TinyBMS_UART_WriteRegBlock+0x40e>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8001c12:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001c16:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d155      	bne.n	8001ccc <TinyBMS_UART_WriteRegBlock+0x358>
			printf("Response from BMS [ERROR]\r\n");
 8001c20:	4827      	ldr	r0, [pc, #156]	; (8001cc0 <TinyBMS_UART_WriteRegBlock+0x34c>)
 8001c22:	f00b fdbd 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4822      	ldr	r0, [pc, #136]	; (8001cbc <TinyBMS_UART_WriteRegBlock+0x348>)
 8001c32:	f009 fded 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8001c36:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001c3a:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001c3e:	78db      	ldrb	r3, [r3, #3]
 8001c40:	f887 3431 	strb.w	r3, [r7, #1073]	; 0x431

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8001c44:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001c48:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001c4c:	795b      	ldrb	r3, [r3, #5]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001c56:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001c5a:	791b      	ldrb	r3, [r3, #4]
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f005 fe49 	bl	8007904 <CRC16>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438

			if(CRC_calc == CRC_reply) {
 8001c78:	f8b7 2438 	ldrh.w	r2, [r7, #1080]	; 0x438
 8001c7c:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	; 0x436
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <TinyBMS_UART_WriteRegBlock+0x31e>
				printf("CRC pass\r\n");
 8001c84:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <TinyBMS_UART_WriteRegBlock+0x350>)
 8001c86:	f00b fd8b 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8001c8a:	23ff      	movs	r3, #255	; 0xff
 8001c8c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8001c90:	e005      	b.n	8001c9e <TinyBMS_UART_WriteRegBlock+0x32a>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <TinyBMS_UART_WriteRegBlock+0x354>)
 8001c94:	f00b fd84 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8001c98:	23ff      	movs	r3, #255	; 0xff
 8001c9a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
			}
			reportBMSError(error);
 8001c9e:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f005 fe0c 	bl	80078c0 <reportBMSError>
 8001ca8:	e077      	b.n	8001d9a <TinyBMS_UART_WriteRegBlock+0x426>
 8001caa:	bf00      	nop
 8001cac:	08010c40 	.word	0x08010c40
 8001cb0:	08010a08 	.word	0x08010a08
 8001cb4:	08010a24 	.word	0x08010a24
 8001cb8:	08010c5c 	.word	0x08010c5c
 8001cbc:	20000228 	.word	0x20000228
 8001cc0:	080109d4 	.word	0x080109d4
 8001cc4:	080108f0 	.word	0x080108f0
 8001cc8:	080108fc 	.word	0x080108fc

		//[OK]
		} else if(rx_buffer[1] == ACK) {
 8001ccc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001cd0:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d146      	bne.n	8001d68 <TinyBMS_UART_WriteRegBlock+0x3f4>
			printf("Response from BMS [ACK]\r\n");
 8001cda:	4833      	ldr	r0, [pc, #204]	; (8001da8 <TinyBMS_UART_WriteRegBlock+0x434>)
 8001cdc:	f00b fd60 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 3); //read byte 3-5 from ACK reply
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4830      	ldr	r0, [pc, #192]	; (8001dac <TinyBMS_UART_WriteRegBlock+0x438>)
 8001cec:	f009 fd90 	bl	800b810 <HAL_UART_Receive_IT>

			if(rx_buffer[2] == UART_TBMS_WRITE_REG_BLOCK) {
 8001cf0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001cf4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001cf8:	789b      	ldrb	r3, [r3, #2]
 8001cfa:	2b0b      	cmp	r3, #11
 8001cfc:	d130      	bne.n	8001d60 <TinyBMS_UART_WriteRegBlock+0x3ec>
				CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8001cfe:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001d02:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001d06:	795b      	ldrb	r3, [r3, #5]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001d10:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
				CRC_calc = CRC16(rx_buffer, 3); //Calc CRC for bytes 1-3 of ACK response
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2103      	movs	r1, #3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fdec 	bl	8007904 <CRC16>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438

				if(CRC_calc == CRC_reply) {
 8001d32:	f8b7 2438 	ldrh.w	r2, [r7, #1080]	; 0x438
 8001d36:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	; 0x436
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d109      	bne.n	8001d52 <TinyBMS_UART_WriteRegBlock+0x3de>
					printf("CRC pass\r\n");
 8001d3e:	481c      	ldr	r0, [pc, #112]	; (8001db0 <TinyBMS_UART_WriteRegBlock+0x43c>)
 8001d40:	f00b fd2e 	bl	800d7a0 <puts>
					printf("ACK!\r\n");
 8001d44:	481b      	ldr	r0, [pc, #108]	; (8001db4 <TinyBMS_UART_WriteRegBlock+0x440>)
 8001d46:	f00b fd2b 	bl	800d7a0 <puts>
					retval = CMD_SUCCESS;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8001d50:	e023      	b.n	8001d9a <TinyBMS_UART_WriteRegBlock+0x426>

				} else {
					printf("CRC fail in BMS OK\r\n");
 8001d52:	4819      	ldr	r0, [pc, #100]	; (8001db8 <TinyBMS_UART_WriteRegBlock+0x444>)
 8001d54:	f00b fd24 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 8001d58:	23ff      	movs	r3, #255	; 0xff
 8001d5a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8001d5e:	e01c      	b.n	8001d9a <TinyBMS_UART_WriteRegBlock+0x426>
				}
			} else {
				retval = CMD_FAILURE;
 8001d60:	23ff      	movs	r3, #255	; 0xff
 8001d62:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8001d66:	e018      	b.n	8001d9a <TinyBMS_UART_WriteRegBlock+0x426>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x01 but was 0x%02X\r\n", rx_buffer[1]);
 8001d68:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001d6c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001d70:	785b      	ldrb	r3, [r3, #1]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4811      	ldr	r0, [pc, #68]	; (8001dbc <TinyBMS_UART_WriteRegBlock+0x448>)
 8001d76:	f00b fc8d 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8001d7a:	23ff      	movs	r3, #255	; 0xff
 8001d7c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8001d80:	e00b      	b.n	8001d9a <TinyBMS_UART_WriteRegBlock+0x426>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8001d82:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001d86:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <TinyBMS_UART_WriteRegBlock+0x44c>)
 8001d90:	f00b fc80 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8001d94:	23ff      	movs	r3, #255	; 0xff
 8001d96:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
	}

	return retval;
 8001d9a:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f207 474c 	addw	r7, r7, #1100	; 0x44c
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd90      	pop	{r4, r7, pc}
 8001da8:	08010914 	.word	0x08010914
 8001dac:	20000228 	.word	0x20000228
 8001db0:	080108f0 	.word	0x080108f0
 8001db4:	08010930 	.word	0x08010930
 8001db8:	08010b1c 	.word	0x08010b1c
 8001dbc:	08010950 	.word	0x08010950
 8001dc0:	08010988 	.word	0x08010988

08001dc4 <TinyBMS_UART_WriteRegIndividual>:
 * 										Individual Register request to BMS:
 * 						 	Byte n*4   Byte n*4+1  Byte n*4+2  Byte n*4+3  Byte n*4+4  Byte n*4+5
 * 						 	ADDRn:LSB  ADDRn:MSB   DATAn:LSB   DATAn:MSB   CRC:LSB     CRC:MSB
 * 						 	      [UINT16]			     [UINT16]
 */
uint8_t TinyBMS_UART_WriteRegIndividual(UART_HandleTypeDef *huart, uint8_t pl, uint16_t addr[], uint16_t data[]) {
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	f2ad 7dfc 	subw	sp, sp, #2044	; 0x7fc
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	f507 64ff 	add.w	r4, r7, #2040	; 0x7f8
 8001dd0:	f2a4 74ec 	subw	r4, r4, #2028	; 0x7ec
 8001dd4:	6020      	str	r0, [r4, #0]
 8001dd6:	4608      	mov	r0, r1
 8001dd8:	f507 61ff 	add.w	r1, r7, #2040	; 0x7f8
 8001ddc:	f2a1 71f4 	subw	r1, r1, #2036	; 0x7f4
 8001de0:	600a      	str	r2, [r1, #0]
 8001de2:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001de6:	f5a2 62ff 	sub.w	r2, r2, #2040	; 0x7f8
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001df0:	f2a3 73ed 	subw	r3, r3, #2029	; 0x7ed
 8001df4:	4602      	mov	r2, r0
 8001df6:	701a      	strb	r2, [r3, #0]
	printf("TinyBMS_UART_WriteRegIndividual\r\n");
 8001df8:	48cc      	ldr	r0, [pc, #816]	; (800212c <TinyBMS_UART_WriteRegIndividual+0x368>)
 8001dfa:	f00b fcd1 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8001dfe:	23ff      	movs	r3, #255	; 0xff
 8001e00:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7

	uint8_t tx_buffer[1000], rx_buffer[1000];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, DATA_LSB = 0, DATA_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 37f1 	strb.w	r3, [r7, #2033]	; 0x7f1
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 37f0 	strb.w	r3, [r7, #2032]	; 0x7f0
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 37ef 	strb.w	r3, [r7, #2031]	; 0x7ef
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 37ee 	strb.w	r3, [r7, #2030]	; 0x7ee
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 37ed 	strb.w	r3, [r7, #2029]	; 0x7ed
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 37ec 	strb.w	r3, [r7, #2028]	; 0x7ec
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8a7 37ea 	strh.w	r3, [r7, #2026]	; 0x7ea
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8a7 37e8 	strh.w	r3, [r7, #2024]	; 0x7e8
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8a7 37e6 	strh.w	r3, [r7, #2022]	; 0x7e6

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8001e3a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001e3e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e42:	22aa      	movs	r2, #170	; 0xaa
 8001e44:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = UART_TBMS_WRITE_INDIVIDUAL_REGS;
 8001e46:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001e4a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e4e:	220d      	movs	r2, #13
 8001e50:	705a      	strb	r2, [r3, #1]

	tx_buffer[2] = pl;
 8001e52:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001e56:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e5a:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001e5e:	f2a2 72ed 	subw	r2, r2, #2029	; 0x7ed
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	709a      	strb	r2, [r3, #2]

	uint8_t bit7 = ((pl >> 7) & 1); //extract bit 7
 8001e66:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001e6a:	f2a3 73ed 	subw	r3, r3, #2029	; 0x7ed
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	09db      	lsrs	r3, r3, #7
 8001e72:	f887 37e5 	strb.w	r3, [r7, #2021]	; 0x7e5
	uint8_t bits05 = (pl & 63); //extract bits 0-5
 8001e76:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001e7a:	f2a3 73ed 	subw	r3, r3, #2029	; 0x7ed
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e84:	f887 37e4 	strb.w	r3, [r7, #2020]	; 0x7e4

	//if bit7 == 1
	if(bit7) {
 8001e88:	f897 37e5 	ldrb.w	r3, [r7, #2021]	; 0x7e5
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <TinyBMS_UART_WriteRegIndividual+0xda>
		printf("Current packet ID: 0x%02X\r\n", bits05);
 8001e90:	f897 37e4 	ldrb.w	r3, [r7, #2020]	; 0x7e4
 8001e94:	4619      	mov	r1, r3
 8001e96:	48a6      	ldr	r0, [pc, #664]	; (8002130 <TinyBMS_UART_WriteRegIndividual+0x36c>)
 8001e98:	f00b fbfc 	bl	800d694 <iprintf>
 8001e9c:	e005      	b.n	8001eaa <TinyBMS_UART_WriteRegIndividual+0xe6>
	//else bit7 == 0
	} else {
		printf("Payload size in bytes (last packet): 0x%02X\r\n", bits05);
 8001e9e:	f897 37e4 	ldrb.w	r3, [r7, #2020]	; 0x7e4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	48a3      	ldr	r0, [pc, #652]	; (8002134 <TinyBMS_UART_WriteRegIndividual+0x370>)
 8001ea6:	f00b fbf5 	bl	800d694 <iprintf>
	}

	uint16_t numELEMENTS = (pl / 4); //2 bytes per address, 2 bytes per data
 8001eaa:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001eae:	f2a3 73ed 	subw	r3, r3, #2029	; 0x7ed
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f8a7 37e2 	strh.w	r3, [r7, #2018]	; 0x7e2
	uint16_t n = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4

	//input arrays addr[] data[] contains n uint16_t elements
	for(uint16_t i = 0; i < numELEMENTS; i++) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
 8001ec8:	e08e      	b.n	8001fe8 <TinyBMS_UART_WriteRegIndividual+0x224>
		n++; //n = 1,2,3,.. addr# data#
 8001eca:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f8a7 37f4 	strh.w	r3, [r7, #2036]	; 0x7f4

		//Address out of bounds
		if((addr[i] < 0x012C) || (addr[i] > 0x018F)) {
 8001ed4:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001ede:	f2a2 72f4 	subw	r2, r2, #2036	; 0x7f4
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001eec:	d30c      	bcc.n	8001f08 <TinyBMS_UART_WriteRegIndividual+0x144>
 8001eee:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001ef8:	f2a2 72f4 	subw	r2, r2, #2036	; 0x7f4
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f06:	d30b      	bcc.n	8001f20 <TinyBMS_UART_WriteRegIndividual+0x15c>
			printf("Invalid - register address out of bounds from index %u. Must be between 0x012C-0x018F\r\n", i);
 8001f08:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	488a      	ldr	r0, [pc, #552]	; (8002138 <TinyBMS_UART_WriteRegIndividual+0x374>)
 8001f10:	f00b fbc0 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8001f14:	23ff      	movs	r3, #255	; 0xff
 8001f16:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
			return retval;
 8001f1a:	f897 37f7 	ldrb.w	r3, [r7, #2039]	; 0x7f7
 8001f1e:	e17e      	b.n	800221e <TinyBMS_UART_WriteRegIndividual+0x45a>
		}
		ADDR_LSB = (addr[i] & 0xFF);
 8001f20:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001f2a:	f2a2 72f4 	subw	r2, r2, #2036	; 0x7f4
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	f887 37f1 	strb.w	r3, [r7, #2033]	; 0x7f1
		ADDR_MSB = ((addr[i] >> 8) & 0xFF);
 8001f38:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001f42:	f2a2 72f4 	subw	r2, r2, #2036	; 0x7f4
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f887 37f0 	strb.w	r3, [r7, #2032]	; 0x7f0
		tx_buffer[(4*n)-1] = ADDR_LSB;
 8001f54:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001f60:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001f64:	f897 17f1 	ldrb.w	r1, [r7, #2033]	; 0x7f1
 8001f68:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(4*n)+1-1] = ADDR_MSB;
 8001f6a:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001f74:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001f78:	f897 17f0 	ldrb.w	r1, [r7, #2032]	; 0x7f0
 8001f7c:	54d1      	strb	r1, [r2, r3]

		DATA_LSB = (data[i] & 0xFF);
 8001f7e:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001f88:	f5a2 62ff 	sub.w	r2, r2, #2040	; 0x7f8
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f887 37ef 	strb.w	r3, [r7, #2031]	; 0x7ef
		DATA_MSB = ((data[i] >> 8) & 0xFF);
 8001f96:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001fa0:	f5a2 62ff 	sub.w	r2, r2, #2040	; 0x7f8
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f887 37ee 	strb.w	r3, [r7, #2030]	; 0x7ee
		tx_buffer[(4*n)+2-1] = DATA_LSB; //for n=1,2,3,.. index: 3,5,7,..
 8001fb2:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001fbe:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001fc2:	f897 17ef 	ldrb.w	r1, [r7, #2031]	; 0x7ef
 8001fc6:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(4*n)+3-1] = DATA_MSB; //for n=1,2,3,.. index: 4,6,8,..
 8001fc8:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8001fd4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001fd8:	f897 17ee 	ldrb.w	r1, [r7, #2030]	; 0x7ee
 8001fdc:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < numELEMENTS; i++) {
 8001fde:	f8b7 37f2 	ldrh.w	r3, [r7, #2034]	; 0x7f2
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f8a7 37f2 	strh.w	r3, [r7, #2034]	; 0x7f2
 8001fe8:	f8b7 27f2 	ldrh.w	r2, [r7, #2034]	; 0x7f2
 8001fec:	f8b7 37e2 	ldrh.w	r3, [r7, #2018]	; 0x7e2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f4ff af6a 	bcc.w	8001eca <TinyBMS_UART_WriteRegIndividual+0x106>
	}

	CRC_request = CRC16(tx_buffer, pl+3);
 8001ff6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001ffa:	f2a3 73ed 	subw	r3, r3, #2029	; 0x7ed
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	3303      	adds	r3, #3
 8002004:	b29a      	uxth	r2, r3
 8002006:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f005 fc79 	bl	8007904 <CRC16>
 8002012:	4603      	mov	r3, r0
 8002014:	f8a7 37ea 	strh.w	r3, [r7, #2026]	; 0x7ea
	CRC_LSB = (CRC_request & 0xFF);
 8002018:	f8b7 37ea 	ldrh.w	r3, [r7, #2026]	; 0x7ea
 800201c:	f887 37ed 	strb.w	r3, [r7, #2029]	; 0x7ed
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8002020:	f8b7 37ea 	ldrh.w	r3, [r7, #2026]	; 0x7ea
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	f887 37ec 	strb.w	r3, [r7, #2028]	; 0x7ec
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[(4*n)+4-1] = CRC_LSB;
 800202c:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 8002030:	3301      	adds	r3, #1
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3b01      	subs	r3, #1
 8002036:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800203a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800203e:	f897 17ed 	ldrb.w	r1, [r7, #2029]	; 0x7ed
 8002042:	54d1      	strb	r1, [r2, r3]
	tx_buffer[(4*n)+5-1] = CRC_MSB;
 8002044:	f8b7 37f4 	ldrh.w	r3, [r7, #2036]	; 0x7f4
 8002048:	3301      	adds	r3, #1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8002050:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002054:	f897 17ec 	ldrb.w	r1, [r7, #2028]	; 0x7ec
 8002058:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, pl+5);
 800205a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800205e:	f2a3 73ed 	subw	r3, r3, #2029	; 0x7ed
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	3305      	adds	r3, #5
 8002068:	b29a      	uxth	r2, r3
 800206a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800206e:	4619      	mov	r1, r3
 8002070:	4832      	ldr	r0, [pc, #200]	; (800213c <TinyBMS_UART_WriteRegIndividual+0x378>)
 8002072:	f009 fb5f 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	2202      	movs	r2, #2
 800207c:	4619      	mov	r1, r3
 800207e:	482f      	ldr	r0, [pc, #188]	; (800213c <TinyBMS_UART_WriteRegIndividual+0x378>)
 8002080:	f009 fbc6 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8002084:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002088:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2baa      	cmp	r3, #170	; 0xaa
 8002090:	f040 80b7 	bne.w	8002202 <TinyBMS_UART_WriteRegIndividual+0x43e>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8002094:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002098:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 800209c:	785b      	ldrb	r3, [r3, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d154      	bne.n	800214c <TinyBMS_UART_WriteRegIndividual+0x388>
			printf("Response from BMS [ERROR]\r\n");
 80020a2:	4827      	ldr	r0, [pc, #156]	; (8002140 <TinyBMS_UART_WriteRegIndividual+0x37c>)
 80020a4:	f00b fb7c 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	3302      	adds	r3, #2
 80020ae:	2204      	movs	r2, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4822      	ldr	r0, [pc, #136]	; (800213c <TinyBMS_UART_WriteRegIndividual+0x378>)
 80020b4:	f009 fbac 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80020b8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80020bc:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80020c0:	78db      	ldrb	r3, [r3, #3]
 80020c2:	f887 37e1 	strb.w	r3, [r7, #2017]	; 0x7e1

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80020c6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80020ca:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80020ce:	795b      	ldrb	r3, [r3, #5]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80020d8:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80020dc:	791b      	ldrb	r3, [r3, #4]
 80020de:	b21b      	sxth	r3, r3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	f8a7 37e6 	strh.w	r3, [r7, #2022]	; 0x7e6
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	2104      	movs	r1, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f005 fc08 	bl	8007904 <CRC16>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f8a7 37e8 	strh.w	r3, [r7, #2024]	; 0x7e8

			if(CRC_calc == CRC_reply) {
 80020fa:	f8b7 27e8 	ldrh.w	r2, [r7, #2024]	; 0x7e8
 80020fe:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	; 0x7e6
 8002102:	429a      	cmp	r2, r3
 8002104:	d106      	bne.n	8002114 <TinyBMS_UART_WriteRegIndividual+0x350>
				printf("CRC pass\r\n");
 8002106:	480f      	ldr	r0, [pc, #60]	; (8002144 <TinyBMS_UART_WriteRegIndividual+0x380>)
 8002108:	f00b fb4a 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800210c:	23ff      	movs	r3, #255	; 0xff
 800210e:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
 8002112:	e005      	b.n	8002120 <TinyBMS_UART_WriteRegIndividual+0x35c>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8002114:	480c      	ldr	r0, [pc, #48]	; (8002148 <TinyBMS_UART_WriteRegIndividual+0x384>)
 8002116:	f00b fb43 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800211a:	23ff      	movs	r3, #255	; 0xff
 800211c:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
			}
			reportBMSError(error);
 8002120:	f897 37e1 	ldrb.w	r3, [r7, #2017]	; 0x7e1
 8002124:	4618      	mov	r0, r3
 8002126:	f005 fbcb 	bl	80078c0 <reportBMSError>
 800212a:	e076      	b.n	800221a <TinyBMS_UART_WriteRegIndividual+0x456>
 800212c:	08010ca8 	.word	0x08010ca8
 8002130:	08010a08 	.word	0x08010a08
 8002134:	08010a24 	.word	0x08010a24
 8002138:	08010ccc 	.word	0x08010ccc
 800213c:	20000228 	.word	0x20000228
 8002140:	080109d4 	.word	0x080109d4
 8002144:	080108f0 	.word	0x080108f0
 8002148:	080108fc 	.word	0x080108fc

		//[OK]
		} else if(rx_buffer[1] == ACK) {
 800214c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002150:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d146      	bne.n	80021e8 <TinyBMS_UART_WriteRegIndividual+0x424>
			printf("Response from BMS [ACK]\r\n");
 800215a:	4833      	ldr	r0, [pc, #204]	; (8002228 <TinyBMS_UART_WriteRegIndividual+0x464>)
 800215c:	f00b fb20 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 3); //read bytes 3-5 from ACK reply
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	3302      	adds	r3, #2
 8002166:	2203      	movs	r2, #3
 8002168:	4619      	mov	r1, r3
 800216a:	4830      	ldr	r0, [pc, #192]	; (800222c <TinyBMS_UART_WriteRegIndividual+0x468>)
 800216c:	f009 fb50 	bl	800b810 <HAL_UART_Receive_IT>

			if(rx_buffer[2] == UART_TBMS_WRITE_INDIVIDUAL_REGS) {
 8002170:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002174:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8002178:	789b      	ldrb	r3, [r3, #2]
 800217a:	2b0d      	cmp	r3, #13
 800217c:	d130      	bne.n	80021e0 <TinyBMS_UART_WriteRegIndividual+0x41c>
				CRC_reply = ((rx_buffer[4] << 8) | rx_buffer[3]);
 800217e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002182:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8002186:	791b      	ldrb	r3, [r3, #4]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	b21a      	sxth	r2, r3
 800218c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002190:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8002194:	78db      	ldrb	r3, [r3, #3]
 8002196:	b21b      	sxth	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b21b      	sxth	r3, r3
 800219c:	f8a7 37e6 	strh.w	r3, [r7, #2022]	; 0x7e6
				CRC_calc = CRC16(rx_buffer, 3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	2103      	movs	r1, #3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f005 fbac 	bl	8007904 <CRC16>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f8a7 37e8 	strh.w	r3, [r7, #2024]	; 0x7e8

				if(CRC_calc == CRC_reply) {
 80021b2:	f8b7 27e8 	ldrh.w	r2, [r7, #2024]	; 0x7e8
 80021b6:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	; 0x7e6
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d109      	bne.n	80021d2 <TinyBMS_UART_WriteRegIndividual+0x40e>
					printf("CRC pass\r\n");
 80021be:	481c      	ldr	r0, [pc, #112]	; (8002230 <TinyBMS_UART_WriteRegIndividual+0x46c>)
 80021c0:	f00b faee 	bl	800d7a0 <puts>
					printf("ACK!\r\n");
 80021c4:	481b      	ldr	r0, [pc, #108]	; (8002234 <TinyBMS_UART_WriteRegIndividual+0x470>)
 80021c6:	f00b faeb 	bl	800d7a0 <puts>
					retval = CMD_SUCCESS;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
 80021d0:	e023      	b.n	800221a <TinyBMS_UART_WriteRegIndividual+0x456>

				} else {
					printf("CRC fail in BMS OK\r\n");
 80021d2:	4819      	ldr	r0, [pc, #100]	; (8002238 <TinyBMS_UART_WriteRegIndividual+0x474>)
 80021d4:	f00b fae4 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 80021d8:	23ff      	movs	r3, #255	; 0xff
 80021da:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
 80021de:	e01c      	b.n	800221a <TinyBMS_UART_WriteRegIndividual+0x456>
				}
			} else {
				retval = CMD_FAILURE;
 80021e0:	23ff      	movs	r3, #255	; 0xff
 80021e2:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
 80021e6:	e018      	b.n	800221a <TinyBMS_UART_WriteRegIndividual+0x456>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x01 but was 0x%02X\r\n", rx_buffer[1]);
 80021e8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80021ec:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	4619      	mov	r1, r3
 80021f4:	4811      	ldr	r0, [pc, #68]	; (800223c <TinyBMS_UART_WriteRegIndividual+0x478>)
 80021f6:	f00b fa4d 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 80021fa:	23ff      	movs	r3, #255	; 0xff
 80021fc:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
 8002200:	e00b      	b.n	800221a <TinyBMS_UART_WriteRegIndividual+0x456>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8002202:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8002206:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	480c      	ldr	r0, [pc, #48]	; (8002240 <TinyBMS_UART_WriteRegIndividual+0x47c>)
 8002210:	f00b fa40 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8002214:	23ff      	movs	r3, #255	; 0xff
 8002216:	f887 37f7 	strb.w	r3, [r7, #2039]	; 0x7f7
	}

	return retval;
 800221a:	f897 37f7 	ldrb.w	r3, [r7, #2039]	; 0x7f7
}
 800221e:	4618      	mov	r0, r3
 8002220:	f207 77fc 	addw	r7, r7, #2044	; 0x7fc
 8002224:	46bd      	mov	sp, r7
 8002226:	bd90      	pop	{r4, r7, pc}
 8002228:	08010914 	.word	0x08010914
 800222c:	20000228 	.word	0x20000228
 8002230:	080108f0 	.word	0x080108f0
 8002234:	08010930 	.word	0x08010930
 8002238:	08010b1c 	.word	0x08010b1c
 800223c:	08010950 	.word	0x08010950
 8002240:	08010988 	.word	0x08010988

08002244 <TinyBMS_UART_ReadRegBlockMODBUS>:
 * 							  Individual Register Response from BMS [OK]:
 * 						 	  Byte n*2+2  Byte n*2+3  Byte n*2+4  Byte n*2+5
 * 						 	  DATAn:MSB   DATAn:LSB   CRC:LSB     CRC:MSB
 * 						 	        [UINT16]
 */
uint8_t TinyBMS_UART_ReadRegBlockMODBUS(UART_HandleTypeDef *huart, uint16_t addr, uint8_t rl) {
 8002244:	b580      	push	{r7, lr}
 8002246:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 800224a:	af00      	add	r7, sp, #0
 800224c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8002250:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8002254:	6018      	str	r0, [r3, #0]
 8002256:	4608      	mov	r0, r1
 8002258:	4611      	mov	r1, r2
 800225a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800225e:	f2a3 4346 	subw	r3, r3, #1094	; 0x446
 8002262:	4602      	mov	r2, r0
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800226a:	f2a3 4347 	subw	r3, r3, #1095	; 0x447
 800226e:	460a      	mov	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]
	printf("TinyBMS_UART_ReadRegBlockMODBUS\r\n");
 8002272:	48d3      	ldr	r0, [pc, #844]	; (80025c0 <TinyBMS_UART_ReadRegBlockMODBUS+0x37c>)
 8002274:	f00b fa94 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8002278:	23ff      	movs	r3, #255	; 0xff
 800227a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447

	uint8_t tx_buffer[50], rx_buffer[1000];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3436 	strb.w	r3, [r7, #1078]	; 0x436
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
 800229c:	2300      	movs	r3, #0
 800229e:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8a7 3430 	strh.w	r3, [r7, #1072]	; 0x430

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80022a8:	23aa      	movs	r3, #170	; 0xaa
 80022aa:	f887 33f4 	strb.w	r3, [r7, #1012]	; 0x3f4
	tx_buffer[1] = UART_TBMS_READ_REG_BLOCK_MODBUS;
 80022ae:	2303      	movs	r3, #3
 80022b0:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5

	//First register's block address
	ADDR_MSB = ((addr >> 8) & 0xFF);
 80022b4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80022b8:	f2a3 4346 	subw	r3, r3, #1094	; 0x446
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
	ADDR_LSB = (addr & 0xFF);
 80022c6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80022ca:	f2a3 4346 	subw	r3, r3, #1094	; 0x446
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
	//MSB first
	tx_buffer[2] = ADDR_MSB;
 80022d4:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 80022d8:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6
	tx_buffer[3] = ADDR_LSB;
 80022dc:	f897 3439 	ldrb.w	r3, [r7, #1081]	; 0x439
 80022e0:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7

	tx_buffer[4] = 0x00;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8

	//rl out of bounds
	if((rl <= 0x00) || (rl > 0x7F)) {
 80022ea:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80022ee:	f2a3 4347 	subw	r3, r3, #1095	; 0x447
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <TinyBMS_UART_ReadRegBlockMODBUS+0xc4>
 80022f8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80022fc:	f2a3 4347 	subw	r3, r3, #1095	; 0x447
 8002300:	f993 3000 	ldrsb.w	r3, [r3]
 8002304:	2b00      	cmp	r3, #0
 8002306:	da08      	bge.n	800231a <TinyBMS_UART_ReadRegBlockMODBUS+0xd6>
		printf("Invalid - registers to read value out of bounds. Max 127 (0x7F)\r\n");
 8002308:	48ae      	ldr	r0, [pc, #696]	; (80025c4 <TinyBMS_UART_ReadRegBlockMODBUS+0x380>)
 800230a:	f00b fa49 	bl	800d7a0 <puts>
		retval = CMD_FAILURE;
 800230e:	23ff      	movs	r3, #255	; 0xff
 8002310:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
		return retval;
 8002314:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8002318:	e183      	b.n	8002622 <TinyBMS_UART_ReadRegBlockMODBUS+0x3de>
	}
	tx_buffer[5] = rl;
 800231a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800231e:	f2a3 4347 	subw	r3, r3, #1095	; 0x447
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9

	CRC_request = CRC16(tx_buffer, 6);
 8002328:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 800232c:	2106      	movs	r1, #6
 800232e:	4618      	mov	r0, r3
 8002330:	f005 fae8 	bl	8007904 <CRC16>
 8002334:	4603      	mov	r3, r0
 8002336:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
	CRC_LSB = (CRC_request & 0xFF);
 800233a:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	; 0x434
 800233e:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8002342:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	; 0x434
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	f887 3436 	strb.w	r3, [r7, #1078]	; 0x436
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[6] = CRC_LSB;
 800234e:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 8002352:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
	tx_buffer[7] = CRC_MSB;
 8002356:	f897 3436 	ldrb.w	r3, [r7, #1078]	; 0x436
 800235a:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 8);
 800235e:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002362:	2208      	movs	r2, #8
 8002364:	4619      	mov	r1, r3
 8002366:	4898      	ldr	r0, [pc, #608]	; (80025c8 <TinyBMS_UART_ReadRegBlockMODBUS+0x384>)
 8002368:	f009 f9e4 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2202      	movs	r2, #2
 8002372:	4619      	mov	r1, r3
 8002374:	4894      	ldr	r0, [pc, #592]	; (80025c8 <TinyBMS_UART_ReadRegBlockMODBUS+0x384>)
 8002376:	f009 fa4b 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 800237a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800237e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2baa      	cmp	r3, #170	; 0xaa
 8002386:	f040 813e 	bne.w	8002606 <TinyBMS_UART_ReadRegBlockMODBUS+0x3c2>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 800238a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800238e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002392:	785b      	ldrb	r3, [r3, #1]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d144      	bne.n	8002422 <TinyBMS_UART_ReadRegBlockMODBUS+0x1de>
			printf("Response from BMS [ERROR]\r\n");
 8002398:	488c      	ldr	r0, [pc, #560]	; (80025cc <TinyBMS_UART_ReadRegBlockMODBUS+0x388>)
 800239a:	f00b fa01 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	3302      	adds	r3, #2
 80023a4:	2204      	movs	r2, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4887      	ldr	r0, [pc, #540]	; (80025c8 <TinyBMS_UART_ReadRegBlockMODBUS+0x384>)
 80023aa:	f009 fa31 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80023ae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80023b2:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80023b6:	78db      	ldrb	r3, [r3, #3]
 80023b8:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80023bc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80023c0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80023c4:	795b      	ldrb	r3, [r3, #5]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80023ce:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80023d2:	791b      	ldrb	r3, [r3, #4]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21b      	sxth	r3, r3
 80023da:	f8a7 3430 	strh.w	r3, [r7, #1072]	; 0x430
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	2104      	movs	r1, #4
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 fa8d 	bl	8007904 <CRC16>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432

			if(CRC_calc == CRC_reply) {
 80023f0:	f8b7 2432 	ldrh.w	r2, [r7, #1074]	; 0x432
 80023f4:	f8b7 3430 	ldrh.w	r3, [r7, #1072]	; 0x430
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <TinyBMS_UART_ReadRegBlockMODBUS+0x1c6>
				printf("CRC pass\r\n");
 80023fc:	4874      	ldr	r0, [pc, #464]	; (80025d0 <TinyBMS_UART_ReadRegBlockMODBUS+0x38c>)
 80023fe:	f00b f9cf 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002402:	23ff      	movs	r3, #255	; 0xff
 8002404:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8002408:	e005      	b.n	8002416 <TinyBMS_UART_ReadRegBlockMODBUS+0x1d2>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 800240a:	4872      	ldr	r0, [pc, #456]	; (80025d4 <TinyBMS_UART_ReadRegBlockMODBUS+0x390>)
 800240c:	f00b f9c8 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002410:	23ff      	movs	r3, #255	; 0xff
 8002412:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
			}
			reportBMSError(error);
 8002416:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 800241a:	4618      	mov	r0, r3
 800241c:	f005 fa50 	bl	80078c0 <reportBMSError>
 8002420:	e0fd      	b.n	800261e <TinyBMS_UART_ReadRegBlockMODBUS+0x3da>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_REG_BLOCK_MODBUS) {
 8002422:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8002426:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	2b03      	cmp	r3, #3
 800242e:	f040 80dd 	bne.w	80025ec <TinyBMS_UART_ReadRegBlockMODBUS+0x3a8>
			printf("Response from BMS [OK]\r\n");
 8002432:	4869      	ldr	r0, [pc, #420]	; (80025d8 <TinyBMS_UART_ReadRegBlockMODBUS+0x394>)
 8002434:	f00b f9b4 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	3302      	adds	r3, #2
 800243e:	2201      	movs	r2, #1
 8002440:	4619      	mov	r1, r3
 8002442:	4861      	ldr	r0, [pc, #388]	; (80025c8 <TinyBMS_UART_ReadRegBlockMODBUS+0x384>)
 8002444:	f009 f9e4 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t PL = rx_buffer[2];
 8002448:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800244c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002450:	789b      	ldrb	r3, [r3, #2]
 8002452:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 2*n+5 from OK reply
 8002456:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800245a:	b29b      	uxth	r3, r3
 800245c:	3302      	adds	r3, #2
 800245e:	b29a      	uxth	r2, r3
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	3303      	adds	r3, #3
 8002466:	4619      	mov	r1, r3
 8002468:	4857      	ldr	r0, [pc, #348]	; (80025c8 <TinyBMS_UART_ReadRegBlockMODBUS+0x384>)
 800246a:	f009 f9d1 	bl	800b810 <HAL_UART_Receive_IT>

			uint16_t DATA[] = {0};
 800246e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8002472:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002476:	2200      	movs	r2, #0
 8002478:	801a      	strh	r2, [r3, #0]
			uint32_t numDATA = (PL / 2); //2 bytes per data
 800247a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
			uint32_t n = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

			for(uint32_t i = 0; i < numDATA; i++) {
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8002492:	e02a      	b.n	80024ea <TinyBMS_UART_ReadRegBlockMODBUS+0x2a6>
				n++;
 8002494:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8002498:	3301      	adds	r3, #1
 800249a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
				//MSB first
				DATA[i] = (rx_buffer[(2*n)+2-1] << 8) | rx_buffer[(2*n)+3-1];
 800249e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80024a2:	3301      	adds	r3, #1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 80024ac:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80024ba:	3301      	adds	r3, #1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80024c2:	f2a1 413c 	subw	r1, r1, #1084	; 0x43c
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	b299      	uxth	r1, r3
 80024d0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80024d4:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80024d8:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 80024dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(uint32_t i = 0; i < numDATA; i++) {
 80024e0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80024e4:	3301      	adds	r3, #1
 80024e6:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 80024ea:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 80024ee:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3ce      	bcc.n	8002494 <TinyBMS_UART_ReadRegBlockMODBUS+0x250>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 80024f6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80024fa:	3302      	adds	r3, #2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8002502:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	b21a      	sxth	r2, r3
 800250c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8002510:	3302      	adds	r3, #2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 800251a:	f2a1 413c 	subw	r1, r1, #1084	; 0x43c
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	b21b      	sxth	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	b21b      	sxth	r3, r3
 8002526:	f8a7 3430 	strh.w	r3, [r7, #1072]	; 0x430
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 800252a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800252e:	b29b      	uxth	r3, r3
 8002530:	3303      	adds	r3, #3
 8002532:	b29a      	uxth	r2, r3
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f005 f9e2 	bl	8007904 <CRC16>
 8002540:	4603      	mov	r3, r0
 8002542:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432

			if(CRC_calc == CRC_reply) {
 8002546:	f8b7 2432 	ldrh.w	r2, [r7, #1074]	; 0x432
 800254a:	f8b7 3430 	ldrh.w	r3, [r7, #1072]	; 0x430
 800254e:	429a      	cmp	r2, r3
 8002550:	d12f      	bne.n	80025b2 <TinyBMS_UART_ReadRegBlockMODBUS+0x36e>
				printf("CRC pass\r\n");
 8002552:	481f      	ldr	r0, [pc, #124]	; (80025d0 <TinyBMS_UART_ReadRegBlockMODBUS+0x38c>)
 8002554:	f00b f924 	bl	800d7a0 <puts>

				//Print the Register Block Contents
				printf("************ TinyBMS Register Block Contents ************\r\n");
 8002558:	4820      	ldr	r0, [pc, #128]	; (80025dc <TinyBMS_UART_ReadRegBlockMODBUS+0x398>)
 800255a:	f00b f921 	bl	800d7a0 <puts>
				for(uint16_t i = 0; i < numDATA; i++) {
 800255e:	2300      	movs	r3, #0
 8002560:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 8002564:	e018      	b.n	8002598 <TinyBMS_UART_ReadRegBlockMODBUS+0x354>
					printf("Register 0x%04X: Value: %u\r\n", addr+i, DATA[i]);
 8002566:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800256a:	f2a3 4346 	subw	r3, r3, #1094	; 0x446
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	f8b7 243a 	ldrh.w	r2, [r7, #1082]	; 0x43a
 800257a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800257e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002582:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002586:	461a      	mov	r2, r3
 8002588:	4815      	ldr	r0, [pc, #84]	; (80025e0 <TinyBMS_UART_ReadRegBlockMODBUS+0x39c>)
 800258a:	f00b f883 	bl	800d694 <iprintf>
				for(uint16_t i = 0; i < numDATA; i++) {
 800258e:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8002592:	3301      	adds	r3, #1
 8002594:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 8002598:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 800259c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8e0      	bhi.n	8002566 <TinyBMS_UART_ReadRegBlockMODBUS+0x322>
				}
				printf("----------------------------------------\r\n");
 80025a4:	480f      	ldr	r0, [pc, #60]	; (80025e4 <TinyBMS_UART_ReadRegBlockMODBUS+0x3a0>)
 80025a6:	f00b f8fb 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80025b0:	e035      	b.n	800261e <TinyBMS_UART_ReadRegBlockMODBUS+0x3da>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80025b2:	480d      	ldr	r0, [pc, #52]	; (80025e8 <TinyBMS_UART_ReadRegBlockMODBUS+0x3a4>)
 80025b4:	f00b f8f4 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80025b8:	23ff      	movs	r3, #255	; 0xff
 80025ba:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80025be:	e02e      	b.n	800261e <TinyBMS_UART_ReadRegBlockMODBUS+0x3da>
 80025c0:	08010d24 	.word	0x08010d24
 80025c4:	08010d48 	.word	0x08010d48
 80025c8:	20000228 	.word	0x20000228
 80025cc:	080109d4 	.word	0x080109d4
 80025d0:	080108f0 	.word	0x080108f0
 80025d4:	080108fc 	.word	0x080108fc
 80025d8:	080109f0 	.word	0x080109f0
 80025dc:	08010a54 	.word	0x08010a54
 80025e0:	08010ad0 	.word	0x08010ad0
 80025e4:	08010af0 	.word	0x08010af0
 80025e8:	08010b1c 	.word	0x08010b1c
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x03 but was 0x%02X\r\n", rx_buffer[1]);
 80025ec:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80025f0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	4619      	mov	r1, r3
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <TinyBMS_UART_ReadRegBlockMODBUS+0x3e8>)
 80025fa:	f00b f84b 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 80025fe:	23ff      	movs	r3, #255	; 0xff
 8002600:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8002604:	e00b      	b.n	800261e <TinyBMS_UART_ReadRegBlockMODBUS+0x3da>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8002606:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800260a:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	4807      	ldr	r0, [pc, #28]	; (8002630 <TinyBMS_UART_ReadRegBlockMODBUS+0x3ec>)
 8002614:	f00b f83e 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8002618:	23ff      	movs	r3, #255	; 0xff
 800261a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
	}

	return retval;
 800261e:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
}
 8002622:	4618      	mov	r0, r3
 8002624:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	08010d8c 	.word	0x08010d8c
 8002630:	08010988 	.word	0x08010988

08002634 <TinyBMS_UART_WriteRegBlockMODBUS>:
 * 							  Individual Register Response from BMS [OK]:
 * 						 	  Byte n*2+6  Byte n*2+7  Byte n*2+8  Byte n*2+9
 * 						 	  DATAn:MSB   DATAn:LSB   CRC:LSB     CRC:MSB
 * 						 	        [UINT16]
 */
uint8_t TinyBMS_UART_WriteRegBlockMODBUS(UART_HandleTypeDef *huart, uint16_t addr, uint8_t rl, uint8_t pl, uint16_t data[]) {
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 800263a:	af00      	add	r7, sp, #0
 800263c:	f507 6488 	add.w	r4, r7, #1088	; 0x440
 8002640:	f2a4 443c 	subw	r4, r4, #1084	; 0x43c
 8002644:	6020      	str	r0, [r4, #0]
 8002646:	460c      	mov	r4, r1
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002650:	f2a3 433e 	subw	r3, r3, #1086	; 0x43e
 8002654:	4622      	mov	r2, r4
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800265c:	f2a3 433f 	subw	r3, r3, #1087	; 0x43f
 8002660:	4602      	mov	r2, r0
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002668:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
	printf("TinyBMS_UART_WriteRegBlockMODBUS\r\n");
 8002670:	48b0      	ldr	r0, [pc, #704]	; (8002934 <TinyBMS_UART_WriteRegBlockMODBUS+0x300>)
 8002672:	f00b f895 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8002676:	23ff      	movs	r3, #255	; 0xff
 8002678:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f

	uint8_t tx_buffer[1000], rx_buffer[50];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, DATA_LSB = 0, DATA_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
 8002682:	2300      	movs	r3, #0
 8002684:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
 8002688:	2300      	movs	r3, #0
 800268a:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3436 	strb.w	r3, [r7, #1078]	; 0x436
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3434 	strb.w	r3, [r7, #1076]	; 0x434
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8a7 3430 	strh.w	r3, [r7, #1072]	; 0x430
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80026b2:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80026b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026ba:	22aa      	movs	r2, #170	; 0xaa
 80026bc:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = UART_TBMS_WRITE_REG_BLOCK_MODBUS;
 80026be:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80026c2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026c6:	2210      	movs	r2, #16
 80026c8:	705a      	strb	r2, [r3, #1]

	//MSB first
	ADDR_MSB = ((addr >> 8) & 0xFF);
 80026ca:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80026ce:	f2a3 433e 	subw	r3, r3, #1086	; 0x43e
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
	ADDR_LSB = (addr & 0xFF);
 80026dc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80026e0:	f2a3 433e 	subw	r3, r3, #1086	; 0x43e
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
	tx_buffer[2] = ADDR_MSB;
 80026ea:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80026ee:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026f2:	f897 2438 	ldrb.w	r2, [r7, #1080]	; 0x438
 80026f6:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = ADDR_LSB;
 80026f8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80026fc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002700:	f897 2439 	ldrb.w	r2, [r7, #1081]	; 0x439
 8002704:	70da      	strb	r2, [r3, #3]

	tx_buffer[4] = 0x00;
 8002706:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800270a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800270e:	2200      	movs	r2, #0
 8002710:	711a      	strb	r2, [r3, #4]

	//rl out of bounds
	if((rl <= 0x00) || (rl > 0x64)) {
 8002712:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002716:	f2a3 433f 	subw	r3, r3, #1087	; 0x43f
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <TinyBMS_UART_WriteRegBlockMODBUS+0xfa>
 8002720:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002724:	f2a3 433f 	subw	r3, r3, #1087	; 0x43f
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d908      	bls.n	8002740 <TinyBMS_UART_WriteRegBlockMODBUS+0x10c>
		printf("Invalid - registers to write value out of bounds. Max 100 (0x64)\r\n");
 800272e:	4882      	ldr	r0, [pc, #520]	; (8002938 <TinyBMS_UART_WriteRegBlockMODBUS+0x304>)
 8002730:	f00b f836 	bl	800d7a0 <puts>
		retval = CMD_FAILURE;
 8002734:	23ff      	movs	r3, #255	; 0xff
 8002736:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
		return retval;
 800273a:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 800273e:	e180      	b.n	8002a42 <TinyBMS_UART_WriteRegBlockMODBUS+0x40e>
	}
	tx_buffer[5] = rl;
 8002740:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002744:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002748:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800274c:	f2a2 423f 	subw	r2, r2, #1087	; 0x43f
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	715a      	strb	r2, [r3, #5]
	tx_buffer[6] = pl;
 8002754:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002758:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800275c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002760:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	719a      	strb	r2, [r3, #6]

	uint16_t numDATA = (pl / 2); //2 bytes per data
 8002768:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800276c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f8a7 342c 	strh.w	r3, [r7, #1068]	; 0x42c
	uint16_t n = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	f8a7 343c 	strh.w	r3, [r7, #1084]	; 0x43c

	//input arrays data[] contains n uint16_t elements
	for(uint16_t i = 0; i < numDATA; i++) {
 8002780:	2300      	movs	r3, #0
 8002782:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 8002786:	e034      	b.n	80027f2 <TinyBMS_UART_WriteRegBlockMODBUS+0x1be>
		n++; //n = 1,2,3,.. data#
 8002788:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	; 0x43c
 800278c:	3301      	adds	r3, #1
 800278e:	f8a7 343c 	strh.w	r3, [r7, #1084]	; 0x43c

		//MSB first
		DATA_MSB = ((data[i] >> 8) & 0xFF);
 8002792:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800279c:	4413      	add	r3, r2
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f887 3436 	strb.w	r3, [r7, #1078]	; 0x436
		DATA_LSB = (data[i] & 0xFF);
 80027a8:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80027b2:	4413      	add	r3, r2
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
		tx_buffer[(2*n)+6-1] = DATA_MSB; //for n=1,2,3,.. index: 4,6,8,..
 80027ba:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	; 0x43c
 80027be:	3303      	adds	r3, #3
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80027c8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80027cc:	f897 1436 	ldrb.w	r1, [r7, #1078]	; 0x436
 80027d0:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(2*n)+7-1] = DATA_LSB; //for n=1,2,3,.. index: 3,5,7,..
 80027d2:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	; 0x43c
 80027d6:	3303      	adds	r3, #3
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80027de:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80027e2:	f897 1437 	ldrb.w	r1, [r7, #1079]	; 0x437
 80027e6:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < numDATA; i++) {
 80027e8:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 80027ec:	3301      	adds	r3, #1
 80027ee:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 80027f2:	f8b7 243a 	ldrh.w	r2, [r7, #1082]	; 0x43a
 80027f6:	f8b7 342c 	ldrh.w	r3, [r7, #1068]	; 0x42c
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3c4      	bcc.n	8002788 <TinyBMS_UART_WriteRegBlockMODBUS+0x154>
	}

	CRC_request = CRC16(tx_buffer, pl+7);
 80027fe:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002802:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	3307      	adds	r3, #7
 800280c:	b29a      	uxth	r2, r3
 800280e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f005 f875 	bl	8007904 <CRC16>
 800281a:	4603      	mov	r3, r0
 800281c:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432
	CRC_LSB = (CRC_request & 0xFF);
 8002820:	f8b7 3432 	ldrh.w	r3, [r7, #1074]	; 0x432
 8002824:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8002828:	f8b7 3432 	ldrh.w	r3, [r7, #1074]	; 0x432
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b29b      	uxth	r3, r3
 8002830:	f887 3434 	strb.w	r3, [r7, #1076]	; 0x434
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[(2*n)+8-1] = CRC_LSB;
 8002834:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	; 0x43c
 8002838:	3304      	adds	r3, #4
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002842:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002846:	f897 1435 	ldrb.w	r1, [r7, #1077]	; 0x435
 800284a:	54d1      	strb	r1, [r2, r3]
	tx_buffer[(2*n)+9-1] = CRC_MSB;
 800284c:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	; 0x43c
 8002850:	3304      	adds	r3, #4
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002858:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800285c:	f897 1434 	ldrb.w	r1, [r7, #1076]	; 0x434
 8002860:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, pl+9);
 8002862:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002866:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	3309      	adds	r3, #9
 8002870:	b29a      	uxth	r2, r3
 8002872:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002876:	4619      	mov	r1, r3
 8002878:	4830      	ldr	r0, [pc, #192]	; (800293c <TinyBMS_UART_WriteRegBlockMODBUS+0x308>)
 800287a:	f008 ff5b 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	2202      	movs	r2, #2
 8002884:	4619      	mov	r1, r3
 8002886:	482d      	ldr	r0, [pc, #180]	; (800293c <TinyBMS_UART_WriteRegBlockMODBUS+0x308>)
 8002888:	f008 ffc2 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 800288c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002890:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2baa      	cmp	r3, #170	; 0xaa
 8002898:	f040 80c5 	bne.w	8002a26 <TinyBMS_UART_WriteRegBlockMODBUS+0x3f2>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 800289c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80028a0:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d150      	bne.n	800294c <TinyBMS_UART_WriteRegBlockMODBUS+0x318>
			printf("Response from BMS [ERROR]\r\n");
 80028aa:	4825      	ldr	r0, [pc, #148]	; (8002940 <TinyBMS_UART_WriteRegBlockMODBUS+0x30c>)
 80028ac:	f00a ff78 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	3302      	adds	r3, #2
 80028b6:	2204      	movs	r2, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4820      	ldr	r0, [pc, #128]	; (800293c <TinyBMS_UART_WriteRegBlockMODBUS+0x308>)
 80028bc:	f008 ffa8 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80028c0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80028c4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80028c8:	78db      	ldrb	r3, [r3, #3]
 80028ca:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80028ce:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80028d2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80028d6:	795b      	ldrb	r3, [r3, #5]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	b21a      	sxth	r2, r3
 80028dc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80028e0:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80028e4:	791b      	ldrb	r3, [r3, #4]
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	4313      	orrs	r3, r2
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	2104      	movs	r1, #4
 80028f6:	4618      	mov	r0, r3
 80028f8:	f005 f804 	bl	8007904 <CRC16>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f8a7 3430 	strh.w	r3, [r7, #1072]	; 0x430

			if(CRC_calc == CRC_reply) {
 8002902:	f8b7 2430 	ldrh.w	r2, [r7, #1072]	; 0x430
 8002906:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 800290a:	429a      	cmp	r2, r3
 800290c:	d106      	bne.n	800291c <TinyBMS_UART_WriteRegBlockMODBUS+0x2e8>
				printf("CRC pass\r\n");
 800290e:	480d      	ldr	r0, [pc, #52]	; (8002944 <TinyBMS_UART_WriteRegBlockMODBUS+0x310>)
 8002910:	f00a ff46 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002914:	23ff      	movs	r3, #255	; 0xff
 8002916:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
 800291a:	e005      	b.n	8002928 <TinyBMS_UART_WriteRegBlockMODBUS+0x2f4>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 800291c:	480a      	ldr	r0, [pc, #40]	; (8002948 <TinyBMS_UART_WriteRegBlockMODBUS+0x314>)
 800291e:	f00a ff3f 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002922:	23ff      	movs	r3, #255	; 0xff
 8002924:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
			}
			reportBMSError(error);
 8002928:	f897 3428 	ldrb.w	r3, [r7, #1064]	; 0x428
 800292c:	4618      	mov	r0, r3
 800292e:	f004 ffc7 	bl	80078c0 <reportBMSError>
 8002932:	e084      	b.n	8002a3e <TinyBMS_UART_WriteRegBlockMODBUS+0x40a>
 8002934:	08010dc4 	.word	0x08010dc4
 8002938:	08010de8 	.word	0x08010de8
 800293c:	20000228 	.word	0x20000228
 8002940:	080109d4 	.word	0x080109d4
 8002944:	080108f0 	.word	0x080108f0
 8002948:	080108fc 	.word	0x080108fc

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_WRITE_REG_BLOCK_MODBUS) {
 800294c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002950:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	2b10      	cmp	r3, #16
 8002958:	d158      	bne.n	8002a0c <TinyBMS_UART_WriteRegBlockMODBUS+0x3d8>
			printf("Response from BMS [OK]\r\n");
 800295a:	483c      	ldr	r0, [pc, #240]	; (8002a4c <TinyBMS_UART_WriteRegBlockMODBUS+0x418>)
 800295c:	f00a ff20 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	3302      	adds	r3, #2
 8002966:	2206      	movs	r2, #6
 8002968:	4619      	mov	r1, r3
 800296a:	4839      	ldr	r0, [pc, #228]	; (8002a50 <TinyBMS_UART_WriteRegBlockMODBUS+0x41c>)
 800296c:	f008 ff50 	bl	800b810 <HAL_UART_Receive_IT>

			//MSB first
			uint16_t addr_response = ((rx_buffer[2] << 8) | rx_buffer[3]);
 8002970:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002974:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002978:	789b      	ldrb	r3, [r3, #2]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21a      	sxth	r2, r3
 800297e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002982:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002986:	78db      	ldrb	r3, [r3, #3]
 8002988:	b21b      	sxth	r3, r3
 800298a:	4313      	orrs	r3, r2
 800298c:	b21b      	sxth	r3, r3
 800298e:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a

			uint8_t rl_response = rx_buffer[5];
 8002992:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002996:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800299a:	795b      	ldrb	r3, [r3, #5]
 800299c:	f887 3429 	strb.w	r3, [r7, #1065]	; 0x429

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 80029a0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80029a4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80029a8:	79db      	ldrb	r3, [r3, #7]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80029b2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80029b6:	799b      	ldrb	r3, [r3, #6]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b21b      	sxth	r3, r3
 80029be:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-5 of OK response
 80029c2:	f107 030c 	add.w	r3, r7, #12
 80029c6:	2106      	movs	r1, #6
 80029c8:	4618      	mov	r0, r3
 80029ca:	f004 ff9b 	bl	8007904 <CRC16>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f8a7 3430 	strh.w	r3, [r7, #1072]	; 0x430

			if(CRC_calc == CRC_reply) {
 80029d4:	f8b7 2430 	ldrh.w	r2, [r7, #1072]	; 0x430
 80029d8:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10e      	bne.n	80029fe <TinyBMS_UART_WriteRegBlockMODBUS+0x3ca>
				printf("CRC pass\r\n");
 80029e0:	481c      	ldr	r0, [pc, #112]	; (8002a54 <TinyBMS_UART_WriteRegBlockMODBUS+0x420>)
 80029e2:	f00a fedd 	bl	800d7a0 <puts>
				printf("Successful block write of %u registers starting from address: 0x%04X\r\n", rl_response, addr_response);
 80029e6:	f897 3429 	ldrb.w	r3, [r7, #1065]	; 0x429
 80029ea:	f8b7 242a 	ldrh.w	r2, [r7, #1066]	; 0x42a
 80029ee:	4619      	mov	r1, r3
 80029f0:	4819      	ldr	r0, [pc, #100]	; (8002a58 <TinyBMS_UART_WriteRegBlockMODBUS+0x424>)
 80029f2:	f00a fe4f 	bl	800d694 <iprintf>
				retval = CMD_SUCCESS;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
 80029fc:	e01f      	b.n	8002a3e <TinyBMS_UART_WriteRegBlockMODBUS+0x40a>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80029fe:	4817      	ldr	r0, [pc, #92]	; (8002a5c <TinyBMS_UART_WriteRegBlockMODBUS+0x428>)
 8002a00:	f00a fece 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002a04:	23ff      	movs	r3, #255	; 0xff
 8002a06:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
 8002a0a:	e018      	b.n	8002a3e <TinyBMS_UART_WriteRegBlockMODBUS+0x40a>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x10 but was 0x%02X\r\n", rx_buffer[1]);
 8002a0c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002a10:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002a14:	785b      	ldrb	r3, [r3, #1]
 8002a16:	4619      	mov	r1, r3
 8002a18:	4811      	ldr	r0, [pc, #68]	; (8002a60 <TinyBMS_UART_WriteRegBlockMODBUS+0x42c>)
 8002a1a:	f00a fe3b 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8002a1e:	23ff      	movs	r3, #255	; 0xff
 8002a20:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
 8002a24:	e00b      	b.n	8002a3e <TinyBMS_UART_WriteRegBlockMODBUS+0x40a>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8002a26:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002a2a:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4619      	mov	r1, r3
 8002a32:	480c      	ldr	r0, [pc, #48]	; (8002a64 <TinyBMS_UART_WriteRegBlockMODBUS+0x430>)
 8002a34:	f00a fe2e 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8002a38:	23ff      	movs	r3, #255	; 0xff
 8002a3a:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
	}

	return retval;
 8002a3e:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	f207 4744 	addw	r7, r7, #1092	; 0x444
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	080109f0 	.word	0x080109f0
 8002a50:	20000228 	.word	0x20000228
 8002a54:	080108f0 	.word	0x080108f0
 8002a58:	08010e2c 	.word	0x08010e2c
 8002a5c:	08010b1c 	.word	0x08010b1c
 8002a60:	08010e74 	.word	0x08010e74
 8002a64:	08010988 	.word	0x08010988

08002a68 <TinyBMS_UART_ResetClearEventsStatistics>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  Options: 0x01 - Clear Events , 0x02 - Clear Statistics , 0x05 - Reset BMS
 *
 */
uint8_t TinyBMS_UART_ResetClearEventsStatistics(UART_HandleTypeDef *huart, uint8_t option) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0a0      	sub	sp, #128	; 0x80
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
	printf("TinyBMS_UART_ResetClearEventsStatistics\r\n");
 8002a74:	4883      	ldr	r0, [pc, #524]	; (8002c84 <TinyBMS_UART_ResetClearEventsStatistics+0x21c>)
 8002a76:	f00a fe93 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8002a7a:	23ff      	movs	r3, #255	; 0xff
 8002a7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002a86:	2300      	movs	r3, #0
 8002a88:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	//Check if invalid option
	if((option != 0x01) && (option != 0x02) && (option != 0x05)) {
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d010      	beq.n	8002ac6 <TinyBMS_UART_ResetClearEventsStatistics+0x5e>
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d00d      	beq.n	8002ac6 <TinyBMS_UART_ResetClearEventsStatistics+0x5e>
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d00a      	beq.n	8002ac6 <TinyBMS_UART_ResetClearEventsStatistics+0x5e>
		printf("Invalid option: 0x%02X\r\n", option);
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4874      	ldr	r0, [pc, #464]	; (8002c88 <TinyBMS_UART_ResetClearEventsStatistics+0x220>)
 8002ab6:	f00a fded 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8002aba:	23ff      	movs	r3, #255	; 0xff
 8002abc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		return retval;
 8002ac0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002ac4:	e0d9      	b.n	8002c7a <TinyBMS_UART_ResetClearEventsStatistics+0x212>
	}

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8002ac6:	23aa      	movs	r3, #170	; 0xaa
 8002ac8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = UART_TBMS_RESET_CLEAR_EVENTS_STATS;
 8002acc:	2302      	movs	r3, #2
 8002ace:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	tx_buffer[2] = option; //check notes above
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	CRC_request = CRC16(tx_buffer, 3);
 8002ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002adc:	2103      	movs	r1, #3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 ff10 	bl	8007904 <CRC16>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	CRC_LSB = (CRC_request & 0xFF);
 8002aea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002aee:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8002af2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[3] = CRC_LSB;
 8002afe:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	tx_buffer[4] = CRC_MSB;
 8002b06:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002b0a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 5);
 8002b0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b12:	2205      	movs	r2, #5
 8002b14:	4619      	mov	r1, r3
 8002b16:	485d      	ldr	r0, [pc, #372]	; (8002c8c <TinyBMS_UART_ResetClearEventsStatistics+0x224>)
 8002b18:	f008 fe0c 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check ACK/ERROR
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	2202      	movs	r2, #2
 8002b22:	4619      	mov	r1, r3
 8002b24:	4859      	ldr	r0, [pc, #356]	; (8002c8c <TinyBMS_UART_ResetClearEventsStatistics+0x224>)
 8002b26:	f008 fe73 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8002b2a:	7b3b      	ldrb	r3, [r7, #12]
 8002b2c:	2baa      	cmp	r3, #170	; 0xaa
 8002b2e:	f040 809a 	bne.w	8002c66 <TinyBMS_UART_ResetClearEventsStatistics+0x1fe>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8002b32:	7b7b      	ldrb	r3, [r7, #13]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d138      	bne.n	8002baa <TinyBMS_UART_ResetClearEventsStatistics+0x142>
			printf("Response from BMS [ERROR]\r\n");
 8002b38:	4855      	ldr	r0, [pc, #340]	; (8002c90 <TinyBMS_UART_ResetClearEventsStatistics+0x228>)
 8002b3a:	f00a fe31 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	3302      	adds	r3, #2
 8002b44:	2204      	movs	r2, #4
 8002b46:	4619      	mov	r1, r3
 8002b48:	4850      	ldr	r0, [pc, #320]	; (8002c8c <TinyBMS_UART_ResetClearEventsStatistics+0x224>)
 8002b4a:	f008 fe61 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8002b54:	7c7b      	ldrb	r3, [r7, #17]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	7c3b      	ldrb	r3, [r7, #16]
 8002b5c:	b21b      	sxth	r3, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b21b      	sxth	r3, r3
 8002b62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	2104      	movs	r1, #4
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f004 fec9 	bl	8007904 <CRC16>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 8002b78:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002b7c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d106      	bne.n	8002b92 <TinyBMS_UART_ResetClearEventsStatistics+0x12a>
				printf("CRC pass\r\n");
 8002b84:	4843      	ldr	r0, [pc, #268]	; (8002c94 <TinyBMS_UART_ResetClearEventsStatistics+0x22c>)
 8002b86:	f00a fe0b 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002b8a:	23ff      	movs	r3, #255	; 0xff
 8002b8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b90:	e005      	b.n	8002b9e <TinyBMS_UART_ResetClearEventsStatistics+0x136>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8002b92:	4841      	ldr	r0, [pc, #260]	; (8002c98 <TinyBMS_UART_ResetClearEventsStatistics+0x230>)
 8002b94:	f00a fe04 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002b98:	23ff      	movs	r3, #255	; 0xff
 8002b9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			reportBMSError(error);
 8002b9e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 fe8c 	bl	80078c0 <reportBMSError>
 8002ba8:	e065      	b.n	8002c76 <TinyBMS_UART_ResetClearEventsStatistics+0x20e>

		//[ACK]
		} else if(rx_buffer[1] == ACK) {
 8002baa:	7b7b      	ldrb	r3, [r7, #13]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d151      	bne.n	8002c54 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>
			printf("Response from BMS [ACK]\r\n");
 8002bb0:	483a      	ldr	r0, [pc, #232]	; (8002c9c <TinyBMS_UART_ResetClearEventsStatistics+0x234>)
 8002bb2:	f00a fdf5 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 3); //read bytes 3-5 from ACK reply
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	3302      	adds	r3, #2
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4832      	ldr	r0, [pc, #200]	; (8002c8c <TinyBMS_UART_ResetClearEventsStatistics+0x224>)
 8002bc2:	f008 fe25 	bl	800b810 <HAL_UART_Receive_IT>
			if(rx_buffer[2] == UART_TBMS_RESET_CLEAR_EVENTS_STATS) {
 8002bc6:	7bbb      	ldrb	r3, [r7, #14]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d13f      	bne.n	8002c4c <TinyBMS_UART_ResetClearEventsStatistics+0x1e4>
				CRC_reply = ((rx_buffer[4] << 8) | rx_buffer[3]);
 8002bcc:	7c3b      	ldrb	r3, [r7, #16]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	b21a      	sxth	r2, r3
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				CRC_calc = CRC16(rx_buffer, 3); //Calc CRC for bytes 1-3 of OK response
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	2103      	movs	r1, #3
 8002be4:	4618      	mov	r0, r3
 8002be6:	f004 fe8d 	bl	8007904 <CRC16>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

				if(CRC_calc == CRC_reply) {
 8002bf0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002bf4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d120      	bne.n	8002c3e <TinyBMS_UART_ResetClearEventsStatistics+0x1d6>
					printf("CRC pass\r\n");
 8002bfc:	4825      	ldr	r0, [pc, #148]	; (8002c94 <TinyBMS_UART_ResetClearEventsStatistics+0x22c>)
 8002bfe:	f00a fdcf 	bl	800d7a0 <puts>

					if(option == 0x01)
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <TinyBMS_UART_ResetClearEventsStatistics+0x1ac>
						printf("Option 0x%02X - Clear Events\r\n", option);
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4824      	ldr	r0, [pc, #144]	; (8002ca0 <TinyBMS_UART_ResetClearEventsStatistics+0x238>)
 8002c0e:	f00a fd41 	bl	800d694 <iprintf>
 8002c12:	e010      	b.n	8002c36 <TinyBMS_UART_ResetClearEventsStatistics+0x1ce>
					else if(option == 0x02)
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d105      	bne.n	8002c26 <TinyBMS_UART_ResetClearEventsStatistics+0x1be>
						printf("Option 0x%02X - Clear Statistics\r\n", option);
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4821      	ldr	r0, [pc, #132]	; (8002ca4 <TinyBMS_UART_ResetClearEventsStatistics+0x23c>)
 8002c20:	f00a fd38 	bl	800d694 <iprintf>
 8002c24:	e007      	b.n	8002c36 <TinyBMS_UART_ResetClearEventsStatistics+0x1ce>
					else if(option == 0x05)
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d104      	bne.n	8002c36 <TinyBMS_UART_ResetClearEventsStatistics+0x1ce>
						printf("Option 0x%02X - Reset BMS\r\n", option);
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	481d      	ldr	r0, [pc, #116]	; (8002ca8 <TinyBMS_UART_ResetClearEventsStatistics+0x240>)
 8002c32:	f00a fd2f 	bl	800d694 <iprintf>

					retval = CMD_SUCCESS;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c3c:	e01b      	b.n	8002c76 <TinyBMS_UART_ResetClearEventsStatistics+0x20e>

				} else {
					printf("CRC fail in BMS ACK\r\n");
 8002c3e:	481b      	ldr	r0, [pc, #108]	; (8002cac <TinyBMS_UART_ResetClearEventsStatistics+0x244>)
 8002c40:	f00a fdae 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 8002c44:	23ff      	movs	r3, #255	; 0xff
 8002c46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c4a:	e014      	b.n	8002c76 <TinyBMS_UART_ResetClearEventsStatistics+0x20e>
				}
			} else {
				retval = CMD_FAILURE;
 8002c4c:	23ff      	movs	r3, #255	; 0xff
 8002c4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c52:	e010      	b.n	8002c76 <TinyBMS_UART_ResetClearEventsStatistics+0x20e>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1B but was 0x%02X\r\n", rx_buffer[1]);
 8002c54:	7b7b      	ldrb	r3, [r7, #13]
 8002c56:	4619      	mov	r1, r3
 8002c58:	4815      	ldr	r0, [pc, #84]	; (8002cb0 <TinyBMS_UART_ResetClearEventsStatistics+0x248>)
 8002c5a:	f00a fd1b 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8002c5e:	23ff      	movs	r3, #255	; 0xff
 8002c60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c64:	e007      	b.n	8002c76 <TinyBMS_UART_ResetClearEventsStatistics+0x20e>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8002c66:	7b3b      	ldrb	r3, [r7, #12]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4812      	ldr	r0, [pc, #72]	; (8002cb4 <TinyBMS_UART_ResetClearEventsStatistics+0x24c>)
 8002c6c:	f00a fd12 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8002c70:	23ff      	movs	r3, #255	; 0xff
 8002c72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	return retval;
 8002c76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3780      	adds	r7, #128	; 0x80
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	08010eac 	.word	0x08010eac
 8002c88:	08010ed8 	.word	0x08010ed8
 8002c8c:	20000228 	.word	0x20000228
 8002c90:	080109d4 	.word	0x080109d4
 8002c94:	080108f0 	.word	0x080108f0
 8002c98:	080108fc 	.word	0x080108fc
 8002c9c:	08010914 	.word	0x08010914
 8002ca0:	08010ef4 	.word	0x08010ef4
 8002ca4:	08010f14 	.word	0x08010f14
 8002ca8:	08010f38 	.word	0x08010f38
 8002cac:	08010938 	.word	0x08010938
 8002cb0:	08010f54 	.word	0x08010f54
 8002cb4:	08010988 	.word	0x08010988

08002cb8 <TinyBMS_UART_ReadNewestEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_UART_ReadNewestEvents(UART_HandleTypeDef *huart) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	f5ad 6d8a 	sub.w	sp, sp, #1104	; 0x450
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002cc4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8002cc8:	6018      	str	r0, [r3, #0]
	printf("TinyBMS_UART_ReadNewestEvents\r\n");
 8002cca:	48c7      	ldr	r0, [pc, #796]	; (8002fe8 <TinyBMS_UART_ReadNewestEvents+0x330>)
 8002ccc:	f00a fd68 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8002cd0:	23ff      	movs	r3, #255	; 0xff
 8002cd2:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f

	uint8_t tx_buffer[50], rx_buffer[1000];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 343a 	strb.w	r3, [r7, #1082]	; 0x43a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8002cf4:	23aa      	movs	r3, #170	; 0xaa
 8002cf6:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
	tx_buffer[1] = UART_TBMS_READ_NEWEST_EVENTS;
 8002cfa:	2311      	movs	r3, #17
 8002cfc:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9

	CRC_request = CRC16(tx_buffer, 2);
 8002d00:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002d04:	2102      	movs	r1, #2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f004 fdfc 	bl	8007904 <CRC16>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438
	CRC_LSB = (CRC_request & 0xFF);
 8002d12:	f8b7 3438 	ldrh.w	r3, [r7, #1080]	; 0x438
 8002d16:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8002d1a:	f8b7 3438 	ldrh.w	r3, [r7, #1080]	; 0x438
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f887 343a 	strb.w	r3, [r7, #1082]	; 0x43a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8002d26:	f897 343b 	ldrb.w	r3, [r7, #1083]	; 0x43b
 8002d2a:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
	tx_buffer[3] = CRC_MSB;
 8002d2e:	f897 343a 	ldrb.w	r3, [r7, #1082]	; 0x43a
 8002d32:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8002d36:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	48ab      	ldr	r0, [pc, #684]	; (8002fec <TinyBMS_UART_ReadNewestEvents+0x334>)
 8002d40:	f008 fcf8 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8002d44:	f107 0310 	add.w	r3, r7, #16
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	48a7      	ldr	r0, [pc, #668]	; (8002fec <TinyBMS_UART_ReadNewestEvents+0x334>)
 8002d4e:	f008 fd5f 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8002d52:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002d56:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2baa      	cmp	r3, #170	; 0xaa
 8002d5e:	f040 8194 	bne.w	800308a <TinyBMS_UART_ReadNewestEvents+0x3d2>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8002d62:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002d66:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002d6a:	785b      	ldrb	r3, [r3, #1]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d144      	bne.n	8002dfa <TinyBMS_UART_ReadNewestEvents+0x142>
			printf("Response from BMS [ERROR]\r\n");
 8002d70:	489f      	ldr	r0, [pc, #636]	; (8002ff0 <TinyBMS_UART_ReadNewestEvents+0x338>)
 8002d72:	f00a fd15 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	4619      	mov	r1, r3
 8002d80:	489a      	ldr	r0, [pc, #616]	; (8002fec <TinyBMS_UART_ReadNewestEvents+0x334>)
 8002d82:	f008 fd45 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8002d86:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002d8a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002d8e:	78db      	ldrb	r3, [r3, #3]
 8002d90:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8002d94:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002d98:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002d9c:	795b      	ldrb	r3, [r3, #5]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	b21a      	sxth	r2, r3
 8002da2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002da6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002daa:	791b      	ldrb	r3, [r3, #4]
 8002dac:	b21b      	sxth	r3, r3
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	2104      	movs	r1, #4
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 fda1 	bl	8007904 <CRC16>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

			if(CRC_calc == CRC_reply) {
 8002dc8:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 8002dcc:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	; 0x434
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d106      	bne.n	8002de2 <TinyBMS_UART_ReadNewestEvents+0x12a>
				printf("CRC pass\r\n");
 8002dd4:	4887      	ldr	r0, [pc, #540]	; (8002ff4 <TinyBMS_UART_ReadNewestEvents+0x33c>)
 8002dd6:	f00a fce3 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002dda:	23ff      	movs	r3, #255	; 0xff
 8002ddc:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8002de0:	e005      	b.n	8002dee <TinyBMS_UART_ReadNewestEvents+0x136>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8002de2:	4885      	ldr	r0, [pc, #532]	; (8002ff8 <TinyBMS_UART_ReadNewestEvents+0x340>)
 8002de4:	f00a fcdc 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8002de8:	23ff      	movs	r3, #255	; 0xff
 8002dea:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
			}
			reportBMSError(error);
 8002dee:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fd64 	bl	80078c0 <reportBMSError>
 8002df8:	e153      	b.n	80030a2 <TinyBMS_UART_ReadNewestEvents+0x3ea>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_NEWEST_EVENTS) {
 8002dfa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002dfe:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	2b11      	cmp	r3, #17
 8002e06:	f040 8133 	bne.w	8003070 <TinyBMS_UART_ReadNewestEvents+0x3b8>
			printf("Response from BMS [OK]\r\n");
 8002e0a:	487c      	ldr	r0, [pc, #496]	; (8002ffc <TinyBMS_UART_ReadNewestEvents+0x344>)
 8002e0c:	f00a fcc8 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	3302      	adds	r3, #2
 8002e16:	2201      	movs	r2, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4874      	ldr	r0, [pc, #464]	; (8002fec <TinyBMS_UART_ReadNewestEvents+0x334>)
 8002e1c:	f008 fcf8 	bl	800b810 <HAL_UART_Receive_IT>

			//Total Events: (0x01-0x90) or 144 events
			uint8_t PL = rx_buffer[2];
 8002e20:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002e24:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002e28:	789b      	ldrb	r3, [r3, #2]
 8002e2a:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
			//Payload Length = PL = 4n+4 bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 4n+9 from OK reply
 8002e2e:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3302      	adds	r3, #2
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	3303      	adds	r3, #3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	486a      	ldr	r0, [pc, #424]	; (8002fec <TinyBMS_UART_ReadNewestEvents+0x334>)
 8002e42:	f008 fce5 	bl	800b810 <HAL_UART_Receive_IT>

			uint32_t BTSP = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
			uint32_t TSP[] = {0}; 	//uint24_t stored in a uint32_t
 8002e4c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002e50:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
			uint8_t Event[] = {0};
 8002e58:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002e5c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
			uint32_t numEvents = ((PL - 4) / 4); //4 bytes for BTSP + 4 bytes per TSP+EVENT reading
 8002e64:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8002e68:	3b04      	subs	r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da00      	bge.n	8002e70 <TinyBMS_UART_ReadNewestEvents+0x1b8>
 8002e6e:	3303      	adds	r3, #3
 8002e70:	109b      	asrs	r3, r3, #2
 8002e72:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			//**1 event = Payload length of 8 Bytes (BTSP + TSP + EVENT), 2 events = 12 Bytes, etc..**
			uint32_t n = 1; //event index
 8002e76:	2301      	movs	r3, #1
 8002e78:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

			for(uint32_t i = 0; i < numEvents; i++) {
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8002e82:	e073      	b.n	8002f6c <TinyBMS_UART_ReadNewestEvents+0x2b4>
				if(i == 0) {
 8002e84:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d12a      	bne.n	8002ee2 <TinyBMS_UART_ReadNewestEvents+0x22a>
					//BTSP BMS Timestamp in seconds -> LSB = Byte4, MSB = Byte7 (i.e. rx_buffer[3:6])
					BTSP = ((rx_buffer[(4*n)+3-1] << 24) | (rx_buffer[(4*n)+2-1] << 16) | (rx_buffer[(4*n)+1-1] << 8) | (rx_buffer[(4*n)-1]));
 8002e8c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3302      	adds	r3, #2
 8002e94:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002e98:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	061a      	lsls	r2, r3, #24
 8002ea0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002eac:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002ec0:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8002ece:	0092      	lsls	r2, r2, #2
 8002ed0:	3a01      	subs	r2, #1
 8002ed2:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002ed6:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 8002eda:	5c8a      	ldrb	r2, [r1, r2]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
				}

				//TSPn Event Timestamp in seconds -> LSB = Byte4n+4, MSB = Byte4n+6 (i.e. rx_buffer[4n+4-1 : 4n+6-1])
				//**Remember that TSP data is a uint24_t stored in a uint32_t, so ignore the MSB of the array element**
				TSP[i] = ((rx_buffer[(4*n)+6-1] << 16) | (rx_buffer[(4*n)+5-1] << 8) | (rx_buffer[(4*n)+4-1]));
 8002ee2:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	3305      	adds	r3, #5
 8002eea:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002eee:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002efa:	3301      	adds	r3, #1
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002f02:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8002f10:	3201      	adds	r2, #1
 8002f12:	0092      	lsls	r2, r2, #2
 8002f14:	3a01      	subs	r2, #1
 8002f16:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002f1a:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 8002f1e:	5c8a      	ldrb	r2, [r1, r2]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002f28:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8002f2c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8002f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				//BMS Eventn ID -> Byte(4n+7) (i.e. rx_buffer [4n+7-1])
				Event[i] = rx_buffer[(4*n)+7-1];
 8002f34:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	3306      	adds	r3, #6
 8002f3c:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002f40:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8002f44:	5cd1      	ldrb	r1, [r2, r3]
 8002f46:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002f4a:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 8002f4e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8002f52:	4413      	add	r3, r2
 8002f54:	460a      	mov	r2, r1
 8002f56:	701a      	strb	r2, [r3, #0]

				n++;
 8002f58:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
			for(uint32_t i = 0; i < numEvents; i++) {
 8002f62:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8002f66:	3301      	adds	r3, #1
 8002f68:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8002f6c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8002f70:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d385      	bcc.n	8002e84 <TinyBMS_UART_ReadNewestEvents+0x1cc>
			}

			CRC_reply = ((rx_buffer[(4*n)+9-1] << 8) | rx_buffer[(4*n)+8-1]);
 8002f78:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002f84:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002f92:	3302      	adds	r3, #2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	3b01      	subs	r3, #1
 8002f98:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002f9c:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 8002fa0:	5ccb      	ldrb	r3, [r1, r3]
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8002fac:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3303      	adds	r3, #3
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	f107 0310 	add.w	r3, r7, #16
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f004 fca1 	bl	8007904 <CRC16>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

			if(CRC_calc == CRC_reply) {
 8002fc8:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 8002fcc:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	; 0x434
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d146      	bne.n	8003062 <TinyBMS_UART_ReadNewestEvents+0x3aa>
				printf("CRC pass\r\n");
 8002fd4:	4807      	ldr	r0, [pc, #28]	; (8002ff4 <TinyBMS_UART_ReadNewestEvents+0x33c>)
 8002fd6:	f00a fbe3 	bl	800d7a0 <puts>

				//Print "Newest Events" Timestamps with their Event IDs
				printf("************ TinyBMS Newest Events ************\r\n");
 8002fda:	4809      	ldr	r0, [pc, #36]	; (8003000 <TinyBMS_UART_ReadNewestEvents+0x348>)
 8002fdc:	f00a fbe0 	bl	800d7a0 <puts>
				for(uint32_t i = 0; i < numEvents; i++) {
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8002fe6:	e02f      	b.n	8003048 <TinyBMS_UART_ReadNewestEvents+0x390>
 8002fe8:	08010f8c 	.word	0x08010f8c
 8002fec:	20000228 	.word	0x20000228
 8002ff0:	080109d4 	.word	0x080109d4
 8002ff4:	080108f0 	.word	0x080108f0
 8002ff8:	080108fc 	.word	0x080108fc
 8002ffc:	080109f0 	.word	0x080109f0
 8003000:	08010fac 	.word	0x08010fac
					if(i == 0) {
 8003004:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <TinyBMS_UART_ReadNewestEvents+0x35e>
						//could convert seconds into a meaningful hh:mm:ss time later
						printf("BMS Timestamp (s): %lu\r\n", BTSP);
 800300c:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8003010:	4827      	ldr	r0, [pc, #156]	; (80030b0 <TinyBMS_UART_ReadNewestEvents+0x3f8>)
 8003012:	f00a fb3f 	bl	800d694 <iprintf>
					}
					//could convert seconds into a meaningful hh:mm:ss time later
					printf("Event Timestamp (s): %lu \t Event ID: 0x%02X\r\n", TSP[i], Event[i]);
 8003016:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800301a:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800301e:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8003022:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003026:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800302a:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 800302e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	481e      	ldr	r0, [pc, #120]	; (80030b4 <TinyBMS_UART_ReadNewestEvents+0x3fc>)
 800303a:	f00a fb2b 	bl	800d694 <iprintf>
				for(uint32_t i = 0; i < numEvents; i++) {
 800303e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003042:	3301      	adds	r3, #1
 8003044:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8003048:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 800304c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003050:	429a      	cmp	r2, r3
 8003052:	d3d7      	bcc.n	8003004 <TinyBMS_UART_ReadNewestEvents+0x34c>
				}
				printf("----------------------------------------\r\n");
 8003054:	4818      	ldr	r0, [pc, #96]	; (80030b8 <TinyBMS_UART_ReadNewestEvents+0x400>)
 8003056:	f00a fba3 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8003060:	e01f      	b.n	80030a2 <TinyBMS_UART_ReadNewestEvents+0x3ea>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003062:	4816      	ldr	r0, [pc, #88]	; (80030bc <TinyBMS_UART_ReadNewestEvents+0x404>)
 8003064:	f00a fb9c 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003068:	23ff      	movs	r3, #255	; 0xff
 800306a:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 800306e:	e018      	b.n	80030a2 <TinyBMS_UART_ReadNewestEvents+0x3ea>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x11 but was 0x%02X\r\n", rx_buffer[1]);
 8003070:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003074:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	4619      	mov	r1, r3
 800307c:	4810      	ldr	r0, [pc, #64]	; (80030c0 <TinyBMS_UART_ReadNewestEvents+0x408>)
 800307e:	f00a fb09 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8003082:	23ff      	movs	r3, #255	; 0xff
 8003084:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8003088:	e00b      	b.n	80030a2 <TinyBMS_UART_ReadNewestEvents+0x3ea>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800308a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800308e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	480b      	ldr	r0, [pc, #44]	; (80030c4 <TinyBMS_UART_ReadNewestEvents+0x40c>)
 8003098:	f00a fafc 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 800309c:	23ff      	movs	r3, #255	; 0xff
 800309e:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
	}

	return retval;
 80030a2:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	08010fe0 	.word	0x08010fe0
 80030b4:	08010ffc 	.word	0x08010ffc
 80030b8:	08010af0 	.word	0x08010af0
 80030bc:	08010b1c 	.word	0x08010b1c
 80030c0:	0801102c 	.word	0x0801102c
 80030c4:	08010988 	.word	0x08010988

080030c8 <TinyBMS_UART_ReadAllEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_UART_ReadAllEvents(UART_HandleTypeDef *huart) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	f5ad 6d8a 	sub.w	sp, sp, #1104	; 0x450
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80030d4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80030d8:	6018      	str	r0, [r3, #0]
	printf("TinyBMS_UART_ReadAllEvents\r\n");
 80030da:	48c7      	ldr	r0, [pc, #796]	; (80033f8 <TinyBMS_UART_ReadAllEvents+0x330>)
 80030dc:	f00a fb60 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80030e0:	23ff      	movs	r3, #255	; 0xff
 80030e2:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f

	uint8_t tx_buffer[50], rx_buffer[1000];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 343a 	strb.w	r3, [r7, #1082]	; 0x43a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
 80030fe:	2300      	movs	r3, #0
 8003100:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003104:	23aa      	movs	r3, #170	; 0xaa
 8003106:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
	tx_buffer[1] = UART_TBMS_READ_ALL_EVENTS;
 800310a:	2312      	movs	r3, #18
 800310c:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9

	CRC_request = CRC16(tx_buffer, 2);
 8003110:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003114:	2102      	movs	r1, #2
 8003116:	4618      	mov	r0, r3
 8003118:	f004 fbf4 	bl	8007904 <CRC16>
 800311c:	4603      	mov	r3, r0
 800311e:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438
	CRC_LSB = (CRC_request & 0xFF);
 8003122:	f8b7 3438 	ldrh.w	r3, [r7, #1080]	; 0x438
 8003126:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 800312a:	f8b7 3438 	ldrh.w	r3, [r7, #1080]	; 0x438
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b29b      	uxth	r3, r3
 8003132:	f887 343a 	strb.w	r3, [r7, #1082]	; 0x43a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003136:	f897 343b 	ldrb.w	r3, [r7, #1083]	; 0x43b
 800313a:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
	tx_buffer[3] = CRC_MSB;
 800313e:	f897 343a 	ldrb.w	r3, [r7, #1082]	; 0x43a
 8003142:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003146:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800314a:	2204      	movs	r2, #4
 800314c:	4619      	mov	r1, r3
 800314e:	48ab      	ldr	r0, [pc, #684]	; (80033fc <TinyBMS_UART_ReadAllEvents+0x334>)
 8003150:	f008 faf0 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	2202      	movs	r2, #2
 800315a:	4619      	mov	r1, r3
 800315c:	48a7      	ldr	r0, [pc, #668]	; (80033fc <TinyBMS_UART_ReadAllEvents+0x334>)
 800315e:	f008 fb57 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003162:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003166:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2baa      	cmp	r3, #170	; 0xaa
 800316e:	f040 8194 	bne.w	800349a <TinyBMS_UART_ReadAllEvents+0x3d2>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003172:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003176:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d144      	bne.n	800320a <TinyBMS_UART_ReadAllEvents+0x142>
			printf("Response from BMS [ERROR]\r\n");
 8003180:	489f      	ldr	r0, [pc, #636]	; (8003400 <TinyBMS_UART_ReadAllEvents+0x338>)
 8003182:	f00a fb0d 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003186:	f107 0310 	add.w	r3, r7, #16
 800318a:	3302      	adds	r3, #2
 800318c:	2204      	movs	r2, #4
 800318e:	4619      	mov	r1, r3
 8003190:	489a      	ldr	r0, [pc, #616]	; (80033fc <TinyBMS_UART_ReadAllEvents+0x334>)
 8003192:	f008 fb3d 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8003196:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800319a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800319e:	78db      	ldrb	r3, [r3, #3]
 80031a0:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80031a4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80031a8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80031ac:	795b      	ldrb	r3, [r3, #5]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	b21a      	sxth	r2, r3
 80031b2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80031b6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80031ba:	791b      	ldrb	r3, [r3, #4]
 80031bc:	b21b      	sxth	r3, r3
 80031be:	4313      	orrs	r3, r2
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80031c6:	f107 0310 	add.w	r3, r7, #16
 80031ca:	2104      	movs	r1, #4
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 fb99 	bl	8007904 <CRC16>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

			if(CRC_calc == CRC_reply) {
 80031d8:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 80031dc:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	; 0x434
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d106      	bne.n	80031f2 <TinyBMS_UART_ReadAllEvents+0x12a>
				printf("CRC pass\r\n");
 80031e4:	4887      	ldr	r0, [pc, #540]	; (8003404 <TinyBMS_UART_ReadAllEvents+0x33c>)
 80031e6:	f00a fadb 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80031ea:	23ff      	movs	r3, #255	; 0xff
 80031ec:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 80031f0:	e005      	b.n	80031fe <TinyBMS_UART_ReadAllEvents+0x136>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 80031f2:	4885      	ldr	r0, [pc, #532]	; (8003408 <TinyBMS_UART_ReadAllEvents+0x340>)
 80031f4:	f00a fad4 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80031f8:	23ff      	movs	r3, #255	; 0xff
 80031fa:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
			}
			reportBMSError(error);
 80031fe:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8003202:	4618      	mov	r0, r3
 8003204:	f004 fb5c 	bl	80078c0 <reportBMSError>
 8003208:	e153      	b.n	80034b2 <TinyBMS_UART_ReadAllEvents+0x3ea>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_ALL_EVENTS) {
 800320a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800320e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	2b12      	cmp	r3, #18
 8003216:	f040 8133 	bne.w	8003480 <TinyBMS_UART_ReadAllEvents+0x3b8>
			printf("Response from BMS [OK]\r\n");
 800321a:	487c      	ldr	r0, [pc, #496]	; (800340c <TinyBMS_UART_ReadAllEvents+0x344>)
 800321c:	f00a fac0 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	3302      	adds	r3, #2
 8003226:	2201      	movs	r2, #1
 8003228:	4619      	mov	r1, r3
 800322a:	4874      	ldr	r0, [pc, #464]	; (80033fc <TinyBMS_UART_ReadAllEvents+0x334>)
 800322c:	f008 faf0 	bl	800b810 <HAL_UART_Receive_IT>

			//Total Events: (0x01-0x90) or 144 events
			uint8_t PL = rx_buffer[2];
 8003230:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003234:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8003238:	789b      	ldrb	r3, [r3, #2]
 800323a:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
			//Payload Length = PL = 4n+4 bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 4n+9 from OK reply
 800323e:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8003242:	b29b      	uxth	r3, r3
 8003244:	3302      	adds	r3, #2
 8003246:	b29a      	uxth	r2, r3
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	3303      	adds	r3, #3
 800324e:	4619      	mov	r1, r3
 8003250:	486a      	ldr	r0, [pc, #424]	; (80033fc <TinyBMS_UART_ReadAllEvents+0x334>)
 8003252:	f008 fadd 	bl	800b810 <HAL_UART_Receive_IT>

			uint32_t BTSP = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
			uint32_t TSP[] = {0}; 	//uint24_t stored in a uint32_t
 800325c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003260:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
			uint8_t Event[] = {0};
 8003268:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800326c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
			uint32_t numEvents = ((PL - 4) / 4); //4 bytes for BTSP + 4 bytes per TSP+EVENT reading
 8003274:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 8003278:	3b04      	subs	r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	da00      	bge.n	8003280 <TinyBMS_UART_ReadAllEvents+0x1b8>
 800327e:	3303      	adds	r3, #3
 8003280:	109b      	asrs	r3, r3, #2
 8003282:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			//**1 event = Payload length of 8 Bytes (BTSP + TSP + EVENT), 2 events = 12 Bytes, etc..**
			uint32_t n = 1; //event index
 8003286:	2301      	movs	r3, #1
 8003288:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

			for(uint32_t i = 0; i < numEvents; i++) {
 800328c:	2300      	movs	r3, #0
 800328e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8003292:	e073      	b.n	800337c <TinyBMS_UART_ReadAllEvents+0x2b4>
				if(i == 0) {
 8003294:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003298:	2b00      	cmp	r3, #0
 800329a:	d12a      	bne.n	80032f2 <TinyBMS_UART_ReadAllEvents+0x22a>
					//BTSP BMS Timestamp in seconds -> LSB = Byte4, MSB = Byte7 (i.e. rx_buffer[3:6])
					BTSP = ((rx_buffer[(4*n)+3-1] << 24) | (rx_buffer[(4*n)+2-1] << 16) | (rx_buffer[(4*n)+1-1] << 8) | (rx_buffer[(4*n)-1]));
 800329c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80032a8:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	061a      	lsls	r2, r3, #24
 80032b0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	3301      	adds	r3, #1
 80032b8:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80032bc:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 80032c0:	5ccb      	ldrb	r3, [r1, r3]
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	431a      	orrs	r2, r3
 80032c6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80032d0:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 80032d4:	5ccb      	ldrb	r3, [r1, r3]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	3a01      	subs	r2, #1
 80032e2:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80032e6:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 80032ea:	5c8a      	ldrb	r2, [r1, r2]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
				}

				//TSPn Event Timestamp in seconds -> LSB = Byte4n+4, MSB = Byte4n+6 (i.e. rx_buffer[4n+4-1 : 4n+6-1])
				//**Remember that TSP data is a uint24_t stored in a uint32_t, so ignore the MSB of the array element**
				TSP[i] = ((rx_buffer[(4*n)+6-1] << 16) | (rx_buffer[(4*n)+5-1] << 8) | (rx_buffer[(4*n)+4-1]));
 80032f2:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	3305      	adds	r3, #5
 80032fa:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80032fe:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800330a:	3301      	adds	r3, #1
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8003312:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	4313      	orrs	r3, r2
 800331c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8003320:	3201      	adds	r2, #1
 8003322:	0092      	lsls	r2, r2, #2
 8003324:	3a01      	subs	r2, #1
 8003326:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 800332a:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 800332e:	5c8a      	ldrb	r2, [r1, r2]
 8003330:	4313      	orrs	r3, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003338:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800333c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8003340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				//BMS Eventn ID -> Byte(4n+7) (i.e. rx_buffer [4n+7-1])
				Event[i] = rx_buffer[(4*n)+7-1];
 8003344:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	3306      	adds	r3, #6
 800334c:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8003350:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8003354:	5cd1      	ldrb	r1, [r2, r3]
 8003356:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800335a:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 800335e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003362:	4413      	add	r3, r2
 8003364:	460a      	mov	r2, r1
 8003366:	701a      	strb	r2, [r3, #0]

				n++;
 8003368:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800336c:	3301      	adds	r3, #1
 800336e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
			for(uint32_t i = 0; i < numEvents; i++) {
 8003372:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003376:	3301      	adds	r3, #1
 8003378:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800337c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8003380:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003384:	429a      	cmp	r2, r3
 8003386:	d385      	bcc.n	8003294 <TinyBMS_UART_ReadAllEvents+0x1cc>
			}

			CRC_reply = ((rx_buffer[(4*n)+9-1] << 8) | rx_buffer[(4*n)+8-1]);
 8003388:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800338c:	3302      	adds	r3, #2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8003394:	f5a2 6288 	sub.w	r2, r2, #1088	; 0x440
 8003398:	5cd3      	ldrb	r3, [r2, r3]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	b21a      	sxth	r2, r3
 800339e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80033a2:	3302      	adds	r3, #2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	3b01      	subs	r3, #1
 80033a8:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80033ac:	f5a1 6188 	sub.w	r1, r1, #1088	; 0x440
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 80033bc:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3303      	adds	r3, #3
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	f107 0310 	add.w	r3, r7, #16
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 fa99 	bl	8007904 <CRC16>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436

			if(CRC_calc == CRC_reply) {
 80033d8:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 80033dc:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	; 0x434
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d146      	bne.n	8003472 <TinyBMS_UART_ReadAllEvents+0x3aa>
				printf("CRC pass\r\n");
 80033e4:	4807      	ldr	r0, [pc, #28]	; (8003404 <TinyBMS_UART_ReadAllEvents+0x33c>)
 80033e6:	f00a f9db 	bl	800d7a0 <puts>

				//Print "All Events" Timestamps with their Event IDs
				printf("************ TinyBMS All Events ************\r\n");
 80033ea:	4809      	ldr	r0, [pc, #36]	; (8003410 <TinyBMS_UART_ReadAllEvents+0x348>)
 80033ec:	f00a f9d8 	bl	800d7a0 <puts>
				for(uint32_t i = 0; i < numEvents; i++) {
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 80033f6:	e02f      	b.n	8003458 <TinyBMS_UART_ReadAllEvents+0x390>
 80033f8:	08011064 	.word	0x08011064
 80033fc:	20000228 	.word	0x20000228
 8003400:	080109d4 	.word	0x080109d4
 8003404:	080108f0 	.word	0x080108f0
 8003408:	080108fc 	.word	0x080108fc
 800340c:	080109f0 	.word	0x080109f0
 8003410:	08011080 	.word	0x08011080
					if(i == 0) {
 8003414:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <TinyBMS_UART_ReadAllEvents+0x35e>
						//could convert seconds into a meaningful hh:mm:ss time later
						printf("BMS Timestamp (s): %lu\r\n", BTSP);
 800341c:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8003420:	4827      	ldr	r0, [pc, #156]	; (80034c0 <TinyBMS_UART_ReadAllEvents+0x3f8>)
 8003422:	f00a f937 	bl	800d694 <iprintf>
					}
					//could convert seconds into a meaningful hh:mm:ss time later
					printf("Event Timestamp (s): %lu \t Event ID: 0x%02X\r\n", TSP[i], Event[i]);
 8003426:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800342a:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800342e:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8003432:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003436:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800343a:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 800343e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	481e      	ldr	r0, [pc, #120]	; (80034c4 <TinyBMS_UART_ReadAllEvents+0x3fc>)
 800344a:	f00a f923 	bl	800d694 <iprintf>
				for(uint32_t i = 0; i < numEvents; i++) {
 800344e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003452:	3301      	adds	r3, #1
 8003454:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8003458:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 800345c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003460:	429a      	cmp	r2, r3
 8003462:	d3d7      	bcc.n	8003414 <TinyBMS_UART_ReadAllEvents+0x34c>
				}
				printf("----------------------------------------\r\n");
 8003464:	4818      	ldr	r0, [pc, #96]	; (80034c8 <TinyBMS_UART_ReadAllEvents+0x400>)
 8003466:	f00a f99b 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 800346a:	2300      	movs	r3, #0
 800346c:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8003470:	e01f      	b.n	80034b2 <TinyBMS_UART_ReadAllEvents+0x3ea>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003472:	4816      	ldr	r0, [pc, #88]	; (80034cc <TinyBMS_UART_ReadAllEvents+0x404>)
 8003474:	f00a f994 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003478:	23ff      	movs	r3, #255	; 0xff
 800347a:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 800347e:	e018      	b.n	80034b2 <TinyBMS_UART_ReadAllEvents+0x3ea>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x12 but was 0x%02X\r\n", rx_buffer[1]);
 8003480:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003484:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	4619      	mov	r1, r3
 800348c:	4810      	ldr	r0, [pc, #64]	; (80034d0 <TinyBMS_UART_ReadAllEvents+0x408>)
 800348e:	f00a f901 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8003492:	23ff      	movs	r3, #255	; 0xff
 8003494:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8003498:	e00b      	b.n	80034b2 <TinyBMS_UART_ReadAllEvents+0x3ea>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800349a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800349e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	4619      	mov	r1, r3
 80034a6:	480b      	ldr	r0, [pc, #44]	; (80034d4 <TinyBMS_UART_ReadAllEvents+0x40c>)
 80034a8:	f00a f8f4 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 80034ac:	23ff      	movs	r3, #255	; 0xff
 80034ae:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
	}

	return retval;
 80034b2:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	08010fe0 	.word	0x08010fe0
 80034c4:	08010ffc 	.word	0x08010ffc
 80034c8:	08010af0 	.word	0x08010af0
 80034cc:	08010b1c 	.word	0x08010b1c
 80034d0:	080110b0 	.word	0x080110b0
 80034d4:	08010988 	.word	0x08010988

080034d8 <TinyBMS_UART_ReadBatteryPackVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_UART_ReadBatteryPackVoltage(UART_HandleTypeDef *huart) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0a2      	sub	sp, #136	; 0x88
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackVoltage\r\n");
 80034e0:	4876      	ldr	r0, [pc, #472]	; (80036bc <TinyBMS_UART_ReadBatteryPackVoltage+0x1e4>)
 80034e2:	f00a f95d 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80034e6:	23ff      	movs	r3, #255	; 0xff
 80034e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80034fe:	2300      	movs	r3, #0
 8003500:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8003504:	2300      	movs	r3, #0
 8003506:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 800350a:	23aa      	movs	r3, #170	; 0xaa
 800350c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = UART_TBMS_READ_PACK_VOLTAGE;
 8003510:	2314      	movs	r3, #20
 8003512:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	CRC_request = CRC16(tx_buffer, 2);
 8003516:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800351a:	2102      	movs	r1, #2
 800351c:	4618      	mov	r0, r3
 800351e:	f004 f9f1 	bl	8007904 <CRC16>
 8003522:	4603      	mov	r3, r0
 8003524:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	CRC_LSB = (CRC_request & 0xFF);
 8003528:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800352c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8003530:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	b29b      	uxth	r3, r3
 8003538:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 800353c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	tx_buffer[3] = CRC_MSB;
 8003544:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003548:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 800354c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003550:	2204      	movs	r2, #4
 8003552:	4619      	mov	r1, r3
 8003554:	485a      	ldr	r0, [pc, #360]	; (80036c0 <TinyBMS_UART_ReadBatteryPackVoltage+0x1e8>)
 8003556:	f008 f8ed 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 800355a:	f107 030c 	add.w	r3, r7, #12
 800355e:	2202      	movs	r2, #2
 8003560:	4619      	mov	r1, r3
 8003562:	4857      	ldr	r0, [pc, #348]	; (80036c0 <TinyBMS_UART_ReadBatteryPackVoltage+0x1e8>)
 8003564:	f008 f954 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003568:	7b3b      	ldrb	r3, [r7, #12]
 800356a:	2baa      	cmp	r3, #170	; 0xaa
 800356c:	f040 8093 	bne.w	8003696 <TinyBMS_UART_ReadBatteryPackVoltage+0x1be>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003570:	7b7b      	ldrb	r3, [r7, #13]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d138      	bne.n	80035e8 <TinyBMS_UART_ReadBatteryPackVoltage+0x110>
			printf("Response from BMS [ERROR]\r\n");
 8003576:	4853      	ldr	r0, [pc, #332]	; (80036c4 <TinyBMS_UART_ReadBatteryPackVoltage+0x1ec>)
 8003578:	f00a f912 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 800357c:	f107 030c 	add.w	r3, r7, #12
 8003580:	3302      	adds	r3, #2
 8003582:	2204      	movs	r2, #4
 8003584:	4619      	mov	r1, r3
 8003586:	484e      	ldr	r0, [pc, #312]	; (80036c0 <TinyBMS_UART_ReadBatteryPackVoltage+0x1e8>)
 8003588:	f008 f942 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003592:	7c7b      	ldrb	r3, [r7, #17]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	b21a      	sxth	r2, r3
 8003598:	7c3b      	ldrb	r3, [r7, #16]
 800359a:	b21b      	sxth	r3, r3
 800359c:	4313      	orrs	r3, r2
 800359e:	b21b      	sxth	r3, r3
 80035a0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	2104      	movs	r1, #4
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 f9aa 	bl	8007904 <CRC16>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

			if(CRC_calc == CRC_reply) {
 80035b6:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80035ba:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80035be:	429a      	cmp	r2, r3
 80035c0:	d106      	bne.n	80035d0 <TinyBMS_UART_ReadBatteryPackVoltage+0xf8>
				printf("CRC pass\r\n");
 80035c2:	4841      	ldr	r0, [pc, #260]	; (80036c8 <TinyBMS_UART_ReadBatteryPackVoltage+0x1f0>)
 80035c4:	f00a f8ec 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80035c8:	23ff      	movs	r3, #255	; 0xff
 80035ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80035ce:	e005      	b.n	80035dc <TinyBMS_UART_ReadBatteryPackVoltage+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 80035d0:	483e      	ldr	r0, [pc, #248]	; (80036cc <TinyBMS_UART_ReadBatteryPackVoltage+0x1f4>)
 80035d2:	f00a f8e5 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80035d6:	23ff      	movs	r3, #255	; 0xff
 80035d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
			reportBMSError(error);
 80035dc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80035e0:	4618      	mov	r0, r3
 80035e2:	f004 f96d 	bl	80078c0 <reportBMSError>
 80035e6:	e05e      	b.n	80036a6 <TinyBMS_UART_ReadBatteryPackVoltage+0x1ce>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_PACK_VOLTAGE) {
 80035e8:	7b7b      	ldrb	r3, [r7, #13]
 80035ea:	2b14      	cmp	r3, #20
 80035ec:	d14a      	bne.n	8003684 <TinyBMS_UART_ReadBatteryPackVoltage+0x1ac>
			printf("Response from BMS [OK]\r\n");
 80035ee:	4838      	ldr	r0, [pc, #224]	; (80036d0 <TinyBMS_UART_ReadBatteryPackVoltage+0x1f8>)
 80035f0:	f00a f8d6 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	3302      	adds	r3, #2
 80035fa:	2206      	movs	r2, #6
 80035fc:	4619      	mov	r1, r3
 80035fe:	4830      	ldr	r0, [pc, #192]	; (80036c0 <TinyBMS_UART_ReadBatteryPackVoltage+0x1e8>)
 8003600:	f008 f906 	bl	800b810 <HAL_UART_Receive_IT>

			uint32_t data = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8003604:	7c7b      	ldrb	r3, [r7, #17]
 8003606:	061a      	lsls	r2, r3, #24
 8003608:	7c3b      	ldrb	r3, [r7, #16]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	4313      	orrs	r3, r2
 8003614:	7bba      	ldrb	r2, [r7, #14]
 8003616:	4313      	orrs	r3, r2
 8003618:	67bb      	str	r3, [r7, #120]	; 0x78
		    //printf("0x%08X\r\n", data);

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	b21a      	sxth	r2, r3
 8003620:	7cbb      	ldrb	r3, [r7, #18]
 8003622:	b21b      	sxth	r3, r3
 8003624:	4313      	orrs	r3, r2
 8003626:	b21b      	sxth	r3, r3
 8003628:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-6 of OK response
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	2106      	movs	r1, #6
 8003632:	4618      	mov	r0, r3
 8003634:	f004 f966 	bl	8007904 <CRC16>
 8003638:	4603      	mov	r3, r0
 800363a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

			if(CRC_calc == CRC_reply) {
 800363e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8003642:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003646:	429a      	cmp	r2, r3
 8003648:	d115      	bne.n	8003676 <TinyBMS_UART_ReadBatteryPackVoltage+0x19e>
				printf("CRC pass\r\n");
 800364a:	481f      	ldr	r0, [pc, #124]	; (80036c8 <TinyBMS_UART_ReadBatteryPackVoltage+0x1f0>)
 800364c:	f00a f8a8 	bl	800d7a0 <puts>

				float batteryPackVoltage = data;
 8003650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				printf("Battery Pack Voltage: %f (V)\r\n", batteryPackVoltage);
 800365e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003660:	f7fc ff92 	bl	8000588 <__aeabi_f2d>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	481a      	ldr	r0, [pc, #104]	; (80036d4 <TinyBMS_UART_ReadBatteryPackVoltage+0x1fc>)
 800366a:	f00a f813 	bl	800d694 <iprintf>
				retval = CMD_SUCCESS;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003674:	e017      	b.n	80036a6 <TinyBMS_UART_ReadBatteryPackVoltage+0x1ce>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003676:	4818      	ldr	r0, [pc, #96]	; (80036d8 <TinyBMS_UART_ReadBatteryPackVoltage+0x200>)
 8003678:	f00a f892 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800367c:	23ff      	movs	r3, #255	; 0xff
 800367e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003682:	e010      	b.n	80036a6 <TinyBMS_UART_ReadBatteryPackVoltage+0x1ce>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x14 but was 0x%02X\r\n", rx_buffer[1]);
 8003684:	7b7b      	ldrb	r3, [r7, #13]
 8003686:	4619      	mov	r1, r3
 8003688:	4814      	ldr	r0, [pc, #80]	; (80036dc <TinyBMS_UART_ReadBatteryPackVoltage+0x204>)
 800368a:	f00a f803 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 800368e:	23ff      	movs	r3, #255	; 0xff
 8003690:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003694:	e007      	b.n	80036a6 <TinyBMS_UART_ReadBatteryPackVoltage+0x1ce>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8003696:	7b3b      	ldrb	r3, [r7, #12]
 8003698:	4619      	mov	r1, r3
 800369a:	4811      	ldr	r0, [pc, #68]	; (80036e0 <TinyBMS_UART_ReadBatteryPackVoltage+0x208>)
 800369c:	f009 fffa 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 80036a0:	23ff      	movs	r3, #255	; 0xff
 80036a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}

	return retval;
 80036a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80036b2:	eeb0 0a67 	vmov.f32	s0, s15
 80036b6:	3788      	adds	r7, #136	; 0x88
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	080110e8 	.word	0x080110e8
 80036c0:	20000228 	.word	0x20000228
 80036c4:	080109d4 	.word	0x080109d4
 80036c8:	080108f0 	.word	0x080108f0
 80036cc:	080108fc 	.word	0x080108fc
 80036d0:	080109f0 	.word	0x080109f0
 80036d4:	08011110 	.word	0x08011110
 80036d8:	08010b1c 	.word	0x08010b1c
 80036dc:	08011130 	.word	0x08011130
 80036e0:	08010988 	.word	0x08010988

080036e4 <TinyBMS_UART_ReadBatteryPackCurrent>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_UART_ReadBatteryPackCurrent(UART_HandleTypeDef *huart) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b0a2      	sub	sp, #136	; 0x88
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackCurrent\r\n");
 80036ec:	4876      	ldr	r0, [pc, #472]	; (80038c8 <TinyBMS_UART_ReadBatteryPackCurrent+0x1e4>)
 80036ee:	f00a f857 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80036f2:	23ff      	movs	r3, #255	; 0xff
 80036f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80036fe:	2300      	movs	r3, #0
 8003700:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800370a:	2300      	movs	r3, #0
 800370c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8003710:	2300      	movs	r3, #0
 8003712:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003716:	23aa      	movs	r3, #170	; 0xaa
 8003718:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = UART_TBMS_READ_PACK_CURRENT;
 800371c:	2315      	movs	r3, #21
 800371e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	CRC_request = CRC16(tx_buffer, 2);
 8003722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003726:	2102      	movs	r1, #2
 8003728:	4618      	mov	r0, r3
 800372a:	f004 f8eb 	bl	8007904 <CRC16>
 800372e:	4603      	mov	r3, r0
 8003730:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	CRC_LSB = (CRC_request & 0xFF);
 8003734:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003738:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 800373c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	b29b      	uxth	r3, r3
 8003744:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003748:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800374c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	tx_buffer[3] = CRC_MSB;
 8003750:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003754:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003758:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800375c:	2204      	movs	r2, #4
 800375e:	4619      	mov	r1, r3
 8003760:	485a      	ldr	r0, [pc, #360]	; (80038cc <TinyBMS_UART_ReadBatteryPackCurrent+0x1e8>)
 8003762:	f007 ffe7 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003766:	f107 030c 	add.w	r3, r7, #12
 800376a:	2202      	movs	r2, #2
 800376c:	4619      	mov	r1, r3
 800376e:	4857      	ldr	r0, [pc, #348]	; (80038cc <TinyBMS_UART_ReadBatteryPackCurrent+0x1e8>)
 8003770:	f008 f84e 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003774:	7b3b      	ldrb	r3, [r7, #12]
 8003776:	2baa      	cmp	r3, #170	; 0xaa
 8003778:	f040 8093 	bne.w	80038a2 <TinyBMS_UART_ReadBatteryPackCurrent+0x1be>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 800377c:	7b7b      	ldrb	r3, [r7, #13]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d138      	bne.n	80037f4 <TinyBMS_UART_ReadBatteryPackCurrent+0x110>
			printf("Response from BMS [ERROR]\r\n");
 8003782:	4853      	ldr	r0, [pc, #332]	; (80038d0 <TinyBMS_UART_ReadBatteryPackCurrent+0x1ec>)
 8003784:	f00a f80c 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	3302      	adds	r3, #2
 800378e:	2204      	movs	r2, #4
 8003790:	4619      	mov	r1, r3
 8003792:	484e      	ldr	r0, [pc, #312]	; (80038cc <TinyBMS_UART_ReadBatteryPackCurrent+0x1e8>)
 8003794:	f008 f83c 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 800379e:	7c7b      	ldrb	r3, [r7, #17]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	b21a      	sxth	r2, r3
 80037a4:	7c3b      	ldrb	r3, [r7, #16]
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	4313      	orrs	r3, r2
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	2104      	movs	r1, #4
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 f8a4 	bl	8007904 <CRC16>
 80037bc:	4603      	mov	r3, r0
 80037be:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

			if(CRC_calc == CRC_reply) {
 80037c2:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80037c6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d106      	bne.n	80037dc <TinyBMS_UART_ReadBatteryPackCurrent+0xf8>
				printf("CRC pass\r\n");
 80037ce:	4841      	ldr	r0, [pc, #260]	; (80038d4 <TinyBMS_UART_ReadBatteryPackCurrent+0x1f0>)
 80037d0:	f009 ffe6 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80037d4:	23ff      	movs	r3, #255	; 0xff
 80037d6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80037da:	e005      	b.n	80037e8 <TinyBMS_UART_ReadBatteryPackCurrent+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 80037dc:	483e      	ldr	r0, [pc, #248]	; (80038d8 <TinyBMS_UART_ReadBatteryPackCurrent+0x1f4>)
 80037de:	f009 ffdf 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80037e2:	23ff      	movs	r3, #255	; 0xff
 80037e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
			reportBMSError(error);
 80037e8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80037ec:	4618      	mov	r0, r3
 80037ee:	f004 f867 	bl	80078c0 <reportBMSError>
 80037f2:	e05e      	b.n	80038b2 <TinyBMS_UART_ReadBatteryPackCurrent+0x1ce>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_PACK_CURRENT) {
 80037f4:	7b7b      	ldrb	r3, [r7, #13]
 80037f6:	2b15      	cmp	r3, #21
 80037f8:	d14a      	bne.n	8003890 <TinyBMS_UART_ReadBatteryPackCurrent+0x1ac>
			printf("Response from BMS [OK]\r\n");
 80037fa:	4838      	ldr	r0, [pc, #224]	; (80038dc <TinyBMS_UART_ReadBatteryPackCurrent+0x1f8>)
 80037fc:	f009 ffd0 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 8003800:	f107 030c 	add.w	r3, r7, #12
 8003804:	3302      	adds	r3, #2
 8003806:	2206      	movs	r2, #6
 8003808:	4619      	mov	r1, r3
 800380a:	4830      	ldr	r0, [pc, #192]	; (80038cc <TinyBMS_UART_ReadBatteryPackCurrent+0x1e8>)
 800380c:	f008 f800 	bl	800b810 <HAL_UART_Receive_IT>

			uint32_t data = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8003810:	7c7b      	ldrb	r3, [r7, #17]
 8003812:	061a      	lsls	r2, r3, #24
 8003814:	7c3b      	ldrb	r3, [r7, #16]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	431a      	orrs	r2, r3
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	4313      	orrs	r3, r2
 8003820:	7bba      	ldrb	r2, [r7, #14]
 8003822:	4313      	orrs	r3, r2
 8003824:	67bb      	str	r3, [r7, #120]	; 0x78
		    //printf("0x%08X\r\n", data);

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	b21a      	sxth	r2, r3
 800382c:	7cbb      	ldrb	r3, [r7, #18]
 800382e:	b21b      	sxth	r3, r3
 8003830:	4313      	orrs	r3, r2
 8003832:	b21b      	sxth	r3, r3
 8003834:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-6 of OK response
 8003838:	f107 030c 	add.w	r3, r7, #12
 800383c:	2106      	movs	r1, #6
 800383e:	4618      	mov	r0, r3
 8003840:	f004 f860 	bl	8007904 <CRC16>
 8003844:	4603      	mov	r3, r0
 8003846:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

			if(CRC_calc == CRC_reply) {
 800384a:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800384e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003852:	429a      	cmp	r2, r3
 8003854:	d115      	bne.n	8003882 <TinyBMS_UART_ReadBatteryPackCurrent+0x19e>
				printf("CRC pass\r\n");
 8003856:	481f      	ldr	r0, [pc, #124]	; (80038d4 <TinyBMS_UART_ReadBatteryPackCurrent+0x1f0>)
 8003858:	f009 ffa2 	bl	800d7a0 <puts>

				float batteryPackCurrent = data;
 800385c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				printf("Battery Pack Current: %f (A)\r\n", batteryPackCurrent);
 800386a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800386c:	f7fc fe8c 	bl	8000588 <__aeabi_f2d>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	481a      	ldr	r0, [pc, #104]	; (80038e0 <TinyBMS_UART_ReadBatteryPackCurrent+0x1fc>)
 8003876:	f009 ff0d 	bl	800d694 <iprintf>
				retval = CMD_SUCCESS;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003880:	e017      	b.n	80038b2 <TinyBMS_UART_ReadBatteryPackCurrent+0x1ce>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003882:	4818      	ldr	r0, [pc, #96]	; (80038e4 <TinyBMS_UART_ReadBatteryPackCurrent+0x200>)
 8003884:	f009 ff8c 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003888:	23ff      	movs	r3, #255	; 0xff
 800388a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800388e:	e010      	b.n	80038b2 <TinyBMS_UART_ReadBatteryPackCurrent+0x1ce>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x15 but was 0x%02X\r\n", rx_buffer[1]);
 8003890:	7b7b      	ldrb	r3, [r7, #13]
 8003892:	4619      	mov	r1, r3
 8003894:	4814      	ldr	r0, [pc, #80]	; (80038e8 <TinyBMS_UART_ReadBatteryPackCurrent+0x204>)
 8003896:	f009 fefd 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 800389a:	23ff      	movs	r3, #255	; 0xff
 800389c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80038a0:	e007      	b.n	80038b2 <TinyBMS_UART_ReadBatteryPackCurrent+0x1ce>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80038a2:	7b3b      	ldrb	r3, [r7, #12]
 80038a4:	4619      	mov	r1, r3
 80038a6:	4811      	ldr	r0, [pc, #68]	; (80038ec <TinyBMS_UART_ReadBatteryPackCurrent+0x208>)
 80038a8:	f009 fef4 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 80038ac:	23ff      	movs	r3, #255	; 0xff
 80038ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}

	return retval;
 80038b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	3788      	adds	r7, #136	; 0x88
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	08011168 	.word	0x08011168
 80038cc:	20000228 	.word	0x20000228
 80038d0:	080109d4 	.word	0x080109d4
 80038d4:	080108f0 	.word	0x080108f0
 80038d8:	080108fc 	.word	0x080108fc
 80038dc:	080109f0 	.word	0x080109f0
 80038e0:	08011190 	.word	0x08011190
 80038e4:	08010b1c 	.word	0x08010b1c
 80038e8:	080111b0 	.word	0x080111b0
 80038ec:	08010988 	.word	0x08010988

080038f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_UART_ReadBatteryPackMaxCellVoltage(UART_HandleTypeDef *huart) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b0a0      	sub	sp, #128	; 0x80
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackMaxCellVoltage\r\n");
 80038f8:	486f      	ldr	r0, [pc, #444]	; (8003ab8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1c8>)
 80038fa:	f009 ff51 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80038fe:	23ff      	movs	r3, #255	; 0xff
 8003900:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800390a:	2300      	movs	r3, #0
 800390c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8003916:	2300      	movs	r3, #0
 8003918:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800391c:	2300      	movs	r3, #0
 800391e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003922:	23aa      	movs	r3, #170	; 0xaa
 8003924:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = UART_TBMS_READ_MAX_CELL_VOLTAGE;
 8003928:	2316      	movs	r3, #22
 800392a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	CRC_request = CRC16(tx_buffer, 2);
 800392e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003932:	2102      	movs	r1, #2
 8003934:	4618      	mov	r0, r3
 8003936:	f003 ffe5 	bl	8007904 <CRC16>
 800393a:	4603      	mov	r3, r0
 800393c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	CRC_LSB = (CRC_request & 0xFF);
 8003940:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003944:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8003948:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	b29b      	uxth	r3, r3
 8003950:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003954:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003958:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	tx_buffer[3] = CRC_MSB;
 800395c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003960:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003968:	2204      	movs	r2, #4
 800396a:	4619      	mov	r1, r3
 800396c:	4853      	ldr	r0, [pc, #332]	; (8003abc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1cc>)
 800396e:	f007 fee1 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	2202      	movs	r2, #2
 8003978:	4619      	mov	r1, r3
 800397a:	4850      	ldr	r0, [pc, #320]	; (8003abc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1cc>)
 800397c:	f007 ff48 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003980:	7b3b      	ldrb	r3, [r7, #12]
 8003982:	2baa      	cmp	r3, #170	; 0xaa
 8003984:	f040 8088 	bne.w	8003a98 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1a8>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003988:	7b7b      	ldrb	r3, [r7, #13]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d138      	bne.n	8003a00 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x110>
			printf("Response from BMS [ERROR]\r\n");
 800398e:	484c      	ldr	r0, [pc, #304]	; (8003ac0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1d0>)
 8003990:	f009 ff06 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003994:	f107 030c 	add.w	r3, r7, #12
 8003998:	3302      	adds	r3, #2
 800399a:	2204      	movs	r2, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4847      	ldr	r0, [pc, #284]	; (8003abc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1cc>)
 80039a0:	f007 ff36 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80039aa:	7c7b      	ldrb	r3, [r7, #17]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	b21a      	sxth	r2, r3
 80039b0:	7c3b      	ldrb	r3, [r7, #16]
 80039b2:	b21b      	sxth	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	2104      	movs	r1, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 ff9e 	bl	8007904 <CRC16>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 80039ce:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80039d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d106      	bne.n	80039e8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0xf8>
				printf("CRC pass\r\n");
 80039da:	483a      	ldr	r0, [pc, #232]	; (8003ac4 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1d4>)
 80039dc:	f009 fee0 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80039e0:	23ff      	movs	r3, #255	; 0xff
 80039e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039e6:	e005      	b.n	80039f4 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 80039e8:	4837      	ldr	r0, [pc, #220]	; (8003ac8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1d8>)
 80039ea:	f009 fed9 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80039ee:	23ff      	movs	r3, #255	; 0xff
 80039f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			reportBMSError(error);
 80039f4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 ff61 	bl	80078c0 <reportBMSError>
 80039fe:	e053      	b.n	8003aa8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1b8>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_MAX_CELL_VOLTAGE) {
 8003a00:	7b7b      	ldrb	r3, [r7, #13]
 8003a02:	2b16      	cmp	r3, #22
 8003a04:	d13f      	bne.n	8003a86 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x196>
			printf("Response from BMS [OK]\r\n");
 8003a06:	4831      	ldr	r0, [pc, #196]	; (8003acc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1dc>)
 8003a08:	f009 feca 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from OK reply
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	3302      	adds	r3, #2
 8003a12:	2204      	movs	r2, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4829      	ldr	r0, [pc, #164]	; (8003abc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1cc>)
 8003a18:	f007 fefa 	bl	800b810 <HAL_UART_Receive_IT>

			uint16_t batteryPackMaxCellVoltage = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	7bbb      	ldrb	r3, [r7, #14]
 8003a24:	b21b      	sxth	r3, r3
 8003a26:	4313      	orrs	r3, r2
 8003a28:	b21b      	sxth	r3, r3
 8003a2a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003a2e:	7c7b      	ldrb	r3, [r7, #17]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	b21a      	sxth	r2, r3
 8003a34:	7c3b      	ldrb	r3, [r7, #16]
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of OK response
 8003a40:	f107 030c 	add.w	r3, r7, #12
 8003a44:	2104      	movs	r1, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 ff5c 	bl	8007904 <CRC16>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 8003a52:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003a56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d10c      	bne.n	8003a78 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x188>
				printf("CRC pass\r\n");
 8003a5e:	4819      	ldr	r0, [pc, #100]	; (8003ac4 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1d4>)
 8003a60:	f009 fe9e 	bl	800d7a0 <puts>

				printf("Battery Pack Maximum Cell Voltage: %u (mV)\r\n", batteryPackMaxCellVoltage);
 8003a64:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4819      	ldr	r0, [pc, #100]	; (8003ad0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1e0>)
 8003a6c:	f009 fe12 	bl	800d694 <iprintf>
				retval = CMD_SUCCESS;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a76:	e017      	b.n	8003aa8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1b8>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003a78:	4816      	ldr	r0, [pc, #88]	; (8003ad4 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1e4>)
 8003a7a:	f009 fe91 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003a7e:	23ff      	movs	r3, #255	; 0xff
 8003a80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a84:	e010      	b.n	8003aa8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1b8>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x16 but was 0x%02X\r\n", rx_buffer[1]);
 8003a86:	7b7b      	ldrb	r3, [r7, #13]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4813      	ldr	r0, [pc, #76]	; (8003ad8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1e8>)
 8003a8c:	f009 fe02 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8003a90:	23ff      	movs	r3, #255	; 0xff
 8003a92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a96:	e007      	b.n	8003aa8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1b8>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8003a98:	7b3b      	ldrb	r3, [r7, #12]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	480f      	ldr	r0, [pc, #60]	; (8003adc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1ec>)
 8003a9e:	f009 fdf9 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8003aa2:	23ff      	movs	r3, #255	; 0xff
 8003aa4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	return retval;
 8003aa8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003aac:	b29b      	uxth	r3, r3
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3780      	adds	r7, #128	; 0x80
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	080111e8 	.word	0x080111e8
 8003abc:	20000228 	.word	0x20000228
 8003ac0:	080109d4 	.word	0x080109d4
 8003ac4:	080108f0 	.word	0x080108f0
 8003ac8:	080108fc 	.word	0x080108fc
 8003acc:	080109f0 	.word	0x080109f0
 8003ad0:	08011214 	.word	0x08011214
 8003ad4:	08010b1c 	.word	0x08010b1c
 8003ad8:	08011244 	.word	0x08011244
 8003adc:	08010988 	.word	0x08010988

08003ae0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_UART_ReadBatteryPackMinCellVoltage(UART_HandleTypeDef *huart) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b0a0      	sub	sp, #128	; 0x80
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackMinCellVoltage\r\n");
 8003ae8:	486f      	ldr	r0, [pc, #444]	; (8003ca8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1c8>)
 8003aea:	f009 fe59 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8003aee:	23ff      	movs	r3, #255	; 0xff
 8003af0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8003b06:	2300      	movs	r3, #0
 8003b08:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003b12:	23aa      	movs	r3, #170	; 0xaa
 8003b14:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = UART_TBMS_READ_MIN_CELL_VOLTAGE;
 8003b18:	2317      	movs	r3, #23
 8003b1a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	CRC_request = CRC16(tx_buffer, 2);
 8003b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b22:	2102      	movs	r1, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f003 feed 	bl	8007904 <CRC16>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	CRC_LSB = (CRC_request & 0xFF);
 8003b30:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003b34:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8003b38:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003b44:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003b48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	tx_buffer[3] = CRC_MSB;
 8003b4c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003b50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4853      	ldr	r0, [pc, #332]	; (8003cac <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1cc>)
 8003b5e:	f007 fde9 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003b62:	f107 030c 	add.w	r3, r7, #12
 8003b66:	2202      	movs	r2, #2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4850      	ldr	r0, [pc, #320]	; (8003cac <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1cc>)
 8003b6c:	f007 fe50 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003b70:	7b3b      	ldrb	r3, [r7, #12]
 8003b72:	2baa      	cmp	r3, #170	; 0xaa
 8003b74:	f040 8088 	bne.w	8003c88 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1a8>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003b78:	7b7b      	ldrb	r3, [r7, #13]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d138      	bne.n	8003bf0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x110>
			printf("Response from BMS [ERROR]\r\n");
 8003b7e:	484c      	ldr	r0, [pc, #304]	; (8003cb0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1d0>)
 8003b80:	f009 fe0e 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003b84:	f107 030c 	add.w	r3, r7, #12
 8003b88:	3302      	adds	r3, #2
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4847      	ldr	r0, [pc, #284]	; (8003cac <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1cc>)
 8003b90:	f007 fe3e 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003b9a:	7c7b      	ldrb	r3, [r7, #17]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	b21a      	sxth	r2, r3
 8003ba0:	7c3b      	ldrb	r3, [r7, #16]
 8003ba2:	b21b      	sxth	r3, r3
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	2104      	movs	r1, #4
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 fea6 	bl	8007904 <CRC16>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 8003bbe:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003bc2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d106      	bne.n	8003bd8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0xf8>
				printf("CRC pass\r\n");
 8003bca:	483a      	ldr	r0, [pc, #232]	; (8003cb4 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1d4>)
 8003bcc:	f009 fde8 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003bd0:	23ff      	movs	r3, #255	; 0xff
 8003bd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003bd6:	e005      	b.n	8003be4 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8003bd8:	4837      	ldr	r0, [pc, #220]	; (8003cb8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1d8>)
 8003bda:	f009 fde1 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003bde:	23ff      	movs	r3, #255	; 0xff
 8003be0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			reportBMSError(error);
 8003be4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fe69 	bl	80078c0 <reportBMSError>
 8003bee:	e053      	b.n	8003c98 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1b8>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_MIN_CELL_VOLTAGE) {
 8003bf0:	7b7b      	ldrb	r3, [r7, #13]
 8003bf2:	2b17      	cmp	r3, #23
 8003bf4:	d13f      	bne.n	8003c76 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x196>
			printf("Response from BMS [OK]\r\n");
 8003bf6:	4831      	ldr	r0, [pc, #196]	; (8003cbc <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1dc>)
 8003bf8:	f009 fdd2 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from OK reply
 8003bfc:	f107 030c 	add.w	r3, r7, #12
 8003c00:	3302      	adds	r3, #2
 8003c02:	2204      	movs	r2, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4829      	ldr	r0, [pc, #164]	; (8003cac <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1cc>)
 8003c08:	f007 fe02 	bl	800b810 <HAL_UART_Receive_IT>

			uint16_t batteryPackMinCellVoltage = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	b21a      	sxth	r2, r3
 8003c12:	7bbb      	ldrb	r3, [r7, #14]
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003c1e:	7c7b      	ldrb	r3, [r7, #17]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	b21a      	sxth	r2, r3
 8003c24:	7c3b      	ldrb	r3, [r7, #16]
 8003c26:	b21b      	sxth	r3, r3
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	b21b      	sxth	r3, r3
 8003c2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of OK response
 8003c30:	f107 030c 	add.w	r3, r7, #12
 8003c34:	2104      	movs	r1, #4
 8003c36:	4618      	mov	r0, r3
 8003c38:	f003 fe64 	bl	8007904 <CRC16>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 8003c42:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003c46:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d10c      	bne.n	8003c68 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x188>
				printf("CRC pass\r\n");
 8003c4e:	4819      	ldr	r0, [pc, #100]	; (8003cb4 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1d4>)
 8003c50:	f009 fda6 	bl	800d7a0 <puts>

				printf("Battery Pack Minimum Cell Voltage: %u (mV)\r\n", batteryPackMinCellVoltage);
 8003c54:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4819      	ldr	r0, [pc, #100]	; (8003cc0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1e0>)
 8003c5c:	f009 fd1a 	bl	800d694 <iprintf>
				retval = CMD_SUCCESS;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c66:	e017      	b.n	8003c98 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1b8>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003c68:	4816      	ldr	r0, [pc, #88]	; (8003cc4 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1e4>)
 8003c6a:	f009 fd99 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003c6e:	23ff      	movs	r3, #255	; 0xff
 8003c70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c74:	e010      	b.n	8003c98 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1b8>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x17 but was 0x%02X\r\n", rx_buffer[1]);
 8003c76:	7b7b      	ldrb	r3, [r7, #13]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4813      	ldr	r0, [pc, #76]	; (8003cc8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1e8>)
 8003c7c:	f009 fd0a 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8003c80:	23ff      	movs	r3, #255	; 0xff
 8003c82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c86:	e007      	b.n	8003c98 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1b8>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8003c88:	7b3b      	ldrb	r3, [r7, #12]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	480f      	ldr	r0, [pc, #60]	; (8003ccc <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1ec>)
 8003c8e:	f009 fd01 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8003c92:	23ff      	movs	r3, #255	; 0xff
 8003c94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	return retval;
 8003c98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003c9c:	b29b      	uxth	r3, r3
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3780      	adds	r7, #128	; 0x80
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	0801127c 	.word	0x0801127c
 8003cac:	20000228 	.word	0x20000228
 8003cb0:	080109d4 	.word	0x080109d4
 8003cb4:	080108f0 	.word	0x080108f0
 8003cb8:	080108fc 	.word	0x080108fc
 8003cbc:	080109f0 	.word	0x080109f0
 8003cc0:	080112a8 	.word	0x080112a8
 8003cc4:	08010b1c 	.word	0x08010b1c
 8003cc8:	080112d8 	.word	0x080112d8
 8003ccc:	08010988 	.word	0x08010988

08003cd0 <TinyBMS_UART_ReadOnlineStatus>:
 * 						 	        [UINT16]
 * 						   0x91 - Charging [INFO], 0x92 - Fully Charged [INFO]
 * 						   0x93 - Discharging [INFO], 0x94 - Regeneration [INFO]
 * 						   0x97 - Idle [INFO], 0x9B - Fault [ERROR]
 */
uint16_t TinyBMS_UART_ReadOnlineStatus(UART_HandleTypeDef *huart) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0a0      	sub	sp, #128	; 0x80
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadOnlineStatus\r\n");
 8003cd8:	488e      	ldr	r0, [pc, #568]	; (8003f14 <TinyBMS_UART_ReadOnlineStatus+0x244>)
 8003cda:	f009 fd61 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8003cde:	23ff      	movs	r3, #255	; 0xff
 8003ce0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003cea:	2300      	movs	r3, #0
 8003cec:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003d02:	23aa      	movs	r3, #170	; 0xaa
 8003d04:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = UART_TBMS_READ_ONLINE_STATUS;
 8003d08:	2318      	movs	r3, #24
 8003d0a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	CRC_request = CRC16(tx_buffer, 2);
 8003d0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 fdf5 	bl	8007904 <CRC16>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	CRC_LSB = (CRC_request & 0xFF);
 8003d20:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003d24:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8003d28:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003d34:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003d38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	tx_buffer[3] = CRC_MSB;
 8003d3c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003d40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d48:	2204      	movs	r2, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4872      	ldr	r0, [pc, #456]	; (8003f18 <TinyBMS_UART_ReadOnlineStatus+0x248>)
 8003d4e:	f007 fcf1 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003d52:	f107 030c 	add.w	r3, r7, #12
 8003d56:	2202      	movs	r2, #2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	486f      	ldr	r0, [pc, #444]	; (8003f18 <TinyBMS_UART_ReadOnlineStatus+0x248>)
 8003d5c:	f007 fd58 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003d60:	7b3b      	ldrb	r3, [r7, #12]
 8003d62:	2baa      	cmp	r3, #170	; 0xaa
 8003d64:	f040 80c6 	bne.w	8003ef4 <TinyBMS_UART_ReadOnlineStatus+0x224>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003d68:	7b7b      	ldrb	r3, [r7, #13]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d138      	bne.n	8003de0 <TinyBMS_UART_ReadOnlineStatus+0x110>
			printf("Response from BMS [ERROR]\r\n");
 8003d6e:	486b      	ldr	r0, [pc, #428]	; (8003f1c <TinyBMS_UART_ReadOnlineStatus+0x24c>)
 8003d70:	f009 fd16 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	3302      	adds	r3, #2
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4866      	ldr	r0, [pc, #408]	; (8003f18 <TinyBMS_UART_ReadOnlineStatus+0x248>)
 8003d80:	f007 fd46 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003d8a:	7c7b      	ldrb	r3, [r7, #17]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	b21a      	sxth	r2, r3
 8003d90:	7c3b      	ldrb	r3, [r7, #16]
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8003d9c:	f107 030c 	add.w	r3, r7, #12
 8003da0:	2104      	movs	r1, #4
 8003da2:	4618      	mov	r0, r3
 8003da4:	f003 fdae 	bl	8007904 <CRC16>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 8003dae:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003db2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d106      	bne.n	8003dc8 <TinyBMS_UART_ReadOnlineStatus+0xf8>
				printf("CRC pass\r\n");
 8003dba:	4859      	ldr	r0, [pc, #356]	; (8003f20 <TinyBMS_UART_ReadOnlineStatus+0x250>)
 8003dbc:	f009 fcf0 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003dc0:	23ff      	movs	r3, #255	; 0xff
 8003dc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003dc6:	e005      	b.n	8003dd4 <TinyBMS_UART_ReadOnlineStatus+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8003dc8:	4856      	ldr	r0, [pc, #344]	; (8003f24 <TinyBMS_UART_ReadOnlineStatus+0x254>)
 8003dca:	f009 fce9 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003dce:	23ff      	movs	r3, #255	; 0xff
 8003dd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			reportBMSError(error);
 8003dd4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f003 fd71 	bl	80078c0 <reportBMSError>
 8003dde:	e091      	b.n	8003f04 <TinyBMS_UART_ReadOnlineStatus+0x234>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_ONLINE_STATUS) {
 8003de0:	7b7b      	ldrb	r3, [r7, #13]
 8003de2:	2b18      	cmp	r3, #24
 8003de4:	d17d      	bne.n	8003ee2 <TinyBMS_UART_ReadOnlineStatus+0x212>
			printf("Response from BMS [OK]\r\n");
 8003de6:	4850      	ldr	r0, [pc, #320]	; (8003f28 <TinyBMS_UART_ReadOnlineStatus+0x258>)
 8003de8:	f009 fcda 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from OK reply
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	3302      	adds	r3, #2
 8003df2:	2204      	movs	r2, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4848      	ldr	r0, [pc, #288]	; (8003f18 <TinyBMS_UART_ReadOnlineStatus+0x248>)
 8003df8:	f007 fd0a 	bl	800b810 <HAL_UART_Receive_IT>

			uint16_t onlineStatus = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	b21a      	sxth	r2, r3
 8003e02:	7bbb      	ldrb	r3, [r7, #14]
 8003e04:	b21b      	sxth	r3, r3
 8003e06:	4313      	orrs	r3, r2
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003e0e:	7c7b      	ldrb	r3, [r7, #17]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	7c3b      	ldrb	r3, [r7, #16]
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of OK response
 8003e20:	f107 030c 	add.w	r3, r7, #12
 8003e24:	2104      	movs	r1, #4
 8003e26:	4618      	mov	r0, r3
 8003e28:	f003 fd6c 	bl	8007904 <CRC16>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 8003e32:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003e36:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d14a      	bne.n	8003ed4 <TinyBMS_UART_ReadOnlineStatus+0x204>
				printf("CRC pass\r\n");
 8003e3e:	4838      	ldr	r0, [pc, #224]	; (8003f20 <TinyBMS_UART_ReadOnlineStatus+0x250>)
 8003e40:	f009 fcae 	bl	800d7a0 <puts>

				printf("************ TinyBMS Online Status: ************\r\n");
 8003e44:	4839      	ldr	r0, [pc, #228]	; (8003f2c <TinyBMS_UART_ReadOnlineStatus+0x25c>)
 8003e46:	f009 fcab 	bl	800d7a0 <puts>
				switch(onlineStatus) {
 8003e4a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003e4e:	3b91      	subs	r3, #145	; 0x91
 8003e50:	2b0a      	cmp	r3, #10
 8003e52:	d831      	bhi.n	8003eb8 <TinyBMS_UART_ReadOnlineStatus+0x1e8>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <TinyBMS_UART_ReadOnlineStatus+0x18c>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08003e91 	.word	0x08003e91
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003ea1 	.word	0x08003ea1
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003eb1 	.word	0x08003eb1
					case TINYBMS_STATUS_CHARGING:
						printf("0x91 - Charging [INFO]\r\n");
 8003e88:	4829      	ldr	r0, [pc, #164]	; (8003f30 <TinyBMS_UART_ReadOnlineStatus+0x260>)
 8003e8a:	f009 fc89 	bl	800d7a0 <puts>
						break;
 8003e8e:	e01d      	b.n	8003ecc <TinyBMS_UART_ReadOnlineStatus+0x1fc>
					case TINYBMS_STATUS_FULLYCHARGED:
						printf("0x92 - Fully Charged [INFO]\r\n");
 8003e90:	4828      	ldr	r0, [pc, #160]	; (8003f34 <TinyBMS_UART_ReadOnlineStatus+0x264>)
 8003e92:	f009 fc85 	bl	800d7a0 <puts>
						break;
 8003e96:	e019      	b.n	8003ecc <TinyBMS_UART_ReadOnlineStatus+0x1fc>
					case TINYBMS_STATUS_DISCHARGING:
						printf("0x93 - Discharging [INFO]\r\n");
 8003e98:	4827      	ldr	r0, [pc, #156]	; (8003f38 <TinyBMS_UART_ReadOnlineStatus+0x268>)
 8003e9a:	f009 fc81 	bl	800d7a0 <puts>
						break;
 8003e9e:	e015      	b.n	8003ecc <TinyBMS_UART_ReadOnlineStatus+0x1fc>
					case TINYBMS_STATUS_REGENERATION:
						printf("0x96 - Regeneration [INFO]\r\n");
 8003ea0:	4826      	ldr	r0, [pc, #152]	; (8003f3c <TinyBMS_UART_ReadOnlineStatus+0x26c>)
 8003ea2:	f009 fc7d 	bl	800d7a0 <puts>
						break;
 8003ea6:	e011      	b.n	8003ecc <TinyBMS_UART_ReadOnlineStatus+0x1fc>
					case TINYBMS_STATUS_IDLE:
						printf("0x97 - Idle [INFO]\r\n");
 8003ea8:	4825      	ldr	r0, [pc, #148]	; (8003f40 <TinyBMS_UART_ReadOnlineStatus+0x270>)
 8003eaa:	f009 fc79 	bl	800d7a0 <puts>
						break;
 8003eae:	e00d      	b.n	8003ecc <TinyBMS_UART_ReadOnlineStatus+0x1fc>
					case TINYBMS_STATUS_FAULT:
						printf("0x9B - Fault [ERROR]\r\n");
 8003eb0:	4824      	ldr	r0, [pc, #144]	; (8003f44 <TinyBMS_UART_ReadOnlineStatus+0x274>)
 8003eb2:	f009 fc75 	bl	800d7a0 <puts>
						break;
 8003eb6:	e009      	b.n	8003ecc <TinyBMS_UART_ReadOnlineStatus+0x1fc>
					default:
						printf("Invalid onlineStatus\r\n");
 8003eb8:	4823      	ldr	r0, [pc, #140]	; (8003f48 <TinyBMS_UART_ReadOnlineStatus+0x278>)
 8003eba:	f009 fc71 	bl	800d7a0 <puts>
						retval = CMD_FAILURE;
 8003ebe:	23ff      	movs	r3, #255	; 0xff
 8003ec0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						return retval;
 8003ec4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	e01e      	b.n	8003f0a <TinyBMS_UART_ReadOnlineStatus+0x23a>
				}
				retval = CMD_SUCCESS;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ed2:	e017      	b.n	8003f04 <TinyBMS_UART_ReadOnlineStatus+0x234>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003ed4:	481d      	ldr	r0, [pc, #116]	; (8003f4c <TinyBMS_UART_ReadOnlineStatus+0x27c>)
 8003ed6:	f009 fc63 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8003eda:	23ff      	movs	r3, #255	; 0xff
 8003edc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ee0:	e010      	b.n	8003f04 <TinyBMS_UART_ReadOnlineStatus+0x234>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x18 but was 0x%02X\r\n", rx_buffer[1]);
 8003ee2:	7b7b      	ldrb	r3, [r7, #13]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	481a      	ldr	r0, [pc, #104]	; (8003f50 <TinyBMS_UART_ReadOnlineStatus+0x280>)
 8003ee8:	f009 fbd4 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8003eec:	23ff      	movs	r3, #255	; 0xff
 8003eee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ef2:	e007      	b.n	8003f04 <TinyBMS_UART_ReadOnlineStatus+0x234>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8003ef4:	7b3b      	ldrb	r3, [r7, #12]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4816      	ldr	r0, [pc, #88]	; (8003f54 <TinyBMS_UART_ReadOnlineStatus+0x284>)
 8003efa:	f009 fbcb 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8003efe:	23ff      	movs	r3, #255	; 0xff
 8003f00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	return retval;
 8003f04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003f08:	b29b      	uxth	r3, r3
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3780      	adds	r7, #128	; 0x80
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	08011310 	.word	0x08011310
 8003f18:	20000228 	.word	0x20000228
 8003f1c:	080109d4 	.word	0x080109d4
 8003f20:	080108f0 	.word	0x080108f0
 8003f24:	080108fc 	.word	0x080108fc
 8003f28:	080109f0 	.word	0x080109f0
 8003f2c:	08011330 	.word	0x08011330
 8003f30:	08011364 	.word	0x08011364
 8003f34:	0801137c 	.word	0x0801137c
 8003f38:	0801139c 	.word	0x0801139c
 8003f3c:	080113b8 	.word	0x080113b8
 8003f40:	080113d4 	.word	0x080113d4
 8003f44:	080113e8 	.word	0x080113e8
 8003f48:	08011400 	.word	0x08011400
 8003f4c:	08010b1c 	.word	0x08010b1c
 8003f50:	08011418 	.word	0x08011418
 8003f54:	08010988 	.word	0x08010988

08003f58 <TinyBMS_UART_ReadLifetimeCounter>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_UART_ReadLifetimeCounter(UART_HandleTypeDef *huart) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b0a0      	sub	sp, #128	; 0x80
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadLifetimeCounter\r\n");
 8003f60:	486e      	ldr	r0, [pc, #440]	; (800411c <TinyBMS_UART_ReadLifetimeCounter+0x1c4>)
 8003f62:	f009 fc1d 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8003f66:	23ff      	movs	r3, #255	; 0xff
 8003f68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003f8a:	23aa      	movs	r3, #170	; 0xaa
 8003f8c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	tx_buffer[1] = UART_TBMS_READ_LIFETIME_COUNTER;
 8003f90:	2319      	movs	r3, #25
 8003f92:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	CRC_request = CRC16(tx_buffer, 2);
 8003f96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f003 fcb1 	bl	8007904 <CRC16>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	CRC_LSB = (CRC_request & 0xFF);
 8003fa8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003fac:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8003fb0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003fbc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003fc0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	tx_buffer[3] = CRC_MSB;
 8003fc4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003fcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4852      	ldr	r0, [pc, #328]	; (8004120 <TinyBMS_UART_ReadLifetimeCounter+0x1c8>)
 8003fd6:	f007 fbad 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003fda:	f107 0308 	add.w	r3, r7, #8
 8003fde:	2202      	movs	r2, #2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	484f      	ldr	r0, [pc, #316]	; (8004120 <TinyBMS_UART_ReadLifetimeCounter+0x1c8>)
 8003fe4:	f007 fc14 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003fe8:	7a3b      	ldrb	r3, [r7, #8]
 8003fea:	2baa      	cmp	r3, #170	; 0xaa
 8003fec:	f040 8088 	bne.w	8004100 <TinyBMS_UART_ReadLifetimeCounter+0x1a8>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003ff0:	7a7b      	ldrb	r3, [r7, #9]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d138      	bne.n	8004068 <TinyBMS_UART_ReadLifetimeCounter+0x110>
			printf("Response from BMS [ERROR]\r\n");
 8003ff6:	484b      	ldr	r0, [pc, #300]	; (8004124 <TinyBMS_UART_ReadLifetimeCounter+0x1cc>)
 8003ff8:	f009 fbd2 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003ffc:	f107 0308 	add.w	r3, r7, #8
 8004000:	3302      	adds	r3, #2
 8004002:	2204      	movs	r2, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4846      	ldr	r0, [pc, #280]	; (8004120 <TinyBMS_UART_ReadLifetimeCounter+0x1c8>)
 8004008:	f007 fc02 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 800400c:	7afb      	ldrb	r3, [r7, #11]
 800400e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8004012:	7b7b      	ldrb	r3, [r7, #13]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	b21a      	sxth	r2, r3
 8004018:	7b3b      	ldrb	r3, [r7, #12]
 800401a:	b21b      	sxth	r3, r3
 800401c:	4313      	orrs	r3, r2
 800401e:	b21b      	sxth	r3, r3
 8004020:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8004024:	f107 0308 	add.w	r3, r7, #8
 8004028:	2104      	movs	r1, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f003 fc6a 	bl	8007904 <CRC16>
 8004030:	4603      	mov	r3, r0
 8004032:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 8004036:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800403a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800403e:	429a      	cmp	r2, r3
 8004040:	d106      	bne.n	8004050 <TinyBMS_UART_ReadLifetimeCounter+0xf8>
				printf("CRC pass\r\n");
 8004042:	4839      	ldr	r0, [pc, #228]	; (8004128 <TinyBMS_UART_ReadLifetimeCounter+0x1d0>)
 8004044:	f009 fbac 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004048:	23ff      	movs	r3, #255	; 0xff
 800404a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800404e:	e005      	b.n	800405c <TinyBMS_UART_ReadLifetimeCounter+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8004050:	4836      	ldr	r0, [pc, #216]	; (800412c <TinyBMS_UART_ReadLifetimeCounter+0x1d4>)
 8004052:	f009 fba5 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004056:	23ff      	movs	r3, #255	; 0xff
 8004058:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			reportBMSError(error);
 800405c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004060:	4618      	mov	r0, r3
 8004062:	f003 fc2d 	bl	80078c0 <reportBMSError>
 8004066:	e053      	b.n	8004110 <TinyBMS_UART_ReadLifetimeCounter+0x1b8>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_LIFETIME_COUNTER) {
 8004068:	7a7b      	ldrb	r3, [r7, #9]
 800406a:	2b19      	cmp	r3, #25
 800406c:	d13f      	bne.n	80040ee <TinyBMS_UART_ReadLifetimeCounter+0x196>
			printf("Response from BMS [OK]\r\n");
 800406e:	4830      	ldr	r0, [pc, #192]	; (8004130 <TinyBMS_UART_ReadLifetimeCounter+0x1d8>)
 8004070:	f009 fb96 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	3302      	adds	r3, #2
 800407a:	2206      	movs	r2, #6
 800407c:	4619      	mov	r1, r3
 800407e:	4828      	ldr	r0, [pc, #160]	; (8004120 <TinyBMS_UART_ReadLifetimeCounter+0x1c8>)
 8004080:	f007 fbc6 	bl	800b810 <HAL_UART_Receive_IT>

			uint32_t lifetimeCounter = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8004084:	7b7b      	ldrb	r3, [r7, #13]
 8004086:	061a      	lsls	r2, r3, #24
 8004088:	7b3b      	ldrb	r3, [r7, #12]
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	431a      	orrs	r2, r3
 800408e:	7afb      	ldrb	r3, [r7, #11]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	4313      	orrs	r3, r2
 8004094:	7aba      	ldrb	r2, [r7, #10]
 8004096:	4313      	orrs	r3, r2
 8004098:	673b      	str	r3, [r7, #112]	; 0x70

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	b21a      	sxth	r2, r3
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
 80040a2:	b21b      	sxth	r3, r3
 80040a4:	4313      	orrs	r3, r2
 80040a6:	b21b      	sxth	r3, r3
 80040a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-6 of OK response
 80040ac:	f107 0308 	add.w	r3, r7, #8
 80040b0:	2106      	movs	r1, #6
 80040b2:	4618      	mov	r0, r3
 80040b4:	f003 fc26 	bl	8007904 <CRC16>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 80040be:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80040c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d10a      	bne.n	80040e0 <TinyBMS_UART_ReadLifetimeCounter+0x188>
				printf("CRC pass\r\n");
 80040ca:	4817      	ldr	r0, [pc, #92]	; (8004128 <TinyBMS_UART_ReadLifetimeCounter+0x1d0>)
 80040cc:	f009 fb68 	bl	800d7a0 <puts>

				printf("TinyBMS Lifetime Counter: %lu (s)\r\n", lifetimeCounter);
 80040d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80040d2:	4818      	ldr	r0, [pc, #96]	; (8004134 <TinyBMS_UART_ReadLifetimeCounter+0x1dc>)
 80040d4:	f009 fade 	bl	800d694 <iprintf>
				retval = CMD_SUCCESS;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040de:	e017      	b.n	8004110 <TinyBMS_UART_ReadLifetimeCounter+0x1b8>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80040e0:	4815      	ldr	r0, [pc, #84]	; (8004138 <TinyBMS_UART_ReadLifetimeCounter+0x1e0>)
 80040e2:	f009 fb5d 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80040e6:	23ff      	movs	r3, #255	; 0xff
 80040e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040ec:	e010      	b.n	8004110 <TinyBMS_UART_ReadLifetimeCounter+0x1b8>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x19 but was 0x%02X\r\n", rx_buffer[1]);
 80040ee:	7a7b      	ldrb	r3, [r7, #9]
 80040f0:	4619      	mov	r1, r3
 80040f2:	4812      	ldr	r0, [pc, #72]	; (800413c <TinyBMS_UART_ReadLifetimeCounter+0x1e4>)
 80040f4:	f009 face 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 80040f8:	23ff      	movs	r3, #255	; 0xff
 80040fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040fe:	e007      	b.n	8004110 <TinyBMS_UART_ReadLifetimeCounter+0x1b8>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8004100:	7a3b      	ldrb	r3, [r7, #8]
 8004102:	4619      	mov	r1, r3
 8004104:	480e      	ldr	r0, [pc, #56]	; (8004140 <TinyBMS_UART_ReadLifetimeCounter+0x1e8>)
 8004106:	f009 fac5 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 800410a:	23ff      	movs	r3, #255	; 0xff
 800410c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	return retval;
 8004110:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004114:	4618      	mov	r0, r3
 8004116:	3780      	adds	r7, #128	; 0x80
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	08011450 	.word	0x08011450
 8004120:	20000228 	.word	0x20000228
 8004124:	080109d4 	.word	0x080109d4
 8004128:	080108f0 	.word	0x080108f0
 800412c:	080108fc 	.word	0x080108fc
 8004130:	080109f0 	.word	0x080109f0
 8004134:	08011474 	.word	0x08011474
 8004138:	08010b1c 	.word	0x08010b1c
 800413c:	08011498 	.word	0x08011498
 8004140:	08010988 	.word	0x08010988

08004144 <TinyBMS_UART_ReadEstimatedSOCValue>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_UART_ReadEstimatedSOCValue(UART_HandleTypeDef *huart) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b0a0      	sub	sp, #128	; 0x80
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadEstimatedSOCValue\r\n");
 800414c:	486e      	ldr	r0, [pc, #440]	; (8004308 <TinyBMS_UART_ReadEstimatedSOCValue+0x1c4>)
 800414e:	f009 fb27 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8004152:	23ff      	movs	r3, #255	; 0xff
 8004154:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800415e:	2300      	movs	r3, #0
 8004160:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800416a:	2300      	movs	r3, #0
 800416c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8004170:	2300      	movs	r3, #0
 8004172:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8004176:	23aa      	movs	r3, #170	; 0xaa
 8004178:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	tx_buffer[1] = UART_TBMS_READ_EST_SOC;
 800417c:	231a      	movs	r3, #26
 800417e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	CRC_request = CRC16(tx_buffer, 2);
 8004182:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004186:	2102      	movs	r1, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f003 fbbb 	bl	8007904 <CRC16>
 800418e:	4603      	mov	r3, r0
 8004190:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	CRC_LSB = (CRC_request & 0xFF);
 8004194:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004198:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 800419c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 80041a8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80041ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	tx_buffer[3] = CRC_MSB;
 80041b0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80041b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 80041b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041bc:	2204      	movs	r2, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4852      	ldr	r0, [pc, #328]	; (800430c <TinyBMS_UART_ReadEstimatedSOCValue+0x1c8>)
 80041c2:	f007 fab7 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80041c6:	f107 0308 	add.w	r3, r7, #8
 80041ca:	2202      	movs	r2, #2
 80041cc:	4619      	mov	r1, r3
 80041ce:	484f      	ldr	r0, [pc, #316]	; (800430c <TinyBMS_UART_ReadEstimatedSOCValue+0x1c8>)
 80041d0:	f007 fb1e 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80041d4:	7a3b      	ldrb	r3, [r7, #8]
 80041d6:	2baa      	cmp	r3, #170	; 0xaa
 80041d8:	f040 8088 	bne.w	80042ec <TinyBMS_UART_ReadEstimatedSOCValue+0x1a8>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80041dc:	7a7b      	ldrb	r3, [r7, #9]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d138      	bne.n	8004254 <TinyBMS_UART_ReadEstimatedSOCValue+0x110>
			printf("Response from BMS [ERROR]\r\n");
 80041e2:	484b      	ldr	r0, [pc, #300]	; (8004310 <TinyBMS_UART_ReadEstimatedSOCValue+0x1cc>)
 80041e4:	f009 fadc 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	3302      	adds	r3, #2
 80041ee:	2204      	movs	r2, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4846      	ldr	r0, [pc, #280]	; (800430c <TinyBMS_UART_ReadEstimatedSOCValue+0x1c8>)
 80041f4:	f007 fb0c 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80041f8:	7afb      	ldrb	r3, [r7, #11]
 80041fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80041fe:	7b7b      	ldrb	r3, [r7, #13]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	b21a      	sxth	r2, r3
 8004204:	7b3b      	ldrb	r3, [r7, #12]
 8004206:	b21b      	sxth	r3, r3
 8004208:	4313      	orrs	r3, r2
 800420a:	b21b      	sxth	r3, r3
 800420c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	2104      	movs	r1, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f003 fb74 	bl	8007904 <CRC16>
 800421c:	4603      	mov	r3, r0
 800421e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 8004222:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8004226:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800422a:	429a      	cmp	r2, r3
 800422c:	d106      	bne.n	800423c <TinyBMS_UART_ReadEstimatedSOCValue+0xf8>
				printf("CRC pass\r\n");
 800422e:	4839      	ldr	r0, [pc, #228]	; (8004314 <TinyBMS_UART_ReadEstimatedSOCValue+0x1d0>)
 8004230:	f009 fab6 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004234:	23ff      	movs	r3, #255	; 0xff
 8004236:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800423a:	e005      	b.n	8004248 <TinyBMS_UART_ReadEstimatedSOCValue+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 800423c:	4836      	ldr	r0, [pc, #216]	; (8004318 <TinyBMS_UART_ReadEstimatedSOCValue+0x1d4>)
 800423e:	f009 faaf 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004242:	23ff      	movs	r3, #255	; 0xff
 8004244:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			reportBMSError(error);
 8004248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800424c:	4618      	mov	r0, r3
 800424e:	f003 fb37 	bl	80078c0 <reportBMSError>
 8004252:	e053      	b.n	80042fc <TinyBMS_UART_ReadEstimatedSOCValue+0x1b8>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_EST_SOC) {
 8004254:	7a7b      	ldrb	r3, [r7, #9]
 8004256:	2b1a      	cmp	r3, #26
 8004258:	d13f      	bne.n	80042da <TinyBMS_UART_ReadEstimatedSOCValue+0x196>
			printf("Response from BMS [OK]\r\n");
 800425a:	4830      	ldr	r0, [pc, #192]	; (800431c <TinyBMS_UART_ReadEstimatedSOCValue+0x1d8>)
 800425c:	f009 faa0 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 8004260:	f107 0308 	add.w	r3, r7, #8
 8004264:	3302      	adds	r3, #2
 8004266:	2206      	movs	r2, #6
 8004268:	4619      	mov	r1, r3
 800426a:	4828      	ldr	r0, [pc, #160]	; (800430c <TinyBMS_UART_ReadEstimatedSOCValue+0x1c8>)
 800426c:	f007 fad0 	bl	800b810 <HAL_UART_Receive_IT>

			uint32_t estSOC = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8004270:	7b7b      	ldrb	r3, [r7, #13]
 8004272:	061a      	lsls	r2, r3, #24
 8004274:	7b3b      	ldrb	r3, [r7, #12]
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	431a      	orrs	r2, r3
 800427a:	7afb      	ldrb	r3, [r7, #11]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	4313      	orrs	r3, r2
 8004280:	7aba      	ldrb	r2, [r7, #10]
 8004282:	4313      	orrs	r3, r2
 8004284:	673b      	str	r3, [r7, #112]	; 0x70

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	b21a      	sxth	r2, r3
 800428c:	7bbb      	ldrb	r3, [r7, #14]
 800428e:	b21b      	sxth	r3, r3
 8004290:	4313      	orrs	r3, r2
 8004292:	b21b      	sxth	r3, r3
 8004294:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-6 of OK response
 8004298:	f107 0308 	add.w	r3, r7, #8
 800429c:	2106      	movs	r1, #6
 800429e:	4618      	mov	r0, r3
 80042a0:	f003 fb30 	bl	8007904 <CRC16>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			if(CRC_calc == CRC_reply) {
 80042aa:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80042ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d10a      	bne.n	80042cc <TinyBMS_UART_ReadEstimatedSOCValue+0x188>
				printf("CRC pass\r\n");
 80042b6:	4817      	ldr	r0, [pc, #92]	; (8004314 <TinyBMS_UART_ReadEstimatedSOCValue+0x1d0>)
 80042b8:	f009 fa72 	bl	800d7a0 <puts>

				printf("Estimated State of Charge (SOC): %lu (0.000 001 %% resolution)\r\n", estSOC);
 80042bc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80042be:	4818      	ldr	r0, [pc, #96]	; (8004320 <TinyBMS_UART_ReadEstimatedSOCValue+0x1dc>)
 80042c0:	f009 f9e8 	bl	800d694 <iprintf>
				retval = CMD_SUCCESS;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80042ca:	e017      	b.n	80042fc <TinyBMS_UART_ReadEstimatedSOCValue+0x1b8>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80042cc:	4815      	ldr	r0, [pc, #84]	; (8004324 <TinyBMS_UART_ReadEstimatedSOCValue+0x1e0>)
 80042ce:	f009 fa67 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80042d2:	23ff      	movs	r3, #255	; 0xff
 80042d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80042d8:	e010      	b.n	80042fc <TinyBMS_UART_ReadEstimatedSOCValue+0x1b8>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x19 but was 0x%02X\r\n", rx_buffer[1]);
 80042da:	7a7b      	ldrb	r3, [r7, #9]
 80042dc:	4619      	mov	r1, r3
 80042de:	4812      	ldr	r0, [pc, #72]	; (8004328 <TinyBMS_UART_ReadEstimatedSOCValue+0x1e4>)
 80042e0:	f009 f9d8 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 80042e4:	23ff      	movs	r3, #255	; 0xff
 80042e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80042ea:	e007      	b.n	80042fc <TinyBMS_UART_ReadEstimatedSOCValue+0x1b8>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80042ec:	7a3b      	ldrb	r3, [r7, #8]
 80042ee:	4619      	mov	r1, r3
 80042f0:	480e      	ldr	r0, [pc, #56]	; (800432c <TinyBMS_UART_ReadEstimatedSOCValue+0x1e8>)
 80042f2:	f009 f9cf 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 80042f6:	23ff      	movs	r3, #255	; 0xff
 80042f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	return retval;
 80042fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004300:	4618      	mov	r0, r3
 8004302:	3780      	adds	r7, #128	; 0x80
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	080114d0 	.word	0x080114d0
 800430c:	20000228 	.word	0x20000228
 8004310:	080109d4 	.word	0x080109d4
 8004314:	080108f0 	.word	0x080108f0
 8004318:	080108fc 	.word	0x080108fc
 800431c:	080109f0 	.word	0x080109f0
 8004320:	080114f4 	.word	0x080114f4
 8004324:	08010b1c 	.word	0x08010b1c
 8004328:	08011498 	.word	0x08011498
 800432c:	08010988 	.word	0x08010988

08004330 <TinyBMS_UART_ReadDeviceTemperatures>:
 * 						 	      [INT16]				   [INT16] 				  [INT16]
 * 						  	(Reg 48) DATA1 - TinyBMS Internal Temperature
 * 						  	(Reg 42) DATA2 - External Temp Sensor #1 (value of -327689 if NC)
 * 						  	(Reg 43) DATA3 - External Temp Sensor #2 (value of -327689 if NC)
 */
uint8_t TinyBMS_UART_ReadDeviceTemperatures(UART_HandleTypeDef *huart) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b0a6      	sub	sp, #152	; 0x98
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadDeviceTemperatures\r\n");
 8004338:	48ab      	ldr	r0, [pc, #684]	; (80045e8 <TinyBMS_UART_ReadDeviceTemperatures+0x2b8>)
 800433a:	f009 fa31 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 800433e:	23ff      	movs	r3, #255	; 0xff
 8004340:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800434a:	2300      	movs	r3, #0
 800434c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004356:	2300      	movs	r3, #0
 8004358:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800435c:	2300      	movs	r3, #0
 800435e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8004362:	23aa      	movs	r3, #170	; 0xaa
 8004364:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = UART_TBMS_READ_TEMPS;
 8004368:	231b      	movs	r3, #27
 800436a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	//Verified!
	CRC_request = CRC16(tx_buffer, 2);		//should be 0x1B3F
 800436e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004372:	2102      	movs	r1, #2
 8004374:	4618      	mov	r0, r3
 8004376:	f003 fac5 	bl	8007904 <CRC16>
 800437a:	4603      	mov	r3, r0
 800437c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	CRC_LSB = (CRC_request & 0xFF); 		//should be 0x3F
 8004380:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004384:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);	//should be 0x1B
 8004388:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	b29b      	uxth	r3, r3
 8004390:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8004394:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8004398:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	tx_buffer[3] = CRC_MSB;
 800439c:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80043a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 80043a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043a8:	2204      	movs	r2, #4
 80043aa:	4619      	mov	r1, r3
 80043ac:	488f      	ldr	r0, [pc, #572]	; (80045ec <TinyBMS_UART_ReadDeviceTemperatures+0x2bc>)
 80043ae:	f007 f9c1 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80043b2:	f107 030c 	add.w	r3, r7, #12
 80043b6:	2202      	movs	r2, #2
 80043b8:	4619      	mov	r1, r3
 80043ba:	488c      	ldr	r0, [pc, #560]	; (80045ec <TinyBMS_UART_ReadDeviceTemperatures+0x2bc>)
 80043bc:	f007 fa28 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80043c0:	7b3b      	ldrb	r3, [r7, #12]
 80043c2:	2baa      	cmp	r3, #170	; 0xaa
 80043c4:	f040 8101 	bne.w	80045ca <TinyBMS_UART_ReadDeviceTemperatures+0x29a>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80043c8:	7b7b      	ldrb	r3, [r7, #13]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d138      	bne.n	8004440 <TinyBMS_UART_ReadDeviceTemperatures+0x110>
			printf("Response from BMS [ERROR]\r\n");
 80043ce:	4888      	ldr	r0, [pc, #544]	; (80045f0 <TinyBMS_UART_ReadDeviceTemperatures+0x2c0>)
 80043d0:	f009 f9e6 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	3302      	adds	r3, #2
 80043da:	2204      	movs	r2, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4883      	ldr	r0, [pc, #524]	; (80045ec <TinyBMS_UART_ReadDeviceTemperatures+0x2bc>)
 80043e0:	f007 fa16 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80043ea:	7c7b      	ldrb	r3, [r7, #17]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	b21a      	sxth	r2, r3
 80043f0:	7c3b      	ldrb	r3, [r7, #16]
 80043f2:	b21b      	sxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b21b      	sxth	r3, r3
 80043f8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80043fc:	f107 030c 	add.w	r3, r7, #12
 8004400:	2104      	movs	r1, #4
 8004402:	4618      	mov	r0, r3
 8004404:	f003 fa7e 	bl	8007904 <CRC16>
 8004408:	4603      	mov	r3, r0
 800440a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

			if(CRC_calc == CRC_reply) {
 800440e:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8004412:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004416:	429a      	cmp	r2, r3
 8004418:	d106      	bne.n	8004428 <TinyBMS_UART_ReadDeviceTemperatures+0xf8>
				printf("CRC pass\r\n");
 800441a:	4876      	ldr	r0, [pc, #472]	; (80045f4 <TinyBMS_UART_ReadDeviceTemperatures+0x2c4>)
 800441c:	f009 f9c0 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004420:	23ff      	movs	r3, #255	; 0xff
 8004422:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8004426:	e005      	b.n	8004434 <TinyBMS_UART_ReadDeviceTemperatures+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8004428:	4873      	ldr	r0, [pc, #460]	; (80045f8 <TinyBMS_UART_ReadDeviceTemperatures+0x2c8>)
 800442a:	f009 f9b9 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800442e:	23ff      	movs	r3, #255	; 0xff
 8004430:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
			reportBMSError(error);
 8004434:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8004438:	4618      	mov	r0, r3
 800443a:	f003 fa41 	bl	80078c0 <reportBMSError>
 800443e:	e0cc      	b.n	80045da <TinyBMS_UART_ReadDeviceTemperatures+0x2aa>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_TEMPS) {
 8004440:	7b7b      	ldrb	r3, [r7, #13]
 8004442:	2b1b      	cmp	r3, #27
 8004444:	f040 80b8 	bne.w	80045b8 <TinyBMS_UART_ReadDeviceTemperatures+0x288>
			printf("Response from BMS [OK]\r\n");
 8004448:	486c      	ldr	r0, [pc, #432]	; (80045fc <TinyBMS_UART_ReadDeviceTemperatures+0x2cc>)
 800444a:	f009 f9a9 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 800444e:	f107 030c 	add.w	r3, r7, #12
 8004452:	3302      	adds	r3, #2
 8004454:	2201      	movs	r2, #1
 8004456:	4619      	mov	r1, r3
 8004458:	4864      	ldr	r0, [pc, #400]	; (80045ec <TinyBMS_UART_ReadDeviceTemperatures+0x2bc>)
 800445a:	f007 f9d9 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t PL = rx_buffer[2]; //payload length in bytes
 800445e:	7bbb      	ldrb	r3, [r7, #14]
 8004460:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			printf("Payload Length: 0x%02X\r\n", PL);
 8004464:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004468:	4619      	mov	r1, r3
 800446a:	4865      	ldr	r0, [pc, #404]	; (8004600 <TinyBMS_UART_ReadDeviceTemperatures+0x2d0>)
 800446c:	f009 f912 	bl	800d694 <iprintf>
			//Payload Length = PL = 2n bytes -> where n = 1,2,3 (DATA1,DATA2,DATA3)

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read bytes 4-2n+5 from OK reply
 8004470:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004474:	b29b      	uxth	r3, r3
 8004476:	3302      	adds	r3, #2
 8004478:	b29a      	uxth	r2, r3
 800447a:	f107 030c 	add.w	r3, r7, #12
 800447e:	3303      	adds	r3, #3
 8004480:	4619      	mov	r1, r3
 8004482:	485a      	ldr	r0, [pc, #360]	; (80045ec <TinyBMS_UART_ReadDeviceTemperatures+0x2bc>)
 8004484:	f007 f9c4 	bl	800b810 <HAL_UART_Receive_IT>

			int16_t DATA[] = {0};
 8004488:	2300      	movs	r3, #0
 800448a:	813b      	strh	r3, [r7, #8]
			uint32_t numData = (PL / 2); //2 bytes per data reading
 800448c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	67fb      	str	r3, [r7, #124]	; 0x7c
			uint32_t n = 1; //data index
 8004496:	2301      	movs	r3, #1
 8004498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			for(uint32_t i = 0; i < numData; i++) {
 800449c:	2300      	movs	r3, #0
 800449e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044a2:	e026      	b.n	80044f2 <TinyBMS_UART_ReadDeviceTemperatures+0x1c2>
				//TinyBMS Device Temperatures -> LSB = Byte(2n+2) MSB = Byte(2n+3) (i.e. rx_buffer[2n+2 : 2n+3])
				DATA[i] = ((rx_buffer[(2*n)+3-1] << 8) | (rx_buffer[(2*n)+2-1]));
 80044a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044a8:	3301      	adds	r3, #1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	3398      	adds	r3, #152	; 0x98
 80044ae:	443b      	add	r3, r7
 80044b0:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	b21a      	sxth	r2, r3
 80044b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044bc:	3301      	adds	r3, #1
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	3398      	adds	r3, #152	; 0x98
 80044c4:	443b      	add	r3, r7
 80044c6:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80044ca:	b21b      	sxth	r3, r3
 80044cc:	4313      	orrs	r3, r2
 80044ce:	b21a      	sxth	r2, r3
 80044d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	3398      	adds	r3, #152	; 0x98
 80044d8:	443b      	add	r3, r7
 80044da:	f823 2c90 	strh.w	r2, [r3, #-144]
				n++;
 80044de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044e2:	3301      	adds	r3, #1
 80044e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			for(uint32_t i = 0; i < numData; i++) {
 80044e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ec:	3301      	adds	r3, #1
 80044ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80044f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d3d3      	bcc.n	80044a4 <TinyBMS_UART_ReadDeviceTemperatures+0x174>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 80044fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004500:	3302      	adds	r3, #2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	3398      	adds	r3, #152	; 0x98
 8004506:	443b      	add	r3, r7
 8004508:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	b21a      	sxth	r2, r3
 8004510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004514:	3302      	adds	r3, #2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	3b01      	subs	r3, #1
 800451a:	3398      	adds	r3, #152	; 0x98
 800451c:	443b      	add	r3, r7
 800451e:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8004522:	b21b      	sxth	r3, r3
 8004524:	4313      	orrs	r3, r2
 8004526:	b21b      	sxth	r3, r3
 8004528:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes 1-2n+3 of OK response
 800452c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004530:	b29b      	uxth	r3, r3
 8004532:	3303      	adds	r3, #3
 8004534:	b29a      	uxth	r2, r3
 8004536:	f107 030c 	add.w	r3, r7, #12
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f003 f9e1 	bl	8007904 <CRC16>
 8004542:	4603      	mov	r3, r0
 8004544:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

			if(CRC_calc == CRC_reply) {
 8004548:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 800454c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004550:	429a      	cmp	r2, r3
 8004552:	d12a      	bne.n	80045aa <TinyBMS_UART_ReadDeviceTemperatures+0x27a>
				printf("CRC pass\r\n");
 8004554:	4827      	ldr	r0, [pc, #156]	; (80045f4 <TinyBMS_UART_ReadDeviceTemperatures+0x2c4>)
 8004556:	f009 f923 	bl	800d7a0 <puts>

				int16_t internalTemp = DATA[0];  //TinyBMS internal temperature
 800455a:	893b      	ldrh	r3, [r7, #8]
 800455c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
				printf("TinyBMS internal temperature: %d°C (0.1°C)\r\n", internalTemp);
 8004560:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8004564:	4619      	mov	r1, r3
 8004566:	4827      	ldr	r0, [pc, #156]	; (8004604 <TinyBMS_UART_ReadDeviceTemperatures+0x2d4>)
 8004568:	f009 f894 	bl	800d694 <iprintf>

				if((numData == 2) || (numData == 3)) {
 800456c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800456e:	2b02      	cmp	r3, #2
 8004570:	d002      	beq.n	8004578 <TinyBMS_UART_ReadDeviceTemperatures+0x248>
 8004572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004574:	2b03      	cmp	r3, #3
 8004576:	d114      	bne.n	80045a2 <TinyBMS_UART_ReadDeviceTemperatures+0x272>
					int16_t externalTemp1 = DATA[1];  //External Temp Sensor #1
 8004578:	897b      	ldrh	r3, [r7, #10]
 800457a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
					printf("External sensor 1 temperature: %d°C (0.1°C)\r\n", externalTemp1);
 800457e:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8004582:	4619      	mov	r1, r3
 8004584:	4820      	ldr	r0, [pc, #128]	; (8004608 <TinyBMS_UART_ReadDeviceTemperatures+0x2d8>)
 8004586:	f009 f885 	bl	800d694 <iprintf>
					//value of -32768 if not connected

					if(numData == 3) {
 800458a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800458c:	2b03      	cmp	r3, #3
 800458e:	d108      	bne.n	80045a2 <TinyBMS_UART_ReadDeviceTemperatures+0x272>
						int16_t externalTemp2 = DATA[2];  //External Temp Sensor #2
 8004590:	89bb      	ldrh	r3, [r7, #12]
 8004592:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
						printf("External sensor 2 temperature: %d°C (0.1°C)\r\n", externalTemp2);
 8004596:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800459a:	4619      	mov	r1, r3
 800459c:	481b      	ldr	r0, [pc, #108]	; (800460c <TinyBMS_UART_ReadDeviceTemperatures+0x2dc>)
 800459e:	f009 f879 	bl	800d694 <iprintf>
						//value of -32768 if not connected
					}
				}
				retval = CMD_SUCCESS;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80045a8:	e017      	b.n	80045da <TinyBMS_UART_ReadDeviceTemperatures+0x2aa>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80045aa:	4819      	ldr	r0, [pc, #100]	; (8004610 <TinyBMS_UART_ReadDeviceTemperatures+0x2e0>)
 80045ac:	f009 f8f8 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80045b0:	23ff      	movs	r3, #255	; 0xff
 80045b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80045b6:	e010      	b.n	80045da <TinyBMS_UART_ReadDeviceTemperatures+0x2aa>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1B but was 0x%02X\r\n", rx_buffer[1]);
 80045b8:	7b7b      	ldrb	r3, [r7, #13]
 80045ba:	4619      	mov	r1, r3
 80045bc:	4815      	ldr	r0, [pc, #84]	; (8004614 <TinyBMS_UART_ReadDeviceTemperatures+0x2e4>)
 80045be:	f009 f869 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 80045c2:	23ff      	movs	r3, #255	; 0xff
 80045c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80045c8:	e007      	b.n	80045da <TinyBMS_UART_ReadDeviceTemperatures+0x2aa>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80045ca:	7b3b      	ldrb	r3, [r7, #12]
 80045cc:	4619      	mov	r1, r3
 80045ce:	4812      	ldr	r0, [pc, #72]	; (8004618 <TinyBMS_UART_ReadDeviceTemperatures+0x2e8>)
 80045d0:	f009 f860 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 80045d4:	23ff      	movs	r3, #255	; 0xff
 80045d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	}

	return retval;
 80045da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3798      	adds	r7, #152	; 0x98
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	08011538 	.word	0x08011538
 80045ec:	20000228 	.word	0x20000228
 80045f0:	080109d4 	.word	0x080109d4
 80045f4:	080108f0 	.word	0x080108f0
 80045f8:	080108fc 	.word	0x080108fc
 80045fc:	080109f0 	.word	0x080109f0
 8004600:	08011560 	.word	0x08011560
 8004604:	0801157c 	.word	0x0801157c
 8004608:	080115ac 	.word	0x080115ac
 800460c:	080115dc 	.word	0x080115dc
 8004610:	08010b1c 	.word	0x08010b1c
 8004614:	08010f54 	.word	0x08010f54
 8004618:	08010988 	.word	0x08010988

0800461c <TinyBMS_UART_ReadBatteryPackCellVoltages>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte n*2+2    Byte n*2+3 		Byte n*2+4 	Byte n*2+5
 * 						 	  DATAn:LSB   	DATAn:MSB   	CRC:LSB 	CRC:MSB
 * 						 	       	 [UINT16]
 */
uint8_t TinyBMS_UART_ReadBatteryPackCellVoltages(UART_HandleTypeDef *huart) {
 800461c:	b580      	push	{r7, lr}
 800461e:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8004622:	af00      	add	r7, sp, #0
 8004624:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004628:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800462c:	6018      	str	r0, [r3, #0]
	printf("TinyBMS_UART_ReadBatteryPackCellVoltages\r\n");
 800462e:	48c1      	ldr	r0, [pc, #772]	; (8004934 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x318>)
 8004630:	f009 f8b6 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8004634:	23ff      	movs	r3, #255	; 0xff
 8004636:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447

	uint8_t tx_buffer[50], rx_buffer[1000];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
 8004640:	2300      	movs	r3, #0
 8004642:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
 800464c:	2300      	movs	r3, #0
 800464e:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
 8004652:	2300      	movs	r3, #0
 8004654:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8004658:	23aa      	movs	r3, #170	; 0xaa
 800465a:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
	tx_buffer[1] = UART_TBMS_READ_CELL_VOLTAGES;
 800465e:	231c      	movs	r3, #28
 8004660:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9

	CRC_request = CRC16(tx_buffer, 2);
 8004664:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f003 f94a 	bl	8007904 <CRC16>
 8004670:	4603      	mov	r3, r0
 8004672:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
	CRC_LSB = (CRC_request & 0xFF);
 8004676:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	; 0x436
 800467a:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 800467e:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	; 0x436
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	b29b      	uxth	r3, r3
 8004686:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 800468a:	f897 3439 	ldrb.w	r3, [r7, #1081]	; 0x439
 800468e:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
	tx_buffer[3] = CRC_MSB;
 8004692:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 8004696:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 800469a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800469e:	2204      	movs	r2, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	48a5      	ldr	r0, [pc, #660]	; (8004938 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x31c>)
 80046a4:	f007 f846 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80046a8:	f107 0310 	add.w	r3, r7, #16
 80046ac:	2202      	movs	r2, #2
 80046ae:	4619      	mov	r1, r3
 80046b0:	48a1      	ldr	r0, [pc, #644]	; (8004938 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x31c>)
 80046b2:	f007 f8ad 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80046b6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80046ba:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2baa      	cmp	r3, #170	; 0xaa
 80046c2:	f040 8123 	bne.w	800490c <TinyBMS_UART_ReadBatteryPackCellVoltages+0x2f0>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80046c6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80046ca:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d144      	bne.n	800475e <TinyBMS_UART_ReadBatteryPackCellVoltages+0x142>
			printf("Response from BMS [ERROR]\r\n");
 80046d4:	4899      	ldr	r0, [pc, #612]	; (800493c <TinyBMS_UART_ReadBatteryPackCellVoltages+0x320>)
 80046d6:	f009 f863 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80046da:	f107 0310 	add.w	r3, r7, #16
 80046de:	3302      	adds	r3, #2
 80046e0:	2204      	movs	r2, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	4894      	ldr	r0, [pc, #592]	; (8004938 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x31c>)
 80046e6:	f007 f893 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80046ea:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80046ee:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80046f2:	78db      	ldrb	r3, [r3, #3]
 80046f4:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80046f8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80046fc:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004700:	795b      	ldrb	r3, [r3, #5]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	b21a      	sxth	r2, r3
 8004706:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800470a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	b21b      	sxth	r3, r3
 8004712:	4313      	orrs	r3, r2
 8004714:	b21b      	sxth	r3, r3
 8004716:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 800471a:	f107 0310 	add.w	r3, r7, #16
 800471e:	2104      	movs	r1, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f003 f8ef 	bl	8007904 <CRC16>
 8004726:	4603      	mov	r3, r0
 8004728:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434

			if(CRC_calc == CRC_reply) {
 800472c:	f8b7 2434 	ldrh.w	r2, [r7, #1076]	; 0x434
 8004730:	f8b7 3432 	ldrh.w	r3, [r7, #1074]	; 0x432
 8004734:	429a      	cmp	r2, r3
 8004736:	d106      	bne.n	8004746 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x12a>
				printf("CRC pass\r\n");
 8004738:	4881      	ldr	r0, [pc, #516]	; (8004940 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x324>)
 800473a:	f009 f831 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800473e:	23ff      	movs	r3, #255	; 0xff
 8004740:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004744:	e005      	b.n	8004752 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x136>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8004746:	487f      	ldr	r0, [pc, #508]	; (8004944 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x328>)
 8004748:	f009 f82a 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800474c:	23ff      	movs	r3, #255	; 0xff
 800474e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
			}
			reportBMSError(error);
 8004752:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8004756:	4618      	mov	r0, r3
 8004758:	f003 f8b2 	bl	80078c0 <reportBMSError>
 800475c:	e0e2      	b.n	8004924 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x308>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_CELL_VOLTAGES) {
 800475e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004762:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b1c      	cmp	r3, #28
 800476a:	f040 80c2 	bne.w	80048f2 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x2d6>
			printf("Response from BMS [OK]\r\n");
 800476e:	4876      	ldr	r0, [pc, #472]	; (8004948 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x32c>)
 8004770:	f009 f816 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8004774:	f107 0310 	add.w	r3, r7, #16
 8004778:	3302      	adds	r3, #2
 800477a:	2201      	movs	r2, #1
 800477c:	4619      	mov	r1, r3
 800477e:	486e      	ldr	r0, [pc, #440]	; (8004938 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x31c>)
 8004780:	f007 f846 	bl	800b810 <HAL_UART_Receive_IT>

			//Up to 16 Cells in Series: (Registers: 0x00-0x15) Cell 1 - Cell 16
			uint8_t PL = rx_buffer[2];
 8004784:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004788:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800478c:	789b      	ldrb	r3, [r3, #2]
 800478e:	f887 3431 	strb.w	r3, [r7, #1073]	; 0x431
			//Payload Length = PL = 2n bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 2n+5 from OK reply
 8004792:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 8004796:	b29b      	uxth	r3, r3
 8004798:	3302      	adds	r3, #2
 800479a:	b29a      	uxth	r2, r3
 800479c:	f107 0310 	add.w	r3, r7, #16
 80047a0:	3303      	adds	r3, #3
 80047a2:	4619      	mov	r1, r3
 80047a4:	4864      	ldr	r0, [pc, #400]	; (8004938 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x31c>)
 80047a6:	f007 f833 	bl	800b810 <HAL_UART_Receive_IT>

			uint16_t cellVoltage[] = {0};
 80047aa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80047ae:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80047b2:	2200      	movs	r2, #0
 80047b4:	801a      	strh	r2, [r3, #0]
			uint32_t numCells = (PL / 2); //2 bytes per data reading
 80047b6:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			uint32_t n = 1; //cell or data index, where 1 <= n <= 16
 80047c2:	2301      	movs	r3, #1
 80047c4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

			for(uint32_t i = 0; i < numCells; i++) {
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 80047ce:	e02a      	b.n	8004826 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x20a>
				//DATAn Cell Voltage (0.1mV resolution) LSB = Byte(2n+2), MSB = Byte(2n+3) (i.e. rx_buffer[2n+2:2n+3])
				cellVoltage[i] = ((rx_buffer[(2*n)+3-1] << 8) | (rx_buffer[(2*n)+2-1]));
 80047d0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80047d4:	3301      	adds	r3, #1
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 80047dc:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80047e0:	5cd3      	ldrb	r3, [r2, r3]
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	b21a      	sxth	r2, r3
 80047e6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80047ea:	3301      	adds	r3, #1
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	3b01      	subs	r3, #1
 80047f0:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80047f4:	f5a1 6187 	sub.w	r1, r1, #1080	; 0x438
 80047f8:	5ccb      	ldrb	r3, [r1, r3]
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	4313      	orrs	r3, r2
 80047fe:	b21b      	sxth	r3, r3
 8004800:	b299      	uxth	r1, r3
 8004802:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004806:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800480a:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 800480e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				n++;
 8004812:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8004816:	3301      	adds	r3, #1
 8004818:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
			for(uint32_t i = 0; i < numCells; i++) {
 800481c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004820:	3301      	adds	r3, #1
 8004822:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8004826:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 800482a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800482e:	429a      	cmp	r2, r3
 8004830:	d3ce      	bcc.n	80047d0 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x1b4>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 8004832:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8004836:	3302      	adds	r3, #2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800483e:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8004842:	5cd3      	ldrb	r3, [r2, r3]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	b21a      	sxth	r2, r3
 8004848:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800484c:	3302      	adds	r3, #2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	3b01      	subs	r3, #1
 8004852:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8004856:	f5a1 6187 	sub.w	r1, r1, #1080	; 0x438
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	b21b      	sxth	r3, r3
 800485e:	4313      	orrs	r3, r2
 8004860:	b21b      	sxth	r3, r3
 8004862:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8004866:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 800486a:	b29b      	uxth	r3, r3
 800486c:	3303      	adds	r3, #3
 800486e:	b29a      	uxth	r2, r3
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f003 f844 	bl	8007904 <CRC16>
 800487c:	4603      	mov	r3, r0
 800487e:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434

			if(CRC_calc == CRC_reply) {
 8004882:	f8b7 2434 	ldrh.w	r2, [r7, #1076]	; 0x434
 8004886:	f8b7 3432 	ldrh.w	r3, [r7, #1074]	; 0x432
 800488a:	429a      	cmp	r2, r3
 800488c:	d12a      	bne.n	80048e4 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x2c8>
				printf("CRC pass\r\n");
 800488e:	482c      	ldr	r0, [pc, #176]	; (8004940 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x324>)
 8004890:	f008 ff86 	bl	800d7a0 <puts>

				//Print the Individual Cell Voltages of Battery Pack
				printf("************ TinyBMS Secondary Pack Cell Voltages************\r\n");
 8004894:	482d      	ldr	r0, [pc, #180]	; (800494c <TinyBMS_UART_ReadBatteryPackCellVoltages+0x330>)
 8004896:	f008 ff83 	bl	800d7a0 <puts>
				for(uint16_t i = 0; i < numCells; i++) {
 800489a:	2300      	movs	r3, #0
 800489c:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 80048a0:	e013      	b.n	80048ca <TinyBMS_UART_ReadBatteryPackCellVoltages+0x2ae>
					printf("Cell%d Voltage: %u (0.1mV resolution)\r\n", i+1, cellVoltage[i]);
 80048a2:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 80048a6:	1c59      	adds	r1, r3, #1
 80048a8:	f8b7 243a 	ldrh.w	r2, [r7, #1082]	; 0x43a
 80048ac:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80048b0:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80048b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4825      	ldr	r0, [pc, #148]	; (8004950 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x334>)
 80048bc:	f008 feea 	bl	800d694 <iprintf>
				for(uint16_t i = 0; i < numCells; i++) {
 80048c0:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 80048c4:	3301      	adds	r3, #1
 80048c6:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 80048ca:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 80048ce:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d8e5      	bhi.n	80048a2 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x286>
				}
				printf("----------------------------------------\r\n");
 80048d6:	481f      	ldr	r0, [pc, #124]	; (8004954 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x338>)
 80048d8:	f008 ff62 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80048e2:	e01f      	b.n	8004924 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x308>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80048e4:	481c      	ldr	r0, [pc, #112]	; (8004958 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x33c>)
 80048e6:	f008 ff5b 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80048ea:	23ff      	movs	r3, #255	; 0xff
 80048ec:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 80048f0:	e018      	b.n	8004924 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x308>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1C but was 0x%02X\r\n", rx_buffer[1]);
 80048f2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80048f6:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80048fa:	785b      	ldrb	r3, [r3, #1]
 80048fc:	4619      	mov	r1, r3
 80048fe:	4817      	ldr	r0, [pc, #92]	; (800495c <TinyBMS_UART_ReadBatteryPackCellVoltages+0x340>)
 8004900:	f008 fec8 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8004904:	23ff      	movs	r3, #255	; 0xff
 8004906:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 800490a:	e00b      	b.n	8004924 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x308>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800490c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004910:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	4811      	ldr	r0, [pc, #68]	; (8004960 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x344>)
 800491a:	f008 febb 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 800491e:	23ff      	movs	r3, #255	; 0xff
 8004920:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
	}

	return retval;
 8004924:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
}
 8004928:	4618      	mov	r0, r3
 800492a:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	0801160c 	.word	0x0801160c
 8004938:	20000228 	.word	0x20000228
 800493c:	080109d4 	.word	0x080109d4
 8004940:	080108f0 	.word	0x080108f0
 8004944:	080108fc 	.word	0x080108fc
 8004948:	080109f0 	.word	0x080109f0
 800494c:	08011638 	.word	0x08011638
 8004950:	08011678 	.word	0x08011678
 8004954:	08010af0 	.word	0x08010af0
 8004958:	08010b1c 	.word	0x08010b1c
 800495c:	080116a0 	.word	0x080116a0
 8004960:	08010988 	.word	0x08010988

08004964 <TinyBMS_UART_ReadSettingsValues>:
 * 						   0x01 - Min. settings     0x02 - Max. settings,
 * 						   0x03 - Default settings  0x04 - Current settings
 *
 * 						   RL - Registers to read. Max. 100 (0x64) registers
 */
uint8_t TinyBMS_UART_ReadSettingsValues(UART_HandleTypeDef *huart, uint8_t option, uint8_t rl) {
 8004964:	b580      	push	{r7, lr}
 8004966:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 800496a:	af00      	add	r7, sp, #0
 800496c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004970:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8004974:	6018      	str	r0, [r3, #0]
 8004976:	4608      	mov	r0, r1
 8004978:	4611      	mov	r1, r2
 800497a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800497e:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 8004982:	4602      	mov	r2, r0
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800498a:	f2a3 4346 	subw	r3, r3, #1094	; 0x446
 800498e:	460a      	mov	r2, r1
 8004990:	701a      	strb	r2, [r3, #0]
	printf("TinyBMS_UART_ReadSettingsValues\r\n");
 8004992:	48d2      	ldr	r0, [pc, #840]	; (8004cdc <TinyBMS_UART_ReadSettingsValues+0x378>)
 8004994:	f008 ff04 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8004998:	23ff      	movs	r3, #255	; 0xff
 800499a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447

	uint8_t tx_buffer[50], rx_buffer[1000];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
 80049b0:	2300      	movs	r3, #0
 80049b2:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434
 80049b6:	2300      	movs	r3, #0
 80049b8:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80049bc:	23aa      	movs	r3, #170	; 0xaa
 80049be:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
	tx_buffer[1] = UART_TBMS_READ_SETTINGS_VALUES;
 80049c2:	231d      	movs	r3, #29
 80049c4:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9

	//Check input
	if((option != 0x01) && (option != 0x02) && (option != 0x03) && (option != 0x04)) {
 80049c8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80049cc:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d01d      	beq.n	8004a12 <TinyBMS_UART_ReadSettingsValues+0xae>
 80049d6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80049da:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d016      	beq.n	8004a12 <TinyBMS_UART_ReadSettingsValues+0xae>
 80049e4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80049e8:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d00f      	beq.n	8004a12 <TinyBMS_UART_ReadSettingsValues+0xae>
 80049f2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80049f6:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d008      	beq.n	8004a12 <TinyBMS_UART_ReadSettingsValues+0xae>
		printf("Input 'option' invalid, must be: 0x01 - Min, 0x02 - Max, 0x03 - Default, or 0x04 - Current.\r\n");
 8004a00:	48b7      	ldr	r0, [pc, #732]	; (8004ce0 <TinyBMS_UART_ReadSettingsValues+0x37c>)
 8004a02:	f008 fecd 	bl	800d7a0 <puts>
		retval = CMD_FAILURE;
 8004a06:	23ff      	movs	r3, #255	; 0xff
 8004a08:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
		return retval;
 8004a0c:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8004a10:	e1cc      	b.n	8004dac <TinyBMS_UART_ReadSettingsValues+0x448>
	}
	tx_buffer[2] = option;
 8004a12:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004a16:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa

	tx_buffer[3] = 0x00;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb

	//Check input
	if((rl < 1) || (rl > 100)) {
 8004a26:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004a2a:	f2a3 4346 	subw	r3, r3, #1094	; 0x446
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d006      	beq.n	8004a42 <TinyBMS_UART_ReadSettingsValues+0xde>
 8004a34:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004a38:	f2a3 4346 	subw	r3, r3, #1094	; 0x446
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d908      	bls.n	8004a54 <TinyBMS_UART_ReadSettingsValues+0xf0>
		printf("Input 'rl' (registers to read) out of acceptable range. Please enter a value between 1-100.\r\n");
 8004a42:	48a8      	ldr	r0, [pc, #672]	; (8004ce4 <TinyBMS_UART_ReadSettingsValues+0x380>)
 8004a44:	f008 feac 	bl	800d7a0 <puts>
		retval = CMD_FAILURE;
 8004a48:	23ff      	movs	r3, #255	; 0xff
 8004a4a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
		return retval;
 8004a4e:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8004a52:	e1ab      	b.n	8004dac <TinyBMS_UART_ReadSettingsValues+0x448>
	}
	tx_buffer[4] = rl;
 8004a54:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004a58:	f2a3 4346 	subw	r3, r3, #1094	; 0x446
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc


	CRC_request = CRC16(tx_buffer, 5);
 8004a62:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004a66:	2105      	movs	r1, #5
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f002 ff4b 	bl	8007904 <CRC16>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
	CRC_LSB = (CRC_request & 0xFF);
 8004a74:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	; 0x436
 8004a78:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8004a7c:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	; 0x436
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[5] = CRC_LSB;
 8004a88:	f897 3439 	ldrb.w	r3, [r7, #1081]	; 0x439
 8004a8c:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
	tx_buffer[6] = CRC_MSB;
 8004a90:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 8004a94:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 7);
 8004a98:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004a9c:	2207      	movs	r2, #7
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4891      	ldr	r0, [pc, #580]	; (8004ce8 <TinyBMS_UART_ReadSettingsValues+0x384>)
 8004aa2:	f006 fe47 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8004aa6:	f107 0310 	add.w	r3, r7, #16
 8004aaa:	2202      	movs	r2, #2
 8004aac:	4619      	mov	r1, r3
 8004aae:	488e      	ldr	r0, [pc, #568]	; (8004ce8 <TinyBMS_UART_ReadSettingsValues+0x384>)
 8004ab0:	f006 feae 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8004ab4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004ab8:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2baa      	cmp	r3, #170	; 0xaa
 8004ac0:	f040 8166 	bne.w	8004d90 <TinyBMS_UART_ReadSettingsValues+0x42c>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8004ac4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004ac8:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d144      	bne.n	8004b5c <TinyBMS_UART_ReadSettingsValues+0x1f8>
			printf("Response from BMS [ERROR]\r\n");
 8004ad2:	4886      	ldr	r0, [pc, #536]	; (8004cec <TinyBMS_UART_ReadSettingsValues+0x388>)
 8004ad4:	f008 fe64 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8004ad8:	f107 0310 	add.w	r3, r7, #16
 8004adc:	3302      	adds	r3, #2
 8004ade:	2204      	movs	r2, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4881      	ldr	r0, [pc, #516]	; (8004ce8 <TinyBMS_UART_ReadSettingsValues+0x384>)
 8004ae4:	f006 fe94 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8004ae8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004aec:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004af0:	78db      	ldrb	r3, [r3, #3]
 8004af2:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8004af6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004afa:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004afe:	795b      	ldrb	r3, [r3, #5]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	b21a      	sxth	r2, r3
 8004b04:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b08:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004b0c:	791b      	ldrb	r3, [r3, #4]
 8004b0e:	b21b      	sxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b21b      	sxth	r3, r3
 8004b14:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8004b18:	f107 0310 	add.w	r3, r7, #16
 8004b1c:	2104      	movs	r1, #4
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f002 fef0 	bl	8007904 <CRC16>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434

			if(CRC_calc == CRC_reply) {
 8004b2a:	f8b7 2434 	ldrh.w	r2, [r7, #1076]	; 0x434
 8004b2e:	f8b7 3432 	ldrh.w	r3, [r7, #1074]	; 0x432
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d106      	bne.n	8004b44 <TinyBMS_UART_ReadSettingsValues+0x1e0>
				printf("CRC pass\r\n");
 8004b36:	486e      	ldr	r0, [pc, #440]	; (8004cf0 <TinyBMS_UART_ReadSettingsValues+0x38c>)
 8004b38:	f008 fe32 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004b3c:	23ff      	movs	r3, #255	; 0xff
 8004b3e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004b42:	e005      	b.n	8004b50 <TinyBMS_UART_ReadSettingsValues+0x1ec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8004b44:	486b      	ldr	r0, [pc, #428]	; (8004cf4 <TinyBMS_UART_ReadSettingsValues+0x390>)
 8004b46:	f008 fe2b 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004b4a:	23ff      	movs	r3, #255	; 0xff
 8004b4c:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
			}
			reportBMSError(error);
 8004b50:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8004b54:	4618      	mov	r0, r3
 8004b56:	f002 feb3 	bl	80078c0 <reportBMSError>
 8004b5a:	e125      	b.n	8004da8 <TinyBMS_UART_ReadSettingsValues+0x444>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_SETTINGS_VALUES) {
 8004b5c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b60:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	2b1d      	cmp	r3, #29
 8004b68:	f040 8105 	bne.w	8004d76 <TinyBMS_UART_ReadSettingsValues+0x412>
			printf("Response from BMS [OK]\r\n");
 8004b6c:	4862      	ldr	r0, [pc, #392]	; (8004cf8 <TinyBMS_UART_ReadSettingsValues+0x394>)
 8004b6e:	f008 fe17 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8004b72:	f107 0310 	add.w	r3, r7, #16
 8004b76:	3302      	adds	r3, #2
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	485a      	ldr	r0, [pc, #360]	; (8004ce8 <TinyBMS_UART_ReadSettingsValues+0x384>)
 8004b7e:	f006 fe47 	bl	800b810 <HAL_UART_Receive_IT>

			//Can read up to maximum of 100 (0x64) registers
			uint8_t PL = rx_buffer[2];
 8004b82:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b86:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004b8a:	789b      	ldrb	r3, [r3, #2]
 8004b8c:	f887 3431 	strb.w	r3, [r7, #1073]	; 0x431
			//Payload Length = PL = 2n bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 2n+5 from OK reply
 8004b90:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3302      	adds	r3, #2
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	f107 0310 	add.w	r3, r7, #16
 8004b9e:	3303      	adds	r3, #3
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4851      	ldr	r0, [pc, #324]	; (8004ce8 <TinyBMS_UART_ReadSettingsValues+0x384>)
 8004ba4:	f006 fe34 	bl	800b810 <HAL_UART_Receive_IT>

			uint16_t settingsValues[] = {0};
 8004ba8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004bac:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	801a      	strh	r2, [r3, #0]
			uint32_t numSettings = (PL / 2); //2 bytes per data reading
 8004bb4:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 8004bb8:	085b      	lsrs	r3, r3, #1
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			uint32_t n = 1; //settings or data index
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

			for(uint32_t i = 0; i < numSettings; i++) {
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8004bcc:	e02a      	b.n	8004c24 <TinyBMS_UART_ReadSettingsValues+0x2c0>
				settingsValues[i] = ((rx_buffer[(2*n)+3-1] << 8) | (rx_buffer[(2*n)+2-1]));
 8004bce:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8004bda:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8004bde:	5cd3      	ldrb	r3, [r2, r3]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	b21a      	sxth	r2, r3
 8004be4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8004be8:	3301      	adds	r3, #1
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	3b01      	subs	r3, #1
 8004bee:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8004bf2:	f5a1 6187 	sub.w	r1, r1, #1080	; 0x438
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	b21b      	sxth	r3, r3
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	b21b      	sxth	r3, r3
 8004bfe:	b299      	uxth	r1, r3
 8004c00:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004c04:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004c08:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8004c0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				n++;
 8004c10:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8004c14:	3301      	adds	r3, #1
 8004c16:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
			for(uint32_t i = 0; i < numSettings; i++) {
 8004c1a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8004c24:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8004c28:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3ce      	bcc.n	8004bce <TinyBMS_UART_ReadSettingsValues+0x26a>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 8004c30:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8004c34:	3302      	adds	r3, #2
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8004c3c:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8004c40:	5cd3      	ldrb	r3, [r2, r3]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	b21a      	sxth	r2, r3
 8004c46:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8004c54:	f5a1 6187 	sub.w	r1, r1, #1080	; 0x438
 8004c58:	5ccb      	ldrb	r3, [r1, r3]
 8004c5a:	b21b      	sxth	r3, r3
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b21b      	sxth	r3, r3
 8004c60:	f8a7 3432 	strh.w	r3, [r7, #1074]	; 0x432
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8004c64:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3303      	adds	r3, #3
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	f107 0310 	add.w	r3, r7, #16
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 fe45 	bl	8007904 <CRC16>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f8a7 3434 	strh.w	r3, [r7, #1076]	; 0x434

			if(CRC_calc == CRC_reply) {
 8004c80:	f8b7 2434 	ldrh.w	r2, [r7, #1076]	; 0x434
 8004c84:	f8b7 3432 	ldrh.w	r3, [r7, #1074]	; 0x432
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d16d      	bne.n	8004d68 <TinyBMS_UART_ReadSettingsValues+0x404>
				printf("CRC pass\r\n");
 8004c8c:	4818      	ldr	r0, [pc, #96]	; (8004cf0 <TinyBMS_UART_ReadSettingsValues+0x38c>)
 8004c8e:	f008 fd87 	bl	800d7a0 <puts>

				//Print the TinyBMS Settings Values (min, max, default, or current)
				printf("************ TinyBMS Settings Values ************\r\n");
 8004c92:	481a      	ldr	r0, [pc, #104]	; (8004cfc <TinyBMS_UART_ReadSettingsValues+0x398>)
 8004c94:	f008 fd84 	bl	800d7a0 <puts>
				if(option == 0x01) {
 8004c98:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004c9c:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d103      	bne.n	8004cae <TinyBMS_UART_ReadSettingsValues+0x34a>
					printf("0x01 - Minimum Settings\r\n");
 8004ca6:	4816      	ldr	r0, [pc, #88]	; (8004d00 <TinyBMS_UART_ReadSettingsValues+0x39c>)
 8004ca8:	f008 fd7a 	bl	800d7a0 <puts>
 8004cac:	e038      	b.n	8004d20 <TinyBMS_UART_ReadSettingsValues+0x3bc>
				} else if(option == 0x02) {
 8004cae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004cb2:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d103      	bne.n	8004cc4 <TinyBMS_UART_ReadSettingsValues+0x360>
					printf("0x02 - Maximum Settings\r\n");
 8004cbc:	4811      	ldr	r0, [pc, #68]	; (8004d04 <TinyBMS_UART_ReadSettingsValues+0x3a0>)
 8004cbe:	f008 fd6f 	bl	800d7a0 <puts>
 8004cc2:	e02d      	b.n	8004d20 <TinyBMS_UART_ReadSettingsValues+0x3bc>
				} else if(option == 0x03) {
 8004cc4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004cc8:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d11c      	bne.n	8004d0c <TinyBMS_UART_ReadSettingsValues+0x3a8>
					printf("0x03 - Default Settings\r\n");
 8004cd2:	480d      	ldr	r0, [pc, #52]	; (8004d08 <TinyBMS_UART_ReadSettingsValues+0x3a4>)
 8004cd4:	f008 fd64 	bl	800d7a0 <puts>
 8004cd8:	e022      	b.n	8004d20 <TinyBMS_UART_ReadSettingsValues+0x3bc>
 8004cda:	bf00      	nop
 8004cdc:	080116d8 	.word	0x080116d8
 8004ce0:	080116fc 	.word	0x080116fc
 8004ce4:	0801175c 	.word	0x0801175c
 8004ce8:	20000228 	.word	0x20000228
 8004cec:	080109d4 	.word	0x080109d4
 8004cf0:	080108f0 	.word	0x080108f0
 8004cf4:	080108fc 	.word	0x080108fc
 8004cf8:	080109f0 	.word	0x080109f0
 8004cfc:	080117bc 	.word	0x080117bc
 8004d00:	080117f0 	.word	0x080117f0
 8004d04:	0801180c 	.word	0x0801180c
 8004d08:	08011828 	.word	0x08011828
				} else if(option == 0x04) {
 8004d0c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d10:	f2a3 4345 	subw	r3, r3, #1093	; 0x445
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d102      	bne.n	8004d20 <TinyBMS_UART_ReadSettingsValues+0x3bc>
					printf("0x04 - Current Settings\r\n");
 8004d1a:	4827      	ldr	r0, [pc, #156]	; (8004db8 <TinyBMS_UART_ReadSettingsValues+0x454>)
 8004d1c:	f008 fd40 	bl	800d7a0 <puts>
				}
				for(uint16_t i = 0; i < numSettings; i++) {
 8004d20:	2300      	movs	r3, #0
 8004d22:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 8004d26:	e012      	b.n	8004d4e <TinyBMS_UART_ReadSettingsValues+0x3ea>
					printf("Register %u: %u\r\n", i, settingsValues[i]);
 8004d28:	f8b7 143a 	ldrh.w	r1, [r7, #1082]	; 0x43a
 8004d2c:	f8b7 243a 	ldrh.w	r2, [r7, #1082]	; 0x43a
 8004d30:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d34:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8004d38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	481f      	ldr	r0, [pc, #124]	; (8004dbc <TinyBMS_UART_ReadSettingsValues+0x458>)
 8004d40:	f008 fca8 	bl	800d694 <iprintf>
				for(uint16_t i = 0; i < numSettings; i++) {
 8004d44:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
 8004d4e:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8004d52:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d8e6      	bhi.n	8004d28 <TinyBMS_UART_ReadSettingsValues+0x3c4>
				}
				printf("----------------------------------------\r\n");
 8004d5a:	4819      	ldr	r0, [pc, #100]	; (8004dc0 <TinyBMS_UART_ReadSettingsValues+0x45c>)
 8004d5c:	f008 fd20 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 8004d60:	2300      	movs	r3, #0
 8004d62:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004d66:	e01f      	b.n	8004da8 <TinyBMS_UART_ReadSettingsValues+0x444>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8004d68:	4816      	ldr	r0, [pc, #88]	; (8004dc4 <TinyBMS_UART_ReadSettingsValues+0x460>)
 8004d6a:	f008 fd19 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004d6e:	23ff      	movs	r3, #255	; 0xff
 8004d70:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004d74:	e018      	b.n	8004da8 <TinyBMS_UART_ReadSettingsValues+0x444>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1D but was 0x%02X\r\n", rx_buffer[1]);
 8004d76:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d7a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	4619      	mov	r1, r3
 8004d82:	4811      	ldr	r0, [pc, #68]	; (8004dc8 <TinyBMS_UART_ReadSettingsValues+0x464>)
 8004d84:	f008 fc86 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 8004d88:	23ff      	movs	r3, #255	; 0xff
 8004d8a:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 8004d8e:	e00b      	b.n	8004da8 <TinyBMS_UART_ReadSettingsValues+0x444>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8004d90:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d94:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	480b      	ldr	r0, [pc, #44]	; (8004dcc <TinyBMS_UART_ReadSettingsValues+0x468>)
 8004d9e:	f008 fc79 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8004da2:	23ff      	movs	r3, #255	; 0xff
 8004da4:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
	}

	return retval;
 8004da8:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	08011844 	.word	0x08011844
 8004dbc:	08011860 	.word	0x08011860
 8004dc0:	08010af0 	.word	0x08010af0
 8004dc4:	08010b1c 	.word	0x08010b1c
 8004dc8:	08011874 	.word	0x08011874
 8004dcc:	08010988 	.word	0x08010988

08004dd0 <TinyBMS_UART_ReadVersion>:
 * 						 	 DATA1 - Hardware version
 * 						 	 DATA2 - Hardware changes version
 * 						 	 DATA3 - Firmware public version
 * 						 	 DATA4 - Firmware internal version
 */
uint8_t TinyBMS_UART_ReadVersion(UART_HandleTypeDef *huart) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b0a4      	sub	sp, #144	; 0x90
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadVersion\r\n");
 8004dd8:	48ce      	ldr	r0, [pc, #824]	; (8005114 <TinyBMS_UART_ReadVersion+0x344>)
 8004dda:	f008 fce1 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8004dde:	23ff      	movs	r3, #255	; 0xff
 8004de0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004df6:	2300      	movs	r3, #0
 8004df8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8004e02:	23aa      	movs	r3, #170	; 0xaa
 8004e04:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	tx_buffer[1] = UART_TBMS_READ_VERSION;
 8004e08:	231e      	movs	r3, #30
 8004e0a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	CRC_request = CRC16(tx_buffer, 2);
 8004e0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e12:	2102      	movs	r1, #2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f002 fd75 	bl	8007904 <CRC16>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	CRC_LSB = (CRC_request & 0xFF);
 8004e20:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004e24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8004e28:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8004e34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004e38:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	tx_buffer[3] = CRC_MSB;
 8004e3c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8004e44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e48:	2204      	movs	r2, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	48b2      	ldr	r0, [pc, #712]	; (8005118 <TinyBMS_UART_ReadVersion+0x348>)
 8004e4e:	f006 fc71 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8004e52:	f107 0310 	add.w	r3, r7, #16
 8004e56:	2202      	movs	r2, #2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	48af      	ldr	r0, [pc, #700]	; (8005118 <TinyBMS_UART_ReadVersion+0x348>)
 8004e5c:	f006 fcd8 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8004e60:	7c3b      	ldrb	r3, [r7, #16]
 8004e62:	2baa      	cmp	r3, #170	; 0xaa
 8004e64:	f040 8147 	bne.w	80050f6 <TinyBMS_UART_ReadVersion+0x326>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8004e68:	7c7b      	ldrb	r3, [r7, #17]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d138      	bne.n	8004ee0 <TinyBMS_UART_ReadVersion+0x110>
			printf("Response from BMS [ERROR]\r\n");
 8004e6e:	48ab      	ldr	r0, [pc, #684]	; (800511c <TinyBMS_UART_ReadVersion+0x34c>)
 8004e70:	f008 fc96 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	3302      	adds	r3, #2
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	48a6      	ldr	r0, [pc, #664]	; (8005118 <TinyBMS_UART_ReadVersion+0x348>)
 8004e80:	f006 fcc6 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8004e8a:	7d7b      	ldrb	r3, [r7, #21]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	b21a      	sxth	r2, r3
 8004e90:	7d3b      	ldrb	r3, [r7, #20]
 8004e92:	b21b      	sxth	r3, r3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8004e9c:	f107 0310 	add.w	r3, r7, #16
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f002 fd2e 	bl	8007904 <CRC16>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

			if(CRC_calc == CRC_reply) {
 8004eae:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8004eb2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d106      	bne.n	8004ec8 <TinyBMS_UART_ReadVersion+0xf8>
				printf("CRC pass\r\n");
 8004eba:	4899      	ldr	r0, [pc, #612]	; (8005120 <TinyBMS_UART_ReadVersion+0x350>)
 8004ebc:	f008 fc70 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004ec0:	23ff      	movs	r3, #255	; 0xff
 8004ec2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004ec6:	e005      	b.n	8004ed4 <TinyBMS_UART_ReadVersion+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8004ec8:	4896      	ldr	r0, [pc, #600]	; (8005124 <TinyBMS_UART_ReadVersion+0x354>)
 8004eca:	f008 fc69 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8004ece:	23ff      	movs	r3, #255	; 0xff
 8004ed0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
			reportBMSError(error);
 8004ed4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f002 fcf1 	bl	80078c0 <reportBMSError>
 8004ede:	e112      	b.n	8005106 <TinyBMS_UART_ReadVersion+0x336>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_VERSION) {
 8004ee0:	7c7b      	ldrb	r3, [r7, #17]
 8004ee2:	2b1e      	cmp	r3, #30
 8004ee4:	f040 80fe 	bne.w	80050e4 <TinyBMS_UART_ReadVersion+0x314>
			printf("Response from BMS [OK]\r\n");
 8004ee8:	488f      	ldr	r0, [pc, #572]	; (8005128 <TinyBMS_UART_ReadVersion+0x358>)
 8004eea:	f008 fc59 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8004eee:	f107 0310 	add.w	r3, r7, #16
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4887      	ldr	r0, [pc, #540]	; (8005118 <TinyBMS_UART_ReadVersion+0x348>)
 8004efa:	f006 fc89 	bl	800b810 <HAL_UART_Receive_IT>

			//PL: (uint8_t)(uint8_t)(uint8_t)(uint16_t)
			uint8_t PL = rx_buffer[2];
 8004efe:	7cbb      	ldrb	r3, [r7, #18]
 8004f00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			//Payload Length = PL = n bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to  from OK reply
 8004f04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	f107 0310 	add.w	r3, r7, #16
 8004f12:	3303      	adds	r3, #3
 8004f14:	4619      	mov	r1, r3
 8004f16:	4880      	ldr	r0, [pc, #512]	; (8005118 <TinyBMS_UART_ReadVersion+0x348>)
 8004f18:	f006 fc7a 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t versions8[] = {0};
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	733b      	strb	r3, [r7, #12]
			uint16_t version16 = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			uint32_t numVersions = PL; //1 bytes per data reading (except DATA4 which is 2 bytes)
 8004f26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004f2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if(PL >= 5) {
 8004f2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d904      	bls.n	8004f40 <TinyBMS_UART_ReadVersion+0x170>
				numVersions = numVersions - 1; //accounting for DATA4 being 2 bytes instead of 1
 8004f36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			}
			uint32_t n = 0; //version or data index
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			//PL = 5 (max)
			for(uint32_t i = 0; i < numVersions; i++) {
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f4c:	e034      	b.n	8004fb8 <TinyBMS_UART_ReadVersion+0x1e8>
				n++;
 8004f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f52:	3301      	adds	r3, #1
 8004f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				//DATA1,2,3
				//n=1,2,3 or i=0,1,2
				if((i >= 0) && (i < 3)) {
 8004f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d80d      	bhi.n	8004f7c <TinyBMS_UART_ReadVersion+0x1ac>
					versions8[i] = rx_buffer[n+3-1];
 8004f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f64:	3302      	adds	r3, #2
 8004f66:	3390      	adds	r3, #144	; 0x90
 8004f68:	443b      	add	r3, r7
 8004f6a:	f813 1c80 	ldrb.w	r1, [r3, #-128]
 8004f6e:	f107 020c 	add.w	r2, r7, #12
 8004f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f76:	4413      	add	r3, r2
 8004f78:	460a      	mov	r2, r1
 8004f7a:	701a      	strb	r2, [r3, #0]
				}
				//DATA4
				//n=4 or i=3
				if(i == 3) {
 8004f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d114      	bne.n	8004fae <TinyBMS_UART_ReadVersion+0x1de>
					version16 = ((rx_buffer[n+4-1] << 8) | rx_buffer[n+3-1]);
 8004f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f88:	3303      	adds	r3, #3
 8004f8a:	3390      	adds	r3, #144	; 0x90
 8004f8c:	443b      	add	r3, r7
 8004f8e:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	b21a      	sxth	r2, r3
 8004f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	3390      	adds	r3, #144	; 0x90
 8004f9e:	443b      	add	r3, r7
 8004fa0:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8004fa4:	b21b      	sxth	r3, r3
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	b21b      	sxth	r3, r3
 8004faa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			for(uint32_t i = 0; i < numVersions; i++) {
 8004fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3c4      	bcc.n	8004f4e <TinyBMS_UART_ReadVersion+0x17e>
				}
			}

			//n=4
			CRC_reply = ((rx_buffer[n+6-1] << 8) | rx_buffer[n+5-1]);
 8004fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fc8:	3305      	adds	r3, #5
 8004fca:	3390      	adds	r3, #144	; 0x90
 8004fcc:	443b      	add	r3, r7
 8004fce:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	b21a      	sxth	r2, r3
 8004fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fda:	3304      	adds	r3, #4
 8004fdc:	3390      	adds	r3, #144	; 0x90
 8004fde:	443b      	add	r3, r7
 8004fe0:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8004fe4:	b21b      	sxth	r3, r3
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	b21b      	sxth	r3, r3
 8004fea:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8004fee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3303      	adds	r3, #3
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	f107 0310 	add.w	r3, r7, #16
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 fc80 	bl	8007904 <CRC16>
 8005004:	4603      	mov	r3, r0
 8005006:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

			if(CRC_calc == CRC_reply) {
 800500a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800500e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8005012:	429a      	cmp	r2, r3
 8005014:	d15f      	bne.n	80050d6 <TinyBMS_UART_ReadVersion+0x306>
				printf("CRC pass\r\n");
 8005016:	4842      	ldr	r0, [pc, #264]	; (8005120 <TinyBMS_UART_ReadVersion+0x350>)
 8005018:	f008 fbc2 	bl	800d7a0 <puts>

				//Print the TinyBMS Versions (Hardware, Hardware Changes, Firmware Public, or Firmware Internal)
				printf("************ TinyBMS Versions ************\r\n");
 800501c:	4843      	ldr	r0, [pc, #268]	; (800512c <TinyBMS_UART_ReadVersion+0x35c>)
 800501e:	f008 fbbf 	bl	800d7a0 <puts>
				switch(PL) {
 8005022:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005026:	3b01      	subs	r3, #1
 8005028:	2b04      	cmp	r3, #4
 800502a:	d844      	bhi.n	80050b6 <TinyBMS_UART_ReadVersion+0x2e6>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <TinyBMS_UART_ReadVersion+0x264>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005049 	.word	0x08005049
 8005038:	08005055 	.word	0x08005055
 800503c:	0800506b 	.word	0x0800506b
 8005040:	080050b7 	.word	0x080050b7
 8005044:	0800508b 	.word	0x0800508b
				case 1:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8005048:	7b3b      	ldrb	r3, [r7, #12]
 800504a:	4619      	mov	r1, r3
 800504c:	4838      	ldr	r0, [pc, #224]	; (8005130 <TinyBMS_UART_ReadVersion+0x360>)
 800504e:	f008 fb21 	bl	800d694 <iprintf>
					break;
 8005052:	e039      	b.n	80050c8 <TinyBMS_UART_ReadVersion+0x2f8>
				case 2:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8005054:	7b3b      	ldrb	r3, [r7, #12]
 8005056:	4619      	mov	r1, r3
 8005058:	4835      	ldr	r0, [pc, #212]	; (8005130 <TinyBMS_UART_ReadVersion+0x360>)
 800505a:	f008 fb1b 	bl	800d694 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 800505e:	7b7b      	ldrb	r3, [r7, #13]
 8005060:	4619      	mov	r1, r3
 8005062:	4834      	ldr	r0, [pc, #208]	; (8005134 <TinyBMS_UART_ReadVersion+0x364>)
 8005064:	f008 fb16 	bl	800d694 <iprintf>
					break;
 8005068:	e02e      	b.n	80050c8 <TinyBMS_UART_ReadVersion+0x2f8>
				case 3:
					printf("Hardware Version: %u\r\n", versions8[0]);
 800506a:	7b3b      	ldrb	r3, [r7, #12]
 800506c:	4619      	mov	r1, r3
 800506e:	4830      	ldr	r0, [pc, #192]	; (8005130 <TinyBMS_UART_ReadVersion+0x360>)
 8005070:	f008 fb10 	bl	800d694 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8005074:	7b7b      	ldrb	r3, [r7, #13]
 8005076:	4619      	mov	r1, r3
 8005078:	482e      	ldr	r0, [pc, #184]	; (8005134 <TinyBMS_UART_ReadVersion+0x364>)
 800507a:	f008 fb0b 	bl	800d694 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	4619      	mov	r1, r3
 8005082:	482d      	ldr	r0, [pc, #180]	; (8005138 <TinyBMS_UART_ReadVersion+0x368>)
 8005084:	f008 fb06 	bl	800d694 <iprintf>
					break;
 8005088:	e01e      	b.n	80050c8 <TinyBMS_UART_ReadVersion+0x2f8>
				case 5:
					printf("Hardware Version: %u\r\n", versions8[0]);
 800508a:	7b3b      	ldrb	r3, [r7, #12]
 800508c:	4619      	mov	r1, r3
 800508e:	4828      	ldr	r0, [pc, #160]	; (8005130 <TinyBMS_UART_ReadVersion+0x360>)
 8005090:	f008 fb00 	bl	800d694 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8005094:	7b7b      	ldrb	r3, [r7, #13]
 8005096:	4619      	mov	r1, r3
 8005098:	4826      	ldr	r0, [pc, #152]	; (8005134 <TinyBMS_UART_ReadVersion+0x364>)
 800509a:	f008 fafb 	bl	800d694 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 800509e:	7bbb      	ldrb	r3, [r7, #14]
 80050a0:	4619      	mov	r1, r3
 80050a2:	4825      	ldr	r0, [pc, #148]	; (8005138 <TinyBMS_UART_ReadVersion+0x368>)
 80050a4:	f008 faf6 	bl	800d694 <iprintf>
					printf("Firmware Internal Version: %u\r\n", version16);
 80050a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80050ac:	4619      	mov	r1, r3
 80050ae:	4823      	ldr	r0, [pc, #140]	; (800513c <TinyBMS_UART_ReadVersion+0x36c>)
 80050b0:	f008 faf0 	bl	800d694 <iprintf>
					break;
 80050b4:	e008      	b.n	80050c8 <TinyBMS_UART_ReadVersion+0x2f8>
				default:
					printf("Invalid Payload Value\r\n");
 80050b6:	4822      	ldr	r0, [pc, #136]	; (8005140 <TinyBMS_UART_ReadVersion+0x370>)
 80050b8:	f008 fb72 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 80050bc:	23ff      	movs	r3, #255	; 0xff
 80050be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					return retval;
 80050c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80050c6:	e020      	b.n	800510a <TinyBMS_UART_ReadVersion+0x33a>
				}
				printf("----------------------------------------\r\n");
 80050c8:	481e      	ldr	r0, [pc, #120]	; (8005144 <TinyBMS_UART_ReadVersion+0x374>)
 80050ca:	f008 fb69 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80050d4:	e017      	b.n	8005106 <TinyBMS_UART_ReadVersion+0x336>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80050d6:	481c      	ldr	r0, [pc, #112]	; (8005148 <TinyBMS_UART_ReadVersion+0x378>)
 80050d8:	f008 fb62 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80050dc:	23ff      	movs	r3, #255	; 0xff
 80050de:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80050e2:	e010      	b.n	8005106 <TinyBMS_UART_ReadVersion+0x336>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1E but was 0x%02X\r\n", rx_buffer[1]);
 80050e4:	7c7b      	ldrb	r3, [r7, #17]
 80050e6:	4619      	mov	r1, r3
 80050e8:	4818      	ldr	r0, [pc, #96]	; (800514c <TinyBMS_UART_ReadVersion+0x37c>)
 80050ea:	f008 fad3 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 80050ee:	23ff      	movs	r3, #255	; 0xff
 80050f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80050f4:	e007      	b.n	8005106 <TinyBMS_UART_ReadVersion+0x336>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80050f6:	7c3b      	ldrb	r3, [r7, #16]
 80050f8:	4619      	mov	r1, r3
 80050fa:	4815      	ldr	r0, [pc, #84]	; (8005150 <TinyBMS_UART_ReadVersion+0x380>)
 80050fc:	f008 faca 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8005100:	23ff      	movs	r3, #255	; 0xff
 8005102:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	return retval;
 8005106:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800510a:	4618      	mov	r0, r3
 800510c:	3790      	adds	r7, #144	; 0x90
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	080118ac 	.word	0x080118ac
 8005118:	20000228 	.word	0x20000228
 800511c:	080109d4 	.word	0x080109d4
 8005120:	080108f0 	.word	0x080108f0
 8005124:	080108fc 	.word	0x080108fc
 8005128:	080109f0 	.word	0x080109f0
 800512c:	080118c8 	.word	0x080118c8
 8005130:	080118f4 	.word	0x080118f4
 8005134:	0801190c 	.word	0x0801190c
 8005138:	0801192c 	.word	0x0801192c
 800513c:	0801194c 	.word	0x0801194c
 8005140:	0801196c 	.word	0x0801196c
 8005144:	08010af0 	.word	0x08010af0
 8005148:	08010b1c 	.word	0x08010b1c
 800514c:	08011984 	.word	0x08011984
 8005150:	08010988 	.word	0x08010988

08005154 <TinyBMS_UART_ReadVersionExtended>:
 * 						 	 DATA3 - Firmware public version
 * 						 	 DATA4 - Firmware internal version
 * 						 	 DATA5 - Bootloader version
 * 						 	 DATA6 - Register map version
 */
uint8_t TinyBMS_UART_ReadVersionExtended(UART_HandleTypeDef *huart) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b0a4      	sub	sp, #144	; 0x90
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadVersionExtended\r\n");
 800515c:	48c5      	ldr	r0, [pc, #788]	; (8005474 <TinyBMS_UART_ReadVersionExtended+0x320>)
 800515e:	f008 fb1f 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8005162:	23ff      	movs	r3, #255	; 0xff
 8005164:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800516e:	2300      	movs	r3, #0
 8005170:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800517a:	2300      	movs	r3, #0
 800517c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8005180:	2300      	movs	r3, #0
 8005182:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8005186:	23aa      	movs	r3, #170	; 0xaa
 8005188:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	tx_buffer[1] = UART_TBMS_READ_VERSION_EXTENDED;
 800518c:	231f      	movs	r3, #31
 800518e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	CRC_request = CRC16(tx_buffer, 2);
 8005192:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005196:	2102      	movs	r1, #2
 8005198:	4618      	mov	r0, r3
 800519a:	f002 fbb3 	bl	8007904 <CRC16>
 800519e:	4603      	mov	r3, r0
 80051a0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	CRC_LSB = (CRC_request & 0xFF);
 80051a4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80051a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80051ac:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80051b0:	0a1b      	lsrs	r3, r3, #8
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 80051b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80051bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	tx_buffer[3] = CRC_MSB;
 80051c0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80051c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 80051c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051cc:	2204      	movs	r2, #4
 80051ce:	4619      	mov	r1, r3
 80051d0:	48a9      	ldr	r0, [pc, #676]	; (8005478 <TinyBMS_UART_ReadVersionExtended+0x324>)
 80051d2:	f006 faaf 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80051d6:	f107 0310 	add.w	r3, r7, #16
 80051da:	2202      	movs	r2, #2
 80051dc:	4619      	mov	r1, r3
 80051de:	48a6      	ldr	r0, [pc, #664]	; (8005478 <TinyBMS_UART_ReadVersionExtended+0x324>)
 80051e0:	f006 fb16 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80051e4:	7c3b      	ldrb	r3, [r7, #16]
 80051e6:	2baa      	cmp	r3, #170	; 0xaa
 80051e8:	f040 81b5 	bne.w	8005556 <TinyBMS_UART_ReadVersionExtended+0x402>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80051ec:	7c7b      	ldrb	r3, [r7, #17]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d138      	bne.n	8005264 <TinyBMS_UART_ReadVersionExtended+0x110>
			printf("Response from BMS [ERROR]\r\n");
 80051f2:	48a2      	ldr	r0, [pc, #648]	; (800547c <TinyBMS_UART_ReadVersionExtended+0x328>)
 80051f4:	f008 fad4 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80051f8:	f107 0310 	add.w	r3, r7, #16
 80051fc:	3302      	adds	r3, #2
 80051fe:	2204      	movs	r2, #4
 8005200:	4619      	mov	r1, r3
 8005202:	489d      	ldr	r0, [pc, #628]	; (8005478 <TinyBMS_UART_ReadVersionExtended+0x324>)
 8005204:	f006 fb04 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 800520e:	7d7b      	ldrb	r3, [r7, #21]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	b21a      	sxth	r2, r3
 8005214:	7d3b      	ldrb	r3, [r7, #20]
 8005216:	b21b      	sxth	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b21b      	sxth	r3, r3
 800521c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8005220:	f107 0310 	add.w	r3, r7, #16
 8005224:	2104      	movs	r1, #4
 8005226:	4618      	mov	r0, r3
 8005228:	f002 fb6c 	bl	8007904 <CRC16>
 800522c:	4603      	mov	r3, r0
 800522e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

			if(CRC_calc == CRC_reply) {
 8005232:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005236:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800523a:	429a      	cmp	r2, r3
 800523c:	d106      	bne.n	800524c <TinyBMS_UART_ReadVersionExtended+0xf8>
				printf("CRC pass\r\n");
 800523e:	4890      	ldr	r0, [pc, #576]	; (8005480 <TinyBMS_UART_ReadVersionExtended+0x32c>)
 8005240:	f008 faae 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8005244:	23ff      	movs	r3, #255	; 0xff
 8005246:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800524a:	e005      	b.n	8005258 <TinyBMS_UART_ReadVersionExtended+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 800524c:	488d      	ldr	r0, [pc, #564]	; (8005484 <TinyBMS_UART_ReadVersionExtended+0x330>)
 800524e:	f008 faa7 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8005252:	23ff      	movs	r3, #255	; 0xff
 8005254:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
			reportBMSError(error);
 8005258:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800525c:	4618      	mov	r0, r3
 800525e:	f002 fb2f 	bl	80078c0 <reportBMSError>
 8005262:	e180      	b.n	8005566 <TinyBMS_UART_ReadVersionExtended+0x412>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_VERSION_EXTENDED) {
 8005264:	7c7b      	ldrb	r3, [r7, #17]
 8005266:	2b1f      	cmp	r3, #31
 8005268:	f040 816c 	bne.w	8005544 <TinyBMS_UART_ReadVersionExtended+0x3f0>
			printf("Response from BMS [OK]\r\n");
 800526c:	4886      	ldr	r0, [pc, #536]	; (8005488 <TinyBMS_UART_ReadVersionExtended+0x334>)
 800526e:	f008 fa97 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8005272:	f107 0310 	add.w	r3, r7, #16
 8005276:	3302      	adds	r3, #2
 8005278:	2201      	movs	r2, #1
 800527a:	4619      	mov	r1, r3
 800527c:	487e      	ldr	r0, [pc, #504]	; (8005478 <TinyBMS_UART_ReadVersionExtended+0x324>)
 800527e:	f006 fac7 	bl	800b810 <HAL_UART_Receive_IT>

			//PL: (uint8_t)(uint8_t)(uint8_t)(uint16_t)(uint8_t)(uint8_t)
			uint8_t PL = rx_buffer[2];
 8005282:	7cbb      	ldrb	r3, [r7, #18]
 8005284:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			//Payload Length = PL = n bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to  from OK reply
 8005288:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800528c:	b29b      	uxth	r3, r3
 800528e:	3302      	adds	r3, #2
 8005290:	b29a      	uxth	r2, r3
 8005292:	f107 0310 	add.w	r3, r7, #16
 8005296:	3303      	adds	r3, #3
 8005298:	4619      	mov	r1, r3
 800529a:	4877      	ldr	r0, [pc, #476]	; (8005478 <TinyBMS_UART_ReadVersionExtended+0x324>)
 800529c:	f006 fab8 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t versions8[] = {0};
 80052a0:	2300      	movs	r3, #0
 80052a2:	733b      	strb	r3, [r7, #12]
			uint16_t version16 = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			uint32_t numVersions = PL; //1 bytes per data reading (except DATA4 which is 2 bytes)
 80052aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80052ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if(PL >= 5) {
 80052b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d904      	bls.n	80052c4 <TinyBMS_UART_ReadVersionExtended+0x170>
				numVersions = numVersions - 1; //accounting for DATA4 being 2 bytes instead of 1
 80052ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052be:	3b01      	subs	r3, #1
 80052c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			}
			uint32_t n = 0; //version or data index
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			//PL = 7 (max)
			for(uint32_t i = 0; i < numVersions; i++) {
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052d0:	e04a      	b.n	8005368 <TinyBMS_UART_ReadVersionExtended+0x214>
				n++;
 80052d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d6:	3301      	adds	r3, #1
 80052d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				//DATA1,2,3
				//n=1,2,3 or i=0,1,2
				if((i >= 0) && (i < 3)) {
 80052dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d80d      	bhi.n	8005300 <TinyBMS_UART_ReadVersionExtended+0x1ac>
					versions8[i] = rx_buffer[n+3-1];
 80052e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052e8:	3302      	adds	r3, #2
 80052ea:	3390      	adds	r3, #144	; 0x90
 80052ec:	443b      	add	r3, r7
 80052ee:	f813 1c80 	ldrb.w	r1, [r3, #-128]
 80052f2:	f107 020c 	add.w	r2, r7, #12
 80052f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052fa:	4413      	add	r3, r2
 80052fc:	460a      	mov	r2, r1
 80052fe:	701a      	strb	r2, [r3, #0]
				}
				//DATA4
				//n=4 or i=3
				if(i == 3) {
 8005300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005304:	2b03      	cmp	r3, #3
 8005306:	d114      	bne.n	8005332 <TinyBMS_UART_ReadVersionExtended+0x1de>
					version16 = ((rx_buffer[n+4-1] << 8) | rx_buffer[n+3-1]);
 8005308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800530c:	3303      	adds	r3, #3
 800530e:	3390      	adds	r3, #144	; 0x90
 8005310:	443b      	add	r3, r7
 8005312:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	b21a      	sxth	r2, r3
 800531a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800531e:	3302      	adds	r3, #2
 8005320:	3390      	adds	r3, #144	; 0x90
 8005322:	443b      	add	r3, r7
 8005324:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8005328:	b21b      	sxth	r3, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	b21b      	sxth	r3, r3
 800532e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
				}
				//DATA5,6
				//n=5,6 or i=4,5
				if((i >= 4) && (i < 6)) {
 8005332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005336:	2b03      	cmp	r3, #3
 8005338:	d911      	bls.n	800535e <TinyBMS_UART_ReadVersionExtended+0x20a>
 800533a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800533e:	2b05      	cmp	r3, #5
 8005340:	d80d      	bhi.n	800535e <TinyBMS_UART_ReadVersionExtended+0x20a>
					versions8[i-1] = rx_buffer[n+4-1];
 8005342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005346:	1cda      	adds	r2, r3, #3
 8005348:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800534c:	3b01      	subs	r3, #1
 800534e:	3290      	adds	r2, #144	; 0x90
 8005350:	443a      	add	r2, r7
 8005352:	f812 2c80 	ldrb.w	r2, [r2, #-128]
 8005356:	3390      	adds	r3, #144	; 0x90
 8005358:	443b      	add	r3, r7
 800535a:	f803 2c84 	strb.w	r2, [r3, #-132]
			for(uint32_t i = 0; i < numVersions; i++) {
 800535e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005362:	3301      	adds	r3, #1
 8005364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005368:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800536c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005370:	429a      	cmp	r2, r3
 8005372:	d3ae      	bcc.n	80052d2 <TinyBMS_UART_ReadVersionExtended+0x17e>
				}
			}

			//n=6
			CRC_reply = ((rx_buffer[n+6-1] << 8) | rx_buffer[n+5-1]);
 8005374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005378:	3305      	adds	r3, #5
 800537a:	3390      	adds	r3, #144	; 0x90
 800537c:	443b      	add	r3, r7
 800537e:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	b21a      	sxth	r2, r3
 8005386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800538a:	3304      	adds	r3, #4
 800538c:	3390      	adds	r3, #144	; 0x90
 800538e:	443b      	add	r3, r7
 8005390:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8005394:	b21b      	sxth	r3, r3
 8005396:	4313      	orrs	r3, r2
 8005398:	b21b      	sxth	r3, r3
 800539a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 800539e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3303      	adds	r3, #3
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	f107 0310 	add.w	r3, r7, #16
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f002 faa8 	bl	8007904 <CRC16>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

			if(CRC_calc == CRC_reply) {
 80053ba:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80053be:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80053c2:	429a      	cmp	r2, r3
 80053c4:	f040 80b7 	bne.w	8005536 <TinyBMS_UART_ReadVersionExtended+0x3e2>
				printf("CRC pass\r\n");
 80053c8:	482d      	ldr	r0, [pc, #180]	; (8005480 <TinyBMS_UART_ReadVersionExtended+0x32c>)
 80053ca:	f008 f9e9 	bl	800d7a0 <puts>

				//Print the TinyBMS Versions (Hardware, Hardware Changes, Firmware Public, Firmware Internal, Bootloader, or Register Map)
				printf("************ TinyBMS Extended Versions ************\r\n");
 80053ce:	482f      	ldr	r0, [pc, #188]	; (800548c <TinyBMS_UART_ReadVersionExtended+0x338>)
 80053d0:	f008 f9e6 	bl	800d7a0 <puts>

				switch(PL) {
 80053d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80053d8:	3b01      	subs	r3, #1
 80053da:	2b06      	cmp	r3, #6
 80053dc:	f200 809b 	bhi.w	8005516 <TinyBMS_UART_ReadVersionExtended+0x3c2>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <TinyBMS_UART_ReadVersionExtended+0x294>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	08005405 	.word	0x08005405
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005427 	.word	0x08005427
 80053f4:	08005517 	.word	0x08005517
 80053f8:	08005447 	.word	0x08005447
 80053fc:	080054a1 	.word	0x080054a1
 8005400:	080054d7 	.word	0x080054d7
				case 1:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8005404:	7b3b      	ldrb	r3, [r7, #12]
 8005406:	4619      	mov	r1, r3
 8005408:	4821      	ldr	r0, [pc, #132]	; (8005490 <TinyBMS_UART_ReadVersionExtended+0x33c>)
 800540a:	f008 f943 	bl	800d694 <iprintf>
					break;
 800540e:	e08b      	b.n	8005528 <TinyBMS_UART_ReadVersionExtended+0x3d4>
				case 2:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8005410:	7b3b      	ldrb	r3, [r7, #12]
 8005412:	4619      	mov	r1, r3
 8005414:	481e      	ldr	r0, [pc, #120]	; (8005490 <TinyBMS_UART_ReadVersionExtended+0x33c>)
 8005416:	f008 f93d 	bl	800d694 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 800541a:	7b7b      	ldrb	r3, [r7, #13]
 800541c:	4619      	mov	r1, r3
 800541e:	481d      	ldr	r0, [pc, #116]	; (8005494 <TinyBMS_UART_ReadVersionExtended+0x340>)
 8005420:	f008 f938 	bl	800d694 <iprintf>
					break;
 8005424:	e080      	b.n	8005528 <TinyBMS_UART_ReadVersionExtended+0x3d4>
				case 3:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8005426:	7b3b      	ldrb	r3, [r7, #12]
 8005428:	4619      	mov	r1, r3
 800542a:	4819      	ldr	r0, [pc, #100]	; (8005490 <TinyBMS_UART_ReadVersionExtended+0x33c>)
 800542c:	f008 f932 	bl	800d694 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8005430:	7b7b      	ldrb	r3, [r7, #13]
 8005432:	4619      	mov	r1, r3
 8005434:	4817      	ldr	r0, [pc, #92]	; (8005494 <TinyBMS_UART_ReadVersionExtended+0x340>)
 8005436:	f008 f92d 	bl	800d694 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 800543a:	7bbb      	ldrb	r3, [r7, #14]
 800543c:	4619      	mov	r1, r3
 800543e:	4816      	ldr	r0, [pc, #88]	; (8005498 <TinyBMS_UART_ReadVersionExtended+0x344>)
 8005440:	f008 f928 	bl	800d694 <iprintf>
					break;
 8005444:	e070      	b.n	8005528 <TinyBMS_UART_ReadVersionExtended+0x3d4>
				case 5:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8005446:	7b3b      	ldrb	r3, [r7, #12]
 8005448:	4619      	mov	r1, r3
 800544a:	4811      	ldr	r0, [pc, #68]	; (8005490 <TinyBMS_UART_ReadVersionExtended+0x33c>)
 800544c:	f008 f922 	bl	800d694 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8005450:	7b7b      	ldrb	r3, [r7, #13]
 8005452:	4619      	mov	r1, r3
 8005454:	480f      	ldr	r0, [pc, #60]	; (8005494 <TinyBMS_UART_ReadVersionExtended+0x340>)
 8005456:	f008 f91d 	bl	800d694 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 800545a:	7bbb      	ldrb	r3, [r7, #14]
 800545c:	4619      	mov	r1, r3
 800545e:	480e      	ldr	r0, [pc, #56]	; (8005498 <TinyBMS_UART_ReadVersionExtended+0x344>)
 8005460:	f008 f918 	bl	800d694 <iprintf>
					printf("Firmware Internal Version: %u\r\n", version16);
 8005464:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005468:	4619      	mov	r1, r3
 800546a:	480c      	ldr	r0, [pc, #48]	; (800549c <TinyBMS_UART_ReadVersionExtended+0x348>)
 800546c:	f008 f912 	bl	800d694 <iprintf>
					break;
 8005470:	e05a      	b.n	8005528 <TinyBMS_UART_ReadVersionExtended+0x3d4>
 8005472:	bf00      	nop
 8005474:	080119bc 	.word	0x080119bc
 8005478:	20000228 	.word	0x20000228
 800547c:	080109d4 	.word	0x080109d4
 8005480:	080108f0 	.word	0x080108f0
 8005484:	080108fc 	.word	0x080108fc
 8005488:	080109f0 	.word	0x080109f0
 800548c:	080119e0 	.word	0x080119e0
 8005490:	080118f4 	.word	0x080118f4
 8005494:	0801190c 	.word	0x0801190c
 8005498:	0801192c 	.word	0x0801192c
 800549c:	0801194c 	.word	0x0801194c
				case 6:
					printf("Hardware Version: %u\r\n", versions8[0]);
 80054a0:	7b3b      	ldrb	r3, [r7, #12]
 80054a2:	4619      	mov	r1, r3
 80054a4:	4833      	ldr	r0, [pc, #204]	; (8005574 <TinyBMS_UART_ReadVersionExtended+0x420>)
 80054a6:	f008 f8f5 	bl	800d694 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 80054aa:	7b7b      	ldrb	r3, [r7, #13]
 80054ac:	4619      	mov	r1, r3
 80054ae:	4832      	ldr	r0, [pc, #200]	; (8005578 <TinyBMS_UART_ReadVersionExtended+0x424>)
 80054b0:	f008 f8f0 	bl	800d694 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4830      	ldr	r0, [pc, #192]	; (800557c <TinyBMS_UART_ReadVersionExtended+0x428>)
 80054ba:	f008 f8eb 	bl	800d694 <iprintf>
					printf("Firmware Internal Version: %u\r\n", version16);
 80054be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80054c2:	4619      	mov	r1, r3
 80054c4:	482e      	ldr	r0, [pc, #184]	; (8005580 <TinyBMS_UART_ReadVersionExtended+0x42c>)
 80054c6:	f008 f8e5 	bl	800d694 <iprintf>
					printf("Bootloader Version: %u\r\n", versions8[3]);
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	4619      	mov	r1, r3
 80054ce:	482d      	ldr	r0, [pc, #180]	; (8005584 <TinyBMS_UART_ReadVersionExtended+0x430>)
 80054d0:	f008 f8e0 	bl	800d694 <iprintf>
					break;
 80054d4:	e028      	b.n	8005528 <TinyBMS_UART_ReadVersionExtended+0x3d4>
				case 7:
					printf("Hardware Version: %u\r\n", versions8[0]);
 80054d6:	7b3b      	ldrb	r3, [r7, #12]
 80054d8:	4619      	mov	r1, r3
 80054da:	4826      	ldr	r0, [pc, #152]	; (8005574 <TinyBMS_UART_ReadVersionExtended+0x420>)
 80054dc:	f008 f8da 	bl	800d694 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 80054e0:	7b7b      	ldrb	r3, [r7, #13]
 80054e2:	4619      	mov	r1, r3
 80054e4:	4824      	ldr	r0, [pc, #144]	; (8005578 <TinyBMS_UART_ReadVersionExtended+0x424>)
 80054e6:	f008 f8d5 	bl	800d694 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	4619      	mov	r1, r3
 80054ee:	4823      	ldr	r0, [pc, #140]	; (800557c <TinyBMS_UART_ReadVersionExtended+0x428>)
 80054f0:	f008 f8d0 	bl	800d694 <iprintf>
					printf("Firmware Internal Version: %u\r\n", version16);
 80054f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80054f8:	4619      	mov	r1, r3
 80054fa:	4821      	ldr	r0, [pc, #132]	; (8005580 <TinyBMS_UART_ReadVersionExtended+0x42c>)
 80054fc:	f008 f8ca 	bl	800d694 <iprintf>
					printf("Bootloader Version: %u\r\n", versions8[3]);
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	4619      	mov	r1, r3
 8005504:	481f      	ldr	r0, [pc, #124]	; (8005584 <TinyBMS_UART_ReadVersionExtended+0x430>)
 8005506:	f008 f8c5 	bl	800d694 <iprintf>
					printf("Register Map Version: %u\r\n", versions8[4]);
 800550a:	7c3b      	ldrb	r3, [r7, #16]
 800550c:	4619      	mov	r1, r3
 800550e:	481e      	ldr	r0, [pc, #120]	; (8005588 <TinyBMS_UART_ReadVersionExtended+0x434>)
 8005510:	f008 f8c0 	bl	800d694 <iprintf>
					break;
 8005514:	e008      	b.n	8005528 <TinyBMS_UART_ReadVersionExtended+0x3d4>
				default:
					printf("Invalid Payload Value\r\n");
 8005516:	481d      	ldr	r0, [pc, #116]	; (800558c <TinyBMS_UART_ReadVersionExtended+0x438>)
 8005518:	f008 f942 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 800551c:	23ff      	movs	r3, #255	; 0xff
 800551e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					return retval;
 8005522:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005526:	e020      	b.n	800556a <TinyBMS_UART_ReadVersionExtended+0x416>
				}
				printf("----------------------------------------\r\n");
 8005528:	4819      	ldr	r0, [pc, #100]	; (8005590 <TinyBMS_UART_ReadVersionExtended+0x43c>)
 800552a:	f008 f939 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005534:	e017      	b.n	8005566 <TinyBMS_UART_ReadVersionExtended+0x412>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8005536:	4817      	ldr	r0, [pc, #92]	; (8005594 <TinyBMS_UART_ReadVersionExtended+0x440>)
 8005538:	f008 f932 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800553c:	23ff      	movs	r3, #255	; 0xff
 800553e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005542:	e010      	b.n	8005566 <TinyBMS_UART_ReadVersionExtended+0x412>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1F but was 0x%02X\r\n", rx_buffer[1]);
 8005544:	7c7b      	ldrb	r3, [r7, #17]
 8005546:	4619      	mov	r1, r3
 8005548:	4813      	ldr	r0, [pc, #76]	; (8005598 <TinyBMS_UART_ReadVersionExtended+0x444>)
 800554a:	f008 f8a3 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 800554e:	23ff      	movs	r3, #255	; 0xff
 8005550:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005554:	e007      	b.n	8005566 <TinyBMS_UART_ReadVersionExtended+0x412>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8005556:	7c3b      	ldrb	r3, [r7, #16]
 8005558:	4619      	mov	r1, r3
 800555a:	4810      	ldr	r0, [pc, #64]	; (800559c <TinyBMS_UART_ReadVersionExtended+0x448>)
 800555c:	f008 f89a 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 8005560:	23ff      	movs	r3, #255	; 0xff
 8005562:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	return retval;
 8005566:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800556a:	4618      	mov	r0, r3
 800556c:	3790      	adds	r7, #144	; 0x90
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	080118f4 	.word	0x080118f4
 8005578:	0801190c 	.word	0x0801190c
 800557c:	0801192c 	.word	0x0801192c
 8005580:	0801194c 	.word	0x0801194c
 8005584:	08011a18 	.word	0x08011a18
 8005588:	08011a34 	.word	0x08011a34
 800558c:	0801196c 	.word	0x0801196c
 8005590:	08010af0 	.word	0x08010af0
 8005594:	08010b1c 	.word	0x08010b1c
 8005598:	08011a50 	.word	0x08011a50
 800559c:	08010988 	.word	0x08010988

080055a0 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft>:
 *
 * 						 	 DATA1 - Speed (km/h)
 * 						 	 DATA2 - Distance left until empty battery (km)
 * 						 	 DATA3 - Estimated time left until empty battery (s)
 */
uint8_t TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft(UART_HandleTypeDef *huart) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b0a4      	sub	sp, #144	; 0x90
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft\r\n");
 80055a8:	4887      	ldr	r0, [pc, #540]	; (80057c8 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x228>)
 80055aa:	f008 f8f9 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80055ae:	23ff      	movs	r3, #255	; 0xff
 80055b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80055c6:	2300      	movs	r3, #0
 80055c8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80055d2:	23aa      	movs	r3, #170	; 0xaa
 80055d4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = UART_TBMS_READ_SPEED_DISTANCETIME_LEFT;
 80055d8:	2320      	movs	r3, #32
 80055da:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	CRC_request = CRC16(tx_buffer, 2);
 80055de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f002 f98d 	bl	8007904 <CRC16>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	CRC_LSB = (CRC_request & 0xFF);
 80055f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80055f4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80055f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8005604:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8005608:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	tx_buffer[3] = CRC_MSB;
 800560c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8005610:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8005614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005618:	2204      	movs	r2, #4
 800561a:	4619      	mov	r1, r3
 800561c:	486b      	ldr	r0, [pc, #428]	; (80057cc <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x22c>)
 800561e:	f006 f889 	bl	800b734 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8005622:	f107 030c 	add.w	r3, r7, #12
 8005626:	2202      	movs	r2, #2
 8005628:	4619      	mov	r1, r3
 800562a:	4868      	ldr	r0, [pc, #416]	; (80057cc <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x22c>)
 800562c:	f006 f8f0 	bl	800b810 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8005630:	7b3b      	ldrb	r3, [r7, #12]
 8005632:	2baa      	cmp	r3, #170	; 0xaa
 8005634:	f040 80b9 	bne.w	80057aa <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x20a>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8005638:	7b7b      	ldrb	r3, [r7, #13]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d138      	bne.n	80056b0 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x110>
			printf("Response from BMS [ERROR]\r\n");
 800563e:	4864      	ldr	r0, [pc, #400]	; (80057d0 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x230>)
 8005640:	f008 f8ae 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8005644:	f107 030c 	add.w	r3, r7, #12
 8005648:	3302      	adds	r3, #2
 800564a:	2204      	movs	r2, #4
 800564c:	4619      	mov	r1, r3
 800564e:	485f      	ldr	r0, [pc, #380]	; (80057cc <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x22c>)
 8005650:	f006 f8de 	bl	800b810 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 800565a:	7c7b      	ldrb	r3, [r7, #17]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	b21a      	sxth	r2, r3
 8005660:	7c3b      	ldrb	r3, [r7, #16]
 8005662:	b21b      	sxth	r3, r3
 8005664:	4313      	orrs	r3, r2
 8005666:	b21b      	sxth	r3, r3
 8005668:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	2104      	movs	r1, #4
 8005672:	4618      	mov	r0, r3
 8005674:	f002 f946 	bl	8007904 <CRC16>
 8005678:	4603      	mov	r3, r0
 800567a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

			if(CRC_calc == CRC_reply) {
 800567e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8005682:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005686:	429a      	cmp	r2, r3
 8005688:	d106      	bne.n	8005698 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0xf8>
				printf("CRC pass\r\n");
 800568a:	4852      	ldr	r0, [pc, #328]	; (80057d4 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x234>)
 800568c:	f008 f888 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8005690:	23ff      	movs	r3, #255	; 0xff
 8005692:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005696:	e005      	b.n	80056a4 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x104>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8005698:	484f      	ldr	r0, [pc, #316]	; (80057d8 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x238>)
 800569a:	f008 f881 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800569e:	23ff      	movs	r3, #255	; 0xff
 80056a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
			reportBMSError(error);
 80056a4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80056a8:	4618      	mov	r0, r3
 80056aa:	f002 f909 	bl	80078c0 <reportBMSError>
 80056ae:	e084      	b.n	80057ba <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x21a>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_SPEED_DISTANCETIME_LEFT) {
 80056b0:	7b7b      	ldrb	r3, [r7, #13]
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d170      	bne.n	8005798 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1f8>
			printf("Response from BMS [OK]\r\n");
 80056b6:	4849      	ldr	r0, [pc, #292]	; (80057dc <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x23c>)
 80056b8:	f008 f872 	bl	800d7a0 <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], 14); //read from byte 3 to 16 from OK reply
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	3303      	adds	r3, #3
 80056c2:	220e      	movs	r2, #14
 80056c4:	4619      	mov	r1, r3
 80056c6:	4841      	ldr	r0, [pc, #260]	; (80057cc <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x22c>)
 80056c8:	f006 f8a2 	bl	800b810 <HAL_UART_Receive_IT>

			//DATA1 - Speed (km/h)
			uint32_t DATA1 = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 80056cc:	7c7b      	ldrb	r3, [r7, #17]
 80056ce:	061a      	lsls	r2, r3, #24
 80056d0:	7c3b      	ldrb	r3, [r7, #16]
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	431a      	orrs	r2, r3
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	4313      	orrs	r3, r2
 80056dc:	7bba      	ldrb	r2, [r7, #14]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			float speed = DATA1;
 80056e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

			//DATA2 - Distance Left Until Empty Battery (km)
			uint32_t distanceLeftUntilEmpty = ((rx_buffer[9] << 24) | (rx_buffer[8] << 16) | (rx_buffer[7] << 8) | (rx_buffer[6]));
 80056f4:	7d7b      	ldrb	r3, [r7, #21]
 80056f6:	061a      	lsls	r2, r3, #24
 80056f8:	7d3b      	ldrb	r3, [r7, #20]
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	431a      	orrs	r2, r3
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	4313      	orrs	r3, r2
 8005704:	7cba      	ldrb	r2, [r7, #18]
 8005706:	4313      	orrs	r3, r2
 8005708:	67bb      	str	r3, [r7, #120]	; 0x78

			//DATA3 - Estimated Time Left Until Empty Battery (seconds)
			uint32_t timeLeftUntilEmpty = ((rx_buffer[13] << 24) | (rx_buffer[12] << 16) | (rx_buffer[11] << 8) | (rx_buffer[10]));
 800570a:	7e7b      	ldrb	r3, [r7, #25]
 800570c:	061a      	lsls	r2, r3, #24
 800570e:	7e3b      	ldrb	r3, [r7, #24]
 8005710:	041b      	lsls	r3, r3, #16
 8005712:	431a      	orrs	r2, r3
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	4313      	orrs	r3, r2
 800571a:	7dba      	ldrb	r2, [r7, #22]
 800571c:	4313      	orrs	r3, r2
 800571e:	677b      	str	r3, [r7, #116]	; 0x74

			CRC_reply = ((rx_buffer[15] << 8) | rx_buffer[14]);
 8005720:	7efb      	ldrb	r3, [r7, #27]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	b21a      	sxth	r2, r3
 8005726:	7ebb      	ldrb	r3, [r7, #26]
 8005728:	b21b      	sxth	r3, r3
 800572a:	4313      	orrs	r3, r2
 800572c:	b21b      	sxth	r3, r3
 800572e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			CRC_calc = CRC16(rx_buffer, 14);
 8005732:	f107 030c 	add.w	r3, r7, #12
 8005736:	210e      	movs	r1, #14
 8005738:	4618      	mov	r0, r3
 800573a:	f002 f8e3 	bl	8007904 <CRC16>
 800573e:	4603      	mov	r3, r0
 8005740:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

			if(CRC_calc == CRC_reply) {
 8005744:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8005748:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800574c:	429a      	cmp	r2, r3
 800574e:	d11c      	bne.n	800578a <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ea>
				printf("CRC pass\r\n");
 8005750:	4820      	ldr	r0, [pc, #128]	; (80057d4 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x234>)
 8005752:	f008 f825 	bl	800d7a0 <puts>

				//Print the TinyBMS Versions (Hardware, Hardware Changes, Firmware Public, Firmware Internal, Bootloader, or Register Map)
				printf("************ TinyBMS Calculated Speed, Distance & Estimated Time Left Until Empty ************\r\n");
 8005756:	4822      	ldr	r0, [pc, #136]	; (80057e0 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x240>)
 8005758:	f008 f822 	bl	800d7a0 <puts>
				printf("Speed: %f (km/h)\r\n", speed);
 800575c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800575e:	f7fa ff13 	bl	8000588 <__aeabi_f2d>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	481f      	ldr	r0, [pc, #124]	; (80057e4 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x244>)
 8005768:	f007 ff94 	bl	800d694 <iprintf>
				printf("Distance left until empty: %lu (km)\r\n", distanceLeftUntilEmpty);
 800576c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800576e:	481e      	ldr	r0, [pc, #120]	; (80057e8 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x248>)
 8005770:	f007 ff90 	bl	800d694 <iprintf>
				printf("Estimated time left until empty: %lu (s)\r\n", timeLeftUntilEmpty);
 8005774:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005776:	481d      	ldr	r0, [pc, #116]	; (80057ec <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x24c>)
 8005778:	f007 ff8c 	bl	800d694 <iprintf>
				printf("----------------------------------------\r\n");
 800577c:	481c      	ldr	r0, [pc, #112]	; (80057f0 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x250>)
 800577e:	f008 f80f 	bl	800d7a0 <puts>
				retval = CMD_SUCCESS;
 8005782:	2300      	movs	r3, #0
 8005784:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005788:	e017      	b.n	80057ba <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x21a>

			} else {
				printf("CRC fail in BMS OK\r\n");
 800578a:	481a      	ldr	r0, [pc, #104]	; (80057f4 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x254>)
 800578c:	f008 f808 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8005790:	23ff      	movs	r3, #255	; 0xff
 8005792:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005796:	e010      	b.n	80057ba <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x21a>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x20 but was 0x%02X\r\n", rx_buffer[1]);
 8005798:	7b7b      	ldrb	r3, [r7, #13]
 800579a:	4619      	mov	r1, r3
 800579c:	4816      	ldr	r0, [pc, #88]	; (80057f8 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x258>)
 800579e:	f007 ff79 	bl	800d694 <iprintf>
			retval = CMD_FAILURE;
 80057a2:	23ff      	movs	r3, #255	; 0xff
 80057a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80057a8:	e007      	b.n	80057ba <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x21a>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80057aa:	7b3b      	ldrb	r3, [r7, #12]
 80057ac:	4619      	mov	r1, r3
 80057ae:	4813      	ldr	r0, [pc, #76]	; (80057fc <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x25c>)
 80057b0:	f007 ff70 	bl	800d694 <iprintf>
		retval = CMD_FAILURE;
 80057b4:	23ff      	movs	r3, #255	; 0xff
 80057b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	return retval;
 80057ba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3790      	adds	r7, #144	; 0x90
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	08011a88 	.word	0x08011a88
 80057cc:	20000228 	.word	0x20000228
 80057d0:	080109d4 	.word	0x080109d4
 80057d4:	080108f0 	.word	0x080108f0
 80057d8:	080108fc 	.word	0x080108fc
 80057dc:	080109f0 	.word	0x080109f0
 80057e0:	08011abc 	.word	0x08011abc
 80057e4:	08011b1c 	.word	0x08011b1c
 80057e8:	08011b30 	.word	0x08011b30
 80057ec:	08011b58 	.word	0x08011b58
 80057f0:	08010af0 	.word	0x08010af0
 80057f4:	08010b1c 	.word	0x08010b1c
 80057f8:	08011b84 	.word	0x08011b84
 80057fc:	08010988 	.word	0x08010988

08005800 <TinyBMS_CAN_ResetClearEventsStatistics>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  Options: 0x01 - Clear Events , 0x02 - Clear Statistics , 0x05 - Reset BMS
 *
 */
uint8_t TinyBMS_CAN_ResetClearEventsStatistics(CAN_HandleTypeDef *hcan, uint8_t option) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b08e      	sub	sp, #56	; 0x38
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
	printf("TinyBMS_CAN_ResetClearEventsStatistics\r\n");
 800580c:	4851      	ldr	r0, [pc, #324]	; (8005954 <TinyBMS_CAN_ResetClearEventsStatistics+0x154>)
 800580e:	f007 ffc7 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8005812:	23ff      	movs	r3, #255	; 0xff
 8005814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	switch(option) {
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	2b05      	cmp	r3, #5
 800581c:	d00e      	beq.n	800583c <TinyBMS_CAN_ResetClearEventsStatistics+0x3c>
 800581e:	2b05      	cmp	r3, #5
 8005820:	dc10      	bgt.n	8005844 <TinyBMS_CAN_ResetClearEventsStatistics+0x44>
 8005822:	2b01      	cmp	r3, #1
 8005824:	d002      	beq.n	800582c <TinyBMS_CAN_ResetClearEventsStatistics+0x2c>
 8005826:	2b02      	cmp	r3, #2
 8005828:	d004      	beq.n	8005834 <TinyBMS_CAN_ResetClearEventsStatistics+0x34>
 800582a:	e00b      	b.n	8005844 <TinyBMS_CAN_ResetClearEventsStatistics+0x44>
	case TINYBMS_CLEAR_EVENTS:
		printf("0x01 Clear Events\r\n");
 800582c:	484a      	ldr	r0, [pc, #296]	; (8005958 <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 800582e:	f007 ffb7 	bl	800d7a0 <puts>
		break;
 8005832:	e010      	b.n	8005856 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	case TINYBMS_CLEAR_STATS:
		printf("0x02 Clear Statistics\r\n");
 8005834:	4849      	ldr	r0, [pc, #292]	; (800595c <TinyBMS_CAN_ResetClearEventsStatistics+0x15c>)
 8005836:	f007 ffb3 	bl	800d7a0 <puts>
		break;
 800583a:	e00c      	b.n	8005856 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	case TINYBMS_RESET_BMS:
		printf("0x05 Reset BMS\r\n");
 800583c:	4848      	ldr	r0, [pc, #288]	; (8005960 <TinyBMS_CAN_ResetClearEventsStatistics+0x160>)
 800583e:	f007 ffaf 	bl	800d7a0 <puts>
		break;
 8005842:	e008      	b.n	8005856 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	default:
		printf("Invalid option\r\n");
 8005844:	4847      	ldr	r0, [pc, #284]	; (8005964 <TinyBMS_CAN_ResetClearEventsStatistics+0x164>)
 8005846:	f007 ffab 	bl	800d7a0 <puts>
		retval = CMD_FAILURE;
 800584a:	23ff      	movs	r3, #255	; 0xff
 800584c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return retval;
 8005850:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005854:	e079      	b.n	800594a <TinyBMS_CAN_ResetClearEventsStatistics+0x14a>
	}

	uint8_t tx_msg[8] = {0x02, option, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005856:	2302      	movs	r3, #2
 8005858:	723b      	strb	r3, [r7, #8]
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	727b      	strb	r3, [r7, #9]
 800585e:	2300      	movs	r3, #0
 8005860:	72bb      	strb	r3, [r7, #10]
 8005862:	2300      	movs	r3, #0
 8005864:	72fb      	strb	r3, [r7, #11]
 8005866:	2300      	movs	r3, #0
 8005868:	733b      	strb	r3, [r7, #12]
 800586a:	2300      	movs	r3, #0
 800586c:	737b      	strb	r3, [r7, #13]
 800586e:	2300      	movs	r3, #0
 8005870:	73bb      	strb	r3, [r7, #14]
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 2;
 8005876:	2302      	movs	r3, #2
 8005878:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 800587c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005880:	f107 0308 	add.w	r3, r7, #8
 8005884:	4619      	mov	r1, r3
 8005886:	2000      	movs	r0, #0
 8005888:	f003 f83c 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800588c:	e051      	b.n	8005932 <TinyBMS_CAN_ResetClearEventsStatistics+0x132>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800588e:	f107 0310 	add.w	r3, r7, #16
 8005892:	f107 0218 	add.w	r2, r7, #24
 8005896:	2100      	movs	r1, #0
 8005898:	4833      	ldr	r0, [pc, #204]	; (8005968 <TinyBMS_CAN_ResetClearEventsStatistics+0x168>)
 800589a:	f003 ff78 	bl	800978e <HAL_CAN_GetRxMessage>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <TinyBMS_CAN_ResetClearEventsStatistics+0xa8>
			Error_Handler();
 80058a4:	f003 f9a6 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80058a8:	f240 4103 	movw	r1, #1027	; 0x403
 80058ac:	482e      	ldr	r0, [pc, #184]	; (8005968 <TinyBMS_CAN_ResetClearEventsStatistics+0x168>)
 80058ae:	f004 f8a8 	bl	8009a02 <HAL_CAN_ActivateNotification>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <TinyBMS_CAN_ResetClearEventsStatistics+0xbc>
			Error_Handler();
 80058b8:	f003 f99c 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4b2b      	ldr	r3, [pc, #172]	; (800596c <TinyBMS_CAN_ResetClearEventsStatistics+0x16c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d135      	bne.n	8005932 <TinyBMS_CAN_ResetClearEventsStatistics+0x132>
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d132      	bne.n	8005932 <TinyBMS_CAN_ResetClearEventsStatistics+0x132>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80058cc:	7c3b      	ldrb	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d117      	bne.n	8005902 <TinyBMS_CAN_ResetClearEventsStatistics+0x102>
				printf("Response from BMS [Error]\r\n");
 80058d2:	4827      	ldr	r0, [pc, #156]	; (8005970 <TinyBMS_CAN_ResetClearEventsStatistics+0x170>)
 80058d4:	f007 ff64 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 80058d8:	7c7b      	ldrb	r3, [r7, #17]
 80058da:	4619      	mov	r1, r3
 80058dc:	7cbb      	ldrb	r3, [r7, #18]
 80058de:	461a      	mov	r2, r3
 80058e0:	4824      	ldr	r0, [pc, #144]	; (8005974 <TinyBMS_CAN_ResetClearEventsStatistics+0x174>)
 80058e2:	f007 fed7 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 80058e6:	7cbb      	ldrb	r3, [r7, #18]
 80058e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				reportBMSError(error);
 80058ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 ffe5 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 80058f6:	23ff      	movs	r3, #255	; 0xff
 80058f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 80058fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005900:	e023      	b.n	800594a <TinyBMS_CAN_ResetClearEventsStatistics+0x14a>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_RESET_CLEAR_EVENTS_STATS)) {
 8005902:	7c3b      	ldrb	r3, [r7, #16]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d10b      	bne.n	8005920 <TinyBMS_CAN_ResetClearEventsStatistics+0x120>
 8005908:	7c7b      	ldrb	r3, [r7, #17]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d108      	bne.n	8005920 <TinyBMS_CAN_ResetClearEventsStatistics+0x120>
				printf("Response from BMS [OK]\r\n");
 800590e:	481a      	ldr	r0, [pc, #104]	; (8005978 <TinyBMS_CAN_ResetClearEventsStatistics+0x178>)
 8005910:	f007 ff46 	bl	800d7a0 <puts>
				printf("CAN_TBMS_RESET_CLEAR_EVENTS_STATS | CMD: 0x%02X\r\n", rx_msg[1]);
 8005914:	7c7b      	ldrb	r3, [r7, #17]
 8005916:	4619      	mov	r1, r3
 8005918:	4818      	ldr	r0, [pc, #96]	; (800597c <TinyBMS_CAN_ResetClearEventsStatistics+0x17c>)
 800591a:	f007 febb 	bl	800d694 <iprintf>
 800591e:	e008      	b.n	8005932 <TinyBMS_CAN_ResetClearEventsStatistics+0x132>

			} else {
				printf("Data Corruption\r\n");
 8005920:	4817      	ldr	r0, [pc, #92]	; (8005980 <TinyBMS_CAN_ResetClearEventsStatistics+0x180>)
 8005922:	f007 ff3d 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8005926:	23ff      	movs	r3, #255	; 0xff
 8005928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 800592c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005930:	e00b      	b.n	800594a <TinyBMS_CAN_ResetClearEventsStatistics+0x14a>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005932:	2100      	movs	r1, #0
 8005934:	480c      	ldr	r0, [pc, #48]	; (8005968 <TinyBMS_CAN_ResetClearEventsStatistics+0x168>)
 8005936:	f004 f83c 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1a6      	bne.n	800588e <TinyBMS_CAN_ResetClearEventsStatistics+0x8e>
			}
		}
	}
	retval = CMD_SUCCESS;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return retval;
 8005946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800594a:	4618      	mov	r0, r3
 800594c:	3738      	adds	r7, #56	; 0x38
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	08011bbc 	.word	0x08011bbc
 8005958:	08011be4 	.word	0x08011be4
 800595c:	08011bf8 	.word	0x08011bf8
 8005960:	08011c10 	.word	0x08011c10
 8005964:	08011c20 	.word	0x08011c20
 8005968:	20000200 	.word	0x20000200
 800596c:	20000004 	.word	0x20000004
 8005970:	08011c30 	.word	0x08011c30
 8005974:	08011c4c 	.word	0x08011c4c
 8005978:	080109f0 	.word	0x080109f0
 800597c:	08011c70 	.word	0x08011c70
 8005980:	08011ca4 	.word	0x08011ca4

08005984 <TinyBMS_CAN_ReadRegBlock>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated
 * 						   by malloc(size_t size).
 */
uint8_t TinyBMS_CAN_ReadRegBlock(CAN_HandleTypeDef *hcan, uint8_t rl, uint16_t addr) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b090      	sub	sp, #64	; 0x40
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
 8005990:	4613      	mov	r3, r2
 8005992:	803b      	strh	r3, [r7, #0]
	printf("TinyBMS_CAN_ReadRegBlock\r\n");
 8005994:	4873      	ldr	r0, [pc, #460]	; (8005b64 <TinyBMS_CAN_ReadRegBlock+0x1e0>)
 8005996:	f007 ff03 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 800599a:	23ff      	movs	r3, #255	; 0xff
 800599c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t addr_MSB = 0, addr_LSB = 0, msg_count = 1, pl = 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t data = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Request to BMS */
	//Check if number of registers to write is within bounds
	if((rl <= 0) || (rl > 0x7F)) {
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <TinyBMS_CAN_ReadRegBlock+0x46>
 80059c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da05      	bge.n	80059d6 <TinyBMS_CAN_ReadRegBlock+0x52>
		retval = CMD_FAILURE;
 80059ca:	23ff      	movs	r3, #255	; 0xff
 80059cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 80059d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80059d4:	e0c1      	b.n	8005b5a <TinyBMS_CAN_ReadRegBlock+0x1d6>
	}

	//Starting address of Register Block
	addr_MSB = ((addr >> 8) & 0xFF);
 80059d6:	883b      	ldrh	r3, [r7, #0]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	addr_LSB = (addr & 0xFF);
 80059e0:	883b      	ldrh	r3, [r7, #0]
 80059e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	uint8_t tx_msg[8] = {CAN_TBMS_READ_REG_BLOCK, addr_MSB, addr_LSB, 0x00, rl, 0x00, 0x00, 0x00};
 80059e6:	2303      	movs	r3, #3
 80059e8:	723b      	strb	r3, [r7, #8]
 80059ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80059ee:	727b      	strb	r3, [r7, #9]
 80059f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80059f4:	72bb      	strb	r3, [r7, #10]
 80059f6:	2300      	movs	r3, #0
 80059f8:	72fb      	strb	r3, [r7, #11]
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	733b      	strb	r3, [r7, #12]
 80059fe:	2300      	movs	r3, #0
 8005a00:	737b      	strb	r3, [r7, #13]
 8005a02:	2300      	movs	r3, #0
 8005a04:	73bb      	strb	r3, [r7, #14]
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 5;
 8005a0a:	2305      	movs	r3, #5
 8005a0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005a10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005a14:	f107 0308 	add.w	r3, r7, #8
 8005a18:	4619      	mov	r1, r3
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	f002 ff72 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005a20:	e08e      	b.n	8005b40 <TinyBMS_CAN_ReadRegBlock+0x1bc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8005a22:	f107 0310 	add.w	r3, r7, #16
 8005a26:	f107 0218 	add.w	r2, r7, #24
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	484e      	ldr	r0, [pc, #312]	; (8005b68 <TinyBMS_CAN_ReadRegBlock+0x1e4>)
 8005a2e:	f003 feae 	bl	800978e <HAL_CAN_GetRxMessage>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <TinyBMS_CAN_ReadRegBlock+0xb8>
			Error_Handler();
 8005a38:	f003 f8dc 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005a3c:	f240 4103 	movw	r1, #1027	; 0x403
 8005a40:	4849      	ldr	r0, [pc, #292]	; (8005b68 <TinyBMS_CAN_ReadRegBlock+0x1e4>)
 8005a42:	f003 ffde 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <TinyBMS_CAN_ReadRegBlock+0xcc>
			Error_Handler();
 8005a4c:	f003 f8d2 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4b46      	ldr	r3, [pc, #280]	; (8005b6c <TinyBMS_CAN_ReadRegBlock+0x1e8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d172      	bne.n	8005b40 <TinyBMS_CAN_ReadRegBlock+0x1bc>
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d16f      	bne.n	8005b40 <TinyBMS_CAN_ReadRegBlock+0x1bc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8005a60:	7c3b      	ldrb	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d117      	bne.n	8005a96 <TinyBMS_CAN_ReadRegBlock+0x112>
				printf("Response from BMS [Error]\r\n");
 8005a66:	4842      	ldr	r0, [pc, #264]	; (8005b70 <TinyBMS_CAN_ReadRegBlock+0x1ec>)
 8005a68:	f007 fe9a 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8005a6c:	7c7b      	ldrb	r3, [r7, #17]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	7cbb      	ldrb	r3, [r7, #18]
 8005a72:	461a      	mov	r2, r3
 8005a74:	483f      	ldr	r0, [pc, #252]	; (8005b74 <TinyBMS_CAN_ReadRegBlock+0x1f0>)
 8005a76:	f007 fe0d 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8005a7a:	7cbb      	ldrb	r3, [r7, #18]
 8005a7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				reportBMSError(error);
 8005a80:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 ff1b 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8005a8a:	23ff      	movs	r3, #255	; 0xff
 8005a8c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8005a90:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005a94:	e061      	b.n	8005b5a <TinyBMS_CAN_ReadRegBlock+0x1d6>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_REG_BLOCK)) {
 8005a96:	7c3b      	ldrb	r3, [r7, #16]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d148      	bne.n	8005b2e <TinyBMS_CAN_ReadRegBlock+0x1aa>
 8005a9c:	7c7b      	ldrb	r3, [r7, #17]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d145      	bne.n	8005b2e <TinyBMS_CAN_ReadRegBlock+0x1aa>
				if(msg_count == 1) {
 8005aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d107      	bne.n	8005aba <TinyBMS_CAN_ReadRegBlock+0x136>
					printf("Response from BMS [OK]\r\n");
 8005aaa:	4833      	ldr	r0, [pc, #204]	; (8005b78 <TinyBMS_CAN_ReadRegBlock+0x1f4>)
 8005aac:	f007 fe78 	bl	800d7a0 <puts>
					printf("CAN_TBMS_READ_REG_BLOCK | CMD: 0x%02X\r\n", rx_msg[1]);
 8005ab0:	7c7b      	ldrb	r3, [r7, #17]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4831      	ldr	r0, [pc, #196]	; (8005b7c <TinyBMS_CAN_ReadRegBlock+0x1f8>)
 8005ab6:	f007 fded 	bl	800d694 <iprintf>
				}
				pl = rx_msg[2];
 8005aba:	7cbb      	ldrb	r3, [r7, #18]
 8005abc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8005ac0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d129      	bne.n	8005b1c <TinyBMS_CAN_ReadRegBlock+0x198>
 8005ac8:	7d7b      	ldrb	r3, [r7, #21]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d122      	bne.n	8005b1c <TinyBMS_CAN_ReadRegBlock+0x198>
					data = ((rx_msg[3] << 8) | rx_msg[4]);
 8005ad6:	7cfb      	ldrb	r3, [r7, #19]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	b21a      	sxth	r2, r3
 8005adc:	7d3b      	ldrb	r3, [r7, #20]
 8005ade:	b21b      	sxth	r3, r3
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	b21b      	sxth	r3, r3
 8005ae4:	873b      	strh	r3, [r7, #56]	; 0x38

					// MSG1 - Addr: 0xABCD - Data: 0x1234
					// MSG2 - Addr: 0xABDD - Data: 0x5678
					printf("MSG%u - ", msg_count);
 8005ae6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005aea:	4619      	mov	r1, r3
 8005aec:	4824      	ldr	r0, [pc, #144]	; (8005b80 <TinyBMS_CAN_ReadRegBlock+0x1fc>)
 8005aee:	f007 fdd1 	bl	800d694 <iprintf>
					printf("Addr: 0x%04X - ", (addr+(sizeof(addr)*(msg_count-1))) );
 8005af2:	883a      	ldrh	r2, [r7, #0]
 8005af4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005af8:	3b01      	subs	r3, #1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	4413      	add	r3, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	4820      	ldr	r0, [pc, #128]	; (8005b84 <TinyBMS_CAN_ReadRegBlock+0x200>)
 8005b02:	f007 fdc7 	bl	800d694 <iprintf>
					printf("Data: 0x%04X\r\n", data);
 8005b06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b08:	4619      	mov	r1, r3
 8005b0a:	481f      	ldr	r0, [pc, #124]	; (8005b88 <TinyBMS_CAN_ReadRegBlock+0x204>)
 8005b0c:	f007 fdc2 	bl	800d694 <iprintf>
					msg_count++;
 8005b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b14:	3301      	adds	r3, #1
 8005b16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8005b1a:	e011      	b.n	8005b40 <TinyBMS_CAN_ReadRegBlock+0x1bc>
				} else {
					printf("Data Corruption\r\n");
 8005b1c:	481b      	ldr	r0, [pc, #108]	; (8005b8c <TinyBMS_CAN_ReadRegBlock+0x208>)
 8005b1e:	f007 fe3f 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 8005b22:	23ff      	movs	r3, #255	; 0xff
 8005b24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 8005b28:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b2c:	e015      	b.n	8005b5a <TinyBMS_CAN_ReadRegBlock+0x1d6>
				}

			} else {
				printf("Data Corruption\r\n");
 8005b2e:	4817      	ldr	r0, [pc, #92]	; (8005b8c <TinyBMS_CAN_ReadRegBlock+0x208>)
 8005b30:	f007 fe36 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8005b34:	23ff      	movs	r3, #255	; 0xff
 8005b36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8005b3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b3e:	e00c      	b.n	8005b5a <TinyBMS_CAN_ReadRegBlock+0x1d6>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005b40:	2100      	movs	r1, #0
 8005b42:	4809      	ldr	r0, [pc, #36]	; (8005b68 <TinyBMS_CAN_ReadRegBlock+0x1e4>)
 8005b44:	f003 ff35 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f47f af69 	bne.w	8005a22 <TinyBMS_CAN_ReadRegBlock+0x9e>
			}
		}
	}
	retval = CMD_SUCCESS;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 8005b56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3740      	adds	r7, #64	; 0x40
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08011cb8 	.word	0x08011cb8
 8005b68:	20000200 	.word	0x20000200
 8005b6c:	20000004 	.word	0x20000004
 8005b70:	08011c30 	.word	0x08011c30
 8005b74:	08011c4c 	.word	0x08011c4c
 8005b78:	080109f0 	.word	0x080109f0
 8005b7c:	08011cd4 	.word	0x08011cd4
 8005b80:	08011cfc 	.word	0x08011cfc
 8005b84:	08011d08 	.word	0x08011d08
 8005b88:	08011d18 	.word	0x08011d18
 8005b8c:	08011ca4 	.word	0x08011ca4

08005b90 <TinyBMS_CAN_WriteRegBlock>:
 *
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated by malloc(size_t size).
 */
uint8_t TinyBMS_CAN_WriteRegBlock(CAN_HandleTypeDef *hcan, uint8_t rl, uint16_t addr, uint16_t data[]) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b094      	sub	sp, #80	; 0x50
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	607b      	str	r3, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	72fb      	strb	r3, [r7, #11]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	813b      	strh	r3, [r7, #8]
	printf("TinyBMS_CAN_WriteRegBlock\r\n");
 8005ba2:	4880      	ldr	r0, [pc, #512]	; (8005da4 <TinyBMS_CAN_WriteRegBlock+0x214>)
 8005ba4:	f007 fdfc 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8005ba8:	23ff      	movs	r3, #255	; 0xff
 8005baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8], tx_msg[8];
	uint8_t addr_MSB = 0, addr_LSB = 0, data_MSB = 0, data_LSB = 0, msg_count = 1;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	/* Request to BMS */
	//Check if register block start address is within bounds
	if((addr < 0x12C) || (addr > 0x18F)) {
 8005bcc:	893b      	ldrh	r3, [r7, #8]
 8005bce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005bd2:	d303      	bcc.n	8005bdc <TinyBMS_CAN_WriteRegBlock+0x4c>
 8005bd4:	893b      	ldrh	r3, [r7, #8]
 8005bd6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005bda:	d305      	bcc.n	8005be8 <TinyBMS_CAN_WriteRegBlock+0x58>
		retval = CMD_FAILURE;
 8005bdc:	23ff      	movs	r3, #255	; 0xff
 8005bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return retval;
 8005be2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005be6:	e0d8      	b.n	8005d9a <TinyBMS_CAN_WriteRegBlock+0x20a>
	}

	//Check if number of registers to write is within bounds
	if((rl <= 0) || (rl > 0x64)) {
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <TinyBMS_CAN_WriteRegBlock+0x64>
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	2b64      	cmp	r3, #100	; 0x64
 8005bf2:	d905      	bls.n	8005c00 <TinyBMS_CAN_WriteRegBlock+0x70>
		retval = CMD_FAILURE;
 8005bf4:	23ff      	movs	r3, #255	; 0xff
 8005bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return retval;
 8005bfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bfe:	e0cc      	b.n	8005d9a <TinyBMS_CAN_WriteRegBlock+0x20a>
	}

	//Starting address of Register Block
	addr_MSB = ((addr >> 8) & 0xFF);
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	addr_LSB = (addr & 0xFF);
 8005c0a:	893b      	ldrh	r3, [r7, #8]
 8005c0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	uint8_t tx_len = 8;
 8005c10:	2308      	movs	r3, #8
 8005c12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	for(uint32_t i = 0; i < rl; i++) {
 8005c16:	2300      	movs	r3, #0
 8005c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1a:	e036      	b.n	8005c8a <TinyBMS_CAN_WriteRegBlock+0xfa>
		data_MSB = ((data[i] >> 8) & 0xFF);
 8005c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		data_LSB = (data[i] & 0xFF);
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		tx_msg[0] = CAN_TBMS_WRITE_REG_BLOCK;
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	743b      	strb	r3, [r7, #16]
		tx_msg[1] = addr_MSB;
 8005c40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005c44:	747b      	strb	r3, [r7, #17]
		tx_msg[2] = addr_LSB;
 8005c46:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005c4a:	74bb      	strb	r3, [r7, #18]
		tx_msg[3] = 0x00;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	74fb      	strb	r3, [r7, #19]
		tx_msg[4] = rl;
 8005c50:	7afb      	ldrb	r3, [r7, #11]
 8005c52:	753b      	strb	r3, [r7, #20]
		tx_msg[5] = data_MSB;
 8005c54:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005c58:	757b      	strb	r3, [r7, #21]
		tx_msg[6] = data_LSB;
 8005c5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c5e:	75bb      	strb	r3, [r7, #22]
		tx_msg[7] = (msg_count-1);
 8005c60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	75fb      	strb	r3, [r7, #23]
		CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005c6a:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005c6e:	f107 0310 	add.w	r3, r7, #16
 8005c72:	4619      	mov	r1, r3
 8005c74:	2000      	movs	r0, #0
 8005c76:	f002 fe45 	bl	8008904 <CAN1_Tx>

		//Message counter range: 1 to n vs Byte 8: 0 to n-1
		msg_count++;
 8005c7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for(uint32_t i = 0; i < rl; i++) {
 8005c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c86:	3301      	adds	r3, #1
 8005c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8a:	7afb      	ldrb	r3, [r7, #11]
 8005c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d3c4      	bcc.n	8005c1c <TinyBMS_CAN_WriteRegBlock+0x8c>
	}

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005c92:	e076      	b.n	8005d82 <TinyBMS_CAN_WriteRegBlock+0x1f2>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8005c94:	f107 0318 	add.w	r3, r7, #24
 8005c98:	f107 0220 	add.w	r2, r7, #32
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4842      	ldr	r0, [pc, #264]	; (8005da8 <TinyBMS_CAN_WriteRegBlock+0x218>)
 8005ca0:	f003 fd75 	bl	800978e <HAL_CAN_GetRxMessage>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <TinyBMS_CAN_WriteRegBlock+0x11e>
			Error_Handler();
 8005caa:	f002 ffa3 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005cae:	f240 4103 	movw	r1, #1027	; 0x403
 8005cb2:	483d      	ldr	r0, [pc, #244]	; (8005da8 <TinyBMS_CAN_WriteRegBlock+0x218>)
 8005cb4:	f003 fea5 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <TinyBMS_CAN_WriteRegBlock+0x132>
			Error_Handler();
 8005cbe:	f002 ff99 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005cc2:	6a3a      	ldr	r2, [r7, #32]
 8005cc4:	4b39      	ldr	r3, [pc, #228]	; (8005dac <TinyBMS_CAN_WriteRegBlock+0x21c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d15a      	bne.n	8005d82 <TinyBMS_CAN_WriteRegBlock+0x1f2>
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d157      	bne.n	8005d82 <TinyBMS_CAN_WriteRegBlock+0x1f2>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8005cd2:	7e3b      	ldrb	r3, [r7, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d117      	bne.n	8005d08 <TinyBMS_CAN_WriteRegBlock+0x178>
				printf("Response from BMS [Error]\r\n");
 8005cd8:	4835      	ldr	r0, [pc, #212]	; (8005db0 <TinyBMS_CAN_WriteRegBlock+0x220>)
 8005cda:	f007 fd61 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8005cde:	7e7b      	ldrb	r3, [r7, #25]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	7ebb      	ldrb	r3, [r7, #26]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4833      	ldr	r0, [pc, #204]	; (8005db4 <TinyBMS_CAN_WriteRegBlock+0x224>)
 8005ce8:	f007 fcd4 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8005cec:	7ebb      	ldrb	r3, [r7, #26]
 8005cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				reportBMSError(error);
 8005cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fde2 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8005cfc:	23ff      	movs	r3, #255	; 0xff
 8005cfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8005d02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d06:	e048      	b.n	8005d9a <TinyBMS_CAN_WriteRegBlock+0x20a>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_WRITE_REG_BLOCK)) {
 8005d08:	7e3b      	ldrb	r3, [r7, #24]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d130      	bne.n	8005d70 <TinyBMS_CAN_WriteRegBlock+0x1e0>
 8005d0e:	7e7b      	ldrb	r3, [r7, #25]
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d12d      	bne.n	8005d70 <TinyBMS_CAN_WriteRegBlock+0x1e0>
				printf("Response from BMS [OK]\r\n");
 8005d14:	4828      	ldr	r0, [pc, #160]	; (8005db8 <TinyBMS_CAN_WriteRegBlock+0x228>)
 8005d16:	f007 fd43 	bl	800d7a0 <puts>
				printf("CAN_TBMS_WRITE_REG_BLOCK | CMD: 0x%02X\r\n", rx_msg[1]);
 8005d1a:	7e7b      	ldrb	r3, [r7, #25]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4827      	ldr	r0, [pc, #156]	; (8005dbc <TinyBMS_CAN_WriteRegBlock+0x22c>)
 8005d20:	f007 fcb8 	bl	800d694 <iprintf>

				//If Byte 5 is 0x00, Byte 6's rl matches input rl, and Bytes[3:4]'s address matches input address
				uint16_t addr_check = ((rx_msg[2] << 8) | rx_msg[3]);
 8005d24:	7ebb      	ldrb	r3, [r7, #26]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	b21a      	sxth	r2, r3
 8005d2a:	7efb      	ldrb	r3, [r7, #27]
 8005d2c:	b21b      	sxth	r3, r3
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b21b      	sxth	r3, r3
 8005d32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				if((rx_msg[4] == 0x00) && (rx_msg[5] == rl) && (addr_check == addr)) {
 8005d36:	7f3b      	ldrb	r3, [r7, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d110      	bne.n	8005d5e <TinyBMS_CAN_WriteRegBlock+0x1ce>
 8005d3c:	7f7b      	ldrb	r3, [r7, #29]
 8005d3e:	7afa      	ldrb	r2, [r7, #11]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d10c      	bne.n	8005d5e <TinyBMS_CAN_WriteRegBlock+0x1ce>
 8005d44:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005d48:	893b      	ldrh	r3, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d107      	bne.n	8005d5e <TinyBMS_CAN_WriteRegBlock+0x1ce>
					printf("Success! Wrote a block of %u registers starting at address 0x%04X\r\n", rl, addr_check);
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005d54:	4619      	mov	r1, r3
 8005d56:	481a      	ldr	r0, [pc, #104]	; (8005dc0 <TinyBMS_CAN_WriteRegBlock+0x230>)
 8005d58:	f007 fc9c 	bl	800d694 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_WRITE_REG_BLOCK)) {
 8005d5c:	e011      	b.n	8005d82 <TinyBMS_CAN_WriteRegBlock+0x1f2>
				} else {
					printf("Data Corruption\r\n");
 8005d5e:	4819      	ldr	r0, [pc, #100]	; (8005dc4 <TinyBMS_CAN_WriteRegBlock+0x234>)
 8005d60:	f007 fd1e 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 8005d64:	23ff      	movs	r3, #255	; 0xff
 8005d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					return retval;
 8005d6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d6e:	e014      	b.n	8005d9a <TinyBMS_CAN_WriteRegBlock+0x20a>
				}

			} else {
				printf("Data Corruption\r\n");
 8005d70:	4814      	ldr	r0, [pc, #80]	; (8005dc4 <TinyBMS_CAN_WriteRegBlock+0x234>)
 8005d72:	f007 fd15 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8005d76:	23ff      	movs	r3, #255	; 0xff
 8005d78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8005d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d80:	e00b      	b.n	8005d9a <TinyBMS_CAN_WriteRegBlock+0x20a>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005d82:	2100      	movs	r1, #0
 8005d84:	4808      	ldr	r0, [pc, #32]	; (8005da8 <TinyBMS_CAN_WriteRegBlock+0x218>)
 8005d86:	f003 fe14 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d181      	bne.n	8005c94 <TinyBMS_CAN_WriteRegBlock+0x104>
			}
		}
	}
	retval = CMD_SUCCESS;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return retval;
 8005d96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3750      	adds	r7, #80	; 0x50
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	08011d28 	.word	0x08011d28
 8005da8:	20000200 	.word	0x20000200
 8005dac:	20000004 	.word	0x20000004
 8005db0:	08011c30 	.word	0x08011c30
 8005db4:	08011c4c 	.word	0x08011c4c
 8005db8:	080109f0 	.word	0x080109f0
 8005dbc:	08011d44 	.word	0x08011d44
 8005dc0:	08011d70 	.word	0x08011d70
 8005dc4:	08011ca4 	.word	0x08011ca4

08005dc8 <TinyBMS_CAN_ReadNewestEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_CAN_ReadNewestEvents(CAN_HandleTypeDef *hcan) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b092      	sub	sp, #72	; 0x48
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadNewestEvents\r\n");
 8005dd0:	486c      	ldr	r0, [pc, #432]	; (8005f84 <TinyBMS_CAN_ReadNewestEvents+0x1bc>)
 8005dd2:	f007 fce5 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8005dd6:	23ff      	movs	r3, #255	; 0xff
 8005dd8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0, msg_count = 1, IDn = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint32_t BTSP = 0, TSP = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	643b      	str	r3, [r7, #64]	; 0x40
 8005df2:	2300      	movs	r3, #0
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_NEWEST_EVENTS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005df6:	4a64      	ldr	r2, [pc, #400]	; (8005f88 <TinyBMS_CAN_ReadNewestEvents+0x1c0>)
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e00:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005e0a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	4619      	mov	r1, r3
 8005e14:	2000      	movs	r0, #0
 8005e16:	f002 fd75 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005e1a:	e0a2      	b.n	8005f62 <TinyBMS_CAN_ReadNewestEvents+0x19a>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8005e1c:	f107 0314 	add.w	r3, r7, #20
 8005e20:	f107 021c 	add.w	r2, r7, #28
 8005e24:	2100      	movs	r1, #0
 8005e26:	4859      	ldr	r0, [pc, #356]	; (8005f8c <TinyBMS_CAN_ReadNewestEvents+0x1c4>)
 8005e28:	f003 fcb1 	bl	800978e <HAL_CAN_GetRxMessage>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <TinyBMS_CAN_ReadNewestEvents+0x6e>
			Error_Handler();
 8005e32:	f002 fedf 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005e36:	f240 4103 	movw	r1, #1027	; 0x403
 8005e3a:	4854      	ldr	r0, [pc, #336]	; (8005f8c <TinyBMS_CAN_ReadNewestEvents+0x1c4>)
 8005e3c:	f003 fde1 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <TinyBMS_CAN_ReadNewestEvents+0x82>
			Error_Handler();
 8005e46:	f002 fed5 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	4b50      	ldr	r3, [pc, #320]	; (8005f90 <TinyBMS_CAN_ReadNewestEvents+0x1c8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	f040 8086 	bne.w	8005f62 <TinyBMS_CAN_ReadNewestEvents+0x19a>
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 8082 	bne.w	8005f62 <TinyBMS_CAN_ReadNewestEvents+0x19a>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8005e5e:	7d3b      	ldrb	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d117      	bne.n	8005e94 <TinyBMS_CAN_ReadNewestEvents+0xcc>
				printf("Response from BMS [Error]\r\n");
 8005e64:	484b      	ldr	r0, [pc, #300]	; (8005f94 <TinyBMS_CAN_ReadNewestEvents+0x1cc>)
 8005e66:	f007 fc9b 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8005e6a:	7d7b      	ldrb	r3, [r7, #21]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	7dbb      	ldrb	r3, [r7, #22]
 8005e70:	461a      	mov	r2, r3
 8005e72:	4849      	ldr	r0, [pc, #292]	; (8005f98 <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8005e74:	f007 fc0e 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8005e78:	7dbb      	ldrb	r3, [r7, #22]
 8005e7a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				reportBMSError(error);
 8005e7e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fd1c 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8005e88:	23ff      	movs	r3, #255	; 0xff
 8005e8a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 8005e8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005e92:	e073      	b.n	8005f7c <TinyBMS_CAN_ReadNewestEvents+0x1b4>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_NEWEST_EVENTS)) {
 8005e94:	7d3b      	ldrb	r3, [r7, #20]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d15a      	bne.n	8005f50 <TinyBMS_CAN_ReadNewestEvents+0x188>
 8005e9a:	7d7b      	ldrb	r3, [r7, #21]
 8005e9c:	2b11      	cmp	r3, #17
 8005e9e:	d157      	bne.n	8005f50 <TinyBMS_CAN_ReadNewestEvents+0x188>
				if(msg_count == 1) {
 8005ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d107      	bne.n	8005eb8 <TinyBMS_CAN_ReadNewestEvents+0xf0>
					printf("Response from BMS [OK]\r\n");
 8005ea8:	483c      	ldr	r0, [pc, #240]	; (8005f9c <TinyBMS_CAN_ReadNewestEvents+0x1d4>)
 8005eaa:	f007 fc79 	bl	800d7a0 <puts>
					printf("CAN_TBMS_READ_NEWEST_EVENTS | CMD: 0x%02X\r\n", rx_msg[1]);
 8005eae:	7d7b      	ldrb	r3, [r7, #21]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	483b      	ldr	r0, [pc, #236]	; (8005fa0 <TinyBMS_CAN_ReadNewestEvents+0x1d8>)
 8005eb4:	f007 fbee 	bl	800d694 <iprintf>
				}
				pl = rx_msg[2];
 8005eb8:	7dbb      	ldrb	r3, [r7, #22]
 8005eba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				//MSG1 - TinyBMS Timestamp
				//If payload is 4 Bytes and Byte 8 is 0x00
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 8005ebe:	7efb      	ldrb	r3, [r7, #27]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d118      	bne.n	8005ef6 <TinyBMS_CAN_ReadNewestEvents+0x12e>
 8005ec4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d114      	bne.n	8005ef6 <TinyBMS_CAN_ReadNewestEvents+0x12e>
					BTSP = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 8005ecc:	7ebb      	ldrb	r3, [r7, #26]
 8005ece:	061a      	lsls	r2, r3, #24
 8005ed0:	7e7b      	ldrb	r3, [r7, #25]
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	7e3b      	ldrb	r3, [r7, #24]
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	4313      	orrs	r3, r2
 8005edc:	7dfa      	ldrb	r2, [r7, #23]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	643b      	str	r3, [r7, #64]	; 0x40
					printf("TinyBMS Timestamp (s): [%lu]\r\n", BTSP);
 8005ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ee4:	482f      	ldr	r0, [pc, #188]	; (8005fa4 <TinyBMS_CAN_ReadNewestEvents+0x1dc>)
 8005ee6:	f007 fbd5 	bl	800d694 <iprintf>
					msg_count++;
 8005eea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005eee:	3301      	adds	r3, #1
 8005ef0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005ef4:	e02b      	b.n	8005f4e <TinyBMS_CAN_ReadNewestEvents+0x186>
				//MSG2..n - Newest Event ID + Timestamp
				//If payload is 4 Bytes and Byte 8 is 1..n-1
				} else if((rx_msg[7] == (msg_count-1)) && (pl == 4)) {
 8005ef6:	7efb      	ldrb	r3, [r7, #27]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005efe:	3b01      	subs	r3, #1
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d11b      	bne.n	8005f3c <TinyBMS_CAN_ReadNewestEvents+0x174>
 8005f04:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d117      	bne.n	8005f3c <TinyBMS_CAN_ReadNewestEvents+0x174>
					TSP = ((0x00 << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 8005f0c:	7e7b      	ldrb	r3, [r7, #25]
 8005f0e:	041a      	lsls	r2, r3, #16
 8005f10:	7e3b      	ldrb	r3, [r7, #24]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	4313      	orrs	r3, r2
 8005f16:	7dfa      	ldrb	r2, [r7, #23]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
					IDn = rx_msg[6];
 8005f1c:	7ebb      	ldrb	r3, [r7, #26]
 8005f1e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					printf("Event - ID: 0x%02X | Timestamp (s): [%lu]\r\n", IDn, TSP);
 8005f22:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f28:	4619      	mov	r1, r3
 8005f2a:	481f      	ldr	r0, [pc, #124]	; (8005fa8 <TinyBMS_CAN_ReadNewestEvents+0x1e0>)
 8005f2c:	f007 fbb2 	bl	800d694 <iprintf>
					msg_count++;
 8005f30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f34:	3301      	adds	r3, #1
 8005f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005f3a:	e008      	b.n	8005f4e <TinyBMS_CAN_ReadNewestEvents+0x186>
				} else {
					printf("Data Corruption\r\n");
 8005f3c:	481b      	ldr	r0, [pc, #108]	; (8005fac <TinyBMS_CAN_ReadNewestEvents+0x1e4>)
 8005f3e:	f007 fc2f 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 8005f42:	23ff      	movs	r3, #255	; 0xff
 8005f44:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					return retval;
 8005f48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f4c:	e016      	b.n	8005f7c <TinyBMS_CAN_ReadNewestEvents+0x1b4>
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 8005f4e:	e008      	b.n	8005f62 <TinyBMS_CAN_ReadNewestEvents+0x19a>
				}

			} else {
				printf("Data Corruption\r\n");
 8005f50:	4816      	ldr	r0, [pc, #88]	; (8005fac <TinyBMS_CAN_ReadNewestEvents+0x1e4>)
 8005f52:	f007 fc25 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8005f56:	23ff      	movs	r3, #255	; 0xff
 8005f58:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 8005f5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f60:	e00c      	b.n	8005f7c <TinyBMS_CAN_ReadNewestEvents+0x1b4>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005f62:	2100      	movs	r1, #0
 8005f64:	4809      	ldr	r0, [pc, #36]	; (8005f8c <TinyBMS_CAN_ReadNewestEvents+0x1c4>)
 8005f66:	f003 fd24 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f47f af55 	bne.w	8005e1c <TinyBMS_CAN_ReadNewestEvents+0x54>
			}
		}
	}
	retval = CMD_SUCCESS;
 8005f72:	2300      	movs	r3, #0
 8005f74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	return retval;
 8005f78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3748      	adds	r7, #72	; 0x48
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	08011db4 	.word	0x08011db4
 8005f88:	08011e4c 	.word	0x08011e4c
 8005f8c:	20000200 	.word	0x20000200
 8005f90:	20000004 	.word	0x20000004
 8005f94:	08011c30 	.word	0x08011c30
 8005f98:	08011c4c 	.word	0x08011c4c
 8005f9c:	080109f0 	.word	0x080109f0
 8005fa0:	08011dd4 	.word	0x08011dd4
 8005fa4:	08011e00 	.word	0x08011e00
 8005fa8:	08011e20 	.word	0x08011e20
 8005fac:	08011ca4 	.word	0x08011ca4

08005fb0 <TinyBMS_CAN_ReadAllEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_CAN_ReadAllEvents(CAN_HandleTypeDef *hcan) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b092      	sub	sp, #72	; 0x48
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadAllEvents\r\n");
 8005fb8:	486c      	ldr	r0, [pc, #432]	; (800616c <TinyBMS_CAN_ReadAllEvents+0x1bc>)
 8005fba:	f007 fbf1 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8005fbe:	23ff      	movs	r3, #255	; 0xff
 8005fc0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0, msg_count = 1, IDn = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint32_t BTSP = 0, TSP = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fda:	2300      	movs	r3, #0
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_ALL_EVENTS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005fde:	4a64      	ldr	r2, [pc, #400]	; (8006170 <TinyBMS_CAN_ReadAllEvents+0x1c0>)
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fe8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005ff2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005ff6:	f107 030c 	add.w	r3, r7, #12
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f002 fc81 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006002:	e0a2      	b.n	800614a <TinyBMS_CAN_ReadAllEvents+0x19a>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8006004:	f107 0314 	add.w	r3, r7, #20
 8006008:	f107 021c 	add.w	r2, r7, #28
 800600c:	2100      	movs	r1, #0
 800600e:	4859      	ldr	r0, [pc, #356]	; (8006174 <TinyBMS_CAN_ReadAllEvents+0x1c4>)
 8006010:	f003 fbbd 	bl	800978e <HAL_CAN_GetRxMessage>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <TinyBMS_CAN_ReadAllEvents+0x6e>
			Error_Handler();
 800601a:	f002 fdeb 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800601e:	f240 4103 	movw	r1, #1027	; 0x403
 8006022:	4854      	ldr	r0, [pc, #336]	; (8006174 <TinyBMS_CAN_ReadAllEvents+0x1c4>)
 8006024:	f003 fced 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <TinyBMS_CAN_ReadAllEvents+0x82>
			Error_Handler();
 800602e:	f002 fde1 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	4b50      	ldr	r3, [pc, #320]	; (8006178 <TinyBMS_CAN_ReadAllEvents+0x1c8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	f040 8086 	bne.w	800614a <TinyBMS_CAN_ReadAllEvents+0x19a>
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	2b00      	cmp	r3, #0
 8006042:	f040 8082 	bne.w	800614a <TinyBMS_CAN_ReadAllEvents+0x19a>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8006046:	7d3b      	ldrb	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d117      	bne.n	800607c <TinyBMS_CAN_ReadAllEvents+0xcc>
				printf("Response from BMS [Error]\r\n");
 800604c:	484b      	ldr	r0, [pc, #300]	; (800617c <TinyBMS_CAN_ReadAllEvents+0x1cc>)
 800604e:	f007 fba7 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8006052:	7d7b      	ldrb	r3, [r7, #21]
 8006054:	4619      	mov	r1, r3
 8006056:	7dbb      	ldrb	r3, [r7, #22]
 8006058:	461a      	mov	r2, r3
 800605a:	4849      	ldr	r0, [pc, #292]	; (8006180 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 800605c:	f007 fb1a 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8006060:	7dbb      	ldrb	r3, [r7, #22]
 8006062:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				reportBMSError(error);
 8006066:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800606a:	4618      	mov	r0, r3
 800606c:	f001 fc28 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8006070:	23ff      	movs	r3, #255	; 0xff
 8006072:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 8006076:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800607a:	e073      	b.n	8006164 <TinyBMS_CAN_ReadAllEvents+0x1b4>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ALL_EVENTS)) {
 800607c:	7d3b      	ldrb	r3, [r7, #20]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d15a      	bne.n	8006138 <TinyBMS_CAN_ReadAllEvents+0x188>
 8006082:	7d7b      	ldrb	r3, [r7, #21]
 8006084:	2b12      	cmp	r3, #18
 8006086:	d157      	bne.n	8006138 <TinyBMS_CAN_ReadAllEvents+0x188>
				if(msg_count == 1) {
 8006088:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800608c:	2b01      	cmp	r3, #1
 800608e:	d107      	bne.n	80060a0 <TinyBMS_CAN_ReadAllEvents+0xf0>
					printf("Response from BMS [OK]\r\n");
 8006090:	483c      	ldr	r0, [pc, #240]	; (8006184 <TinyBMS_CAN_ReadAllEvents+0x1d4>)
 8006092:	f007 fb85 	bl	800d7a0 <puts>
					printf("CAN_TBMS_READ_ALL_EVENTS | CMD: 0x%02X\r\n", rx_msg[1]);
 8006096:	7d7b      	ldrb	r3, [r7, #21]
 8006098:	4619      	mov	r1, r3
 800609a:	483b      	ldr	r0, [pc, #236]	; (8006188 <TinyBMS_CAN_ReadAllEvents+0x1d8>)
 800609c:	f007 fafa 	bl	800d694 <iprintf>
				}
				pl = rx_msg[2];
 80060a0:	7dbb      	ldrb	r3, [r7, #22]
 80060a2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				//MSG1 - TinyBMS Timestamp
				//If payload is 4 Bytes and Byte 8 is 0x00
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 80060a6:	7efb      	ldrb	r3, [r7, #27]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d118      	bne.n	80060de <TinyBMS_CAN_ReadAllEvents+0x12e>
 80060ac:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d114      	bne.n	80060de <TinyBMS_CAN_ReadAllEvents+0x12e>
					BTSP = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 80060b4:	7ebb      	ldrb	r3, [r7, #26]
 80060b6:	061a      	lsls	r2, r3, #24
 80060b8:	7e7b      	ldrb	r3, [r7, #25]
 80060ba:	041b      	lsls	r3, r3, #16
 80060bc:	431a      	orrs	r2, r3
 80060be:	7e3b      	ldrb	r3, [r7, #24]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	4313      	orrs	r3, r2
 80060c4:	7dfa      	ldrb	r2, [r7, #23]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	643b      	str	r3, [r7, #64]	; 0x40
					printf("TinyBMS Timestamp (s): [%lu]\r\n", BTSP);
 80060ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060cc:	482f      	ldr	r0, [pc, #188]	; (800618c <TinyBMS_CAN_ReadAllEvents+0x1dc>)
 80060ce:	f007 fae1 	bl	800d694 <iprintf>
					msg_count++;
 80060d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060d6:	3301      	adds	r3, #1
 80060d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80060dc:	e02b      	b.n	8006136 <TinyBMS_CAN_ReadAllEvents+0x186>
				//MSG2..n - Event ID + Timestamp
				//If payload is 4 Bytes and Byte 8 is 1..n-1
				} else if((rx_msg[7] == (msg_count-1)) && (pl == 4)) {
 80060de:	7efb      	ldrb	r3, [r7, #27]
 80060e0:	461a      	mov	r2, r3
 80060e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060e6:	3b01      	subs	r3, #1
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d11b      	bne.n	8006124 <TinyBMS_CAN_ReadAllEvents+0x174>
 80060ec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d117      	bne.n	8006124 <TinyBMS_CAN_ReadAllEvents+0x174>
					TSP = ((0x00 << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 80060f4:	7e7b      	ldrb	r3, [r7, #25]
 80060f6:	041a      	lsls	r2, r3, #16
 80060f8:	7e3b      	ldrb	r3, [r7, #24]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	4313      	orrs	r3, r2
 80060fe:	7dfa      	ldrb	r2, [r7, #23]
 8006100:	4313      	orrs	r3, r2
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
					IDn = rx_msg[6];
 8006104:	7ebb      	ldrb	r3, [r7, #26]
 8006106:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					printf("Event - ID: 0x%02X | Timestamp (s): [%lu]\r\n", IDn, TSP);
 800610a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800610e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006110:	4619      	mov	r1, r3
 8006112:	481f      	ldr	r0, [pc, #124]	; (8006190 <TinyBMS_CAN_ReadAllEvents+0x1e0>)
 8006114:	f007 fabe 	bl	800d694 <iprintf>
					msg_count++;
 8006118:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800611c:	3301      	adds	r3, #1
 800611e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006122:	e008      	b.n	8006136 <TinyBMS_CAN_ReadAllEvents+0x186>
				} else {
					printf("Data Corruption\r\n");
 8006124:	481b      	ldr	r0, [pc, #108]	; (8006194 <TinyBMS_CAN_ReadAllEvents+0x1e4>)
 8006126:	f007 fb3b 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 800612a:	23ff      	movs	r3, #255	; 0xff
 800612c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					return retval;
 8006130:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006134:	e016      	b.n	8006164 <TinyBMS_CAN_ReadAllEvents+0x1b4>
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 8006136:	e008      	b.n	800614a <TinyBMS_CAN_ReadAllEvents+0x19a>
				}

			} else {
				printf("Data Corruption\r\n");
 8006138:	4816      	ldr	r0, [pc, #88]	; (8006194 <TinyBMS_CAN_ReadAllEvents+0x1e4>)
 800613a:	f007 fb31 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800613e:	23ff      	movs	r3, #255	; 0xff
 8006140:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 8006144:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006148:	e00c      	b.n	8006164 <TinyBMS_CAN_ReadAllEvents+0x1b4>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800614a:	2100      	movs	r1, #0
 800614c:	4809      	ldr	r0, [pc, #36]	; (8006174 <TinyBMS_CAN_ReadAllEvents+0x1c4>)
 800614e:	f003 fc30 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	f47f af55 	bne.w	8006004 <TinyBMS_CAN_ReadAllEvents+0x54>
			}
		}
	}
	retval = CMD_SUCCESS;
 800615a:	2300      	movs	r3, #0
 800615c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	return retval;
 8006160:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
}
 8006164:	4618      	mov	r0, r3
 8006166:	3748      	adds	r7, #72	; 0x48
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08011e54 	.word	0x08011e54
 8006170:	08011e9c 	.word	0x08011e9c
 8006174:	20000200 	.word	0x20000200
 8006178:	20000004 	.word	0x20000004
 800617c:	08011c30 	.word	0x08011c30
 8006180:	08011c4c 	.word	0x08011c4c
 8006184:	080109f0 	.word	0x080109f0
 8006188:	08011e70 	.word	0x08011e70
 800618c:	08011e00 	.word	0x08011e00
 8006190:	08011e20 	.word	0x08011e20
 8006194:	08011ca4 	.word	0x08011ca4

08006198 <TinyBMS_CAN_ReadBatteryPackVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_CAN_ReadBatteryPackVoltage(CAN_HandleTypeDef *hcan) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b092      	sub	sp, #72	; 0x48
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackVoltage\r\n");
 80061a0:	4850      	ldr	r0, [pc, #320]	; (80062e4 <TinyBMS_CAN_ReadBatteryPackVoltage+0x14c>)
 80061a2:	f007 fafd 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80061a6:	23ff      	movs	r3, #255	; 0xff
 80061a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_PACK_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80061ac:	4a4e      	ldr	r2, [pc, #312]	; (80062e8 <TinyBMS_CAN_ReadBatteryPackVoltage+0x150>)
 80061ae:	f107 030c 	add.w	r3, r7, #12
 80061b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061b6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80061c0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80061c4:	f107 030c 	add.w	r3, r7, #12
 80061c8:	4619      	mov	r1, r3
 80061ca:	2000      	movs	r0, #0
 80061cc:	f002 fb9a 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80061d0:	e073      	b.n	80062ba <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80061d2:	f107 0314 	add.w	r3, r7, #20
 80061d6:	f107 021c 	add.w	r2, r7, #28
 80061da:	2100      	movs	r1, #0
 80061dc:	4843      	ldr	r0, [pc, #268]	; (80062ec <TinyBMS_CAN_ReadBatteryPackVoltage+0x154>)
 80061de:	f003 fad6 	bl	800978e <HAL_CAN_GetRxMessage>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <TinyBMS_CAN_ReadBatteryPackVoltage+0x54>
			Error_Handler();
 80061e8:	f002 fd04 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80061ec:	f240 4103 	movw	r1, #1027	; 0x403
 80061f0:	483e      	ldr	r0, [pc, #248]	; (80062ec <TinyBMS_CAN_ReadBatteryPackVoltage+0x154>)
 80061f2:	f003 fc06 	bl	8009a02 <HAL_CAN_ActivateNotification>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <TinyBMS_CAN_ReadBatteryPackVoltage+0x68>
			Error_Handler();
 80061fc:	f002 fcfa 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	4b3b      	ldr	r3, [pc, #236]	; (80062f0 <TinyBMS_CAN_ReadBatteryPackVoltage+0x158>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d157      	bne.n	80062ba <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	2b00      	cmp	r3, #0
 800620e:	d154      	bne.n	80062ba <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8006210:	7d3b      	ldrb	r3, [r7, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11b      	bne.n	800624e <TinyBMS_CAN_ReadBatteryPackVoltage+0xb6>
				printf("Response from BMS [Error]\r\n");
 8006216:	4837      	ldr	r0, [pc, #220]	; (80062f4 <TinyBMS_CAN_ReadBatteryPackVoltage+0x15c>)
 8006218:	f007 fac2 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 800621c:	7d7b      	ldrb	r3, [r7, #21]
 800621e:	4619      	mov	r1, r3
 8006220:	7dbb      	ldrb	r3, [r7, #22]
 8006222:	461a      	mov	r2, r3
 8006224:	4834      	ldr	r0, [pc, #208]	; (80062f8 <TinyBMS_CAN_ReadBatteryPackVoltage+0x160>)
 8006226:	f007 fa35 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 800622a:	7dbb      	ldrb	r3, [r7, #22]
 800622c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 8006230:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fb43 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 800623a:	23ff      	movs	r3, #255	; 0xff
 800623c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8006240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	e045      	b.n	80062da <TinyBMS_CAN_ReadBatteryPackVoltage+0x142>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_VOLTAGE)) {
 800624e:	7d3b      	ldrb	r3, [r7, #20]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d125      	bne.n	80062a0 <TinyBMS_CAN_ReadBatteryPackVoltage+0x108>
 8006254:	7d7b      	ldrb	r3, [r7, #21]
 8006256:	2b14      	cmp	r3, #20
 8006258:	d122      	bne.n	80062a0 <TinyBMS_CAN_ReadBatteryPackVoltage+0x108>
				printf("Response from BMS [OK]\r\n");
 800625a:	4828      	ldr	r0, [pc, #160]	; (80062fc <TinyBMS_CAN_ReadBatteryPackVoltage+0x164>)
 800625c:	f007 faa0 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_PACK_VOLTAGE | CMD: 0x%02X\r\n", rx_msg[1]);
 8006260:	7d7b      	ldrb	r3, [r7, #21]
 8006262:	4619      	mov	r1, r3
 8006264:	4826      	ldr	r0, [pc, #152]	; (8006300 <TinyBMS_CAN_ReadBatteryPackVoltage+0x168>)
 8006266:	f007 fa15 	bl	800d694 <iprintf>
				uint32_t data = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 800626a:	7e7b      	ldrb	r3, [r7, #25]
 800626c:	061a      	lsls	r2, r3, #24
 800626e:	7e3b      	ldrb	r3, [r7, #24]
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	431a      	orrs	r2, r3
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	4313      	orrs	r3, r2
 800627a:	7dba      	ldrb	r2, [r7, #22]
 800627c:	4313      	orrs	r3, r2
 800627e:	643b      	str	r3, [r7, #64]	; 0x40
				float packVoltage = data;
 8006280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 800628e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006290:	f7fa f97a 	bl	8000588 <__aeabi_f2d>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	481a      	ldr	r0, [pc, #104]	; (8006304 <TinyBMS_CAN_ReadBatteryPackVoltage+0x16c>)
 800629a:	f007 f9fb 	bl	800d694 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_VOLTAGE)) {
 800629e:	e00c      	b.n	80062ba <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>

			} else {
				printf("Data Corruption\r\n");
 80062a0:	4819      	ldr	r0, [pc, #100]	; (8006308 <TinyBMS_CAN_ReadBatteryPackVoltage+0x170>)
 80062a2:	f007 fa7d 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80062a6:	23ff      	movs	r3, #255	; 0xff
 80062a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 80062ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b8:	e00f      	b.n	80062da <TinyBMS_CAN_ReadBatteryPackVoltage+0x142>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80062ba:	2100      	movs	r1, #0
 80062bc:	480b      	ldr	r0, [pc, #44]	; (80062ec <TinyBMS_CAN_ReadBatteryPackVoltage+0x154>)
 80062be:	f003 fb78 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d184      	bne.n	80061d2 <TinyBMS_CAN_ReadBatteryPackVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 80062c8:	2300      	movs	r3, #0
 80062ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return retval;
 80062ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80062da:	eeb0 0a67 	vmov.f32	s0, s15
 80062de:	3748      	adds	r7, #72	; 0x48
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	08011ea4 	.word	0x08011ea4
 80062e8:	08011f20 	.word	0x08011f20
 80062ec:	20000200 	.word	0x20000200
 80062f0:	20000004 	.word	0x20000004
 80062f4:	08011c30 	.word	0x08011c30
 80062f8:	08011c4c 	.word	0x08011c4c
 80062fc:	080109f0 	.word	0x080109f0
 8006300:	08011ec8 	.word	0x08011ec8
 8006304:	08011ef4 	.word	0x08011ef4
 8006308:	08011ca4 	.word	0x08011ca4

0800630c <TinyBMS_CAN_ReadBatteryPackCurrent>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_CAN_ReadBatteryPackCurrent(CAN_HandleTypeDef *hcan) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b092      	sub	sp, #72	; 0x48
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackCurrent\r\n");
 8006314:	4850      	ldr	r0, [pc, #320]	; (8006458 <TinyBMS_CAN_ReadBatteryPackCurrent+0x14c>)
 8006316:	f007 fa43 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 800631a:	23ff      	movs	r3, #255	; 0xff
 800631c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_PACK_CURRENT, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006320:	4a4e      	ldr	r2, [pc, #312]	; (800645c <TinyBMS_CAN_ReadBatteryPackCurrent+0x150>)
 8006322:	f107 030c 	add.w	r3, r7, #12
 8006326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800632a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006334:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	4619      	mov	r1, r3
 800633e:	2000      	movs	r0, #0
 8006340:	f002 fae0 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006344:	e073      	b.n	800642e <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8006346:	f107 0314 	add.w	r3, r7, #20
 800634a:	f107 021c 	add.w	r2, r7, #28
 800634e:	2100      	movs	r1, #0
 8006350:	4843      	ldr	r0, [pc, #268]	; (8006460 <TinyBMS_CAN_ReadBatteryPackCurrent+0x154>)
 8006352:	f003 fa1c 	bl	800978e <HAL_CAN_GetRxMessage>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <TinyBMS_CAN_ReadBatteryPackCurrent+0x54>
			Error_Handler();
 800635c:	f002 fc4a 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006360:	f240 4103 	movw	r1, #1027	; 0x403
 8006364:	483e      	ldr	r0, [pc, #248]	; (8006460 <TinyBMS_CAN_ReadBatteryPackCurrent+0x154>)
 8006366:	f003 fb4c 	bl	8009a02 <HAL_CAN_ActivateNotification>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <TinyBMS_CAN_ReadBatteryPackCurrent+0x68>
			Error_Handler();
 8006370:	f002 fc40 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	4b3b      	ldr	r3, [pc, #236]	; (8006464 <TinyBMS_CAN_ReadBatteryPackCurrent+0x158>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d157      	bne.n	800642e <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	2b00      	cmp	r3, #0
 8006382:	d154      	bne.n	800642e <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8006384:	7d3b      	ldrb	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11b      	bne.n	80063c2 <TinyBMS_CAN_ReadBatteryPackCurrent+0xb6>
				printf("Response from BMS [Error]\r\n");
 800638a:	4837      	ldr	r0, [pc, #220]	; (8006468 <TinyBMS_CAN_ReadBatteryPackCurrent+0x15c>)
 800638c:	f007 fa08 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8006390:	7d7b      	ldrb	r3, [r7, #21]
 8006392:	4619      	mov	r1, r3
 8006394:	7dbb      	ldrb	r3, [r7, #22]
 8006396:	461a      	mov	r2, r3
 8006398:	4834      	ldr	r0, [pc, #208]	; (800646c <TinyBMS_CAN_ReadBatteryPackCurrent+0x160>)
 800639a:	f007 f97b 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 800639e:	7dbb      	ldrb	r3, [r7, #22]
 80063a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 80063a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fa89 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 80063ae:	23ff      	movs	r3, #255	; 0xff
 80063b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 80063b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c0:	e045      	b.n	800644e <TinyBMS_CAN_ReadBatteryPackCurrent+0x142>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_CURRENT)) {
 80063c2:	7d3b      	ldrb	r3, [r7, #20]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d125      	bne.n	8006414 <TinyBMS_CAN_ReadBatteryPackCurrent+0x108>
 80063c8:	7d7b      	ldrb	r3, [r7, #21]
 80063ca:	2b15      	cmp	r3, #21
 80063cc:	d122      	bne.n	8006414 <TinyBMS_CAN_ReadBatteryPackCurrent+0x108>
				printf("Response from BMS [OK]\r\n");
 80063ce:	4828      	ldr	r0, [pc, #160]	; (8006470 <TinyBMS_CAN_ReadBatteryPackCurrent+0x164>)
 80063d0:	f007 f9e6 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_PACK_CURRENT | CMD: 0x%02X\r\n", rx_msg[1]);
 80063d4:	7d7b      	ldrb	r3, [r7, #21]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4826      	ldr	r0, [pc, #152]	; (8006474 <TinyBMS_CAN_ReadBatteryPackCurrent+0x168>)
 80063da:	f007 f95b 	bl	800d694 <iprintf>
				uint32_t data = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 80063de:	7e7b      	ldrb	r3, [r7, #25]
 80063e0:	061a      	lsls	r2, r3, #24
 80063e2:	7e3b      	ldrb	r3, [r7, #24]
 80063e4:	041b      	lsls	r3, r3, #16
 80063e6:	431a      	orrs	r2, r3
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	4313      	orrs	r3, r2
 80063ee:	7dba      	ldrb	r2, [r7, #22]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	643b      	str	r3, [r7, #64]	; 0x40
				float packCurrent = data;
 80063f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 8006402:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006404:	f7fa f8c0 	bl	8000588 <__aeabi_f2d>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	481a      	ldr	r0, [pc, #104]	; (8006478 <TinyBMS_CAN_ReadBatteryPackCurrent+0x16c>)
 800640e:	f007 f941 	bl	800d694 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_CURRENT)) {
 8006412:	e00c      	b.n	800642e <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>

			} else {
				printf("Data Corruption\r\n");
 8006414:	4819      	ldr	r0, [pc, #100]	; (800647c <TinyBMS_CAN_ReadBatteryPackCurrent+0x170>)
 8006416:	f007 f9c3 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800641a:	23ff      	movs	r3, #255	; 0xff
 800641c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8006420:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642c:	e00f      	b.n	800644e <TinyBMS_CAN_ReadBatteryPackCurrent+0x142>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800642e:	2100      	movs	r1, #0
 8006430:	480b      	ldr	r0, [pc, #44]	; (8006460 <TinyBMS_CAN_ReadBatteryPackCurrent+0x154>)
 8006432:	f003 fabe 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d184      	bne.n	8006346 <TinyBMS_CAN_ReadBatteryPackCurrent+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return retval;
 8006442:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800644e:	eeb0 0a67 	vmov.f32	s0, s15
 8006452:	3748      	adds	r7, #72	; 0x48
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	08011f28 	.word	0x08011f28
 800645c:	08011fa4 	.word	0x08011fa4
 8006460:	20000200 	.word	0x20000200
 8006464:	20000004 	.word	0x20000004
 8006468:	08011c30 	.word	0x08011c30
 800646c:	08011c4c 	.word	0x08011c4c
 8006470:	080109f0 	.word	0x080109f0
 8006474:	08011f4c 	.word	0x08011f4c
 8006478:	08011f78 	.word	0x08011f78
 800647c:	08011ca4 	.word	0x08011ca4

08006480 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(CAN_HandleTypeDef *hcan) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b090      	sub	sp, #64	; 0x40
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackMaxCellVoltage\r\n");
 8006488:	4845      	ldr	r0, [pc, #276]	; (80065a0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x120>)
 800648a:	f007 f989 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 800648e:	23ff      	movs	r3, #255	; 0xff
 8006490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_MAX_CELL_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006494:	4a43      	ldr	r2, [pc, #268]	; (80065a4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x124>)
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800649e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80064a8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80064ac:	f107 030c 	add.w	r3, r7, #12
 80064b0:	4619      	mov	r1, r3
 80064b2:	2000      	movs	r0, #0
 80064b4:	f002 fa26 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80064b8:	e060      	b.n	800657c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xfc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80064ba:	f107 0314 	add.w	r3, r7, #20
 80064be:	f107 021c 	add.w	r2, r7, #28
 80064c2:	2100      	movs	r1, #0
 80064c4:	4838      	ldr	r0, [pc, #224]	; (80065a8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x128>)
 80064c6:	f003 f962 	bl	800978e <HAL_CAN_GetRxMessage>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x54>
			Error_Handler();
 80064d0:	f002 fb90 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80064d4:	f240 4103 	movw	r1, #1027	; 0x403
 80064d8:	4833      	ldr	r0, [pc, #204]	; (80065a8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x128>)
 80064da:	f003 fa92 	bl	8009a02 <HAL_CAN_ActivateNotification>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x68>
			Error_Handler();
 80064e4:	f002 fb86 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	4b30      	ldr	r3, [pc, #192]	; (80065ac <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x12c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d144      	bne.n	800657c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xfc>
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d141      	bne.n	800657c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xfc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80064f8:	7d3b      	ldrb	r3, [r7, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d118      	bne.n	8006530 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xb0>
				printf("Response from BMS [Error]\r\n");
 80064fe:	482c      	ldr	r0, [pc, #176]	; (80065b0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x130>)
 8006500:	f007 f94e 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8006504:	7d7b      	ldrb	r3, [r7, #21]
 8006506:	4619      	mov	r1, r3
 8006508:	7dbb      	ldrb	r3, [r7, #22]
 800650a:	461a      	mov	r2, r3
 800650c:	4829      	ldr	r0, [pc, #164]	; (80065b4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x134>)
 800650e:	f007 f8c1 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8006512:	7dbb      	ldrb	r3, [r7, #22]
 8006514:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 8006518:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800651c:	4618      	mov	r0, r3
 800651e:	f001 f9cf 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8006522:	23ff      	movs	r3, #255	; 0xff
 8006524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8006528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800652c:	b29b      	uxth	r3, r3
 800652e:	e032      	b.n	8006596 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x116>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MAX_CELL_VOLTAGE)) {
 8006530:	7d3b      	ldrb	r3, [r7, #20]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d118      	bne.n	8006568 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xe8>
 8006536:	7d7b      	ldrb	r3, [r7, #21]
 8006538:	2b16      	cmp	r3, #22
 800653a:	d115      	bne.n	8006568 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xe8>
				printf("Response from BMS [OK]\r\n");
 800653c:	481e      	ldr	r0, [pc, #120]	; (80065b8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x138>)
 800653e:	f007 f92f 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_MAX_CELL_VOLTAGE | CMD: 0x%02X\r\n", rx_msg[1]);
 8006542:	7d7b      	ldrb	r3, [r7, #21]
 8006544:	4619      	mov	r1, r3
 8006546:	481d      	ldr	r0, [pc, #116]	; (80065bc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x13c>)
 8006548:	f007 f8a4 	bl	800d694 <iprintf>
				uint16_t maxCellVoltage = ((rx_msg[3] << 8) | (rx_msg[2]));
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	b21a      	sxth	r2, r3
 8006552:	7dbb      	ldrb	r3, [r7, #22]
 8006554:	b21b      	sxth	r3, r3
 8006556:	4313      	orrs	r3, r2
 8006558:	b21b      	sxth	r3, r3
 800655a:	87bb      	strh	r3, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Maximum Cell Voltage: %u (mV)\r\n", maxCellVoltage);
 800655c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800655e:	4619      	mov	r1, r3
 8006560:	4817      	ldr	r0, [pc, #92]	; (80065c0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x140>)
 8006562:	f007 f897 	bl	800d694 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MAX_CELL_VOLTAGE)) {
 8006566:	e009      	b.n	800657c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xfc>

			} else {
				printf("Data Corruption\r\n");
 8006568:	4816      	ldr	r0, [pc, #88]	; (80065c4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x144>)
 800656a:	f007 f919 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 800656e:	23ff      	movs	r3, #255	; 0xff
 8006570:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8006574:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006578:	b29b      	uxth	r3, r3
 800657a:	e00c      	b.n	8006596 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x116>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800657c:	2100      	movs	r1, #0
 800657e:	480a      	ldr	r0, [pc, #40]	; (80065a8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x128>)
 8006580:	f003 fa17 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d197      	bne.n	80064ba <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 800658a:	2300      	movs	r3, #0
 800658c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8006590:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006594:	b29b      	uxth	r3, r3
}
 8006596:	4618      	mov	r0, r3
 8006598:	3740      	adds	r7, #64	; 0x40
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	08011fac 	.word	0x08011fac
 80065a4:	08012040 	.word	0x08012040
 80065a8:	20000200 	.word	0x20000200
 80065ac:	20000004 	.word	0x20000004
 80065b0:	08011c30 	.word	0x08011c30
 80065b4:	08011c4c 	.word	0x08011c4c
 80065b8:	080109f0 	.word	0x080109f0
 80065bc:	08011fd8 	.word	0x08011fd8
 80065c0:	08012008 	.word	0x08012008
 80065c4:	08011ca4 	.word	0x08011ca4

080065c8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_CAN_ReadBatteryPackMinCellVoltage(CAN_HandleTypeDef *hcan) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b090      	sub	sp, #64	; 0x40
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackMinCellVoltage\r\n");
 80065d0:	4845      	ldr	r0, [pc, #276]	; (80066e8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x120>)
 80065d2:	f007 f8e5 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80065d6:	23ff      	movs	r3, #255	; 0xff
 80065d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_MIN_CELL_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80065dc:	4a43      	ldr	r2, [pc, #268]	; (80066ec <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x124>)
 80065de:	f107 030c 	add.w	r3, r7, #12
 80065e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065e6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80065f0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80065f4:	f107 030c 	add.w	r3, r7, #12
 80065f8:	4619      	mov	r1, r3
 80065fa:	2000      	movs	r0, #0
 80065fc:	f002 f982 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006600:	e060      	b.n	80066c4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xfc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8006602:	f107 0314 	add.w	r3, r7, #20
 8006606:	f107 021c 	add.w	r2, r7, #28
 800660a:	2100      	movs	r1, #0
 800660c:	4838      	ldr	r0, [pc, #224]	; (80066f0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x128>)
 800660e:	f003 f8be 	bl	800978e <HAL_CAN_GetRxMessage>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x54>
			Error_Handler();
 8006618:	f002 faec 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800661c:	f240 4103 	movw	r1, #1027	; 0x403
 8006620:	4833      	ldr	r0, [pc, #204]	; (80066f0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x128>)
 8006622:	f003 f9ee 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x68>
			Error_Handler();
 800662c:	f002 fae2 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x12c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d144      	bne.n	80066c4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xfc>
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	2b00      	cmp	r3, #0
 800663e:	d141      	bne.n	80066c4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xfc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8006640:	7d3b      	ldrb	r3, [r7, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d118      	bne.n	8006678 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xb0>
				printf("Response from BMS [Error]\r\n");
 8006646:	482c      	ldr	r0, [pc, #176]	; (80066f8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x130>)
 8006648:	f007 f8aa 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 800664c:	7d7b      	ldrb	r3, [r7, #21]
 800664e:	4619      	mov	r1, r3
 8006650:	7dbb      	ldrb	r3, [r7, #22]
 8006652:	461a      	mov	r2, r3
 8006654:	4829      	ldr	r0, [pc, #164]	; (80066fc <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x134>)
 8006656:	f007 f81d 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 800665a:	7dbb      	ldrb	r3, [r7, #22]
 800665c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 8006660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f92b 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 800666a:	23ff      	movs	r3, #255	; 0xff
 800666c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8006670:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006674:	b29b      	uxth	r3, r3
 8006676:	e032      	b.n	80066de <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x116>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MIN_CELL_VOLTAGE)) {
 8006678:	7d3b      	ldrb	r3, [r7, #20]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d118      	bne.n	80066b0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xe8>
 800667e:	7d7b      	ldrb	r3, [r7, #21]
 8006680:	2b17      	cmp	r3, #23
 8006682:	d115      	bne.n	80066b0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xe8>
				printf("Response from BMS [OK]\r\n");
 8006684:	481e      	ldr	r0, [pc, #120]	; (8006700 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x138>)
 8006686:	f007 f88b 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_MIN_CELL_VOLTAGE | CMD: 0x%02X\r\n", rx_msg[1]);
 800668a:	7d7b      	ldrb	r3, [r7, #21]
 800668c:	4619      	mov	r1, r3
 800668e:	481d      	ldr	r0, [pc, #116]	; (8006704 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x13c>)
 8006690:	f007 f800 	bl	800d694 <iprintf>
				uint16_t minCellVoltage = ((rx_msg[3] << 8) | (rx_msg[2]));
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	b21a      	sxth	r2, r3
 800669a:	7dbb      	ldrb	r3, [r7, #22]
 800669c:	b21b      	sxth	r3, r3
 800669e:	4313      	orrs	r3, r2
 80066a0:	b21b      	sxth	r3, r3
 80066a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Minimum Cell Voltage: %u (mV)\r\n", minCellVoltage);
 80066a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80066a6:	4619      	mov	r1, r3
 80066a8:	4817      	ldr	r0, [pc, #92]	; (8006708 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x140>)
 80066aa:	f006 fff3 	bl	800d694 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MIN_CELL_VOLTAGE)) {
 80066ae:	e009      	b.n	80066c4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xfc>

			} else {
				printf("Data Corruption\r\n");
 80066b0:	4816      	ldr	r0, [pc, #88]	; (800670c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x144>)
 80066b2:	f007 f875 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80066b6:	23ff      	movs	r3, #255	; 0xff
 80066b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80066bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	e00c      	b.n	80066de <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x116>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80066c4:	2100      	movs	r1, #0
 80066c6:	480a      	ldr	r0, [pc, #40]	; (80066f0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x128>)
 80066c8:	f003 f973 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d197      	bne.n	8006602 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 80066d2:	2300      	movs	r3, #0
 80066d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 80066d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066dc:	b29b      	uxth	r3, r3
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3740      	adds	r7, #64	; 0x40
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	08012048 	.word	0x08012048
 80066ec:	080120dc 	.word	0x080120dc
 80066f0:	20000200 	.word	0x20000200
 80066f4:	20000004 	.word	0x20000004
 80066f8:	08011c30 	.word	0x08011c30
 80066fc:	08011c4c 	.word	0x08011c4c
 8006700:	080109f0 	.word	0x080109f0
 8006704:	08012074 	.word	0x08012074
 8006708:	080120a4 	.word	0x080120a4
 800670c:	08011ca4 	.word	0x08011ca4

08006710 <TinyBMS_CAN_ReadOnlineStatus>:
 * 						 	        [UINT16]
 * 						   0x91 - Charging [INFO], 0x92 - Fully Charged [INFO]
 * 						   0x93 - Discharging [INFO], 0x94 - Regeneration [INFO]
 * 						   0x97 - Idle [INFO], 0x9B - Fault [ERROR]
 */
uint16_t TinyBMS_CAN_ReadOnlineStatus(CAN_HandleTypeDef *hcan) {
 8006710:	b580      	push	{r7, lr}
 8006712:	b090      	sub	sp, #64	; 0x40
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadOnlineStatus\r\n");
 8006718:	486a      	ldr	r0, [pc, #424]	; (80068c4 <TinyBMS_CAN_ReadOnlineStatus+0x1b4>)
 800671a:	f007 f841 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 800671e:	23ff      	movs	r3, #255	; 0xff
 8006720:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_ONLINE_STATUS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006724:	4a68      	ldr	r2, [pc, #416]	; (80068c8 <TinyBMS_CAN_ReadOnlineStatus+0x1b8>)
 8006726:	f107 030c 	add.w	r3, r7, #12
 800672a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800672e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006738:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800673c:	f107 030c 	add.w	r3, r7, #12
 8006740:	4619      	mov	r1, r3
 8006742:	2000      	movs	r0, #0
 8006744:	f002 f8de 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006748:	e0a9      	b.n	800689e <TinyBMS_CAN_ReadOnlineStatus+0x18e>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800674a:	f107 0314 	add.w	r3, r7, #20
 800674e:	f107 021c 	add.w	r2, r7, #28
 8006752:	2100      	movs	r1, #0
 8006754:	485d      	ldr	r0, [pc, #372]	; (80068cc <TinyBMS_CAN_ReadOnlineStatus+0x1bc>)
 8006756:	f003 f81a 	bl	800978e <HAL_CAN_GetRxMessage>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <TinyBMS_CAN_ReadOnlineStatus+0x54>
			Error_Handler();
 8006760:	f002 fa48 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006764:	f240 4103 	movw	r1, #1027	; 0x403
 8006768:	4858      	ldr	r0, [pc, #352]	; (80068cc <TinyBMS_CAN_ReadOnlineStatus+0x1bc>)
 800676a:	f003 f94a 	bl	8009a02 <HAL_CAN_ActivateNotification>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <TinyBMS_CAN_ReadOnlineStatus+0x68>
			Error_Handler();
 8006774:	f002 fa3e 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	4b55      	ldr	r3, [pc, #340]	; (80068d0 <TinyBMS_CAN_ReadOnlineStatus+0x1c0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	f040 808d 	bne.w	800689e <TinyBMS_CAN_ReadOnlineStatus+0x18e>
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	2b00      	cmp	r3, #0
 8006788:	f040 8089 	bne.w	800689e <TinyBMS_CAN_ReadOnlineStatus+0x18e>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 800678c:	7d3b      	ldrb	r3, [r7, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d118      	bne.n	80067c4 <TinyBMS_CAN_ReadOnlineStatus+0xb4>
				printf("Response from BMS [Error]\r\n");
 8006792:	4850      	ldr	r0, [pc, #320]	; (80068d4 <TinyBMS_CAN_ReadOnlineStatus+0x1c4>)
 8006794:	f007 f804 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8006798:	7d7b      	ldrb	r3, [r7, #21]
 800679a:	4619      	mov	r1, r3
 800679c:	7dbb      	ldrb	r3, [r7, #22]
 800679e:	461a      	mov	r2, r3
 80067a0:	484d      	ldr	r0, [pc, #308]	; (80068d8 <TinyBMS_CAN_ReadOnlineStatus+0x1c8>)
 80067a2:	f006 ff77 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 80067a6:	7dbb      	ldrb	r3, [r7, #22]
 80067a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 80067ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 f885 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 80067b6:	23ff      	movs	r3, #255	; 0xff
 80067b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80067bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	e07a      	b.n	80068ba <TinyBMS_CAN_ReadOnlineStatus+0x1aa>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ONLINE_STATUS)) {
 80067c4:	7d3b      	ldrb	r3, [r7, #20]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d15f      	bne.n	800688a <TinyBMS_CAN_ReadOnlineStatus+0x17a>
 80067ca:	7d7b      	ldrb	r3, [r7, #21]
 80067cc:	2b18      	cmp	r3, #24
 80067ce:	d15c      	bne.n	800688a <TinyBMS_CAN_ReadOnlineStatus+0x17a>
				printf("Response from BMS [OK]\r\n");
 80067d0:	4842      	ldr	r0, [pc, #264]	; (80068dc <TinyBMS_CAN_ReadOnlineStatus+0x1cc>)
 80067d2:	f006 ffe5 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_ONLINE_STATUS | CMD: 0x%02X\r\n", rx_msg[1]);
 80067d6:	7d7b      	ldrb	r3, [r7, #21]
 80067d8:	4619      	mov	r1, r3
 80067da:	4841      	ldr	r0, [pc, #260]	; (80068e0 <TinyBMS_CAN_ReadOnlineStatus+0x1d0>)
 80067dc:	f006 ff5a 	bl	800d694 <iprintf>
				uint16_t onlineStatus = ((rx_msg[3] << 8) | (rx_msg[2]));
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	b21a      	sxth	r2, r3
 80067e6:	7dbb      	ldrb	r3, [r7, #22]
 80067e8:	b21b      	sxth	r3, r3
 80067ea:	4313      	orrs	r3, r2
 80067ec:	b21b      	sxth	r3, r3
 80067ee:	87bb      	strh	r3, [r7, #60]	; 0x3c

				switch(onlineStatus) {
 80067f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067f2:	3b91      	subs	r3, #145	; 0x91
 80067f4:	2b0a      	cmp	r3, #10
 80067f6:	d83d      	bhi.n	8006874 <TinyBMS_CAN_ReadOnlineStatus+0x164>
 80067f8:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <TinyBMS_CAN_ReadOnlineStatus+0xf0>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	0800682d 	.word	0x0800682d
 8006804:	08006839 	.word	0x08006839
 8006808:	08006845 	.word	0x08006845
 800680c:	08006875 	.word	0x08006875
 8006810:	08006875 	.word	0x08006875
 8006814:	08006851 	.word	0x08006851
 8006818:	0800685d 	.word	0x0800685d
 800681c:	08006875 	.word	0x08006875
 8006820:	08006875 	.word	0x08006875
 8006824:	08006875 	.word	0x08006875
 8006828:	08006869 	.word	0x08006869
				case TINYBMS_STATUS_CHARGING:
					printf("TinyBMS Online Status: 0x%02X - Charging [INFO]\r\n", onlineStatus);
 800682c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800682e:	4619      	mov	r1, r3
 8006830:	482c      	ldr	r0, [pc, #176]	; (80068e4 <TinyBMS_CAN_ReadOnlineStatus+0x1d4>)
 8006832:	f006 ff2f 	bl	800d694 <iprintf>
					break;
 8006836:	e027      	b.n	8006888 <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_FULLYCHARGED:
					printf("TinyBMS Online Status: 0x%02X - Fully Charged [INFO]\r\n", onlineStatus);
 8006838:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800683a:	4619      	mov	r1, r3
 800683c:	482a      	ldr	r0, [pc, #168]	; (80068e8 <TinyBMS_CAN_ReadOnlineStatus+0x1d8>)
 800683e:	f006 ff29 	bl	800d694 <iprintf>
					break;
 8006842:	e021      	b.n	8006888 <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_DISCHARGING:
					printf("TinyBMS Online Status: 0x%02X - Discharging [INFO]\r\n", onlineStatus);
 8006844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006846:	4619      	mov	r1, r3
 8006848:	4828      	ldr	r0, [pc, #160]	; (80068ec <TinyBMS_CAN_ReadOnlineStatus+0x1dc>)
 800684a:	f006 ff23 	bl	800d694 <iprintf>
					break;
 800684e:	e01b      	b.n	8006888 <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_REGENERATION:
					printf("TinyBMS Online Status: 0x%02X - Regeneration [INFO]\r\n", onlineStatus);
 8006850:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006852:	4619      	mov	r1, r3
 8006854:	4826      	ldr	r0, [pc, #152]	; (80068f0 <TinyBMS_CAN_ReadOnlineStatus+0x1e0>)
 8006856:	f006 ff1d 	bl	800d694 <iprintf>
					break;
 800685a:	e015      	b.n	8006888 <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_IDLE:
					printf("TinyBMS Online Status: 0x%02X - Idle [INFO]\r\n", onlineStatus);
 800685c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800685e:	4619      	mov	r1, r3
 8006860:	4824      	ldr	r0, [pc, #144]	; (80068f4 <TinyBMS_CAN_ReadOnlineStatus+0x1e4>)
 8006862:	f006 ff17 	bl	800d694 <iprintf>
					break;
 8006866:	e00f      	b.n	8006888 <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_FAULT:
					printf("TinyBMS Online Status: 0x%02X - Fault [Error]\r\n", onlineStatus);
 8006868:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800686a:	4619      	mov	r1, r3
 800686c:	4822      	ldr	r0, [pc, #136]	; (80068f8 <TinyBMS_CAN_ReadOnlineStatus+0x1e8>)
 800686e:	f006 ff11 	bl	800d694 <iprintf>
					break;
 8006872:	e009      	b.n	8006888 <TinyBMS_CAN_ReadOnlineStatus+0x178>
				default:
					printf("Invalid TinyBMS OnlineStatus received\r\n");
 8006874:	4821      	ldr	r0, [pc, #132]	; (80068fc <TinyBMS_CAN_ReadOnlineStatus+0x1ec>)
 8006876:	f006 ff93 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 800687a:	23ff      	movs	r3, #255	; 0xff
 800687c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					return retval;
 8006880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006884:	b29b      	uxth	r3, r3
 8006886:	e018      	b.n	80068ba <TinyBMS_CAN_ReadOnlineStatus+0x1aa>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ONLINE_STATUS)) {
 8006888:	e009      	b.n	800689e <TinyBMS_CAN_ReadOnlineStatus+0x18e>
				}

			} else {
				printf("Data Corruption\r\n");
 800688a:	481d      	ldr	r0, [pc, #116]	; (8006900 <TinyBMS_CAN_ReadOnlineStatus+0x1f0>)
 800688c:	f006 ff88 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8006890:	23ff      	movs	r3, #255	; 0xff
 8006892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8006896:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800689a:	b29b      	uxth	r3, r3
 800689c:	e00d      	b.n	80068ba <TinyBMS_CAN_ReadOnlineStatus+0x1aa>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800689e:	2100      	movs	r1, #0
 80068a0:	480a      	ldr	r0, [pc, #40]	; (80068cc <TinyBMS_CAN_ReadOnlineStatus+0x1bc>)
 80068a2:	f003 f886 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f47f af4e 	bne.w	800674a <TinyBMS_CAN_ReadOnlineStatus+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 80068b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068b8:	b29b      	uxth	r3, r3
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3740      	adds	r7, #64	; 0x40
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	080120e4 	.word	0x080120e4
 80068c8:	08012294 	.word	0x08012294
 80068cc:	20000200 	.word	0x20000200
 80068d0:	20000004 	.word	0x20000004
 80068d4:	08011c30 	.word	0x08011c30
 80068d8:	08011c4c 	.word	0x08011c4c
 80068dc:	080109f0 	.word	0x080109f0
 80068e0:	08012104 	.word	0x08012104
 80068e4:	08012130 	.word	0x08012130
 80068e8:	08012164 	.word	0x08012164
 80068ec:	0801219c 	.word	0x0801219c
 80068f0:	080121d4 	.word	0x080121d4
 80068f4:	0801220c 	.word	0x0801220c
 80068f8:	0801223c 	.word	0x0801223c
 80068fc:	0801226c 	.word	0x0801226c
 8006900:	08011ca4 	.word	0x08011ca4

08006904 <TinyBMS_CAN_ReadLifetimeCounter>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_CAN_ReadLifetimeCounter(CAN_HandleTypeDef *hcan) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b090      	sub	sp, #64	; 0x40
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadLifetimeCounter\r\n");
 800690c:	4844      	ldr	r0, [pc, #272]	; (8006a20 <TinyBMS_CAN_ReadLifetimeCounter+0x11c>)
 800690e:	f006 ff47 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8006912:	23ff      	movs	r3, #255	; 0xff
 8006914:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_LIFETIME_COUNTER, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006918:	4a42      	ldr	r2, [pc, #264]	; (8006a24 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 800691a:	f107 0308 	add.w	r3, r7, #8
 800691e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006922:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8006926:	2301      	movs	r3, #1
 8006928:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 800692c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8006930:	f107 0308 	add.w	r3, r7, #8
 8006934:	4619      	mov	r1, r3
 8006936:	2000      	movs	r0, #0
 8006938:	f001 ffe4 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800693c:	e060      	b.n	8006a00 <TinyBMS_CAN_ReadLifetimeCounter+0xfc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800693e:	f107 0310 	add.w	r3, r7, #16
 8006942:	f107 0218 	add.w	r2, r7, #24
 8006946:	2100      	movs	r1, #0
 8006948:	4837      	ldr	r0, [pc, #220]	; (8006a28 <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 800694a:	f002 ff20 	bl	800978e <HAL_CAN_GetRxMessage>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <TinyBMS_CAN_ReadLifetimeCounter+0x54>
			Error_Handler();
 8006954:	f002 f94e 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006958:	f240 4103 	movw	r1, #1027	; 0x403
 800695c:	4832      	ldr	r0, [pc, #200]	; (8006a28 <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 800695e:	f003 f850 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <TinyBMS_CAN_ReadLifetimeCounter+0x68>
			Error_Handler();
 8006968:	f002 f944 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	4b2f      	ldr	r3, [pc, #188]	; (8006a2c <TinyBMS_CAN_ReadLifetimeCounter+0x128>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d144      	bne.n	8006a00 <TinyBMS_CAN_ReadLifetimeCounter+0xfc>
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d141      	bne.n	8006a00 <TinyBMS_CAN_ReadLifetimeCounter+0xfc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 800697c:	7c3b      	ldrb	r3, [r7, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d117      	bne.n	80069b2 <TinyBMS_CAN_ReadLifetimeCounter+0xae>
				printf("Response from BMS [Error]\r\n");
 8006982:	482b      	ldr	r0, [pc, #172]	; (8006a30 <TinyBMS_CAN_ReadLifetimeCounter+0x12c>)
 8006984:	f006 ff0c 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8006988:	7c7b      	ldrb	r3, [r7, #17]
 800698a:	4619      	mov	r1, r3
 800698c:	7cbb      	ldrb	r3, [r7, #18]
 800698e:	461a      	mov	r2, r3
 8006990:	4828      	ldr	r0, [pc, #160]	; (8006a34 <TinyBMS_CAN_ReadLifetimeCounter+0x130>)
 8006992:	f006 fe7f 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8006996:	7cbb      	ldrb	r3, [r7, #18]
 8006998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				reportBMSError(error);
 800699c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 ff8d 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 80069a6:	23ff      	movs	r3, #255	; 0xff
 80069a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80069ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069b0:	e032      	b.n	8006a18 <TinyBMS_CAN_ReadLifetimeCounter+0x114>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_LIFETIME_COUNTER)) {
 80069b2:	7c3b      	ldrb	r3, [r7, #16]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d11a      	bne.n	80069ee <TinyBMS_CAN_ReadLifetimeCounter+0xea>
 80069b8:	7c7b      	ldrb	r3, [r7, #17]
 80069ba:	2b19      	cmp	r3, #25
 80069bc:	d117      	bne.n	80069ee <TinyBMS_CAN_ReadLifetimeCounter+0xea>
				printf("Response from BMS [OK]\r\n");
 80069be:	481e      	ldr	r0, [pc, #120]	; (8006a38 <TinyBMS_CAN_ReadLifetimeCounter+0x134>)
 80069c0:	f006 feee 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_LIFETIME_COUNTER | CMD: 0x%02X\r\n", rx_msg[1]);
 80069c4:	7c7b      	ldrb	r3, [r7, #17]
 80069c6:	4619      	mov	r1, r3
 80069c8:	481c      	ldr	r0, [pc, #112]	; (8006a3c <TinyBMS_CAN_ReadLifetimeCounter+0x138>)
 80069ca:	f006 fe63 	bl	800d694 <iprintf>
				uint32_t bms_lifetime = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 80069ce:	7d7b      	ldrb	r3, [r7, #21]
 80069d0:	061a      	lsls	r2, r3, #24
 80069d2:	7d3b      	ldrb	r3, [r7, #20]
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	431a      	orrs	r2, r3
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	4313      	orrs	r3, r2
 80069de:	7cba      	ldrb	r2, [r7, #18]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	63bb      	str	r3, [r7, #56]	; 0x38
				printf("TinyBMS Lifetime Counter: %lu (s)\r\n", bms_lifetime);
 80069e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069e6:	4816      	ldr	r0, [pc, #88]	; (8006a40 <TinyBMS_CAN_ReadLifetimeCounter+0x13c>)
 80069e8:	f006 fe54 	bl	800d694 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_LIFETIME_COUNTER)) {
 80069ec:	e008      	b.n	8006a00 <TinyBMS_CAN_ReadLifetimeCounter+0xfc>

			} else {
				printf("Data Corruption\r\n");
 80069ee:	4815      	ldr	r0, [pc, #84]	; (8006a44 <TinyBMS_CAN_ReadLifetimeCounter+0x140>)
 80069f0:	f006 fed6 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80069f4:	23ff      	movs	r3, #255	; 0xff
 80069f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80069fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069fe:	e00b      	b.n	8006a18 <TinyBMS_CAN_ReadLifetimeCounter+0x114>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006a00:	2100      	movs	r1, #0
 8006a02:	4809      	ldr	r0, [pc, #36]	; (8006a28 <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 8006a04:	f002 ffd5 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d197      	bne.n	800693e <TinyBMS_CAN_ReadLifetimeCounter+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8006a14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3740      	adds	r7, #64	; 0x40
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	0801229c 	.word	0x0801229c
 8006a24:	080122f0 	.word	0x080122f0
 8006a28:	20000200 	.word	0x20000200
 8006a2c:	20000004 	.word	0x20000004
 8006a30:	08011c30 	.word	0x08011c30
 8006a34:	08011c4c 	.word	0x08011c4c
 8006a38:	080109f0 	.word	0x080109f0
 8006a3c:	080122c0 	.word	0x080122c0
 8006a40:	08011474 	.word	0x08011474
 8006a44:	08011ca4 	.word	0x08011ca4

08006a48 <TinyBMS_CAN_ReadEstimatedSOCValue>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_CAN_ReadEstimatedSOCValue(CAN_HandleTypeDef *hcan) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b090      	sub	sp, #64	; 0x40
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadEstimatedSOCValue\r\n");
 8006a50:	4844      	ldr	r0, [pc, #272]	; (8006b64 <TinyBMS_CAN_ReadEstimatedSOCValue+0x11c>)
 8006a52:	f006 fea5 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8006a56:	23ff      	movs	r3, #255	; 0xff
 8006a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_EST_SOC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006a5c:	4a42      	ldr	r2, [pc, #264]	; (8006b68 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8006a5e:	f107 0308 	add.w	r3, r7, #8
 8006a62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a66:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006a70:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8006a74:	f107 0308 	add.w	r3, r7, #8
 8006a78:	4619      	mov	r1, r3
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f001 ff42 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006a80:	e060      	b.n	8006b44 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8006a82:	f107 0310 	add.w	r3, r7, #16
 8006a86:	f107 0218 	add.w	r2, r7, #24
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4837      	ldr	r0, [pc, #220]	; (8006b6c <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8006a8e:	f002 fe7e 	bl	800978e <HAL_CAN_GetRxMessage>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <TinyBMS_CAN_ReadEstimatedSOCValue+0x54>
			Error_Handler();
 8006a98:	f002 f8ac 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006a9c:	f240 4103 	movw	r1, #1027	; 0x403
 8006aa0:	4832      	ldr	r0, [pc, #200]	; (8006b6c <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8006aa2:	f002 ffae 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <TinyBMS_CAN_ReadEstimatedSOCValue+0x68>
			Error_Handler();
 8006aac:	f002 f8a2 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4b2f      	ldr	r3, [pc, #188]	; (8006b70 <TinyBMS_CAN_ReadEstimatedSOCValue+0x128>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d144      	bne.n	8006b44 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfc>
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d141      	bne.n	8006b44 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8006ac0:	7c3b      	ldrb	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d117      	bne.n	8006af6 <TinyBMS_CAN_ReadEstimatedSOCValue+0xae>
				printf("Response from BMS [Error]\r\n");
 8006ac6:	482b      	ldr	r0, [pc, #172]	; (8006b74 <TinyBMS_CAN_ReadEstimatedSOCValue+0x12c>)
 8006ac8:	f006 fe6a 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8006acc:	7c7b      	ldrb	r3, [r7, #17]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	7cbb      	ldrb	r3, [r7, #18]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4828      	ldr	r0, [pc, #160]	; (8006b78 <TinyBMS_CAN_ReadEstimatedSOCValue+0x130>)
 8006ad6:	f006 fddd 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8006ada:	7cbb      	ldrb	r3, [r7, #18]
 8006adc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				reportBMSError(error);
 8006ae0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 feeb 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8006aea:	23ff      	movs	r3, #255	; 0xff
 8006aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8006af0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006af4:	e032      	b.n	8006b5c <TinyBMS_CAN_ReadEstimatedSOCValue+0x114>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_EST_SOC)) {
 8006af6:	7c3b      	ldrb	r3, [r7, #16]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d11a      	bne.n	8006b32 <TinyBMS_CAN_ReadEstimatedSOCValue+0xea>
 8006afc:	7c7b      	ldrb	r3, [r7, #17]
 8006afe:	2b1a      	cmp	r3, #26
 8006b00:	d117      	bne.n	8006b32 <TinyBMS_CAN_ReadEstimatedSOCValue+0xea>
				printf("Response from BMS [OK]\r\n");
 8006b02:	481e      	ldr	r0, [pc, #120]	; (8006b7c <TinyBMS_CAN_ReadEstimatedSOCValue+0x134>)
 8006b04:	f006 fe4c 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_EST_SOC | CMD: 0x%02X\r\n", rx_msg[1]);
 8006b08:	7c7b      	ldrb	r3, [r7, #17]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	481c      	ldr	r0, [pc, #112]	; (8006b80 <TinyBMS_CAN_ReadEstimatedSOCValue+0x138>)
 8006b0e:	f006 fdc1 	bl	800d694 <iprintf>
				uint32_t est_soc = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 8006b12:	7d7b      	ldrb	r3, [r7, #21]
 8006b14:	061a      	lsls	r2, r3, #24
 8006b16:	7d3b      	ldrb	r3, [r7, #20]
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	7cfb      	ldrb	r3, [r7, #19]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	4313      	orrs	r3, r2
 8006b22:	7cba      	ldrb	r2, [r7, #18]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	63bb      	str	r3, [r7, #56]	; 0x38
				printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", est_soc);
 8006b28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b2a:	4816      	ldr	r0, [pc, #88]	; (8006b84 <TinyBMS_CAN_ReadEstimatedSOCValue+0x13c>)
 8006b2c:	f006 fdb2 	bl	800d694 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_EST_SOC)) {
 8006b30:	e008      	b.n	8006b44 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfc>

			} else {
				printf("Data Corruption\r\n");
 8006b32:	4815      	ldr	r0, [pc, #84]	; (8006b88 <TinyBMS_CAN_ReadEstimatedSOCValue+0x140>)
 8006b34:	f006 fe34 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8006b38:	23ff      	movs	r3, #255	; 0xff
 8006b3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8006b3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b42:	e00b      	b.n	8006b5c <TinyBMS_CAN_ReadEstimatedSOCValue+0x114>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006b44:	2100      	movs	r1, #0
 8006b46:	4809      	ldr	r0, [pc, #36]	; (8006b6c <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8006b48:	f002 ff33 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d197      	bne.n	8006a82 <TinyBMS_CAN_ReadEstimatedSOCValue+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8006b58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3740      	adds	r7, #64	; 0x40
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	080122f8 	.word	0x080122f8
 8006b68:	08012388 	.word	0x08012388
 8006b6c:	20000200 	.word	0x20000200
 8006b70:	20000004 	.word	0x20000004
 8006b74:	08011c30 	.word	0x08011c30
 8006b78:	08011c4c 	.word	0x08011c4c
 8006b7c:	080109f0 	.word	0x080109f0
 8006b80:	0801231c 	.word	0x0801231c
 8006b84:	08012344 	.word	0x08012344
 8006b88:	08011ca4 	.word	0x08011ca4

08006b8c <TinyBMS_CAN_ReadDeviceTemperatures>:
 * 						 	      [INT16]				   [INT16] 				  [INT16]
 * 						  	(Reg 48) DATA1 - TinyBMS Internal Temperature
 * 						  	(Reg 42) DATA2 - External Temp Sensor #1 (value of -327689 if NC)
 * 						  	(Reg 43) DATA3 - External Temp Sensor #2 (value of -327689 if NC)
 */
uint8_t TinyBMS_CAN_ReadDeviceTemperatures(CAN_HandleTypeDef *hcan) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b090      	sub	sp, #64	; 0x40
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadDeviceTemperatures\r\n");
 8006b94:	486e      	ldr	r0, [pc, #440]	; (8006d50 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c4>)
 8006b96:	f006 fe03 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8006b9a:	23ff      	movs	r3, #255	; 0xff
 8006b9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_TEMPS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006bac:	4a69      	ldr	r2, [pc, #420]	; (8006d54 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c8>)
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bb6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006bc0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8006bc4:	f107 0308 	add.w	r3, r7, #8
 8006bc8:	4619      	mov	r1, r3
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f001 fe9a 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006bd0:	e0ac      	b.n	8006d2c <TinyBMS_CAN_ReadDeviceTemperatures+0x1a0>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8006bd2:	f107 0310 	add.w	r3, r7, #16
 8006bd6:	f107 0218 	add.w	r2, r7, #24
 8006bda:	2100      	movs	r1, #0
 8006bdc:	485e      	ldr	r0, [pc, #376]	; (8006d58 <TinyBMS_CAN_ReadDeviceTemperatures+0x1cc>)
 8006bde:	f002 fdd6 	bl	800978e <HAL_CAN_GetRxMessage>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <TinyBMS_CAN_ReadDeviceTemperatures+0x60>
			Error_Handler();
 8006be8:	f002 f804 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006bec:	f240 4103 	movw	r1, #1027	; 0x403
 8006bf0:	4859      	ldr	r0, [pc, #356]	; (8006d58 <TinyBMS_CAN_ReadDeviceTemperatures+0x1cc>)
 8006bf2:	f002 ff06 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <TinyBMS_CAN_ReadDeviceTemperatures+0x74>
			Error_Handler();
 8006bfc:	f001 fffa 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4b56      	ldr	r3, [pc, #344]	; (8006d5c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	f040 8090 	bne.w	8006d2c <TinyBMS_CAN_ReadDeviceTemperatures+0x1a0>
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 808c 	bne.w	8006d2c <TinyBMS_CAN_ReadDeviceTemperatures+0x1a0>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8006c14:	7c3b      	ldrb	r3, [r7, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d117      	bne.n	8006c4a <TinyBMS_CAN_ReadDeviceTemperatures+0xbe>
				printf("Response from BMS [Error]\r\n");
 8006c1a:	4851      	ldr	r0, [pc, #324]	; (8006d60 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006c1c:	f006 fdc0 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8006c20:	7c7b      	ldrb	r3, [r7, #17]
 8006c22:	4619      	mov	r1, r3
 8006c24:	7cbb      	ldrb	r3, [r7, #18]
 8006c26:	461a      	mov	r2, r3
 8006c28:	484e      	ldr	r0, [pc, #312]	; (8006d64 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d8>)
 8006c2a:	f006 fd33 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8006c2e:	7cbb      	ldrb	r3, [r7, #18]
 8006c30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				reportBMSError(error);
 8006c34:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fe41 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8006c3e:	23ff      	movs	r3, #255	; 0xff
 8006c40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8006c44:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006c48:	e07d      	b.n	8006d46 <TinyBMS_CAN_ReadDeviceTemperatures+0x1ba>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_TEMPS)) {
 8006c4a:	7c3b      	ldrb	r3, [r7, #16]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d164      	bne.n	8006d1a <TinyBMS_CAN_ReadDeviceTemperatures+0x18e>
 8006c50:	7c7b      	ldrb	r3, [r7, #17]
 8006c52:	2b1b      	cmp	r3, #27
 8006c54:	d161      	bne.n	8006d1a <TinyBMS_CAN_ReadDeviceTemperatures+0x18e>
				if(msg_count == 1) {
 8006c56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d107      	bne.n	8006c6e <TinyBMS_CAN_ReadDeviceTemperatures+0xe2>
					printf("Response from BMS [OK]\r\n");
 8006c5e:	4842      	ldr	r0, [pc, #264]	; (8006d68 <TinyBMS_CAN_ReadDeviceTemperatures+0x1dc>)
 8006c60:	f006 fd9e 	bl	800d7a0 <puts>
					printf("CAN_TBMS_READ_TEMPS | CMD: 0x%02X\r\n", rx_msg[1]);
 8006c64:	7c7b      	ldrb	r3, [r7, #17]
 8006c66:	4619      	mov	r1, r3
 8006c68:	4840      	ldr	r0, [pc, #256]	; (8006d6c <TinyBMS_CAN_ReadDeviceTemperatures+0x1e0>)
 8006c6a:	f006 fd13 	bl	800d694 <iprintf>
				}
				pl = rx_msg[2];
 8006c6e:	7cbb      	ldrb	r3, [r7, #18]
 8006c70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//MSG1
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 8006c74:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d115      	bne.n	8006ca8 <TinyBMS_CAN_ReadDeviceTemperatures+0x11c>
 8006c7c:	7d7b      	ldrb	r3, [r7, #21]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d112      	bne.n	8006ca8 <TinyBMS_CAN_ReadDeviceTemperatures+0x11c>
					int16_t temp1 = ((rx_msg[4] << 8) | (rx_msg[3]));
 8006c82:	7d3b      	ldrb	r3, [r7, #20]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	b21a      	sxth	r2, r3
 8006c88:	7cfb      	ldrb	r3, [r7, #19]
 8006c8a:	b21b      	sxth	r3, r3
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("TinyBMS   Internal Temp: %d (°C)\r\n", temp1);
 8006c90:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8006c94:	4619      	mov	r1, r3
 8006c96:	4836      	ldr	r0, [pc, #216]	; (8006d70 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e4>)
 8006c98:	f006 fcfc 	bl	800d694 <iprintf>
					msg_count++;
 8006c9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 8006ca6:	e037      	b.n	8006d18 <TinyBMS_CAN_ReadDeviceTemperatures+0x18c>
				//MSG2
				} else if((pl == 2) && (rx_msg[5] == 0x01)) {
 8006ca8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d115      	bne.n	8006cdc <TinyBMS_CAN_ReadDeviceTemperatures+0x150>
 8006cb0:	7d7b      	ldrb	r3, [r7, #21]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d112      	bne.n	8006cdc <TinyBMS_CAN_ReadDeviceTemperatures+0x150>
					int16_t temp2 = ((rx_msg[4] << 8) | (rx_msg[3]));
 8006cb6:	7d3b      	ldrb	r3, [r7, #20]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	b21a      	sxth	r2, r3
 8006cbc:	7cfb      	ldrb	r3, [r7, #19]
 8006cbe:	b21b      	sxth	r3, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	873b      	strh	r3, [r7, #56]	; 0x38
					printf("TinyBMS External Temp 1: %d (°C)\r\n", temp2);
 8006cc4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8006cc8:	4619      	mov	r1, r3
 8006cca:	482a      	ldr	r0, [pc, #168]	; (8006d74 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e8>)
 8006ccc:	f006 fce2 	bl	800d694 <iprintf>
					msg_count++;
 8006cd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				} else if((pl == 2) && (rx_msg[5] == 0x01)) {
 8006cda:	e01d      	b.n	8006d18 <TinyBMS_CAN_ReadDeviceTemperatures+0x18c>
				//MSG3
				} else if((pl == 2) && (rx_msg[5] == 0x02)) {
 8006cdc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d110      	bne.n	8006d06 <TinyBMS_CAN_ReadDeviceTemperatures+0x17a>
 8006ce4:	7d7b      	ldrb	r3, [r7, #21]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d10d      	bne.n	8006d06 <TinyBMS_CAN_ReadDeviceTemperatures+0x17a>
					int16_t temp3 = ((rx_msg[4] << 8) | (rx_msg[3]));
 8006cea:	7d3b      	ldrb	r3, [r7, #20]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	b21a      	sxth	r2, r3
 8006cf0:	7cfb      	ldrb	r3, [r7, #19]
 8006cf2:	b21b      	sxth	r3, r3
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	86fb      	strh	r3, [r7, #54]	; 0x36
					printf("TinyBMS External Temp 2: %d (°C)\r\n", temp3);
 8006cf8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	481e      	ldr	r0, [pc, #120]	; (8006d78 <TinyBMS_CAN_ReadDeviceTemperatures+0x1ec>)
 8006d00:	f006 fcc8 	bl	800d694 <iprintf>
				} else if((pl == 2) && (rx_msg[5] == 0x02)) {
 8006d04:	e008      	b.n	8006d18 <TinyBMS_CAN_ReadDeviceTemperatures+0x18c>
				} else {
					printf("Data Corruption\r\n");
 8006d06:	481d      	ldr	r0, [pc, #116]	; (8006d7c <TinyBMS_CAN_ReadDeviceTemperatures+0x1f0>)
 8006d08:	f006 fd4a 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 8006d0c:	23ff      	movs	r3, #255	; 0xff
 8006d0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 8006d12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006d16:	e016      	b.n	8006d46 <TinyBMS_CAN_ReadDeviceTemperatures+0x1ba>
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 8006d18:	e008      	b.n	8006d2c <TinyBMS_CAN_ReadDeviceTemperatures+0x1a0>
				}

			} else {
				printf("Data Corruption\r\n");
 8006d1a:	4818      	ldr	r0, [pc, #96]	; (8006d7c <TinyBMS_CAN_ReadDeviceTemperatures+0x1f0>)
 8006d1c:	f006 fd40 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8006d20:	23ff      	movs	r3, #255	; 0xff
 8006d22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8006d26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006d2a:	e00c      	b.n	8006d46 <TinyBMS_CAN_ReadDeviceTemperatures+0x1ba>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	480a      	ldr	r0, [pc, #40]	; (8006d58 <TinyBMS_CAN_ReadDeviceTemperatures+0x1cc>)
 8006d30:	f002 fe3f 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f47f af4b 	bne.w	8006bd2 <TinyBMS_CAN_ReadDeviceTemperatures+0x46>
			}
		}
	}
	retval = CMD_SUCCESS;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 8006d42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3740      	adds	r7, #64	; 0x40
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	08012390 	.word	0x08012390
 8006d54:	08012444 	.word	0x08012444
 8006d58:	20000200 	.word	0x20000200
 8006d5c:	20000004 	.word	0x20000004
 8006d60:	08011c30 	.word	0x08011c30
 8006d64:	08011c4c 	.word	0x08011c4c
 8006d68:	080109f0 	.word	0x080109f0
 8006d6c:	080123b4 	.word	0x080123b4
 8006d70:	080123d8 	.word	0x080123d8
 8006d74:	080123fc 	.word	0x080123fc
 8006d78:	08012420 	.word	0x08012420
 8006d7c:	08011ca4 	.word	0x08011ca4

08006d80 <TinyBMS_CAN_ReadBatteryPackCellVoltages>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte n*2+2    Byte n*2+3 		Byte n*2+4 	Byte n*2+5
 * 						 	  DATAn:LSB   	DATAn:MSB   	CRC:LSB 	CRC:MSB
 * 						 	       	 [UINT16]
 */
uint8_t TinyBMS_CAN_ReadBatteryPackCellVoltages(CAN_HandleTypeDef *hcan) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b090      	sub	sp, #64	; 0x40
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackCellVoltages\r\n");
 8006d88:	4859      	ldr	r0, [pc, #356]	; (8006ef0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x170>)
 8006d8a:	f006 fd09 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8006d8e:	23ff      	movs	r3, #255	; 0xff
 8006d90:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t cellVoltage = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	877b      	strh	r3, [r7, #58]	; 0x3a

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_CELL_VOLTAGES, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006da4:	4a53      	ldr	r2, [pc, #332]	; (8006ef4 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 8006da6:	f107 030c 	add.w	r3, r7, #12
 8006daa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dae:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006db8:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8006dbc:	f107 030c 	add.w	r3, r7, #12
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f001 fd9e 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006dc8:	e080      	b.n	8006ecc <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14c>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8006dca:	f107 0314 	add.w	r3, r7, #20
 8006dce:	f107 021c 	add.w	r2, r7, #28
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4848      	ldr	r0, [pc, #288]	; (8006ef8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 8006dd6:	f002 fcda 	bl	800978e <HAL_CAN_GetRxMessage>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x64>
			Error_Handler();
 8006de0:	f001 ff08 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006de4:	f240 4103 	movw	r1, #1027	; 0x403
 8006de8:	4843      	ldr	r0, [pc, #268]	; (8006ef8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 8006dea:	f002 fe0a 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x78>
			Error_Handler();
 8006df4:	f001 fefe 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	4b40      	ldr	r3, [pc, #256]	; (8006efc <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x17c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d164      	bne.n	8006ecc <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14c>
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d161      	bne.n	8006ecc <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14c>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8006e08:	7d3b      	ldrb	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d117      	bne.n	8006e3e <TinyBMS_CAN_ReadBatteryPackCellVoltages+0xbe>
				printf("Response from BMS [Error]\r\n");
 8006e0e:	483c      	ldr	r0, [pc, #240]	; (8006f00 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x180>)
 8006e10:	f006 fcc6 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8006e14:	7d7b      	ldrb	r3, [r7, #21]
 8006e16:	4619      	mov	r1, r3
 8006e18:	7dbb      	ldrb	r3, [r7, #22]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4839      	ldr	r0, [pc, #228]	; (8006f04 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x184>)
 8006e1e:	f006 fc39 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8006e22:	7dbb      	ldrb	r3, [r7, #22]
 8006e24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				reportBMSError(error);
 8006e28:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fd47 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8006e32:	23ff      	movs	r3, #255	; 0xff
 8006e34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8006e38:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006e3c:	e053      	b.n	8006ee6 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x166>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CELL_VOLTAGES)) {
 8006e3e:	7d3b      	ldrb	r3, [r7, #20]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d13a      	bne.n	8006eba <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x13a>
 8006e44:	7d7b      	ldrb	r3, [r7, #21]
 8006e46:	2b1c      	cmp	r3, #28
 8006e48:	d137      	bne.n	8006eba <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x13a>
				if(msg_count == 1) {
 8006e4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d107      	bne.n	8006e62 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0xe2>
					printf("Response from BMS [OK]\r\n");
 8006e52:	482d      	ldr	r0, [pc, #180]	; (8006f08 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x188>)
 8006e54:	f006 fca4 	bl	800d7a0 <puts>
					printf("CAN_TBMS_READ_CELL_VOLTAGES | CMD: 0x%02X\r\n", rx_msg[1]);
 8006e58:	7d7b      	ldrb	r3, [r7, #21]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	482b      	ldr	r0, [pc, #172]	; (8006f0c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x18c>)
 8006e5e:	f006 fc19 	bl	800d694 <iprintf>
				}
				pl = rx_msg[2];
 8006e62:	7dbb      	ldrb	r3, [r7, #22]
 8006e64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				//msg_count is equal to the cell_count
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8006e68:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d11b      	bne.n	8006ea8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x128>
 8006e70:	7e7b      	ldrb	r3, [r7, #25]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d114      	bne.n	8006ea8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x128>
					cellVoltage = ((rx_msg[4] << 8) | rx_msg[3]);
 8006e7e:	7e3b      	ldrb	r3, [r7, #24]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	b21a      	sxth	r2, r3
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	b21b      	sxth	r3, r3
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	b21b      	sxth	r3, r3
 8006e8c:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("Secondary Battery Pack - Cell#: %u | Voltage: %u (0.1mV Resolution)\r\n", msg_count, cellVoltage);
 8006e8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006e94:	4619      	mov	r1, r3
 8006e96:	481e      	ldr	r0, [pc, #120]	; (8006f10 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x190>)
 8006e98:	f006 fbfc 	bl	800d694 <iprintf>
					msg_count++;
 8006e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8006ea6:	e011      	b.n	8006ecc <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14c>
				} else {
					printf("Data Corruption\r\n");
 8006ea8:	481a      	ldr	r0, [pc, #104]	; (8006f14 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x194>)
 8006eaa:	f006 fc79 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 8006eae:	23ff      	movs	r3, #255	; 0xff
 8006eb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 8006eb4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006eb8:	e015      	b.n	8006ee6 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x166>
				}

			} else {
				printf("Data Corruption\r\n");
 8006eba:	4816      	ldr	r0, [pc, #88]	; (8006f14 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x194>)
 8006ebc:	f006 fc70 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8006ec0:	23ff      	movs	r3, #255	; 0xff
 8006ec2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8006ec6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006eca:	e00c      	b.n	8006ee6 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x166>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006ecc:	2100      	movs	r1, #0
 8006ece:	480a      	ldr	r0, [pc, #40]	; (8006ef8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 8006ed0:	f002 fd6f 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f47f af77 	bne.w	8006dca <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x4a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 8006ee2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3740      	adds	r7, #64	; 0x40
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	0801244c 	.word	0x0801244c
 8006ef4:	080124ec 	.word	0x080124ec
 8006ef8:	20000200 	.word	0x20000200
 8006efc:	20000004 	.word	0x20000004
 8006f00:	08011c30 	.word	0x08011c30
 8006f04:	08011c4c 	.word	0x08011c4c
 8006f08:	080109f0 	.word	0x080109f0
 8006f0c:	08012478 	.word	0x08012478
 8006f10:	080124a4 	.word	0x080124a4
 8006f14:	08011ca4 	.word	0x08011ca4

08006f18 <TinyBMS_CAN_ReadSettingsValues>:
 * 						   0x01 - Min. settings     0x02 - Max. settings,
 * 						   0x03 - Default settings  0x04 - Current settings
 *
 * 						   RL - Registers to read. Max. 100 (0x64) registers
 */
uint8_t TinyBMS_CAN_ReadSettingsValues(CAN_HandleTypeDef *hcan, uint8_t option, uint8_t rl) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b090      	sub	sp, #64	; 0x40
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
 8006f24:	4613      	mov	r3, r2
 8006f26:	70bb      	strb	r3, [r7, #2]
	printf("TinyBMS_CAN_ReadSettingsValues\r\n");
 8006f28:	4877      	ldr	r0, [pc, #476]	; (8007108 <TinyBMS_CAN_ReadSettingsValues+0x1f0>)
 8006f2a:	f006 fc39 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 8006f2e:	23ff      	movs	r3, #255	; 0xff
 8006f30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t data = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	877b      	strh	r3, [r7, #58]	; 0x3a

	switch(option) {
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d81a      	bhi.n	8006f82 <TinyBMS_CAN_ReadSettingsValues+0x6a>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <TinyBMS_CAN_ReadSettingsValues+0x3c>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f75 	.word	0x08006f75
 8006f60:	08006f7d 	.word	0x08006f7d
	case 0x01:
		printf("0x01 Min Settings\r\n");
 8006f64:	4869      	ldr	r0, [pc, #420]	; (800710c <TinyBMS_CAN_ReadSettingsValues+0x1f4>)
 8006f66:	f006 fc1b 	bl	800d7a0 <puts>
		break;
 8006f6a:	e013      	b.n	8006f94 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x02:
		printf("0x02 Max Settings\r\n");
 8006f6c:	4868      	ldr	r0, [pc, #416]	; (8007110 <TinyBMS_CAN_ReadSettingsValues+0x1f8>)
 8006f6e:	f006 fc17 	bl	800d7a0 <puts>
		break;
 8006f72:	e00f      	b.n	8006f94 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x03:
		printf("0x03 Default Settings\r\n");
 8006f74:	4867      	ldr	r0, [pc, #412]	; (8007114 <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 8006f76:	f006 fc13 	bl	800d7a0 <puts>
		break;
 8006f7a:	e00b      	b.n	8006f94 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x04:
		printf("0x04 Current Settings\r\n");
 8006f7c:	4866      	ldr	r0, [pc, #408]	; (8007118 <TinyBMS_CAN_ReadSettingsValues+0x200>)
 8006f7e:	f006 fc0f 	bl	800d7a0 <puts>
	default:
		printf("Invalid option\r\n");
 8006f82:	4866      	ldr	r0, [pc, #408]	; (800711c <TinyBMS_CAN_ReadSettingsValues+0x204>)
 8006f84:	f006 fc0c 	bl	800d7a0 <puts>
		retval = CMD_FAILURE;
 8006f88:	23ff      	movs	r3, #255	; 0xff
 8006f8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 8006f8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006f92:	e0b5      	b.n	8007100 <TinyBMS_CAN_ReadSettingsValues+0x1e8>
	}

	//Check if number of registers to read is within bounds
	if((rl <= 0) || (rl > 0x64)) {
 8006f94:	78bb      	ldrb	r3, [r7, #2]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <TinyBMS_CAN_ReadSettingsValues+0x88>
 8006f9a:	78bb      	ldrb	r3, [r7, #2]
 8006f9c:	2b64      	cmp	r3, #100	; 0x64
 8006f9e:	d905      	bls.n	8006fac <TinyBMS_CAN_ReadSettingsValues+0x94>
		retval = CMD_FAILURE;
 8006fa0:	23ff      	movs	r3, #255	; 0xff
 8006fa2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 8006fa6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006faa:	e0a9      	b.n	8007100 <TinyBMS_CAN_ReadSettingsValues+0x1e8>
	}

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_SETTINGS_VALUES, option, 0x00, rl, 0x00, 0x00, 0x00, 0x00};
 8006fac:	231d      	movs	r3, #29
 8006fae:	733b      	strb	r3, [r7, #12]
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	737b      	strb	r3, [r7, #13]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73bb      	strb	r3, [r7, #14]
 8006fb8:	78bb      	ldrb	r3, [r7, #2]
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	743b      	strb	r3, [r7, #16]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	747b      	strb	r3, [r7, #17]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	74bb      	strb	r3, [r7, #18]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	74fb      	strb	r3, [r7, #19]
	uint8_t tx_len = 4;
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006fd2:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8006fd6:	f107 030c 	add.w	r3, r7, #12
 8006fda:	4619      	mov	r1, r3
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f001 fc91 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006fe2:	e080      	b.n	80070e6 <TinyBMS_CAN_ReadSettingsValues+0x1ce>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	f107 021c 	add.w	r2, r7, #28
 8006fec:	2100      	movs	r1, #0
 8006fee:	484c      	ldr	r0, [pc, #304]	; (8007120 <TinyBMS_CAN_ReadSettingsValues+0x208>)
 8006ff0:	f002 fbcd 	bl	800978e <HAL_CAN_GetRxMessage>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <TinyBMS_CAN_ReadSettingsValues+0xe6>
			Error_Handler();
 8006ffa:	f001 fdfb 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006ffe:	f240 4103 	movw	r1, #1027	; 0x403
 8007002:	4847      	ldr	r0, [pc, #284]	; (8007120 <TinyBMS_CAN_ReadSettingsValues+0x208>)
 8007004:	f002 fcfd 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <TinyBMS_CAN_ReadSettingsValues+0xfa>
			Error_Handler();
 800700e:	f001 fdf1 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	4b43      	ldr	r3, [pc, #268]	; (8007124 <TinyBMS_CAN_ReadSettingsValues+0x20c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d164      	bne.n	80070e6 <TinyBMS_CAN_ReadSettingsValues+0x1ce>
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	2b00      	cmp	r3, #0
 8007020:	d161      	bne.n	80070e6 <TinyBMS_CAN_ReadSettingsValues+0x1ce>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8007022:	7d3b      	ldrb	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d117      	bne.n	8007058 <TinyBMS_CAN_ReadSettingsValues+0x140>
				printf("Response from BMS [Error]\r\n");
 8007028:	483f      	ldr	r0, [pc, #252]	; (8007128 <TinyBMS_CAN_ReadSettingsValues+0x210>)
 800702a:	f006 fbb9 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 800702e:	7d7b      	ldrb	r3, [r7, #21]
 8007030:	4619      	mov	r1, r3
 8007032:	7dbb      	ldrb	r3, [r7, #22]
 8007034:	461a      	mov	r2, r3
 8007036:	483d      	ldr	r0, [pc, #244]	; (800712c <TinyBMS_CAN_ReadSettingsValues+0x214>)
 8007038:	f006 fb2c 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 800703c:	7dbb      	ldrb	r3, [r7, #22]
 800703e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				reportBMSError(error);
 8007042:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fc3a 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 800704c:	23ff      	movs	r3, #255	; 0xff
 800704e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8007052:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007056:	e053      	b.n	8007100 <TinyBMS_CAN_ReadSettingsValues+0x1e8>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_SETTINGS_VALUES)) {
 8007058:	7d3b      	ldrb	r3, [r7, #20]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d13a      	bne.n	80070d4 <TinyBMS_CAN_ReadSettingsValues+0x1bc>
 800705e:	7d7b      	ldrb	r3, [r7, #21]
 8007060:	2b1d      	cmp	r3, #29
 8007062:	d137      	bne.n	80070d4 <TinyBMS_CAN_ReadSettingsValues+0x1bc>
				if(msg_count == 1) {
 8007064:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007068:	2b01      	cmp	r3, #1
 800706a:	d107      	bne.n	800707c <TinyBMS_CAN_ReadSettingsValues+0x164>
					printf("Response from BMS [OK]\r\n");
 800706c:	4830      	ldr	r0, [pc, #192]	; (8007130 <TinyBMS_CAN_ReadSettingsValues+0x218>)
 800706e:	f006 fb97 	bl	800d7a0 <puts>
					printf("CAN_TBMS_READ_SETTINGS_VALUES | CMD: 0x%02X\r\n", rx_msg[1]);
 8007072:	7d7b      	ldrb	r3, [r7, #21]
 8007074:	4619      	mov	r1, r3
 8007076:	482f      	ldr	r0, [pc, #188]	; (8007134 <TinyBMS_CAN_ReadSettingsValues+0x21c>)
 8007078:	f006 fb0c 	bl	800d694 <iprintf>
				}
				pl = rx_msg[2];
 800707c:	7dbb      	ldrb	r3, [r7, #22]
 800707e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				//msg_count is equal to the settings_count
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8007082:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007086:	2b02      	cmp	r3, #2
 8007088:	d11b      	bne.n	80070c2 <TinyBMS_CAN_ReadSettingsValues+0x1aa>
 800708a:	7e7b      	ldrb	r3, [r7, #25]
 800708c:	461a      	mov	r2, r3
 800708e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007092:	3b01      	subs	r3, #1
 8007094:	429a      	cmp	r2, r3
 8007096:	d114      	bne.n	80070c2 <TinyBMS_CAN_ReadSettingsValues+0x1aa>
					data = ((rx_msg[4] << 8) | rx_msg[3]);
 8007098:	7e3b      	ldrb	r3, [r7, #24]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	b21a      	sxth	r2, r3
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	b21b      	sxth	r3, r3
 80070a2:	4313      	orrs	r3, r2
 80070a4:	b21b      	sxth	r3, r3
 80070a6:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("TinyBMS Setting#: %u | Value: %u\r\n", msg_count, data);
 80070a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80070ae:	4619      	mov	r1, r3
 80070b0:	4821      	ldr	r0, [pc, #132]	; (8007138 <TinyBMS_CAN_ReadSettingsValues+0x220>)
 80070b2:	f006 faef 	bl	800d694 <iprintf>
					msg_count++;
 80070b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070ba:	3301      	adds	r3, #1
 80070bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 80070c0:	e011      	b.n	80070e6 <TinyBMS_CAN_ReadSettingsValues+0x1ce>
				} else {
					printf("Data Corruption\r\n");
 80070c2:	481e      	ldr	r0, [pc, #120]	; (800713c <TinyBMS_CAN_ReadSettingsValues+0x224>)
 80070c4:	f006 fb6c 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 80070c8:	23ff      	movs	r3, #255	; 0xff
 80070ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 80070ce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80070d2:	e015      	b.n	8007100 <TinyBMS_CAN_ReadSettingsValues+0x1e8>
				}

			} else {
				printf("Data Corruption\r\n");
 80070d4:	4819      	ldr	r0, [pc, #100]	; (800713c <TinyBMS_CAN_ReadSettingsValues+0x224>)
 80070d6:	f006 fb63 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80070da:	23ff      	movs	r3, #255	; 0xff
 80070dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 80070e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80070e4:	e00c      	b.n	8007100 <TinyBMS_CAN_ReadSettingsValues+0x1e8>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80070e6:	2100      	movs	r1, #0
 80070e8:	480d      	ldr	r0, [pc, #52]	; (8007120 <TinyBMS_CAN_ReadSettingsValues+0x208>)
 80070ea:	f002 fc62 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f47f af77 	bne.w	8006fe4 <TinyBMS_CAN_ReadSettingsValues+0xcc>
			}
		}
	}
	retval = CMD_SUCCESS;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 80070fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8007100:	4618      	mov	r0, r3
 8007102:	3740      	adds	r7, #64	; 0x40
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	080124f4 	.word	0x080124f4
 800710c:	08012514 	.word	0x08012514
 8007110:	08012528 	.word	0x08012528
 8007114:	0801253c 	.word	0x0801253c
 8007118:	08012554 	.word	0x08012554
 800711c:	08011c20 	.word	0x08011c20
 8007120:	20000200 	.word	0x20000200
 8007124:	20000004 	.word	0x20000004
 8007128:	08011c30 	.word	0x08011c30
 800712c:	08011c4c 	.word	0x08011c4c
 8007130:	080109f0 	.word	0x080109f0
 8007134:	0801256c 	.word	0x0801256c
 8007138:	0801259c 	.word	0x0801259c
 800713c:	08011ca4 	.word	0x08011ca4

08007140 <TinyBMS_CAN_ReadVersion>:
 * 						 	 DATA1 - Hardware version
 * 						 	 DATA2 - Hardware changes version
 * 						 	 DATA3 - Firmware public version
 * 						 	 DATA4 - Firmware internal version
 */
uint8_t TinyBMS_CAN_ReadVersion(CAN_HandleTypeDef *hcan) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b090      	sub	sp, #64	; 0x40
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadVersion\r\n");
 8007148:	4886      	ldr	r0, [pc, #536]	; (8007364 <TinyBMS_CAN_ReadVersion+0x224>)
 800714a:	f006 fb29 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 800714e:	23ff      	movs	r3, #255	; 0xff
 8007150:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t hw_version = 0, hw_changes = 0, firmware_public = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8007160:	2300      	movs	r3, #0
 8007162:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8007166:	2300      	movs	r3, #0
 8007168:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t firmware_internal = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_VERSION, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8007170:	4a7d      	ldr	r2, [pc, #500]	; (8007368 <TinyBMS_CAN_ReadVersion+0x228>)
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800717a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8007184:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007188:	f107 0308 	add.w	r3, r7, #8
 800718c:	4619      	mov	r1, r3
 800718e:	2000      	movs	r0, #0
 8007190:	f001 fbb8 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8007194:	e0d5      	b.n	8007342 <TinyBMS_CAN_ReadVersion+0x202>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8007196:	f107 0310 	add.w	r3, r7, #16
 800719a:	f107 0218 	add.w	r2, r7, #24
 800719e:	2100      	movs	r1, #0
 80071a0:	4872      	ldr	r0, [pc, #456]	; (800736c <TinyBMS_CAN_ReadVersion+0x22c>)
 80071a2:	f002 faf4 	bl	800978e <HAL_CAN_GetRxMessage>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <TinyBMS_CAN_ReadVersion+0x70>
			Error_Handler();
 80071ac:	f001 fd22 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80071b0:	f240 4103 	movw	r1, #1027	; 0x403
 80071b4:	486d      	ldr	r0, [pc, #436]	; (800736c <TinyBMS_CAN_ReadVersion+0x22c>)
 80071b6:	f002 fc24 	bl	8009a02 <HAL_CAN_ActivateNotification>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <TinyBMS_CAN_ReadVersion+0x84>
			Error_Handler();
 80071c0:	f001 fd18 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	4b6a      	ldr	r3, [pc, #424]	; (8007370 <TinyBMS_CAN_ReadVersion+0x230>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	f040 80b9 	bne.w	8007342 <TinyBMS_CAN_ReadVersion+0x202>
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f040 80b5 	bne.w	8007342 <TinyBMS_CAN_ReadVersion+0x202>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80071d8:	7c3b      	ldrb	r3, [r7, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d117      	bne.n	800720e <TinyBMS_CAN_ReadVersion+0xce>
				printf("Response from BMS [Error]\r\n");
 80071de:	4865      	ldr	r0, [pc, #404]	; (8007374 <TinyBMS_CAN_ReadVersion+0x234>)
 80071e0:	f006 fade 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 80071e4:	7c7b      	ldrb	r3, [r7, #17]
 80071e6:	4619      	mov	r1, r3
 80071e8:	7cbb      	ldrb	r3, [r7, #18]
 80071ea:	461a      	mov	r2, r3
 80071ec:	4862      	ldr	r0, [pc, #392]	; (8007378 <TinyBMS_CAN_ReadVersion+0x238>)
 80071ee:	f006 fa51 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 80071f2:	7cbb      	ldrb	r3, [r7, #18]
 80071f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				reportBMSError(error);
 80071f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fb5f 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8007202:	23ff      	movs	r3, #255	; 0xff
 8007204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8007208:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800720c:	e0a6      	b.n	800735c <TinyBMS_CAN_ReadVersion+0x21c>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_VERSION)) {
 800720e:	7c3b      	ldrb	r3, [r7, #16]
 8007210:	2b01      	cmp	r3, #1
 8007212:	f040 808d 	bne.w	8007330 <TinyBMS_CAN_ReadVersion+0x1f0>
 8007216:	7c7b      	ldrb	r3, [r7, #17]
 8007218:	2b1e      	cmp	r3, #30
 800721a:	f040 8089 	bne.w	8007330 <TinyBMS_CAN_ReadVersion+0x1f0>
				printf("Response from BMS [OK]\r\n");
 800721e:	4857      	ldr	r0, [pc, #348]	; (800737c <TinyBMS_CAN_ReadVersion+0x23c>)
 8007220:	f006 fabe 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_VERSION | CMD: 0x%02X\r\n", rx_msg[1]);
 8007224:	7c7b      	ldrb	r3, [r7, #17]
 8007226:	4619      	mov	r1, r3
 8007228:	4855      	ldr	r0, [pc, #340]	; (8007380 <TinyBMS_CAN_ReadVersion+0x240>)
 800722a:	f006 fa33 	bl	800d694 <iprintf>
				pl = rx_msg[2];
 800722e:	7cbb      	ldrb	r3, [r7, #18]
 8007230:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				switch(pl) {
 8007234:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007238:	3b01      	subs	r3, #1
 800723a:	2b04      	cmp	r3, #4
 800723c:	d86e      	bhi.n	800731c <TinyBMS_CAN_ReadVersion+0x1dc>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <TinyBMS_CAN_ReadVersion+0x104>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007259 	.word	0x08007259
 8007248:	0800726d 	.word	0x0800726d
 800724c:	08007293 	.word	0x08007293
 8007250:	0800731d 	.word	0x0800731d
 8007254:	080072cb 	.word	0x080072cb
				case 1: //DATA1
					hw_version = rx_msg[3];
 8007258:	7cfb      	ldrb	r3, [r7, #19]
 800725a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					printf("TinyBMS Hardware Version: %u\r\n", hw_version);
 800725e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007262:	4619      	mov	r1, r3
 8007264:	4847      	ldr	r0, [pc, #284]	; (8007384 <TinyBMS_CAN_ReadVersion+0x244>)
 8007266:	f006 fa15 	bl	800d694 <iprintf>
					break;
 800726a:	e060      	b.n	800732e <TinyBMS_CAN_ReadVersion+0x1ee>
				case 2: //DATA1 + DATA2
					hw_version = rx_msg[3];
 800726c:	7cfb      	ldrb	r3, [r7, #19]
 800726e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 8007272:	7d3b      	ldrb	r3, [r7, #20]
 8007274:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					printf("TinyBMS Hardware Version: %u\r\n", hw_version);
 8007278:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800727c:	4619      	mov	r1, r3
 800727e:	4841      	ldr	r0, [pc, #260]	; (8007384 <TinyBMS_CAN_ReadVersion+0x244>)
 8007280:	f006 fa08 	bl	800d694 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\r\n", hw_changes);
 8007284:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007288:	4619      	mov	r1, r3
 800728a:	483f      	ldr	r0, [pc, #252]	; (8007388 <TinyBMS_CAN_ReadVersion+0x248>)
 800728c:	f006 fa02 	bl	800d694 <iprintf>
					break;
 8007290:	e04d      	b.n	800732e <TinyBMS_CAN_ReadVersion+0x1ee>
				case 3: //DATA1 + DATA2 + DATA3
					hw_version = rx_msg[3];
 8007292:	7cfb      	ldrb	r3, [r7, #19]
 8007294:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 8007298:	7d3b      	ldrb	r3, [r7, #20]
 800729a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					firmware_public = rx_msg[5];
 800729e:	7d7b      	ldrb	r3, [r7, #21]
 80072a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					printf("TinyBMS Hardware Version: %u\r\n", hw_version);
 80072a4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80072a8:	4619      	mov	r1, r3
 80072aa:	4836      	ldr	r0, [pc, #216]	; (8007384 <TinyBMS_CAN_ReadVersion+0x244>)
 80072ac:	f006 f9f2 	bl	800d694 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\r\n", hw_changes);
 80072b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80072b4:	4619      	mov	r1, r3
 80072b6:	4834      	ldr	r0, [pc, #208]	; (8007388 <TinyBMS_CAN_ReadVersion+0x248>)
 80072b8:	f006 f9ec 	bl	800d694 <iprintf>
					printf("TinyBMS Firmware Public Version: %u\r\n", firmware_public);
 80072bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80072c0:	4619      	mov	r1, r3
 80072c2:	4832      	ldr	r0, [pc, #200]	; (800738c <TinyBMS_CAN_ReadVersion+0x24c>)
 80072c4:	f006 f9e6 	bl	800d694 <iprintf>
					break;
 80072c8:	e031      	b.n	800732e <TinyBMS_CAN_ReadVersion+0x1ee>
				case 5: //DATA1 + DATA2 + DATA3 + DATA4
					hw_version = rx_msg[3];
 80072ca:	7cfb      	ldrb	r3, [r7, #19]
 80072cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 80072d0:	7d3b      	ldrb	r3, [r7, #20]
 80072d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					firmware_public = rx_msg[5];
 80072d6:	7d7b      	ldrb	r3, [r7, #21]
 80072d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					firmware_internal = ((rx_msg[7] << 8) | rx_msg[6]);
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	b21a      	sxth	r2, r3
 80072e2:	7dbb      	ldrb	r3, [r7, #22]
 80072e4:	b21b      	sxth	r3, r3
 80072e6:	4313      	orrs	r3, r2
 80072e8:	b21b      	sxth	r3, r3
 80072ea:	873b      	strh	r3, [r7, #56]	; 0x38
					printf("TinyBMS Hardware Version: %u\r\n", hw_version);
 80072ec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80072f0:	4619      	mov	r1, r3
 80072f2:	4824      	ldr	r0, [pc, #144]	; (8007384 <TinyBMS_CAN_ReadVersion+0x244>)
 80072f4:	f006 f9ce 	bl	800d694 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\r\n", hw_changes);
 80072f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80072fc:	4619      	mov	r1, r3
 80072fe:	4822      	ldr	r0, [pc, #136]	; (8007388 <TinyBMS_CAN_ReadVersion+0x248>)
 8007300:	f006 f9c8 	bl	800d694 <iprintf>
					printf("TinyBMS Firmware Public Version: %u\r\n", firmware_public);
 8007304:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007308:	4619      	mov	r1, r3
 800730a:	4820      	ldr	r0, [pc, #128]	; (800738c <TinyBMS_CAN_ReadVersion+0x24c>)
 800730c:	f006 f9c2 	bl	800d694 <iprintf>
					printf("TinyBMS Firmware Internal Version: %u\r\n", firmware_internal);
 8007310:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007312:	4619      	mov	r1, r3
 8007314:	481e      	ldr	r0, [pc, #120]	; (8007390 <TinyBMS_CAN_ReadVersion+0x250>)
 8007316:	f006 f9bd 	bl	800d694 <iprintf>
					break;
 800731a:	e008      	b.n	800732e <TinyBMS_CAN_ReadVersion+0x1ee>
				default:
					printf("Invalid Payload Value\r\n");
 800731c:	481d      	ldr	r0, [pc, #116]	; (8007394 <TinyBMS_CAN_ReadVersion+0x254>)
 800731e:	f006 fa3f 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 8007322:	23ff      	movs	r3, #255	; 0xff
 8007324:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					return retval;
 8007328:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800732c:	e016      	b.n	800735c <TinyBMS_CAN_ReadVersion+0x21c>
				switch(pl) {
 800732e:	e008      	b.n	8007342 <TinyBMS_CAN_ReadVersion+0x202>
				}
			} else {
				printf("Data Corruption\r\n");
 8007330:	4819      	ldr	r0, [pc, #100]	; (8007398 <TinyBMS_CAN_ReadVersion+0x258>)
 8007332:	f006 fa35 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8007336:	23ff      	movs	r3, #255	; 0xff
 8007338:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 800733c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007340:	e00c      	b.n	800735c <TinyBMS_CAN_ReadVersion+0x21c>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8007342:	2100      	movs	r1, #0
 8007344:	4809      	ldr	r0, [pc, #36]	; (800736c <TinyBMS_CAN_ReadVersion+0x22c>)
 8007346:	f002 fb34 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	f47f af22 	bne.w	8007196 <TinyBMS_CAN_ReadVersion+0x56>
			}
		}
	}
	retval = CMD_SUCCESS;
 8007352:	2300      	movs	r3, #0
 8007354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8007358:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800735c:	4618      	mov	r0, r3
 800735e:	3740      	adds	r7, #64	; 0x40
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	080125c0 	.word	0x080125c0
 8007368:	0801269c 	.word	0x0801269c
 800736c:	20000200 	.word	0x20000200
 8007370:	20000004 	.word	0x20000004
 8007374:	08011c30 	.word	0x08011c30
 8007378:	08011c4c 	.word	0x08011c4c
 800737c:	080109f0 	.word	0x080109f0
 8007380:	080125dc 	.word	0x080125dc
 8007384:	08012604 	.word	0x08012604
 8007388:	08012624 	.word	0x08012624
 800738c:	0801264c 	.word	0x0801264c
 8007390:	08012674 	.word	0x08012674
 8007394:	0801196c 	.word	0x0801196c
 8007398:	08011ca4 	.word	0x08011ca4

0800739c <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft>:
 *
 * 						 	 DATA1 - Speed (km/h)
 * 						 	 DATA2 - Distance left until empty battery (km)
 * 						 	 DATA3 - Estimated time left until empty battery (s)
 */
uint8_t TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft(CAN_HandleTypeDef *hcan) {
 800739c:	b580      	push	{r7, lr}
 800739e:	b094      	sub	sp, #80	; 0x50
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft\r\n");
 80073a4:	4876      	ldr	r0, [pc, #472]	; (8007580 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1e4>)
 80073a6:	f006 f9fb 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80073aa:	23ff      	movs	r3, #255	; 0xff
 80073ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0, msg_count = 1;
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80073b6:	2301      	movs	r3, #1
 80073b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_SPEED_DISTANCETIME_LEFT, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80073bc:	4a71      	ldr	r2, [pc, #452]	; (8007584 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1e8>)
 80073be:	f107 030c 	add.w	r3, r7, #12
 80073c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073c6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80073ca:	2301      	movs	r3, #1
 80073cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80073d0:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	4619      	mov	r1, r3
 80073da:	2000      	movs	r0, #0
 80073dc:	f001 fa92 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80073e0:	e0bd      	b.n	800755e <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1c2>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80073e2:	f107 0314 	add.w	r3, r7, #20
 80073e6:	f107 021c 	add.w	r2, r7, #28
 80073ea:	2100      	movs	r1, #0
 80073ec:	4866      	ldr	r0, [pc, #408]	; (8007588 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ec>)
 80073ee:	f002 f9ce 	bl	800978e <HAL_CAN_GetRxMessage>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x60>
			Error_Handler();
 80073f8:	f001 fbfc 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80073fc:	f240 4103 	movw	r1, #1027	; 0x403
 8007400:	4861      	ldr	r0, [pc, #388]	; (8007588 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ec>)
 8007402:	f002 fafe 	bl	8009a02 <HAL_CAN_ActivateNotification>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x74>
			Error_Handler();
 800740c:	f001 fbf2 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	4b5e      	ldr	r3, [pc, #376]	; (800758c <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1f0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	f040 80a1 	bne.w	800755e <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1c2>
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	2b00      	cmp	r3, #0
 8007420:	f040 809d 	bne.w	800755e <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1c2>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8007424:	7d3b      	ldrb	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d117      	bne.n	800745a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0xbe>
				printf("Response from BMS [Error]\r\n");
 800742a:	4859      	ldr	r0, [pc, #356]	; (8007590 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1f4>)
 800742c:	f006 f9b8 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 8007430:	7d7b      	ldrb	r3, [r7, #21]
 8007432:	4619      	mov	r1, r3
 8007434:	7dbb      	ldrb	r3, [r7, #22]
 8007436:	461a      	mov	r2, r3
 8007438:	4856      	ldr	r0, [pc, #344]	; (8007594 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1f8>)
 800743a:	f006 f92b 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 800743e:	7dbb      	ldrb	r3, [r7, #22]
 8007440:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 8007444:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fa39 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 800744e:	23ff      	movs	r3, #255	; 0xff
 8007450:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				return retval;
 8007454:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007458:	e08e      	b.n	8007578 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1dc>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_SPEED_DISTANCETIME_LEFT)) {
 800745a:	7d3b      	ldrb	r3, [r7, #20]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d175      	bne.n	800754c <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1b0>
 8007460:	7d7b      	ldrb	r3, [r7, #21]
 8007462:	2b20      	cmp	r3, #32
 8007464:	d172      	bne.n	800754c <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1b0>
				if(msg_count == 1) {
 8007466:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800746a:	2b01      	cmp	r3, #1
 800746c:	d107      	bne.n	800747e <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0xe2>
					printf("Response from BMS [OK]\r\n");
 800746e:	484a      	ldr	r0, [pc, #296]	; (8007598 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1fc>)
 8007470:	f006 f996 	bl	800d7a0 <puts>
					printf("CAN_TBMS_READ_SPEED_DISTANCETIME_LEFT | CMD: 0x%02X\r\n", rx_msg[1]);
 8007474:	7d7b      	ldrb	r3, [r7, #21]
 8007476:	4619      	mov	r1, r3
 8007478:	4848      	ldr	r0, [pc, #288]	; (800759c <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x200>)
 800747a:	f006 f90b 	bl	800d694 <iprintf>
				}
				pl = rx_msg[2];
 800747e:	7dbb      	ldrb	r3, [r7, #22]
 8007480:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

				//MSG1 - SPEED
				if((pl == 4) && (rx_msg[7] == 0x00)) {
 8007484:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007488:	2b04      	cmp	r3, #4
 800748a:	d122      	bne.n	80074d2 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x136>
 800748c:	7efb      	ldrb	r3, [r7, #27]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d11f      	bne.n	80074d2 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x136>
					uint32_t data1 = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 8007492:	7ebb      	ldrb	r3, [r7, #26]
 8007494:	061a      	lsls	r2, r3, #24
 8007496:	7e7b      	ldrb	r3, [r7, #25]
 8007498:	041b      	lsls	r3, r3, #16
 800749a:	431a      	orrs	r2, r3
 800749c:	7e3b      	ldrb	r3, [r7, #24]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	4313      	orrs	r3, r2
 80074a2:	7dfa      	ldrb	r2, [r7, #23]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	64bb      	str	r3, [r7, #72]	; 0x48
					float speed = data1;
 80074a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					printf("TinyBMS Speed: %f (km/h)\r\n", speed);
 80074b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80074b8:	f7f9 f866 	bl	8000588 <__aeabi_f2d>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4837      	ldr	r0, [pc, #220]	; (80075a0 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x204>)
 80074c2:	f006 f8e7 	bl	800d694 <iprintf>
					msg_count++;
 80074c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80074ca:	3301      	adds	r3, #1
 80074cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				if((pl == 4) && (rx_msg[7] == 0x00)) {
 80074d0:	e03b      	b.n	800754a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ae>
				//MSG2 - DISTANCE LEFT
				} else if((pl == 4) && (rx_msg[7] == 0x01)) {
 80074d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d117      	bne.n	800750a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x16e>
 80074da:	7efb      	ldrb	r3, [r7, #27]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d114      	bne.n	800750a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x16e>
					uint32_t distanceLeft = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 80074e0:	7ebb      	ldrb	r3, [r7, #26]
 80074e2:	061a      	lsls	r2, r3, #24
 80074e4:	7e7b      	ldrb	r3, [r7, #25]
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	431a      	orrs	r2, r3
 80074ea:	7e3b      	ldrb	r3, [r7, #24]
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	4313      	orrs	r3, r2
 80074f0:	7dfa      	ldrb	r2, [r7, #23]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	643b      	str	r3, [r7, #64]	; 0x40
					printf("TinyBMS Distance Left until Empty: %lu (km)\r\n", distanceLeft);
 80074f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074f8:	482a      	ldr	r0, [pc, #168]	; (80075a4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x208>)
 80074fa:	f006 f8cb 	bl	800d694 <iprintf>
					msg_count++;
 80074fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007502:	3301      	adds	r3, #1
 8007504:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				} else if((pl == 4) && (rx_msg[7] == 0x01)) {
 8007508:	e01f      	b.n	800754a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ae>
				//MSG3 - ESTIMATED TIME LEFT
				} else if((pl == 4) && (rx_msg[7] == 0x02)) {
 800750a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800750e:	2b04      	cmp	r3, #4
 8007510:	d112      	bne.n	8007538 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x19c>
 8007512:	7efb      	ldrb	r3, [r7, #27]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d10f      	bne.n	8007538 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x19c>
					uint32_t timeLeft = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 8007518:	7ebb      	ldrb	r3, [r7, #26]
 800751a:	061a      	lsls	r2, r3, #24
 800751c:	7e7b      	ldrb	r3, [r7, #25]
 800751e:	041b      	lsls	r3, r3, #16
 8007520:	431a      	orrs	r2, r3
 8007522:	7e3b      	ldrb	r3, [r7, #24]
 8007524:	021b      	lsls	r3, r3, #8
 8007526:	4313      	orrs	r3, r2
 8007528:	7dfa      	ldrb	r2, [r7, #23]
 800752a:	4313      	orrs	r3, r2
 800752c:	63fb      	str	r3, [r7, #60]	; 0x3c
					printf("TinyBMS Time Left until Empty: %lu (s)\r\n", timeLeft);
 800752e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007530:	481d      	ldr	r0, [pc, #116]	; (80075a8 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x20c>)
 8007532:	f006 f8af 	bl	800d694 <iprintf>
				} else if((pl == 4) && (rx_msg[7] == 0x02)) {
 8007536:	e008      	b.n	800754a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ae>
				} else {
					printf("Data Corruption\r\n");
 8007538:	481c      	ldr	r0, [pc, #112]	; (80075ac <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x210>)
 800753a:	f006 f931 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 800753e:	23ff      	movs	r3, #255	; 0xff
 8007540:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					return retval;
 8007544:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007548:	e016      	b.n	8007578 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1dc>
				if((pl == 4) && (rx_msg[7] == 0x00)) {
 800754a:	e008      	b.n	800755e <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1c2>
				}

			} else {
				printf("Data Corruption\r\n");
 800754c:	4817      	ldr	r0, [pc, #92]	; (80075ac <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x210>)
 800754e:	f006 f927 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8007552:	23ff      	movs	r3, #255	; 0xff
 8007554:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				return retval;
 8007558:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800755c:	e00c      	b.n	8007578 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1dc>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800755e:	2100      	movs	r1, #0
 8007560:	4809      	ldr	r0, [pc, #36]	; (8007588 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ec>)
 8007562:	f002 fa26 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	f47f af3a 	bne.w	80073e2 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x46>
			}
		}
	}
	retval = CMD_SUCCESS;
 800756e:	2300      	movs	r3, #0
 8007570:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	return retval;
 8007574:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
}
 8007578:	4618      	mov	r0, r3
 800757a:	3750      	adds	r7, #80	; 0x50
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	080126a4 	.word	0x080126a4
 8007584:	08012788 	.word	0x08012788
 8007588:	20000200 	.word	0x20000200
 800758c:	20000004 	.word	0x20000004
 8007590:	08011c30 	.word	0x08011c30
 8007594:	08011c4c 	.word	0x08011c4c
 8007598:	080109f0 	.word	0x080109f0
 800759c:	080126d8 	.word	0x080126d8
 80075a0:	08012710 	.word	0x08012710
 80075a4:	0801272c 	.word	0x0801272c
 80075a8:	0801275c 	.word	0x0801275c
 80075ac:	08011ca4 	.word	0x08011ca4

080075b0 <TinyBMS_CAN_ReadNodeID>:
 *
 * @return				-  unsigned 8-bit node ID
 *
 * @note				-  Default after firmware update is 0x01
 */
uint8_t TinyBMS_CAN_ReadNodeID(CAN_HandleTypeDef *hcan) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08e      	sub	sp, #56	; 0x38
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadNodeID\r\n");
 80075b8:	4853      	ldr	r0, [pc, #332]	; (8007708 <TinyBMS_CAN_ReadNodeID+0x158>)
 80075ba:	f006 f8f1 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 80075be:	23ff      	movs	r3, #255	; 0xff
 80075c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_CAN_NODEID, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80075c4:	4a51      	ldr	r2, [pc, #324]	; (800770c <TinyBMS_CAN_ReadNodeID+0x15c>)
 80075c6:	f107 0308 	add.w	r3, r7, #8
 80075ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075ce:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80075d8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80075dc:	f107 0308 	add.w	r3, r7, #8
 80075e0:	4619      	mov	r1, r3
 80075e2:	2000      	movs	r0, #0
 80075e4:	f001 f98e 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80075e8:	e07c      	b.n	80076e4 <TinyBMS_CAN_ReadNodeID+0x134>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80075ea:	f107 0310 	add.w	r3, r7, #16
 80075ee:	f107 0218 	add.w	r2, r7, #24
 80075f2:	2100      	movs	r1, #0
 80075f4:	4846      	ldr	r0, [pc, #280]	; (8007710 <TinyBMS_CAN_ReadNodeID+0x160>)
 80075f6:	f002 f8ca 	bl	800978e <HAL_CAN_GetRxMessage>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <TinyBMS_CAN_ReadNodeID+0x54>
			Error_Handler();
 8007600:	f001 faf8 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8007604:	f240 4103 	movw	r1, #1027	; 0x403
 8007608:	4841      	ldr	r0, [pc, #260]	; (8007710 <TinyBMS_CAN_ReadNodeID+0x160>)
 800760a:	f002 f9fa 	bl	8009a02 <HAL_CAN_ActivateNotification>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <TinyBMS_CAN_ReadNodeID+0x68>
			Error_Handler();
 8007614:	f001 faee 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		//Search for current NodeID by accepting any data frame with Response StdID of 0x241-0x27F (full range)
		if(((RxHeader.StdId >= TINYBMS_CAN_RESPONSE_STDID_MIN) && (RxHeader.StdId <= TINYBMS_CAN_RESPONSE_STDID_MAX)) && (RxHeader.RTR == 0)) {
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800761e:	d961      	bls.n	80076e4 <TinyBMS_CAN_ReadNodeID+0x134>
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007626:	d25d      	bcs.n	80076e4 <TinyBMS_CAN_ReadNodeID+0x134>
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d15a      	bne.n	80076e4 <TinyBMS_CAN_ReadNodeID+0x134>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 800762e:	7c3b      	ldrb	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d117      	bne.n	8007664 <TinyBMS_CAN_ReadNodeID+0xb4>
				printf("Response from BMS [Error]\r\n");
 8007634:	4837      	ldr	r0, [pc, #220]	; (8007714 <TinyBMS_CAN_ReadNodeID+0x164>)
 8007636:	f006 f8b3 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 800763a:	7c7b      	ldrb	r3, [r7, #17]
 800763c:	4619      	mov	r1, r3
 800763e:	7cbb      	ldrb	r3, [r7, #18]
 8007640:	461a      	mov	r2, r3
 8007642:	4835      	ldr	r0, [pc, #212]	; (8007718 <TinyBMS_CAN_ReadNodeID+0x168>)
 8007644:	f006 f826 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 8007648:	7cbb      	ldrb	r3, [r7, #18]
 800764a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				reportBMSError(error);
 800764e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007652:	4618      	mov	r0, r3
 8007654:	f000 f934 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 8007658:	23ff      	movs	r3, #255	; 0xff
 800765a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 800765e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007662:	e04c      	b.n	80076fe <TinyBMS_CAN_ReadNodeID+0x14e>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CAN_NODEID)) {
 8007664:	7c3b      	ldrb	r3, [r7, #16]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d133      	bne.n	80076d2 <TinyBMS_CAN_ReadNodeID+0x122>
 800766a:	7c7b      	ldrb	r3, [r7, #17]
 800766c:	2b28      	cmp	r3, #40	; 0x28
 800766e:	d130      	bne.n	80076d2 <TinyBMS_CAN_ReadNodeID+0x122>
				printf("Response from BMS [OK]\r\n");
 8007670:	482a      	ldr	r0, [pc, #168]	; (800771c <TinyBMS_CAN_ReadNodeID+0x16c>)
 8007672:	f006 f895 	bl	800d7a0 <puts>
				printf("CAN_TBMS_READ_CAN_NODEID | CMD: 0x%02X\r\n", rx_msg[1]);
 8007676:	7c7b      	ldrb	r3, [r7, #17]
 8007678:	4619      	mov	r1, r3
 800767a:	4829      	ldr	r0, [pc, #164]	; (8007720 <TinyBMS_CAN_ReadNodeID+0x170>)
 800767c:	f006 f80a 	bl	800d694 <iprintf>
				uint8_t nodeID_current = rx_msg[2];
 8007680:	7cbb      	ldrb	r3, [r7, #18]
 8007682:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

				//CAN-UART converter CAN Node ID: must be between 0x01 to 0x3F
				if((nodeID_current < TINYBMS_CAN_NODEID_MIN) || (nodeID_current > TINYBMS_CAN_NODEID_MAX)) {
 8007686:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <TinyBMS_CAN_ReadNodeID+0xe6>
 800768e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007692:	2b3f      	cmp	r3, #63	; 0x3f
 8007694:	d908      	bls.n	80076a8 <TinyBMS_CAN_ReadNodeID+0xf8>
					printf("TinyBMS CAN NodeID out of range\r\n");
 8007696:	4823      	ldr	r0, [pc, #140]	; (8007724 <TinyBMS_CAN_ReadNodeID+0x174>)
 8007698:	f006 f882 	bl	800d7a0 <puts>
					retval = CMD_FAILURE;
 800769c:	23ff      	movs	r3, #255	; 0xff
 800769e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					return retval;
 80076a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076a6:	e02a      	b.n	80076fe <TinyBMS_CAN_ReadNodeID+0x14e>
				}
				//Update both StdID's to reflect current NodeID
				TinybmsStdID_Request = (uint32_t)(TINYBMS_CAN_REQUEST_BASE_STDID + nodeID_current);
 80076a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80076ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80076b0:	461a      	mov	r2, r3
 80076b2:	4b1d      	ldr	r3, [pc, #116]	; (8007728 <TinyBMS_CAN_ReadNodeID+0x178>)
 80076b4:	601a      	str	r2, [r3, #0]
				TinybmsStdID_Response = (uint32_t)(TINYBMS_CAN_RESPONSE_BASE_STDID + nodeID_current);
 80076b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80076ba:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80076be:	461a      	mov	r2, r3
 80076c0:	4b1a      	ldr	r3, [pc, #104]	; (800772c <TinyBMS_CAN_ReadNodeID+0x17c>)
 80076c2:	601a      	str	r2, [r3, #0]
				printf("TinyBMS Current CAN NodeID: %d\r\n", nodeID_current);
 80076c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80076c8:	4619      	mov	r1, r3
 80076ca:	4819      	ldr	r0, [pc, #100]	; (8007730 <TinyBMS_CAN_ReadNodeID+0x180>)
 80076cc:	f005 ffe2 	bl	800d694 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CAN_NODEID)) {
 80076d0:	e008      	b.n	80076e4 <TinyBMS_CAN_ReadNodeID+0x134>

			} else {
				printf("Data Corruption\r\n");
 80076d2:	4818      	ldr	r0, [pc, #96]	; (8007734 <TinyBMS_CAN_ReadNodeID+0x184>)
 80076d4:	f006 f864 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 80076d8:	23ff      	movs	r3, #255	; 0xff
 80076da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 80076de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076e2:	e00c      	b.n	80076fe <TinyBMS_CAN_ReadNodeID+0x14e>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80076e4:	2100      	movs	r1, #0
 80076e6:	480a      	ldr	r0, [pc, #40]	; (8007710 <TinyBMS_CAN_ReadNodeID+0x160>)
 80076e8:	f002 f963 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f47f af7b 	bne.w	80075ea <TinyBMS_CAN_ReadNodeID+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return retval;
 80076fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3738      	adds	r7, #56	; 0x38
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	08012790 	.word	0x08012790
 800770c:	0801281c 	.word	0x0801281c
 8007710:	20000200 	.word	0x20000200
 8007714:	08011c30 	.word	0x08011c30
 8007718:	08011c4c 	.word	0x08011c4c
 800771c:	080109f0 	.word	0x080109f0
 8007720:	080127a8 	.word	0x080127a8
 8007724:	080127d4 	.word	0x080127d4
 8007728:	20000000 	.word	0x20000000
 800772c:	20000004 	.word	0x20000004
 8007730:	080127f8 	.word	0x080127f8
 8007734:	08011ca4 	.word	0x08011ca4

08007738 <TinyBMS_CAN_WriteNodeID>:
 *
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  Default after firmware update is 0x01
 */
uint8_t TinyBMS_CAN_WriteNodeID(CAN_HandleTypeDef *hcan, uint8_t nodeID) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b08e      	sub	sp, #56	; 0x38
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
	printf("TinyBMS_CAN_WriteNodeID\r\n");
 8007744:	4853      	ldr	r0, [pc, #332]	; (8007894 <TinyBMS_CAN_WriteNodeID+0x15c>)
 8007746:	f006 f82b 	bl	800d7a0 <puts>
	uint8_t retval = CMD_FAILURE;
 800774a:	23ff      	movs	r3, #255	; 0xff
 800774c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	//CAN-UART converter CAN Node ID: must be between 0x01 to 0x3F
	if((nodeID < TINYBMS_CAN_NODEID_MIN) || (nodeID > TINYBMS_CAN_NODEID_MAX)) {
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <TinyBMS_CAN_WriteNodeID+0x24>
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	2b3f      	cmp	r3, #63	; 0x3f
 800775a:	d908      	bls.n	800776e <TinyBMS_CAN_WriteNodeID+0x36>
		printf("TinyBMS CAN NodeID out of range\r\n");
 800775c:	484e      	ldr	r0, [pc, #312]	; (8007898 <TinyBMS_CAN_WriteNodeID+0x160>)
 800775e:	f006 f81f 	bl	800d7a0 <puts>
		retval = CMD_FAILURE;
 8007762:	23ff      	movs	r3, #255	; 0xff
 8007764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return retval;
 8007768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800776c:	e08e      	b.n	800788c <TinyBMS_CAN_WriteNodeID+0x154>
	}

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_WRITE_CAN_NODEID, nodeID, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800776e:	2329      	movs	r3, #41	; 0x29
 8007770:	723b      	strb	r3, [r7, #8]
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	727b      	strb	r3, [r7, #9]
 8007776:	2300      	movs	r3, #0
 8007778:	72bb      	strb	r3, [r7, #10]
 800777a:	2300      	movs	r3, #0
 800777c:	72fb      	strb	r3, [r7, #11]
 800777e:	2300      	movs	r3, #0
 8007780:	733b      	strb	r3, [r7, #12]
 8007782:	2300      	movs	r3, #0
 8007784:	737b      	strb	r3, [r7, #13]
 8007786:	2300      	movs	r3, #0
 8007788:	73bb      	strb	r3, [r7, #14]
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 2;
 800778e:	2302      	movs	r3, #2
 8007790:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8007794:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	4619      	mov	r1, r3
 800779e:	2000      	movs	r0, #0
 80077a0:	f001 f8b0 	bl	8008904 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80077a4:	e066      	b.n	8007874 <TinyBMS_CAN_WriteNodeID+0x13c>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80077a6:	f107 0310 	add.w	r3, r7, #16
 80077aa:	f107 0218 	add.w	r2, r7, #24
 80077ae:	2100      	movs	r1, #0
 80077b0:	483a      	ldr	r0, [pc, #232]	; (800789c <TinyBMS_CAN_WriteNodeID+0x164>)
 80077b2:	f001 ffec 	bl	800978e <HAL_CAN_GetRxMessage>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <TinyBMS_CAN_WriteNodeID+0x88>
			Error_Handler();
 80077bc:	f001 fa1a 	bl	8008bf4 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80077c0:	f240 4103 	movw	r1, #1027	; 0x403
 80077c4:	4835      	ldr	r0, [pc, #212]	; (800789c <TinyBMS_CAN_WriteNodeID+0x164>)
 80077c6:	f002 f91c 	bl	8009a02 <HAL_CAN_ActivateNotification>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <TinyBMS_CAN_WriteNodeID+0x9c>
			Error_Handler();
 80077d0:	f001 fa10 	bl	8008bf4 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	4b32      	ldr	r3, [pc, #200]	; (80078a0 <TinyBMS_CAN_WriteNodeID+0x168>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d14a      	bne.n	8007874 <TinyBMS_CAN_WriteNodeID+0x13c>
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d147      	bne.n	8007874 <TinyBMS_CAN_WriteNodeID+0x13c>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80077e4:	7c3b      	ldrb	r3, [r7, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d117      	bne.n	800781a <TinyBMS_CAN_WriteNodeID+0xe2>
				printf("Response from BMS [Error]\r\n");
 80077ea:	482e      	ldr	r0, [pc, #184]	; (80078a4 <TinyBMS_CAN_WriteNodeID+0x16c>)
 80077ec:	f005 ffd8 	bl	800d7a0 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_msg[1], rx_msg[2]);
 80077f0:	7c7b      	ldrb	r3, [r7, #17]
 80077f2:	4619      	mov	r1, r3
 80077f4:	7cbb      	ldrb	r3, [r7, #18]
 80077f6:	461a      	mov	r2, r3
 80077f8:	482b      	ldr	r0, [pc, #172]	; (80078a8 <TinyBMS_CAN_WriteNodeID+0x170>)
 80077fa:	f005 ff4b 	bl	800d694 <iprintf>
				uint8_t error = rx_msg[2];
 80077fe:	7cbb      	ldrb	r3, [r7, #18]
 8007800:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				reportBMSError(error);
 8007804:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007808:	4618      	mov	r0, r3
 800780a:	f000 f859 	bl	80078c0 <reportBMSError>
				retval = CMD_FAILURE;
 800780e:	23ff      	movs	r3, #255	; 0xff
 8007810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 8007814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007818:	e038      	b.n	800788c <TinyBMS_CAN_WriteNodeID+0x154>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_WRITE_CAN_NODEID) && (rx_msg[2] == nodeID)) {
 800781a:	7c3b      	ldrb	r3, [r7, #16]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d120      	bne.n	8007862 <TinyBMS_CAN_WriteNodeID+0x12a>
 8007820:	7c7b      	ldrb	r3, [r7, #17]
 8007822:	2b29      	cmp	r3, #41	; 0x29
 8007824:	d11d      	bne.n	8007862 <TinyBMS_CAN_WriteNodeID+0x12a>
 8007826:	7cbb      	ldrb	r3, [r7, #18]
 8007828:	78fa      	ldrb	r2, [r7, #3]
 800782a:	429a      	cmp	r2, r3
 800782c:	d119      	bne.n	8007862 <TinyBMS_CAN_WriteNodeID+0x12a>
				printf("Response from BMS [OK]\r\n");
 800782e:	481f      	ldr	r0, [pc, #124]	; (80078ac <TinyBMS_CAN_WriteNodeID+0x174>)
 8007830:	f005 ffb6 	bl	800d7a0 <puts>
				printf("CAN_TBMS_WRITE_CAN_NODEID | CMD: 0x%02X\r\n", rx_msg[1]);
 8007834:	7c7b      	ldrb	r3, [r7, #17]
 8007836:	4619      	mov	r1, r3
 8007838:	481d      	ldr	r0, [pc, #116]	; (80078b0 <TinyBMS_CAN_WriteNodeID+0x178>)
 800783a:	f005 ff2b 	bl	800d694 <iprintf>
				//Update both StdID's to reflect new NodeID
				TinybmsStdID_Request = (uint32_t)(TINYBMS_CAN_REQUEST_BASE_STDID + nodeID);
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007844:	461a      	mov	r2, r3
 8007846:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <TinyBMS_CAN_WriteNodeID+0x17c>)
 8007848:	601a      	str	r2, [r3, #0]
				TinybmsStdID_Response = (uint32_t)(TINYBMS_CAN_RESPONSE_BASE_STDID + nodeID);
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007850:	461a      	mov	r2, r3
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <TinyBMS_CAN_WriteNodeID+0x168>)
 8007854:	601a      	str	r2, [r3, #0]
				printf("TinyBMS New CAN NodeID: 0x%02X\r\n", nodeID);
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	4619      	mov	r1, r3
 800785a:	4817      	ldr	r0, [pc, #92]	; (80078b8 <TinyBMS_CAN_WriteNodeID+0x180>)
 800785c:	f005 ff1a 	bl	800d694 <iprintf>
 8007860:	e008      	b.n	8007874 <TinyBMS_CAN_WriteNodeID+0x13c>

			} else {
				printf("Data Corruption\r\n");
 8007862:	4816      	ldr	r0, [pc, #88]	; (80078bc <TinyBMS_CAN_WriteNodeID+0x184>)
 8007864:	f005 ff9c 	bl	800d7a0 <puts>
				retval = CMD_FAILURE;
 8007868:	23ff      	movs	r3, #255	; 0xff
 800786a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 800786e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007872:	e00b      	b.n	800788c <TinyBMS_CAN_WriteNodeID+0x154>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8007874:	2100      	movs	r1, #0
 8007876:	4809      	ldr	r0, [pc, #36]	; (800789c <TinyBMS_CAN_WriteNodeID+0x164>)
 8007878:	f002 f89b 	bl	80099b2 <HAL_CAN_GetRxFifoFillLevel>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d191      	bne.n	80077a6 <TinyBMS_CAN_WriteNodeID+0x6e>
			}
		}
	}
	retval = CMD_SUCCESS;
 8007882:	2300      	movs	r3, #0
 8007884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return retval;
 8007888:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800788c:	4618      	mov	r0, r3
 800788e:	3738      	adds	r7, #56	; 0x38
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	08012824 	.word	0x08012824
 8007898:	080127d4 	.word	0x080127d4
 800789c:	20000200 	.word	0x20000200
 80078a0:	20000004 	.word	0x20000004
 80078a4:	08011c30 	.word	0x08011c30
 80078a8:	08011c4c 	.word	0x08011c4c
 80078ac:	080109f0 	.word	0x080109f0
 80078b0:	08012840 	.word	0x08012840
 80078b4:	20000000 	.word	0x20000000
 80078b8:	0801286c 	.word	0x0801286c
 80078bc:	08011ca4 	.word	0x08011ca4

080078c0 <reportBMSError>:

/********************** Error Handling **********************/
static void reportBMSError(uint8_t err) {
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	71fb      	strb	r3, [r7, #7]
	if(err == CMD_ERROR) {
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d103      	bne.n	80078d8 <reportBMSError+0x18>
		printf("CMD ERROR\r\n");
 80078d0:	4809      	ldr	r0, [pc, #36]	; (80078f8 <reportBMSError+0x38>)
 80078d2:	f005 ff65 	bl	800d7a0 <puts>
	} else if(err == CRC_ERROR) {
		printf("CRC ERROR\r\n");
	} else {
		printf("Error: Byte should be 0x00 or 0x01 but was 0x%02X\r\n", err);
	}
}
 80078d6:	e00b      	b.n	80078f0 <reportBMSError+0x30>
	} else if(err == CRC_ERROR) {
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d103      	bne.n	80078e6 <reportBMSError+0x26>
		printf("CRC ERROR\r\n");
 80078de:	4807      	ldr	r0, [pc, #28]	; (80078fc <reportBMSError+0x3c>)
 80078e0:	f005 ff5e 	bl	800d7a0 <puts>
}
 80078e4:	e004      	b.n	80078f0 <reportBMSError+0x30>
		printf("Error: Byte should be 0x00 or 0x01 but was 0x%02X\r\n", err);
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	4619      	mov	r1, r3
 80078ea:	4805      	ldr	r0, [pc, #20]	; (8007900 <reportBMSError+0x40>)
 80078ec:	f005 fed2 	bl	800d694 <iprintf>
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	08012890 	.word	0x08012890
 80078fc:	0801289c 	.word	0x0801289c
 8007900:	080128a8 	.word	0x080128a8

08007904 <CRC16>:

/********************** CRC Calculation **********************/
static uint16_t CRC16(const uint8_t* data, uint16_t length) {
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	807b      	strh	r3, [r7, #2]
	uint8_t tmp;
	uint16_t crcWord = 0xFFFF;
 8007910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007914:	81fb      	strh	r3, [r7, #14]

	while(length--) {
 8007916:	e011      	b.n	800793c <CRC16+0x38>
		tmp = *data++ ^ crcWord;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	89fb      	ldrh	r3, [r7, #14]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	4053      	eors	r3, r2
 8007926:	737b      	strb	r3, [r7, #13]
		crcWord >>= 8;
 8007928:	89fb      	ldrh	r3, [r7, #14]
 800792a:	0a1b      	lsrs	r3, r3, #8
 800792c:	81fb      	strh	r3, [r7, #14]
		crcWord ^= crcTable[tmp];
 800792e:	7b7b      	ldrb	r3, [r7, #13]
 8007930:	4a08      	ldr	r2, [pc, #32]	; (8007954 <CRC16+0x50>)
 8007932:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007936:	89fb      	ldrh	r3, [r7, #14]
 8007938:	4053      	eors	r3, r2
 800793a:	81fb      	strh	r3, [r7, #14]
	while(length--) {
 800793c:	887b      	ldrh	r3, [r7, #2]
 800793e:	1e5a      	subs	r2, r3, #1
 8007940:	807a      	strh	r2, [r7, #2]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e8      	bne.n	8007918 <CRC16+0x14>
	}
	return crcWord;
 8007946:	89fb      	ldrh	r3, [r7, #14]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	08012f08 	.word	0x08012f08

08007958 <NMI_Handler>:
extern TIM_HandleTypeDef htim6;

/******************************************************************************/
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void) {
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	while(1) {}
 800795c:	e7fe      	b.n	800795c <NMI_Handler+0x4>

0800795e <HardFault_Handler>:
}

void HardFault_Handler(void) {
 800795e:	b480      	push	{r7}
 8007960:	af00      	add	r7, sp, #0
	while(1) {}
 8007962:	e7fe      	b.n	8007962 <HardFault_Handler+0x4>

08007964 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
	while(1) {}
 8007968:	e7fe      	b.n	8007968 <MemManage_Handler+0x4>

0800796a <BusFault_Handler>:
}

void BusFault_Handler(void) {
 800796a:	b480      	push	{r7}
 800796c:	af00      	add	r7, sp, #0
	while(1) {}
 800796e:	e7fe      	b.n	800796e <BusFault_Handler+0x4>

08007970 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
	while(1) {}
 8007974:	e7fe      	b.n	8007974 <UsageFault_Handler+0x4>

08007976 <SVC_Handler>:
}

void SVC_Handler(void) {
 8007976:	b480      	push	{r7}
 8007978:	af00      	add	r7, sp, #0

}
 800797a:	bf00      	nop
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <DebugMon_Handler>:

void DebugMon_Handler(void) {
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0

}
 8007988:	bf00      	nop
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <PendSV_Handler>:

void PendSV_Handler(void) {
 8007992:	b480      	push	{r7}
 8007994:	af00      	add	r7, sp, #0

}
 8007996:	bf00      	nop
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <SysTick_Handler>:

void SysTick_Handler(void) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80079a4:	f001 fbd8 	bl	8009158 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80079a8:	f002 fbae 	bl	800a108 <HAL_SYSTICK_IRQHandler>
}
 80079ac:	bf00      	nop
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USART2_IRQHandler>:
/* STM32F7xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/
void USART2_IRQHandler(void) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80079b4:	4802      	ldr	r0, [pc, #8]	; (80079c0 <USART2_IRQHandler+0x10>)
 80079b6:	f003 ff79 	bl	800b8ac <HAL_UART_IRQHandler>
}
 80079ba:	bf00      	nop
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000228 	.word	0x20000228

080079c4 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80079c8:	4802      	ldr	r0, [pc, #8]	; (80079d4 <CAN1_TX_IRQHandler+0x10>)
 80079ca:	f002 f867 	bl	8009a9c <HAL_CAN_IRQHandler>
}
 80079ce:	bf00      	nop
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000200 	.word	0x20000200

080079d8 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80079dc:	4802      	ldr	r0, [pc, #8]	; (80079e8 <CAN1_RX0_IRQHandler+0x10>)
 80079de:	f002 f85d 	bl	8009a9c <HAL_CAN_IRQHandler>
}
 80079e2:	bf00      	nop
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000200 	.word	0x20000200

080079ec <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80079f0:	4802      	ldr	r0, [pc, #8]	; (80079fc <CAN1_RX1_IRQHandler+0x10>)
 80079f2:	f002 f853 	bl	8009a9c <HAL_CAN_IRQHandler>
}
 80079f6:	bf00      	nop
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000200 	.word	0x20000200

08007a00 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8007a04:	4802      	ldr	r0, [pc, #8]	; (8007a10 <CAN1_SCE_IRQHandler+0x10>)
 8007a06:	f002 f849 	bl	8009a9c <HAL_CAN_IRQHandler>
}
 8007a0a:	bf00      	nop
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000200 	.word	0x20000200

08007a14 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8007a18:	4802      	ldr	r0, [pc, #8]	; (8007a24 <TIM6_DAC_IRQHandler+0x10>)
 8007a1a:	f003 fba4 	bl	800b166 <HAL_TIM_IRQHandler>
}
 8007a1e:	bf00      	nop
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000330 	.word	0x20000330

08007a28 <main>:
uint8_t led_num = 0;
uint16_t minCellVoltage = 0, maxCellVoltage = 0;
float packVoltage = 0, packCurrent = 0;
uint32_t initialSOC = 0;

int main(void) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
	uint8_t app_done = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	71fb      	strb	r3, [r7, #7]

	/* Resets all peripherals, initializes the flash interface and Systick. */
	HAL_Init();
 8007a32:	f001 fb54 	bl	80090de <HAL_Init>

	/* Configure SYSCLK to 50MHZ */
	SystemClock_Config_HSI(SYS_CLOCK_FREQ_50MHZ);
 8007a36:	2032      	movs	r0, #50	; 0x32
 8007a38:	f000 fd5a 	bl	80084f0 <SystemClock_Config_HSI>

	/* Initialize all configured peripherals */
	GPIO_Init();
 8007a3c:	f000 fdfa 	bl	8008634 <GPIO_Init>
	UART_Init();
 8007a40:	f000 fe64 	bl	800870c <UART_Init>
	TIM_Init();
 8007a44:	f000 febc 	bl	80087c0 <TIM_Init>
	CAN_Init(CANBITRATE_500KBIT_50MHZ);
 8007a48:	2001      	movs	r0, #1
 8007a4a:	f000 fed5 	bl	80087f8 <CAN_Init>
	CAN_Filter_Config();
 8007a4e:	f000 ff13 	bl	8008878 <CAN_Filter_Config>
	CAN_Begin();
 8007a52:	f000 ff3f 	bl	80088d4 <CAN_Begin>

    printf("*** Spartan Hyperloop 2018-22 ***\r\n");
 8007a56:	4863      	ldr	r0, [pc, #396]	; (8007be4 <main+0x1bc>)
 8007a58:	f005 fea2 	bl	800d7a0 <puts>
	printf("Energus TinyBMS API Test App\r\n");
 8007a5c:	4862      	ldr	r0, [pc, #392]	; (8007be8 <main+0x1c0>)
 8007a5e:	f005 fe9f 	bl	800d7a0 <puts>
	printf("Secondary Battery Pack BMS\r\n");
 8007a62:	4862      	ldr	r0, [pc, #392]	; (8007bec <main+0x1c4>)
 8007a64:	f005 fe9c 	bl	800d7a0 <puts>

    printf("Menu\r\n");
 8007a68:	4861      	ldr	r0, [pc, #388]	; (8007bf0 <main+0x1c8>)
 8007a6a:	f005 fe99 	bl	800d7a0 <puts>
    printf("U: UART API Test\r\n");
 8007a6e:	4861      	ldr	r0, [pc, #388]	; (8007bf4 <main+0x1cc>)
 8007a70:	f005 fe96 	bl	800d7a0 <puts>
    printf("N: CAN API Test\r\n");
 8007a74:	4860      	ldr	r0, [pc, #384]	; (8007bf8 <main+0x1d0>)
 8007a76:	f005 fe93 	bl	800d7a0 <puts>
    printf("C: Monitor Charging\r\n");
 8007a7a:	4860      	ldr	r0, [pc, #384]	; (8007bfc <main+0x1d4>)
 8007a7c:	f005 fe90 	bl	800d7a0 <puts>
    printf("D: Monitor Discharging\r\n");
 8007a80:	485f      	ldr	r0, [pc, #380]	; (8007c00 <main+0x1d8>)
 8007a82:	f005 fe8d 	bl	800d7a0 <puts>
    printf("Q: Quit\r\n");
 8007a86:	485f      	ldr	r0, [pc, #380]	; (8007c04 <main+0x1dc>)
 8007a88:	f005 fe8a 	bl	800d7a0 <puts>

	//Application Menu
	while(!app_done) {
 8007a8c:	e0a0      	b.n	8007bd0 <main+0x1a8>
		char userInput = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	71bb      	strb	r3, [r7, #6]
		scanf("%c", &userInput);
 8007a92:	1dbb      	adds	r3, r7, #6
 8007a94:	4619      	mov	r1, r3
 8007a96:	485c      	ldr	r0, [pc, #368]	; (8007c08 <main+0x1e0>)
 8007a98:	f005 fe8a 	bl	800d7b0 <iscanf>

		switch(userInput) {
 8007a9c:	79bb      	ldrb	r3, [r7, #6]
 8007a9e:	3b43      	subs	r3, #67	; 0x43
 8007aa0:	2b32      	cmp	r3, #50	; 0x32
 8007aa2:	f200 808f 	bhi.w	8007bc4 <main+0x19c>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <main+0x84>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007b99 	.word	0x08007b99
 8007ab0:	08007ba9 	.word	0x08007ba9
 8007ab4:	08007bc5 	.word	0x08007bc5
 8007ab8:	08007bc5 	.word	0x08007bc5
 8007abc:	08007bc5 	.word	0x08007bc5
 8007ac0:	08007bc5 	.word	0x08007bc5
 8007ac4:	08007bc5 	.word	0x08007bc5
 8007ac8:	08007bc5 	.word	0x08007bc5
 8007acc:	08007bc5 	.word	0x08007bc5
 8007ad0:	08007bc5 	.word	0x08007bc5
 8007ad4:	08007bc5 	.word	0x08007bc5
 8007ad8:	08007b89 	.word	0x08007b89
 8007adc:	08007bc5 	.word	0x08007bc5
 8007ae0:	08007bc5 	.word	0x08007bc5
 8007ae4:	08007bb9 	.word	0x08007bb9
 8007ae8:	08007bc5 	.word	0x08007bc5
 8007aec:	08007bc5 	.word	0x08007bc5
 8007af0:	08007bc5 	.word	0x08007bc5
 8007af4:	08007b79 	.word	0x08007b79
 8007af8:	08007bc5 	.word	0x08007bc5
 8007afc:	08007bc5 	.word	0x08007bc5
 8007b00:	08007bc5 	.word	0x08007bc5
 8007b04:	08007bc5 	.word	0x08007bc5
 8007b08:	08007bc5 	.word	0x08007bc5
 8007b0c:	08007bc5 	.word	0x08007bc5
 8007b10:	08007bc5 	.word	0x08007bc5
 8007b14:	08007bc5 	.word	0x08007bc5
 8007b18:	08007bc5 	.word	0x08007bc5
 8007b1c:	08007bc5 	.word	0x08007bc5
 8007b20:	08007bc5 	.word	0x08007bc5
 8007b24:	08007bc5 	.word	0x08007bc5
 8007b28:	08007bc5 	.word	0x08007bc5
 8007b2c:	08007b99 	.word	0x08007b99
 8007b30:	08007ba9 	.word	0x08007ba9
 8007b34:	08007bc5 	.word	0x08007bc5
 8007b38:	08007bc5 	.word	0x08007bc5
 8007b3c:	08007bc5 	.word	0x08007bc5
 8007b40:	08007bc5 	.word	0x08007bc5
 8007b44:	08007bc5 	.word	0x08007bc5
 8007b48:	08007bc5 	.word	0x08007bc5
 8007b4c:	08007bc5 	.word	0x08007bc5
 8007b50:	08007bc5 	.word	0x08007bc5
 8007b54:	08007bc5 	.word	0x08007bc5
 8007b58:	08007b89 	.word	0x08007b89
 8007b5c:	08007bc5 	.word	0x08007bc5
 8007b60:	08007bc5 	.word	0x08007bc5
 8007b64:	08007bb9 	.word	0x08007bb9
 8007b68:	08007bc5 	.word	0x08007bc5
 8007b6c:	08007bc5 	.word	0x08007bc5
 8007b70:	08007bc5 	.word	0x08007bc5
 8007b74:	08007b79 	.word	0x08007b79
		//UART API Test
		case 'u':
		case 'U':
			printf("UART API Test..\r\n");
 8007b78:	4824      	ldr	r0, [pc, #144]	; (8007c0c <main+0x1e4>)
 8007b7a:	f005 fe11 	bl	800d7a0 <puts>
			UART_Test_API();
 8007b7e:	f000 f851 	bl	8007c24 <UART_Test_API>
			app_done = 1;
 8007b82:	2301      	movs	r3, #1
 8007b84:	71fb      	strb	r3, [r7, #7]
			break;
 8007b86:	e023      	b.n	8007bd0 <main+0x1a8>

		//CAN API Test
		case 'n':
		case 'N':
			printf("CAN API Test..\r\n");
 8007b88:	4821      	ldr	r0, [pc, #132]	; (8007c10 <main+0x1e8>)
 8007b8a:	f005 fe09 	bl	800d7a0 <puts>
			CAN_Test_API();
 8007b8e:	f000 f9c7 	bl	8007f20 <CAN_Test_API>
			app_done = 1;
 8007b92:	2301      	movs	r3, #1
 8007b94:	71fb      	strb	r3, [r7, #7]
			break;
 8007b96:	e01b      	b.n	8007bd0 <main+0x1a8>

		//Monitor Charging
		case 'c':
		case 'C':
			printf("Monitor Charging..\r\n");
 8007b98:	481e      	ldr	r0, [pc, #120]	; (8007c14 <main+0x1ec>)
 8007b9a:	f005 fe01 	bl	800d7a0 <puts>
			TinyBMS_MonitorCharging();
 8007b9e:	f000 fabd 	bl	800811c <TinyBMS_MonitorCharging>
			app_done = 1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	71fb      	strb	r3, [r7, #7]
			break;
 8007ba6:	e013      	b.n	8007bd0 <main+0x1a8>

		//Monitor Discharging
		case 'd':
		case 'D':
			printf("Monitor Discharging..\r\n");
 8007ba8:	481b      	ldr	r0, [pc, #108]	; (8007c18 <main+0x1f0>)
 8007baa:	f005 fdf9 	bl	800d7a0 <puts>
			TinyBMS_MonitorDischarging();
 8007bae:	f000 fb3b 	bl	8008228 <TinyBMS_MonitorDischarging>
			app_done = 1;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	71fb      	strb	r3, [r7, #7]
			break;
 8007bb6:	e00b      	b.n	8007bd0 <main+0x1a8>

		//Quit
		case 'q':
		case 'Q':
			printf("Exiting..\r\n");
 8007bb8:	4818      	ldr	r0, [pc, #96]	; (8007c1c <main+0x1f4>)
 8007bba:	f005 fdf1 	bl	800d7a0 <puts>
			app_done = 1;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	71fb      	strb	r3, [r7, #7]
			break;
 8007bc2:	e005      	b.n	8007bd0 <main+0x1a8>

		//Invalid
		default:
			printf("Invalid input.\r\n");
 8007bc4:	4816      	ldr	r0, [pc, #88]	; (8007c20 <main+0x1f8>)
 8007bc6:	f005 fdeb 	bl	800d7a0 <puts>
			app_done = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	71fb      	strb	r3, [r7, #7]
			break;
 8007bce:	bf00      	nop
	while(!app_done) {
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f43f af5b 	beq.w	8007a8e <main+0x66>
		}
	}
	return 0;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	080128dc 	.word	0x080128dc
 8007be8:	08012900 	.word	0x08012900
 8007bec:	08012920 	.word	0x08012920
 8007bf0:	0801293c 	.word	0x0801293c
 8007bf4:	08012944 	.word	0x08012944
 8007bf8:	08012958 	.word	0x08012958
 8007bfc:	0801296c 	.word	0x0801296c
 8007c00:	08012984 	.word	0x08012984
 8007c04:	0801299c 	.word	0x0801299c
 8007c08:	080129a8 	.word	0x080129a8
 8007c0c:	080129ac 	.word	0x080129ac
 8007c10:	080129c0 	.word	0x080129c0
 8007c14:	080129d0 	.word	0x080129d0
 8007c18:	080129e4 	.word	0x080129e4
 8007c1c:	080129fc 	.word	0x080129fc
 8007c20:	08012a08 	.word	0x08012a08

08007c24 <UART_Test_API>:

void UART_Test_API(void) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08e      	sub	sp, #56	; 0x38
 8007c28:	af02      	add	r7, sp, #8
	int8_t option = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	//rl: registers to read/write | pl: payload length in bytes
	uint8_t rl = 0, pl = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007c36:	2300      	movs	r3, #0
 8007c38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint16_t addr = 0x00;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	857b      	strh	r3, [r7, #42]	; 0x2a

	/*** Toggle comments to test specific TinyBMS API -- Hangs in while loop unless success ***/
	//1.1.1 ACK
	while(TinyBMS_UART_ACK(&huart2) != CMD_SUCCESS) {}
 8007c40:	bf00      	nop
 8007c42:	48b2      	ldr	r0, [pc, #712]	; (8007f0c <UART_Test_API+0x2e8>)
 8007c44:	f7f9 f952 	bl	8000eec <TinyBMS_UART_ACK>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f9      	bne.n	8007c42 <UART_Test_API+0x1e>

	//1.1.2 ReadRegBlock
	rl = 16;
 8007c4e:	2310      	movs	r3, #16
 8007c50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	addr = CELL1_VOLTAGE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	857b      	strh	r3, [r7, #42]	; 0x2a
	while(TinyBMS_UART_ReadRegBlock(&huart2, rl, addr) != CMD_SUCCESS) {}
 8007c58:	bf00      	nop
 8007c5a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007c5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c60:	4619      	mov	r1, r3
 8007c62:	48aa      	ldr	r0, [pc, #680]	; (8007f0c <UART_Test_API+0x2e8>)
 8007c64:	f7f9 fa12 	bl	800108c <TinyBMS_UART_ReadRegBlock>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f5      	bne.n	8007c5a <UART_Test_API+0x36>

	//1.1.3 ReadRegIndividual
	pl = 10;
 8007c6e:	230a      	movs	r3, #10
 8007c70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint16_t addrs1[5] = { BMS_LIFETIME_COUNTER, ESTIMATED_TIME_LEFT,
 8007c74:	4aa6      	ldr	r2, [pc, #664]	; (8007f10 <UART_Test_API+0x2ec>)
 8007c76:	f107 0320 	add.w	r3, r7, #32
 8007c7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c7c:	c303      	stmia	r3!, {r0, r1}
 8007c7e:	801a      	strh	r2, [r3, #0]
						   BATTERY_PACK_VOLTAGE, BATTERY_PACK_CURRENT,
						   BMS_ONLINE_STATUS };
	while(TinyBMS_UART_ReadRegIndividual(&huart2, pl, addrs1) != CMD_SUCCESS) {}
 8007c80:	bf00      	nop
 8007c82:	f107 0220 	add.w	r2, r7, #32
 8007c86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	489f      	ldr	r0, [pc, #636]	; (8007f0c <UART_Test_API+0x2e8>)
 8007c8e:	f7f9 fbf1 	bl	8001474 <TinyBMS_UART_ReadRegIndividual>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f4      	bne.n	8007c82 <UART_Test_API+0x5e>

	//1.1.4 WriteRegBlock
	pl = 8;
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	addr = OVERVOLTAGE_CUTOFF;
 8007c9e:	f240 133b 	movw	r3, #315	; 0x13b
 8007ca2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t data1[4] = {4200, 3000, 50, 25};
 8007ca4:	4a9b      	ldr	r2, [pc, #620]	; (8007f14 <UART_Test_API+0x2f0>)
 8007ca6:	f107 0318 	add.w	r3, r7, #24
 8007caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cae:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Writing to 4 registers (2bytes each) starting with: OVERVOLTAGE_CUTOFF,
	 * UNDERVOLTAGE_CUTOFF, DISCHARGE_OVERCURRENT_CUTOFF, CHARGE_OVERCURRENT_CUTOFF */
	while(TinyBMS_UART_WriteRegBlock(&huart2, pl, addr, data1) != CMD_SUCCESS) {}
 8007cb2:	bf00      	nop
 8007cb4:	f107 0318 	add.w	r3, r7, #24
 8007cb8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007cba:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8007cbe:	4893      	ldr	r0, [pc, #588]	; (8007f0c <UART_Test_API+0x2e8>)
 8007cc0:	f7f9 fe58 	bl	8001974 <TinyBMS_UART_WriteRegBlock>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1f4      	bne.n	8007cb4 <UART_Test_API+0x90>

	//1.1.5 WriteRegIndividual
	pl = 8;
 8007cca:	2308      	movs	r3, #8
 8007ccc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint16_t addrs2[4] = { FULLYCHARGED_VOLTAGE, FULLYDISCHARGED_VOLTAGE,
 8007cd0:	4a91      	ldr	r2, [pc, #580]	; (8007f18 <UART_Test_API+0x2f4>)
 8007cd2:	f107 0310 	add.w	r3, r7, #16
 8007cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cda:	e883 0003 	stmia.w	r3, {r0, r1}
							  BATTERY_CAPACITY, NUMBER_OF_SERIES_CELLS };
	uint16_t data2[4] = {4200, 3000, 5000, 7};
 8007cde:	4a8f      	ldr	r2, [pc, #572]	; (8007f1c <UART_Test_API+0x2f8>)
 8007ce0:	f107 0308 	add.w	r3, r7, #8
 8007ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ce8:	e883 0003 	stmia.w	r3, {r0, r1}
	while(TinyBMS_UART_WriteRegIndividual(&huart2, pl, addrs2, data2) != CMD_SUCCESS) {}
 8007cec:	bf00      	nop
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	f107 0210 	add.w	r2, r7, #16
 8007cf6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8007cfa:	4884      	ldr	r0, [pc, #528]	; (8007f0c <UART_Test_API+0x2e8>)
 8007cfc:	f7fa f862 	bl	8001dc4 <TinyBMS_UART_WriteRegIndividual>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1f3      	bne.n	8007cee <UART_Test_API+0xca>

	//1.1.6 ReadRegBlockMODBUS
	addr = CELL1_VOLTAGE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	857b      	strh	r3, [r7, #42]	; 0x2a
	rl = 16;
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	while(TinyBMS_UART_ReadRegBlockMODBUS(&huart2, addr, rl) != CMD_SUCCESS) {}
 8007d10:	bf00      	nop
 8007d12:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007d16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d18:	4619      	mov	r1, r3
 8007d1a:	487c      	ldr	r0, [pc, #496]	; (8007f0c <UART_Test_API+0x2e8>)
 8007d1c:	f7fa fa92 	bl	8002244 <TinyBMS_UART_ReadRegBlockMODBUS>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f5      	bne.n	8007d12 <UART_Test_API+0xee>

	//1.1.7 WriteRegBlockMODBUS
	addr = OVERVOLTAGE_CUTOFF;
 8007d26:	f240 133b 	movw	r3, #315	; 0x13b
 8007d2a:	857b      	strh	r3, [r7, #42]	; 0x2a
	rl = 4;
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	pl = 8;
 8007d32:	2308      	movs	r3, #8
 8007d34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint16_t data3[4] = {4200, 3000, 50, 25};
 8007d38:	4a76      	ldr	r2, [pc, #472]	; (8007f14 <UART_Test_API+0x2f0>)
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d40:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Writing to 4 registers (2bytes each) starting with: OVERVOLTAGE_CUTOFF,
	 * UNDERVOLTAGE_CUTOFF, DISCHARGE_OVERCURRENT_CUTOFF, CHARGE_OVERCURRENT_CUTOFF */
	while(TinyBMS_UART_WriteRegBlockMODBUS(&huart2, addr, rl, pl, data3) != CMD_SUCCESS) {}
 8007d44:	bf00      	nop
 8007d46:	f897 002d 	ldrb.w	r0, [r7, #45]	; 0x2d
 8007d4a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007d4e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007d50:	463b      	mov	r3, r7
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	4603      	mov	r3, r0
 8007d56:	486d      	ldr	r0, [pc, #436]	; (8007f0c <UART_Test_API+0x2e8>)
 8007d58:	f7fa fc6c 	bl	8002634 <TinyBMS_UART_WriteRegBlockMODBUS>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f1      	bne.n	8007d46 <UART_Test_API+0x122>

	//1.1.8 ResetClearEventsStatistics
	option = TINYBMS_CLEAR_EVENTS;
 8007d62:	2301      	movs	r3, #1
 8007d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, option) != CMD_SUCCESS) {}
 8007d68:	bf00      	nop
 8007d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4866      	ldr	r0, [pc, #408]	; (8007f0c <UART_Test_API+0x2e8>)
 8007d72:	f7fa fe79 	bl	8002a68 <TinyBMS_UART_ResetClearEventsStatistics>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f6      	bne.n	8007d6a <UART_Test_API+0x146>
	option = TINYBMS_CLEAR_STATS;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, option) != CMD_SUCCESS) {}
 8007d82:	bf00      	nop
 8007d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4860      	ldr	r0, [pc, #384]	; (8007f0c <UART_Test_API+0x2e8>)
 8007d8c:	f7fa fe6c 	bl	8002a68 <TinyBMS_UART_ResetClearEventsStatistics>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f6      	bne.n	8007d84 <UART_Test_API+0x160>
	option = TINYBMS_RESET_BMS;
 8007d96:	2305      	movs	r3, #5
 8007d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, option) != CMD_SUCCESS) {}
 8007d9c:	bf00      	nop
 8007d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007da2:	4619      	mov	r1, r3
 8007da4:	4859      	ldr	r0, [pc, #356]	; (8007f0c <UART_Test_API+0x2e8>)
 8007da6:	f7fa fe5f 	bl	8002a68 <TinyBMS_UART_ResetClearEventsStatistics>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f6      	bne.n	8007d9e <UART_Test_API+0x17a>

	//1.1.9 ReadNewestEvents
	while(TinyBMS_UART_ReadNewestEvents(&huart2) != CMD_SUCCESS) {}
 8007db0:	bf00      	nop
 8007db2:	4856      	ldr	r0, [pc, #344]	; (8007f0c <UART_Test_API+0x2e8>)
 8007db4:	f7fa ff80 	bl	8002cb8 <TinyBMS_UART_ReadNewestEvents>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f9      	bne.n	8007db2 <UART_Test_API+0x18e>

	//1.1.10 ReadAllEvents
	while(TinyBMS_UART_ReadAllEvents(&huart2) != CMD_SUCCESS) {}
 8007dbe:	bf00      	nop
 8007dc0:	4852      	ldr	r0, [pc, #328]	; (8007f0c <UART_Test_API+0x2e8>)
 8007dc2:	f7fb f981 	bl	80030c8 <TinyBMS_UART_ReadAllEvents>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f9      	bne.n	8007dc0 <UART_Test_API+0x19c>

	//1.1.11 ReadBatteryPackVoltage
	while(TinyBMS_UART_ReadBatteryPackVoltage(&huart2) != CMD_SUCCESS) {}
 8007dcc:	bf00      	nop
 8007dce:	484f      	ldr	r0, [pc, #316]	; (8007f0c <UART_Test_API+0x2e8>)
 8007dd0:	f7fb fb82 	bl	80034d8 <TinyBMS_UART_ReadBatteryPackVoltage>
 8007dd4:	eef0 7a40 	vmov.f32	s15, s0
 8007dd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de0:	d1f5      	bne.n	8007dce <UART_Test_API+0x1aa>

	//1.1.12 ReadBatteryPackCurrent
	while(TinyBMS_UART_ReadBatteryPackCurrent(&huart2) != CMD_SUCCESS) {}
 8007de2:	bf00      	nop
 8007de4:	4849      	ldr	r0, [pc, #292]	; (8007f0c <UART_Test_API+0x2e8>)
 8007de6:	f7fb fc7d 	bl	80036e4 <TinyBMS_UART_ReadBatteryPackCurrent>
 8007dea:	eef0 7a40 	vmov.f32	s15, s0
 8007dee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df6:	d1f5      	bne.n	8007de4 <UART_Test_API+0x1c0>

	//1.1.13 ReadBatteryPackMaxCellVoltage
	while(TinyBMS_UART_ReadBatteryPackMaxCellVoltage(&huart2) != CMD_SUCCESS) {}
 8007df8:	bf00      	nop
 8007dfa:	4844      	ldr	r0, [pc, #272]	; (8007f0c <UART_Test_API+0x2e8>)
 8007dfc:	f7fb fd78 	bl	80038f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f9      	bne.n	8007dfa <UART_Test_API+0x1d6>

	//1.1.14 ReadBatteryPackMinCellVoltage
	while(TinyBMS_UART_ReadBatteryPackMinCellVoltage(&huart2) != CMD_SUCCESS) {}
 8007e06:	bf00      	nop
 8007e08:	4840      	ldr	r0, [pc, #256]	; (8007f0c <UART_Test_API+0x2e8>)
 8007e0a:	f7fb fe69 	bl	8003ae0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1f9      	bne.n	8007e08 <UART_Test_API+0x1e4>

	//1.1.15 ReadOnlineStatus
	while(TinyBMS_UART_ReadOnlineStatus(&huart2) != CMD_SUCCESS) {}
 8007e14:	bf00      	nop
 8007e16:	483d      	ldr	r0, [pc, #244]	; (8007f0c <UART_Test_API+0x2e8>)
 8007e18:	f7fb ff5a 	bl	8003cd0 <TinyBMS_UART_ReadOnlineStatus>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f9      	bne.n	8007e16 <UART_Test_API+0x1f2>

	//1.1.16 ReadLifetimeCounter
	while(TinyBMS_UART_ReadLifetimeCounter(&huart2) != CMD_SUCCESS) {}
 8007e22:	bf00      	nop
 8007e24:	4839      	ldr	r0, [pc, #228]	; (8007f0c <UART_Test_API+0x2e8>)
 8007e26:	f7fc f897 	bl	8003f58 <TinyBMS_UART_ReadLifetimeCounter>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f9      	bne.n	8007e24 <UART_Test_API+0x200>

	//1.1.17 ReadEstimatedSOCValue
	while(TinyBMS_UART_ReadEstimatedSOCValue(&huart2) != CMD_SUCCESS) {}
 8007e30:	bf00      	nop
 8007e32:	4836      	ldr	r0, [pc, #216]	; (8007f0c <UART_Test_API+0x2e8>)
 8007e34:	f7fc f986 	bl	8004144 <TinyBMS_UART_ReadEstimatedSOCValue>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f9      	bne.n	8007e32 <UART_Test_API+0x20e>

	//1.1.18 ReadDeviceTemperatures
	while(TinyBMS_UART_ReadDeviceTemperatures(&huart2) != CMD_SUCCESS) {}
 8007e3e:	bf00      	nop
 8007e40:	4832      	ldr	r0, [pc, #200]	; (8007f0c <UART_Test_API+0x2e8>)
 8007e42:	f7fc fa75 	bl	8004330 <TinyBMS_UART_ReadDeviceTemperatures>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f9      	bne.n	8007e40 <UART_Test_API+0x21c>

	//1.1.19 ReadBatteryPackCellVoltages
	while(TinyBMS_UART_ReadBatteryPackCellVoltages(&huart2) != CMD_SUCCESS) {}
 8007e4c:	bf00      	nop
 8007e4e:	482f      	ldr	r0, [pc, #188]	; (8007f0c <UART_Test_API+0x2e8>)
 8007e50:	f7fc fbe4 	bl	800461c <TinyBMS_UART_ReadBatteryPackCellVoltages>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f9      	bne.n	8007e4e <UART_Test_API+0x22a>

	//1.1.20 ReadSettingsValues
	rl = 100; //Registers to read: Max. 100 (0x64) registers
 8007e5a:	2364      	movs	r3, #100	; 0x64
 8007e5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	option = TINYBMS_SETTINGS_MIN;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(TinyBMS_UART_ReadSettingsValues(&huart2, option, rl) != CMD_SUCCESS) {}
 8007e66:	bf00      	nop
 8007e68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e6c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007e70:	4619      	mov	r1, r3
 8007e72:	4826      	ldr	r0, [pc, #152]	; (8007f0c <UART_Test_API+0x2e8>)
 8007e74:	f7fc fd76 	bl	8004964 <TinyBMS_UART_ReadSettingsValues>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f4      	bne.n	8007e68 <UART_Test_API+0x244>
	option = TINYBMS_SETTINGS_MAX;
 8007e7e:	2302      	movs	r3, #2
 8007e80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(TinyBMS_UART_ReadSettingsValues(&huart2, option, rl) != CMD_SUCCESS) {}
 8007e84:	bf00      	nop
 8007e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e8a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007e8e:	4619      	mov	r1, r3
 8007e90:	481e      	ldr	r0, [pc, #120]	; (8007f0c <UART_Test_API+0x2e8>)
 8007e92:	f7fc fd67 	bl	8004964 <TinyBMS_UART_ReadSettingsValues>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1f4      	bne.n	8007e86 <UART_Test_API+0x262>
	option = TINYBMS_SETTINGS_DEFAULT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(TinyBMS_UART_ReadSettingsValues(&huart2, option, rl) != CMD_SUCCESS) {}
 8007ea2:	bf00      	nop
 8007ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ea8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007eac:	4619      	mov	r1, r3
 8007eae:	4817      	ldr	r0, [pc, #92]	; (8007f0c <UART_Test_API+0x2e8>)
 8007eb0:	f7fc fd58 	bl	8004964 <TinyBMS_UART_ReadSettingsValues>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f4      	bne.n	8007ea4 <UART_Test_API+0x280>
	option = TINYBMS_SETTINGS_CURRENT;
 8007eba:	2304      	movs	r3, #4
 8007ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while(TinyBMS_UART_ReadSettingsValues(&huart2, option, rl) != CMD_SUCCESS) {}
 8007ec0:	bf00      	nop
 8007ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ec6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007eca:	4619      	mov	r1, r3
 8007ecc:	480f      	ldr	r0, [pc, #60]	; (8007f0c <UART_Test_API+0x2e8>)
 8007ece:	f7fc fd49 	bl	8004964 <TinyBMS_UART_ReadSettingsValues>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1f4      	bne.n	8007ec2 <UART_Test_API+0x29e>

	//1.1.21 ReadVersion
	while(TinyBMS_UART_ReadVersion(&huart2) != CMD_SUCCESS) {}
 8007ed8:	bf00      	nop
 8007eda:	480c      	ldr	r0, [pc, #48]	; (8007f0c <UART_Test_API+0x2e8>)
 8007edc:	f7fc ff78 	bl	8004dd0 <TinyBMS_UART_ReadVersion>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f9      	bne.n	8007eda <UART_Test_API+0x2b6>

	//1.1.22 ReadVersionExtended
	while(TinyBMS_UART_ReadVersionExtended(&huart2) != CMD_SUCCESS) {}
 8007ee6:	bf00      	nop
 8007ee8:	4808      	ldr	r0, [pc, #32]	; (8007f0c <UART_Test_API+0x2e8>)
 8007eea:	f7fd f933 	bl	8005154 <TinyBMS_UART_ReadVersionExtended>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1f9      	bne.n	8007ee8 <UART_Test_API+0x2c4>

	//1.1.23 ReadCalcSpeedDistanceLeftEstTimeLeft
	while(TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft(&huart2) != CMD_SUCCESS) {}
 8007ef4:	bf00      	nop
 8007ef6:	4805      	ldr	r0, [pc, #20]	; (8007f0c <UART_Test_API+0x2e8>)
 8007ef8:	f7fd fb52 	bl	80055a0 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f9      	bne.n	8007ef6 <UART_Test_API+0x2d2>
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	3730      	adds	r7, #48	; 0x30
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000228 	.word	0x20000228
 8007f10:	08012a18 	.word	0x08012a18
 8007f14:	08012a24 	.word	0x08012a24
 8007f18:	08012a2c 	.word	0x08012a2c
 8007f1c:	08012a34 	.word	0x08012a34

08007f20 <CAN_Test_API>:

void CAN_Test_API(void) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
	int8_t option = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
	uint8_t rl = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73bb      	strb	r3, [r7, #14]
	uint16_t addr = 0x00;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	81bb      	strh	r3, [r7, #12]

	/*** Toggle comments to test specific TinyBMS API -- Hangs in while loop unless success ***/
	//2.1.1 ResetClearEventsStatistics
	option = TINYBMS_CLEAR_EVENTS;
 8007f32:	2301      	movs	r3, #1
 8007f34:	73fb      	strb	r3, [r7, #15]
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, option) != CMD_SUCCESS) {}
 8007f36:	bf00      	nop
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4875      	ldr	r0, [pc, #468]	; (8008114 <CAN_Test_API+0x1f4>)
 8007f3e:	f7fd fc5f 	bl	8005800 <TinyBMS_CAN_ResetClearEventsStatistics>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1f7      	bne.n	8007f38 <CAN_Test_API+0x18>
	option = TINYBMS_CLEAR_STATS;
 8007f48:	2302      	movs	r3, #2
 8007f4a:	73fb      	strb	r3, [r7, #15]
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, option) != CMD_SUCCESS) {}
 8007f4c:	bf00      	nop
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	4619      	mov	r1, r3
 8007f52:	4870      	ldr	r0, [pc, #448]	; (8008114 <CAN_Test_API+0x1f4>)
 8007f54:	f7fd fc54 	bl	8005800 <TinyBMS_CAN_ResetClearEventsStatistics>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f7      	bne.n	8007f4e <CAN_Test_API+0x2e>
	option = TINYBMS_RESET_BMS;
 8007f5e:	2305      	movs	r3, #5
 8007f60:	73fb      	strb	r3, [r7, #15]
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, option) != CMD_SUCCESS) {}
 8007f62:	bf00      	nop
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	4619      	mov	r1, r3
 8007f68:	486a      	ldr	r0, [pc, #424]	; (8008114 <CAN_Test_API+0x1f4>)
 8007f6a:	f7fd fc49 	bl	8005800 <TinyBMS_CAN_ResetClearEventsStatistics>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f7      	bne.n	8007f64 <CAN_Test_API+0x44>

	//2.1.2 ReadRegBlock
	rl = 16;
 8007f74:	2310      	movs	r3, #16
 8007f76:	73bb      	strb	r3, [r7, #14]
	addr = CELL1_VOLTAGE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	81bb      	strh	r3, [r7, #12]
	while(TinyBMS_CAN_ReadRegBlock(&hcan1, rl, addr) != CMD_SUCCESS) {}
 8007f7c:	bf00      	nop
 8007f7e:	89ba      	ldrh	r2, [r7, #12]
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	4619      	mov	r1, r3
 8007f84:	4863      	ldr	r0, [pc, #396]	; (8008114 <CAN_Test_API+0x1f4>)
 8007f86:	f7fd fcfd 	bl	8005984 <TinyBMS_CAN_ReadRegBlock>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f6      	bne.n	8007f7e <CAN_Test_API+0x5e>

	//2.1.3 WriteRegBlock
	rl = 4;
 8007f90:	2304      	movs	r3, #4
 8007f92:	73bb      	strb	r3, [r7, #14]
	addr = OVERVOLTAGE_CUTOFF;
 8007f94:	f240 133b 	movw	r3, #315	; 0x13b
 8007f98:	81bb      	strh	r3, [r7, #12]
	uint16_t data1[4] = {4200, 3000, 50, 25};
 8007f9a:	4a5f      	ldr	r2, [pc, #380]	; (8008118 <CAN_Test_API+0x1f8>)
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fa2:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Writing to 4 registers (2bytes each) starting with: OVERVOLTAGE_CUTOFF,
	* UNDERVOLTAGE_CUTOFF, DISCHARGE_OVERCURRENT_CUTOFF, CHARGE_OVERCURRENT_CUTOFF */
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, rl, addr, data1) != CMD_SUCCESS) {}
 8007fa6:	bf00      	nop
 8007fa8:	463b      	mov	r3, r7
 8007faa:	89ba      	ldrh	r2, [r7, #12]
 8007fac:	7bb9      	ldrb	r1, [r7, #14]
 8007fae:	4859      	ldr	r0, [pc, #356]	; (8008114 <CAN_Test_API+0x1f4>)
 8007fb0:	f7fd fdee 	bl	8005b90 <TinyBMS_CAN_WriteRegBlock>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f6      	bne.n	8007fa8 <CAN_Test_API+0x88>

	//2.1.4 ReadNewestEvents
	while(TinyBMS_CAN_ReadNewestEvents(&hcan1) != CMD_SUCCESS) {}
 8007fba:	bf00      	nop
 8007fbc:	4855      	ldr	r0, [pc, #340]	; (8008114 <CAN_Test_API+0x1f4>)
 8007fbe:	f7fd ff03 	bl	8005dc8 <TinyBMS_CAN_ReadNewestEvents>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1f9      	bne.n	8007fbc <CAN_Test_API+0x9c>

	//2.1.5 ReadAllEvents
	while(TinyBMS_CAN_ReadAllEvents(&hcan1) != CMD_SUCCESS) {}
 8007fc8:	bf00      	nop
 8007fca:	4852      	ldr	r0, [pc, #328]	; (8008114 <CAN_Test_API+0x1f4>)
 8007fcc:	f7fd fff0 	bl	8005fb0 <TinyBMS_CAN_ReadAllEvents>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f9      	bne.n	8007fca <CAN_Test_API+0xaa>

	//2.1.6 ReadBatteryPackVoltage
	while(TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1) != CMD_SUCCESS) {}
 8007fd6:	bf00      	nop
 8007fd8:	484e      	ldr	r0, [pc, #312]	; (8008114 <CAN_Test_API+0x1f4>)
 8007fda:	f7fe f8dd 	bl	8006198 <TinyBMS_CAN_ReadBatteryPackVoltage>
 8007fde:	eef0 7a40 	vmov.f32	s15, s0
 8007fe2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fea:	d1f5      	bne.n	8007fd8 <CAN_Test_API+0xb8>

	//2.1.7 ReadBatteryPackCurrent
	while(TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1) != CMD_SUCCESS) {}
 8007fec:	bf00      	nop
 8007fee:	4849      	ldr	r0, [pc, #292]	; (8008114 <CAN_Test_API+0x1f4>)
 8007ff0:	f7fe f98c 	bl	800630c <TinyBMS_CAN_ReadBatteryPackCurrent>
 8007ff4:	eef0 7a40 	vmov.f32	s15, s0
 8007ff8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008000:	d1f5      	bne.n	8007fee <CAN_Test_API+0xce>

	//2.1.8 ReadBatteryPackMaxCellVoltage
	while(TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(&hcan1) != CMD_SUCCESS) {}
 8008002:	bf00      	nop
 8008004:	4843      	ldr	r0, [pc, #268]	; (8008114 <CAN_Test_API+0x1f4>)
 8008006:	f7fe fa3b 	bl	8006480 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1f9      	bne.n	8008004 <CAN_Test_API+0xe4>

	//2.1.9 ReadBatteryPackMinCellVoltage
	while(TinyBMS_CAN_ReadBatteryPackMinCellVoltage(&hcan1) != CMD_SUCCESS) {}
 8008010:	bf00      	nop
 8008012:	4840      	ldr	r0, [pc, #256]	; (8008114 <CAN_Test_API+0x1f4>)
 8008014:	f7fe fad8 	bl	80065c8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f9      	bne.n	8008012 <CAN_Test_API+0xf2>

	//2.1.10 ReadOnlineStatus
	while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) != CMD_SUCCESS) {}
 800801e:	bf00      	nop
 8008020:	483c      	ldr	r0, [pc, #240]	; (8008114 <CAN_Test_API+0x1f4>)
 8008022:	f7fe fb75 	bl	8006710 <TinyBMS_CAN_ReadOnlineStatus>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f9      	bne.n	8008020 <CAN_Test_API+0x100>

	//2.1.11 ReadLifetimeCounter
	while(TinyBMS_CAN_ReadLifetimeCounter(&hcan1) != CMD_SUCCESS) {}
 800802c:	bf00      	nop
 800802e:	4839      	ldr	r0, [pc, #228]	; (8008114 <CAN_Test_API+0x1f4>)
 8008030:	f7fe fc68 	bl	8006904 <TinyBMS_CAN_ReadLifetimeCounter>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1f9      	bne.n	800802e <CAN_Test_API+0x10e>

	//2.1.12 ReadEstimatedSOCValue
	while(TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1) != CMD_SUCCESS) {}
 800803a:	bf00      	nop
 800803c:	4835      	ldr	r0, [pc, #212]	; (8008114 <CAN_Test_API+0x1f4>)
 800803e:	f7fe fd03 	bl	8006a48 <TinyBMS_CAN_ReadEstimatedSOCValue>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1f9      	bne.n	800803c <CAN_Test_API+0x11c>

	//2.1.13 ReadDeviceTemperatures
	while(TinyBMS_CAN_ReadDeviceTemperatures(&hcan1) != CMD_SUCCESS) {}
 8008048:	bf00      	nop
 800804a:	4832      	ldr	r0, [pc, #200]	; (8008114 <CAN_Test_API+0x1f4>)
 800804c:	f7fe fd9e 	bl	8006b8c <TinyBMS_CAN_ReadDeviceTemperatures>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f9      	bne.n	800804a <CAN_Test_API+0x12a>

	//2.1.14 ReadBatteryPackCellVoltages
	while(TinyBMS_CAN_ReadBatteryPackCellVoltages(&hcan1) != CMD_SUCCESS) {}
 8008056:	bf00      	nop
 8008058:	482e      	ldr	r0, [pc, #184]	; (8008114 <CAN_Test_API+0x1f4>)
 800805a:	f7fe fe91 	bl	8006d80 <TinyBMS_CAN_ReadBatteryPackCellVoltages>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1f9      	bne.n	8008058 <CAN_Test_API+0x138>

	//2.1.15 ReadSettingsValues
	rl = 100; //Registers to read: Max. 100 (0x64) registers
 8008064:	2364      	movs	r3, #100	; 0x64
 8008066:	73bb      	strb	r3, [r7, #14]
	option = TINYBMS_SETTINGS_MIN;
 8008068:	2301      	movs	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, option, rl) != CMD_SUCCESS) {}
 800806c:	bf00      	nop
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	7bba      	ldrb	r2, [r7, #14]
 8008072:	4619      	mov	r1, r3
 8008074:	4827      	ldr	r0, [pc, #156]	; (8008114 <CAN_Test_API+0x1f4>)
 8008076:	f7fe ff4f 	bl	8006f18 <TinyBMS_CAN_ReadSettingsValues>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f6      	bne.n	800806e <CAN_Test_API+0x14e>
	option = TINYBMS_SETTINGS_MAX;
 8008080:	2302      	movs	r3, #2
 8008082:	73fb      	strb	r3, [r7, #15]
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, option, rl) != CMD_SUCCESS) {}
 8008084:	bf00      	nop
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	7bba      	ldrb	r2, [r7, #14]
 800808a:	4619      	mov	r1, r3
 800808c:	4821      	ldr	r0, [pc, #132]	; (8008114 <CAN_Test_API+0x1f4>)
 800808e:	f7fe ff43 	bl	8006f18 <TinyBMS_CAN_ReadSettingsValues>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f6      	bne.n	8008086 <CAN_Test_API+0x166>
	option = TINYBMS_SETTINGS_DEFAULT;
 8008098:	2303      	movs	r3, #3
 800809a:	73fb      	strb	r3, [r7, #15]
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, option, rl) != CMD_SUCCESS) {}
 800809c:	bf00      	nop
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	7bba      	ldrb	r2, [r7, #14]
 80080a2:	4619      	mov	r1, r3
 80080a4:	481b      	ldr	r0, [pc, #108]	; (8008114 <CAN_Test_API+0x1f4>)
 80080a6:	f7fe ff37 	bl	8006f18 <TinyBMS_CAN_ReadSettingsValues>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f6      	bne.n	800809e <CAN_Test_API+0x17e>
	option = TINYBMS_SETTINGS_CURRENT;
 80080b0:	2304      	movs	r3, #4
 80080b2:	73fb      	strb	r3, [r7, #15]
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, option, rl) != CMD_SUCCESS) {}
 80080b4:	bf00      	nop
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	7bba      	ldrb	r2, [r7, #14]
 80080ba:	4619      	mov	r1, r3
 80080bc:	4815      	ldr	r0, [pc, #84]	; (8008114 <CAN_Test_API+0x1f4>)
 80080be:	f7fe ff2b 	bl	8006f18 <TinyBMS_CAN_ReadSettingsValues>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1f6      	bne.n	80080b6 <CAN_Test_API+0x196>

	//2.1.16 ReadVersion
	while(TinyBMS_CAN_ReadVersion(&hcan1) != CMD_SUCCESS) {}
 80080c8:	bf00      	nop
 80080ca:	4812      	ldr	r0, [pc, #72]	; (8008114 <CAN_Test_API+0x1f4>)
 80080cc:	f7ff f838 	bl	8007140 <TinyBMS_CAN_ReadVersion>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f9      	bne.n	80080ca <CAN_Test_API+0x1aa>

	//2.1.17 ReadCalcSpeedDistanceLeftEstTimeLeft
	while(TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft(&hcan1) != CMD_SUCCESS) {}
 80080d6:	bf00      	nop
 80080d8:	480e      	ldr	r0, [pc, #56]	; (8008114 <CAN_Test_API+0x1f4>)
 80080da:	f7ff f95f 	bl	800739c <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1f9      	bne.n	80080d8 <CAN_Test_API+0x1b8>

	//2.1.18 ReadNodeID
	while(TinyBMS_CAN_ReadNodeID(&hcan1) != CMD_SUCCESS) {}
 80080e4:	bf00      	nop
 80080e6:	480b      	ldr	r0, [pc, #44]	; (8008114 <CAN_Test_API+0x1f4>)
 80080e8:	f7ff fa62 	bl	80075b0 <TinyBMS_CAN_ReadNodeID>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f9      	bne.n	80080e6 <CAN_Test_API+0x1c6>

	//2.1.19 WriteNodeID
	uint8_t nodeID = 0x01;
 80080f2:	2301      	movs	r3, #1
 80080f4:	72fb      	strb	r3, [r7, #11]
	while(TinyBMS_CAN_WriteNodeID(&hcan1, nodeID) != CMD_SUCCESS) {}
 80080f6:	bf00      	nop
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	4619      	mov	r1, r3
 80080fc:	4805      	ldr	r0, [pc, #20]	; (8008114 <CAN_Test_API+0x1f4>)
 80080fe:	f7ff fb1b 	bl	8007738 <TinyBMS_CAN_WriteNodeID>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1f7      	bne.n	80080f8 <CAN_Test_API+0x1d8>
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000200 	.word	0x20000200
 8008118:	08012a24 	.word	0x08012a24

0800811c <TinyBMS_MonitorCharging>:

void TinyBMS_MonitorCharging(void) {
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
	//TinyBMS Init
	if(TinyBMS_Init() != CMD_SUCCESS) {
 8008122:	f000 f8a9 	bl	8008278 <TinyBMS_Init>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d004      	beq.n	8008136 <TinyBMS_MonitorCharging+0x1a>
		printf("TinyBMS Init failed.\r\n");
 800812c:	4836      	ldr	r0, [pc, #216]	; (8008208 <TinyBMS_MonitorCharging+0xec>)
 800812e:	f005 fb37 	bl	800d7a0 <puts>
		Error_Handler();
 8008132:	f000 fd5f 	bl	8008bf4 <Error_Handler>
	}

	//Start the Timer (Interrupt Mode / Non-Blocking)
	//Timer is used to send a message to the charger every 1 second
	HAL_TIM_Base_Start_IT(&htim6);
 8008136:	4835      	ldr	r0, [pc, #212]	; (800820c <TinyBMS_MonitorCharging+0xf0>)
 8008138:	f002 ff6e 	bl	800b018 <HAL_TIM_Base_Start_IT>

	//Mostly Placeholder - Modify API to return their respective data
	uint16_t cellv[7] = {};
 800813c:	1d3b      	adds	r3, r7, #4
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	605a      	str	r2, [r3, #4]
 8008144:	609a      	str	r2, [r3, #8]
 8008146:	819a      	strh	r2, [r3, #12]
	uint16_t numDetectedCells = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	82bb      	strh	r3, [r7, #20]

	while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_CHARGING) {
 800814c:	e04f      	b.n	80081ee <TinyBMS_MonitorCharging+0xd2>

		//Verify that all cells are being detected
		numDetectedCells = TinyBMS_CAN_ReadRegBlock(&hcan1, 1, NUMBER_OF_DETECTED_CELLS);
 800814e:	2235      	movs	r2, #53	; 0x35
 8008150:	2101      	movs	r1, #1
 8008152:	482f      	ldr	r0, [pc, #188]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 8008154:	f7fd fc16 	bl	8005984 <TinyBMS_CAN_ReadRegBlock>
 8008158:	4603      	mov	r3, r0
 800815a:	82bb      	strh	r3, [r7, #20]
		if(numDetectedCells != NUMCELLS_SECONDARY) {
 800815c:	8abb      	ldrh	r3, [r7, #20]
 800815e:	2b07      	cmp	r3, #7
 8008160:	d002      	beq.n	8008168 <TinyBMS_MonitorCharging+0x4c>
			printf("Some cells are not being detected!\r\n");
 8008162:	482c      	ldr	r0, [pc, #176]	; (8008214 <TinyBMS_MonitorCharging+0xf8>)
 8008164:	f005 fb1c 	bl	800d7a0 <puts>
		}

		//Get voltage of all cells and compare with max/min voltage thresholds
		TinyBMS_CAN_ReadBatteryPackCellVoltages(&hcan1);
 8008168:	4829      	ldr	r0, [pc, #164]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 800816a:	f7fe fe09 	bl	8006d80 <TinyBMS_CAN_ReadBatteryPackCellVoltages>
		for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]
 8008172:	e022      	b.n	80081ba <TinyBMS_MonitorCharging+0x9e>
			if(cellv[i] < minCellVoltage)  {
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	3318      	adds	r3, #24
 800817a:	443b      	add	r3, r7
 800817c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8008180:	4b25      	ldr	r3, [pc, #148]	; (8008218 <TinyBMS_MonitorCharging+0xfc>)
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d205      	bcs.n	8008194 <TinyBMS_MonitorCharging+0x78>
				printf("Cell %u is below the minimum voltage threshold!\r\n", i+1);
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	3301      	adds	r3, #1
 800818c:	4619      	mov	r1, r3
 800818e:	4823      	ldr	r0, [pc, #140]	; (800821c <TinyBMS_MonitorCharging+0x100>)
 8008190:	f005 fa80 	bl	800d694 <iprintf>
			}
			if(cellv[i] > maxCellVoltage) {
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	3318      	adds	r3, #24
 800819a:	443b      	add	r3, r7
 800819c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80081a0:	4b1f      	ldr	r3, [pc, #124]	; (8008220 <TinyBMS_MonitorCharging+0x104>)
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d905      	bls.n	80081b4 <TinyBMS_MonitorCharging+0x98>
				printf("Cell %u is above the maximum voltage threshold!\r\n", i+1);
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	3301      	adds	r3, #1
 80081ac:	4619      	mov	r1, r3
 80081ae:	481d      	ldr	r0, [pc, #116]	; (8008224 <TinyBMS_MonitorCharging+0x108>)
 80081b0:	f005 fa70 	bl	800d694 <iprintf>
		for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
 80081b6:	3301      	adds	r3, #1
 80081b8:	75fb      	strb	r3, [r7, #23]
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	2b06      	cmp	r3, #6
 80081be:	d9d9      	bls.n	8008174 <TinyBMS_MonitorCharging+0x58>
			}
		}

		//Check if cells need balancing or are in progress of balancing
		//Regs 51 & 52: BALANCING_DECISION_BITS & REAL_BALANCING_BITS
		TinyBMS_CAN_ReadRegBlock(&hcan1, 2, BALANCING_DECISION_BITS);
 80081c0:	2233      	movs	r2, #51	; 0x33
 80081c2:	2102      	movs	r1, #2
 80081c4:	4812      	ldr	r0, [pc, #72]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 80081c6:	f7fd fbdd 	bl	8005984 <TinyBMS_CAN_ReadRegBlock>

		//Check Newest Events
		TinyBMS_CAN_ReadNewestEvents(&hcan1);
 80081ca:	4811      	ldr	r0, [pc, #68]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 80081cc:	f7fd fdfc 	bl	8005dc8 <TinyBMS_CAN_ReadNewestEvents>

		//Check Online Status
		TinyBMS_CAN_ReadOnlineStatus(&hcan1);
 80081d0:	480f      	ldr	r0, [pc, #60]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 80081d2:	f7fe fa9d 	bl	8006710 <TinyBMS_CAN_ReadOnlineStatus>

		//Check Temperatures
		TinyBMS_CAN_ReadDeviceTemperatures(&hcan1);
 80081d6:	480e      	ldr	r0, [pc, #56]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 80081d8:	f7fe fcd8 	bl	8006b8c <TinyBMS_CAN_ReadDeviceTemperatures>

		//Get State of Charge
		TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 80081dc:	480c      	ldr	r0, [pc, #48]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 80081de:	f7fe fc33 	bl	8006a48 <TinyBMS_CAN_ReadEstimatedSOCValue>

		//Get Pack Voltage
		TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 80081e2:	480b      	ldr	r0, [pc, #44]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 80081e4:	f7fd ffd8 	bl	8006198 <TinyBMS_CAN_ReadBatteryPackVoltage>

		//Get Pack Current
		TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 80081e8:	4809      	ldr	r0, [pc, #36]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 80081ea:	f7fe f88f 	bl	800630c <TinyBMS_CAN_ReadBatteryPackCurrent>
	while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_CHARGING) {
 80081ee:	4808      	ldr	r0, [pc, #32]	; (8008210 <TinyBMS_MonitorCharging+0xf4>)
 80081f0:	f7fe fa8e 	bl	8006710 <TinyBMS_CAN_ReadOnlineStatus>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b91      	cmp	r3, #145	; 0x91
 80081f8:	d0a9      	beq.n	800814e <TinyBMS_MonitorCharging+0x32>
	}

	//Stop the Timer
	HAL_TIM_Base_Stop_IT(&htim6);
 80081fa:	4804      	ldr	r0, [pc, #16]	; (800820c <TinyBMS_MonitorCharging+0xf0>)
 80081fc:	f002 ff84 	bl	800b108 <HAL_TIM_Base_Stop_IT>
}
 8008200:	bf00      	nop
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	08012a3c 	.word	0x08012a3c
 800820c:	20000330 	.word	0x20000330
 8008210:	20000200 	.word	0x20000200
 8008214:	08012a54 	.word	0x08012a54
 8008218:	2000037c 	.word	0x2000037c
 800821c:	08012a78 	.word	0x08012a78
 8008220:	2000037e 	.word	0x2000037e
 8008224:	08012aac 	.word	0x08012aac

08008228 <TinyBMS_MonitorDischarging>:

void TinyBMS_MonitorDischarging(void) {
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
	//TinyBMS Init
	if(TinyBMS_Init() != CMD_SUCCESS) {
 800822c:	f000 f824 	bl	8008278 <TinyBMS_Init>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <TinyBMS_MonitorDischarging+0x18>
		printf("TinyBMS Init failed.\r\n");
 8008236:	4803      	ldr	r0, [pc, #12]	; (8008244 <TinyBMS_MonitorDischarging+0x1c>)
 8008238:	f005 fab2 	bl	800d7a0 <puts>
		Error_Handler();
 800823c:	f000 fcda 	bl	8008bf4 <Error_Handler>
	}

	//Todo:
	//Similar to MonitorCharging
}
 8008240:	bf00      	nop
 8008242:	bd80      	pop	{r7, pc}
 8008244:	08012a3c 	.word	0x08012a3c

08008248 <ElCon_SendMsg>:

void ElCon_SendMsg(void) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
	//Triggered from HAL_TIM_PeriodElapsedCallback()
	//Every 1 second, send 8-bytes of data with voltage and current requested to ExtID 0x1806E5F4
	//Todo:
	uint8_t msg[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800824e:	4a09      	ldr	r2, [pc, #36]	; (8008274 <ElCon_SendMsg+0x2c>)
 8008250:	1d3b      	adds	r3, r7, #4
 8008252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008256:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t len = 8;
 800825a:	2308      	movs	r3, #8
 800825c:	73fb      	strb	r3, [r7, #15]
	CAN1_Tx(ELCONCHARGER2, msg, len);
 800825e:	7bfa      	ldrb	r2, [r7, #15]
 8008260:	1d3b      	adds	r3, r7, #4
 8008262:	4619      	mov	r1, r3
 8008264:	2002      	movs	r0, #2
 8008266:	f000 fb4d 	bl	8008904 <CAN1_Tx>
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	08012ae0 	.word	0x08012ae0

08008278 <TinyBMS_Init>:

uint8_t TinyBMS_Init(void) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
	uint8_t retval = CMD_FAILURE;
 800827e:	23ff      	movs	r3, #255	; 0xff
 8008280:	73fb      	strb	r3, [r7, #15]
	int validInput = FALSE;
 8008282:	2300      	movs	r3, #0
 8008284:	60bb      	str	r3, [r7, #8]
	int userInput = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	603b      	str	r3, [r7, #0]

	//Read CAN NodeID and update to it if required
	TinyBMS_CAN_ReadNodeID(&hcan1);
 800828a:	4880      	ldr	r0, [pc, #512]	; (800848c <TinyBMS_Init+0x214>)
 800828c:	f7ff f990 	bl	80075b0 <TinyBMS_CAN_ReadNodeID>

	//Reset BMS?
	while(!validInput) {
 8008290:	e025      	b.n	80082de <TinyBMS_Init+0x66>
		printf("Reset BMS?\r\n");
 8008292:	487f      	ldr	r0, [pc, #508]	; (8008490 <TinyBMS_Init+0x218>)
 8008294:	f005 fa84 	bl	800d7a0 <puts>
		printf("0: No   1: Yes\r\n");
 8008298:	487e      	ldr	r0, [pc, #504]	; (8008494 <TinyBMS_Init+0x21c>)
 800829a:	f005 fa81 	bl	800d7a0 <puts>
		userInput = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	603b      	str	r3, [r7, #0]
		scanf("%d", &userInput);
 80082a2:	463b      	mov	r3, r7
 80082a4:	4619      	mov	r1, r3
 80082a6:	487c      	ldr	r0, [pc, #496]	; (8008498 <TinyBMS_Init+0x220>)
 80082a8:	f005 fa82 	bl	800d7b0 <iscanf>

		switch(userInput) {
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <TinyBMS_Init+0x40>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d005      	beq.n	80082c2 <TinyBMS_Init+0x4a>
 80082b6:	e00d      	b.n	80082d4 <TinyBMS_Init+0x5c>
		case NO:
			validInput = TRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	60bb      	str	r3, [r7, #8]
			printf("Skipping reset..\r\n");
 80082bc:	4877      	ldr	r0, [pc, #476]	; (800849c <TinyBMS_Init+0x224>)
 80082be:	f005 fa6f 	bl	800d7a0 <puts>

		case YES:
			validInput = TRUE;
 80082c2:	2301      	movs	r3, #1
 80082c4:	60bb      	str	r3, [r7, #8]
			printf("Resetting TinyBMS..\r\n");
 80082c6:	4876      	ldr	r0, [pc, #472]	; (80084a0 <TinyBMS_Init+0x228>)
 80082c8:	f005 fa6a 	bl	800d7a0 <puts>
			TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_RESET_BMS);
 80082cc:	2105      	movs	r1, #5
 80082ce:	486f      	ldr	r0, [pc, #444]	; (800848c <TinyBMS_Init+0x214>)
 80082d0:	f7fd fa96 	bl	8005800 <TinyBMS_CAN_ResetClearEventsStatistics>

		default:
			validInput = FALSE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60bb      	str	r3, [r7, #8]
			printf("Invalid input.\r\n");
 80082d8:	4872      	ldr	r0, [pc, #456]	; (80084a4 <TinyBMS_Init+0x22c>)
 80082da:	f005 fa61 	bl	800d7a0 <puts>
	while(!validInput) {
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d0d6      	beq.n	8008292 <TinyBMS_Init+0x1a>
		}
	}

	//Check if BMS was Reset by reading Lifetime Counter
	TinyBMS_CAN_ReadLifetimeCounter(&hcan1);
 80082e4:	4869      	ldr	r0, [pc, #420]	; (800848c <TinyBMS_Init+0x214>)
 80082e6:	f7fe fb0d 	bl	8006904 <TinyBMS_CAN_ReadLifetimeCounter>

	//Clear Events & Statistics?
	while(!validInput) {
 80082ea:	e04b      	b.n	8008384 <TinyBMS_Init+0x10c>
		printf("Clear Events and Statistics?\r\n)");
 80082ec:	486e      	ldr	r0, [pc, #440]	; (80084a8 <TinyBMS_Init+0x230>)
 80082ee:	f005 f9d1 	bl	800d694 <iprintf>
		printf("0: Neither          1: Only Events\r\n");
 80082f2:	486e      	ldr	r0, [pc, #440]	; (80084ac <TinyBMS_Init+0x234>)
 80082f4:	f005 fa54 	bl	800d7a0 <puts>
		printf("2: Only Statistics  3: Both\r\n");
 80082f8:	486d      	ldr	r0, [pc, #436]	; (80084b0 <TinyBMS_Init+0x238>)
 80082fa:	f005 fa51 	bl	800d7a0 <puts>
		userInput = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	603b      	str	r3, [r7, #0]
		scanf("%d", &userInput);
 8008302:	463b      	mov	r3, r7
 8008304:	4619      	mov	r1, r3
 8008306:	4864      	ldr	r0, [pc, #400]	; (8008498 <TinyBMS_Init+0x220>)
 8008308:	f005 fa52 	bl	800d7b0 <iscanf>

		switch(userInput) {
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b03      	cmp	r3, #3
 8008310:	d832      	bhi.n	8008378 <TinyBMS_Init+0x100>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <TinyBMS_Init+0xa0>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	08008329 	.word	0x08008329
 800831c:	08008335 	.word	0x08008335
 8008320:	08008349 	.word	0x08008349
 8008324:	0800835d 	.word	0x0800835d
		case NEITHER:
			validInput = TRUE;
 8008328:	2301      	movs	r3, #1
 800832a:	60bb      	str	r3, [r7, #8]
			printf("Keeping previous Events and Statistics..\r\n");
 800832c:	4861      	ldr	r0, [pc, #388]	; (80084b4 <TinyBMS_Init+0x23c>)
 800832e:	f005 fa37 	bl	800d7a0 <puts>
			break;
 8008332:	e027      	b.n	8008384 <TinyBMS_Init+0x10c>

		case ONLYEVENTS:
			validInput = TRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	60bb      	str	r3, [r7, #8]
			printf("Clearing TinyBMS Events only..\r\n");
 8008338:	485f      	ldr	r0, [pc, #380]	; (80084b8 <TinyBMS_Init+0x240>)
 800833a:	f005 fa31 	bl	800d7a0 <puts>
			TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_EVENTS);
 800833e:	2101      	movs	r1, #1
 8008340:	4852      	ldr	r0, [pc, #328]	; (800848c <TinyBMS_Init+0x214>)
 8008342:	f7fd fa5d 	bl	8005800 <TinyBMS_CAN_ResetClearEventsStatistics>
			break;
 8008346:	e01d      	b.n	8008384 <TinyBMS_Init+0x10c>

		case ONLYSTATS:
			validInput = TRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	60bb      	str	r3, [r7, #8]
			printf("Clearing TinyBMS Statistics only..\r\n");
 800834c:	485b      	ldr	r0, [pc, #364]	; (80084bc <TinyBMS_Init+0x244>)
 800834e:	f005 fa27 	bl	800d7a0 <puts>
			TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_STATS);
 8008352:	2102      	movs	r1, #2
 8008354:	484d      	ldr	r0, [pc, #308]	; (800848c <TinyBMS_Init+0x214>)
 8008356:	f7fd fa53 	bl	8005800 <TinyBMS_CAN_ResetClearEventsStatistics>
			break;
 800835a:	e013      	b.n	8008384 <TinyBMS_Init+0x10c>

		case BOTH:
			validInput = TRUE;
 800835c:	2301      	movs	r3, #1
 800835e:	60bb      	str	r3, [r7, #8]
			printf("Clearing both TinyBMS Events and Statistics..\r\n");
 8008360:	4857      	ldr	r0, [pc, #348]	; (80084c0 <TinyBMS_Init+0x248>)
 8008362:	f005 fa1d 	bl	800d7a0 <puts>
			TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_EVENTS);
 8008366:	2101      	movs	r1, #1
 8008368:	4848      	ldr	r0, [pc, #288]	; (800848c <TinyBMS_Init+0x214>)
 800836a:	f7fd fa49 	bl	8005800 <TinyBMS_CAN_ResetClearEventsStatistics>
			TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_STATS);
 800836e:	2102      	movs	r1, #2
 8008370:	4846      	ldr	r0, [pc, #280]	; (800848c <TinyBMS_Init+0x214>)
 8008372:	f7fd fa45 	bl	8005800 <TinyBMS_CAN_ResetClearEventsStatistics>
			break;
 8008376:	e005      	b.n	8008384 <TinyBMS_Init+0x10c>

		default:
			validInput = FALSE;
 8008378:	2300      	movs	r3, #0
 800837a:	60bb      	str	r3, [r7, #8]
			printf("Invalid input.\r\n");
 800837c:	4849      	ldr	r0, [pc, #292]	; (80084a4 <TinyBMS_Init+0x22c>)
 800837e:	f005 fa0f 	bl	800d7a0 <puts>
			break;
 8008382:	bf00      	nop
	while(!validInput) {
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0b0      	beq.n	80082ec <TinyBMS_Init+0x74>
		}
	}

	//Read Version
	TinyBMS_CAN_ReadVersion(&hcan1);
 800838a:	4840      	ldr	r0, [pc, #256]	; (800848c <TinyBMS_Init+0x214>)
 800838c:	f7fe fed8 	bl	8007140 <TinyBMS_CAN_ReadVersion>

	//Get Min/Max Cell Voltage Thresholds
	minCellVoltage = TinyBMS_CAN_ReadBatteryPackMinCellVoltage(&hcan1);
 8008390:	483e      	ldr	r0, [pc, #248]	; (800848c <TinyBMS_Init+0x214>)
 8008392:	f7fe f919 	bl	80065c8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>
 8008396:	4603      	mov	r3, r0
 8008398:	461a      	mov	r2, r3
 800839a:	4b4a      	ldr	r3, [pc, #296]	; (80084c4 <TinyBMS_Init+0x24c>)
 800839c:	801a      	strh	r2, [r3, #0]
	maxCellVoltage = TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(&hcan1);
 800839e:	483b      	ldr	r0, [pc, #236]	; (800848c <TinyBMS_Init+0x214>)
 80083a0:	f7fe f86e 	bl	8006480 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	4b47      	ldr	r3, [pc, #284]	; (80084c8 <TinyBMS_Init+0x250>)
 80083aa:	801a      	strh	r2, [r3, #0]

	//Check for any active events
	TinyBMS_CAN_ReadAllEvents(&hcan1);
 80083ac:	4837      	ldr	r0, [pc, #220]	; (800848c <TinyBMS_Init+0x214>)
 80083ae:	f7fd fdff 	bl	8005fb0 <TinyBMS_CAN_ReadAllEvents>

	//Verify Pack Voltage and Current
	packVoltage = TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 80083b2:	4836      	ldr	r0, [pc, #216]	; (800848c <TinyBMS_Init+0x214>)
 80083b4:	f7fd fef0 	bl	8006198 <TinyBMS_CAN_ReadBatteryPackVoltage>
 80083b8:	eef0 7a40 	vmov.f32	s15, s0
 80083bc:	4b43      	ldr	r3, [pc, #268]	; (80084cc <TinyBMS_Init+0x254>)
 80083be:	edc3 7a00 	vstr	s15, [r3]
	packCurrent = TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 80083c2:	4832      	ldr	r0, [pc, #200]	; (800848c <TinyBMS_Init+0x214>)
 80083c4:	f7fd ffa2 	bl	800630c <TinyBMS_CAN_ReadBatteryPackCurrent>
 80083c8:	eef0 7a40 	vmov.f32	s15, s0
 80083cc:	4b40      	ldr	r3, [pc, #256]	; (80084d0 <TinyBMS_Init+0x258>)
 80083ce:	edc3 7a00 	vstr	s15, [r3]

	//Get initial State of Charge
	initialSOC = TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 80083d2:	482e      	ldr	r0, [pc, #184]	; (800848c <TinyBMS_Init+0x214>)
 80083d4:	f7fe fb38 	bl	8006a48 <TinyBMS_CAN_ReadEstimatedSOCValue>
 80083d8:	4603      	mov	r3, r0
 80083da:	4a3e      	ldr	r2, [pc, #248]	; (80084d4 <TinyBMS_Init+0x25c>)
 80083dc:	6013      	str	r3, [r2, #0]

	//Check Temperatures
	TinyBMS_CAN_ReadDeviceTemperatures(&hcan1);
 80083de:	482b      	ldr	r0, [pc, #172]	; (800848c <TinyBMS_Init+0x214>)
 80083e0:	f7fe fbd4 	bl	8006b8c <TinyBMS_CAN_ReadDeviceTemperatures>

	//Settings Registers: 300-301, 303-304, 306-308, 312-320, 328, 330-343
	//					  (30 total settings) (344-399 reserved)
	// rl max is 100 (0x64) registers, but this exceeds the actual total
	TinyBMS_CAN_ReadSettingsValues(&hcan1, TINYBMS_SETTINGS_CURRENT, 30);
 80083e4:	221e      	movs	r2, #30
 80083e6:	2104      	movs	r1, #4
 80083e8:	4828      	ldr	r0, [pc, #160]	; (800848c <TinyBMS_Init+0x214>)
 80083ea:	f7fe fd95 	bl	8006f18 <TinyBMS_CAN_ReadSettingsValues>

	//Verify Online Status is TINYBMS_STATUS_IDLE before proceeding
	uint8_t isIdle = FALSE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	71fb      	strb	r3, [r7, #7]
	while(!isIdle) {
 80083f2:	e042      	b.n	800847a <TinyBMS_Init+0x202>
		switch(TinyBMS_CAN_ReadOnlineStatus(&hcan1)) {
 80083f4:	4825      	ldr	r0, [pc, #148]	; (800848c <TinyBMS_Init+0x214>)
 80083f6:	f7fe f98b 	bl	8006710 <TinyBMS_CAN_ReadOnlineStatus>
 80083fa:	4603      	mov	r3, r0
 80083fc:	3b91      	subs	r3, #145	; 0x91
 80083fe:	2b0a      	cmp	r3, #10
 8008400:	d839      	bhi.n	8008476 <TinyBMS_Init+0x1fe>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <TinyBMS_Init+0x190>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008435 	.word	0x08008435
 800840c:	0800843d 	.word	0x0800843d
 8008410:	08008445 	.word	0x08008445
 8008414:	08008477 	.word	0x08008477
 8008418:	08008477 	.word	0x08008477
 800841c:	0800844d 	.word	0x0800844d
 8008420:	08008455 	.word	0x08008455
 8008424:	08008477 	.word	0x08008477
 8008428:	08008477 	.word	0x08008477
 800842c:	08008477 	.word	0x08008477
 8008430:	08008465 	.word	0x08008465
		case TINYBMS_STATUS_CHARGING:
			printf("TinyBMS is Charging..\r\n");
 8008434:	4828      	ldr	r0, [pc, #160]	; (80084d8 <TinyBMS_Init+0x260>)
 8008436:	f005 f9b3 	bl	800d7a0 <puts>
			break;
 800843a:	e01e      	b.n	800847a <TinyBMS_Init+0x202>

		case TINYBMS_STATUS_FULLYCHARGED:
			printf("TinyBMS is Fully Charged!\r\n");
 800843c:	4827      	ldr	r0, [pc, #156]	; (80084dc <TinyBMS_Init+0x264>)
 800843e:	f005 f9af 	bl	800d7a0 <puts>
			break;
 8008442:	e01a      	b.n	800847a <TinyBMS_Init+0x202>

		case TINYBMS_STATUS_DISCHARGING:
			printf("TinyBMS is Discharging..\r\n");
 8008444:	4826      	ldr	r0, [pc, #152]	; (80084e0 <TinyBMS_Init+0x268>)
 8008446:	f005 f9ab 	bl	800d7a0 <puts>
			break;
 800844a:	e016      	b.n	800847a <TinyBMS_Init+0x202>

		case TINYBMS_STATUS_REGENERATION:
			printf("TinyBMS is Regenerating..\r\n");
 800844c:	4825      	ldr	r0, [pc, #148]	; (80084e4 <TinyBMS_Init+0x26c>)
 800844e:	f005 f9a7 	bl	800d7a0 <puts>
			break;
 8008452:	e012      	b.n	800847a <TinyBMS_Init+0x202>

		case TINYBMS_STATUS_IDLE:
			printf("TinyBMS is Idle..\r\n");
 8008454:	4824      	ldr	r0, [pc, #144]	; (80084e8 <TinyBMS_Init+0x270>)
 8008456:	f005 f9a3 	bl	800d7a0 <puts>
			isIdle = TRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	71fb      	strb	r3, [r7, #7]
			retval = CMD_SUCCESS;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]
			break;
 8008462:	e00a      	b.n	800847a <TinyBMS_Init+0x202>

		case TINYBMS_STATUS_FAULT:
			printf("TinyBMS Fault detected..\r\n");
 8008464:	4821      	ldr	r0, [pc, #132]	; (80084ec <TinyBMS_Init+0x274>)
 8008466:	f005 f99b 	bl	800d7a0 <puts>
			//Check for any active events
			TinyBMS_CAN_ReadAllEvents(&hcan1);
 800846a:	4808      	ldr	r0, [pc, #32]	; (800848c <TinyBMS_Init+0x214>)
 800846c:	f7fd fda0 	bl	8005fb0 <TinyBMS_CAN_ReadAllEvents>
			retval = CMD_FAILURE;
 8008470:	23ff      	movs	r3, #255	; 0xff
 8008472:	73fb      	strb	r3, [r7, #15]
			break;
 8008474:	e001      	b.n	800847a <TinyBMS_Init+0x202>

		default:
			Error_Handler();
 8008476:	f000 fbbd 	bl	8008bf4 <Error_Handler>
	while(!isIdle) {
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0b9      	beq.n	80083f4 <TinyBMS_Init+0x17c>
		}
	}

	return retval;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000200 	.word	0x20000200
 8008490:	08012ae8 	.word	0x08012ae8
 8008494:	08012af4 	.word	0x08012af4
 8008498:	08012b04 	.word	0x08012b04
 800849c:	08012b08 	.word	0x08012b08
 80084a0:	08012b1c 	.word	0x08012b1c
 80084a4:	08012a08 	.word	0x08012a08
 80084a8:	08012b34 	.word	0x08012b34
 80084ac:	08012b54 	.word	0x08012b54
 80084b0:	08012b78 	.word	0x08012b78
 80084b4:	08012b98 	.word	0x08012b98
 80084b8:	08012bc4 	.word	0x08012bc4
 80084bc:	08012be4 	.word	0x08012be4
 80084c0:	08012c08 	.word	0x08012c08
 80084c4:	2000037c 	.word	0x2000037c
 80084c8:	2000037e 	.word	0x2000037e
 80084cc:	20000380 	.word	0x20000380
 80084d0:	20000384 	.word	0x20000384
 80084d4:	20000388 	.word	0x20000388
 80084d8:	08012c38 	.word	0x08012c38
 80084dc:	08012c50 	.word	0x08012c50
 80084e0:	08012c6c 	.word	0x08012c6c
 80084e4:	08012c88 	.word	0x08012c88
 80084e8:	08012ca4 	.word	0x08012ca4
 80084ec:	08012cb8 	.word	0x08012cb8

080084f0 <SystemClock_Config_HSI>:

void SystemClock_Config_HSI(uint8_t clock_freq) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b094      	sub	sp, #80	; 0x50
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init = {0};
 80084fa:	f107 031c 	add.w	r3, r7, #28
 80084fe:	2230      	movs	r2, #48	; 0x30
 8008500:	2100      	movs	r1, #0
 8008502:	4618      	mov	r0, r3
 8008504:	f004 fc54 	bl	800cdb0 <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 8008508:	f107 0308 	add.w	r3, r7, #8
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	605a      	str	r2, [r3, #4]
 8008512:	609a      	str	r2, [r3, #8]
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	611a      	str	r2, [r3, #16]
	uint8_t flash_latency = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	//Using HSI to derive PLL
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800851e:	2302      	movs	r3, #2
 8008520:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 8008522:	2301      	movs	r3, #1
 8008524:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8008526:	2302      	movs	r3, #2
 8008528:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800852a:	2300      	movs	r3, #0
 800852c:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq) {
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b78      	cmp	r3, #120	; 0x78
 8008532:	d036      	beq.n	80085a2 <SystemClock_Config_HSI+0xb2>
 8008534:	2b78      	cmp	r3, #120	; 0x78
 8008536:	dc77      	bgt.n	8008628 <SystemClock_Config_HSI+0x138>
 8008538:	2b32      	cmp	r3, #50	; 0x32
 800853a:	d002      	beq.n	8008542 <SystemClock_Config_HSI+0x52>
 800853c:	2b54      	cmp	r3, #84	; 0x54
 800853e:	d018      	beq.n	8008572 <SystemClock_Config_HSI+0x82>
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
		flash_latency = 3;
		break;

	default:
		return;
 8008540:	e072      	b.n	8008628 <SystemClock_Config_HSI+0x138>
		osc_init.PLL.PLLM = 16;
 8008542:	2310      	movs	r3, #16
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 100;
 8008546:	2364      	movs	r3, #100	; 0x64
 8008548:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800854a:	2302      	movs	r3, #2
 800854c:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 800854e:	2302      	movs	r3, #2
 8008550:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8008552:	230f      	movs	r3, #15
 8008554:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008556:	2302      	movs	r3, #2
 8008558:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800855a:	2300      	movs	r3, #0
 800855c:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800855e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008562:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8008564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008568:	61bb      	str	r3, [r7, #24]
		flash_latency = 1;
 800856a:	2301      	movs	r3, #1
 800856c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8008570:	e02f      	b.n	80085d2 <SystemClock_Config_HSI+0xe2>
		osc_init.PLL.PLLM = 16;
 8008572:	2310      	movs	r3, #16
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 168;
 8008576:	23a8      	movs	r3, #168	; 0xa8
 8008578:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800857a:	2302      	movs	r3, #2
 800857c:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 800857e:	2302      	movs	r3, #2
 8008580:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8008582:	230f      	movs	r3, #15
 8008584:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008586:	2302      	movs	r3, #2
 8008588:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800858a:	2300      	movs	r3, #0
 800858c:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800858e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008592:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8008594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008598:	61bb      	str	r3, [r7, #24]
		flash_latency = 2;
 800859a:	2302      	movs	r3, #2
 800859c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 80085a0:	e017      	b.n	80085d2 <SystemClock_Config_HSI+0xe2>
		osc_init.PLL.PLLM = 16;
 80085a2:	2310      	movs	r3, #16
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 240;
 80085a6:	23f0      	movs	r3, #240	; 0xf0
 80085a8:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80085aa:	2302      	movs	r3, #2
 80085ac:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 80085ae:	2302      	movs	r3, #2
 80085b0:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80085b2:	230f      	movs	r3, #15
 80085b4:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085b6:	2302      	movs	r3, #2
 80085b8:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80085be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085c2:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80085c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085c8:	61bb      	str	r3, [r7, #24]
		flash_latency = 3;
 80085ca:	2303      	movs	r3, #3
 80085cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 80085d0:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 80085d2:	f107 031c 	add.w	r3, r7, #28
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 fffc 	bl	800a5d4 <HAL_RCC_OscConfig>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <SystemClock_Config_HSI+0xf6>
		Error_Handler();
 80085e2:	f000 fb07 	bl	8008bf4 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) {
 80085e6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80085ea:	f107 0308 	add.w	r3, r7, #8
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f002 fa93 	bl	800ab1c <HAL_RCC_ClockConfig>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <SystemClock_Config_HSI+0x110>
		Error_Handler();
 80085fc:	f000 fafa 	bl	8008bf4 <Error_Handler>
	}

	//Configure the SYSTICK timer interrupt frequency for every 1ms
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8008600:	f002 fc7e 	bl	800af00 <HAL_RCC_GetHCLKFreq>
 8008604:	4603      	mov	r3, r0
 8008606:	4a0a      	ldr	r2, [pc, #40]	; (8008630 <SystemClock_Config_HSI+0x140>)
 8008608:	fba2 2303 	umull	r2, r3, r2, r3
 800860c:	099b      	lsrs	r3, r3, #6
 800860e:	4618      	mov	r0, r3
 8008610:	f001 fd51 	bl	800a0b6 <HAL_SYSTICK_Config>
	//Configure SYSTICK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008614:	2004      	movs	r0, #4
 8008616:	f001 fd5b 	bl	800a0d0 <HAL_SYSTICK_CLKSourceConfig>
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800861a:	2200      	movs	r2, #0
 800861c:	2100      	movs	r1, #0
 800861e:	f04f 30ff 	mov.w	r0, #4294967295
 8008622:	f001 fd1e 	bl	800a062 <HAL_NVIC_SetPriority>
 8008626:	e000      	b.n	800862a <SystemClock_Config_HSI+0x13a>
		return;
 8008628:	bf00      	nop
}
 800862a:	3750      	adds	r7, #80	; 0x50
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	10624dd3 	.word	0x10624dd3

08008634 <GPIO_Init>:

void GPIO_Init(void) {
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800863a:	f107 0314 	add.w	r3, r7, #20
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	605a      	str	r2, [r3, #4]
 8008644:	609a      	str	r2, [r3, #8]
 8008646:	60da      	str	r2, [r3, #12]
 8008648:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800864a:	4b2d      	ldr	r3, [pc, #180]	; (8008700 <GPIO_Init+0xcc>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	4a2c      	ldr	r2, [pc, #176]	; (8008700 <GPIO_Init+0xcc>)
 8008650:	f043 0301 	orr.w	r3, r3, #1
 8008654:	6313      	str	r3, [r2, #48]	; 0x30
 8008656:	4b2a      	ldr	r3, [pc, #168]	; (8008700 <GPIO_Init+0xcc>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8008662:	4b27      	ldr	r3, [pc, #156]	; (8008700 <GPIO_Init+0xcc>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	4a26      	ldr	r2, [pc, #152]	; (8008700 <GPIO_Init+0xcc>)
 8008668:	f043 0302 	orr.w	r3, r3, #2
 800866c:	6313      	str	r3, [r2, #48]	; 0x30
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <GPIO_Init+0xcc>)
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800867a:	4b21      	ldr	r3, [pc, #132]	; (8008700 <GPIO_Init+0xcc>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	4a20      	ldr	r2, [pc, #128]	; (8008700 <GPIO_Init+0xcc>)
 8008680:	f043 0304 	orr.w	r3, r3, #4
 8008684:	6313      	str	r3, [r2, #48]	; 0x30
 8008686:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <GPIO_Init+0xcc>)
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	60bb      	str	r3, [r7, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8008692:	4b1b      	ldr	r3, [pc, #108]	; (8008700 <GPIO_Init+0xcc>)
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	4a1a      	ldr	r2, [pc, #104]	; (8008700 <GPIO_Init+0xcc>)
 8008698:	f043 0308 	orr.w	r3, r3, #8
 800869c:	6313      	str	r3, [r2, #48]	; 0x30
 800869e:	4b18      	ldr	r3, [pc, #96]	; (8008700 <GPIO_Init+0xcc>)
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	f003 0308 	and.w	r3, r3, #8
 80086a6:	607b      	str	r3, [r7, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, (LED1_Pin | LED2_Pin | LED3_Pin), GPIO_PIN_RESET);
 80086aa:	2200      	movs	r2, #0
 80086ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80086b0:	4814      	ldr	r0, [pc, #80]	; (8008704 <GPIO_Init+0xd0>)
 80086b2:	f001 ff75 	bl	800a5a0 <HAL_GPIO_WritePin>

	/* Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80086b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80086bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80086c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80086c6:	f107 0314 	add.w	r3, r7, #20
 80086ca:	4619      	mov	r1, r3
 80086cc:	480e      	ldr	r0, [pc, #56]	; (8008708 <GPIO_Init+0xd4>)
 80086ce:	f001 fdbb 	bl	800a248 <HAL_GPIO_Init>

	/* Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = (LED1_Pin | LED2_Pin | LED3_Pin);
 80086d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80086d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086d8:	2301      	movs	r3, #1
 80086da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086dc:	2300      	movs	r3, #0
 80086de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086e0:	2300      	movs	r3, #0
 80086e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80086e4:	f107 0314 	add.w	r3, r7, #20
 80086e8:	4619      	mov	r1, r3
 80086ea:	4806      	ldr	r0, [pc, #24]	; (8008704 <GPIO_Init+0xd0>)
 80086ec:	f001 fdac 	bl	800a248 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80086f0:	2028      	movs	r0, #40	; 0x28
 80086f2:	f001 fcd2 	bl	800a09a <HAL_NVIC_EnableIRQ>
}
 80086f6:	bf00      	nop
 80086f8:	3728      	adds	r7, #40	; 0x28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	40023800 	.word	0x40023800
 8008704:	40020400 	.word	0x40020400
 8008708:	40020800 	.word	0x40020800

0800870c <UART_Init>:

void UART_Init(void) {
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
	//USART2: PD5 PD6 for TinyBMS communication
	huart2.Instance = USART2;
 8008710:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <UART_Init+0xa4>)
 8008712:	4a28      	ldr	r2, [pc, #160]	; (80087b4 <UART_Init+0xa8>)
 8008714:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8008716:	4b26      	ldr	r3, [pc, #152]	; (80087b0 <UART_Init+0xa4>)
 8008718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800871c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800871e:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <UART_Init+0xa4>)
 8008720:	2200      	movs	r2, #0
 8008722:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8008724:	4b22      	ldr	r3, [pc, #136]	; (80087b0 <UART_Init+0xa4>)
 8008726:	2200      	movs	r2, #0
 8008728:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800872a:	4b21      	ldr	r3, [pc, #132]	; (80087b0 <UART_Init+0xa4>)
 800872c:	2200      	movs	r2, #0
 800872e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008730:	4b1f      	ldr	r3, [pc, #124]	; (80087b0 <UART_Init+0xa4>)
 8008732:	2200      	movs	r2, #0
 8008734:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8008736:	4b1e      	ldr	r3, [pc, #120]	; (80087b0 <UART_Init+0xa4>)
 8008738:	220c      	movs	r2, #12
 800873a:	615a      	str	r2, [r3, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <UART_Init+0xa4>)
 800873e:	2200      	movs	r2, #0
 8008740:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <UART_Init+0xa4>)
 8008744:	2200      	movs	r2, #0
 8008746:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008748:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <UART_Init+0xa4>)
 800874a:	2200      	movs	r2, #0
 800874c:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart2) != HAL_OK) {
 800874e:	4818      	ldr	r0, [pc, #96]	; (80087b0 <UART_Init+0xa4>)
 8008750:	f002 ff0e 	bl	800b570 <HAL_UART_Init>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <UART_Init+0x52>
		Error_Handler();
 800875a:	f000 fa4b 	bl	8008bf4 <Error_Handler>
	}

	//USART3: PD8 PD9 for ST-LINK debugging (printf ITM)
	huart3.Instance = USART3;
 800875e:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <UART_Init+0xac>)
 8008760:	4a16      	ldr	r2, [pc, #88]	; (80087bc <UART_Init+0xb0>)
 8008762:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8008764:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <UART_Init+0xac>)
 8008766:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800876a:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800876c:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <UART_Init+0xac>)
 800876e:	2200      	movs	r2, #0
 8008770:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8008772:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <UART_Init+0xac>)
 8008774:	2200      	movs	r2, #0
 8008776:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8008778:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <UART_Init+0xac>)
 800877a:	2200      	movs	r2, #0
 800877c:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800877e:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <UART_Init+0xac>)
 8008780:	2200      	movs	r2, #0
 8008782:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <UART_Init+0xac>)
 8008786:	220c      	movs	r2, #12
 8008788:	615a      	str	r2, [r3, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800878a:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <UART_Init+0xac>)
 800878c:	2200      	movs	r2, #0
 800878e:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008790:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <UART_Init+0xac>)
 8008792:	2200      	movs	r2, #0
 8008794:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008796:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <UART_Init+0xac>)
 8008798:	2200      	movs	r2, #0
 800879a:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart3) != HAL_OK) {
 800879c:	4806      	ldr	r0, [pc, #24]	; (80087b8 <UART_Init+0xac>)
 800879e:	f002 fee7 	bl	800b570 <HAL_UART_Init>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <UART_Init+0xa0>
		Error_Handler();
 80087a8:	f000 fa24 	bl	8008bf4 <Error_Handler>
	}
}
 80087ac:	bf00      	nop
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20000228 	.word	0x20000228
 80087b4:	40004400 	.word	0x40004400
 80087b8:	200002ac 	.word	0x200002ac
 80087bc:	40004800 	.word	0x40004800

080087c0 <TIM_Init>:

void TIM_Init(void) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
	//TIM6 - Basic Timer
	//Every 1 Second or 1Hz freq
	htim6.Instance = TIM6;
 80087c4:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <TIM_Init+0x30>)
 80087c6:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <TIM_Init+0x34>)
 80087c8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 4999;
 80087ca:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <TIM_Init+0x30>)
 80087cc:	f241 3287 	movw	r2, #4999	; 0x1387
 80087d0:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 10000-1;
 80087d2:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <TIM_Init+0x30>)
 80087d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80087d8:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80087da:	4805      	ldr	r0, [pc, #20]	; (80087f0 <TIM_Init+0x30>)
 80087dc:	f002 fbc4 	bl	800af68 <HAL_TIM_Base_Init>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <TIM_Init+0x2a>
		Error_Handler();
 80087e6:	f000 fa05 	bl	8008bf4 <Error_Handler>
	}
}
 80087ea:	bf00      	nop
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000330 	.word	0x20000330
 80087f4:	40001000 	.word	0x40001000

080087f8 <CAN_Init>:

void CAN_Init(uint8_t can_bitrate) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
	 *  	. TinyBMS CAN bitrate of 500kbit/s (cannot be changed by user)
	 *  . 3 Tx Mailboxes, 2 Rx FIFOs
	 *  . 28 Filter banks shared between CAN1 and CAN2 for dual CAN
	 *  . Max Bitrate of bxCAN is 1Mbit/s
	 * 	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	hcan1.Instance = CAN1;
 8008802:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <CAN_Init+0x78>)
 8008804:	4a1b      	ldr	r2, [pc, #108]	; (8008874 <CAN_Init+0x7c>)
 8008806:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008808:	4b19      	ldr	r3, [pc, #100]	; (8008870 <CAN_Init+0x78>)
 800880a:	2200      	movs	r2, #0
 800880c:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 800880e:	4b18      	ldr	r3, [pc, #96]	; (8008870 <CAN_Init+0x78>)
 8008810:	2201      	movs	r2, #1
 8008812:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8008814:	4b16      	ldr	r3, [pc, #88]	; (8008870 <CAN_Init+0x78>)
 8008816:	2201      	movs	r2, #1
 8008818:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 800881a:	4b15      	ldr	r3, [pc, #84]	; (8008870 <CAN_Init+0x78>)
 800881c:	2200      	movs	r2, #0
 800881e:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008820:	4b13      	ldr	r3, [pc, #76]	; (8008870 <CAN_Init+0x78>)
 8008822:	2200      	movs	r2, #0
 8008824:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8008826:	4b12      	ldr	r3, [pc, #72]	; (8008870 <CAN_Init+0x78>)
 8008828:	2200      	movs	r2, #0
 800882a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <CAN_Init+0x78>)
 800882e:	2200      	movs	r2, #0
 8008830:	775a      	strb	r2, [r3, #29]

	/* Settings related to CAN bit timings (http://www.bittiming.can-wiki.info/) */
	switch(can_bitrate) {
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d10d      	bne.n	8008854 <CAN_Init+0x5c>
	*/
	/********* TinyBMS only supports 500kbit/s CAN speed *********/
	case CANBITRATE_500KBIT_50MHZ:
		/* ** 500kbit/s @ 50MHz SYSCLK ** */
		//prescaler = 5, num_TQ = 10, Seg1 = 8, Seg2 = 1, Sample point at 90.0, register CAN_BTR = 0x00070009
		hcan1.Init.Prescaler = 10;
 8008838:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <CAN_Init+0x78>)
 800883a:	220a      	movs	r2, #10
 800883c:	605a      	str	r2, [r3, #4]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800883e:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <CAN_Init+0x78>)
 8008840:	2200      	movs	r2, #0
 8008842:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <CAN_Init+0x78>)
 8008846:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800884a:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800884c:	4b08      	ldr	r3, [pc, #32]	; (8008870 <CAN_Init+0x78>)
 800884e:	2200      	movs	r2, #0
 8008850:	615a      	str	r2, [r3, #20]
		break;
 8008852:	e001      	b.n	8008858 <CAN_Init+0x60>
		hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
		hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
		break;
	*/
	default:
		Error_Handler();
 8008854:	f000 f9ce 	bl	8008bf4 <Error_Handler>
	}
	if(HAL_CAN_Init(&hcan1) != HAL_OK) {
 8008858:	4805      	ldr	r0, [pc, #20]	; (8008870 <CAN_Init+0x78>)
 800885a:	f000 fc9d 	bl	8009198 <HAL_CAN_Init>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <CAN_Init+0x70>
		Error_Handler();
 8008864:	f000 f9c6 	bl	8008bf4 <Error_Handler>
	}
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20000200 	.word	0x20000200
 8008874:	40006400 	.word	0x40006400

08008878 <CAN_Filter_Config>:

void CAN_Filter_Config(void) {
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	af00      	add	r7, sp, #0
	 *
	 * Note: Mask Mode can also be used to check:
	 * RTR = 0 (Data Frame)				IDE = 0 (11-bit STID)
	 * RTR = 1 (Remote Frame)			IDE = 1 (29-bit EXID)
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	CAN_FilterTypeDef can1_filter_init = {0};
 800887e:	463b      	mov	r3, r7
 8008880:	2228      	movs	r2, #40	; 0x28
 8008882:	2100      	movs	r1, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f004 fa93 	bl	800cdb0 <memset>

	//TinyBMS Default Node ID: 0x01 (hard-coded)
	//ID List Mode: Allows TinyBMS Request/Response messages from bus
	can1_filter_init.FilterActivation = ENABLE;
 800888a:	2301      	movs	r3, #1
 800888c:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8008892:	2300      	movs	r3, #0
 8008894:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x4020; 	//IDLIST "Request to TinyBMS"
 8008896:	f244 0320 	movw	r3, #16416	; 0x4020
 800889a:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800889c:	2300      	movs	r3, #0
 800889e:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x4820; //IDLIST "Response from TinyBMS"
 80088a0:	f644 0320 	movw	r3, #18464	; 0x4820
 80088a4:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDLIST; //ID List Mode
 80088aa:	2301      	movs	r3, #1
 80088ac:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80088ae:	2301      	movs	r3, #1
 80088b0:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK) {
 80088b2:	463b      	mov	r3, r7
 80088b4:	4619      	mov	r1, r3
 80088b6:	4806      	ldr	r0, [pc, #24]	; (80088d0 <CAN_Filter_Config+0x58>)
 80088b8:	f000 fd6a 	bl	8009390 <HAL_CAN_ConfigFilter>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <CAN_Filter_Config+0x4e>
		Error_Handler();
 80088c2:	f000 f997 	bl	8008bf4 <Error_Handler>
	}
}
 80088c6:	bf00      	nop
 80088c8:	3728      	adds	r7, #40	; 0x28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000200 	.word	0x20000200

080088d4 <CAN_Begin>:

void CAN_Begin(void) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
	//Activate Notifications (Interrupts) by setting CAN_IER bits
	if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80088d8:	f240 4103 	movw	r1, #1027	; 0x403
 80088dc:	4808      	ldr	r0, [pc, #32]	; (8008900 <CAN_Begin+0x2c>)
 80088de:	f001 f890 	bl	8009a02 <HAL_CAN_ActivateNotification>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <CAN_Begin+0x18>
		Error_Handler();
 80088e8:	f000 f984 	bl	8008bf4 <Error_Handler>
	}

	//Start CAN
	if(HAL_CAN_Start(&hcan1) != HAL_OK) {
 80088ec:	4804      	ldr	r0, [pc, #16]	; (8008900 <CAN_Begin+0x2c>)
 80088ee:	f000 fe2f 	bl	8009550 <HAL_CAN_Start>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <CAN_Begin+0x28>
		Error_Handler();
 80088f8:	f000 f97c 	bl	8008bf4 <Error_Handler>
	}
}
 80088fc:	bf00      	nop
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	20000200 	.word	0x20000200

08008904 <CAN1_Tx>:

void CAN1_Tx(uint8_t device, uint8_t* message, uint8_t len) {
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	6039      	str	r1, [r7, #0]
 800890e:	71fb      	strb	r3, [r7, #7]
 8008910:	4613      	mov	r3, r2
 8008912:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	if(device == TINYBMS) {
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d129      	bne.n	800896e <CAN1_Tx+0x6a>
		TxHeader.DLC = len;				//Data Length Code (in Bytes)
 800891a:	79bb      	ldrb	r3, [r7, #6]
 800891c:	623b      	str	r3, [r7, #32]
		if(message[0] == CAN_TBMS_WRITE_CAN_NODEID) 	//Standard ID (Write new nodeID.. Request StdID: 0x200 + user_input)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	2b29      	cmp	r3, #41	; 0x29
 8008924:	d106      	bne.n	8008934 <CAN1_Tx+0x30>
			TxHeader.StdId = (TINYBMS_CAN_REQUEST_BASE_STDID + message[1]);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	e00a      	b.n	800894a <CAN1_Tx+0x46>
		else if(message[0] == CAN_TBMS_READ_CAN_NODEID) //Standard ID (Read current nodeID.. Request StdID: 0x200)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b28      	cmp	r3, #40	; 0x28
 800893a:	d103      	bne.n	8008944 <CAN1_Tx+0x40>
			TxHeader.StdId = TINYBMS_CAN_REQUEST_BASE_STDID;
 800893c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008940:	613b      	str	r3, [r7, #16]
 8008942:	e002      	b.n	800894a <CAN1_Tx+0x46>
		else 											//Standard ID (Otherwise.. Request StdID: 0x201-0x23F)
			TxHeader.StdId = TinybmsStdID_Request;
 8008944:	4b19      	ldr	r3, [pc, #100]	; (80089ac <CAN1_Tx+0xa8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD; 		//Standard or Extended ID type
 800894a:	2300      	movs	r3, #0
 800894c:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;	//Remote Transmission Request
 800894e:	2300      	movs	r3, #0
 8008950:	61fb      	str	r3, [r7, #28]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 8008952:	f107 030c 	add.w	r3, r7, #12
 8008956:	f107 0110 	add.w	r1, r7, #16
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	4814      	ldr	r0, [pc, #80]	; (80089b0 <CAN1_Tx+0xac>)
 800895e:	f000 fe3b 	bl	80095d8 <HAL_CAN_AddTxMessage>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01d      	beq.n	80089a4 <CAN1_Tx+0xa0>
			Error_Handler();
 8008968:	f000 f944 	bl	8008bf4 <Error_Handler>
			Error_Handler();
		}
	} else {
		Error_Handler();
	}
}
 800896c:	e01a      	b.n	80089a4 <CAN1_Tx+0xa0>
	} else if(device == ELCONCHARGER2) {
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	2b02      	cmp	r3, #2
 8008972:	d115      	bne.n	80089a0 <CAN1_Tx+0x9c>
		TxHeader.DLC = 8;				//Data Length Code (in Bytes)
 8008974:	2308      	movs	r3, #8
 8008976:	623b      	str	r3, [r7, #32]
		TxHeader.ExtId = 0x1806E5F4;	//Extended ID
 8008978:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <CAN1_Tx+0xb0>)
 800897a:	617b      	str	r3, [r7, #20]
		TxHeader.IDE = CAN_ID_EXT; 		//Standard or Extended ID type
 800897c:	2304      	movs	r3, #4
 800897e:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;	//Remote Transmission Request
 8008980:	2300      	movs	r3, #0
 8008982:	61fb      	str	r3, [r7, #28]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 8008984:	f107 030c 	add.w	r3, r7, #12
 8008988:	f107 0110 	add.w	r1, r7, #16
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	4808      	ldr	r0, [pc, #32]	; (80089b0 <CAN1_Tx+0xac>)
 8008990:	f000 fe22 	bl	80095d8 <HAL_CAN_AddTxMessage>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <CAN1_Tx+0xa0>
			Error_Handler();
 800899a:	f000 f92b 	bl	8008bf4 <Error_Handler>
}
 800899e:	e001      	b.n	80089a4 <CAN1_Tx+0xa0>
		Error_Handler();
 80089a0:	f000 f928 	bl	8008bf4 <Error_Handler>
}
 80089a4:	bf00      	nop
 80089a6:	3728      	adds	r7, #40	; 0x28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000000 	.word	0x20000000
 80089b0:	20000200 	.word	0x20000200
 80089b4:	1806e5f4 	.word	0x1806e5f4

080089b8 <HAL_UART_TxCpltCallback>:
	default:
		break;
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <HAL_UART_TxCpltCallback+0x20>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d102      	bne.n	80089d0 <HAL_UART_TxCpltCallback+0x18>
		printf("HAL_UART_TxCpltCallback USART2\r\n");
 80089ca:	4804      	ldr	r0, [pc, #16]	; (80089dc <HAL_UART_TxCpltCallback+0x24>)
 80089cc:	f004 fee8 	bl	800d7a0 <puts>
	}
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	40004400 	.word	0x40004400
 80089dc:	08012cd4 	.word	0x08012cd4

080089e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a04      	ldr	r2, [pc, #16]	; (8008a00 <HAL_UART_RxCpltCallback+0x20>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d102      	bne.n	80089f8 <HAL_UART_RxCpltCallback+0x18>
		printf("HAL_UART_RxCpltCallback USART2\r\n");
 80089f2:	4804      	ldr	r0, [pc, #16]	; (8008a04 <HAL_UART_RxCpltCallback+0x24>)
 80089f4:	f004 fed4 	bl	800d7a0 <puts>
	}
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	40004400 	.word	0x40004400
 8008a04:	08012cf4 	.word	0x08012cf4

08008a08 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a04      	ldr	r2, [pc, #16]	; (8008a28 <HAL_UART_ErrorCallback+0x20>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d102      	bne.n	8008a20 <HAL_UART_ErrorCallback+0x18>
		printf("HAL_UART_ErrorCallback USART2\r\n");
 8008a1a:	4804      	ldr	r0, [pc, #16]	; (8008a2c <HAL_UART_ErrorCallback+0x24>)
 8008a1c:	f004 fec0 	bl	800d7a0 <puts>
	}
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40004400 	.word	0x40004400
 8008a2c:	08012d14 	.word	0x08012d14

08008a30 <HAL_CAN_TxMailbox0CompleteCallback>:
	if(huart->Instance == USART2) {
		printf("HAL_UART_AbortCpltCallback USART2\r\n");
	}
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b090      	sub	sp, #64	; 0x40
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a0e      	ldr	r2, [pc, #56]	; (8008a78 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d116      	bne.n	8008a70 <HAL_CAN_TxMailbox0CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox0CompleteCallback CAN1\r\n");
 8008a42:	480e      	ldr	r0, [pc, #56]	; (8008a7c <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 8008a44:	f004 feac 	bl	800d7a0 <puts>
		sprintf(msg,"Message Transmitted:M0\r\n");
 8008a48:	f107 030c 	add.w	r3, r7, #12
 8008a4c:	490c      	ldr	r1, [pc, #48]	; (8008a80 <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f004 fec6 	bl	800d7e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8008a54:	f107 030c 	add.w	r3, r7, #12
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7f7 fbd9 	bl	8000210 <strlen>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	f107 010c 	add.w	r1, r7, #12
 8008a66:	f04f 33ff 	mov.w	r3, #4294967295
 8008a6a:	4806      	ldr	r0, [pc, #24]	; (8008a84 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8008a6c:	f002 fdce 	bl	800b60c <HAL_UART_Transmit>
	}
}
 8008a70:	bf00      	nop
 8008a72:	3740      	adds	r7, #64	; 0x40
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	40006400 	.word	0x40006400
 8008a7c:	08012db0 	.word	0x08012db0
 8008a80:	08012ddc 	.word	0x08012ddc
 8008a84:	20000228 	.word	0x20000228

08008a88 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b090      	sub	sp, #64	; 0x40
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a0e      	ldr	r2, [pc, #56]	; (8008ad0 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d116      	bne.n	8008ac8 <HAL_CAN_TxMailbox1CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox1CompleteCallback CAN1\r\n");
 8008a9a:	480e      	ldr	r0, [pc, #56]	; (8008ad4 <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 8008a9c:	f004 fe80 	bl	800d7a0 <puts>
		sprintf(msg,"Message Transmitted:M1\r\n");
 8008aa0:	f107 030c 	add.w	r3, r7, #12
 8008aa4:	490c      	ldr	r1, [pc, #48]	; (8008ad8 <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f004 fe9a 	bl	800d7e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8008aac:	f107 030c 	add.w	r3, r7, #12
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7f7 fbad 	bl	8000210 <strlen>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	f107 010c 	add.w	r1, r7, #12
 8008abe:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac2:	4806      	ldr	r0, [pc, #24]	; (8008adc <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 8008ac4:	f002 fda2 	bl	800b60c <HAL_UART_Transmit>
	}
}
 8008ac8:	bf00      	nop
 8008aca:	3740      	adds	r7, #64	; 0x40
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	40006400 	.word	0x40006400
 8008ad4:	08012df8 	.word	0x08012df8
 8008ad8:	08012e24 	.word	0x08012e24
 8008adc:	20000228 	.word	0x20000228

08008ae0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b090      	sub	sp, #64	; 0x40
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a0e      	ldr	r2, [pc, #56]	; (8008b28 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d116      	bne.n	8008b20 <HAL_CAN_TxMailbox2CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox2CompleteCallback CAN1\r\n");
 8008af2:	480e      	ldr	r0, [pc, #56]	; (8008b2c <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 8008af4:	f004 fe54 	bl	800d7a0 <puts>
		sprintf(msg,"Message Transmitted:M2\r\n");
 8008af8:	f107 030c 	add.w	r3, r7, #12
 8008afc:	490c      	ldr	r1, [pc, #48]	; (8008b30 <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 8008afe:	4618      	mov	r0, r3
 8008b00:	f004 fe6e 	bl	800d7e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8008b04:	f107 030c 	add.w	r3, r7, #12
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7f7 fb81 	bl	8000210 <strlen>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	f107 010c 	add.w	r1, r7, #12
 8008b16:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1a:	4806      	ldr	r0, [pc, #24]	; (8008b34 <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 8008b1c:	f002 fd76 	bl	800b60c <HAL_UART_Transmit>
	}
}
 8008b20:	bf00      	nop
 8008b22:	3740      	adds	r7, #64	; 0x40
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	40006400 	.word	0x40006400
 8008b2c:	08012e40 	.word	0x08012e40
 8008b30:	08012e6c 	.word	0x08012e6c
 8008b34:	20000228 	.word	0x20000228

08008b38 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d10c      	bne.n	8008b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		//Deactivate Notifications before getting Rx Message
		if(HAL_CAN_DeactivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8008b4a:	f240 4103 	movw	r1, #1027	; 0x403
 8008b4e:	4808      	ldr	r0, [pc, #32]	; (8008b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8008b50:	f000 ff7d 	bl	8009a4e <HAL_CAN_DeactivateNotification>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
			Error_Handler();
 8008b5a:	f000 f84b 	bl	8008bf4 <Error_Handler>
		}

		printf("HAL_CAN_RxFifo0MsgPendingCallback CAN1\r\n");
 8008b5e:	4805      	ldr	r0, [pc, #20]	; (8008b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8008b60:	f004 fe1e 	bl	800d7a0 <puts>
	}
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40006400 	.word	0x40006400
 8008b70:	20000200 	.word	0x20000200
 8008b74:	08012e88 	.word	0x08012e88

08008b78 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b090      	sub	sp, #64	; 0x40
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a0e      	ldr	r2, [pc, #56]	; (8008bc0 <HAL_CAN_ErrorCallback+0x48>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d116      	bne.n	8008bb8 <HAL_CAN_ErrorCallback+0x40>
		char msg[50];
		printf("HAL_CAN_ErrorCallback CAN1\r\n");
 8008b8a:	480e      	ldr	r0, [pc, #56]	; (8008bc4 <HAL_CAN_ErrorCallback+0x4c>)
 8008b8c:	f004 fe08 	bl	800d7a0 <puts>
		sprintf(msg, "CAN Error Detected\r\n");
 8008b90:	f107 030c 	add.w	r3, r7, #12
 8008b94:	490c      	ldr	r1, [pc, #48]	; (8008bc8 <HAL_CAN_ErrorCallback+0x50>)
 8008b96:	4618      	mov	r0, r3
 8008b98:	f004 fe22 	bl	800d7e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8008b9c:	f107 030c 	add.w	r3, r7, #12
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f7 fb35 	bl	8000210 <strlen>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	f107 010c 	add.w	r1, r7, #12
 8008bae:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb2:	4806      	ldr	r0, [pc, #24]	; (8008bcc <HAL_CAN_ErrorCallback+0x54>)
 8008bb4:	f002 fd2a 	bl	800b60c <HAL_UART_Transmit>
	}
}
 8008bb8:	bf00      	nop
 8008bba:	3740      	adds	r7, #64	; 0x40
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40006400 	.word	0x40006400
 8008bc4:	08012eb0 	.word	0x08012eb0
 8008bc8:	08012ecc 	.word	0x08012ecc
 8008bcc:	20000228 	.word	0x20000228

08008bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a04      	ldr	r2, [pc, #16]	; (8008bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d101      	bne.n	8008be6 <HAL_TIM_PeriodElapsedCallback+0x16>
		//Every 1 second during Charging, send message to ElCon charger
		ElCon_SendMsg();
 8008be2:	f7ff fb31 	bl	8008248 <ElCon_SendMsg>
	}
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	40001000 	.word	0x40001000

08008bf4 <Error_Handler>:

void Error_Handler(void) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
	printf("Inside Error Handler\r\n");
 8008bf8:	4801      	ldr	r0, [pc, #4]	; (8008c00 <Error_Handler+0xc>)
 8008bfa:	f004 fdd1 	bl	800d7a0 <puts>
	while(1);
 8008bfe:	e7fe      	b.n	8008bfe <Error_Handler+0xa>
 8008c00:	08012ee4 	.word	0x08012ee4

08008c04 <HAL_MspInit>:
* @date 03-02-2022
***********************************************/

#include "main.h"

void HAL_MspInit(void) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0

	/* Low level processor specific inits */
	__HAL_RCC_PWR_CLK_ENABLE();
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <HAL_MspInit+0x74>)
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	4a1a      	ldr	r2, [pc, #104]	; (8008c78 <HAL_MspInit+0x74>)
 8008c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c14:	6413      	str	r3, [r2, #64]	; 0x40
 8008c16:	4b18      	ldr	r3, [pc, #96]	; (8008c78 <HAL_MspInit+0x74>)
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <HAL_MspInit+0x74>)
 8008c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c26:	4a14      	ldr	r2, [pc, #80]	; (8008c78 <HAL_MspInit+0x74>)
 8008c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c2e:	4b12      	ldr	r3, [pc, #72]	; (8008c78 <HAL_MspInit+0x74>)
 8008c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c36:	603b      	str	r3, [r7, #0]
 8008c38:	683b      	ldr	r3, [r7, #0]

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //default setting
 8008c3a:	2003      	movs	r0, #3
 8008c3c:	f001 fa06 	bl	800a04c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 8008c40:	4b0e      	ldr	r3, [pc, #56]	; (8008c7c <HAL_MspInit+0x78>)
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	4a0d      	ldr	r2, [pc, #52]	; (8008c7c <HAL_MspInit+0x78>)
 8008c46:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008c4a:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	f06f 000b 	mvn.w	r0, #11
 8008c54:	f001 fa05 	bl	800a062 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	f06f 000a 	mvn.w	r0, #10
 8008c60:	f001 f9ff 	bl	800a062 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8008c64:	2200      	movs	r2, #0
 8008c66:	2100      	movs	r1, #0
 8008c68:	f06f 0009 	mvn.w	r0, #9
 8008c6c:	f001 f9f9 	bl	800a062 <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	40023800 	.word	0x40023800
 8008c7c:	e000ed00 	.word	0xe000ed00

08008c80 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	605a      	str	r2, [r3, #4]
 8008c92:	609a      	str	r2, [r3, #8]
 8008c94:	60da      	str	r2, [r3, #12]
 8008c96:	611a      	str	r2, [r3, #16]

	if(hcan->Instance == CAN1) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a27      	ldr	r2, [pc, #156]	; (8008d3c <HAL_CAN_MspInit+0xbc>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d147      	bne.n	8008d32 <HAL_CAN_MspInit+0xb2>
		__HAL_RCC_CAN1_CLK_ENABLE();
 8008ca2:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <HAL_CAN_MspInit+0xc0>)
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	4a26      	ldr	r2, [pc, #152]	; (8008d40 <HAL_CAN_MspInit+0xc0>)
 8008ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008cac:	6413      	str	r3, [r2, #64]	; 0x40
 8008cae:	4b24      	ldr	r3, [pc, #144]	; (8008d40 <HAL_CAN_MspInit+0xc0>)
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb6:	613b      	str	r3, [r7, #16]
 8008cb8:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8008cba:	4b21      	ldr	r3, [pc, #132]	; (8008d40 <HAL_CAN_MspInit+0xc0>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	4a20      	ldr	r2, [pc, #128]	; (8008d40 <HAL_CAN_MspInit+0xc0>)
 8008cc0:	f043 0308 	orr.w	r3, r3, #8
 8008cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	; (8008d40 <HAL_CAN_MspInit+0xc0>)
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	f003 0308 	and.w	r3, r3, #8
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]

		/** CAN1 GPIO Configuration
			PD0     ------> CAN1_RX
			PD1     ------> CAN1_TX
		*/
		GPIO_InitStruct.Pin = (CAN1_RX_PIN | CAN1_TX_PIN);
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008ce2:	2309      	movs	r3, #9
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(CAN1_GPIO_Port, &GPIO_InitStruct);
 8008ce6:	f107 0314 	add.w	r3, r7, #20
 8008cea:	4619      	mov	r1, r3
 8008cec:	4815      	ldr	r0, [pc, #84]	; (8008d44 <HAL_CAN_MspInit+0xc4>)
 8008cee:	f001 faab 	bl	800a248 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	210f      	movs	r1, #15
 8008cf6:	2013      	movs	r0, #19
 8008cf8:	f001 f9b3 	bl	800a062 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	210f      	movs	r1, #15
 8008d00:	2014      	movs	r0, #20
 8008d02:	f001 f9ae 	bl	800a062 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8008d06:	2200      	movs	r2, #0
 8008d08:	210f      	movs	r1, #15
 8008d0a:	2015      	movs	r0, #21
 8008d0c:	f001 f9a9 	bl	800a062 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8008d10:	2200      	movs	r2, #0
 8008d12:	210f      	movs	r1, #15
 8008d14:	2016      	movs	r0, #22
 8008d16:	f001 f9a4 	bl	800a062 <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8008d1a:	2013      	movs	r0, #19
 8008d1c:	f001 f9bd 	bl	800a09a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008d20:	2014      	movs	r0, #20
 8008d22:	f001 f9ba 	bl	800a09a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008d26:	2015      	movs	r0, #21
 8008d28:	f001 f9b7 	bl	800a09a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8008d2c:	2016      	movs	r0, #22
 8008d2e:	f001 f9b4 	bl	800a09a <HAL_NVIC_EnableIRQ>
	}
}
 8008d32:	bf00      	nop
 8008d34:	3728      	adds	r7, #40	; 0x28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	40006400 	.word	0x40006400
 8008d40:	40023800 	.word	0x40023800
 8008d44:	40020c00 	.word	0x40020c00

08008d48 <HAL_UART_MspInit>:
		HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
		HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08c      	sub	sp, #48	; 0x30
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d50:	f107 031c 	add.w	r3, r7, #28
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	605a      	str	r2, [r3, #4]
 8008d5a:	609a      	str	r2, [r3, #8]
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	611a      	str	r2, [r3, #16]

	if(huart->Instance == USART2) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a32      	ldr	r2, [pc, #200]	; (8008e30 <HAL_UART_MspInit+0xe8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d130      	bne.n	8008dcc <HAL_UART_MspInit+0x84>
		__HAL_RCC_USART2_CLK_ENABLE();
 8008d6a:	4b32      	ldr	r3, [pc, #200]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	4a31      	ldr	r2, [pc, #196]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d74:	6413      	str	r3, [r2, #64]	; 0x40
 8008d76:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7e:	61bb      	str	r3, [r7, #24]
 8008d80:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8008d82:	4b2c      	ldr	r3, [pc, #176]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	4a2b      	ldr	r2, [pc, #172]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008d88:	f043 0308 	orr.w	r3, r3, #8
 8008d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d8e:	4b29      	ldr	r3, [pc, #164]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f003 0308 	and.w	r3, r3, #8
 8008d96:	617b      	str	r3, [r7, #20]
 8008d98:	697b      	ldr	r3, [r7, #20]
		 *  USART2 GPIO Configuration
			PD5     ------> USART2_TX
			PD6     ------> USART2_RX
		*/

		GPIO_InitStruct.Pin = (USART2_TX_Pin | USART2_RX_Pin);
 8008d9a:	2360      	movs	r3, #96	; 0x60
 8008d9c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da2:	2300      	movs	r3, #0
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008da6:	2303      	movs	r3, #3
 8008da8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008daa:	2307      	movs	r3, #7
 8008dac:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART2_GPIO_Port, &GPIO_InitStruct);
 8008dae:	f107 031c 	add.w	r3, r7, #28
 8008db2:	4619      	mov	r1, r3
 8008db4:	4820      	ldr	r0, [pc, #128]	; (8008e38 <HAL_UART_MspInit+0xf0>)
 8008db6:	f001 fa47 	bl	800a248 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8008dba:	2200      	movs	r2, #0
 8008dbc:	210f      	movs	r1, #15
 8008dbe:	2026      	movs	r0, #38	; 0x26
 8008dc0:	f001 f94f 	bl	800a062 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008dc4:	2026      	movs	r0, #38	; 0x26
 8008dc6:	f001 f968 	bl	800a09a <HAL_NVIC_EnableIRQ>
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
	}
}
 8008dca:	e02d      	b.n	8008e28 <HAL_UART_MspInit+0xe0>
	} else if(huart->Instance == USART3) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a1a      	ldr	r2, [pc, #104]	; (8008e3c <HAL_UART_MspInit+0xf4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d128      	bne.n	8008e28 <HAL_UART_MspInit+0xe0>
		__HAL_RCC_USART3_CLK_ENABLE();
 8008dd6:	4b17      	ldr	r3, [pc, #92]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dda:	4a16      	ldr	r2, [pc, #88]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008de0:	6413      	str	r3, [r2, #64]	; 0x40
 8008de2:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8008dee:	4b11      	ldr	r3, [pc, #68]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	4a10      	ldr	r2, [pc, #64]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008df4:	f043 0308 	orr.w	r3, r3, #8
 8008df8:	6313      	str	r3, [r2, #48]	; 0x30
 8008dfa:	4b0e      	ldr	r3, [pc, #56]	; (8008e34 <HAL_UART_MspInit+0xec>)
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfe:	f003 0308 	and.w	r3, r3, #8
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = (USART3_TX_Pin | USART3_RX_Pin);
 8008e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e0a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e10:	2301      	movs	r3, #1
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e14:	2303      	movs	r3, #3
 8008e16:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008e18:	2307      	movs	r3, #7
 8008e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
 8008e1c:	f107 031c 	add.w	r3, r7, #28
 8008e20:	4619      	mov	r1, r3
 8008e22:	4805      	ldr	r0, [pc, #20]	; (8008e38 <HAL_UART_MspInit+0xf0>)
 8008e24:	f001 fa10 	bl	800a248 <HAL_GPIO_Init>
}
 8008e28:	bf00      	nop
 8008e2a:	3730      	adds	r7, #48	; 0x30
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40004400 	.word	0x40004400
 8008e34:	40023800 	.word	0x40023800
 8008e38:	40020c00 	.word	0x40020c00
 8008e3c:	40004800 	.word	0x40004800

08008e40 <HAL_TIM_Base_MspInit>:
		*/
		HAL_GPIO_DeInit(USART3_GPIO_Port, (USART3_TX_Pin | USART3_RX_Pin));
	}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a0d      	ldr	r2, [pc, #52]	; (8008e84 <HAL_TIM_Base_MspInit+0x44>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d113      	bne.n	8008e7a <HAL_TIM_Base_MspInit+0x3a>
		//1. Enable TIM6 Clock
		__HAL_RCC_TIM6_CLK_ENABLE();
 8008e52:	4b0d      	ldr	r3, [pc, #52]	; (8008e88 <HAL_TIM_Base_MspInit+0x48>)
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	4a0c      	ldr	r2, [pc, #48]	; (8008e88 <HAL_TIM_Base_MspInit+0x48>)
 8008e58:	f043 0310 	orr.w	r3, r3, #16
 8008e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e5e:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <HAL_TIM_Base_MspInit+0x48>)
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	f003 0310 	and.w	r3, r3, #16
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]

		//2. Enable TIM6 IRQ
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008e6a:	2036      	movs	r0, #54	; 0x36
 8008e6c:	f001 f915 	bl	800a09a <HAL_NVIC_EnableIRQ>

		//3. Setup TIM6_DAC_IRQn priority
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8008e70:	2200      	movs	r2, #0
 8008e72:	210f      	movs	r1, #15
 8008e74:	2036      	movs	r0, #54	; 0x36
 8008e76:	f001 f8f4 	bl	800a062 <HAL_NVIC_SetPriority>
	}
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40001000 	.word	0x40001000
 8008e88:	40023800 	.word	0x40023800

08008e8c <ITM_SendChar>:
#define ITM_TER         	*((volatile uint32_t*) 0xE0000E00 )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TCR            	*((volatile uint32_t*) 0xE0000E80 )

void ITM_SendChar(uint8_t ch)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	71fb      	strb	r3, [r7, #7]
    /* Stimulus Port #N is enabled when bit STIMENA[N] is set*/
	ITM_TER |= ( 1 << 0);
 8008e96:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <ITM_SendChar+0x48>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a0e      	ldr	r2, [pc, #56]	; (8008ed4 <ITM_SendChar+0x48>)
 8008e9c:	f043 0301 	orr.w	r3, r3, #1
 8008ea0:	6013      	str	r3, [r2, #0]

	/*Enable ITM. This is the master enable and must be set to allow
	writes to all ITM registers, including the control register. */
	ITM_TCR |= ( 1 << 0);
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <ITM_SendChar+0x4c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <ITM_SendChar+0x4c>)
 8008ea8:	f043 0301 	orr.w	r3, r3, #1
 8008eac:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8008eae:	bf00      	nop
 8008eb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f8      	beq.n	8008eb0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8008ebe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	6013      	str	r3, [r2, #0]
}
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	e0000e00 	.word	0xe0000e00
 8008ed8:	e0000e80 	.word	0xe0000e80

08008edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
	return 1;
 8008ee0:	2301      	movs	r3, #1
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <_kill>:

int _kill(int pid, int sig)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008ef6:	f003 ff31 	bl	800cd5c <__errno>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2216      	movs	r2, #22
 8008efe:	601a      	str	r2, [r3, #0]
	return -1;
 8008f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <_exit>:

void _exit (int status)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008f14:	f04f 31ff 	mov.w	r1, #4294967295
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff ffe7 	bl	8008eec <_kill>
	while (1) {}		/* Make sure we hang here */
 8008f1e:	e7fe      	b.n	8008f1e <_exit+0x12>

08008f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	e00a      	b.n	8008f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008f32:	f3af 8000 	nop.w
 8008f36:	4601      	mov	r1, r0
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	60ba      	str	r2, [r7, #8]
 8008f3e:	b2ca      	uxtb	r2, r1
 8008f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	3301      	adds	r3, #1
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	dbf0      	blt.n	8008f32 <_read+0x12>
	}

return len;
 8008f50:	687b      	ldr	r3, [r7, #4]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b086      	sub	sp, #24
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	e009      	b.n	8008f80 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	60ba      	str	r2, [r7, #8]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff ff89 	bl	8008e8c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	dbf1      	blt.n	8008f6c <_write+0x12>
	}
	return len;
 8008f88:	687b      	ldr	r3, [r7, #4]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <_close>:

int _close(int file)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
	return -1;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008fba:	605a      	str	r2, [r3, #4]
	return 0;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <_isatty>:

int _isatty(int file)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
	return 1;
 8008fd2:	2301      	movs	r3, #1
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
	return 0;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
	...

08008ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009004:	4a14      	ldr	r2, [pc, #80]	; (8009058 <_sbrk+0x5c>)
 8009006:	4b15      	ldr	r3, [pc, #84]	; (800905c <_sbrk+0x60>)
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009010:	4b13      	ldr	r3, [pc, #76]	; (8009060 <_sbrk+0x64>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d102      	bne.n	800901e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009018:	4b11      	ldr	r3, [pc, #68]	; (8009060 <_sbrk+0x64>)
 800901a:	4a12      	ldr	r2, [pc, #72]	; (8009064 <_sbrk+0x68>)
 800901c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800901e:	4b10      	ldr	r3, [pc, #64]	; (8009060 <_sbrk+0x64>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4413      	add	r3, r2
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	429a      	cmp	r2, r3
 800902a:	d207      	bcs.n	800903c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800902c:	f003 fe96 	bl	800cd5c <__errno>
 8009030:	4603      	mov	r3, r0
 8009032:	220c      	movs	r2, #12
 8009034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009036:	f04f 33ff 	mov.w	r3, #4294967295
 800903a:	e009      	b.n	8009050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800903c:	4b08      	ldr	r3, [pc, #32]	; (8009060 <_sbrk+0x64>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009042:	4b07      	ldr	r3, [pc, #28]	; (8009060 <_sbrk+0x64>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4413      	add	r3, r2
 800904a:	4a05      	ldr	r2, [pc, #20]	; (8009060 <_sbrk+0x64>)
 800904c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800904e:	68fb      	ldr	r3, [r7, #12]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20050000 	.word	0x20050000
 800905c:	00000400 	.word	0x00000400
 8009060:	2000038c 	.word	0x2000038c
 8009064:	200003a8 	.word	0x200003a8

08009068 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <SystemInit+0x20>)
 800906e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009072:	4a05      	ldr	r2, [pc, #20]	; (8009088 <SystemInit+0x20>)
 8009074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800907c:	bf00      	nop
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	e000ed00 	.word	0xe000ed00

0800908c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800908c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80090c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009090:	480d      	ldr	r0, [pc, #52]	; (80090c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009092:	490e      	ldr	r1, [pc, #56]	; (80090cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009094:	4a0e      	ldr	r2, [pc, #56]	; (80090d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009098:	e002      	b.n	80090a0 <LoopCopyDataInit>

0800909a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800909a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800909c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800909e:	3304      	adds	r3, #4

080090a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090a4:	d3f9      	bcc.n	800909a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090a6:	4a0b      	ldr	r2, [pc, #44]	; (80090d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80090a8:	4c0b      	ldr	r4, [pc, #44]	; (80090d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80090aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090ac:	e001      	b.n	80090b2 <LoopFillZerobss>

080090ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090b0:	3204      	adds	r2, #4

080090b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090b4:	d3fb      	bcc.n	80090ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80090b6:	f7ff ffd7 	bl	8009068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80090ba:	f003 fe55 	bl	800cd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80090be:	f7fe fcb3 	bl	8007a28 <main>
  bx  lr    
 80090c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80090c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80090c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80090cc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80090d0:	08013528 	.word	0x08013528
  ldr r2, =_sbss
 80090d4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80090d8:	200003a4 	.word	0x200003a4

080090dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80090dc:	e7fe      	b.n	80090dc <ADC_IRQHandler>

080090de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090e2:	2003      	movs	r0, #3
 80090e4:	f000 ffb2 	bl	800a04c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80090e8:	2000      	movs	r0, #0
 80090ea:	f000 f805 	bl	80090f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80090ee:	f7ff fd89 	bl	8008c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009100:	4b12      	ldr	r3, [pc, #72]	; (800914c <HAL_InitTick+0x54>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	4b12      	ldr	r3, [pc, #72]	; (8009150 <HAL_InitTick+0x58>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	4619      	mov	r1, r3
 800910a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800910e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009112:	fbb2 f3f3 	udiv	r3, r2, r3
 8009116:	4618      	mov	r0, r3
 8009118:	f000 ffcd 	bl	800a0b6 <HAL_SYSTICK_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e00e      	b.n	8009144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b0f      	cmp	r3, #15
 800912a:	d80a      	bhi.n	8009142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800912c:	2200      	movs	r2, #0
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	f000 ff95 	bl	800a062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009138:	4a06      	ldr	r2, [pc, #24]	; (8009154 <HAL_InitTick+0x5c>)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	e000      	b.n	8009144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20000008 	.word	0x20000008
 8009150:	20000010 	.word	0x20000010
 8009154:	2000000c 	.word	0x2000000c

08009158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <HAL_IncTick+0x20>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	4b06      	ldr	r3, [pc, #24]	; (800917c <HAL_IncTick+0x24>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4413      	add	r3, r2
 8009168:	4a04      	ldr	r2, [pc, #16]	; (800917c <HAL_IncTick+0x24>)
 800916a:	6013      	str	r3, [r2, #0]
}
 800916c:	bf00      	nop
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	20000010 	.word	0x20000010
 800917c:	20000390 	.word	0x20000390

08009180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009180:	b480      	push	{r7}
 8009182:	af00      	add	r7, sp, #0
  return uwTick;
 8009184:	4b03      	ldr	r3, [pc, #12]	; (8009194 <HAL_GetTick+0x14>)
 8009186:	681b      	ldr	r3, [r3, #0]
}
 8009188:	4618      	mov	r0, r3
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20000390 	.word	0x20000390

08009198 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e0ed      	b.n	8009386 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff fd62 	bl	8008c80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091cc:	f7ff ffd8 	bl	8009180 <HAL_GetTick>
 80091d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80091d2:	e012      	b.n	80091fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80091d4:	f7ff ffd4 	bl	8009180 <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	2b0a      	cmp	r3, #10
 80091e0:	d90b      	bls.n	80091fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2205      	movs	r2, #5
 80091f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e0c5      	b.n	8009386 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0e5      	beq.n	80091d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0202 	bic.w	r2, r2, #2
 8009216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009218:	f7ff ffb2 	bl	8009180 <HAL_GetTick>
 800921c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800921e:	e012      	b.n	8009246 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009220:	f7ff ffae 	bl	8009180 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b0a      	cmp	r3, #10
 800922c:	d90b      	bls.n	8009246 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2205      	movs	r2, #5
 800923e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e09f      	b.n	8009386 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e5      	bne.n	8009220 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	7e1b      	ldrb	r3, [r3, #24]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d108      	bne.n	800926e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	e007      	b.n	800927e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800927c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7e5b      	ldrb	r3, [r3, #25]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d108      	bne.n	8009298 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	e007      	b.n	80092a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	7e9b      	ldrb	r3, [r3, #26]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d108      	bne.n	80092c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0220 	orr.w	r2, r2, #32
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	e007      	b.n	80092d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0220 	bic.w	r2, r2, #32
 80092d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	7edb      	ldrb	r3, [r3, #27]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d108      	bne.n	80092ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f022 0210 	bic.w	r2, r2, #16
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e007      	b.n	80092fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0210 	orr.w	r2, r2, #16
 80092fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	7f1b      	ldrb	r3, [r3, #28]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d108      	bne.n	8009316 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0208 	orr.w	r2, r2, #8
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e007      	b.n	8009326 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0208 	bic.w	r2, r2, #8
 8009324:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	7f5b      	ldrb	r3, [r3, #29]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d108      	bne.n	8009340 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f042 0204 	orr.w	r2, r2, #4
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	e007      	b.n	8009350 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0204 	bic.w	r2, r2, #4
 800934e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	ea42 0103 	orr.w	r1, r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	1e5a      	subs	r2, r3, #1
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80093a8:	7cfb      	ldrb	r3, [r7, #19]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d003      	beq.n	80093b6 <HAL_CAN_ConfigFilter+0x26>
 80093ae:	7cfb      	ldrb	r3, [r7, #19]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	f040 80be 	bne.w	8009532 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80093b6:	4b65      	ldr	r3, [pc, #404]	; (800954c <HAL_CAN_ConfigFilter+0x1bc>)
 80093b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093c0:	f043 0201 	orr.w	r2, r3, #1
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	431a      	orrs	r2, r3
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	f003 031f 	and.w	r3, r3, #31
 80093f6:	2201      	movs	r2, #1
 80093f8:	fa02 f303 	lsl.w	r3, r2, r3
 80093fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	43db      	mvns	r3, r3
 8009408:	401a      	ands	r2, r3
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d123      	bne.n	8009460 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	43db      	mvns	r3, r3
 8009422:	401a      	ands	r2, r3
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800943a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	3248      	adds	r2, #72	; 0x48
 8009440:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009454:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009456:	6979      	ldr	r1, [r7, #20]
 8009458:	3348      	adds	r3, #72	; 0x48
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	440b      	add	r3, r1
 800945e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d122      	bne.n	80094ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	431a      	orrs	r2, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009488:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	3248      	adds	r2, #72	; 0x48
 800948e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80094a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80094a4:	6979      	ldr	r1, [r7, #20]
 80094a6:	3348      	adds	r3, #72	; 0x48
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	440b      	add	r3, r1
 80094ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	43db      	mvns	r3, r3
 80094c0:	401a      	ands	r2, r3
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80094c8:	e007      	b.n	80094da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	431a      	orrs	r2, r3
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	43db      	mvns	r3, r3
 80094ec:	401a      	ands	r2, r3
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80094f4:	e007      	b.n	8009506 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	431a      	orrs	r2, r3
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d107      	bne.n	800951e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	431a      	orrs	r2, r3
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009524:	f023 0201 	bic.w	r2, r3, #1
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	e006      	b.n	8009540 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
  }
}
 8009540:	4618      	mov	r0, r3
 8009542:	371c      	adds	r7, #28
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	40006400 	.word	0x40006400

08009550 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b01      	cmp	r3, #1
 8009562:	d12e      	bne.n	80095c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 0201 	bic.w	r2, r2, #1
 800957a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800957c:	f7ff fe00 	bl	8009180 <HAL_GetTick>
 8009580:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009582:	e012      	b.n	80095aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009584:	f7ff fdfc 	bl	8009180 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b0a      	cmp	r3, #10
 8009590:	d90b      	bls.n	80095aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2205      	movs	r2, #5
 80095a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e012      	b.n	80095d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e5      	bne.n	8009584 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	e006      	b.n	80095d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
  }
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80095d8:	b480      	push	{r7}
 80095da:	b089      	sub	sp, #36	; 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80095f6:	7ffb      	ldrb	r3, [r7, #31]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d003      	beq.n	8009604 <HAL_CAN_AddTxMessage+0x2c>
 80095fc:	7ffb      	ldrb	r3, [r7, #31]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	f040 80b8 	bne.w	8009774 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10a      	bne.n	8009624 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009614:	2b00      	cmp	r3, #0
 8009616:	d105      	bne.n	8009624 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 80a0 	beq.w	8009764 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	0e1b      	lsrs	r3, r3, #24
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b02      	cmp	r3, #2
 8009632:	d907      	bls.n	8009644 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e09e      	b.n	8009782 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009644:	2201      	movs	r2, #1
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	409a      	lsls	r2, r3
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10d      	bne.n	8009672 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009660:	68f9      	ldr	r1, [r7, #12]
 8009662:	6809      	ldr	r1, [r1, #0]
 8009664:	431a      	orrs	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	3318      	adds	r3, #24
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	440b      	add	r3, r1
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	e00f      	b.n	8009692 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800967c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009686:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	3318      	adds	r3, #24
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	440b      	add	r3, r1
 8009690:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6819      	ldr	r1, [r3, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	3318      	adds	r3, #24
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	440b      	add	r3, r1
 80096a2:	3304      	adds	r3, #4
 80096a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	7d1b      	ldrb	r3, [r3, #20]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d111      	bne.n	80096d2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	3318      	adds	r3, #24
 80096b6:	011b      	lsls	r3, r3, #4
 80096b8:	4413      	add	r3, r2
 80096ba:	3304      	adds	r3, #4
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	6811      	ldr	r1, [r2, #0]
 80096c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	3318      	adds	r3, #24
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	440b      	add	r3, r1
 80096ce:	3304      	adds	r3, #4
 80096d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3307      	adds	r3, #7
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	061a      	lsls	r2, r3, #24
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3306      	adds	r3, #6
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	041b      	lsls	r3, r3, #16
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3305      	adds	r3, #5
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	021b      	lsls	r3, r3, #8
 80096ec:	4313      	orrs	r3, r2
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	3204      	adds	r2, #4
 80096f2:	7812      	ldrb	r2, [r2, #0]
 80096f4:	4610      	mov	r0, r2
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	6811      	ldr	r1, [r2, #0]
 80096fa:	ea43 0200 	orr.w	r2, r3, r0
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	011b      	lsls	r3, r3, #4
 8009702:	440b      	add	r3, r1
 8009704:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009708:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3303      	adds	r3, #3
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	061a      	lsls	r2, r3, #24
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3302      	adds	r3, #2
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	431a      	orrs	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3301      	adds	r3, #1
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	4313      	orrs	r3, r2
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	7812      	ldrb	r2, [r2, #0]
 800972a:	4610      	mov	r0, r2
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	6811      	ldr	r1, [r2, #0]
 8009730:	ea43 0200 	orr.w	r2, r3, r0
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	011b      	lsls	r3, r3, #4
 8009738:	440b      	add	r3, r1
 800973a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800973e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3318      	adds	r3, #24
 8009748:	011b      	lsls	r3, r3, #4
 800974a:	4413      	add	r3, r2
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	6811      	ldr	r1, [r2, #0]
 8009752:	f043 0201 	orr.w	r2, r3, #1
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	3318      	adds	r3, #24
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	440b      	add	r3, r1
 800975e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	e00e      	b.n	8009782 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e006      	b.n	8009782 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
  }
}
 8009782:	4618      	mov	r0, r3
 8009784:	3724      	adds	r7, #36	; 0x24
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800978e:	b480      	push	{r7}
 8009790:	b087      	sub	sp, #28
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	60b9      	str	r1, [r7, #8]
 8009798:	607a      	str	r2, [r7, #4]
 800979a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d003      	beq.n	80097b2 <HAL_CAN_GetRxMessage+0x24>
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	f040 80f3 	bne.w	8009998 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10e      	bne.n	80097d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d116      	bne.n	80097f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e0e7      	b.n	80099a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d107      	bne.n	80097f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e0d8      	b.n	80099a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	331b      	adds	r3, #27
 80097fc:	011b      	lsls	r3, r3, #4
 80097fe:	4413      	add	r3, r2
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 0204 	and.w	r2, r3, #4
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10c      	bne.n	800982c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	331b      	adds	r3, #27
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	4413      	add	r3, r2
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	0d5b      	lsrs	r3, r3, #21
 8009822:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e00b      	b.n	8009844 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	331b      	adds	r3, #27
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	4413      	add	r3, r2
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	08db      	lsrs	r3, r3, #3
 800983c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	331b      	adds	r3, #27
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	4413      	add	r3, r2
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0202 	and.w	r2, r3, #2
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	331b      	adds	r3, #27
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	4413      	add	r3, r2
 8009866:	3304      	adds	r3, #4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 020f 	and.w	r2, r3, #15
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	331b      	adds	r3, #27
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	4413      	add	r3, r2
 800987e:	3304      	adds	r3, #4
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	0a1b      	lsrs	r3, r3, #8
 8009884:	b2da      	uxtb	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	331b      	adds	r3, #27
 8009892:	011b      	lsls	r3, r3, #4
 8009894:	4413      	add	r3, r2
 8009896:	3304      	adds	r3, #4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	0c1b      	lsrs	r3, r3, #16
 800989c:	b29a      	uxth	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	011b      	lsls	r3, r3, #4
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	0a1a      	lsrs	r2, r3, #8
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	011b      	lsls	r3, r3, #4
 80098da:	4413      	add	r3, r2
 80098dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	0c1a      	lsrs	r2, r3, #16
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	3302      	adds	r3, #2
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	0e1a      	lsrs	r2, r3, #24
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	3303      	adds	r3, #3
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	4413      	add	r3, r2
 8009910:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	3304      	adds	r3, #4
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	011b      	lsls	r3, r3, #4
 8009926:	4413      	add	r3, r2
 8009928:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	0a1a      	lsrs	r2, r3, #8
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	3305      	adds	r3, #5
 8009934:	b2d2      	uxtb	r2, r2
 8009936:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	4413      	add	r3, r2
 8009942:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	0c1a      	lsrs	r2, r3, #16
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	3306      	adds	r3, #6
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	4413      	add	r3, r2
 800995c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	0e1a      	lsrs	r2, r3, #24
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	3307      	adds	r3, #7
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d108      	bne.n	8009984 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f042 0220 	orr.w	r2, r2, #32
 8009980:	60da      	str	r2, [r3, #12]
 8009982:	e007      	b.n	8009994 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0220 	orr.w	r2, r2, #32
 8009992:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	e006      	b.n	80099a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
  }
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099c6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80099c8:	7afb      	ldrb	r3, [r7, #11]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d002      	beq.n	80099d4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80099ce:	7afb      	ldrb	r3, [r7, #11]
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d10f      	bne.n	80099f4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d106      	bne.n	80099e8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f003 0303 	and.w	r3, r3, #3
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	e005      	b.n	80099f4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	f003 0303 	and.w	r3, r3, #3
 80099f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80099f4:	68fb      	ldr	r3, [r7, #12]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a12:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d002      	beq.n	8009a20 <HAL_CAN_ActivateNotification+0x1e>
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d109      	bne.n	8009a34 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6959      	ldr	r1, [r3, #20]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e006      	b.n	8009a42 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
  }
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d002      	beq.n	8009a6c <HAL_CAN_DeactivateNotification+0x1e>
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d10a      	bne.n	8009a82 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6959      	ldr	r1, [r3, #20]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	43da      	mvns	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	400a      	ands	r2, r1
 8009a7c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e006      	b.n	8009a90 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
  }
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08a      	sub	sp, #40	; 0x28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d07c      	beq.n	8009bdc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d023      	beq.n	8009b34 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2201      	movs	r2, #1
 8009af2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7fe ff96 	bl	8008a30 <HAL_CAN_TxMailbox0CompleteCallback>
 8009b04:	e016      	b.n	8009b34 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
 8009b18:	e00c      	b.n	8009b34 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	f003 0308 	and.w	r3, r3, #8
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b2c:	e002      	b.n	8009b34 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f96b 	bl	8009e0a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d024      	beq.n	8009b88 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7fe ff98 	bl	8008a88 <HAL_CAN_TxMailbox1CompleteCallback>
 8009b58:	e016      	b.n	8009b88 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d004      	beq.n	8009b6e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b6c:	e00c      	b.n	8009b88 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d004      	beq.n	8009b82 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b80:	e002      	b.n	8009b88 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f94b 	bl	8009e1e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d024      	beq.n	8009bdc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009b9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7fe ff9a 	bl	8008ae0 <HAL_CAN_TxMailbox2CompleteCallback>
 8009bac:	e016      	b.n	8009bdc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d004      	beq.n	8009bc2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc0:	e00c      	b.n	8009bdc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d004      	beq.n	8009bd6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd4:	e002      	b.n	8009bdc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f92b 	bl	8009e32 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	f003 0308 	and.w	r3, r3, #8
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00c      	beq.n	8009c00 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f003 0310 	and.w	r3, r3, #16
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d007      	beq.n	8009c00 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bf6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2210      	movs	r2, #16
 8009bfe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00b      	beq.n	8009c22 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f003 0308 	and.w	r3, r3, #8
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d006      	beq.n	8009c22 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2208      	movs	r2, #8
 8009c1a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f912 	bl	8009e46 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d009      	beq.n	8009c40 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f003 0303 	and.w	r3, r3, #3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7fe ff7c 	bl	8008b38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00c      	beq.n	8009c64 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f003 0310 	and.w	r3, r3, #16
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d007      	beq.n	8009c64 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2210      	movs	r2, #16
 8009c62:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f003 0308 	and.w	r3, r3, #8
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d006      	beq.n	8009c86 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2208      	movs	r2, #8
 8009c7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f8f4 	bl	8009e6e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	f003 0310 	and.w	r3, r3, #16
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f8db 	bl	8009e5a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00b      	beq.n	8009cc6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	f003 0310 	and.w	r3, r3, #16
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2210      	movs	r2, #16
 8009cbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f8de 	bl	8009e82 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	f003 0308 	and.w	r3, r3, #8
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d006      	beq.n	8009ce8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2208      	movs	r2, #8
 8009ce0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8d7 	bl	8009e96 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d07b      	beq.n	8009dea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	f003 0304 	and.w	r3, r3, #4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d072      	beq.n	8009de2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d008      	beq.n	8009d18 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d008      	beq.n	8009d34 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	f043 0302 	orr.w	r3, r3, #2
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d008      	beq.n	8009d50 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	f043 0304 	orr.w	r3, r3, #4
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d043      	beq.n	8009de2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d03e      	beq.n	8009de2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d6a:	2b60      	cmp	r3, #96	; 0x60
 8009d6c:	d02b      	beq.n	8009dc6 <HAL_CAN_IRQHandler+0x32a>
 8009d6e:	2b60      	cmp	r3, #96	; 0x60
 8009d70:	d82e      	bhi.n	8009dd0 <HAL_CAN_IRQHandler+0x334>
 8009d72:	2b50      	cmp	r3, #80	; 0x50
 8009d74:	d022      	beq.n	8009dbc <HAL_CAN_IRQHandler+0x320>
 8009d76:	2b50      	cmp	r3, #80	; 0x50
 8009d78:	d82a      	bhi.n	8009dd0 <HAL_CAN_IRQHandler+0x334>
 8009d7a:	2b40      	cmp	r3, #64	; 0x40
 8009d7c:	d019      	beq.n	8009db2 <HAL_CAN_IRQHandler+0x316>
 8009d7e:	2b40      	cmp	r3, #64	; 0x40
 8009d80:	d826      	bhi.n	8009dd0 <HAL_CAN_IRQHandler+0x334>
 8009d82:	2b30      	cmp	r3, #48	; 0x30
 8009d84:	d010      	beq.n	8009da8 <HAL_CAN_IRQHandler+0x30c>
 8009d86:	2b30      	cmp	r3, #48	; 0x30
 8009d88:	d822      	bhi.n	8009dd0 <HAL_CAN_IRQHandler+0x334>
 8009d8a:	2b10      	cmp	r3, #16
 8009d8c:	d002      	beq.n	8009d94 <HAL_CAN_IRQHandler+0x2f8>
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d005      	beq.n	8009d9e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009d92:	e01d      	b.n	8009dd0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	f043 0308 	orr.w	r3, r3, #8
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d9c:	e019      	b.n	8009dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	f043 0310 	orr.w	r3, r3, #16
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009da6:	e014      	b.n	8009dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	f043 0320 	orr.w	r3, r3, #32
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009db0:	e00f      	b.n	8009dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dba:	e00a      	b.n	8009dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dc4:	e005      	b.n	8009dd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dce:	e000      	b.n	8009dd2 <HAL_CAN_IRQHandler+0x336>
            break;
 8009dd0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	699a      	ldr	r2, [r3, #24]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009de0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2204      	movs	r2, #4
 8009de8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d008      	beq.n	8009e02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	431a      	orrs	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7fe febb 	bl	8008b78 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009e02:	bf00      	nop
 8009e04:	3728      	adds	r7, #40	; 0x28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009e12:	bf00      	nop
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b083      	sub	sp, #12
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
	...

08009eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f003 0307 	and.w	r3, r3, #7
 8009eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	; (8009eec <__NVIC_SetPriorityGrouping+0x40>)
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009ec8:	4013      	ands	r3, r2
 8009eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009ed4:	4b06      	ldr	r3, [pc, #24]	; (8009ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009eda:	4a04      	ldr	r2, [pc, #16]	; (8009eec <__NVIC_SetPriorityGrouping+0x40>)
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	60d3      	str	r3, [r2, #12]
}
 8009ee0:	bf00      	nop
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	e000ed00 	.word	0xe000ed00
 8009ef0:	05fa0000 	.word	0x05fa0000

08009ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009ef8:	4b04      	ldr	r3, [pc, #16]	; (8009f0c <__NVIC_GetPriorityGrouping+0x18>)
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	f003 0307 	and.w	r3, r3, #7
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	e000ed00 	.word	0xe000ed00

08009f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	db0b      	blt.n	8009f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f22:	79fb      	ldrb	r3, [r7, #7]
 8009f24:	f003 021f 	and.w	r2, r3, #31
 8009f28:	4907      	ldr	r1, [pc, #28]	; (8009f48 <__NVIC_EnableIRQ+0x38>)
 8009f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f2e:	095b      	lsrs	r3, r3, #5
 8009f30:	2001      	movs	r0, #1
 8009f32:	fa00 f202 	lsl.w	r2, r0, r2
 8009f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009f3a:	bf00      	nop
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	e000e100 	.word	0xe000e100

08009f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	6039      	str	r1, [r7, #0]
 8009f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	db0a      	blt.n	8009f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	490c      	ldr	r1, [pc, #48]	; (8009f98 <__NVIC_SetPriority+0x4c>)
 8009f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f6a:	0112      	lsls	r2, r2, #4
 8009f6c:	b2d2      	uxtb	r2, r2
 8009f6e:	440b      	add	r3, r1
 8009f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f74:	e00a      	b.n	8009f8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	4908      	ldr	r1, [pc, #32]	; (8009f9c <__NVIC_SetPriority+0x50>)
 8009f7c:	79fb      	ldrb	r3, [r7, #7]
 8009f7e:	f003 030f 	and.w	r3, r3, #15
 8009f82:	3b04      	subs	r3, #4
 8009f84:	0112      	lsls	r2, r2, #4
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	440b      	add	r3, r1
 8009f8a:	761a      	strb	r2, [r3, #24]
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	e000e100 	.word	0xe000e100
 8009f9c:	e000ed00 	.word	0xe000ed00

08009fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b089      	sub	sp, #36	; 0x24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f003 0307 	and.w	r3, r3, #7
 8009fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f1c3 0307 	rsb	r3, r3, #7
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	bf28      	it	cs
 8009fbe:	2304      	movcs	r3, #4
 8009fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	2b06      	cmp	r3, #6
 8009fc8:	d902      	bls.n	8009fd0 <NVIC_EncodePriority+0x30>
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	3b03      	subs	r3, #3
 8009fce:	e000      	b.n	8009fd2 <NVIC_EncodePriority+0x32>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	fa02 f303 	lsl.w	r3, r2, r3
 8009fde:	43da      	mvns	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	401a      	ands	r2, r3
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff2:	43d9      	mvns	r1, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ff8:	4313      	orrs	r3, r2
         );
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3724      	adds	r7, #36	; 0x24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
	...

0800a008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3b01      	subs	r3, #1
 800a014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a018:	d301      	bcc.n	800a01e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a01a:	2301      	movs	r3, #1
 800a01c:	e00f      	b.n	800a03e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a01e:	4a0a      	ldr	r2, [pc, #40]	; (800a048 <SysTick_Config+0x40>)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3b01      	subs	r3, #1
 800a024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a026:	210f      	movs	r1, #15
 800a028:	f04f 30ff 	mov.w	r0, #4294967295
 800a02c:	f7ff ff8e 	bl	8009f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a030:	4b05      	ldr	r3, [pc, #20]	; (800a048 <SysTick_Config+0x40>)
 800a032:	2200      	movs	r2, #0
 800a034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a036:	4b04      	ldr	r3, [pc, #16]	; (800a048 <SysTick_Config+0x40>)
 800a038:	2207      	movs	r2, #7
 800a03a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	e000e010 	.word	0xe000e010

0800a04c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff ff29 	bl	8009eac <__NVIC_SetPriorityGrouping>
}
 800a05a:	bf00      	nop
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af00      	add	r7, sp, #0
 800a068:	4603      	mov	r3, r0
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	607a      	str	r2, [r7, #4]
 800a06e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a074:	f7ff ff3e 	bl	8009ef4 <__NVIC_GetPriorityGrouping>
 800a078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	6978      	ldr	r0, [r7, #20]
 800a080:	f7ff ff8e 	bl	8009fa0 <NVIC_EncodePriority>
 800a084:	4602      	mov	r2, r0
 800a086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a08a:	4611      	mov	r1, r2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff ff5d 	bl	8009f4c <__NVIC_SetPriority>
}
 800a092:	bf00      	nop
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff ff31 	bl	8009f10 <__NVIC_EnableIRQ>
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff ffa2 	bl	800a008 <SysTick_Config>
 800a0c4:	4603      	mov	r3, r0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d106      	bne.n	800a0ec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a08      	ldr	r2, [pc, #32]	; (800a104 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800a0e4:	f043 0304 	orr.w	r3, r3, #4
 800a0e8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800a0ea:	e005      	b.n	800a0f8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a04      	ldr	r2, [pc, #16]	; (800a104 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800a0f2:	f023 0304 	bic.w	r3, r3, #4
 800a0f6:	6013      	str	r3, [r2, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	e000e010 	.word	0xe000e010

0800a108 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800a10c:	f000 f802 	bl	800a114 <HAL_SYSTICK_Callback>
}
 800a110:	bf00      	nop
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800a114:	b480      	push	{r7}
 800a116:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a130:	f7ff f826 	bl	8009180 <HAL_GetTick>
 800a134:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d008      	beq.n	800a154 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2280      	movs	r2, #128	; 0x80
 800a146:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e052      	b.n	800a1fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0216 	bic.w	r2, r2, #22
 800a162:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	695a      	ldr	r2, [r3, #20]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a172:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d103      	bne.n	800a184 <HAL_DMA_Abort+0x62>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 0208 	bic.w	r2, r2, #8
 800a192:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f022 0201 	bic.w	r2, r2, #1
 800a1a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1a4:	e013      	b.n	800a1ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a1a6:	f7fe ffeb 	bl	8009180 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b05      	cmp	r3, #5
 800a1b2:	d90c      	bls.n	800a1ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2203      	movs	r2, #3
 800a1be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e015      	b.n	800a1fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e4      	bne.n	800a1a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e0:	223f      	movs	r2, #63	; 0x3f
 800a1e2:	409a      	lsls	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b02      	cmp	r3, #2
 800a214:	d004      	beq.n	800a220 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2280      	movs	r2, #128	; 0x80
 800a21a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e00c      	b.n	800a23a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2205      	movs	r2, #5
 800a224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0201 	bic.w	r2, r2, #1
 800a236:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
	...

0800a248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a248:	b480      	push	{r7}
 800a24a:	b089      	sub	sp, #36	; 0x24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a252:	2300      	movs	r3, #0
 800a254:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a256:	2300      	movs	r3, #0
 800a258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a25a:	2300      	movs	r3, #0
 800a25c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a25e:	2300      	movs	r3, #0
 800a260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a262:	2300      	movs	r3, #0
 800a264:	61fb      	str	r3, [r7, #28]
 800a266:	e175      	b.n	800a554 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a268:	2201      	movs	r2, #1
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	fa02 f303 	lsl.w	r3, r2, r3
 800a270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4013      	ands	r3, r2
 800a27a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	429a      	cmp	r2, r3
 800a282:	f040 8164 	bne.w	800a54e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f003 0303 	and.w	r3, r3, #3
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d005      	beq.n	800a29e <HAL_GPIO_Init+0x56>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f003 0303 	and.w	r3, r3, #3
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d130      	bne.n	800a300 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ae:	43db      	mvns	r3, r3
 800a2b0:	69ba      	ldr	r2, [r7, #24]
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	68da      	ldr	r2, [r3, #12]
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	005b      	lsls	r3, r3, #1
 800a2be:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c2:	69ba      	ldr	r2, [r7, #24]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	091b      	lsrs	r3, r3, #4
 800a2ea:	f003 0201 	and.w	r2, r3, #1
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f003 0303 	and.w	r3, r3, #3
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d017      	beq.n	800a33c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	005b      	lsls	r3, r3, #1
 800a316:	2203      	movs	r2, #3
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	43db      	mvns	r3, r3
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	4013      	ands	r3, r2
 800a322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	fa02 f303 	lsl.w	r3, r2, r3
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	4313      	orrs	r3, r2
 800a334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	2b02      	cmp	r3, #2
 800a346:	d123      	bne.n	800a390 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	08da      	lsrs	r2, r3, #3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3208      	adds	r2, #8
 800a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	220f      	movs	r2, #15
 800a360:	fa02 f303 	lsl.w	r3, r2, r3
 800a364:	43db      	mvns	r3, r3
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	4013      	ands	r3, r2
 800a36a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	4313      	orrs	r3, r2
 800a380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	08da      	lsrs	r2, r3, #3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3208      	adds	r2, #8
 800a38a:	69b9      	ldr	r1, [r7, #24]
 800a38c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	2203      	movs	r2, #3
 800a39c:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a0:	43db      	mvns	r3, r3
 800a3a2:	69ba      	ldr	r2, [r7, #24]
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f003 0203 	and.w	r2, r3, #3
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 80be 	beq.w	800a54e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3d2:	4b66      	ldr	r3, [pc, #408]	; (800a56c <HAL_GPIO_Init+0x324>)
 800a3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d6:	4a65      	ldr	r2, [pc, #404]	; (800a56c <HAL_GPIO_Init+0x324>)
 800a3d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3dc:	6453      	str	r3, [r2, #68]	; 0x44
 800a3de:	4b63      	ldr	r3, [pc, #396]	; (800a56c <HAL_GPIO_Init+0x324>)
 800a3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a3ea:	4a61      	ldr	r2, [pc, #388]	; (800a570 <HAL_GPIO_Init+0x328>)
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	089b      	lsrs	r3, r3, #2
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	f003 0303 	and.w	r3, r3, #3
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	220f      	movs	r2, #15
 800a402:	fa02 f303 	lsl.w	r3, r2, r3
 800a406:	43db      	mvns	r3, r3
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	4013      	ands	r3, r2
 800a40c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a58      	ldr	r2, [pc, #352]	; (800a574 <HAL_GPIO_Init+0x32c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d037      	beq.n	800a486 <HAL_GPIO_Init+0x23e>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a57      	ldr	r2, [pc, #348]	; (800a578 <HAL_GPIO_Init+0x330>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d031      	beq.n	800a482 <HAL_GPIO_Init+0x23a>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a56      	ldr	r2, [pc, #344]	; (800a57c <HAL_GPIO_Init+0x334>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d02b      	beq.n	800a47e <HAL_GPIO_Init+0x236>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a55      	ldr	r2, [pc, #340]	; (800a580 <HAL_GPIO_Init+0x338>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d025      	beq.n	800a47a <HAL_GPIO_Init+0x232>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a54      	ldr	r2, [pc, #336]	; (800a584 <HAL_GPIO_Init+0x33c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d01f      	beq.n	800a476 <HAL_GPIO_Init+0x22e>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a53      	ldr	r2, [pc, #332]	; (800a588 <HAL_GPIO_Init+0x340>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d019      	beq.n	800a472 <HAL_GPIO_Init+0x22a>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a52      	ldr	r2, [pc, #328]	; (800a58c <HAL_GPIO_Init+0x344>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d013      	beq.n	800a46e <HAL_GPIO_Init+0x226>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a51      	ldr	r2, [pc, #324]	; (800a590 <HAL_GPIO_Init+0x348>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d00d      	beq.n	800a46a <HAL_GPIO_Init+0x222>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a50      	ldr	r2, [pc, #320]	; (800a594 <HAL_GPIO_Init+0x34c>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d007      	beq.n	800a466 <HAL_GPIO_Init+0x21e>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a4f      	ldr	r2, [pc, #316]	; (800a598 <HAL_GPIO_Init+0x350>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d101      	bne.n	800a462 <HAL_GPIO_Init+0x21a>
 800a45e:	2309      	movs	r3, #9
 800a460:	e012      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a462:	230a      	movs	r3, #10
 800a464:	e010      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a466:	2308      	movs	r3, #8
 800a468:	e00e      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a46a:	2307      	movs	r3, #7
 800a46c:	e00c      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a46e:	2306      	movs	r3, #6
 800a470:	e00a      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a472:	2305      	movs	r3, #5
 800a474:	e008      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a476:	2304      	movs	r3, #4
 800a478:	e006      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a47a:	2303      	movs	r3, #3
 800a47c:	e004      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a47e:	2302      	movs	r3, #2
 800a480:	e002      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <HAL_GPIO_Init+0x240>
 800a486:	2300      	movs	r3, #0
 800a488:	69fa      	ldr	r2, [r7, #28]
 800a48a:	f002 0203 	and.w	r2, r2, #3
 800a48e:	0092      	lsls	r2, r2, #2
 800a490:	4093      	lsls	r3, r2
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	4313      	orrs	r3, r2
 800a496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a498:	4935      	ldr	r1, [pc, #212]	; (800a570 <HAL_GPIO_Init+0x328>)
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	089b      	lsrs	r3, r3, #2
 800a49e:	3302      	adds	r3, #2
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a4a6:	4b3d      	ldr	r3, [pc, #244]	; (800a59c <HAL_GPIO_Init+0x354>)
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	43db      	mvns	r3, r3
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a4ca:	4a34      	ldr	r2, [pc, #208]	; (800a59c <HAL_GPIO_Init+0x354>)
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a4d0:	4b32      	ldr	r3, [pc, #200]	; (800a59c <HAL_GPIO_Init+0x354>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	43db      	mvns	r3, r3
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	4013      	ands	r3, r2
 800a4de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a4f4:	4a29      	ldr	r2, [pc, #164]	; (800a59c <HAL_GPIO_Init+0x354>)
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a4fa:	4b28      	ldr	r3, [pc, #160]	; (800a59c <HAL_GPIO_Init+0x354>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	43db      	mvns	r3, r3
 800a504:	69ba      	ldr	r2, [r7, #24]
 800a506:	4013      	ands	r3, r2
 800a508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a51e:	4a1f      	ldr	r2, [pc, #124]	; (800a59c <HAL_GPIO_Init+0x354>)
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a524:	4b1d      	ldr	r3, [pc, #116]	; (800a59c <HAL_GPIO_Init+0x354>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	43db      	mvns	r3, r3
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	4013      	ands	r3, r2
 800a532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d003      	beq.n	800a548 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	4313      	orrs	r3, r2
 800a546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a548:	4a14      	ldr	r2, [pc, #80]	; (800a59c <HAL_GPIO_Init+0x354>)
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	3301      	adds	r3, #1
 800a552:	61fb      	str	r3, [r7, #28]
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	2b0f      	cmp	r3, #15
 800a558:	f67f ae86 	bls.w	800a268 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a55c:	bf00      	nop
 800a55e:	bf00      	nop
 800a560:	3724      	adds	r7, #36	; 0x24
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	40023800 	.word	0x40023800
 800a570:	40013800 	.word	0x40013800
 800a574:	40020000 	.word	0x40020000
 800a578:	40020400 	.word	0x40020400
 800a57c:	40020800 	.word	0x40020800
 800a580:	40020c00 	.word	0x40020c00
 800a584:	40021000 	.word	0x40021000
 800a588:	40021400 	.word	0x40021400
 800a58c:	40021800 	.word	0x40021800
 800a590:	40021c00 	.word	0x40021c00
 800a594:	40022000 	.word	0x40022000
 800a598:	40022400 	.word	0x40022400
 800a59c:	40013c00 	.word	0x40013c00

0800a5a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	807b      	strh	r3, [r7, #2]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a5b0:	787b      	ldrb	r3, [r7, #1]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a5b6:	887a      	ldrh	r2, [r7, #2]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a5bc:	e003      	b.n	800a5c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a5be:	887b      	ldrh	r3, [r7, #2]
 800a5c0:	041a      	lsls	r2, r3, #16
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	619a      	str	r2, [r3, #24]
}
 800a5c6:	bf00      	nop
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e291      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 8087 	beq.w	800a706 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5f8:	4b96      	ldr	r3, [pc, #600]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f003 030c 	and.w	r3, r3, #12
 800a600:	2b04      	cmp	r3, #4
 800a602:	d00c      	beq.n	800a61e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a604:	4b93      	ldr	r3, [pc, #588]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f003 030c 	and.w	r3, r3, #12
 800a60c:	2b08      	cmp	r3, #8
 800a60e:	d112      	bne.n	800a636 <HAL_RCC_OscConfig+0x62>
 800a610:	4b90      	ldr	r3, [pc, #576]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a61c:	d10b      	bne.n	800a636 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a61e:	4b8d      	ldr	r3, [pc, #564]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d06c      	beq.n	800a704 <HAL_RCC_OscConfig+0x130>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d168      	bne.n	800a704 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e26b      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a63e:	d106      	bne.n	800a64e <HAL_RCC_OscConfig+0x7a>
 800a640:	4b84      	ldr	r3, [pc, #528]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a83      	ldr	r2, [pc, #524]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a64a:	6013      	str	r3, [r2, #0]
 800a64c:	e02e      	b.n	800a6ac <HAL_RCC_OscConfig+0xd8>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10c      	bne.n	800a670 <HAL_RCC_OscConfig+0x9c>
 800a656:	4b7f      	ldr	r3, [pc, #508]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a7e      	ldr	r2, [pc, #504]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a65c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	4b7c      	ldr	r3, [pc, #496]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a7b      	ldr	r2, [pc, #492]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a66c:	6013      	str	r3, [r2, #0]
 800a66e:	e01d      	b.n	800a6ac <HAL_RCC_OscConfig+0xd8>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a678:	d10c      	bne.n	800a694 <HAL_RCC_OscConfig+0xc0>
 800a67a:	4b76      	ldr	r3, [pc, #472]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a75      	ldr	r2, [pc, #468]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	4b73      	ldr	r3, [pc, #460]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a72      	ldr	r2, [pc, #456]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a68c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a690:	6013      	str	r3, [r2, #0]
 800a692:	e00b      	b.n	800a6ac <HAL_RCC_OscConfig+0xd8>
 800a694:	4b6f      	ldr	r3, [pc, #444]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a6e      	ldr	r2, [pc, #440]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a69a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	4b6c      	ldr	r3, [pc, #432]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a6b      	ldr	r2, [pc, #428]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a6a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d013      	beq.n	800a6dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b4:	f7fe fd64 	bl	8009180 <HAL_GetTick>
 800a6b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ba:	e008      	b.n	800a6ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6bc:	f7fe fd60 	bl	8009180 <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	2b64      	cmp	r3, #100	; 0x64
 800a6c8:	d901      	bls.n	800a6ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e21f      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ce:	4b61      	ldr	r3, [pc, #388]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0f0      	beq.n	800a6bc <HAL_RCC_OscConfig+0xe8>
 800a6da:	e014      	b.n	800a706 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6dc:	f7fe fd50 	bl	8009180 <HAL_GetTick>
 800a6e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6e2:	e008      	b.n	800a6f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6e4:	f7fe fd4c 	bl	8009180 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	2b64      	cmp	r3, #100	; 0x64
 800a6f0:	d901      	bls.n	800a6f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e20b      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6f6:	4b57      	ldr	r3, [pc, #348]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1f0      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x110>
 800a702:	e000      	b.n	800a706 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d069      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a712:	4b50      	ldr	r3, [pc, #320]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f003 030c 	and.w	r3, r3, #12
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00b      	beq.n	800a736 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a71e:	4b4d      	ldr	r3, [pc, #308]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f003 030c 	and.w	r3, r3, #12
 800a726:	2b08      	cmp	r3, #8
 800a728:	d11c      	bne.n	800a764 <HAL_RCC_OscConfig+0x190>
 800a72a:	4b4a      	ldr	r3, [pc, #296]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d116      	bne.n	800a764 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a736:	4b47      	ldr	r3, [pc, #284]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <HAL_RCC_OscConfig+0x17a>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d001      	beq.n	800a74e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e1df      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a74e:	4b41      	ldr	r3, [pc, #260]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	493d      	ldr	r1, [pc, #244]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a762:	e040      	b.n	800a7e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d023      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a76c:	4b39      	ldr	r3, [pc, #228]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a38      	ldr	r2, [pc, #224]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a772:	f043 0301 	orr.w	r3, r3, #1
 800a776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a778:	f7fe fd02 	bl	8009180 <HAL_GetTick>
 800a77c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a77e:	e008      	b.n	800a792 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a780:	f7fe fcfe 	bl	8009180 <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d901      	bls.n	800a792 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e1bd      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a792:	4b30      	ldr	r3, [pc, #192]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0f0      	beq.n	800a780 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a79e:	4b2d      	ldr	r3, [pc, #180]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4929      	ldr	r1, [pc, #164]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	600b      	str	r3, [r1, #0]
 800a7b2:	e018      	b.n	800a7e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7b4:	4b27      	ldr	r3, [pc, #156]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a26      	ldr	r2, [pc, #152]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c0:	f7fe fcde 	bl	8009180 <HAL_GetTick>
 800a7c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7c6:	e008      	b.n	800a7da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7c8:	f7fe fcda 	bl	8009180 <HAL_GetTick>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d901      	bls.n	800a7da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e199      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7da:	4b1e      	ldr	r3, [pc, #120]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1f0      	bne.n	800a7c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0308 	and.w	r3, r3, #8
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d038      	beq.n	800a864 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d019      	beq.n	800a82e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7fa:	4b16      	ldr	r3, [pc, #88]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7fe:	4a15      	ldr	r2, [pc, #84]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a800:	f043 0301 	orr.w	r3, r3, #1
 800a804:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a806:	f7fe fcbb 	bl	8009180 <HAL_GetTick>
 800a80a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a80c:	e008      	b.n	800a820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a80e:	f7fe fcb7 	bl	8009180 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d901      	bls.n	800a820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e176      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a820:	4b0c      	ldr	r3, [pc, #48]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d0f0      	beq.n	800a80e <HAL_RCC_OscConfig+0x23a>
 800a82c:	e01a      	b.n	800a864 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a82e:	4b09      	ldr	r3, [pc, #36]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a832:	4a08      	ldr	r2, [pc, #32]	; (800a854 <HAL_RCC_OscConfig+0x280>)
 800a834:	f023 0301 	bic.w	r3, r3, #1
 800a838:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a83a:	f7fe fca1 	bl	8009180 <HAL_GetTick>
 800a83e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a840:	e00a      	b.n	800a858 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a842:	f7fe fc9d 	bl	8009180 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d903      	bls.n	800a858 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e15c      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
 800a854:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a858:	4b91      	ldr	r3, [pc, #580]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1ee      	bne.n	800a842 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 80a4 	beq.w	800a9ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a872:	4b8b      	ldr	r3, [pc, #556]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10d      	bne.n	800a89a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a87e:	4b88      	ldr	r3, [pc, #544]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	4a87      	ldr	r2, [pc, #540]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a888:	6413      	str	r3, [r2, #64]	; 0x40
 800a88a:	4b85      	ldr	r3, [pc, #532]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a892:	60bb      	str	r3, [r7, #8]
 800a894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a896:	2301      	movs	r3, #1
 800a898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a89a:	4b82      	ldr	r3, [pc, #520]	; (800aaa4 <HAL_RCC_OscConfig+0x4d0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d118      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a8a6:	4b7f      	ldr	r3, [pc, #508]	; (800aaa4 <HAL_RCC_OscConfig+0x4d0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a7e      	ldr	r2, [pc, #504]	; (800aaa4 <HAL_RCC_OscConfig+0x4d0>)
 800a8ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8b2:	f7fe fc65 	bl	8009180 <HAL_GetTick>
 800a8b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8b8:	e008      	b.n	800a8cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8ba:	f7fe fc61 	bl	8009180 <HAL_GetTick>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	2b64      	cmp	r3, #100	; 0x64
 800a8c6:	d901      	bls.n	800a8cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e120      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8cc:	4b75      	ldr	r3, [pc, #468]	; (800aaa4 <HAL_RCC_OscConfig+0x4d0>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0f0      	beq.n	800a8ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d106      	bne.n	800a8ee <HAL_RCC_OscConfig+0x31a>
 800a8e0:	4b6f      	ldr	r3, [pc, #444]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a8e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e4:	4a6e      	ldr	r2, [pc, #440]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a8ec:	e02d      	b.n	800a94a <HAL_RCC_OscConfig+0x376>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10c      	bne.n	800a910 <HAL_RCC_OscConfig+0x33c>
 800a8f6:	4b6a      	ldr	r3, [pc, #424]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8fa:	4a69      	ldr	r2, [pc, #420]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a8fc:	f023 0301 	bic.w	r3, r3, #1
 800a900:	6713      	str	r3, [r2, #112]	; 0x70
 800a902:	4b67      	ldr	r3, [pc, #412]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a906:	4a66      	ldr	r2, [pc, #408]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a908:	f023 0304 	bic.w	r3, r3, #4
 800a90c:	6713      	str	r3, [r2, #112]	; 0x70
 800a90e:	e01c      	b.n	800a94a <HAL_RCC_OscConfig+0x376>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	2b05      	cmp	r3, #5
 800a916:	d10c      	bne.n	800a932 <HAL_RCC_OscConfig+0x35e>
 800a918:	4b61      	ldr	r3, [pc, #388]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a91a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91c:	4a60      	ldr	r2, [pc, #384]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a91e:	f043 0304 	orr.w	r3, r3, #4
 800a922:	6713      	str	r3, [r2, #112]	; 0x70
 800a924:	4b5e      	ldr	r3, [pc, #376]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a928:	4a5d      	ldr	r2, [pc, #372]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a92a:	f043 0301 	orr.w	r3, r3, #1
 800a92e:	6713      	str	r3, [r2, #112]	; 0x70
 800a930:	e00b      	b.n	800a94a <HAL_RCC_OscConfig+0x376>
 800a932:	4b5b      	ldr	r3, [pc, #364]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a936:	4a5a      	ldr	r2, [pc, #360]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a938:	f023 0301 	bic.w	r3, r3, #1
 800a93c:	6713      	str	r3, [r2, #112]	; 0x70
 800a93e:	4b58      	ldr	r3, [pc, #352]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a942:	4a57      	ldr	r2, [pc, #348]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a944:	f023 0304 	bic.w	r3, r3, #4
 800a948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d015      	beq.n	800a97e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a952:	f7fe fc15 	bl	8009180 <HAL_GetTick>
 800a956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a958:	e00a      	b.n	800a970 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a95a:	f7fe fc11 	bl	8009180 <HAL_GetTick>
 800a95e:	4602      	mov	r2, r0
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	f241 3288 	movw	r2, #5000	; 0x1388
 800a968:	4293      	cmp	r3, r2
 800a96a:	d901      	bls.n	800a970 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e0ce      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a970:	4b4b      	ldr	r3, [pc, #300]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0ee      	beq.n	800a95a <HAL_RCC_OscConfig+0x386>
 800a97c:	e014      	b.n	800a9a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a97e:	f7fe fbff 	bl	8009180 <HAL_GetTick>
 800a982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a984:	e00a      	b.n	800a99c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a986:	f7fe fbfb 	bl	8009180 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	f241 3288 	movw	r2, #5000	; 0x1388
 800a994:	4293      	cmp	r3, r2
 800a996:	d901      	bls.n	800a99c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e0b8      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a99c:	4b40      	ldr	r3, [pc, #256]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a99e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1ee      	bne.n	800a986 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d105      	bne.n	800a9ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9ae:	4b3c      	ldr	r3, [pc, #240]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b2:	4a3b      	ldr	r2, [pc, #236]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a9b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 80a4 	beq.w	800ab0c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a9c4:	4b36      	ldr	r3, [pc, #216]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f003 030c 	and.w	r3, r3, #12
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d06b      	beq.n	800aaa8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d149      	bne.n	800aa6c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9d8:	4b31      	ldr	r3, [pc, #196]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a30      	ldr	r2, [pc, #192]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800a9de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e4:	f7fe fbcc 	bl	8009180 <HAL_GetTick>
 800a9e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9ea:	e008      	b.n	800a9fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9ec:	f7fe fbc8 	bl	8009180 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d901      	bls.n	800a9fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e087      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9fe:	4b28      	ldr	r3, [pc, #160]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1f0      	bne.n	800a9ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	69da      	ldr	r2, [r3, #28]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	431a      	orrs	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	019b      	lsls	r3, r3, #6
 800aa1a:	431a      	orrs	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	085b      	lsrs	r3, r3, #1
 800aa22:	3b01      	subs	r3, #1
 800aa24:	041b      	lsls	r3, r3, #16
 800aa26:	431a      	orrs	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2c:	061b      	lsls	r3, r3, #24
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	4a1b      	ldr	r2, [pc, #108]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800aa32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa36:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa38:	4b19      	ldr	r3, [pc, #100]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a18      	ldr	r2, [pc, #96]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800aa3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa44:	f7fe fb9c 	bl	8009180 <HAL_GetTick>
 800aa48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa4a:	e008      	b.n	800aa5e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa4c:	f7fe fb98 	bl	8009180 <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d901      	bls.n	800aa5e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e057      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa5e:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0f0      	beq.n	800aa4c <HAL_RCC_OscConfig+0x478>
 800aa6a:	e04f      	b.n	800ab0c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa6c:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a0b      	ldr	r2, [pc, #44]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800aa72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa78:	f7fe fb82 	bl	8009180 <HAL_GetTick>
 800aa7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa7e:	e008      	b.n	800aa92 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa80:	f7fe fb7e 	bl	8009180 <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d901      	bls.n	800aa92 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e03d      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa92:	4b03      	ldr	r3, [pc, #12]	; (800aaa0 <HAL_RCC_OscConfig+0x4cc>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1f0      	bne.n	800aa80 <HAL_RCC_OscConfig+0x4ac>
 800aa9e:	e035      	b.n	800ab0c <HAL_RCC_OscConfig+0x538>
 800aaa0:	40023800 	.word	0x40023800
 800aaa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800aaa8:	4b1b      	ldr	r3, [pc, #108]	; (800ab18 <HAL_RCC_OscConfig+0x544>)
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d028      	beq.n	800ab08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d121      	bne.n	800ab08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aace:	429a      	cmp	r2, r3
 800aad0:	d11a      	bne.n	800ab08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aad8:	4013      	ands	r3, r2
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aade:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d111      	bne.n	800ab08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaee:	085b      	lsrs	r3, r3, #1
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d107      	bne.n	800ab08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d001      	beq.n	800ab0c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e000      	b.n	800ab0e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	40023800 	.word	0x40023800

0800ab1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e0d0      	b.n	800acd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab34:	4b6a      	ldr	r3, [pc, #424]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d910      	bls.n	800ab64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab42:	4b67      	ldr	r3, [pc, #412]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f023 020f 	bic.w	r2, r3, #15
 800ab4a:	4965      	ldr	r1, [pc, #404]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab52:	4b63      	ldr	r3, [pc, #396]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 030f 	and.w	r3, r3, #15
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d001      	beq.n	800ab64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e0b8      	b.n	800acd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d020      	beq.n	800abb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0304 	and.w	r3, r3, #4
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab7c:	4b59      	ldr	r3, [pc, #356]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	4a58      	ldr	r2, [pc, #352]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ab86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 0308 	and.w	r3, r3, #8
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d005      	beq.n	800aba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab94:	4b53      	ldr	r3, [pc, #332]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	4a52      	ldr	r2, [pc, #328]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ab9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ab9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aba0:	4b50      	ldr	r3, [pc, #320]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	494d      	ldr	r1, [pc, #308]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800abae:	4313      	orrs	r3, r2
 800abb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d040      	beq.n	800ac40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d107      	bne.n	800abd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abc6:	4b47      	ldr	r3, [pc, #284]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d115      	bne.n	800abfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e07f      	b.n	800acd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d107      	bne.n	800abee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abde:	4b41      	ldr	r3, [pc, #260]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d109      	bne.n	800abfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e073      	b.n	800acd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abee:	4b3d      	ldr	r3, [pc, #244]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e06b      	b.n	800acd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800abfe:	4b39      	ldr	r3, [pc, #228]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	f023 0203 	bic.w	r2, r3, #3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	4936      	ldr	r1, [pc, #216]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac10:	f7fe fab6 	bl	8009180 <HAL_GetTick>
 800ac14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac16:	e00a      	b.n	800ac2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac18:	f7fe fab2 	bl	8009180 <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d901      	bls.n	800ac2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e053      	b.n	800acd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac2e:	4b2d      	ldr	r3, [pc, #180]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f003 020c 	and.w	r2, r3, #12
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d1eb      	bne.n	800ac18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac40:	4b27      	ldr	r3, [pc, #156]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 030f 	and.w	r3, r3, #15
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d210      	bcs.n	800ac70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac4e:	4b24      	ldr	r3, [pc, #144]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f023 020f 	bic.w	r2, r3, #15
 800ac56:	4922      	ldr	r1, [pc, #136]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac5e:	4b20      	ldr	r3, [pc, #128]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 030f 	and.w	r3, r3, #15
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d001      	beq.n	800ac70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e032      	b.n	800acd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d008      	beq.n	800ac8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac7c:	4b19      	ldr	r3, [pc, #100]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	4916      	ldr	r1, [pc, #88]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0308 	and.w	r3, r3, #8
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d009      	beq.n	800acae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac9a:	4b12      	ldr	r3, [pc, #72]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	490e      	ldr	r1, [pc, #56]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800acae:	f000 f821 	bl	800acf4 <HAL_RCC_GetSysClockFreq>
 800acb2:	4602      	mov	r2, r0
 800acb4:	4b0b      	ldr	r3, [pc, #44]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	091b      	lsrs	r3, r3, #4
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	490a      	ldr	r1, [pc, #40]	; (800ace8 <HAL_RCC_ClockConfig+0x1cc>)
 800acc0:	5ccb      	ldrb	r3, [r1, r3]
 800acc2:	fa22 f303 	lsr.w	r3, r2, r3
 800acc6:	4a09      	ldr	r2, [pc, #36]	; (800acec <HAL_RCC_ClockConfig+0x1d0>)
 800acc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <HAL_RCC_ClockConfig+0x1d4>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fa12 	bl	80090f8 <HAL_InitTick>

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	40023c00 	.word	0x40023c00
 800ace4:	40023800 	.word	0x40023800
 800ace8:	08013108 	.word	0x08013108
 800acec:	20000008 	.word	0x20000008
 800acf0:	2000000c 	.word	0x2000000c

0800acf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acf8:	b094      	sub	sp, #80	; 0x50
 800acfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	647b      	str	r3, [r7, #68]	; 0x44
 800ad00:	2300      	movs	r3, #0
 800ad02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad04:	2300      	movs	r3, #0
 800ad06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad0c:	4b79      	ldr	r3, [pc, #484]	; (800aef4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	f003 030c 	and.w	r3, r3, #12
 800ad14:	2b08      	cmp	r3, #8
 800ad16:	d00d      	beq.n	800ad34 <HAL_RCC_GetSysClockFreq+0x40>
 800ad18:	2b08      	cmp	r3, #8
 800ad1a:	f200 80e1 	bhi.w	800aee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <HAL_RCC_GetSysClockFreq+0x34>
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d003      	beq.n	800ad2e <HAL_RCC_GetSysClockFreq+0x3a>
 800ad26:	e0db      	b.n	800aee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ad28:	4b73      	ldr	r3, [pc, #460]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x204>)
 800ad2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ad2c:	e0db      	b.n	800aee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ad2e:	4b73      	ldr	r3, [pc, #460]	; (800aefc <HAL_RCC_GetSysClockFreq+0x208>)
 800ad30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ad32:	e0d8      	b.n	800aee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad34:	4b6f      	ldr	r3, [pc, #444]	; (800aef4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad3c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ad3e:	4b6d      	ldr	r3, [pc, #436]	; (800aef4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d063      	beq.n	800ae12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad4a:	4b6a      	ldr	r3, [pc, #424]	; (800aef4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	099b      	lsrs	r3, r3, #6
 800ad50:	2200      	movs	r2, #0
 800ad52:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad54:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5c:	633b      	str	r3, [r7, #48]	; 0x30
 800ad5e:	2300      	movs	r3, #0
 800ad60:	637b      	str	r3, [r7, #52]	; 0x34
 800ad62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ad66:	4622      	mov	r2, r4
 800ad68:	462b      	mov	r3, r5
 800ad6a:	f04f 0000 	mov.w	r0, #0
 800ad6e:	f04f 0100 	mov.w	r1, #0
 800ad72:	0159      	lsls	r1, r3, #5
 800ad74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad78:	0150      	lsls	r0, r2, #5
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4621      	mov	r1, r4
 800ad80:	1a51      	subs	r1, r2, r1
 800ad82:	6139      	str	r1, [r7, #16]
 800ad84:	4629      	mov	r1, r5
 800ad86:	eb63 0301 	sbc.w	r3, r3, r1
 800ad8a:	617b      	str	r3, [r7, #20]
 800ad8c:	f04f 0200 	mov.w	r2, #0
 800ad90:	f04f 0300 	mov.w	r3, #0
 800ad94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad98:	4659      	mov	r1, fp
 800ad9a:	018b      	lsls	r3, r1, #6
 800ad9c:	4651      	mov	r1, sl
 800ad9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ada2:	4651      	mov	r1, sl
 800ada4:	018a      	lsls	r2, r1, #6
 800ada6:	4651      	mov	r1, sl
 800ada8:	ebb2 0801 	subs.w	r8, r2, r1
 800adac:	4659      	mov	r1, fp
 800adae:	eb63 0901 	sbc.w	r9, r3, r1
 800adb2:	f04f 0200 	mov.w	r2, #0
 800adb6:	f04f 0300 	mov.w	r3, #0
 800adba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800adbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800adc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800adc6:	4690      	mov	r8, r2
 800adc8:	4699      	mov	r9, r3
 800adca:	4623      	mov	r3, r4
 800adcc:	eb18 0303 	adds.w	r3, r8, r3
 800add0:	60bb      	str	r3, [r7, #8]
 800add2:	462b      	mov	r3, r5
 800add4:	eb49 0303 	adc.w	r3, r9, r3
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	f04f 0200 	mov.w	r2, #0
 800adde:	f04f 0300 	mov.w	r3, #0
 800ade2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ade6:	4629      	mov	r1, r5
 800ade8:	024b      	lsls	r3, r1, #9
 800adea:	4621      	mov	r1, r4
 800adec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800adf0:	4621      	mov	r1, r4
 800adf2:	024a      	lsls	r2, r1, #9
 800adf4:	4610      	mov	r0, r2
 800adf6:	4619      	mov	r1, r3
 800adf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adfa:	2200      	movs	r2, #0
 800adfc:	62bb      	str	r3, [r7, #40]	; 0x28
 800adfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ae04:	f7f5 fef0 	bl	8000be8 <__aeabi_uldivmod>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae10:	e058      	b.n	800aec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae12:	4b38      	ldr	r3, [pc, #224]	; (800aef4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	099b      	lsrs	r3, r3, #6
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ae22:	623b      	str	r3, [r7, #32]
 800ae24:	2300      	movs	r3, #0
 800ae26:	627b      	str	r3, [r7, #36]	; 0x24
 800ae28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ae2c:	4642      	mov	r2, r8
 800ae2e:	464b      	mov	r3, r9
 800ae30:	f04f 0000 	mov.w	r0, #0
 800ae34:	f04f 0100 	mov.w	r1, #0
 800ae38:	0159      	lsls	r1, r3, #5
 800ae3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae3e:	0150      	lsls	r0, r2, #5
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4641      	mov	r1, r8
 800ae46:	ebb2 0a01 	subs.w	sl, r2, r1
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	eb63 0b01 	sbc.w	fp, r3, r1
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	f04f 0300 	mov.w	r3, #0
 800ae58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ae5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ae60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ae64:	ebb2 040a 	subs.w	r4, r2, sl
 800ae68:	eb63 050b 	sbc.w	r5, r3, fp
 800ae6c:	f04f 0200 	mov.w	r2, #0
 800ae70:	f04f 0300 	mov.w	r3, #0
 800ae74:	00eb      	lsls	r3, r5, #3
 800ae76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae7a:	00e2      	lsls	r2, r4, #3
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	461d      	mov	r5, r3
 800ae80:	4643      	mov	r3, r8
 800ae82:	18e3      	adds	r3, r4, r3
 800ae84:	603b      	str	r3, [r7, #0]
 800ae86:	464b      	mov	r3, r9
 800ae88:	eb45 0303 	adc.w	r3, r5, r3
 800ae8c:	607b      	str	r3, [r7, #4]
 800ae8e:	f04f 0200 	mov.w	r2, #0
 800ae92:	f04f 0300 	mov.w	r3, #0
 800ae96:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	028b      	lsls	r3, r1, #10
 800ae9e:	4621      	mov	r1, r4
 800aea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aea4:	4621      	mov	r1, r4
 800aea6:	028a      	lsls	r2, r1, #10
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeae:	2200      	movs	r2, #0
 800aeb0:	61bb      	str	r3, [r7, #24]
 800aeb2:	61fa      	str	r2, [r7, #28]
 800aeb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aeb8:	f7f5 fe96 	bl	8000be8 <__aeabi_uldivmod>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4613      	mov	r3, r2
 800aec2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800aec4:	4b0b      	ldr	r3, [pc, #44]	; (800aef4 <HAL_RCC_GetSysClockFreq+0x200>)
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	0c1b      	lsrs	r3, r3, #16
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	3301      	adds	r3, #1
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800aed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aedc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aede:	e002      	b.n	800aee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aee0:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x204>)
 800aee2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3750      	adds	r7, #80	; 0x50
 800aeec:	46bd      	mov	sp, r7
 800aeee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aef2:	bf00      	nop
 800aef4:	40023800 	.word	0x40023800
 800aef8:	00f42400 	.word	0x00f42400
 800aefc:	007a1200 	.word	0x007a1200

0800af00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af00:	b480      	push	{r7}
 800af02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af04:	4b03      	ldr	r3, [pc, #12]	; (800af14 <HAL_RCC_GetHCLKFreq+0x14>)
 800af06:	681b      	ldr	r3, [r3, #0]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20000008 	.word	0x20000008

0800af18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af1c:	f7ff fff0 	bl	800af00 <HAL_RCC_GetHCLKFreq>
 800af20:	4602      	mov	r2, r0
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	0a9b      	lsrs	r3, r3, #10
 800af28:	f003 0307 	and.w	r3, r3, #7
 800af2c:	4903      	ldr	r1, [pc, #12]	; (800af3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800af2e:	5ccb      	ldrb	r3, [r1, r3]
 800af30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af34:	4618      	mov	r0, r3
 800af36:	bd80      	pop	{r7, pc}
 800af38:	40023800 	.word	0x40023800
 800af3c:	08013118 	.word	0x08013118

0800af40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af44:	f7ff ffdc 	bl	800af00 <HAL_RCC_GetHCLKFreq>
 800af48:	4602      	mov	r2, r0
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	0b5b      	lsrs	r3, r3, #13
 800af50:	f003 0307 	and.w	r3, r3, #7
 800af54:	4903      	ldr	r1, [pc, #12]	; (800af64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af56:	5ccb      	ldrb	r3, [r1, r3]
 800af58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	40023800 	.word	0x40023800
 800af64:	08013118 	.word	0x08013118

0800af68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e049      	b.n	800b00e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d106      	bne.n	800af94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7fd ff56 	bl	8008e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2202      	movs	r2, #2
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3304      	adds	r3, #4
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	f000 fa24 	bl	800b3f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
	...

0800b018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d001      	beq.n	800b030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	e054      	b.n	800b0da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2202      	movs	r2, #2
 800b034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f042 0201 	orr.w	r2, r2, #1
 800b046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a26      	ldr	r2, [pc, #152]	; (800b0e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d022      	beq.n	800b098 <HAL_TIM_Base_Start_IT+0x80>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b05a:	d01d      	beq.n	800b098 <HAL_TIM_Base_Start_IT+0x80>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a22      	ldr	r2, [pc, #136]	; (800b0ec <HAL_TIM_Base_Start_IT+0xd4>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d018      	beq.n	800b098 <HAL_TIM_Base_Start_IT+0x80>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a21      	ldr	r2, [pc, #132]	; (800b0f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d013      	beq.n	800b098 <HAL_TIM_Base_Start_IT+0x80>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a1f      	ldr	r2, [pc, #124]	; (800b0f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d00e      	beq.n	800b098 <HAL_TIM_Base_Start_IT+0x80>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a1e      	ldr	r2, [pc, #120]	; (800b0f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d009      	beq.n	800b098 <HAL_TIM_Base_Start_IT+0x80>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a1c      	ldr	r2, [pc, #112]	; (800b0fc <HAL_TIM_Base_Start_IT+0xe4>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d004      	beq.n	800b098 <HAL_TIM_Base_Start_IT+0x80>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a1b      	ldr	r2, [pc, #108]	; (800b100 <HAL_TIM_Base_Start_IT+0xe8>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d115      	bne.n	800b0c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689a      	ldr	r2, [r3, #8]
 800b09e:	4b19      	ldr	r3, [pc, #100]	; (800b104 <HAL_TIM_Base_Start_IT+0xec>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b06      	cmp	r3, #6
 800b0a8:	d015      	beq.n	800b0d6 <HAL_TIM_Base_Start_IT+0xbe>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0b0:	d011      	beq.n	800b0d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f042 0201 	orr.w	r2, r2, #1
 800b0c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0c2:	e008      	b.n	800b0d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f042 0201 	orr.w	r2, r2, #1
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	e000      	b.n	800b0d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	40010000 	.word	0x40010000
 800b0ec:	40000400 	.word	0x40000400
 800b0f0:	40000800 	.word	0x40000800
 800b0f4:	40000c00 	.word	0x40000c00
 800b0f8:	40010400 	.word	0x40010400
 800b0fc:	40014000 	.word	0x40014000
 800b100:	40001800 	.word	0x40001800
 800b104:	00010007 	.word	0x00010007

0800b108 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0201 	bic.w	r2, r2, #1
 800b11e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6a1a      	ldr	r2, [r3, #32]
 800b126:	f241 1311 	movw	r3, #4369	; 0x1111
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10f      	bne.n	800b150 <HAL_TIM_Base_Stop_IT+0x48>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6a1a      	ldr	r2, [r3, #32]
 800b136:	f240 4344 	movw	r3, #1092	; 0x444
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d107      	bne.n	800b150 <HAL_TIM_Base_Stop_IT+0x48>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0201 	bic.w	r2, r2, #1
 800b14e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	f003 0302 	and.w	r3, r3, #2
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d122      	bne.n	800b1c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b02      	cmp	r3, #2
 800b188:	d11b      	bne.n	800b1c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f06f 0202 	mvn.w	r2, #2
 800b192:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f905 	bl	800b3b8 <HAL_TIM_IC_CaptureCallback>
 800b1ae:	e005      	b.n	800b1bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f8f7 	bl	800b3a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f908 	bl	800b3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	f003 0304 	and.w	r3, r3, #4
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	d122      	bne.n	800b216 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d11b      	bne.n	800b216 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f06f 0204 	mvn.w	r2, #4
 800b1e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f8db 	bl	800b3b8 <HAL_TIM_IC_CaptureCallback>
 800b202:	e005      	b.n	800b210 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f8cd 	bl	800b3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f8de 	bl	800b3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	f003 0308 	and.w	r3, r3, #8
 800b220:	2b08      	cmp	r3, #8
 800b222:	d122      	bne.n	800b26a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	f003 0308 	and.w	r3, r3, #8
 800b22e:	2b08      	cmp	r3, #8
 800b230:	d11b      	bne.n	800b26a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f06f 0208 	mvn.w	r2, #8
 800b23a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2204      	movs	r2, #4
 800b240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	69db      	ldr	r3, [r3, #28]
 800b248:	f003 0303 	and.w	r3, r3, #3
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f8b1 	bl	800b3b8 <HAL_TIM_IC_CaptureCallback>
 800b256:	e005      	b.n	800b264 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f8a3 	bl	800b3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f8b4 	bl	800b3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	f003 0310 	and.w	r3, r3, #16
 800b274:	2b10      	cmp	r3, #16
 800b276:	d122      	bne.n	800b2be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	f003 0310 	and.w	r3, r3, #16
 800b282:	2b10      	cmp	r3, #16
 800b284:	d11b      	bne.n	800b2be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f06f 0210 	mvn.w	r2, #16
 800b28e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2208      	movs	r2, #8
 800b294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69db      	ldr	r3, [r3, #28]
 800b29c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f887 	bl	800b3b8 <HAL_TIM_IC_CaptureCallback>
 800b2aa:	e005      	b.n	800b2b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f879 	bl	800b3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f88a 	bl	800b3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d10e      	bne.n	800b2ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d107      	bne.n	800b2ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f06f 0201 	mvn.w	r2, #1
 800b2e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7fd fc73 	bl	8008bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f4:	2b80      	cmp	r3, #128	; 0x80
 800b2f6:	d10e      	bne.n	800b316 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b302:	2b80      	cmp	r3, #128	; 0x80
 800b304:	d107      	bne.n	800b316 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f919 	bl	800b548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b324:	d10e      	bne.n	800b344 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b330:	2b80      	cmp	r3, #128	; 0x80
 800b332:	d107      	bne.n	800b344 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b33c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f90c 	bl	800b55c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34e:	2b40      	cmp	r3, #64	; 0x40
 800b350:	d10e      	bne.n	800b370 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35c:	2b40      	cmp	r3, #64	; 0x40
 800b35e:	d107      	bne.n	800b370 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f838 	bl	800b3e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	f003 0320 	and.w	r3, r3, #32
 800b37a:	2b20      	cmp	r3, #32
 800b37c:	d10e      	bne.n	800b39c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f003 0320 	and.w	r3, r3, #32
 800b388:	2b20      	cmp	r3, #32
 800b38a:	d107      	bne.n	800b39c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f06f 0220 	mvn.w	r2, #32
 800b394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f8cc 	bl	800b534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b39c:	bf00      	nop
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3c0:	bf00      	nop
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a40      	ldr	r2, [pc, #256]	; (800b508 <TIM_Base_SetConfig+0x114>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d013      	beq.n	800b434 <TIM_Base_SetConfig+0x40>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b412:	d00f      	beq.n	800b434 <TIM_Base_SetConfig+0x40>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a3d      	ldr	r2, [pc, #244]	; (800b50c <TIM_Base_SetConfig+0x118>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00b      	beq.n	800b434 <TIM_Base_SetConfig+0x40>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a3c      	ldr	r2, [pc, #240]	; (800b510 <TIM_Base_SetConfig+0x11c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d007      	beq.n	800b434 <TIM_Base_SetConfig+0x40>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a3b      	ldr	r2, [pc, #236]	; (800b514 <TIM_Base_SetConfig+0x120>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d003      	beq.n	800b434 <TIM_Base_SetConfig+0x40>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a3a      	ldr	r2, [pc, #232]	; (800b518 <TIM_Base_SetConfig+0x124>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d108      	bne.n	800b446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	4313      	orrs	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a2f      	ldr	r2, [pc, #188]	; (800b508 <TIM_Base_SetConfig+0x114>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d02b      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b454:	d027      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a2c      	ldr	r2, [pc, #176]	; (800b50c <TIM_Base_SetConfig+0x118>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d023      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a2b      	ldr	r2, [pc, #172]	; (800b510 <TIM_Base_SetConfig+0x11c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d01f      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a2a      	ldr	r2, [pc, #168]	; (800b514 <TIM_Base_SetConfig+0x120>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d01b      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a29      	ldr	r2, [pc, #164]	; (800b518 <TIM_Base_SetConfig+0x124>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d017      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a28      	ldr	r2, [pc, #160]	; (800b51c <TIM_Base_SetConfig+0x128>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d013      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a27      	ldr	r2, [pc, #156]	; (800b520 <TIM_Base_SetConfig+0x12c>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d00f      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a26      	ldr	r2, [pc, #152]	; (800b524 <TIM_Base_SetConfig+0x130>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d00b      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a25      	ldr	r2, [pc, #148]	; (800b528 <TIM_Base_SetConfig+0x134>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d007      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a24      	ldr	r2, [pc, #144]	; (800b52c <TIM_Base_SetConfig+0x138>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d003      	beq.n	800b4a6 <TIM_Base_SetConfig+0xb2>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a23      	ldr	r2, [pc, #140]	; (800b530 <TIM_Base_SetConfig+0x13c>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d108      	bne.n	800b4b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	689a      	ldr	r2, [r3, #8]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a0a      	ldr	r2, [pc, #40]	; (800b508 <TIM_Base_SetConfig+0x114>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d003      	beq.n	800b4ec <TIM_Base_SetConfig+0xf8>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a0c      	ldr	r2, [pc, #48]	; (800b518 <TIM_Base_SetConfig+0x124>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d103      	bne.n	800b4f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	691a      	ldr	r2, [r3, #16]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	615a      	str	r2, [r3, #20]
}
 800b4fa:	bf00      	nop
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	40010000 	.word	0x40010000
 800b50c:	40000400 	.word	0x40000400
 800b510:	40000800 	.word	0x40000800
 800b514:	40000c00 	.word	0x40000c00
 800b518:	40010400 	.word	0x40010400
 800b51c:	40014000 	.word	0x40014000
 800b520:	40014400 	.word	0x40014400
 800b524:	40014800 	.word	0x40014800
 800b528:	40001800 	.word	0x40001800
 800b52c:	40001c00 	.word	0x40001c00
 800b530:	40002000 	.word	0x40002000

0800b534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e040      	b.n	800b604 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b586:	2b00      	cmp	r3, #0
 800b588:	d106      	bne.n	800b598 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7fd fbd8 	bl	8008d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2224      	movs	r2, #36	; 0x24
 800b59c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f022 0201 	bic.w	r2, r2, #1
 800b5ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fc52 	bl	800be58 <UART_SetConfig>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d101      	bne.n	800b5be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e022      	b.n	800b604 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d002      	beq.n	800b5cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 feaa 	bl	800c320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b5da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b5ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f042 0201 	orr.w	r2, r2, #1
 800b5fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 ff31 	bl	800c464 <UART_CheckIdleState>
 800b602:	4603      	mov	r3, r0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08a      	sub	sp, #40	; 0x28
 800b610:	af02      	add	r7, sp, #8
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	603b      	str	r3, [r7, #0]
 800b618:	4613      	mov	r3, r2
 800b61a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b620:	2b20      	cmp	r3, #32
 800b622:	f040 8081 	bne.w	800b728 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <HAL_UART_Transmit+0x26>
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e079      	b.n	800b72a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d101      	bne.n	800b644 <HAL_UART_Transmit+0x38>
 800b640:	2302      	movs	r3, #2
 800b642:	e072      	b.n	800b72a <HAL_UART_Transmit+0x11e>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2221      	movs	r2, #33	; 0x21
 800b658:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b65a:	f7fd fd91 	bl	8009180 <HAL_GetTick>
 800b65e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	88fa      	ldrh	r2, [r7, #6]
 800b664:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	88fa      	ldrh	r2, [r7, #6]
 800b66c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b678:	d108      	bne.n	800b68c <HAL_UART_Transmit+0x80>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d104      	bne.n	800b68c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b682:	2300      	movs	r3, #0
 800b684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	61bb      	str	r3, [r7, #24]
 800b68a:	e003      	b.n	800b694 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b69c:	e02c      	b.n	800b6f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2180      	movs	r1, #128	; 0x80
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 ff0e 	bl	800c4ca <UART_WaitOnFlagUntilTimeout>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e038      	b.n	800b72a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10b      	bne.n	800b6d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	881b      	ldrh	r3, [r3, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	3302      	adds	r3, #2
 800b6d2:	61bb      	str	r3, [r7, #24]
 800b6d4:	e007      	b.n	800b6e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	781a      	ldrb	r2, [r3, #0]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1cc      	bne.n	800b69e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2200      	movs	r2, #0
 800b70c:	2140      	movs	r1, #64	; 0x40
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f000 fedb 	bl	800c4ca <UART_WaitOnFlagUntilTimeout>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e005      	b.n	800b72a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2220      	movs	r2, #32
 800b722:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b724:	2300      	movs	r3, #0
 800b726:	e000      	b.n	800b72a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b728:	2302      	movs	r3, #2
  }
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3720      	adds	r7, #32
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b734:	b480      	push	{r7}
 800b736:	b08b      	sub	sp, #44	; 0x2c
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	4613      	mov	r3, r2
 800b740:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b746:	2b20      	cmp	r3, #32
 800b748:	d156      	bne.n	800b7f8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <HAL_UART_Transmit_IT+0x22>
 800b750:	88fb      	ldrh	r3, [r7, #6]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e04f      	b.n	800b7fa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b760:	2b01      	cmp	r3, #1
 800b762:	d101      	bne.n	800b768 <HAL_UART_Transmit_IT+0x34>
 800b764:	2302      	movs	r3, #2
 800b766:	e048      	b.n	800b7fa <HAL_UART_Transmit_IT+0xc6>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	88fa      	ldrh	r2, [r7, #6]
 800b77a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	88fa      	ldrh	r2, [r7, #6]
 800b782:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2221      	movs	r2, #33	; 0x21
 800b798:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a2:	d107      	bne.n	800b7b4 <HAL_UART_Transmit_IT+0x80>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d103      	bne.n	800b7b4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4a16      	ldr	r2, [pc, #88]	; (800b808 <HAL_UART_Transmit_IT+0xd4>)
 800b7b0:	669a      	str	r2, [r3, #104]	; 0x68
 800b7b2:	e002      	b.n	800b7ba <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4a15      	ldr	r2, [pc, #84]	; (800b80c <HAL_UART_Transmit_IT+0xd8>)
 800b7b8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e0:	623b      	str	r3, [r7, #32]
 800b7e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	69f9      	ldr	r1, [r7, #28]
 800b7e6:	6a3a      	ldr	r2, [r7, #32]
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e6      	bne.n	800b7c2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	e000      	b.n	800b7fa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800b7f8:	2302      	movs	r3, #2
  }
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	372c      	adds	r7, #44	; 0x2c
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	0800c991 	.word	0x0800c991
 800b80c:	0800c8db 	.word	0x0800c8db

0800b810 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b08a      	sub	sp, #40	; 0x28
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	4613      	mov	r3, r2
 800b81c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b822:	2b20      	cmp	r3, #32
 800b824:	d13d      	bne.n	800b8a2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <HAL_UART_Receive_IT+0x22>
 800b82c:	88fb      	ldrh	r3, [r7, #6]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d101      	bne.n	800b836 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e036      	b.n	800b8a4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d101      	bne.n	800b844 <HAL_UART_Receive_IT+0x34>
 800b840:	2302      	movs	r3, #2
 800b842:	e02f      	b.n	800b8a4 <HAL_UART_Receive_IT+0x94>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d018      	beq.n	800b892 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	613b      	str	r3, [r7, #16]
   return(result);
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b874:	627b      	str	r3, [r7, #36]	; 0x24
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	623b      	str	r3, [r7, #32]
 800b880:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b882:	69f9      	ldr	r1, [r7, #28]
 800b884:	6a3a      	ldr	r2, [r7, #32]
 800b886:	e841 2300 	strex	r3, r2, [r1]
 800b88a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e6      	bne.n	800b860 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b892:	88fb      	ldrh	r3, [r7, #6]
 800b894:	461a      	mov	r2, r3
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 fedb 	bl	800c654 <UART_Start_Receive_IT>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	e000      	b.n	800b8a4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8a2:	2302      	movs	r3, #2
  }
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3728      	adds	r7, #40	; 0x28
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b0ba      	sub	sp, #232	; 0xe8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b8d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b8d6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b8da:	4013      	ands	r3, r2
 800b8dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b8e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d115      	bne.n	800b914 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ec:	f003 0320 	and.w	r3, r3, #32
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00f      	beq.n	800b914 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d009      	beq.n	800b914 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 828f 	beq.w	800be28 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
      }
      return;
 800b912:	e289      	b.n	800be28 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 8117 	beq.w	800bb4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b91e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b92a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b92e:	4b85      	ldr	r3, [pc, #532]	; (800bb44 <HAL_UART_IRQHandler+0x298>)
 800b930:	4013      	ands	r3, r2
 800b932:	2b00      	cmp	r3, #0
 800b934:	f000 810a 	beq.w	800bb4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b93c:	f003 0301 	and.w	r3, r3, #1
 800b940:	2b00      	cmp	r3, #0
 800b942:	d011      	beq.n	800b968 <HAL_UART_IRQHandler+0xbc>
 800b944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00b      	beq.n	800b968 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2201      	movs	r2, #1
 800b956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b95e:	f043 0201 	orr.w	r2, r3, #1
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b96c:	f003 0302 	and.w	r3, r3, #2
 800b970:	2b00      	cmp	r3, #0
 800b972:	d011      	beq.n	800b998 <HAL_UART_IRQHandler+0xec>
 800b974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00b      	beq.n	800b998 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2202      	movs	r2, #2
 800b986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b98e:	f043 0204 	orr.w	r2, r3, #4
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d011      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x11c>
 800b9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2204      	movs	r2, #4
 800b9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9be:	f043 0202 	orr.w	r2, r3, #2
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9cc:	f003 0308 	and.w	r3, r3, #8
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d017      	beq.n	800ba04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9d8:	f003 0320 	and.w	r3, r3, #32
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d105      	bne.n	800b9ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b9e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00b      	beq.n	800ba04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9fa:	f043 0208 	orr.w	r2, r3, #8
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d012      	beq.n	800ba36 <HAL_UART_IRQHandler+0x18a>
 800ba10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00c      	beq.n	800ba36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba2c:	f043 0220 	orr.w	r2, r3, #32
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 81f5 	beq.w	800be2c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00d      	beq.n	800ba6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba52:	f003 0320 	and.w	r3, r3, #32
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d007      	beq.n	800ba6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba7e:	2b40      	cmp	r3, #64	; 0x40
 800ba80:	d005      	beq.n	800ba8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d04f      	beq.n	800bb2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 feaa 	bl	800c7e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9e:	2b40      	cmp	r3, #64	; 0x40
 800baa0:	d141      	bne.n	800bb26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3308      	adds	r3, #8
 800baa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bab0:	e853 3f00 	ldrex	r3, [r3]
 800bab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800babc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	3308      	adds	r3, #8
 800baca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bade:	e841 2300 	strex	r3, r2, [r1]
 800bae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d1d9      	bne.n	800baa2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d013      	beq.n	800bb1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bafa:	4a13      	ldr	r2, [pc, #76]	; (800bb48 <HAL_UART_IRQHandler+0x29c>)
 800bafc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fb7d 	bl	800a202 <HAL_DMA_Abort_IT>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d017      	beq.n	800bb3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800bb18:	4610      	mov	r0, r2
 800bb1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb1c:	e00f      	b.n	800bb3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7fc ff72 	bl	8008a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb24:	e00b      	b.n	800bb3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fc ff6e 	bl	8008a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb2c:	e007      	b.n	800bb3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7fc ff6a 	bl	8008a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800bb3c:	e176      	b.n	800be2c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb3e:	bf00      	nop
    return;
 800bb40:	e174      	b.n	800be2c <HAL_UART_IRQHandler+0x580>
 800bb42:	bf00      	nop
 800bb44:	04000120 	.word	0x04000120
 800bb48:	0800c8af 	.word	0x0800c8af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	f040 8144 	bne.w	800bdde <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb5a:	f003 0310 	and.w	r3, r3, #16
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f000 813d 	beq.w	800bdde <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb68:	f003 0310 	and.w	r3, r3, #16
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 8136 	beq.w	800bdde <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2210      	movs	r2, #16
 800bb78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb84:	2b40      	cmp	r3, #64	; 0x40
 800bb86:	f040 80b2 	bne.w	800bcee <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f000 8148 	beq.w	800be30 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	f080 8140 	bcs.w	800be30 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbc4:	f000 8085 	beq.w	800bcd2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bbdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	461a      	mov	r2, r3
 800bbee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bbf6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bbfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc02:	e841 2300 	strex	r3, r2, [r1]
 800bc06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1da      	bne.n	800bbc8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3308      	adds	r3, #8
 800bc18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc24:	f023 0301 	bic.w	r3, r3, #1
 800bc28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3308      	adds	r3, #8
 800bc32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc42:	e841 2300 	strex	r3, r2, [r1]
 800bc46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1e1      	bne.n	800bc12 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3308      	adds	r3, #8
 800bc54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc58:	e853 3f00 	ldrex	r3, [r3]
 800bc5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc72:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc7a:	e841 2300 	strex	r3, r2, [r1]
 800bc7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1e3      	bne.n	800bc4e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2220      	movs	r2, #32
 800bc8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc9a:	e853 3f00 	ldrex	r3, [r3]
 800bc9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca2:	f023 0310 	bic.w	r3, r3, #16
 800bca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcb4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcbc:	e841 2300 	strex	r3, r2, [r1]
 800bcc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1e4      	bne.n	800bc92 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe fa28 	bl	800a122 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	4619      	mov	r1, r3
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f8aa 	bl	800be40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcec:	e0a0      	b.n	800be30 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 8092 	beq.w	800be34 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800bd10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 808d 	beq.w	800be34 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd22:	e853 3f00 	ldrex	r3, [r3]
 800bd26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	461a      	mov	r2, r3
 800bd38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd3c:	647b      	str	r3, [r7, #68]	; 0x44
 800bd3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd44:	e841 2300 	strex	r3, r2, [r1]
 800bd48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1e4      	bne.n	800bd1a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3308      	adds	r3, #8
 800bd56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	e853 3f00 	ldrex	r3, [r3]
 800bd5e:	623b      	str	r3, [r7, #32]
   return(result);
 800bd60:	6a3b      	ldr	r3, [r7, #32]
 800bd62:	f023 0301 	bic.w	r3, r3, #1
 800bd66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	3308      	adds	r3, #8
 800bd70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bd74:	633a      	str	r2, [r7, #48]	; 0x30
 800bd76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd7c:	e841 2300 	strex	r3, r2, [r1]
 800bd80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1e3      	bne.n	800bd50 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2220      	movs	r2, #32
 800bd8c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	e853 3f00 	ldrex	r3, [r3]
 800bda6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f023 0310 	bic.w	r3, r3, #16
 800bdae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bdbc:	61fb      	str	r3, [r7, #28]
 800bdbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc0:	69b9      	ldr	r1, [r7, #24]
 800bdc2:	69fa      	ldr	r2, [r7, #28]
 800bdc4:	e841 2300 	strex	r3, r2, [r1]
 800bdc8:	617b      	str	r3, [r7, #20]
   return(result);
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e4      	bne.n	800bd9a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bdd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f832 	bl	800be40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bddc:	e02a      	b.n	800be34 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bdde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bde2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00e      	beq.n	800be08 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bdea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d008      	beq.n	800be08 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d01c      	beq.n	800be38 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	4798      	blx	r3
    }
    return;
 800be06:	e017      	b.n	800be38 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be10:	2b00      	cmp	r3, #0
 800be12:	d012      	beq.n	800be3a <HAL_UART_IRQHandler+0x58e>
 800be14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00c      	beq.n	800be3a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fe15 	bl	800ca50 <UART_EndTransmit_IT>
    return;
 800be26:	e008      	b.n	800be3a <HAL_UART_IRQHandler+0x58e>
      return;
 800be28:	bf00      	nop
 800be2a:	e006      	b.n	800be3a <HAL_UART_IRQHandler+0x58e>
    return;
 800be2c:	bf00      	nop
 800be2e:	e004      	b.n	800be3a <HAL_UART_IRQHandler+0x58e>
      return;
 800be30:	bf00      	nop
 800be32:	e002      	b.n	800be3a <HAL_UART_IRQHandler+0x58e>
      return;
 800be34:	bf00      	nop
 800be36:	e000      	b.n	800be3a <HAL_UART_IRQHandler+0x58e>
    return;
 800be38:	bf00      	nop
  }

}
 800be3a:	37e8      	adds	r7, #232	; 0xe8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be60:	2300      	movs	r3, #0
 800be62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	689a      	ldr	r2, [r3, #8]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	431a      	orrs	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	431a      	orrs	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	69db      	ldr	r3, [r3, #28]
 800be78:	4313      	orrs	r3, r2
 800be7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	4ba6      	ldr	r3, [pc, #664]	; (800c11c <UART_SetConfig+0x2c4>)
 800be84:	4013      	ands	r3, r2
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	6812      	ldr	r2, [r2, #0]
 800be8a:	6979      	ldr	r1, [r7, #20]
 800be8c:	430b      	orrs	r3, r1
 800be8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68da      	ldr	r2, [r3, #12]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	697a      	ldr	r2, [r7, #20]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	430a      	orrs	r2, r1
 800bec8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a94      	ldr	r2, [pc, #592]	; (800c120 <UART_SetConfig+0x2c8>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d120      	bne.n	800bf16 <UART_SetConfig+0xbe>
 800bed4:	4b93      	ldr	r3, [pc, #588]	; (800c124 <UART_SetConfig+0x2cc>)
 800bed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d816      	bhi.n	800bf10 <UART_SetConfig+0xb8>
 800bee2:	a201      	add	r2, pc, #4	; (adr r2, 800bee8 <UART_SetConfig+0x90>)
 800bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee8:	0800bef9 	.word	0x0800bef9
 800beec:	0800bf05 	.word	0x0800bf05
 800bef0:	0800beff 	.word	0x0800beff
 800bef4:	0800bf0b 	.word	0x0800bf0b
 800bef8:	2301      	movs	r3, #1
 800befa:	77fb      	strb	r3, [r7, #31]
 800befc:	e150      	b.n	800c1a0 <UART_SetConfig+0x348>
 800befe:	2302      	movs	r3, #2
 800bf00:	77fb      	strb	r3, [r7, #31]
 800bf02:	e14d      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf04:	2304      	movs	r3, #4
 800bf06:	77fb      	strb	r3, [r7, #31]
 800bf08:	e14a      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf0a:	2308      	movs	r3, #8
 800bf0c:	77fb      	strb	r3, [r7, #31]
 800bf0e:	e147      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf10:	2310      	movs	r3, #16
 800bf12:	77fb      	strb	r3, [r7, #31]
 800bf14:	e144      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a83      	ldr	r2, [pc, #524]	; (800c128 <UART_SetConfig+0x2d0>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d132      	bne.n	800bf86 <UART_SetConfig+0x12e>
 800bf20:	4b80      	ldr	r3, [pc, #512]	; (800c124 <UART_SetConfig+0x2cc>)
 800bf22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf26:	f003 030c 	and.w	r3, r3, #12
 800bf2a:	2b0c      	cmp	r3, #12
 800bf2c:	d828      	bhi.n	800bf80 <UART_SetConfig+0x128>
 800bf2e:	a201      	add	r2, pc, #4	; (adr r2, 800bf34 <UART_SetConfig+0xdc>)
 800bf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf34:	0800bf69 	.word	0x0800bf69
 800bf38:	0800bf81 	.word	0x0800bf81
 800bf3c:	0800bf81 	.word	0x0800bf81
 800bf40:	0800bf81 	.word	0x0800bf81
 800bf44:	0800bf75 	.word	0x0800bf75
 800bf48:	0800bf81 	.word	0x0800bf81
 800bf4c:	0800bf81 	.word	0x0800bf81
 800bf50:	0800bf81 	.word	0x0800bf81
 800bf54:	0800bf6f 	.word	0x0800bf6f
 800bf58:	0800bf81 	.word	0x0800bf81
 800bf5c:	0800bf81 	.word	0x0800bf81
 800bf60:	0800bf81 	.word	0x0800bf81
 800bf64:	0800bf7b 	.word	0x0800bf7b
 800bf68:	2300      	movs	r3, #0
 800bf6a:	77fb      	strb	r3, [r7, #31]
 800bf6c:	e118      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf6e:	2302      	movs	r3, #2
 800bf70:	77fb      	strb	r3, [r7, #31]
 800bf72:	e115      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf74:	2304      	movs	r3, #4
 800bf76:	77fb      	strb	r3, [r7, #31]
 800bf78:	e112      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf7a:	2308      	movs	r3, #8
 800bf7c:	77fb      	strb	r3, [r7, #31]
 800bf7e:	e10f      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf80:	2310      	movs	r3, #16
 800bf82:	77fb      	strb	r3, [r7, #31]
 800bf84:	e10c      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a68      	ldr	r2, [pc, #416]	; (800c12c <UART_SetConfig+0x2d4>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d120      	bne.n	800bfd2 <UART_SetConfig+0x17a>
 800bf90:	4b64      	ldr	r3, [pc, #400]	; (800c124 <UART_SetConfig+0x2cc>)
 800bf92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf9a:	2b30      	cmp	r3, #48	; 0x30
 800bf9c:	d013      	beq.n	800bfc6 <UART_SetConfig+0x16e>
 800bf9e:	2b30      	cmp	r3, #48	; 0x30
 800bfa0:	d814      	bhi.n	800bfcc <UART_SetConfig+0x174>
 800bfa2:	2b20      	cmp	r3, #32
 800bfa4:	d009      	beq.n	800bfba <UART_SetConfig+0x162>
 800bfa6:	2b20      	cmp	r3, #32
 800bfa8:	d810      	bhi.n	800bfcc <UART_SetConfig+0x174>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <UART_SetConfig+0x15c>
 800bfae:	2b10      	cmp	r3, #16
 800bfb0:	d006      	beq.n	800bfc0 <UART_SetConfig+0x168>
 800bfb2:	e00b      	b.n	800bfcc <UART_SetConfig+0x174>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	77fb      	strb	r3, [r7, #31]
 800bfb8:	e0f2      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bfba:	2302      	movs	r3, #2
 800bfbc:	77fb      	strb	r3, [r7, #31]
 800bfbe:	e0ef      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bfc0:	2304      	movs	r3, #4
 800bfc2:	77fb      	strb	r3, [r7, #31]
 800bfc4:	e0ec      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bfc6:	2308      	movs	r3, #8
 800bfc8:	77fb      	strb	r3, [r7, #31]
 800bfca:	e0e9      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bfcc:	2310      	movs	r3, #16
 800bfce:	77fb      	strb	r3, [r7, #31]
 800bfd0:	e0e6      	b.n	800c1a0 <UART_SetConfig+0x348>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a56      	ldr	r2, [pc, #344]	; (800c130 <UART_SetConfig+0x2d8>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d120      	bne.n	800c01e <UART_SetConfig+0x1c6>
 800bfdc:	4b51      	ldr	r3, [pc, #324]	; (800c124 <UART_SetConfig+0x2cc>)
 800bfde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfe2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bfe6:	2bc0      	cmp	r3, #192	; 0xc0
 800bfe8:	d013      	beq.n	800c012 <UART_SetConfig+0x1ba>
 800bfea:	2bc0      	cmp	r3, #192	; 0xc0
 800bfec:	d814      	bhi.n	800c018 <UART_SetConfig+0x1c0>
 800bfee:	2b80      	cmp	r3, #128	; 0x80
 800bff0:	d009      	beq.n	800c006 <UART_SetConfig+0x1ae>
 800bff2:	2b80      	cmp	r3, #128	; 0x80
 800bff4:	d810      	bhi.n	800c018 <UART_SetConfig+0x1c0>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d002      	beq.n	800c000 <UART_SetConfig+0x1a8>
 800bffa:	2b40      	cmp	r3, #64	; 0x40
 800bffc:	d006      	beq.n	800c00c <UART_SetConfig+0x1b4>
 800bffe:	e00b      	b.n	800c018 <UART_SetConfig+0x1c0>
 800c000:	2300      	movs	r3, #0
 800c002:	77fb      	strb	r3, [r7, #31]
 800c004:	e0cc      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c006:	2302      	movs	r3, #2
 800c008:	77fb      	strb	r3, [r7, #31]
 800c00a:	e0c9      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c00c:	2304      	movs	r3, #4
 800c00e:	77fb      	strb	r3, [r7, #31]
 800c010:	e0c6      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c012:	2308      	movs	r3, #8
 800c014:	77fb      	strb	r3, [r7, #31]
 800c016:	e0c3      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c018:	2310      	movs	r3, #16
 800c01a:	77fb      	strb	r3, [r7, #31]
 800c01c:	e0c0      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a44      	ldr	r2, [pc, #272]	; (800c134 <UART_SetConfig+0x2dc>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d125      	bne.n	800c074 <UART_SetConfig+0x21c>
 800c028:	4b3e      	ldr	r3, [pc, #248]	; (800c124 <UART_SetConfig+0x2cc>)
 800c02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c036:	d017      	beq.n	800c068 <UART_SetConfig+0x210>
 800c038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c03c:	d817      	bhi.n	800c06e <UART_SetConfig+0x216>
 800c03e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c042:	d00b      	beq.n	800c05c <UART_SetConfig+0x204>
 800c044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c048:	d811      	bhi.n	800c06e <UART_SetConfig+0x216>
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <UART_SetConfig+0x1fe>
 800c04e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c052:	d006      	beq.n	800c062 <UART_SetConfig+0x20a>
 800c054:	e00b      	b.n	800c06e <UART_SetConfig+0x216>
 800c056:	2300      	movs	r3, #0
 800c058:	77fb      	strb	r3, [r7, #31]
 800c05a:	e0a1      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c05c:	2302      	movs	r3, #2
 800c05e:	77fb      	strb	r3, [r7, #31]
 800c060:	e09e      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c062:	2304      	movs	r3, #4
 800c064:	77fb      	strb	r3, [r7, #31]
 800c066:	e09b      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c068:	2308      	movs	r3, #8
 800c06a:	77fb      	strb	r3, [r7, #31]
 800c06c:	e098      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c06e:	2310      	movs	r3, #16
 800c070:	77fb      	strb	r3, [r7, #31]
 800c072:	e095      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a2f      	ldr	r2, [pc, #188]	; (800c138 <UART_SetConfig+0x2e0>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d125      	bne.n	800c0ca <UART_SetConfig+0x272>
 800c07e:	4b29      	ldr	r3, [pc, #164]	; (800c124 <UART_SetConfig+0x2cc>)
 800c080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c08c:	d017      	beq.n	800c0be <UART_SetConfig+0x266>
 800c08e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c092:	d817      	bhi.n	800c0c4 <UART_SetConfig+0x26c>
 800c094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c098:	d00b      	beq.n	800c0b2 <UART_SetConfig+0x25a>
 800c09a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c09e:	d811      	bhi.n	800c0c4 <UART_SetConfig+0x26c>
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d003      	beq.n	800c0ac <UART_SetConfig+0x254>
 800c0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0a8:	d006      	beq.n	800c0b8 <UART_SetConfig+0x260>
 800c0aa:	e00b      	b.n	800c0c4 <UART_SetConfig+0x26c>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	77fb      	strb	r3, [r7, #31]
 800c0b0:	e076      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	77fb      	strb	r3, [r7, #31]
 800c0b6:	e073      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c0b8:	2304      	movs	r3, #4
 800c0ba:	77fb      	strb	r3, [r7, #31]
 800c0bc:	e070      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c0be:	2308      	movs	r3, #8
 800c0c0:	77fb      	strb	r3, [r7, #31]
 800c0c2:	e06d      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c0c4:	2310      	movs	r3, #16
 800c0c6:	77fb      	strb	r3, [r7, #31]
 800c0c8:	e06a      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a1b      	ldr	r2, [pc, #108]	; (800c13c <UART_SetConfig+0x2e4>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d138      	bne.n	800c146 <UART_SetConfig+0x2ee>
 800c0d4:	4b13      	ldr	r3, [pc, #76]	; (800c124 <UART_SetConfig+0x2cc>)
 800c0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c0de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0e2:	d017      	beq.n	800c114 <UART_SetConfig+0x2bc>
 800c0e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0e8:	d82a      	bhi.n	800c140 <UART_SetConfig+0x2e8>
 800c0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ee:	d00b      	beq.n	800c108 <UART_SetConfig+0x2b0>
 800c0f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0f4:	d824      	bhi.n	800c140 <UART_SetConfig+0x2e8>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <UART_SetConfig+0x2aa>
 800c0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fe:	d006      	beq.n	800c10e <UART_SetConfig+0x2b6>
 800c100:	e01e      	b.n	800c140 <UART_SetConfig+0x2e8>
 800c102:	2300      	movs	r3, #0
 800c104:	77fb      	strb	r3, [r7, #31]
 800c106:	e04b      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c108:	2302      	movs	r3, #2
 800c10a:	77fb      	strb	r3, [r7, #31]
 800c10c:	e048      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c10e:	2304      	movs	r3, #4
 800c110:	77fb      	strb	r3, [r7, #31]
 800c112:	e045      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c114:	2308      	movs	r3, #8
 800c116:	77fb      	strb	r3, [r7, #31]
 800c118:	e042      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c11a:	bf00      	nop
 800c11c:	efff69f3 	.word	0xefff69f3
 800c120:	40011000 	.word	0x40011000
 800c124:	40023800 	.word	0x40023800
 800c128:	40004400 	.word	0x40004400
 800c12c:	40004800 	.word	0x40004800
 800c130:	40004c00 	.word	0x40004c00
 800c134:	40005000 	.word	0x40005000
 800c138:	40011400 	.word	0x40011400
 800c13c:	40007800 	.word	0x40007800
 800c140:	2310      	movs	r3, #16
 800c142:	77fb      	strb	r3, [r7, #31]
 800c144:	e02c      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a72      	ldr	r2, [pc, #456]	; (800c314 <UART_SetConfig+0x4bc>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d125      	bne.n	800c19c <UART_SetConfig+0x344>
 800c150:	4b71      	ldr	r3, [pc, #452]	; (800c318 <UART_SetConfig+0x4c0>)
 800c152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c156:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c15a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c15e:	d017      	beq.n	800c190 <UART_SetConfig+0x338>
 800c160:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c164:	d817      	bhi.n	800c196 <UART_SetConfig+0x33e>
 800c166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c16a:	d00b      	beq.n	800c184 <UART_SetConfig+0x32c>
 800c16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c170:	d811      	bhi.n	800c196 <UART_SetConfig+0x33e>
 800c172:	2b00      	cmp	r3, #0
 800c174:	d003      	beq.n	800c17e <UART_SetConfig+0x326>
 800c176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c17a:	d006      	beq.n	800c18a <UART_SetConfig+0x332>
 800c17c:	e00b      	b.n	800c196 <UART_SetConfig+0x33e>
 800c17e:	2300      	movs	r3, #0
 800c180:	77fb      	strb	r3, [r7, #31]
 800c182:	e00d      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c184:	2302      	movs	r3, #2
 800c186:	77fb      	strb	r3, [r7, #31]
 800c188:	e00a      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c18a:	2304      	movs	r3, #4
 800c18c:	77fb      	strb	r3, [r7, #31]
 800c18e:	e007      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c190:	2308      	movs	r3, #8
 800c192:	77fb      	strb	r3, [r7, #31]
 800c194:	e004      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c196:	2310      	movs	r3, #16
 800c198:	77fb      	strb	r3, [r7, #31]
 800c19a:	e001      	b.n	800c1a0 <UART_SetConfig+0x348>
 800c19c:	2310      	movs	r3, #16
 800c19e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	69db      	ldr	r3, [r3, #28]
 800c1a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1a8:	d15b      	bne.n	800c262 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c1aa:	7ffb      	ldrb	r3, [r7, #31]
 800c1ac:	2b08      	cmp	r3, #8
 800c1ae:	d828      	bhi.n	800c202 <UART_SetConfig+0x3aa>
 800c1b0:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <UART_SetConfig+0x360>)
 800c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b6:	bf00      	nop
 800c1b8:	0800c1dd 	.word	0x0800c1dd
 800c1bc:	0800c1e5 	.word	0x0800c1e5
 800c1c0:	0800c1ed 	.word	0x0800c1ed
 800c1c4:	0800c203 	.word	0x0800c203
 800c1c8:	0800c1f3 	.word	0x0800c1f3
 800c1cc:	0800c203 	.word	0x0800c203
 800c1d0:	0800c203 	.word	0x0800c203
 800c1d4:	0800c203 	.word	0x0800c203
 800c1d8:	0800c1fb 	.word	0x0800c1fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1dc:	f7fe fe9c 	bl	800af18 <HAL_RCC_GetPCLK1Freq>
 800c1e0:	61b8      	str	r0, [r7, #24]
        break;
 800c1e2:	e013      	b.n	800c20c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1e4:	f7fe feac 	bl	800af40 <HAL_RCC_GetPCLK2Freq>
 800c1e8:	61b8      	str	r0, [r7, #24]
        break;
 800c1ea:	e00f      	b.n	800c20c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1ec:	4b4b      	ldr	r3, [pc, #300]	; (800c31c <UART_SetConfig+0x4c4>)
 800c1ee:	61bb      	str	r3, [r7, #24]
        break;
 800c1f0:	e00c      	b.n	800c20c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1f2:	f7fe fd7f 	bl	800acf4 <HAL_RCC_GetSysClockFreq>
 800c1f6:	61b8      	str	r0, [r7, #24]
        break;
 800c1f8:	e008      	b.n	800c20c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1fe:	61bb      	str	r3, [r7, #24]
        break;
 800c200:	e004      	b.n	800c20c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c202:	2300      	movs	r3, #0
 800c204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	77bb      	strb	r3, [r7, #30]
        break;
 800c20a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d074      	beq.n	800c2fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	005a      	lsls	r2, r3, #1
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	085b      	lsrs	r3, r3, #1
 800c21c:	441a      	add	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	fbb2 f3f3 	udiv	r3, r2, r3
 800c226:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	2b0f      	cmp	r3, #15
 800c22c:	d916      	bls.n	800c25c <UART_SetConfig+0x404>
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c234:	d212      	bcs.n	800c25c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	b29b      	uxth	r3, r3
 800c23a:	f023 030f 	bic.w	r3, r3, #15
 800c23e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	085b      	lsrs	r3, r3, #1
 800c244:	b29b      	uxth	r3, r3
 800c246:	f003 0307 	and.w	r3, r3, #7
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	89fb      	ldrh	r3, [r7, #14]
 800c24e:	4313      	orrs	r3, r2
 800c250:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	89fa      	ldrh	r2, [r7, #14]
 800c258:	60da      	str	r2, [r3, #12]
 800c25a:	e04f      	b.n	800c2fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	77bb      	strb	r3, [r7, #30]
 800c260:	e04c      	b.n	800c2fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c262:	7ffb      	ldrb	r3, [r7, #31]
 800c264:	2b08      	cmp	r3, #8
 800c266:	d828      	bhi.n	800c2ba <UART_SetConfig+0x462>
 800c268:	a201      	add	r2, pc, #4	; (adr r2, 800c270 <UART_SetConfig+0x418>)
 800c26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26e:	bf00      	nop
 800c270:	0800c295 	.word	0x0800c295
 800c274:	0800c29d 	.word	0x0800c29d
 800c278:	0800c2a5 	.word	0x0800c2a5
 800c27c:	0800c2bb 	.word	0x0800c2bb
 800c280:	0800c2ab 	.word	0x0800c2ab
 800c284:	0800c2bb 	.word	0x0800c2bb
 800c288:	0800c2bb 	.word	0x0800c2bb
 800c28c:	0800c2bb 	.word	0x0800c2bb
 800c290:	0800c2b3 	.word	0x0800c2b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c294:	f7fe fe40 	bl	800af18 <HAL_RCC_GetPCLK1Freq>
 800c298:	61b8      	str	r0, [r7, #24]
        break;
 800c29a:	e013      	b.n	800c2c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c29c:	f7fe fe50 	bl	800af40 <HAL_RCC_GetPCLK2Freq>
 800c2a0:	61b8      	str	r0, [r7, #24]
        break;
 800c2a2:	e00f      	b.n	800c2c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2a4:	4b1d      	ldr	r3, [pc, #116]	; (800c31c <UART_SetConfig+0x4c4>)
 800c2a6:	61bb      	str	r3, [r7, #24]
        break;
 800c2a8:	e00c      	b.n	800c2c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2aa:	f7fe fd23 	bl	800acf4 <HAL_RCC_GetSysClockFreq>
 800c2ae:	61b8      	str	r0, [r7, #24]
        break;
 800c2b0:	e008      	b.n	800c2c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2b6:	61bb      	str	r3, [r7, #24]
        break;
 800c2b8:	e004      	b.n	800c2c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	77bb      	strb	r3, [r7, #30]
        break;
 800c2c2:	bf00      	nop
    }

    if (pclk != 0U)
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d018      	beq.n	800c2fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	085a      	lsrs	r2, r3, #1
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	441a      	add	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2b0f      	cmp	r3, #15
 800c2e2:	d909      	bls.n	800c2f8 <UART_SetConfig+0x4a0>
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ea:	d205      	bcs.n	800c2f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	60da      	str	r2, [r3, #12]
 800c2f6:	e001      	b.n	800c2fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c308:	7fbb      	ldrb	r3, [r7, #30]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	40007c00 	.word	0x40007c00
 800c318:	40023800 	.word	0x40023800
 800c31c:	00f42400 	.word	0x00f42400

0800c320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32c:	f003 0301 	and.w	r3, r3, #1
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00a      	beq.n	800c34a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34e:	f003 0302 	and.w	r3, r3, #2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00a      	beq.n	800c36c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	430a      	orrs	r2, r1
 800c36a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00a      	beq.n	800c38e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	430a      	orrs	r2, r1
 800c38c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c392:	f003 0308 	and.w	r3, r3, #8
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00a      	beq.n	800c3b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	430a      	orrs	r2, r1
 800c3ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b4:	f003 0310 	and.w	r3, r3, #16
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00a      	beq.n	800c3d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d6:	f003 0320 	and.w	r3, r3, #32
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00a      	beq.n	800c3f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01a      	beq.n	800c436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c41e:	d10a      	bne.n	800c436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	430a      	orrs	r2, r1
 800c434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00a      	beq.n	800c458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	430a      	orrs	r2, r1
 800c456:	605a      	str	r2, [r3, #4]
  }
}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af02      	add	r7, sp, #8
 800c46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c474:	f7fc fe84 	bl	8009180 <HAL_GetTick>
 800c478:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0308 	and.w	r3, r3, #8
 800c484:	2b08      	cmp	r3, #8
 800c486:	d10e      	bne.n	800c4a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f817 	bl	800c4ca <UART_WaitOnFlagUntilTimeout>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	e00d      	b.n	800c4c2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2220      	movs	r2, #32
 800c4aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2220      	movs	r2, #32
 800c4b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b09c      	sub	sp, #112	; 0x70
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	60f8      	str	r0, [r7, #12]
 800c4d2:	60b9      	str	r1, [r7, #8]
 800c4d4:	603b      	str	r3, [r7, #0]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4da:	e0a5      	b.n	800c628 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e2:	f000 80a1 	beq.w	800c628 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4e6:	f7fc fe4b 	bl	8009180 <HAL_GetTick>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d302      	bcc.n	800c4fc <UART_WaitOnFlagUntilTimeout+0x32>
 800c4f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d13e      	bne.n	800c57a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c50c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c510:	667b      	str	r3, [r7, #100]	; 0x64
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c51a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c51c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c520:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c522:	e841 2300 	strex	r3, r2, [r1]
 800c526:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1e6      	bne.n	800c4fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3308      	adds	r3, #8
 800c534:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	f023 0301 	bic.w	r3, r3, #1
 800c544:	663b      	str	r3, [r7, #96]	; 0x60
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3308      	adds	r3, #8
 800c54c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c54e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c550:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c556:	e841 2300 	strex	r3, r2, [r1]
 800c55a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1e5      	bne.n	800c52e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2220      	movs	r2, #32
 800c566:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2220      	movs	r2, #32
 800c56c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	e067      	b.n	800c64a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	2b00      	cmp	r3, #0
 800c586:	d04f      	beq.n	800c628 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c596:	d147      	bne.n	800c628 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5aa:	e853 3f00 	ldrex	r3, [r3]
 800c5ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c5b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5c8:	e841 2300 	strex	r3, r2, [r1]
 800c5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1e6      	bne.n	800c5a2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3308      	adds	r3, #8
 800c5da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	e853 3f00 	ldrex	r3, [r3]
 800c5e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	f023 0301 	bic.w	r3, r3, #1
 800c5ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5f4:	623a      	str	r2, [r7, #32]
 800c5f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	69f9      	ldr	r1, [r7, #28]
 800c5fa:	6a3a      	ldr	r2, [r7, #32]
 800c5fc:	e841 2300 	strex	r3, r2, [r1]
 800c600:	61bb      	str	r3, [r7, #24]
   return(result);
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1e5      	bne.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2220      	movs	r2, #32
 800c60c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2220      	movs	r2, #32
 800c612:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2220      	movs	r2, #32
 800c618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c624:	2303      	movs	r3, #3
 800c626:	e010      	b.n	800c64a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	69da      	ldr	r2, [r3, #28]
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	4013      	ands	r3, r2
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	429a      	cmp	r2, r3
 800c636:	bf0c      	ite	eq
 800c638:	2301      	moveq	r3, #1
 800c63a:	2300      	movne	r3, #0
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	461a      	mov	r2, r3
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	429a      	cmp	r2, r3
 800c644:	f43f af4a 	beq.w	800c4dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3770      	adds	r7, #112	; 0x70
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c654:	b480      	push	{r7}
 800c656:	b097      	sub	sp, #92	; 0x5c
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	4613      	mov	r3, r2
 800c660:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	88fa      	ldrh	r2, [r7, #6]
 800c66c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	88fa      	ldrh	r2, [r7, #6]
 800c674:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c686:	d10e      	bne.n	800c6a6 <UART_Start_Receive_IT+0x52>
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d105      	bne.n	800c69c <UART_Start_Receive_IT+0x48>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c69a:	e02d      	b.n	800c6f8 <UART_Start_Receive_IT+0xa4>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	22ff      	movs	r2, #255	; 0xff
 800c6a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6a4:	e028      	b.n	800c6f8 <UART_Start_Receive_IT+0xa4>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10d      	bne.n	800c6ca <UART_Start_Receive_IT+0x76>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d104      	bne.n	800c6c0 <UART_Start_Receive_IT+0x6c>
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	22ff      	movs	r2, #255	; 0xff
 800c6ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6be:	e01b      	b.n	800c6f8 <UART_Start_Receive_IT+0xa4>
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	227f      	movs	r2, #127	; 0x7f
 800c6c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6c8:	e016      	b.n	800c6f8 <UART_Start_Receive_IT+0xa4>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6d2:	d10d      	bne.n	800c6f0 <UART_Start_Receive_IT+0x9c>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d104      	bne.n	800c6e6 <UART_Start_Receive_IT+0x92>
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	227f      	movs	r2, #127	; 0x7f
 800c6e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6e4:	e008      	b.n	800c6f8 <UART_Start_Receive_IT+0xa4>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	223f      	movs	r2, #63	; 0x3f
 800c6ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6ee:	e003      	b.n	800c6f8 <UART_Start_Receive_IT+0xa4>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2222      	movs	r2, #34	; 0x22
 800c704:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3308      	adds	r3, #8
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c710:	e853 3f00 	ldrex	r3, [r3]
 800c714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c718:	f043 0301 	orr.w	r3, r3, #1
 800c71c:	657b      	str	r3, [r7, #84]	; 0x54
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3308      	adds	r3, #8
 800c724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c726:	64ba      	str	r2, [r7, #72]	; 0x48
 800c728:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c72c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c72e:	e841 2300 	strex	r3, r2, [r1]
 800c732:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1e5      	bne.n	800c706 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c742:	d107      	bne.n	800c754 <UART_Start_Receive_IT+0x100>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d103      	bne.n	800c754 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4a24      	ldr	r2, [pc, #144]	; (800c7e0 <UART_Start_Receive_IT+0x18c>)
 800c750:	665a      	str	r2, [r3, #100]	; 0x64
 800c752:	e002      	b.n	800c75a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4a23      	ldr	r2, [pc, #140]	; (800c7e4 <UART_Start_Receive_IT+0x190>)
 800c758:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d019      	beq.n	800c79e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	e853 3f00 	ldrex	r3, [r3]
 800c776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c77e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	461a      	mov	r2, r3
 800c786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c788:	637b      	str	r3, [r7, #52]	; 0x34
 800c78a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c78e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c790:	e841 2300 	strex	r3, r2, [r1]
 800c794:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1e6      	bne.n	800c76a <UART_Start_Receive_IT+0x116>
 800c79c:	e018      	b.n	800c7d0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	e853 3f00 	ldrex	r3, [r3]
 800c7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	f043 0320 	orr.w	r3, r3, #32
 800c7b2:	653b      	str	r3, [r7, #80]	; 0x50
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7bc:	623b      	str	r3, [r7, #32]
 800c7be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c0:	69f9      	ldr	r1, [r7, #28]
 800c7c2:	6a3a      	ldr	r2, [r7, #32]
 800c7c4:	e841 2300 	strex	r3, r2, [r1]
 800c7c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e6      	bne.n	800c79e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	375c      	adds	r7, #92	; 0x5c
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	0800cc01 	.word	0x0800cc01
 800c7e4:	0800caa5 	.word	0x0800caa5

0800c7e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b095      	sub	sp, #84	; 0x54
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f8:	e853 3f00 	ldrex	r3, [r3]
 800c7fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c804:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	461a      	mov	r2, r3
 800c80c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c80e:	643b      	str	r3, [r7, #64]	; 0x40
 800c810:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c816:	e841 2300 	strex	r3, r2, [r1]
 800c81a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1e6      	bne.n	800c7f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	3308      	adds	r3, #8
 800c828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82a:	6a3b      	ldr	r3, [r7, #32]
 800c82c:	e853 3f00 	ldrex	r3, [r3]
 800c830:	61fb      	str	r3, [r7, #28]
   return(result);
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	f023 0301 	bic.w	r3, r3, #1
 800c838:	64bb      	str	r3, [r7, #72]	; 0x48
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	3308      	adds	r3, #8
 800c840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c842:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c84a:	e841 2300 	strex	r3, r2, [r1]
 800c84e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1e5      	bne.n	800c822 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d118      	bne.n	800c890 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	e853 3f00 	ldrex	r3, [r3]
 800c86a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f023 0310 	bic.w	r3, r3, #16
 800c872:	647b      	str	r3, [r7, #68]	; 0x44
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	461a      	mov	r2, r3
 800c87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c87c:	61bb      	str	r3, [r7, #24]
 800c87e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c880:	6979      	ldr	r1, [r7, #20]
 800c882:	69ba      	ldr	r2, [r7, #24]
 800c884:	e841 2300 	strex	r3, r2, [r1]
 800c888:	613b      	str	r3, [r7, #16]
   return(result);
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e6      	bne.n	800c85e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2220      	movs	r2, #32
 800c894:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c8a2:	bf00      	nop
 800c8a4:	3754      	adds	r7, #84	; 0x54
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f7fc f89b 	bl	8008a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8d2:	bf00      	nop
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b08f      	sub	sp, #60	; 0x3c
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8e6:	2b21      	cmp	r3, #33	; 0x21
 800c8e8:	d14c      	bne.n	800c984 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d132      	bne.n	800c95c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	e853 3f00 	ldrex	r3, [r3]
 800c902:	61fb      	str	r3, [r7, #28]
   return(result);
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c90a:	637b      	str	r3, [r7, #52]	; 0x34
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	461a      	mov	r2, r3
 800c912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c914:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c916:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c91a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c91c:	e841 2300 	strex	r3, r2, [r1]
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1e6      	bne.n	800c8f6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	e853 3f00 	ldrex	r3, [r3]
 800c934:	60bb      	str	r3, [r7, #8]
   return(result);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c93c:	633b      	str	r3, [r7, #48]	; 0x30
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	61bb      	str	r3, [r7, #24]
 800c948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94a:	6979      	ldr	r1, [r7, #20]
 800c94c:	69ba      	ldr	r2, [r7, #24]
 800c94e:	e841 2300 	strex	r3, r2, [r1]
 800c952:	613b      	str	r3, [r7, #16]
   return(result);
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d1e6      	bne.n	800c928 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c95a:	e013      	b.n	800c984 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c96c:	1c5a      	adds	r2, r3, #1
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c978:	b29b      	uxth	r3, r3
 800c97a:	3b01      	subs	r3, #1
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c984:	bf00      	nop
 800c986:	373c      	adds	r7, #60	; 0x3c
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c990:	b480      	push	{r7}
 800c992:	b091      	sub	sp, #68	; 0x44
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c99c:	2b21      	cmp	r3, #33	; 0x21
 800c99e:	d151      	bne.n	800ca44 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d132      	bne.n	800ca12 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b4:	e853 3f00 	ldrex	r3, [r3]
 800c9b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ca:	633b      	str	r3, [r7, #48]	; 0x30
 800c9cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9d2:	e841 2300 	strex	r3, r2, [r1]
 800c9d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1e6      	bne.n	800c9ac <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	e853 3f00 	ldrex	r3, [r3]
 800c9ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fc:	61fb      	str	r3, [r7, #28]
 800c9fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca00:	69b9      	ldr	r1, [r7, #24]
 800ca02:	69fa      	ldr	r2, [r7, #28]
 800ca04:	e841 2300 	strex	r3, r2, [r1]
 800ca08:	617b      	str	r3, [r7, #20]
   return(result);
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1e6      	bne.n	800c9de <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ca10:	e018      	b.n	800ca44 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ca18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca26:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca2c:	1c9a      	adds	r2, r3, #2
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ca44:	bf00      	nop
 800ca46:	3744      	adds	r7, #68	; 0x44
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b088      	sub	sp, #32
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	e853 3f00 	ldrex	r3, [r3]
 800ca64:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca6c:	61fb      	str	r3, [r7, #28]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	461a      	mov	r2, r3
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	61bb      	str	r3, [r7, #24]
 800ca78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7a:	6979      	ldr	r1, [r7, #20]
 800ca7c:	69ba      	ldr	r2, [r7, #24]
 800ca7e:	e841 2300 	strex	r3, r2, [r1]
 800ca82:	613b      	str	r3, [r7, #16]
   return(result);
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1e6      	bne.n	800ca58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2220      	movs	r2, #32
 800ca8e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7fb ff8e 	bl	80089b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca9c:	bf00      	nop
 800ca9e:	3720      	adds	r7, #32
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b096      	sub	sp, #88	; 0x58
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cab2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caba:	2b22      	cmp	r3, #34	; 0x22
 800cabc:	f040 8094 	bne.w	800cbe8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800caca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cace:	b2d9      	uxtb	r1, r3
 800cad0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cad4:	b2da      	uxtb	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cada:	400a      	ands	r2, r1
 800cadc:	b2d2      	uxtb	r2, r2
 800cade:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	3b01      	subs	r3, #1
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d177      	bne.n	800cbf8 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	e853 3f00 	ldrex	r3, [r3]
 800cb14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb1c:	653b      	str	r3, [r7, #80]	; 0x50
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	461a      	mov	r2, r3
 800cb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb26:	647b      	str	r3, [r7, #68]	; 0x44
 800cb28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb2e:	e841 2300 	strex	r3, r2, [r1]
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1e6      	bne.n	800cb08 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	3308      	adds	r3, #8
 800cb40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	e853 3f00 	ldrex	r3, [r3]
 800cb48:	623b      	str	r3, [r7, #32]
   return(result);
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	f023 0301 	bic.w	r3, r3, #1
 800cb50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	3308      	adds	r3, #8
 800cb58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb5a:	633a      	str	r2, [r7, #48]	; 0x30
 800cb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb62:	e841 2300 	strex	r3, r2, [r1]
 800cb66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1e5      	bne.n	800cb3a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d12e      	bne.n	800cbe0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	e853 3f00 	ldrex	r3, [r3]
 800cb94:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f023 0310 	bic.w	r3, r3, #16
 800cb9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	461a      	mov	r2, r3
 800cba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cba6:	61fb      	str	r3, [r7, #28]
 800cba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbaa:	69b9      	ldr	r1, [r7, #24]
 800cbac:	69fa      	ldr	r2, [r7, #28]
 800cbae:	e841 2300 	strex	r3, r2, [r1]
 800cbb2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1e6      	bne.n	800cb88 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	69db      	ldr	r3, [r3, #28]
 800cbc0:	f003 0310 	and.w	r3, r3, #16
 800cbc4:	2b10      	cmp	r3, #16
 800cbc6:	d103      	bne.n	800cbd0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2210      	movs	r2, #16
 800cbce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff f931 	bl	800be40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbde:	e00b      	b.n	800cbf8 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7fb fefd 	bl	80089e0 <HAL_UART_RxCpltCallback>
}
 800cbe6:	e007      	b.n	800cbf8 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	699a      	ldr	r2, [r3, #24]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f042 0208 	orr.w	r2, r2, #8
 800cbf6:	619a      	str	r2, [r3, #24]
}
 800cbf8:	bf00      	nop
 800cbfa:	3758      	adds	r7, #88	; 0x58
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b096      	sub	sp, #88	; 0x58
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc0e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc16:	2b22      	cmp	r3, #34	; 0x22
 800cc18:	f040 8094 	bne.w	800cd44 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc2a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800cc2c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800cc30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cc34:	4013      	ands	r3, r2
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc40:	1c9a      	adds	r2, r3, #2
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d177      	bne.n	800cd54 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6c:	e853 3f00 	ldrex	r3, [r3]
 800cc70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc82:	643b      	str	r3, [r7, #64]	; 0x40
 800cc84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc8a:	e841 2300 	strex	r3, r2, [r1]
 800cc8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1e6      	bne.n	800cc64 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	e853 3f00 	ldrex	r3, [r3]
 800cca4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	f023 0301 	bic.w	r3, r3, #1
 800ccac:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3308      	adds	r3, #8
 800ccb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ccb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccbe:	e841 2300 	strex	r3, r2, [r1]
 800ccc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1e5      	bne.n	800cc96 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2220      	movs	r2, #32
 800ccce:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d12e      	bne.n	800cd3c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	e853 3f00 	ldrex	r3, [r3]
 800ccf0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	f023 0310 	bic.w	r3, r3, #16
 800ccf8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd02:	61bb      	str	r3, [r7, #24]
 800cd04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd06:	6979      	ldr	r1, [r7, #20]
 800cd08:	69ba      	ldr	r2, [r7, #24]
 800cd0a:	e841 2300 	strex	r3, r2, [r1]
 800cd0e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e6      	bne.n	800cce4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	69db      	ldr	r3, [r3, #28]
 800cd1c:	f003 0310 	and.w	r3, r3, #16
 800cd20:	2b10      	cmp	r3, #16
 800cd22:	d103      	bne.n	800cd2c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2210      	movs	r2, #16
 800cd2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cd32:	4619      	mov	r1, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7ff f883 	bl	800be40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd3a:	e00b      	b.n	800cd54 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7fb fe4f 	bl	80089e0 <HAL_UART_RxCpltCallback>
}
 800cd42:	e007      	b.n	800cd54 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	699a      	ldr	r2, [r3, #24]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f042 0208 	orr.w	r2, r2, #8
 800cd52:	619a      	str	r2, [r3, #24]
}
 800cd54:	bf00      	nop
 800cd56:	3758      	adds	r7, #88	; 0x58
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <__errno>:
 800cd5c:	4b01      	ldr	r3, [pc, #4]	; (800cd64 <__errno+0x8>)
 800cd5e:	6818      	ldr	r0, [r3, #0]
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	20000014 	.word	0x20000014

0800cd68 <__libc_init_array>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	4d0d      	ldr	r5, [pc, #52]	; (800cda0 <__libc_init_array+0x38>)
 800cd6c:	4c0d      	ldr	r4, [pc, #52]	; (800cda4 <__libc_init_array+0x3c>)
 800cd6e:	1b64      	subs	r4, r4, r5
 800cd70:	10a4      	asrs	r4, r4, #2
 800cd72:	2600      	movs	r6, #0
 800cd74:	42a6      	cmp	r6, r4
 800cd76:	d109      	bne.n	800cd8c <__libc_init_array+0x24>
 800cd78:	4d0b      	ldr	r5, [pc, #44]	; (800cda8 <__libc_init_array+0x40>)
 800cd7a:	4c0c      	ldr	r4, [pc, #48]	; (800cdac <__libc_init_array+0x44>)
 800cd7c:	f003 fd8c 	bl	8010898 <_init>
 800cd80:	1b64      	subs	r4, r4, r5
 800cd82:	10a4      	asrs	r4, r4, #2
 800cd84:	2600      	movs	r6, #0
 800cd86:	42a6      	cmp	r6, r4
 800cd88:	d105      	bne.n	800cd96 <__libc_init_array+0x2e>
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd90:	4798      	blx	r3
 800cd92:	3601      	adds	r6, #1
 800cd94:	e7ee      	b.n	800cd74 <__libc_init_array+0xc>
 800cd96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd9a:	4798      	blx	r3
 800cd9c:	3601      	adds	r6, #1
 800cd9e:	e7f2      	b.n	800cd86 <__libc_init_array+0x1e>
 800cda0:	08013520 	.word	0x08013520
 800cda4:	08013520 	.word	0x08013520
 800cda8:	08013520 	.word	0x08013520
 800cdac:	08013524 	.word	0x08013524

0800cdb0 <memset>:
 800cdb0:	4402      	add	r2, r0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d100      	bne.n	800cdba <memset+0xa>
 800cdb8:	4770      	bx	lr
 800cdba:	f803 1b01 	strb.w	r1, [r3], #1
 800cdbe:	e7f9      	b.n	800cdb4 <memset+0x4>

0800cdc0 <__cvt>:
 800cdc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc4:	ec55 4b10 	vmov	r4, r5, d0
 800cdc8:	2d00      	cmp	r5, #0
 800cdca:	460e      	mov	r6, r1
 800cdcc:	4619      	mov	r1, r3
 800cdce:	462b      	mov	r3, r5
 800cdd0:	bfbb      	ittet	lt
 800cdd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cdd6:	461d      	movlt	r5, r3
 800cdd8:	2300      	movge	r3, #0
 800cdda:	232d      	movlt	r3, #45	; 0x2d
 800cddc:	700b      	strb	r3, [r1, #0]
 800cdde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cde0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cde4:	4691      	mov	r9, r2
 800cde6:	f023 0820 	bic.w	r8, r3, #32
 800cdea:	bfbc      	itt	lt
 800cdec:	4622      	movlt	r2, r4
 800cdee:	4614      	movlt	r4, r2
 800cdf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cdf4:	d005      	beq.n	800ce02 <__cvt+0x42>
 800cdf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cdfa:	d100      	bne.n	800cdfe <__cvt+0x3e>
 800cdfc:	3601      	adds	r6, #1
 800cdfe:	2102      	movs	r1, #2
 800ce00:	e000      	b.n	800ce04 <__cvt+0x44>
 800ce02:	2103      	movs	r1, #3
 800ce04:	ab03      	add	r3, sp, #12
 800ce06:	9301      	str	r3, [sp, #4]
 800ce08:	ab02      	add	r3, sp, #8
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	ec45 4b10 	vmov	d0, r4, r5
 800ce10:	4653      	mov	r3, sl
 800ce12:	4632      	mov	r2, r6
 800ce14:	f000 fe50 	bl	800dab8 <_dtoa_r>
 800ce18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	d102      	bne.n	800ce26 <__cvt+0x66>
 800ce20:	f019 0f01 	tst.w	r9, #1
 800ce24:	d022      	beq.n	800ce6c <__cvt+0xac>
 800ce26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce2a:	eb07 0906 	add.w	r9, r7, r6
 800ce2e:	d110      	bne.n	800ce52 <__cvt+0x92>
 800ce30:	783b      	ldrb	r3, [r7, #0]
 800ce32:	2b30      	cmp	r3, #48	; 0x30
 800ce34:	d10a      	bne.n	800ce4c <__cvt+0x8c>
 800ce36:	2200      	movs	r2, #0
 800ce38:	2300      	movs	r3, #0
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f7f3 fe63 	bl	8000b08 <__aeabi_dcmpeq>
 800ce42:	b918      	cbnz	r0, 800ce4c <__cvt+0x8c>
 800ce44:	f1c6 0601 	rsb	r6, r6, #1
 800ce48:	f8ca 6000 	str.w	r6, [sl]
 800ce4c:	f8da 3000 	ldr.w	r3, [sl]
 800ce50:	4499      	add	r9, r3
 800ce52:	2200      	movs	r2, #0
 800ce54:	2300      	movs	r3, #0
 800ce56:	4620      	mov	r0, r4
 800ce58:	4629      	mov	r1, r5
 800ce5a:	f7f3 fe55 	bl	8000b08 <__aeabi_dcmpeq>
 800ce5e:	b108      	cbz	r0, 800ce64 <__cvt+0xa4>
 800ce60:	f8cd 900c 	str.w	r9, [sp, #12]
 800ce64:	2230      	movs	r2, #48	; 0x30
 800ce66:	9b03      	ldr	r3, [sp, #12]
 800ce68:	454b      	cmp	r3, r9
 800ce6a:	d307      	bcc.n	800ce7c <__cvt+0xbc>
 800ce6c:	9b03      	ldr	r3, [sp, #12]
 800ce6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce70:	1bdb      	subs	r3, r3, r7
 800ce72:	4638      	mov	r0, r7
 800ce74:	6013      	str	r3, [r2, #0]
 800ce76:	b004      	add	sp, #16
 800ce78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7c:	1c59      	adds	r1, r3, #1
 800ce7e:	9103      	str	r1, [sp, #12]
 800ce80:	701a      	strb	r2, [r3, #0]
 800ce82:	e7f0      	b.n	800ce66 <__cvt+0xa6>

0800ce84 <__exponent>:
 800ce84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce86:	4603      	mov	r3, r0
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	bfb8      	it	lt
 800ce8c:	4249      	neglt	r1, r1
 800ce8e:	f803 2b02 	strb.w	r2, [r3], #2
 800ce92:	bfb4      	ite	lt
 800ce94:	222d      	movlt	r2, #45	; 0x2d
 800ce96:	222b      	movge	r2, #43	; 0x2b
 800ce98:	2909      	cmp	r1, #9
 800ce9a:	7042      	strb	r2, [r0, #1]
 800ce9c:	dd2a      	ble.n	800cef4 <__exponent+0x70>
 800ce9e:	f10d 0407 	add.w	r4, sp, #7
 800cea2:	46a4      	mov	ip, r4
 800cea4:	270a      	movs	r7, #10
 800cea6:	46a6      	mov	lr, r4
 800cea8:	460a      	mov	r2, r1
 800ceaa:	fb91 f6f7 	sdiv	r6, r1, r7
 800ceae:	fb07 1516 	mls	r5, r7, r6, r1
 800ceb2:	3530      	adds	r5, #48	; 0x30
 800ceb4:	2a63      	cmp	r2, #99	; 0x63
 800ceb6:	f104 34ff 	add.w	r4, r4, #4294967295
 800ceba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cebe:	4631      	mov	r1, r6
 800cec0:	dcf1      	bgt.n	800cea6 <__exponent+0x22>
 800cec2:	3130      	adds	r1, #48	; 0x30
 800cec4:	f1ae 0502 	sub.w	r5, lr, #2
 800cec8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cecc:	1c44      	adds	r4, r0, #1
 800cece:	4629      	mov	r1, r5
 800ced0:	4561      	cmp	r1, ip
 800ced2:	d30a      	bcc.n	800ceea <__exponent+0x66>
 800ced4:	f10d 0209 	add.w	r2, sp, #9
 800ced8:	eba2 020e 	sub.w	r2, r2, lr
 800cedc:	4565      	cmp	r5, ip
 800cede:	bf88      	it	hi
 800cee0:	2200      	movhi	r2, #0
 800cee2:	4413      	add	r3, r2
 800cee4:	1a18      	subs	r0, r3, r0
 800cee6:	b003      	add	sp, #12
 800cee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cef2:	e7ed      	b.n	800ced0 <__exponent+0x4c>
 800cef4:	2330      	movs	r3, #48	; 0x30
 800cef6:	3130      	adds	r1, #48	; 0x30
 800cef8:	7083      	strb	r3, [r0, #2]
 800cefa:	70c1      	strb	r1, [r0, #3]
 800cefc:	1d03      	adds	r3, r0, #4
 800cefe:	e7f1      	b.n	800cee4 <__exponent+0x60>

0800cf00 <_printf_float>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	ed2d 8b02 	vpush	{d8}
 800cf08:	b08d      	sub	sp, #52	; 0x34
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf10:	4616      	mov	r6, r2
 800cf12:	461f      	mov	r7, r3
 800cf14:	4605      	mov	r5, r0
 800cf16:	f001 fda3 	bl	800ea60 <_localeconv_r>
 800cf1a:	f8d0 a000 	ldr.w	sl, [r0]
 800cf1e:	4650      	mov	r0, sl
 800cf20:	f7f3 f976 	bl	8000210 <strlen>
 800cf24:	2300      	movs	r3, #0
 800cf26:	930a      	str	r3, [sp, #40]	; 0x28
 800cf28:	6823      	ldr	r3, [r4, #0]
 800cf2a:	9305      	str	r3, [sp, #20]
 800cf2c:	f8d8 3000 	ldr.w	r3, [r8]
 800cf30:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cf34:	3307      	adds	r3, #7
 800cf36:	f023 0307 	bic.w	r3, r3, #7
 800cf3a:	f103 0208 	add.w	r2, r3, #8
 800cf3e:	f8c8 2000 	str.w	r2, [r8]
 800cf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cf4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cf4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cf52:	9307      	str	r3, [sp, #28]
 800cf54:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf58:	ee08 0a10 	vmov	s16, r0
 800cf5c:	4b9f      	ldr	r3, [pc, #636]	; (800d1dc <_printf_float+0x2dc>)
 800cf5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf62:	f04f 32ff 	mov.w	r2, #4294967295
 800cf66:	f7f3 fe01 	bl	8000b6c <__aeabi_dcmpun>
 800cf6a:	bb88      	cbnz	r0, 800cfd0 <_printf_float+0xd0>
 800cf6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf70:	4b9a      	ldr	r3, [pc, #616]	; (800d1dc <_printf_float+0x2dc>)
 800cf72:	f04f 32ff 	mov.w	r2, #4294967295
 800cf76:	f7f3 fddb 	bl	8000b30 <__aeabi_dcmple>
 800cf7a:	bb48      	cbnz	r0, 800cfd0 <_printf_float+0xd0>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2300      	movs	r3, #0
 800cf80:	4640      	mov	r0, r8
 800cf82:	4649      	mov	r1, r9
 800cf84:	f7f3 fdca 	bl	8000b1c <__aeabi_dcmplt>
 800cf88:	b110      	cbz	r0, 800cf90 <_printf_float+0x90>
 800cf8a:	232d      	movs	r3, #45	; 0x2d
 800cf8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf90:	4b93      	ldr	r3, [pc, #588]	; (800d1e0 <_printf_float+0x2e0>)
 800cf92:	4894      	ldr	r0, [pc, #592]	; (800d1e4 <_printf_float+0x2e4>)
 800cf94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cf98:	bf94      	ite	ls
 800cf9a:	4698      	movls	r8, r3
 800cf9c:	4680      	movhi	r8, r0
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	6123      	str	r3, [r4, #16]
 800cfa2:	9b05      	ldr	r3, [sp, #20]
 800cfa4:	f023 0204 	bic.w	r2, r3, #4
 800cfa8:	6022      	str	r2, [r4, #0]
 800cfaa:	f04f 0900 	mov.w	r9, #0
 800cfae:	9700      	str	r7, [sp, #0]
 800cfb0:	4633      	mov	r3, r6
 800cfb2:	aa0b      	add	r2, sp, #44	; 0x2c
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f000 f9d8 	bl	800d36c <_printf_common>
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	f040 8090 	bne.w	800d0e2 <_printf_float+0x1e2>
 800cfc2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc6:	b00d      	add	sp, #52	; 0x34
 800cfc8:	ecbd 8b02 	vpop	{d8}
 800cfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd0:	4642      	mov	r2, r8
 800cfd2:	464b      	mov	r3, r9
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	4649      	mov	r1, r9
 800cfd8:	f7f3 fdc8 	bl	8000b6c <__aeabi_dcmpun>
 800cfdc:	b140      	cbz	r0, 800cff0 <_printf_float+0xf0>
 800cfde:	464b      	mov	r3, r9
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	bfbc      	itt	lt
 800cfe4:	232d      	movlt	r3, #45	; 0x2d
 800cfe6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cfea:	487f      	ldr	r0, [pc, #508]	; (800d1e8 <_printf_float+0x2e8>)
 800cfec:	4b7f      	ldr	r3, [pc, #508]	; (800d1ec <_printf_float+0x2ec>)
 800cfee:	e7d1      	b.n	800cf94 <_printf_float+0x94>
 800cff0:	6863      	ldr	r3, [r4, #4]
 800cff2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cff6:	9206      	str	r2, [sp, #24]
 800cff8:	1c5a      	adds	r2, r3, #1
 800cffa:	d13f      	bne.n	800d07c <_printf_float+0x17c>
 800cffc:	2306      	movs	r3, #6
 800cffe:	6063      	str	r3, [r4, #4]
 800d000:	9b05      	ldr	r3, [sp, #20]
 800d002:	6861      	ldr	r1, [r4, #4]
 800d004:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d008:	2300      	movs	r3, #0
 800d00a:	9303      	str	r3, [sp, #12]
 800d00c:	ab0a      	add	r3, sp, #40	; 0x28
 800d00e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d012:	ab09      	add	r3, sp, #36	; 0x24
 800d014:	ec49 8b10 	vmov	d0, r8, r9
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	6022      	str	r2, [r4, #0]
 800d01c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d020:	4628      	mov	r0, r5
 800d022:	f7ff fecd 	bl	800cdc0 <__cvt>
 800d026:	9b06      	ldr	r3, [sp, #24]
 800d028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d02a:	2b47      	cmp	r3, #71	; 0x47
 800d02c:	4680      	mov	r8, r0
 800d02e:	d108      	bne.n	800d042 <_printf_float+0x142>
 800d030:	1cc8      	adds	r0, r1, #3
 800d032:	db02      	blt.n	800d03a <_printf_float+0x13a>
 800d034:	6863      	ldr	r3, [r4, #4]
 800d036:	4299      	cmp	r1, r3
 800d038:	dd41      	ble.n	800d0be <_printf_float+0x1be>
 800d03a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d03e:	fa5f fb8b 	uxtb.w	fp, fp
 800d042:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d046:	d820      	bhi.n	800d08a <_printf_float+0x18a>
 800d048:	3901      	subs	r1, #1
 800d04a:	465a      	mov	r2, fp
 800d04c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d050:	9109      	str	r1, [sp, #36]	; 0x24
 800d052:	f7ff ff17 	bl	800ce84 <__exponent>
 800d056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d058:	1813      	adds	r3, r2, r0
 800d05a:	2a01      	cmp	r2, #1
 800d05c:	4681      	mov	r9, r0
 800d05e:	6123      	str	r3, [r4, #16]
 800d060:	dc02      	bgt.n	800d068 <_printf_float+0x168>
 800d062:	6822      	ldr	r2, [r4, #0]
 800d064:	07d2      	lsls	r2, r2, #31
 800d066:	d501      	bpl.n	800d06c <_printf_float+0x16c>
 800d068:	3301      	adds	r3, #1
 800d06a:	6123      	str	r3, [r4, #16]
 800d06c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d070:	2b00      	cmp	r3, #0
 800d072:	d09c      	beq.n	800cfae <_printf_float+0xae>
 800d074:	232d      	movs	r3, #45	; 0x2d
 800d076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d07a:	e798      	b.n	800cfae <_printf_float+0xae>
 800d07c:	9a06      	ldr	r2, [sp, #24]
 800d07e:	2a47      	cmp	r2, #71	; 0x47
 800d080:	d1be      	bne.n	800d000 <_printf_float+0x100>
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1bc      	bne.n	800d000 <_printf_float+0x100>
 800d086:	2301      	movs	r3, #1
 800d088:	e7b9      	b.n	800cffe <_printf_float+0xfe>
 800d08a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d08e:	d118      	bne.n	800d0c2 <_printf_float+0x1c2>
 800d090:	2900      	cmp	r1, #0
 800d092:	6863      	ldr	r3, [r4, #4]
 800d094:	dd0b      	ble.n	800d0ae <_printf_float+0x1ae>
 800d096:	6121      	str	r1, [r4, #16]
 800d098:	b913      	cbnz	r3, 800d0a0 <_printf_float+0x1a0>
 800d09a:	6822      	ldr	r2, [r4, #0]
 800d09c:	07d0      	lsls	r0, r2, #31
 800d09e:	d502      	bpl.n	800d0a6 <_printf_float+0x1a6>
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	440b      	add	r3, r1
 800d0a4:	6123      	str	r3, [r4, #16]
 800d0a6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d0a8:	f04f 0900 	mov.w	r9, #0
 800d0ac:	e7de      	b.n	800d06c <_printf_float+0x16c>
 800d0ae:	b913      	cbnz	r3, 800d0b6 <_printf_float+0x1b6>
 800d0b0:	6822      	ldr	r2, [r4, #0]
 800d0b2:	07d2      	lsls	r2, r2, #31
 800d0b4:	d501      	bpl.n	800d0ba <_printf_float+0x1ba>
 800d0b6:	3302      	adds	r3, #2
 800d0b8:	e7f4      	b.n	800d0a4 <_printf_float+0x1a4>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e7f2      	b.n	800d0a4 <_printf_float+0x1a4>
 800d0be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0c4:	4299      	cmp	r1, r3
 800d0c6:	db05      	blt.n	800d0d4 <_printf_float+0x1d4>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	6121      	str	r1, [r4, #16]
 800d0cc:	07d8      	lsls	r0, r3, #31
 800d0ce:	d5ea      	bpl.n	800d0a6 <_printf_float+0x1a6>
 800d0d0:	1c4b      	adds	r3, r1, #1
 800d0d2:	e7e7      	b.n	800d0a4 <_printf_float+0x1a4>
 800d0d4:	2900      	cmp	r1, #0
 800d0d6:	bfd4      	ite	le
 800d0d8:	f1c1 0202 	rsble	r2, r1, #2
 800d0dc:	2201      	movgt	r2, #1
 800d0de:	4413      	add	r3, r2
 800d0e0:	e7e0      	b.n	800d0a4 <_printf_float+0x1a4>
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	055a      	lsls	r2, r3, #21
 800d0e6:	d407      	bmi.n	800d0f8 <_printf_float+0x1f8>
 800d0e8:	6923      	ldr	r3, [r4, #16]
 800d0ea:	4642      	mov	r2, r8
 800d0ec:	4631      	mov	r1, r6
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	47b8      	blx	r7
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d12c      	bne.n	800d150 <_printf_float+0x250>
 800d0f6:	e764      	b.n	800cfc2 <_printf_float+0xc2>
 800d0f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d0fc:	f240 80e0 	bls.w	800d2c0 <_printf_float+0x3c0>
 800d100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d104:	2200      	movs	r2, #0
 800d106:	2300      	movs	r3, #0
 800d108:	f7f3 fcfe 	bl	8000b08 <__aeabi_dcmpeq>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d034      	beq.n	800d17a <_printf_float+0x27a>
 800d110:	4a37      	ldr	r2, [pc, #220]	; (800d1f0 <_printf_float+0x2f0>)
 800d112:	2301      	movs	r3, #1
 800d114:	4631      	mov	r1, r6
 800d116:	4628      	mov	r0, r5
 800d118:	47b8      	blx	r7
 800d11a:	3001      	adds	r0, #1
 800d11c:	f43f af51 	beq.w	800cfc2 <_printf_float+0xc2>
 800d120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d124:	429a      	cmp	r2, r3
 800d126:	db02      	blt.n	800d12e <_printf_float+0x22e>
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	07d8      	lsls	r0, r3, #31
 800d12c:	d510      	bpl.n	800d150 <_printf_float+0x250>
 800d12e:	ee18 3a10 	vmov	r3, s16
 800d132:	4652      	mov	r2, sl
 800d134:	4631      	mov	r1, r6
 800d136:	4628      	mov	r0, r5
 800d138:	47b8      	blx	r7
 800d13a:	3001      	adds	r0, #1
 800d13c:	f43f af41 	beq.w	800cfc2 <_printf_float+0xc2>
 800d140:	f04f 0800 	mov.w	r8, #0
 800d144:	f104 091a 	add.w	r9, r4, #26
 800d148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d14a:	3b01      	subs	r3, #1
 800d14c:	4543      	cmp	r3, r8
 800d14e:	dc09      	bgt.n	800d164 <_printf_float+0x264>
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	079b      	lsls	r3, r3, #30
 800d154:	f100 8105 	bmi.w	800d362 <_printf_float+0x462>
 800d158:	68e0      	ldr	r0, [r4, #12]
 800d15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d15c:	4298      	cmp	r0, r3
 800d15e:	bfb8      	it	lt
 800d160:	4618      	movlt	r0, r3
 800d162:	e730      	b.n	800cfc6 <_printf_float+0xc6>
 800d164:	2301      	movs	r3, #1
 800d166:	464a      	mov	r2, r9
 800d168:	4631      	mov	r1, r6
 800d16a:	4628      	mov	r0, r5
 800d16c:	47b8      	blx	r7
 800d16e:	3001      	adds	r0, #1
 800d170:	f43f af27 	beq.w	800cfc2 <_printf_float+0xc2>
 800d174:	f108 0801 	add.w	r8, r8, #1
 800d178:	e7e6      	b.n	800d148 <_printf_float+0x248>
 800d17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dc39      	bgt.n	800d1f4 <_printf_float+0x2f4>
 800d180:	4a1b      	ldr	r2, [pc, #108]	; (800d1f0 <_printf_float+0x2f0>)
 800d182:	2301      	movs	r3, #1
 800d184:	4631      	mov	r1, r6
 800d186:	4628      	mov	r0, r5
 800d188:	47b8      	blx	r7
 800d18a:	3001      	adds	r0, #1
 800d18c:	f43f af19 	beq.w	800cfc2 <_printf_float+0xc2>
 800d190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d194:	4313      	orrs	r3, r2
 800d196:	d102      	bne.n	800d19e <_printf_float+0x29e>
 800d198:	6823      	ldr	r3, [r4, #0]
 800d19a:	07d9      	lsls	r1, r3, #31
 800d19c:	d5d8      	bpl.n	800d150 <_printf_float+0x250>
 800d19e:	ee18 3a10 	vmov	r3, s16
 800d1a2:	4652      	mov	r2, sl
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	47b8      	blx	r7
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	f43f af09 	beq.w	800cfc2 <_printf_float+0xc2>
 800d1b0:	f04f 0900 	mov.w	r9, #0
 800d1b4:	f104 0a1a 	add.w	sl, r4, #26
 800d1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ba:	425b      	negs	r3, r3
 800d1bc:	454b      	cmp	r3, r9
 800d1be:	dc01      	bgt.n	800d1c4 <_printf_float+0x2c4>
 800d1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c2:	e792      	b.n	800d0ea <_printf_float+0x1ea>
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	4652      	mov	r2, sl
 800d1c8:	4631      	mov	r1, r6
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	47b8      	blx	r7
 800d1ce:	3001      	adds	r0, #1
 800d1d0:	f43f aef7 	beq.w	800cfc2 <_printf_float+0xc2>
 800d1d4:	f109 0901 	add.w	r9, r9, #1
 800d1d8:	e7ee      	b.n	800d1b8 <_printf_float+0x2b8>
 800d1da:	bf00      	nop
 800d1dc:	7fefffff 	.word	0x7fefffff
 800d1e0:	08013124 	.word	0x08013124
 800d1e4:	08013128 	.word	0x08013128
 800d1e8:	08013130 	.word	0x08013130
 800d1ec:	0801312c 	.word	0x0801312c
 800d1f0:	080133b9 	.word	0x080133b9
 800d1f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	bfa8      	it	ge
 800d1fc:	461a      	movge	r2, r3
 800d1fe:	2a00      	cmp	r2, #0
 800d200:	4691      	mov	r9, r2
 800d202:	dc37      	bgt.n	800d274 <_printf_float+0x374>
 800d204:	f04f 0b00 	mov.w	fp, #0
 800d208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d20c:	f104 021a 	add.w	r2, r4, #26
 800d210:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d212:	9305      	str	r3, [sp, #20]
 800d214:	eba3 0309 	sub.w	r3, r3, r9
 800d218:	455b      	cmp	r3, fp
 800d21a:	dc33      	bgt.n	800d284 <_printf_float+0x384>
 800d21c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d220:	429a      	cmp	r2, r3
 800d222:	db3b      	blt.n	800d29c <_printf_float+0x39c>
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	07da      	lsls	r2, r3, #31
 800d228:	d438      	bmi.n	800d29c <_printf_float+0x39c>
 800d22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d22c:	9a05      	ldr	r2, [sp, #20]
 800d22e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d230:	1a9a      	subs	r2, r3, r2
 800d232:	eba3 0901 	sub.w	r9, r3, r1
 800d236:	4591      	cmp	r9, r2
 800d238:	bfa8      	it	ge
 800d23a:	4691      	movge	r9, r2
 800d23c:	f1b9 0f00 	cmp.w	r9, #0
 800d240:	dc35      	bgt.n	800d2ae <_printf_float+0x3ae>
 800d242:	f04f 0800 	mov.w	r8, #0
 800d246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d24a:	f104 0a1a 	add.w	sl, r4, #26
 800d24e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d252:	1a9b      	subs	r3, r3, r2
 800d254:	eba3 0309 	sub.w	r3, r3, r9
 800d258:	4543      	cmp	r3, r8
 800d25a:	f77f af79 	ble.w	800d150 <_printf_float+0x250>
 800d25e:	2301      	movs	r3, #1
 800d260:	4652      	mov	r2, sl
 800d262:	4631      	mov	r1, r6
 800d264:	4628      	mov	r0, r5
 800d266:	47b8      	blx	r7
 800d268:	3001      	adds	r0, #1
 800d26a:	f43f aeaa 	beq.w	800cfc2 <_printf_float+0xc2>
 800d26e:	f108 0801 	add.w	r8, r8, #1
 800d272:	e7ec      	b.n	800d24e <_printf_float+0x34e>
 800d274:	4613      	mov	r3, r2
 800d276:	4631      	mov	r1, r6
 800d278:	4642      	mov	r2, r8
 800d27a:	4628      	mov	r0, r5
 800d27c:	47b8      	blx	r7
 800d27e:	3001      	adds	r0, #1
 800d280:	d1c0      	bne.n	800d204 <_printf_float+0x304>
 800d282:	e69e      	b.n	800cfc2 <_printf_float+0xc2>
 800d284:	2301      	movs	r3, #1
 800d286:	4631      	mov	r1, r6
 800d288:	4628      	mov	r0, r5
 800d28a:	9205      	str	r2, [sp, #20]
 800d28c:	47b8      	blx	r7
 800d28e:	3001      	adds	r0, #1
 800d290:	f43f ae97 	beq.w	800cfc2 <_printf_float+0xc2>
 800d294:	9a05      	ldr	r2, [sp, #20]
 800d296:	f10b 0b01 	add.w	fp, fp, #1
 800d29a:	e7b9      	b.n	800d210 <_printf_float+0x310>
 800d29c:	ee18 3a10 	vmov	r3, s16
 800d2a0:	4652      	mov	r2, sl
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	47b8      	blx	r7
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	d1be      	bne.n	800d22a <_printf_float+0x32a>
 800d2ac:	e689      	b.n	800cfc2 <_printf_float+0xc2>
 800d2ae:	9a05      	ldr	r2, [sp, #20]
 800d2b0:	464b      	mov	r3, r9
 800d2b2:	4442      	add	r2, r8
 800d2b4:	4631      	mov	r1, r6
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	47b8      	blx	r7
 800d2ba:	3001      	adds	r0, #1
 800d2bc:	d1c1      	bne.n	800d242 <_printf_float+0x342>
 800d2be:	e680      	b.n	800cfc2 <_printf_float+0xc2>
 800d2c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2c2:	2a01      	cmp	r2, #1
 800d2c4:	dc01      	bgt.n	800d2ca <_printf_float+0x3ca>
 800d2c6:	07db      	lsls	r3, r3, #31
 800d2c8:	d538      	bpl.n	800d33c <_printf_float+0x43c>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	4642      	mov	r2, r8
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	47b8      	blx	r7
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	f43f ae74 	beq.w	800cfc2 <_printf_float+0xc2>
 800d2da:	ee18 3a10 	vmov	r3, s16
 800d2de:	4652      	mov	r2, sl
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	47b8      	blx	r7
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	f43f ae6b 	beq.w	800cfc2 <_printf_float+0xc2>
 800d2ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f7f3 fc08 	bl	8000b08 <__aeabi_dcmpeq>
 800d2f8:	b9d8      	cbnz	r0, 800d332 <_printf_float+0x432>
 800d2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2fc:	f108 0201 	add.w	r2, r8, #1
 800d300:	3b01      	subs	r3, #1
 800d302:	4631      	mov	r1, r6
 800d304:	4628      	mov	r0, r5
 800d306:	47b8      	blx	r7
 800d308:	3001      	adds	r0, #1
 800d30a:	d10e      	bne.n	800d32a <_printf_float+0x42a>
 800d30c:	e659      	b.n	800cfc2 <_printf_float+0xc2>
 800d30e:	2301      	movs	r3, #1
 800d310:	4652      	mov	r2, sl
 800d312:	4631      	mov	r1, r6
 800d314:	4628      	mov	r0, r5
 800d316:	47b8      	blx	r7
 800d318:	3001      	adds	r0, #1
 800d31a:	f43f ae52 	beq.w	800cfc2 <_printf_float+0xc2>
 800d31e:	f108 0801 	add.w	r8, r8, #1
 800d322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d324:	3b01      	subs	r3, #1
 800d326:	4543      	cmp	r3, r8
 800d328:	dcf1      	bgt.n	800d30e <_printf_float+0x40e>
 800d32a:	464b      	mov	r3, r9
 800d32c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d330:	e6dc      	b.n	800d0ec <_printf_float+0x1ec>
 800d332:	f04f 0800 	mov.w	r8, #0
 800d336:	f104 0a1a 	add.w	sl, r4, #26
 800d33a:	e7f2      	b.n	800d322 <_printf_float+0x422>
 800d33c:	2301      	movs	r3, #1
 800d33e:	4642      	mov	r2, r8
 800d340:	e7df      	b.n	800d302 <_printf_float+0x402>
 800d342:	2301      	movs	r3, #1
 800d344:	464a      	mov	r2, r9
 800d346:	4631      	mov	r1, r6
 800d348:	4628      	mov	r0, r5
 800d34a:	47b8      	blx	r7
 800d34c:	3001      	adds	r0, #1
 800d34e:	f43f ae38 	beq.w	800cfc2 <_printf_float+0xc2>
 800d352:	f108 0801 	add.w	r8, r8, #1
 800d356:	68e3      	ldr	r3, [r4, #12]
 800d358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d35a:	1a5b      	subs	r3, r3, r1
 800d35c:	4543      	cmp	r3, r8
 800d35e:	dcf0      	bgt.n	800d342 <_printf_float+0x442>
 800d360:	e6fa      	b.n	800d158 <_printf_float+0x258>
 800d362:	f04f 0800 	mov.w	r8, #0
 800d366:	f104 0919 	add.w	r9, r4, #25
 800d36a:	e7f4      	b.n	800d356 <_printf_float+0x456>

0800d36c <_printf_common>:
 800d36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d370:	4616      	mov	r6, r2
 800d372:	4699      	mov	r9, r3
 800d374:	688a      	ldr	r2, [r1, #8]
 800d376:	690b      	ldr	r3, [r1, #16]
 800d378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d37c:	4293      	cmp	r3, r2
 800d37e:	bfb8      	it	lt
 800d380:	4613      	movlt	r3, r2
 800d382:	6033      	str	r3, [r6, #0]
 800d384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d388:	4607      	mov	r7, r0
 800d38a:	460c      	mov	r4, r1
 800d38c:	b10a      	cbz	r2, 800d392 <_printf_common+0x26>
 800d38e:	3301      	adds	r3, #1
 800d390:	6033      	str	r3, [r6, #0]
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	0699      	lsls	r1, r3, #26
 800d396:	bf42      	ittt	mi
 800d398:	6833      	ldrmi	r3, [r6, #0]
 800d39a:	3302      	addmi	r3, #2
 800d39c:	6033      	strmi	r3, [r6, #0]
 800d39e:	6825      	ldr	r5, [r4, #0]
 800d3a0:	f015 0506 	ands.w	r5, r5, #6
 800d3a4:	d106      	bne.n	800d3b4 <_printf_common+0x48>
 800d3a6:	f104 0a19 	add.w	sl, r4, #25
 800d3aa:	68e3      	ldr	r3, [r4, #12]
 800d3ac:	6832      	ldr	r2, [r6, #0]
 800d3ae:	1a9b      	subs	r3, r3, r2
 800d3b0:	42ab      	cmp	r3, r5
 800d3b2:	dc26      	bgt.n	800d402 <_printf_common+0x96>
 800d3b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3b8:	1e13      	subs	r3, r2, #0
 800d3ba:	6822      	ldr	r2, [r4, #0]
 800d3bc:	bf18      	it	ne
 800d3be:	2301      	movne	r3, #1
 800d3c0:	0692      	lsls	r2, r2, #26
 800d3c2:	d42b      	bmi.n	800d41c <_printf_common+0xb0>
 800d3c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3c8:	4649      	mov	r1, r9
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	47c0      	blx	r8
 800d3ce:	3001      	adds	r0, #1
 800d3d0:	d01e      	beq.n	800d410 <_printf_common+0xa4>
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	68e5      	ldr	r5, [r4, #12]
 800d3d6:	6832      	ldr	r2, [r6, #0]
 800d3d8:	f003 0306 	and.w	r3, r3, #6
 800d3dc:	2b04      	cmp	r3, #4
 800d3de:	bf08      	it	eq
 800d3e0:	1aad      	subeq	r5, r5, r2
 800d3e2:	68a3      	ldr	r3, [r4, #8]
 800d3e4:	6922      	ldr	r2, [r4, #16]
 800d3e6:	bf0c      	ite	eq
 800d3e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3ec:	2500      	movne	r5, #0
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	bfc4      	itt	gt
 800d3f2:	1a9b      	subgt	r3, r3, r2
 800d3f4:	18ed      	addgt	r5, r5, r3
 800d3f6:	2600      	movs	r6, #0
 800d3f8:	341a      	adds	r4, #26
 800d3fa:	42b5      	cmp	r5, r6
 800d3fc:	d11a      	bne.n	800d434 <_printf_common+0xc8>
 800d3fe:	2000      	movs	r0, #0
 800d400:	e008      	b.n	800d414 <_printf_common+0xa8>
 800d402:	2301      	movs	r3, #1
 800d404:	4652      	mov	r2, sl
 800d406:	4649      	mov	r1, r9
 800d408:	4638      	mov	r0, r7
 800d40a:	47c0      	blx	r8
 800d40c:	3001      	adds	r0, #1
 800d40e:	d103      	bne.n	800d418 <_printf_common+0xac>
 800d410:	f04f 30ff 	mov.w	r0, #4294967295
 800d414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d418:	3501      	adds	r5, #1
 800d41a:	e7c6      	b.n	800d3aa <_printf_common+0x3e>
 800d41c:	18e1      	adds	r1, r4, r3
 800d41e:	1c5a      	adds	r2, r3, #1
 800d420:	2030      	movs	r0, #48	; 0x30
 800d422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d426:	4422      	add	r2, r4
 800d428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d42c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d430:	3302      	adds	r3, #2
 800d432:	e7c7      	b.n	800d3c4 <_printf_common+0x58>
 800d434:	2301      	movs	r3, #1
 800d436:	4622      	mov	r2, r4
 800d438:	4649      	mov	r1, r9
 800d43a:	4638      	mov	r0, r7
 800d43c:	47c0      	blx	r8
 800d43e:	3001      	adds	r0, #1
 800d440:	d0e6      	beq.n	800d410 <_printf_common+0xa4>
 800d442:	3601      	adds	r6, #1
 800d444:	e7d9      	b.n	800d3fa <_printf_common+0x8e>
	...

0800d448 <_printf_i>:
 800d448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d44c:	7e0f      	ldrb	r7, [r1, #24]
 800d44e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d450:	2f78      	cmp	r7, #120	; 0x78
 800d452:	4691      	mov	r9, r2
 800d454:	4680      	mov	r8, r0
 800d456:	460c      	mov	r4, r1
 800d458:	469a      	mov	sl, r3
 800d45a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d45e:	d807      	bhi.n	800d470 <_printf_i+0x28>
 800d460:	2f62      	cmp	r7, #98	; 0x62
 800d462:	d80a      	bhi.n	800d47a <_printf_i+0x32>
 800d464:	2f00      	cmp	r7, #0
 800d466:	f000 80d8 	beq.w	800d61a <_printf_i+0x1d2>
 800d46a:	2f58      	cmp	r7, #88	; 0x58
 800d46c:	f000 80a3 	beq.w	800d5b6 <_printf_i+0x16e>
 800d470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d478:	e03a      	b.n	800d4f0 <_printf_i+0xa8>
 800d47a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d47e:	2b15      	cmp	r3, #21
 800d480:	d8f6      	bhi.n	800d470 <_printf_i+0x28>
 800d482:	a101      	add	r1, pc, #4	; (adr r1, 800d488 <_printf_i+0x40>)
 800d484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d488:	0800d4e1 	.word	0x0800d4e1
 800d48c:	0800d4f5 	.word	0x0800d4f5
 800d490:	0800d471 	.word	0x0800d471
 800d494:	0800d471 	.word	0x0800d471
 800d498:	0800d471 	.word	0x0800d471
 800d49c:	0800d471 	.word	0x0800d471
 800d4a0:	0800d4f5 	.word	0x0800d4f5
 800d4a4:	0800d471 	.word	0x0800d471
 800d4a8:	0800d471 	.word	0x0800d471
 800d4ac:	0800d471 	.word	0x0800d471
 800d4b0:	0800d471 	.word	0x0800d471
 800d4b4:	0800d601 	.word	0x0800d601
 800d4b8:	0800d525 	.word	0x0800d525
 800d4bc:	0800d5e3 	.word	0x0800d5e3
 800d4c0:	0800d471 	.word	0x0800d471
 800d4c4:	0800d471 	.word	0x0800d471
 800d4c8:	0800d623 	.word	0x0800d623
 800d4cc:	0800d471 	.word	0x0800d471
 800d4d0:	0800d525 	.word	0x0800d525
 800d4d4:	0800d471 	.word	0x0800d471
 800d4d8:	0800d471 	.word	0x0800d471
 800d4dc:	0800d5eb 	.word	0x0800d5eb
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	1d1a      	adds	r2, r3, #4
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	602a      	str	r2, [r5, #0]
 800d4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e0a3      	b.n	800d63c <_printf_i+0x1f4>
 800d4f4:	6820      	ldr	r0, [r4, #0]
 800d4f6:	6829      	ldr	r1, [r5, #0]
 800d4f8:	0606      	lsls	r6, r0, #24
 800d4fa:	f101 0304 	add.w	r3, r1, #4
 800d4fe:	d50a      	bpl.n	800d516 <_printf_i+0xce>
 800d500:	680e      	ldr	r6, [r1, #0]
 800d502:	602b      	str	r3, [r5, #0]
 800d504:	2e00      	cmp	r6, #0
 800d506:	da03      	bge.n	800d510 <_printf_i+0xc8>
 800d508:	232d      	movs	r3, #45	; 0x2d
 800d50a:	4276      	negs	r6, r6
 800d50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d510:	485e      	ldr	r0, [pc, #376]	; (800d68c <_printf_i+0x244>)
 800d512:	230a      	movs	r3, #10
 800d514:	e019      	b.n	800d54a <_printf_i+0x102>
 800d516:	680e      	ldr	r6, [r1, #0]
 800d518:	602b      	str	r3, [r5, #0]
 800d51a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d51e:	bf18      	it	ne
 800d520:	b236      	sxthne	r6, r6
 800d522:	e7ef      	b.n	800d504 <_printf_i+0xbc>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	6820      	ldr	r0, [r4, #0]
 800d528:	1d19      	adds	r1, r3, #4
 800d52a:	6029      	str	r1, [r5, #0]
 800d52c:	0601      	lsls	r1, r0, #24
 800d52e:	d501      	bpl.n	800d534 <_printf_i+0xec>
 800d530:	681e      	ldr	r6, [r3, #0]
 800d532:	e002      	b.n	800d53a <_printf_i+0xf2>
 800d534:	0646      	lsls	r6, r0, #25
 800d536:	d5fb      	bpl.n	800d530 <_printf_i+0xe8>
 800d538:	881e      	ldrh	r6, [r3, #0]
 800d53a:	4854      	ldr	r0, [pc, #336]	; (800d68c <_printf_i+0x244>)
 800d53c:	2f6f      	cmp	r7, #111	; 0x6f
 800d53e:	bf0c      	ite	eq
 800d540:	2308      	moveq	r3, #8
 800d542:	230a      	movne	r3, #10
 800d544:	2100      	movs	r1, #0
 800d546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d54a:	6865      	ldr	r5, [r4, #4]
 800d54c:	60a5      	str	r5, [r4, #8]
 800d54e:	2d00      	cmp	r5, #0
 800d550:	bfa2      	ittt	ge
 800d552:	6821      	ldrge	r1, [r4, #0]
 800d554:	f021 0104 	bicge.w	r1, r1, #4
 800d558:	6021      	strge	r1, [r4, #0]
 800d55a:	b90e      	cbnz	r6, 800d560 <_printf_i+0x118>
 800d55c:	2d00      	cmp	r5, #0
 800d55e:	d04d      	beq.n	800d5fc <_printf_i+0x1b4>
 800d560:	4615      	mov	r5, r2
 800d562:	fbb6 f1f3 	udiv	r1, r6, r3
 800d566:	fb03 6711 	mls	r7, r3, r1, r6
 800d56a:	5dc7      	ldrb	r7, [r0, r7]
 800d56c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d570:	4637      	mov	r7, r6
 800d572:	42bb      	cmp	r3, r7
 800d574:	460e      	mov	r6, r1
 800d576:	d9f4      	bls.n	800d562 <_printf_i+0x11a>
 800d578:	2b08      	cmp	r3, #8
 800d57a:	d10b      	bne.n	800d594 <_printf_i+0x14c>
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	07de      	lsls	r6, r3, #31
 800d580:	d508      	bpl.n	800d594 <_printf_i+0x14c>
 800d582:	6923      	ldr	r3, [r4, #16]
 800d584:	6861      	ldr	r1, [r4, #4]
 800d586:	4299      	cmp	r1, r3
 800d588:	bfde      	ittt	le
 800d58a:	2330      	movle	r3, #48	; 0x30
 800d58c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d590:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d594:	1b52      	subs	r2, r2, r5
 800d596:	6122      	str	r2, [r4, #16]
 800d598:	f8cd a000 	str.w	sl, [sp]
 800d59c:	464b      	mov	r3, r9
 800d59e:	aa03      	add	r2, sp, #12
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	4640      	mov	r0, r8
 800d5a4:	f7ff fee2 	bl	800d36c <_printf_common>
 800d5a8:	3001      	adds	r0, #1
 800d5aa:	d14c      	bne.n	800d646 <_printf_i+0x1fe>
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	b004      	add	sp, #16
 800d5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5b6:	4835      	ldr	r0, [pc, #212]	; (800d68c <_printf_i+0x244>)
 800d5b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d5bc:	6829      	ldr	r1, [r5, #0]
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d5c4:	6029      	str	r1, [r5, #0]
 800d5c6:	061d      	lsls	r5, r3, #24
 800d5c8:	d514      	bpl.n	800d5f4 <_printf_i+0x1ac>
 800d5ca:	07df      	lsls	r7, r3, #31
 800d5cc:	bf44      	itt	mi
 800d5ce:	f043 0320 	orrmi.w	r3, r3, #32
 800d5d2:	6023      	strmi	r3, [r4, #0]
 800d5d4:	b91e      	cbnz	r6, 800d5de <_printf_i+0x196>
 800d5d6:	6823      	ldr	r3, [r4, #0]
 800d5d8:	f023 0320 	bic.w	r3, r3, #32
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	2310      	movs	r3, #16
 800d5e0:	e7b0      	b.n	800d544 <_printf_i+0xfc>
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	f043 0320 	orr.w	r3, r3, #32
 800d5e8:	6023      	str	r3, [r4, #0]
 800d5ea:	2378      	movs	r3, #120	; 0x78
 800d5ec:	4828      	ldr	r0, [pc, #160]	; (800d690 <_printf_i+0x248>)
 800d5ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5f2:	e7e3      	b.n	800d5bc <_printf_i+0x174>
 800d5f4:	0659      	lsls	r1, r3, #25
 800d5f6:	bf48      	it	mi
 800d5f8:	b2b6      	uxthmi	r6, r6
 800d5fa:	e7e6      	b.n	800d5ca <_printf_i+0x182>
 800d5fc:	4615      	mov	r5, r2
 800d5fe:	e7bb      	b.n	800d578 <_printf_i+0x130>
 800d600:	682b      	ldr	r3, [r5, #0]
 800d602:	6826      	ldr	r6, [r4, #0]
 800d604:	6961      	ldr	r1, [r4, #20]
 800d606:	1d18      	adds	r0, r3, #4
 800d608:	6028      	str	r0, [r5, #0]
 800d60a:	0635      	lsls	r5, r6, #24
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	d501      	bpl.n	800d614 <_printf_i+0x1cc>
 800d610:	6019      	str	r1, [r3, #0]
 800d612:	e002      	b.n	800d61a <_printf_i+0x1d2>
 800d614:	0670      	lsls	r0, r6, #25
 800d616:	d5fb      	bpl.n	800d610 <_printf_i+0x1c8>
 800d618:	8019      	strh	r1, [r3, #0]
 800d61a:	2300      	movs	r3, #0
 800d61c:	6123      	str	r3, [r4, #16]
 800d61e:	4615      	mov	r5, r2
 800d620:	e7ba      	b.n	800d598 <_printf_i+0x150>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	1d1a      	adds	r2, r3, #4
 800d626:	602a      	str	r2, [r5, #0]
 800d628:	681d      	ldr	r5, [r3, #0]
 800d62a:	6862      	ldr	r2, [r4, #4]
 800d62c:	2100      	movs	r1, #0
 800d62e:	4628      	mov	r0, r5
 800d630:	f7f2 fdf6 	bl	8000220 <memchr>
 800d634:	b108      	cbz	r0, 800d63a <_printf_i+0x1f2>
 800d636:	1b40      	subs	r0, r0, r5
 800d638:	6060      	str	r0, [r4, #4]
 800d63a:	6863      	ldr	r3, [r4, #4]
 800d63c:	6123      	str	r3, [r4, #16]
 800d63e:	2300      	movs	r3, #0
 800d640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d644:	e7a8      	b.n	800d598 <_printf_i+0x150>
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	462a      	mov	r2, r5
 800d64a:	4649      	mov	r1, r9
 800d64c:	4640      	mov	r0, r8
 800d64e:	47d0      	blx	sl
 800d650:	3001      	adds	r0, #1
 800d652:	d0ab      	beq.n	800d5ac <_printf_i+0x164>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	079b      	lsls	r3, r3, #30
 800d658:	d413      	bmi.n	800d682 <_printf_i+0x23a>
 800d65a:	68e0      	ldr	r0, [r4, #12]
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	4298      	cmp	r0, r3
 800d660:	bfb8      	it	lt
 800d662:	4618      	movlt	r0, r3
 800d664:	e7a4      	b.n	800d5b0 <_printf_i+0x168>
 800d666:	2301      	movs	r3, #1
 800d668:	4632      	mov	r2, r6
 800d66a:	4649      	mov	r1, r9
 800d66c:	4640      	mov	r0, r8
 800d66e:	47d0      	blx	sl
 800d670:	3001      	adds	r0, #1
 800d672:	d09b      	beq.n	800d5ac <_printf_i+0x164>
 800d674:	3501      	adds	r5, #1
 800d676:	68e3      	ldr	r3, [r4, #12]
 800d678:	9903      	ldr	r1, [sp, #12]
 800d67a:	1a5b      	subs	r3, r3, r1
 800d67c:	42ab      	cmp	r3, r5
 800d67e:	dcf2      	bgt.n	800d666 <_printf_i+0x21e>
 800d680:	e7eb      	b.n	800d65a <_printf_i+0x212>
 800d682:	2500      	movs	r5, #0
 800d684:	f104 0619 	add.w	r6, r4, #25
 800d688:	e7f5      	b.n	800d676 <_printf_i+0x22e>
 800d68a:	bf00      	nop
 800d68c:	08013134 	.word	0x08013134
 800d690:	08013145 	.word	0x08013145

0800d694 <iprintf>:
 800d694:	b40f      	push	{r0, r1, r2, r3}
 800d696:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <iprintf+0x2c>)
 800d698:	b513      	push	{r0, r1, r4, lr}
 800d69a:	681c      	ldr	r4, [r3, #0]
 800d69c:	b124      	cbz	r4, 800d6a8 <iprintf+0x14>
 800d69e:	69a3      	ldr	r3, [r4, #24]
 800d6a0:	b913      	cbnz	r3, 800d6a8 <iprintf+0x14>
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f001 f922 	bl	800e8ec <__sinit>
 800d6a8:	ab05      	add	r3, sp, #20
 800d6aa:	9a04      	ldr	r2, [sp, #16]
 800d6ac:	68a1      	ldr	r1, [r4, #8]
 800d6ae:	9301      	str	r3, [sp, #4]
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f002 f857 	bl	800f764 <_vfiprintf_r>
 800d6b6:	b002      	add	sp, #8
 800d6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6bc:	b004      	add	sp, #16
 800d6be:	4770      	bx	lr
 800d6c0:	20000014 	.word	0x20000014

0800d6c4 <_puts_r>:
 800d6c4:	b570      	push	{r4, r5, r6, lr}
 800d6c6:	460e      	mov	r6, r1
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	b118      	cbz	r0, 800d6d4 <_puts_r+0x10>
 800d6cc:	6983      	ldr	r3, [r0, #24]
 800d6ce:	b90b      	cbnz	r3, 800d6d4 <_puts_r+0x10>
 800d6d0:	f001 f90c 	bl	800e8ec <__sinit>
 800d6d4:	69ab      	ldr	r3, [r5, #24]
 800d6d6:	68ac      	ldr	r4, [r5, #8]
 800d6d8:	b913      	cbnz	r3, 800d6e0 <_puts_r+0x1c>
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f001 f906 	bl	800e8ec <__sinit>
 800d6e0:	4b2c      	ldr	r3, [pc, #176]	; (800d794 <_puts_r+0xd0>)
 800d6e2:	429c      	cmp	r4, r3
 800d6e4:	d120      	bne.n	800d728 <_puts_r+0x64>
 800d6e6:	686c      	ldr	r4, [r5, #4]
 800d6e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6ea:	07db      	lsls	r3, r3, #31
 800d6ec:	d405      	bmi.n	800d6fa <_puts_r+0x36>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	0598      	lsls	r0, r3, #22
 800d6f2:	d402      	bmi.n	800d6fa <_puts_r+0x36>
 800d6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6f6:	f001 f9b8 	bl	800ea6a <__retarget_lock_acquire_recursive>
 800d6fa:	89a3      	ldrh	r3, [r4, #12]
 800d6fc:	0719      	lsls	r1, r3, #28
 800d6fe:	d51d      	bpl.n	800d73c <_puts_r+0x78>
 800d700:	6923      	ldr	r3, [r4, #16]
 800d702:	b1db      	cbz	r3, 800d73c <_puts_r+0x78>
 800d704:	3e01      	subs	r6, #1
 800d706:	68a3      	ldr	r3, [r4, #8]
 800d708:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d70c:	3b01      	subs	r3, #1
 800d70e:	60a3      	str	r3, [r4, #8]
 800d710:	bb39      	cbnz	r1, 800d762 <_puts_r+0x9e>
 800d712:	2b00      	cmp	r3, #0
 800d714:	da38      	bge.n	800d788 <_puts_r+0xc4>
 800d716:	4622      	mov	r2, r4
 800d718:	210a      	movs	r1, #10
 800d71a:	4628      	mov	r0, r5
 800d71c:	f000 f880 	bl	800d820 <__swbuf_r>
 800d720:	3001      	adds	r0, #1
 800d722:	d011      	beq.n	800d748 <_puts_r+0x84>
 800d724:	250a      	movs	r5, #10
 800d726:	e011      	b.n	800d74c <_puts_r+0x88>
 800d728:	4b1b      	ldr	r3, [pc, #108]	; (800d798 <_puts_r+0xd4>)
 800d72a:	429c      	cmp	r4, r3
 800d72c:	d101      	bne.n	800d732 <_puts_r+0x6e>
 800d72e:	68ac      	ldr	r4, [r5, #8]
 800d730:	e7da      	b.n	800d6e8 <_puts_r+0x24>
 800d732:	4b1a      	ldr	r3, [pc, #104]	; (800d79c <_puts_r+0xd8>)
 800d734:	429c      	cmp	r4, r3
 800d736:	bf08      	it	eq
 800d738:	68ec      	ldreq	r4, [r5, #12]
 800d73a:	e7d5      	b.n	800d6e8 <_puts_r+0x24>
 800d73c:	4621      	mov	r1, r4
 800d73e:	4628      	mov	r0, r5
 800d740:	f000 f8c0 	bl	800d8c4 <__swsetup_r>
 800d744:	2800      	cmp	r0, #0
 800d746:	d0dd      	beq.n	800d704 <_puts_r+0x40>
 800d748:	f04f 35ff 	mov.w	r5, #4294967295
 800d74c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d74e:	07da      	lsls	r2, r3, #31
 800d750:	d405      	bmi.n	800d75e <_puts_r+0x9a>
 800d752:	89a3      	ldrh	r3, [r4, #12]
 800d754:	059b      	lsls	r3, r3, #22
 800d756:	d402      	bmi.n	800d75e <_puts_r+0x9a>
 800d758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d75a:	f001 f987 	bl	800ea6c <__retarget_lock_release_recursive>
 800d75e:	4628      	mov	r0, r5
 800d760:	bd70      	pop	{r4, r5, r6, pc}
 800d762:	2b00      	cmp	r3, #0
 800d764:	da04      	bge.n	800d770 <_puts_r+0xac>
 800d766:	69a2      	ldr	r2, [r4, #24]
 800d768:	429a      	cmp	r2, r3
 800d76a:	dc06      	bgt.n	800d77a <_puts_r+0xb6>
 800d76c:	290a      	cmp	r1, #10
 800d76e:	d004      	beq.n	800d77a <_puts_r+0xb6>
 800d770:	6823      	ldr	r3, [r4, #0]
 800d772:	1c5a      	adds	r2, r3, #1
 800d774:	6022      	str	r2, [r4, #0]
 800d776:	7019      	strb	r1, [r3, #0]
 800d778:	e7c5      	b.n	800d706 <_puts_r+0x42>
 800d77a:	4622      	mov	r2, r4
 800d77c:	4628      	mov	r0, r5
 800d77e:	f000 f84f 	bl	800d820 <__swbuf_r>
 800d782:	3001      	adds	r0, #1
 800d784:	d1bf      	bne.n	800d706 <_puts_r+0x42>
 800d786:	e7df      	b.n	800d748 <_puts_r+0x84>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	250a      	movs	r5, #10
 800d78c:	1c5a      	adds	r2, r3, #1
 800d78e:	6022      	str	r2, [r4, #0]
 800d790:	701d      	strb	r5, [r3, #0]
 800d792:	e7db      	b.n	800d74c <_puts_r+0x88>
 800d794:	08013208 	.word	0x08013208
 800d798:	08013228 	.word	0x08013228
 800d79c:	080131e8 	.word	0x080131e8

0800d7a0 <puts>:
 800d7a0:	4b02      	ldr	r3, [pc, #8]	; (800d7ac <puts+0xc>)
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	6818      	ldr	r0, [r3, #0]
 800d7a6:	f7ff bf8d 	b.w	800d6c4 <_puts_r>
 800d7aa:	bf00      	nop
 800d7ac:	20000014 	.word	0x20000014

0800d7b0 <iscanf>:
 800d7b0:	b40f      	push	{r0, r1, r2, r3}
 800d7b2:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <iscanf+0x2c>)
 800d7b4:	b513      	push	{r0, r1, r4, lr}
 800d7b6:	681c      	ldr	r4, [r3, #0]
 800d7b8:	b124      	cbz	r4, 800d7c4 <iscanf+0x14>
 800d7ba:	69a3      	ldr	r3, [r4, #24]
 800d7bc:	b913      	cbnz	r3, 800d7c4 <iscanf+0x14>
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f001 f894 	bl	800e8ec <__sinit>
 800d7c4:	ab05      	add	r3, sp, #20
 800d7c6:	9a04      	ldr	r2, [sp, #16]
 800d7c8:	6861      	ldr	r1, [r4, #4]
 800d7ca:	9301      	str	r3, [sp, #4]
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f002 fa9f 	bl	800fd10 <_vfiscanf_r>
 800d7d2:	b002      	add	sp, #8
 800d7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7d8:	b004      	add	sp, #16
 800d7da:	4770      	bx	lr
 800d7dc:	20000014 	.word	0x20000014

0800d7e0 <siprintf>:
 800d7e0:	b40e      	push	{r1, r2, r3}
 800d7e2:	b500      	push	{lr}
 800d7e4:	b09c      	sub	sp, #112	; 0x70
 800d7e6:	ab1d      	add	r3, sp, #116	; 0x74
 800d7e8:	9002      	str	r0, [sp, #8]
 800d7ea:	9006      	str	r0, [sp, #24]
 800d7ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d7f0:	4809      	ldr	r0, [pc, #36]	; (800d818 <siprintf+0x38>)
 800d7f2:	9107      	str	r1, [sp, #28]
 800d7f4:	9104      	str	r1, [sp, #16]
 800d7f6:	4909      	ldr	r1, [pc, #36]	; (800d81c <siprintf+0x3c>)
 800d7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7fc:	9105      	str	r1, [sp, #20]
 800d7fe:	6800      	ldr	r0, [r0, #0]
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	a902      	add	r1, sp, #8
 800d804:	f001 fe84 	bl	800f510 <_svfiprintf_r>
 800d808:	9b02      	ldr	r3, [sp, #8]
 800d80a:	2200      	movs	r2, #0
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	b01c      	add	sp, #112	; 0x70
 800d810:	f85d eb04 	ldr.w	lr, [sp], #4
 800d814:	b003      	add	sp, #12
 800d816:	4770      	bx	lr
 800d818:	20000014 	.word	0x20000014
 800d81c:	ffff0208 	.word	0xffff0208

0800d820 <__swbuf_r>:
 800d820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d822:	460e      	mov	r6, r1
 800d824:	4614      	mov	r4, r2
 800d826:	4605      	mov	r5, r0
 800d828:	b118      	cbz	r0, 800d832 <__swbuf_r+0x12>
 800d82a:	6983      	ldr	r3, [r0, #24]
 800d82c:	b90b      	cbnz	r3, 800d832 <__swbuf_r+0x12>
 800d82e:	f001 f85d 	bl	800e8ec <__sinit>
 800d832:	4b21      	ldr	r3, [pc, #132]	; (800d8b8 <__swbuf_r+0x98>)
 800d834:	429c      	cmp	r4, r3
 800d836:	d12b      	bne.n	800d890 <__swbuf_r+0x70>
 800d838:	686c      	ldr	r4, [r5, #4]
 800d83a:	69a3      	ldr	r3, [r4, #24]
 800d83c:	60a3      	str	r3, [r4, #8]
 800d83e:	89a3      	ldrh	r3, [r4, #12]
 800d840:	071a      	lsls	r2, r3, #28
 800d842:	d52f      	bpl.n	800d8a4 <__swbuf_r+0x84>
 800d844:	6923      	ldr	r3, [r4, #16]
 800d846:	b36b      	cbz	r3, 800d8a4 <__swbuf_r+0x84>
 800d848:	6923      	ldr	r3, [r4, #16]
 800d84a:	6820      	ldr	r0, [r4, #0]
 800d84c:	1ac0      	subs	r0, r0, r3
 800d84e:	6963      	ldr	r3, [r4, #20]
 800d850:	b2f6      	uxtb	r6, r6
 800d852:	4283      	cmp	r3, r0
 800d854:	4637      	mov	r7, r6
 800d856:	dc04      	bgt.n	800d862 <__swbuf_r+0x42>
 800d858:	4621      	mov	r1, r4
 800d85a:	4628      	mov	r0, r5
 800d85c:	f000 ffa0 	bl	800e7a0 <_fflush_r>
 800d860:	bb30      	cbnz	r0, 800d8b0 <__swbuf_r+0x90>
 800d862:	68a3      	ldr	r3, [r4, #8]
 800d864:	3b01      	subs	r3, #1
 800d866:	60a3      	str	r3, [r4, #8]
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	6022      	str	r2, [r4, #0]
 800d86e:	701e      	strb	r6, [r3, #0]
 800d870:	6963      	ldr	r3, [r4, #20]
 800d872:	3001      	adds	r0, #1
 800d874:	4283      	cmp	r3, r0
 800d876:	d004      	beq.n	800d882 <__swbuf_r+0x62>
 800d878:	89a3      	ldrh	r3, [r4, #12]
 800d87a:	07db      	lsls	r3, r3, #31
 800d87c:	d506      	bpl.n	800d88c <__swbuf_r+0x6c>
 800d87e:	2e0a      	cmp	r6, #10
 800d880:	d104      	bne.n	800d88c <__swbuf_r+0x6c>
 800d882:	4621      	mov	r1, r4
 800d884:	4628      	mov	r0, r5
 800d886:	f000 ff8b 	bl	800e7a0 <_fflush_r>
 800d88a:	b988      	cbnz	r0, 800d8b0 <__swbuf_r+0x90>
 800d88c:	4638      	mov	r0, r7
 800d88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d890:	4b0a      	ldr	r3, [pc, #40]	; (800d8bc <__swbuf_r+0x9c>)
 800d892:	429c      	cmp	r4, r3
 800d894:	d101      	bne.n	800d89a <__swbuf_r+0x7a>
 800d896:	68ac      	ldr	r4, [r5, #8]
 800d898:	e7cf      	b.n	800d83a <__swbuf_r+0x1a>
 800d89a:	4b09      	ldr	r3, [pc, #36]	; (800d8c0 <__swbuf_r+0xa0>)
 800d89c:	429c      	cmp	r4, r3
 800d89e:	bf08      	it	eq
 800d8a0:	68ec      	ldreq	r4, [r5, #12]
 800d8a2:	e7ca      	b.n	800d83a <__swbuf_r+0x1a>
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f000 f80c 	bl	800d8c4 <__swsetup_r>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d0cb      	beq.n	800d848 <__swbuf_r+0x28>
 800d8b0:	f04f 37ff 	mov.w	r7, #4294967295
 800d8b4:	e7ea      	b.n	800d88c <__swbuf_r+0x6c>
 800d8b6:	bf00      	nop
 800d8b8:	08013208 	.word	0x08013208
 800d8bc:	08013228 	.word	0x08013228
 800d8c0:	080131e8 	.word	0x080131e8

0800d8c4 <__swsetup_r>:
 800d8c4:	4b32      	ldr	r3, [pc, #200]	; (800d990 <__swsetup_r+0xcc>)
 800d8c6:	b570      	push	{r4, r5, r6, lr}
 800d8c8:	681d      	ldr	r5, [r3, #0]
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	460c      	mov	r4, r1
 800d8ce:	b125      	cbz	r5, 800d8da <__swsetup_r+0x16>
 800d8d0:	69ab      	ldr	r3, [r5, #24]
 800d8d2:	b913      	cbnz	r3, 800d8da <__swsetup_r+0x16>
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f001 f809 	bl	800e8ec <__sinit>
 800d8da:	4b2e      	ldr	r3, [pc, #184]	; (800d994 <__swsetup_r+0xd0>)
 800d8dc:	429c      	cmp	r4, r3
 800d8de:	d10f      	bne.n	800d900 <__swsetup_r+0x3c>
 800d8e0:	686c      	ldr	r4, [r5, #4]
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8e8:	0719      	lsls	r1, r3, #28
 800d8ea:	d42c      	bmi.n	800d946 <__swsetup_r+0x82>
 800d8ec:	06dd      	lsls	r5, r3, #27
 800d8ee:	d411      	bmi.n	800d914 <__swsetup_r+0x50>
 800d8f0:	2309      	movs	r3, #9
 800d8f2:	6033      	str	r3, [r6, #0]
 800d8f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8f8:	81a3      	strh	r3, [r4, #12]
 800d8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fe:	e03e      	b.n	800d97e <__swsetup_r+0xba>
 800d900:	4b25      	ldr	r3, [pc, #148]	; (800d998 <__swsetup_r+0xd4>)
 800d902:	429c      	cmp	r4, r3
 800d904:	d101      	bne.n	800d90a <__swsetup_r+0x46>
 800d906:	68ac      	ldr	r4, [r5, #8]
 800d908:	e7eb      	b.n	800d8e2 <__swsetup_r+0x1e>
 800d90a:	4b24      	ldr	r3, [pc, #144]	; (800d99c <__swsetup_r+0xd8>)
 800d90c:	429c      	cmp	r4, r3
 800d90e:	bf08      	it	eq
 800d910:	68ec      	ldreq	r4, [r5, #12]
 800d912:	e7e6      	b.n	800d8e2 <__swsetup_r+0x1e>
 800d914:	0758      	lsls	r0, r3, #29
 800d916:	d512      	bpl.n	800d93e <__swsetup_r+0x7a>
 800d918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d91a:	b141      	cbz	r1, 800d92e <__swsetup_r+0x6a>
 800d91c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d920:	4299      	cmp	r1, r3
 800d922:	d002      	beq.n	800d92a <__swsetup_r+0x66>
 800d924:	4630      	mov	r0, r6
 800d926:	f001 fcb7 	bl	800f298 <_free_r>
 800d92a:	2300      	movs	r3, #0
 800d92c:	6363      	str	r3, [r4, #52]	; 0x34
 800d92e:	89a3      	ldrh	r3, [r4, #12]
 800d930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	2300      	movs	r3, #0
 800d938:	6063      	str	r3, [r4, #4]
 800d93a:	6923      	ldr	r3, [r4, #16]
 800d93c:	6023      	str	r3, [r4, #0]
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	f043 0308 	orr.w	r3, r3, #8
 800d944:	81a3      	strh	r3, [r4, #12]
 800d946:	6923      	ldr	r3, [r4, #16]
 800d948:	b94b      	cbnz	r3, 800d95e <__swsetup_r+0x9a>
 800d94a:	89a3      	ldrh	r3, [r4, #12]
 800d94c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d954:	d003      	beq.n	800d95e <__swsetup_r+0x9a>
 800d956:	4621      	mov	r1, r4
 800d958:	4630      	mov	r0, r6
 800d95a:	f001 f8ad 	bl	800eab8 <__smakebuf_r>
 800d95e:	89a0      	ldrh	r0, [r4, #12]
 800d960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d964:	f010 0301 	ands.w	r3, r0, #1
 800d968:	d00a      	beq.n	800d980 <__swsetup_r+0xbc>
 800d96a:	2300      	movs	r3, #0
 800d96c:	60a3      	str	r3, [r4, #8]
 800d96e:	6963      	ldr	r3, [r4, #20]
 800d970:	425b      	negs	r3, r3
 800d972:	61a3      	str	r3, [r4, #24]
 800d974:	6923      	ldr	r3, [r4, #16]
 800d976:	b943      	cbnz	r3, 800d98a <__swsetup_r+0xc6>
 800d978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d97c:	d1ba      	bne.n	800d8f4 <__swsetup_r+0x30>
 800d97e:	bd70      	pop	{r4, r5, r6, pc}
 800d980:	0781      	lsls	r1, r0, #30
 800d982:	bf58      	it	pl
 800d984:	6963      	ldrpl	r3, [r4, #20]
 800d986:	60a3      	str	r3, [r4, #8]
 800d988:	e7f4      	b.n	800d974 <__swsetup_r+0xb0>
 800d98a:	2000      	movs	r0, #0
 800d98c:	e7f7      	b.n	800d97e <__swsetup_r+0xba>
 800d98e:	bf00      	nop
 800d990:	20000014 	.word	0x20000014
 800d994:	08013208 	.word	0x08013208
 800d998:	08013228 	.word	0x08013228
 800d99c:	080131e8 	.word	0x080131e8

0800d9a0 <quorem>:
 800d9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	6903      	ldr	r3, [r0, #16]
 800d9a6:	690c      	ldr	r4, [r1, #16]
 800d9a8:	42a3      	cmp	r3, r4
 800d9aa:	4607      	mov	r7, r0
 800d9ac:	f2c0 8081 	blt.w	800dab2 <quorem+0x112>
 800d9b0:	3c01      	subs	r4, #1
 800d9b2:	f101 0814 	add.w	r8, r1, #20
 800d9b6:	f100 0514 	add.w	r5, r0, #20
 800d9ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d9d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9d8:	d331      	bcc.n	800da3e <quorem+0x9e>
 800d9da:	f04f 0e00 	mov.w	lr, #0
 800d9de:	4640      	mov	r0, r8
 800d9e0:	46ac      	mov	ip, r5
 800d9e2:	46f2      	mov	sl, lr
 800d9e4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d9e8:	b293      	uxth	r3, r2
 800d9ea:	fb06 e303 	mla	r3, r6, r3, lr
 800d9ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	ebaa 0303 	sub.w	r3, sl, r3
 800d9f8:	f8dc a000 	ldr.w	sl, [ip]
 800d9fc:	0c12      	lsrs	r2, r2, #16
 800d9fe:	fa13 f38a 	uxtah	r3, r3, sl
 800da02:	fb06 e202 	mla	r2, r6, r2, lr
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	9b00      	ldr	r3, [sp, #0]
 800da0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da0e:	b292      	uxth	r2, r2
 800da10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800da14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da18:	f8bd 3000 	ldrh.w	r3, [sp]
 800da1c:	4581      	cmp	r9, r0
 800da1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da22:	f84c 3b04 	str.w	r3, [ip], #4
 800da26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800da2a:	d2db      	bcs.n	800d9e4 <quorem+0x44>
 800da2c:	f855 300b 	ldr.w	r3, [r5, fp]
 800da30:	b92b      	cbnz	r3, 800da3e <quorem+0x9e>
 800da32:	9b01      	ldr	r3, [sp, #4]
 800da34:	3b04      	subs	r3, #4
 800da36:	429d      	cmp	r5, r3
 800da38:	461a      	mov	r2, r3
 800da3a:	d32e      	bcc.n	800da9a <quorem+0xfa>
 800da3c:	613c      	str	r4, [r7, #16]
 800da3e:	4638      	mov	r0, r7
 800da40:	f001 fb12 	bl	800f068 <__mcmp>
 800da44:	2800      	cmp	r0, #0
 800da46:	db24      	blt.n	800da92 <quorem+0xf2>
 800da48:	3601      	adds	r6, #1
 800da4a:	4628      	mov	r0, r5
 800da4c:	f04f 0c00 	mov.w	ip, #0
 800da50:	f858 2b04 	ldr.w	r2, [r8], #4
 800da54:	f8d0 e000 	ldr.w	lr, [r0]
 800da58:	b293      	uxth	r3, r2
 800da5a:	ebac 0303 	sub.w	r3, ip, r3
 800da5e:	0c12      	lsrs	r2, r2, #16
 800da60:	fa13 f38e 	uxtah	r3, r3, lr
 800da64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da72:	45c1      	cmp	r9, r8
 800da74:	f840 3b04 	str.w	r3, [r0], #4
 800da78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da7c:	d2e8      	bcs.n	800da50 <quorem+0xb0>
 800da7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da86:	b922      	cbnz	r2, 800da92 <quorem+0xf2>
 800da88:	3b04      	subs	r3, #4
 800da8a:	429d      	cmp	r5, r3
 800da8c:	461a      	mov	r2, r3
 800da8e:	d30a      	bcc.n	800daa6 <quorem+0x106>
 800da90:	613c      	str	r4, [r7, #16]
 800da92:	4630      	mov	r0, r6
 800da94:	b003      	add	sp, #12
 800da96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9a:	6812      	ldr	r2, [r2, #0]
 800da9c:	3b04      	subs	r3, #4
 800da9e:	2a00      	cmp	r2, #0
 800daa0:	d1cc      	bne.n	800da3c <quorem+0x9c>
 800daa2:	3c01      	subs	r4, #1
 800daa4:	e7c7      	b.n	800da36 <quorem+0x96>
 800daa6:	6812      	ldr	r2, [r2, #0]
 800daa8:	3b04      	subs	r3, #4
 800daaa:	2a00      	cmp	r2, #0
 800daac:	d1f0      	bne.n	800da90 <quorem+0xf0>
 800daae:	3c01      	subs	r4, #1
 800dab0:	e7eb      	b.n	800da8a <quorem+0xea>
 800dab2:	2000      	movs	r0, #0
 800dab4:	e7ee      	b.n	800da94 <quorem+0xf4>
	...

0800dab8 <_dtoa_r>:
 800dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabc:	ed2d 8b04 	vpush	{d8-d9}
 800dac0:	ec57 6b10 	vmov	r6, r7, d0
 800dac4:	b093      	sub	sp, #76	; 0x4c
 800dac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dacc:	9106      	str	r1, [sp, #24]
 800dace:	ee10 aa10 	vmov	sl, s0
 800dad2:	4604      	mov	r4, r0
 800dad4:	9209      	str	r2, [sp, #36]	; 0x24
 800dad6:	930c      	str	r3, [sp, #48]	; 0x30
 800dad8:	46bb      	mov	fp, r7
 800dada:	b975      	cbnz	r5, 800dafa <_dtoa_r+0x42>
 800dadc:	2010      	movs	r0, #16
 800dade:	f001 f82b 	bl	800eb38 <malloc>
 800dae2:	4602      	mov	r2, r0
 800dae4:	6260      	str	r0, [r4, #36]	; 0x24
 800dae6:	b920      	cbnz	r0, 800daf2 <_dtoa_r+0x3a>
 800dae8:	4ba7      	ldr	r3, [pc, #668]	; (800dd88 <_dtoa_r+0x2d0>)
 800daea:	21ea      	movs	r1, #234	; 0xea
 800daec:	48a7      	ldr	r0, [pc, #668]	; (800dd8c <_dtoa_r+0x2d4>)
 800daee:	f002 fd85 	bl	80105fc <__assert_func>
 800daf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800daf6:	6005      	str	r5, [r0, #0]
 800daf8:	60c5      	str	r5, [r0, #12]
 800dafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dafc:	6819      	ldr	r1, [r3, #0]
 800dafe:	b151      	cbz	r1, 800db16 <_dtoa_r+0x5e>
 800db00:	685a      	ldr	r2, [r3, #4]
 800db02:	604a      	str	r2, [r1, #4]
 800db04:	2301      	movs	r3, #1
 800db06:	4093      	lsls	r3, r2
 800db08:	608b      	str	r3, [r1, #8]
 800db0a:	4620      	mov	r0, r4
 800db0c:	f001 f86a 	bl	800ebe4 <_Bfree>
 800db10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	1e3b      	subs	r3, r7, #0
 800db18:	bfaa      	itet	ge
 800db1a:	2300      	movge	r3, #0
 800db1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800db20:	f8c8 3000 	strge.w	r3, [r8]
 800db24:	4b9a      	ldr	r3, [pc, #616]	; (800dd90 <_dtoa_r+0x2d8>)
 800db26:	bfbc      	itt	lt
 800db28:	2201      	movlt	r2, #1
 800db2a:	f8c8 2000 	strlt.w	r2, [r8]
 800db2e:	ea33 030b 	bics.w	r3, r3, fp
 800db32:	d11b      	bne.n	800db6c <_dtoa_r+0xb4>
 800db34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db36:	f242 730f 	movw	r3, #9999	; 0x270f
 800db3a:	6013      	str	r3, [r2, #0]
 800db3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db40:	4333      	orrs	r3, r6
 800db42:	f000 8592 	beq.w	800e66a <_dtoa_r+0xbb2>
 800db46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db48:	b963      	cbnz	r3, 800db64 <_dtoa_r+0xac>
 800db4a:	4b92      	ldr	r3, [pc, #584]	; (800dd94 <_dtoa_r+0x2dc>)
 800db4c:	e022      	b.n	800db94 <_dtoa_r+0xdc>
 800db4e:	4b92      	ldr	r3, [pc, #584]	; (800dd98 <_dtoa_r+0x2e0>)
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	3308      	adds	r3, #8
 800db54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db56:	6013      	str	r3, [r2, #0]
 800db58:	9801      	ldr	r0, [sp, #4]
 800db5a:	b013      	add	sp, #76	; 0x4c
 800db5c:	ecbd 8b04 	vpop	{d8-d9}
 800db60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db64:	4b8b      	ldr	r3, [pc, #556]	; (800dd94 <_dtoa_r+0x2dc>)
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	3303      	adds	r3, #3
 800db6a:	e7f3      	b.n	800db54 <_dtoa_r+0x9c>
 800db6c:	2200      	movs	r2, #0
 800db6e:	2300      	movs	r3, #0
 800db70:	4650      	mov	r0, sl
 800db72:	4659      	mov	r1, fp
 800db74:	f7f2 ffc8 	bl	8000b08 <__aeabi_dcmpeq>
 800db78:	ec4b ab19 	vmov	d9, sl, fp
 800db7c:	4680      	mov	r8, r0
 800db7e:	b158      	cbz	r0, 800db98 <_dtoa_r+0xe0>
 800db80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db82:	2301      	movs	r3, #1
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 856b 	beq.w	800e664 <_dtoa_r+0xbac>
 800db8e:	4883      	ldr	r0, [pc, #524]	; (800dd9c <_dtoa_r+0x2e4>)
 800db90:	6018      	str	r0, [r3, #0]
 800db92:	1e43      	subs	r3, r0, #1
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	e7df      	b.n	800db58 <_dtoa_r+0xa0>
 800db98:	ec4b ab10 	vmov	d0, sl, fp
 800db9c:	aa10      	add	r2, sp, #64	; 0x40
 800db9e:	a911      	add	r1, sp, #68	; 0x44
 800dba0:	4620      	mov	r0, r4
 800dba2:	f001 fb07 	bl	800f1b4 <__d2b>
 800dba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dbaa:	ee08 0a10 	vmov	s16, r0
 800dbae:	2d00      	cmp	r5, #0
 800dbb0:	f000 8084 	beq.w	800dcbc <_dtoa_r+0x204>
 800dbb4:	ee19 3a90 	vmov	r3, s19
 800dbb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dbc0:	4656      	mov	r6, sl
 800dbc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dbc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dbca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dbce:	4b74      	ldr	r3, [pc, #464]	; (800dda0 <_dtoa_r+0x2e8>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	4639      	mov	r1, r7
 800dbd6:	f7f2 fb77 	bl	80002c8 <__aeabi_dsub>
 800dbda:	a365      	add	r3, pc, #404	; (adr r3, 800dd70 <_dtoa_r+0x2b8>)
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	f7f2 fd2a 	bl	8000638 <__aeabi_dmul>
 800dbe4:	a364      	add	r3, pc, #400	; (adr r3, 800dd78 <_dtoa_r+0x2c0>)
 800dbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbea:	f7f2 fb6f 	bl	80002cc <__adddf3>
 800dbee:	4606      	mov	r6, r0
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	460f      	mov	r7, r1
 800dbf4:	f7f2 fcb6 	bl	8000564 <__aeabi_i2d>
 800dbf8:	a361      	add	r3, pc, #388	; (adr r3, 800dd80 <_dtoa_r+0x2c8>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fd1b 	bl	8000638 <__aeabi_dmul>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	4630      	mov	r0, r6
 800dc08:	4639      	mov	r1, r7
 800dc0a:	f7f2 fb5f 	bl	80002cc <__adddf3>
 800dc0e:	4606      	mov	r6, r0
 800dc10:	460f      	mov	r7, r1
 800dc12:	f7f2 ffc1 	bl	8000b98 <__aeabi_d2iz>
 800dc16:	2200      	movs	r2, #0
 800dc18:	9000      	str	r0, [sp, #0]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	4639      	mov	r1, r7
 800dc20:	f7f2 ff7c 	bl	8000b1c <__aeabi_dcmplt>
 800dc24:	b150      	cbz	r0, 800dc3c <_dtoa_r+0x184>
 800dc26:	9800      	ldr	r0, [sp, #0]
 800dc28:	f7f2 fc9c 	bl	8000564 <__aeabi_i2d>
 800dc2c:	4632      	mov	r2, r6
 800dc2e:	463b      	mov	r3, r7
 800dc30:	f7f2 ff6a 	bl	8000b08 <__aeabi_dcmpeq>
 800dc34:	b910      	cbnz	r0, 800dc3c <_dtoa_r+0x184>
 800dc36:	9b00      	ldr	r3, [sp, #0]
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	9b00      	ldr	r3, [sp, #0]
 800dc3e:	2b16      	cmp	r3, #22
 800dc40:	d85a      	bhi.n	800dcf8 <_dtoa_r+0x240>
 800dc42:	9a00      	ldr	r2, [sp, #0]
 800dc44:	4b57      	ldr	r3, [pc, #348]	; (800dda4 <_dtoa_r+0x2ec>)
 800dc46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4e:	ec51 0b19 	vmov	r0, r1, d9
 800dc52:	f7f2 ff63 	bl	8000b1c <__aeabi_dcmplt>
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d050      	beq.n	800dcfc <_dtoa_r+0x244>
 800dc5a:	9b00      	ldr	r3, [sp, #0]
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	2300      	movs	r3, #0
 800dc62:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc66:	1b5d      	subs	r5, r3, r5
 800dc68:	1e6b      	subs	r3, r5, #1
 800dc6a:	9305      	str	r3, [sp, #20]
 800dc6c:	bf45      	ittet	mi
 800dc6e:	f1c5 0301 	rsbmi	r3, r5, #1
 800dc72:	9304      	strmi	r3, [sp, #16]
 800dc74:	2300      	movpl	r3, #0
 800dc76:	2300      	movmi	r3, #0
 800dc78:	bf4c      	ite	mi
 800dc7a:	9305      	strmi	r3, [sp, #20]
 800dc7c:	9304      	strpl	r3, [sp, #16]
 800dc7e:	9b00      	ldr	r3, [sp, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	db3d      	blt.n	800dd00 <_dtoa_r+0x248>
 800dc84:	9b05      	ldr	r3, [sp, #20]
 800dc86:	9a00      	ldr	r2, [sp, #0]
 800dc88:	920a      	str	r2, [sp, #40]	; 0x28
 800dc8a:	4413      	add	r3, r2
 800dc8c:	9305      	str	r3, [sp, #20]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	9307      	str	r3, [sp, #28]
 800dc92:	9b06      	ldr	r3, [sp, #24]
 800dc94:	2b09      	cmp	r3, #9
 800dc96:	f200 8089 	bhi.w	800ddac <_dtoa_r+0x2f4>
 800dc9a:	2b05      	cmp	r3, #5
 800dc9c:	bfc4      	itt	gt
 800dc9e:	3b04      	subgt	r3, #4
 800dca0:	9306      	strgt	r3, [sp, #24]
 800dca2:	9b06      	ldr	r3, [sp, #24]
 800dca4:	f1a3 0302 	sub.w	r3, r3, #2
 800dca8:	bfcc      	ite	gt
 800dcaa:	2500      	movgt	r5, #0
 800dcac:	2501      	movle	r5, #1
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	f200 8087 	bhi.w	800ddc2 <_dtoa_r+0x30a>
 800dcb4:	e8df f003 	tbb	[pc, r3]
 800dcb8:	59383a2d 	.word	0x59383a2d
 800dcbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dcc0:	441d      	add	r5, r3
 800dcc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dcc6:	2b20      	cmp	r3, #32
 800dcc8:	bfc1      	itttt	gt
 800dcca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dcce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dcd2:	fa0b f303 	lslgt.w	r3, fp, r3
 800dcd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dcda:	bfda      	itte	le
 800dcdc:	f1c3 0320 	rsble	r3, r3, #32
 800dce0:	fa06 f003 	lslle.w	r0, r6, r3
 800dce4:	4318      	orrgt	r0, r3
 800dce6:	f7f2 fc2d 	bl	8000544 <__aeabi_ui2d>
 800dcea:	2301      	movs	r3, #1
 800dcec:	4606      	mov	r6, r0
 800dcee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dcf2:	3d01      	subs	r5, #1
 800dcf4:	930e      	str	r3, [sp, #56]	; 0x38
 800dcf6:	e76a      	b.n	800dbce <_dtoa_r+0x116>
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e7b2      	b.n	800dc62 <_dtoa_r+0x1aa>
 800dcfc:	900b      	str	r0, [sp, #44]	; 0x2c
 800dcfe:	e7b1      	b.n	800dc64 <_dtoa_r+0x1ac>
 800dd00:	9b04      	ldr	r3, [sp, #16]
 800dd02:	9a00      	ldr	r2, [sp, #0]
 800dd04:	1a9b      	subs	r3, r3, r2
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	4253      	negs	r3, r2
 800dd0a:	9307      	str	r3, [sp, #28]
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd10:	e7bf      	b.n	800dc92 <_dtoa_r+0x1da>
 800dd12:	2300      	movs	r3, #0
 800dd14:	9308      	str	r3, [sp, #32]
 800dd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	dc55      	bgt.n	800ddc8 <_dtoa_r+0x310>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd22:	461a      	mov	r2, r3
 800dd24:	9209      	str	r2, [sp, #36]	; 0x24
 800dd26:	e00c      	b.n	800dd42 <_dtoa_r+0x28a>
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e7f3      	b.n	800dd14 <_dtoa_r+0x25c>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd30:	9308      	str	r3, [sp, #32]
 800dd32:	9b00      	ldr	r3, [sp, #0]
 800dd34:	4413      	add	r3, r2
 800dd36:	9302      	str	r3, [sp, #8]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	9303      	str	r3, [sp, #12]
 800dd3e:	bfb8      	it	lt
 800dd40:	2301      	movlt	r3, #1
 800dd42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dd44:	2200      	movs	r2, #0
 800dd46:	6042      	str	r2, [r0, #4]
 800dd48:	2204      	movs	r2, #4
 800dd4a:	f102 0614 	add.w	r6, r2, #20
 800dd4e:	429e      	cmp	r6, r3
 800dd50:	6841      	ldr	r1, [r0, #4]
 800dd52:	d93d      	bls.n	800ddd0 <_dtoa_r+0x318>
 800dd54:	4620      	mov	r0, r4
 800dd56:	f000 ff05 	bl	800eb64 <_Balloc>
 800dd5a:	9001      	str	r0, [sp, #4]
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d13b      	bne.n	800ddd8 <_dtoa_r+0x320>
 800dd60:	4b11      	ldr	r3, [pc, #68]	; (800dda8 <_dtoa_r+0x2f0>)
 800dd62:	4602      	mov	r2, r0
 800dd64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd68:	e6c0      	b.n	800daec <_dtoa_r+0x34>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e7df      	b.n	800dd2e <_dtoa_r+0x276>
 800dd6e:	bf00      	nop
 800dd70:	636f4361 	.word	0x636f4361
 800dd74:	3fd287a7 	.word	0x3fd287a7
 800dd78:	8b60c8b3 	.word	0x8b60c8b3
 800dd7c:	3fc68a28 	.word	0x3fc68a28
 800dd80:	509f79fb 	.word	0x509f79fb
 800dd84:	3fd34413 	.word	0x3fd34413
 800dd88:	08013163 	.word	0x08013163
 800dd8c:	0801317a 	.word	0x0801317a
 800dd90:	7ff00000 	.word	0x7ff00000
 800dd94:	0801315f 	.word	0x0801315f
 800dd98:	08013156 	.word	0x08013156
 800dd9c:	080133ba 	.word	0x080133ba
 800dda0:	3ff80000 	.word	0x3ff80000
 800dda4:	080132d0 	.word	0x080132d0
 800dda8:	080131d5 	.word	0x080131d5
 800ddac:	2501      	movs	r5, #1
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9306      	str	r3, [sp, #24]
 800ddb2:	9508      	str	r5, [sp, #32]
 800ddb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2312      	movs	r3, #18
 800ddc0:	e7b0      	b.n	800dd24 <_dtoa_r+0x26c>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	9308      	str	r3, [sp, #32]
 800ddc6:	e7f5      	b.n	800ddb4 <_dtoa_r+0x2fc>
 800ddc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ddce:	e7b8      	b.n	800dd42 <_dtoa_r+0x28a>
 800ddd0:	3101      	adds	r1, #1
 800ddd2:	6041      	str	r1, [r0, #4]
 800ddd4:	0052      	lsls	r2, r2, #1
 800ddd6:	e7b8      	b.n	800dd4a <_dtoa_r+0x292>
 800ddd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddda:	9a01      	ldr	r2, [sp, #4]
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	9b03      	ldr	r3, [sp, #12]
 800dde0:	2b0e      	cmp	r3, #14
 800dde2:	f200 809d 	bhi.w	800df20 <_dtoa_r+0x468>
 800dde6:	2d00      	cmp	r5, #0
 800dde8:	f000 809a 	beq.w	800df20 <_dtoa_r+0x468>
 800ddec:	9b00      	ldr	r3, [sp, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	dd32      	ble.n	800de58 <_dtoa_r+0x3a0>
 800ddf2:	4ab7      	ldr	r2, [pc, #732]	; (800e0d0 <_dtoa_r+0x618>)
 800ddf4:	f003 030f 	and.w	r3, r3, #15
 800ddf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ddfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de00:	9b00      	ldr	r3, [sp, #0]
 800de02:	05d8      	lsls	r0, r3, #23
 800de04:	ea4f 1723 	mov.w	r7, r3, asr #4
 800de08:	d516      	bpl.n	800de38 <_dtoa_r+0x380>
 800de0a:	4bb2      	ldr	r3, [pc, #712]	; (800e0d4 <_dtoa_r+0x61c>)
 800de0c:	ec51 0b19 	vmov	r0, r1, d9
 800de10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de14:	f7f2 fd3a 	bl	800088c <__aeabi_ddiv>
 800de18:	f007 070f 	and.w	r7, r7, #15
 800de1c:	4682      	mov	sl, r0
 800de1e:	468b      	mov	fp, r1
 800de20:	2503      	movs	r5, #3
 800de22:	4eac      	ldr	r6, [pc, #688]	; (800e0d4 <_dtoa_r+0x61c>)
 800de24:	b957      	cbnz	r7, 800de3c <_dtoa_r+0x384>
 800de26:	4642      	mov	r2, r8
 800de28:	464b      	mov	r3, r9
 800de2a:	4650      	mov	r0, sl
 800de2c:	4659      	mov	r1, fp
 800de2e:	f7f2 fd2d 	bl	800088c <__aeabi_ddiv>
 800de32:	4682      	mov	sl, r0
 800de34:	468b      	mov	fp, r1
 800de36:	e028      	b.n	800de8a <_dtoa_r+0x3d2>
 800de38:	2502      	movs	r5, #2
 800de3a:	e7f2      	b.n	800de22 <_dtoa_r+0x36a>
 800de3c:	07f9      	lsls	r1, r7, #31
 800de3e:	d508      	bpl.n	800de52 <_dtoa_r+0x39a>
 800de40:	4640      	mov	r0, r8
 800de42:	4649      	mov	r1, r9
 800de44:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de48:	f7f2 fbf6 	bl	8000638 <__aeabi_dmul>
 800de4c:	3501      	adds	r5, #1
 800de4e:	4680      	mov	r8, r0
 800de50:	4689      	mov	r9, r1
 800de52:	107f      	asrs	r7, r7, #1
 800de54:	3608      	adds	r6, #8
 800de56:	e7e5      	b.n	800de24 <_dtoa_r+0x36c>
 800de58:	f000 809b 	beq.w	800df92 <_dtoa_r+0x4da>
 800de5c:	9b00      	ldr	r3, [sp, #0]
 800de5e:	4f9d      	ldr	r7, [pc, #628]	; (800e0d4 <_dtoa_r+0x61c>)
 800de60:	425e      	negs	r6, r3
 800de62:	4b9b      	ldr	r3, [pc, #620]	; (800e0d0 <_dtoa_r+0x618>)
 800de64:	f006 020f 	and.w	r2, r6, #15
 800de68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	ec51 0b19 	vmov	r0, r1, d9
 800de74:	f7f2 fbe0 	bl	8000638 <__aeabi_dmul>
 800de78:	1136      	asrs	r6, r6, #4
 800de7a:	4682      	mov	sl, r0
 800de7c:	468b      	mov	fp, r1
 800de7e:	2300      	movs	r3, #0
 800de80:	2502      	movs	r5, #2
 800de82:	2e00      	cmp	r6, #0
 800de84:	d17a      	bne.n	800df7c <_dtoa_r+0x4c4>
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1d3      	bne.n	800de32 <_dtoa_r+0x37a>
 800de8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f000 8082 	beq.w	800df96 <_dtoa_r+0x4de>
 800de92:	4b91      	ldr	r3, [pc, #580]	; (800e0d8 <_dtoa_r+0x620>)
 800de94:	2200      	movs	r2, #0
 800de96:	4650      	mov	r0, sl
 800de98:	4659      	mov	r1, fp
 800de9a:	f7f2 fe3f 	bl	8000b1c <__aeabi_dcmplt>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d079      	beq.n	800df96 <_dtoa_r+0x4de>
 800dea2:	9b03      	ldr	r3, [sp, #12]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d076      	beq.n	800df96 <_dtoa_r+0x4de>
 800dea8:	9b02      	ldr	r3, [sp, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	dd36      	ble.n	800df1c <_dtoa_r+0x464>
 800deae:	9b00      	ldr	r3, [sp, #0]
 800deb0:	4650      	mov	r0, sl
 800deb2:	4659      	mov	r1, fp
 800deb4:	1e5f      	subs	r7, r3, #1
 800deb6:	2200      	movs	r2, #0
 800deb8:	4b88      	ldr	r3, [pc, #544]	; (800e0dc <_dtoa_r+0x624>)
 800deba:	f7f2 fbbd 	bl	8000638 <__aeabi_dmul>
 800debe:	9e02      	ldr	r6, [sp, #8]
 800dec0:	4682      	mov	sl, r0
 800dec2:	468b      	mov	fp, r1
 800dec4:	3501      	adds	r5, #1
 800dec6:	4628      	mov	r0, r5
 800dec8:	f7f2 fb4c 	bl	8000564 <__aeabi_i2d>
 800decc:	4652      	mov	r2, sl
 800dece:	465b      	mov	r3, fp
 800ded0:	f7f2 fbb2 	bl	8000638 <__aeabi_dmul>
 800ded4:	4b82      	ldr	r3, [pc, #520]	; (800e0e0 <_dtoa_r+0x628>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	f7f2 f9f8 	bl	80002cc <__adddf3>
 800dedc:	46d0      	mov	r8, sl
 800dede:	46d9      	mov	r9, fp
 800dee0:	4682      	mov	sl, r0
 800dee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dee6:	2e00      	cmp	r6, #0
 800dee8:	d158      	bne.n	800df9c <_dtoa_r+0x4e4>
 800deea:	4b7e      	ldr	r3, [pc, #504]	; (800e0e4 <_dtoa_r+0x62c>)
 800deec:	2200      	movs	r2, #0
 800deee:	4640      	mov	r0, r8
 800def0:	4649      	mov	r1, r9
 800def2:	f7f2 f9e9 	bl	80002c8 <__aeabi_dsub>
 800def6:	4652      	mov	r2, sl
 800def8:	465b      	mov	r3, fp
 800defa:	4680      	mov	r8, r0
 800defc:	4689      	mov	r9, r1
 800defe:	f7f2 fe2b 	bl	8000b58 <__aeabi_dcmpgt>
 800df02:	2800      	cmp	r0, #0
 800df04:	f040 8295 	bne.w	800e432 <_dtoa_r+0x97a>
 800df08:	4652      	mov	r2, sl
 800df0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800df0e:	4640      	mov	r0, r8
 800df10:	4649      	mov	r1, r9
 800df12:	f7f2 fe03 	bl	8000b1c <__aeabi_dcmplt>
 800df16:	2800      	cmp	r0, #0
 800df18:	f040 8289 	bne.w	800e42e <_dtoa_r+0x976>
 800df1c:	ec5b ab19 	vmov	sl, fp, d9
 800df20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df22:	2b00      	cmp	r3, #0
 800df24:	f2c0 8148 	blt.w	800e1b8 <_dtoa_r+0x700>
 800df28:	9a00      	ldr	r2, [sp, #0]
 800df2a:	2a0e      	cmp	r2, #14
 800df2c:	f300 8144 	bgt.w	800e1b8 <_dtoa_r+0x700>
 800df30:	4b67      	ldr	r3, [pc, #412]	; (800e0d0 <_dtoa_r+0x618>)
 800df32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df36:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f280 80d5 	bge.w	800e0ec <_dtoa_r+0x634>
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f300 80d1 	bgt.w	800e0ec <_dtoa_r+0x634>
 800df4a:	f040 826f 	bne.w	800e42c <_dtoa_r+0x974>
 800df4e:	4b65      	ldr	r3, [pc, #404]	; (800e0e4 <_dtoa_r+0x62c>)
 800df50:	2200      	movs	r2, #0
 800df52:	4640      	mov	r0, r8
 800df54:	4649      	mov	r1, r9
 800df56:	f7f2 fb6f 	bl	8000638 <__aeabi_dmul>
 800df5a:	4652      	mov	r2, sl
 800df5c:	465b      	mov	r3, fp
 800df5e:	f7f2 fdf1 	bl	8000b44 <__aeabi_dcmpge>
 800df62:	9e03      	ldr	r6, [sp, #12]
 800df64:	4637      	mov	r7, r6
 800df66:	2800      	cmp	r0, #0
 800df68:	f040 8245 	bne.w	800e3f6 <_dtoa_r+0x93e>
 800df6c:	9d01      	ldr	r5, [sp, #4]
 800df6e:	2331      	movs	r3, #49	; 0x31
 800df70:	f805 3b01 	strb.w	r3, [r5], #1
 800df74:	9b00      	ldr	r3, [sp, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	e240      	b.n	800e3fe <_dtoa_r+0x946>
 800df7c:	07f2      	lsls	r2, r6, #31
 800df7e:	d505      	bpl.n	800df8c <_dtoa_r+0x4d4>
 800df80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df84:	f7f2 fb58 	bl	8000638 <__aeabi_dmul>
 800df88:	3501      	adds	r5, #1
 800df8a:	2301      	movs	r3, #1
 800df8c:	1076      	asrs	r6, r6, #1
 800df8e:	3708      	adds	r7, #8
 800df90:	e777      	b.n	800de82 <_dtoa_r+0x3ca>
 800df92:	2502      	movs	r5, #2
 800df94:	e779      	b.n	800de8a <_dtoa_r+0x3d2>
 800df96:	9f00      	ldr	r7, [sp, #0]
 800df98:	9e03      	ldr	r6, [sp, #12]
 800df9a:	e794      	b.n	800dec6 <_dtoa_r+0x40e>
 800df9c:	9901      	ldr	r1, [sp, #4]
 800df9e:	4b4c      	ldr	r3, [pc, #304]	; (800e0d0 <_dtoa_r+0x618>)
 800dfa0:	4431      	add	r1, r6
 800dfa2:	910d      	str	r1, [sp, #52]	; 0x34
 800dfa4:	9908      	ldr	r1, [sp, #32]
 800dfa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dfaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfae:	2900      	cmp	r1, #0
 800dfb0:	d043      	beq.n	800e03a <_dtoa_r+0x582>
 800dfb2:	494d      	ldr	r1, [pc, #308]	; (800e0e8 <_dtoa_r+0x630>)
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	f7f2 fc69 	bl	800088c <__aeabi_ddiv>
 800dfba:	4652      	mov	r2, sl
 800dfbc:	465b      	mov	r3, fp
 800dfbe:	f7f2 f983 	bl	80002c8 <__aeabi_dsub>
 800dfc2:	9d01      	ldr	r5, [sp, #4]
 800dfc4:	4682      	mov	sl, r0
 800dfc6:	468b      	mov	fp, r1
 800dfc8:	4649      	mov	r1, r9
 800dfca:	4640      	mov	r0, r8
 800dfcc:	f7f2 fde4 	bl	8000b98 <__aeabi_d2iz>
 800dfd0:	4606      	mov	r6, r0
 800dfd2:	f7f2 fac7 	bl	8000564 <__aeabi_i2d>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4640      	mov	r0, r8
 800dfdc:	4649      	mov	r1, r9
 800dfde:	f7f2 f973 	bl	80002c8 <__aeabi_dsub>
 800dfe2:	3630      	adds	r6, #48	; 0x30
 800dfe4:	f805 6b01 	strb.w	r6, [r5], #1
 800dfe8:	4652      	mov	r2, sl
 800dfea:	465b      	mov	r3, fp
 800dfec:	4680      	mov	r8, r0
 800dfee:	4689      	mov	r9, r1
 800dff0:	f7f2 fd94 	bl	8000b1c <__aeabi_dcmplt>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d163      	bne.n	800e0c0 <_dtoa_r+0x608>
 800dff8:	4642      	mov	r2, r8
 800dffa:	464b      	mov	r3, r9
 800dffc:	4936      	ldr	r1, [pc, #216]	; (800e0d8 <_dtoa_r+0x620>)
 800dffe:	2000      	movs	r0, #0
 800e000:	f7f2 f962 	bl	80002c8 <__aeabi_dsub>
 800e004:	4652      	mov	r2, sl
 800e006:	465b      	mov	r3, fp
 800e008:	f7f2 fd88 	bl	8000b1c <__aeabi_dcmplt>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	f040 80b5 	bne.w	800e17c <_dtoa_r+0x6c4>
 800e012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e014:	429d      	cmp	r5, r3
 800e016:	d081      	beq.n	800df1c <_dtoa_r+0x464>
 800e018:	4b30      	ldr	r3, [pc, #192]	; (800e0dc <_dtoa_r+0x624>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	4650      	mov	r0, sl
 800e01e:	4659      	mov	r1, fp
 800e020:	f7f2 fb0a 	bl	8000638 <__aeabi_dmul>
 800e024:	4b2d      	ldr	r3, [pc, #180]	; (800e0dc <_dtoa_r+0x624>)
 800e026:	4682      	mov	sl, r0
 800e028:	468b      	mov	fp, r1
 800e02a:	4640      	mov	r0, r8
 800e02c:	4649      	mov	r1, r9
 800e02e:	2200      	movs	r2, #0
 800e030:	f7f2 fb02 	bl	8000638 <__aeabi_dmul>
 800e034:	4680      	mov	r8, r0
 800e036:	4689      	mov	r9, r1
 800e038:	e7c6      	b.n	800dfc8 <_dtoa_r+0x510>
 800e03a:	4650      	mov	r0, sl
 800e03c:	4659      	mov	r1, fp
 800e03e:	f7f2 fafb 	bl	8000638 <__aeabi_dmul>
 800e042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e044:	9d01      	ldr	r5, [sp, #4]
 800e046:	930f      	str	r3, [sp, #60]	; 0x3c
 800e048:	4682      	mov	sl, r0
 800e04a:	468b      	mov	fp, r1
 800e04c:	4649      	mov	r1, r9
 800e04e:	4640      	mov	r0, r8
 800e050:	f7f2 fda2 	bl	8000b98 <__aeabi_d2iz>
 800e054:	4606      	mov	r6, r0
 800e056:	f7f2 fa85 	bl	8000564 <__aeabi_i2d>
 800e05a:	3630      	adds	r6, #48	; 0x30
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	4640      	mov	r0, r8
 800e062:	4649      	mov	r1, r9
 800e064:	f7f2 f930 	bl	80002c8 <__aeabi_dsub>
 800e068:	f805 6b01 	strb.w	r6, [r5], #1
 800e06c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e06e:	429d      	cmp	r5, r3
 800e070:	4680      	mov	r8, r0
 800e072:	4689      	mov	r9, r1
 800e074:	f04f 0200 	mov.w	r2, #0
 800e078:	d124      	bne.n	800e0c4 <_dtoa_r+0x60c>
 800e07a:	4b1b      	ldr	r3, [pc, #108]	; (800e0e8 <_dtoa_r+0x630>)
 800e07c:	4650      	mov	r0, sl
 800e07e:	4659      	mov	r1, fp
 800e080:	f7f2 f924 	bl	80002cc <__adddf3>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4640      	mov	r0, r8
 800e08a:	4649      	mov	r1, r9
 800e08c:	f7f2 fd64 	bl	8000b58 <__aeabi_dcmpgt>
 800e090:	2800      	cmp	r0, #0
 800e092:	d173      	bne.n	800e17c <_dtoa_r+0x6c4>
 800e094:	4652      	mov	r2, sl
 800e096:	465b      	mov	r3, fp
 800e098:	4913      	ldr	r1, [pc, #76]	; (800e0e8 <_dtoa_r+0x630>)
 800e09a:	2000      	movs	r0, #0
 800e09c:	f7f2 f914 	bl	80002c8 <__aeabi_dsub>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	f7f2 fd38 	bl	8000b1c <__aeabi_dcmplt>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	f43f af35 	beq.w	800df1c <_dtoa_r+0x464>
 800e0b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e0b4:	1e6b      	subs	r3, r5, #1
 800e0b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e0bc:	2b30      	cmp	r3, #48	; 0x30
 800e0be:	d0f8      	beq.n	800e0b2 <_dtoa_r+0x5fa>
 800e0c0:	9700      	str	r7, [sp, #0]
 800e0c2:	e049      	b.n	800e158 <_dtoa_r+0x6a0>
 800e0c4:	4b05      	ldr	r3, [pc, #20]	; (800e0dc <_dtoa_r+0x624>)
 800e0c6:	f7f2 fab7 	bl	8000638 <__aeabi_dmul>
 800e0ca:	4680      	mov	r8, r0
 800e0cc:	4689      	mov	r9, r1
 800e0ce:	e7bd      	b.n	800e04c <_dtoa_r+0x594>
 800e0d0:	080132d0 	.word	0x080132d0
 800e0d4:	080132a8 	.word	0x080132a8
 800e0d8:	3ff00000 	.word	0x3ff00000
 800e0dc:	40240000 	.word	0x40240000
 800e0e0:	401c0000 	.word	0x401c0000
 800e0e4:	40140000 	.word	0x40140000
 800e0e8:	3fe00000 	.word	0x3fe00000
 800e0ec:	9d01      	ldr	r5, [sp, #4]
 800e0ee:	4656      	mov	r6, sl
 800e0f0:	465f      	mov	r7, fp
 800e0f2:	4642      	mov	r2, r8
 800e0f4:	464b      	mov	r3, r9
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	4639      	mov	r1, r7
 800e0fa:	f7f2 fbc7 	bl	800088c <__aeabi_ddiv>
 800e0fe:	f7f2 fd4b 	bl	8000b98 <__aeabi_d2iz>
 800e102:	4682      	mov	sl, r0
 800e104:	f7f2 fa2e 	bl	8000564 <__aeabi_i2d>
 800e108:	4642      	mov	r2, r8
 800e10a:	464b      	mov	r3, r9
 800e10c:	f7f2 fa94 	bl	8000638 <__aeabi_dmul>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	4630      	mov	r0, r6
 800e116:	4639      	mov	r1, r7
 800e118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e11c:	f7f2 f8d4 	bl	80002c8 <__aeabi_dsub>
 800e120:	f805 6b01 	strb.w	r6, [r5], #1
 800e124:	9e01      	ldr	r6, [sp, #4]
 800e126:	9f03      	ldr	r7, [sp, #12]
 800e128:	1bae      	subs	r6, r5, r6
 800e12a:	42b7      	cmp	r7, r6
 800e12c:	4602      	mov	r2, r0
 800e12e:	460b      	mov	r3, r1
 800e130:	d135      	bne.n	800e19e <_dtoa_r+0x6e6>
 800e132:	f7f2 f8cb 	bl	80002cc <__adddf3>
 800e136:	4642      	mov	r2, r8
 800e138:	464b      	mov	r3, r9
 800e13a:	4606      	mov	r6, r0
 800e13c:	460f      	mov	r7, r1
 800e13e:	f7f2 fd0b 	bl	8000b58 <__aeabi_dcmpgt>
 800e142:	b9d0      	cbnz	r0, 800e17a <_dtoa_r+0x6c2>
 800e144:	4642      	mov	r2, r8
 800e146:	464b      	mov	r3, r9
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	f7f2 fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 800e150:	b110      	cbz	r0, 800e158 <_dtoa_r+0x6a0>
 800e152:	f01a 0f01 	tst.w	sl, #1
 800e156:	d110      	bne.n	800e17a <_dtoa_r+0x6c2>
 800e158:	4620      	mov	r0, r4
 800e15a:	ee18 1a10 	vmov	r1, s16
 800e15e:	f000 fd41 	bl	800ebe4 <_Bfree>
 800e162:	2300      	movs	r3, #0
 800e164:	9800      	ldr	r0, [sp, #0]
 800e166:	702b      	strb	r3, [r5, #0]
 800e168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e16a:	3001      	adds	r0, #1
 800e16c:	6018      	str	r0, [r3, #0]
 800e16e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e170:	2b00      	cmp	r3, #0
 800e172:	f43f acf1 	beq.w	800db58 <_dtoa_r+0xa0>
 800e176:	601d      	str	r5, [r3, #0]
 800e178:	e4ee      	b.n	800db58 <_dtoa_r+0xa0>
 800e17a:	9f00      	ldr	r7, [sp, #0]
 800e17c:	462b      	mov	r3, r5
 800e17e:	461d      	mov	r5, r3
 800e180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e184:	2a39      	cmp	r2, #57	; 0x39
 800e186:	d106      	bne.n	800e196 <_dtoa_r+0x6de>
 800e188:	9a01      	ldr	r2, [sp, #4]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d1f7      	bne.n	800e17e <_dtoa_r+0x6c6>
 800e18e:	9901      	ldr	r1, [sp, #4]
 800e190:	2230      	movs	r2, #48	; 0x30
 800e192:	3701      	adds	r7, #1
 800e194:	700a      	strb	r2, [r1, #0]
 800e196:	781a      	ldrb	r2, [r3, #0]
 800e198:	3201      	adds	r2, #1
 800e19a:	701a      	strb	r2, [r3, #0]
 800e19c:	e790      	b.n	800e0c0 <_dtoa_r+0x608>
 800e19e:	4ba6      	ldr	r3, [pc, #664]	; (800e438 <_dtoa_r+0x980>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f7f2 fa49 	bl	8000638 <__aeabi_dmul>
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460f      	mov	r7, r1
 800e1ae:	f7f2 fcab 	bl	8000b08 <__aeabi_dcmpeq>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d09d      	beq.n	800e0f2 <_dtoa_r+0x63a>
 800e1b6:	e7cf      	b.n	800e158 <_dtoa_r+0x6a0>
 800e1b8:	9a08      	ldr	r2, [sp, #32]
 800e1ba:	2a00      	cmp	r2, #0
 800e1bc:	f000 80d7 	beq.w	800e36e <_dtoa_r+0x8b6>
 800e1c0:	9a06      	ldr	r2, [sp, #24]
 800e1c2:	2a01      	cmp	r2, #1
 800e1c4:	f300 80ba 	bgt.w	800e33c <_dtoa_r+0x884>
 800e1c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1ca:	2a00      	cmp	r2, #0
 800e1cc:	f000 80b2 	beq.w	800e334 <_dtoa_r+0x87c>
 800e1d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1d4:	9e07      	ldr	r6, [sp, #28]
 800e1d6:	9d04      	ldr	r5, [sp, #16]
 800e1d8:	9a04      	ldr	r2, [sp, #16]
 800e1da:	441a      	add	r2, r3
 800e1dc:	9204      	str	r2, [sp, #16]
 800e1de:	9a05      	ldr	r2, [sp, #20]
 800e1e0:	2101      	movs	r1, #1
 800e1e2:	441a      	add	r2, r3
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	9205      	str	r2, [sp, #20]
 800e1e8:	f000 fdb4 	bl	800ed54 <__i2b>
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	2d00      	cmp	r5, #0
 800e1f0:	dd0c      	ble.n	800e20c <_dtoa_r+0x754>
 800e1f2:	9b05      	ldr	r3, [sp, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dd09      	ble.n	800e20c <_dtoa_r+0x754>
 800e1f8:	42ab      	cmp	r3, r5
 800e1fa:	9a04      	ldr	r2, [sp, #16]
 800e1fc:	bfa8      	it	ge
 800e1fe:	462b      	movge	r3, r5
 800e200:	1ad2      	subs	r2, r2, r3
 800e202:	9204      	str	r2, [sp, #16]
 800e204:	9a05      	ldr	r2, [sp, #20]
 800e206:	1aed      	subs	r5, r5, r3
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	9305      	str	r3, [sp, #20]
 800e20c:	9b07      	ldr	r3, [sp, #28]
 800e20e:	b31b      	cbz	r3, 800e258 <_dtoa_r+0x7a0>
 800e210:	9b08      	ldr	r3, [sp, #32]
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 80af 	beq.w	800e376 <_dtoa_r+0x8be>
 800e218:	2e00      	cmp	r6, #0
 800e21a:	dd13      	ble.n	800e244 <_dtoa_r+0x78c>
 800e21c:	4639      	mov	r1, r7
 800e21e:	4632      	mov	r2, r6
 800e220:	4620      	mov	r0, r4
 800e222:	f000 fe57 	bl	800eed4 <__pow5mult>
 800e226:	ee18 2a10 	vmov	r2, s16
 800e22a:	4601      	mov	r1, r0
 800e22c:	4607      	mov	r7, r0
 800e22e:	4620      	mov	r0, r4
 800e230:	f000 fda6 	bl	800ed80 <__multiply>
 800e234:	ee18 1a10 	vmov	r1, s16
 800e238:	4680      	mov	r8, r0
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 fcd2 	bl	800ebe4 <_Bfree>
 800e240:	ee08 8a10 	vmov	s16, r8
 800e244:	9b07      	ldr	r3, [sp, #28]
 800e246:	1b9a      	subs	r2, r3, r6
 800e248:	d006      	beq.n	800e258 <_dtoa_r+0x7a0>
 800e24a:	ee18 1a10 	vmov	r1, s16
 800e24e:	4620      	mov	r0, r4
 800e250:	f000 fe40 	bl	800eed4 <__pow5mult>
 800e254:	ee08 0a10 	vmov	s16, r0
 800e258:	2101      	movs	r1, #1
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 fd7a 	bl	800ed54 <__i2b>
 800e260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e262:	2b00      	cmp	r3, #0
 800e264:	4606      	mov	r6, r0
 800e266:	f340 8088 	ble.w	800e37a <_dtoa_r+0x8c2>
 800e26a:	461a      	mov	r2, r3
 800e26c:	4601      	mov	r1, r0
 800e26e:	4620      	mov	r0, r4
 800e270:	f000 fe30 	bl	800eed4 <__pow5mult>
 800e274:	9b06      	ldr	r3, [sp, #24]
 800e276:	2b01      	cmp	r3, #1
 800e278:	4606      	mov	r6, r0
 800e27a:	f340 8081 	ble.w	800e380 <_dtoa_r+0x8c8>
 800e27e:	f04f 0800 	mov.w	r8, #0
 800e282:	6933      	ldr	r3, [r6, #16]
 800e284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e288:	6918      	ldr	r0, [r3, #16]
 800e28a:	f000 fd13 	bl	800ecb4 <__hi0bits>
 800e28e:	f1c0 0020 	rsb	r0, r0, #32
 800e292:	9b05      	ldr	r3, [sp, #20]
 800e294:	4418      	add	r0, r3
 800e296:	f010 001f 	ands.w	r0, r0, #31
 800e29a:	f000 8092 	beq.w	800e3c2 <_dtoa_r+0x90a>
 800e29e:	f1c0 0320 	rsb	r3, r0, #32
 800e2a2:	2b04      	cmp	r3, #4
 800e2a4:	f340 808a 	ble.w	800e3bc <_dtoa_r+0x904>
 800e2a8:	f1c0 001c 	rsb	r0, r0, #28
 800e2ac:	9b04      	ldr	r3, [sp, #16]
 800e2ae:	4403      	add	r3, r0
 800e2b0:	9304      	str	r3, [sp, #16]
 800e2b2:	9b05      	ldr	r3, [sp, #20]
 800e2b4:	4403      	add	r3, r0
 800e2b6:	4405      	add	r5, r0
 800e2b8:	9305      	str	r3, [sp, #20]
 800e2ba:	9b04      	ldr	r3, [sp, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	dd07      	ble.n	800e2d0 <_dtoa_r+0x818>
 800e2c0:	ee18 1a10 	vmov	r1, s16
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f000 fe5e 	bl	800ef88 <__lshift>
 800e2cc:	ee08 0a10 	vmov	s16, r0
 800e2d0:	9b05      	ldr	r3, [sp, #20]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	dd05      	ble.n	800e2e2 <_dtoa_r+0x82a>
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f000 fe54 	bl	800ef88 <__lshift>
 800e2e0:	4606      	mov	r6, r0
 800e2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d06e      	beq.n	800e3c6 <_dtoa_r+0x90e>
 800e2e8:	ee18 0a10 	vmov	r0, s16
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	f000 febb 	bl	800f068 <__mcmp>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	da67      	bge.n	800e3c6 <_dtoa_r+0x90e>
 800e2f6:	9b00      	ldr	r3, [sp, #0]
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	ee18 1a10 	vmov	r1, s16
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	220a      	movs	r2, #10
 800e302:	2300      	movs	r3, #0
 800e304:	4620      	mov	r0, r4
 800e306:	f000 fc8f 	bl	800ec28 <__multadd>
 800e30a:	9b08      	ldr	r3, [sp, #32]
 800e30c:	ee08 0a10 	vmov	s16, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 81b1 	beq.w	800e678 <_dtoa_r+0xbc0>
 800e316:	2300      	movs	r3, #0
 800e318:	4639      	mov	r1, r7
 800e31a:	220a      	movs	r2, #10
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 fc83 	bl	800ec28 <__multadd>
 800e322:	9b02      	ldr	r3, [sp, #8]
 800e324:	2b00      	cmp	r3, #0
 800e326:	4607      	mov	r7, r0
 800e328:	f300 808e 	bgt.w	800e448 <_dtoa_r+0x990>
 800e32c:	9b06      	ldr	r3, [sp, #24]
 800e32e:	2b02      	cmp	r3, #2
 800e330:	dc51      	bgt.n	800e3d6 <_dtoa_r+0x91e>
 800e332:	e089      	b.n	800e448 <_dtoa_r+0x990>
 800e334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e33a:	e74b      	b.n	800e1d4 <_dtoa_r+0x71c>
 800e33c:	9b03      	ldr	r3, [sp, #12]
 800e33e:	1e5e      	subs	r6, r3, #1
 800e340:	9b07      	ldr	r3, [sp, #28]
 800e342:	42b3      	cmp	r3, r6
 800e344:	bfbf      	itttt	lt
 800e346:	9b07      	ldrlt	r3, [sp, #28]
 800e348:	9607      	strlt	r6, [sp, #28]
 800e34a:	1af2      	sublt	r2, r6, r3
 800e34c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e34e:	bfb6      	itet	lt
 800e350:	189b      	addlt	r3, r3, r2
 800e352:	1b9e      	subge	r6, r3, r6
 800e354:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e356:	9b03      	ldr	r3, [sp, #12]
 800e358:	bfb8      	it	lt
 800e35a:	2600      	movlt	r6, #0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bfb7      	itett	lt
 800e360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e368:	1a9d      	sublt	r5, r3, r2
 800e36a:	2300      	movlt	r3, #0
 800e36c:	e734      	b.n	800e1d8 <_dtoa_r+0x720>
 800e36e:	9e07      	ldr	r6, [sp, #28]
 800e370:	9d04      	ldr	r5, [sp, #16]
 800e372:	9f08      	ldr	r7, [sp, #32]
 800e374:	e73b      	b.n	800e1ee <_dtoa_r+0x736>
 800e376:	9a07      	ldr	r2, [sp, #28]
 800e378:	e767      	b.n	800e24a <_dtoa_r+0x792>
 800e37a:	9b06      	ldr	r3, [sp, #24]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	dc18      	bgt.n	800e3b2 <_dtoa_r+0x8fa>
 800e380:	f1ba 0f00 	cmp.w	sl, #0
 800e384:	d115      	bne.n	800e3b2 <_dtoa_r+0x8fa>
 800e386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e38a:	b993      	cbnz	r3, 800e3b2 <_dtoa_r+0x8fa>
 800e38c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e390:	0d1b      	lsrs	r3, r3, #20
 800e392:	051b      	lsls	r3, r3, #20
 800e394:	b183      	cbz	r3, 800e3b8 <_dtoa_r+0x900>
 800e396:	9b04      	ldr	r3, [sp, #16]
 800e398:	3301      	adds	r3, #1
 800e39a:	9304      	str	r3, [sp, #16]
 800e39c:	9b05      	ldr	r3, [sp, #20]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	9305      	str	r3, [sp, #20]
 800e3a2:	f04f 0801 	mov.w	r8, #1
 800e3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f47f af6a 	bne.w	800e282 <_dtoa_r+0x7ca>
 800e3ae:	2001      	movs	r0, #1
 800e3b0:	e76f      	b.n	800e292 <_dtoa_r+0x7da>
 800e3b2:	f04f 0800 	mov.w	r8, #0
 800e3b6:	e7f6      	b.n	800e3a6 <_dtoa_r+0x8ee>
 800e3b8:	4698      	mov	r8, r3
 800e3ba:	e7f4      	b.n	800e3a6 <_dtoa_r+0x8ee>
 800e3bc:	f43f af7d 	beq.w	800e2ba <_dtoa_r+0x802>
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	301c      	adds	r0, #28
 800e3c4:	e772      	b.n	800e2ac <_dtoa_r+0x7f4>
 800e3c6:	9b03      	ldr	r3, [sp, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	dc37      	bgt.n	800e43c <_dtoa_r+0x984>
 800e3cc:	9b06      	ldr	r3, [sp, #24]
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	dd34      	ble.n	800e43c <_dtoa_r+0x984>
 800e3d2:	9b03      	ldr	r3, [sp, #12]
 800e3d4:	9302      	str	r3, [sp, #8]
 800e3d6:	9b02      	ldr	r3, [sp, #8]
 800e3d8:	b96b      	cbnz	r3, 800e3f6 <_dtoa_r+0x93e>
 800e3da:	4631      	mov	r1, r6
 800e3dc:	2205      	movs	r2, #5
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f000 fc22 	bl	800ec28 <__multadd>
 800e3e4:	4601      	mov	r1, r0
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	ee18 0a10 	vmov	r0, s16
 800e3ec:	f000 fe3c 	bl	800f068 <__mcmp>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	f73f adbb 	bgt.w	800df6c <_dtoa_r+0x4b4>
 800e3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f8:	9d01      	ldr	r5, [sp, #4]
 800e3fa:	43db      	mvns	r3, r3
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	f04f 0800 	mov.w	r8, #0
 800e402:	4631      	mov	r1, r6
 800e404:	4620      	mov	r0, r4
 800e406:	f000 fbed 	bl	800ebe4 <_Bfree>
 800e40a:	2f00      	cmp	r7, #0
 800e40c:	f43f aea4 	beq.w	800e158 <_dtoa_r+0x6a0>
 800e410:	f1b8 0f00 	cmp.w	r8, #0
 800e414:	d005      	beq.n	800e422 <_dtoa_r+0x96a>
 800e416:	45b8      	cmp	r8, r7
 800e418:	d003      	beq.n	800e422 <_dtoa_r+0x96a>
 800e41a:	4641      	mov	r1, r8
 800e41c:	4620      	mov	r0, r4
 800e41e:	f000 fbe1 	bl	800ebe4 <_Bfree>
 800e422:	4639      	mov	r1, r7
 800e424:	4620      	mov	r0, r4
 800e426:	f000 fbdd 	bl	800ebe4 <_Bfree>
 800e42a:	e695      	b.n	800e158 <_dtoa_r+0x6a0>
 800e42c:	2600      	movs	r6, #0
 800e42e:	4637      	mov	r7, r6
 800e430:	e7e1      	b.n	800e3f6 <_dtoa_r+0x93e>
 800e432:	9700      	str	r7, [sp, #0]
 800e434:	4637      	mov	r7, r6
 800e436:	e599      	b.n	800df6c <_dtoa_r+0x4b4>
 800e438:	40240000 	.word	0x40240000
 800e43c:	9b08      	ldr	r3, [sp, #32]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f000 80ca 	beq.w	800e5d8 <_dtoa_r+0xb20>
 800e444:	9b03      	ldr	r3, [sp, #12]
 800e446:	9302      	str	r3, [sp, #8]
 800e448:	2d00      	cmp	r5, #0
 800e44a:	dd05      	ble.n	800e458 <_dtoa_r+0x9a0>
 800e44c:	4639      	mov	r1, r7
 800e44e:	462a      	mov	r2, r5
 800e450:	4620      	mov	r0, r4
 800e452:	f000 fd99 	bl	800ef88 <__lshift>
 800e456:	4607      	mov	r7, r0
 800e458:	f1b8 0f00 	cmp.w	r8, #0
 800e45c:	d05b      	beq.n	800e516 <_dtoa_r+0xa5e>
 800e45e:	6879      	ldr	r1, [r7, #4]
 800e460:	4620      	mov	r0, r4
 800e462:	f000 fb7f 	bl	800eb64 <_Balloc>
 800e466:	4605      	mov	r5, r0
 800e468:	b928      	cbnz	r0, 800e476 <_dtoa_r+0x9be>
 800e46a:	4b87      	ldr	r3, [pc, #540]	; (800e688 <_dtoa_r+0xbd0>)
 800e46c:	4602      	mov	r2, r0
 800e46e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e472:	f7ff bb3b 	b.w	800daec <_dtoa_r+0x34>
 800e476:	693a      	ldr	r2, [r7, #16]
 800e478:	3202      	adds	r2, #2
 800e47a:	0092      	lsls	r2, r2, #2
 800e47c:	f107 010c 	add.w	r1, r7, #12
 800e480:	300c      	adds	r0, #12
 800e482:	f000 fb61 	bl	800eb48 <memcpy>
 800e486:	2201      	movs	r2, #1
 800e488:	4629      	mov	r1, r5
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 fd7c 	bl	800ef88 <__lshift>
 800e490:	9b01      	ldr	r3, [sp, #4]
 800e492:	f103 0901 	add.w	r9, r3, #1
 800e496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e49a:	4413      	add	r3, r2
 800e49c:	9305      	str	r3, [sp, #20]
 800e49e:	f00a 0301 	and.w	r3, sl, #1
 800e4a2:	46b8      	mov	r8, r7
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	4607      	mov	r7, r0
 800e4a8:	4631      	mov	r1, r6
 800e4aa:	ee18 0a10 	vmov	r0, s16
 800e4ae:	f7ff fa77 	bl	800d9a0 <quorem>
 800e4b2:	4641      	mov	r1, r8
 800e4b4:	9002      	str	r0, [sp, #8]
 800e4b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e4ba:	ee18 0a10 	vmov	r0, s16
 800e4be:	f000 fdd3 	bl	800f068 <__mcmp>
 800e4c2:	463a      	mov	r2, r7
 800e4c4:	9003      	str	r0, [sp, #12]
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f000 fde9 	bl	800f0a0 <__mdiff>
 800e4ce:	68c2      	ldr	r2, [r0, #12]
 800e4d0:	f109 3bff 	add.w	fp, r9, #4294967295
 800e4d4:	4605      	mov	r5, r0
 800e4d6:	bb02      	cbnz	r2, 800e51a <_dtoa_r+0xa62>
 800e4d8:	4601      	mov	r1, r0
 800e4da:	ee18 0a10 	vmov	r0, s16
 800e4de:	f000 fdc3 	bl	800f068 <__mcmp>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	9207      	str	r2, [sp, #28]
 800e4ea:	f000 fb7b 	bl	800ebe4 <_Bfree>
 800e4ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e4f2:	ea43 0102 	orr.w	r1, r3, r2
 800e4f6:	9b04      	ldr	r3, [sp, #16]
 800e4f8:	430b      	orrs	r3, r1
 800e4fa:	464d      	mov	r5, r9
 800e4fc:	d10f      	bne.n	800e51e <_dtoa_r+0xa66>
 800e4fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e502:	d02a      	beq.n	800e55a <_dtoa_r+0xaa2>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	dd02      	ble.n	800e510 <_dtoa_r+0xa58>
 800e50a:	9b02      	ldr	r3, [sp, #8]
 800e50c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e510:	f88b a000 	strb.w	sl, [fp]
 800e514:	e775      	b.n	800e402 <_dtoa_r+0x94a>
 800e516:	4638      	mov	r0, r7
 800e518:	e7ba      	b.n	800e490 <_dtoa_r+0x9d8>
 800e51a:	2201      	movs	r2, #1
 800e51c:	e7e2      	b.n	800e4e4 <_dtoa_r+0xa2c>
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	db04      	blt.n	800e52e <_dtoa_r+0xa76>
 800e524:	9906      	ldr	r1, [sp, #24]
 800e526:	430b      	orrs	r3, r1
 800e528:	9904      	ldr	r1, [sp, #16]
 800e52a:	430b      	orrs	r3, r1
 800e52c:	d122      	bne.n	800e574 <_dtoa_r+0xabc>
 800e52e:	2a00      	cmp	r2, #0
 800e530:	ddee      	ble.n	800e510 <_dtoa_r+0xa58>
 800e532:	ee18 1a10 	vmov	r1, s16
 800e536:	2201      	movs	r2, #1
 800e538:	4620      	mov	r0, r4
 800e53a:	f000 fd25 	bl	800ef88 <__lshift>
 800e53e:	4631      	mov	r1, r6
 800e540:	ee08 0a10 	vmov	s16, r0
 800e544:	f000 fd90 	bl	800f068 <__mcmp>
 800e548:	2800      	cmp	r0, #0
 800e54a:	dc03      	bgt.n	800e554 <_dtoa_r+0xa9c>
 800e54c:	d1e0      	bne.n	800e510 <_dtoa_r+0xa58>
 800e54e:	f01a 0f01 	tst.w	sl, #1
 800e552:	d0dd      	beq.n	800e510 <_dtoa_r+0xa58>
 800e554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e558:	d1d7      	bne.n	800e50a <_dtoa_r+0xa52>
 800e55a:	2339      	movs	r3, #57	; 0x39
 800e55c:	f88b 3000 	strb.w	r3, [fp]
 800e560:	462b      	mov	r3, r5
 800e562:	461d      	mov	r5, r3
 800e564:	3b01      	subs	r3, #1
 800e566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e56a:	2a39      	cmp	r2, #57	; 0x39
 800e56c:	d071      	beq.n	800e652 <_dtoa_r+0xb9a>
 800e56e:	3201      	adds	r2, #1
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	e746      	b.n	800e402 <_dtoa_r+0x94a>
 800e574:	2a00      	cmp	r2, #0
 800e576:	dd07      	ble.n	800e588 <_dtoa_r+0xad0>
 800e578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e57c:	d0ed      	beq.n	800e55a <_dtoa_r+0xaa2>
 800e57e:	f10a 0301 	add.w	r3, sl, #1
 800e582:	f88b 3000 	strb.w	r3, [fp]
 800e586:	e73c      	b.n	800e402 <_dtoa_r+0x94a>
 800e588:	9b05      	ldr	r3, [sp, #20]
 800e58a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e58e:	4599      	cmp	r9, r3
 800e590:	d047      	beq.n	800e622 <_dtoa_r+0xb6a>
 800e592:	ee18 1a10 	vmov	r1, s16
 800e596:	2300      	movs	r3, #0
 800e598:	220a      	movs	r2, #10
 800e59a:	4620      	mov	r0, r4
 800e59c:	f000 fb44 	bl	800ec28 <__multadd>
 800e5a0:	45b8      	cmp	r8, r7
 800e5a2:	ee08 0a10 	vmov	s16, r0
 800e5a6:	f04f 0300 	mov.w	r3, #0
 800e5aa:	f04f 020a 	mov.w	r2, #10
 800e5ae:	4641      	mov	r1, r8
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	d106      	bne.n	800e5c2 <_dtoa_r+0xb0a>
 800e5b4:	f000 fb38 	bl	800ec28 <__multadd>
 800e5b8:	4680      	mov	r8, r0
 800e5ba:	4607      	mov	r7, r0
 800e5bc:	f109 0901 	add.w	r9, r9, #1
 800e5c0:	e772      	b.n	800e4a8 <_dtoa_r+0x9f0>
 800e5c2:	f000 fb31 	bl	800ec28 <__multadd>
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	4680      	mov	r8, r0
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	220a      	movs	r2, #10
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f000 fb2a 	bl	800ec28 <__multadd>
 800e5d4:	4607      	mov	r7, r0
 800e5d6:	e7f1      	b.n	800e5bc <_dtoa_r+0xb04>
 800e5d8:	9b03      	ldr	r3, [sp, #12]
 800e5da:	9302      	str	r3, [sp, #8]
 800e5dc:	9d01      	ldr	r5, [sp, #4]
 800e5de:	ee18 0a10 	vmov	r0, s16
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	f7ff f9dc 	bl	800d9a0 <quorem>
 800e5e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e5ec:	9b01      	ldr	r3, [sp, #4]
 800e5ee:	f805 ab01 	strb.w	sl, [r5], #1
 800e5f2:	1aea      	subs	r2, r5, r3
 800e5f4:	9b02      	ldr	r3, [sp, #8]
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	dd09      	ble.n	800e60e <_dtoa_r+0xb56>
 800e5fa:	ee18 1a10 	vmov	r1, s16
 800e5fe:	2300      	movs	r3, #0
 800e600:	220a      	movs	r2, #10
 800e602:	4620      	mov	r0, r4
 800e604:	f000 fb10 	bl	800ec28 <__multadd>
 800e608:	ee08 0a10 	vmov	s16, r0
 800e60c:	e7e7      	b.n	800e5de <_dtoa_r+0xb26>
 800e60e:	9b02      	ldr	r3, [sp, #8]
 800e610:	2b00      	cmp	r3, #0
 800e612:	bfc8      	it	gt
 800e614:	461d      	movgt	r5, r3
 800e616:	9b01      	ldr	r3, [sp, #4]
 800e618:	bfd8      	it	le
 800e61a:	2501      	movle	r5, #1
 800e61c:	441d      	add	r5, r3
 800e61e:	f04f 0800 	mov.w	r8, #0
 800e622:	ee18 1a10 	vmov	r1, s16
 800e626:	2201      	movs	r2, #1
 800e628:	4620      	mov	r0, r4
 800e62a:	f000 fcad 	bl	800ef88 <__lshift>
 800e62e:	4631      	mov	r1, r6
 800e630:	ee08 0a10 	vmov	s16, r0
 800e634:	f000 fd18 	bl	800f068 <__mcmp>
 800e638:	2800      	cmp	r0, #0
 800e63a:	dc91      	bgt.n	800e560 <_dtoa_r+0xaa8>
 800e63c:	d102      	bne.n	800e644 <_dtoa_r+0xb8c>
 800e63e:	f01a 0f01 	tst.w	sl, #1
 800e642:	d18d      	bne.n	800e560 <_dtoa_r+0xaa8>
 800e644:	462b      	mov	r3, r5
 800e646:	461d      	mov	r5, r3
 800e648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e64c:	2a30      	cmp	r2, #48	; 0x30
 800e64e:	d0fa      	beq.n	800e646 <_dtoa_r+0xb8e>
 800e650:	e6d7      	b.n	800e402 <_dtoa_r+0x94a>
 800e652:	9a01      	ldr	r2, [sp, #4]
 800e654:	429a      	cmp	r2, r3
 800e656:	d184      	bne.n	800e562 <_dtoa_r+0xaaa>
 800e658:	9b00      	ldr	r3, [sp, #0]
 800e65a:	3301      	adds	r3, #1
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	2331      	movs	r3, #49	; 0x31
 800e660:	7013      	strb	r3, [r2, #0]
 800e662:	e6ce      	b.n	800e402 <_dtoa_r+0x94a>
 800e664:	4b09      	ldr	r3, [pc, #36]	; (800e68c <_dtoa_r+0xbd4>)
 800e666:	f7ff ba95 	b.w	800db94 <_dtoa_r+0xdc>
 800e66a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f47f aa6e 	bne.w	800db4e <_dtoa_r+0x96>
 800e672:	4b07      	ldr	r3, [pc, #28]	; (800e690 <_dtoa_r+0xbd8>)
 800e674:	f7ff ba8e 	b.w	800db94 <_dtoa_r+0xdc>
 800e678:	9b02      	ldr	r3, [sp, #8]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	dcae      	bgt.n	800e5dc <_dtoa_r+0xb24>
 800e67e:	9b06      	ldr	r3, [sp, #24]
 800e680:	2b02      	cmp	r3, #2
 800e682:	f73f aea8 	bgt.w	800e3d6 <_dtoa_r+0x91e>
 800e686:	e7a9      	b.n	800e5dc <_dtoa_r+0xb24>
 800e688:	080131d5 	.word	0x080131d5
 800e68c:	080133b9 	.word	0x080133b9
 800e690:	08013156 	.word	0x08013156

0800e694 <__sflush_r>:
 800e694:	898a      	ldrh	r2, [r1, #12]
 800e696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69a:	4605      	mov	r5, r0
 800e69c:	0710      	lsls	r0, r2, #28
 800e69e:	460c      	mov	r4, r1
 800e6a0:	d458      	bmi.n	800e754 <__sflush_r+0xc0>
 800e6a2:	684b      	ldr	r3, [r1, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	dc05      	bgt.n	800e6b4 <__sflush_r+0x20>
 800e6a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	dc02      	bgt.n	800e6b4 <__sflush_r+0x20>
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6b6:	2e00      	cmp	r6, #0
 800e6b8:	d0f9      	beq.n	800e6ae <__sflush_r+0x1a>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6c0:	682f      	ldr	r7, [r5, #0]
 800e6c2:	602b      	str	r3, [r5, #0]
 800e6c4:	d032      	beq.n	800e72c <__sflush_r+0x98>
 800e6c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6c8:	89a3      	ldrh	r3, [r4, #12]
 800e6ca:	075a      	lsls	r2, r3, #29
 800e6cc:	d505      	bpl.n	800e6da <__sflush_r+0x46>
 800e6ce:	6863      	ldr	r3, [r4, #4]
 800e6d0:	1ac0      	subs	r0, r0, r3
 800e6d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6d4:	b10b      	cbz	r3, 800e6da <__sflush_r+0x46>
 800e6d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6d8:	1ac0      	subs	r0, r0, r3
 800e6da:	2300      	movs	r3, #0
 800e6dc:	4602      	mov	r2, r0
 800e6de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6e0:	6a21      	ldr	r1, [r4, #32]
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b0      	blx	r6
 800e6e6:	1c43      	adds	r3, r0, #1
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	d106      	bne.n	800e6fa <__sflush_r+0x66>
 800e6ec:	6829      	ldr	r1, [r5, #0]
 800e6ee:	291d      	cmp	r1, #29
 800e6f0:	d82c      	bhi.n	800e74c <__sflush_r+0xb8>
 800e6f2:	4a2a      	ldr	r2, [pc, #168]	; (800e79c <__sflush_r+0x108>)
 800e6f4:	40ca      	lsrs	r2, r1
 800e6f6:	07d6      	lsls	r6, r2, #31
 800e6f8:	d528      	bpl.n	800e74c <__sflush_r+0xb8>
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	6062      	str	r2, [r4, #4]
 800e6fe:	04d9      	lsls	r1, r3, #19
 800e700:	6922      	ldr	r2, [r4, #16]
 800e702:	6022      	str	r2, [r4, #0]
 800e704:	d504      	bpl.n	800e710 <__sflush_r+0x7c>
 800e706:	1c42      	adds	r2, r0, #1
 800e708:	d101      	bne.n	800e70e <__sflush_r+0x7a>
 800e70a:	682b      	ldr	r3, [r5, #0]
 800e70c:	b903      	cbnz	r3, 800e710 <__sflush_r+0x7c>
 800e70e:	6560      	str	r0, [r4, #84]	; 0x54
 800e710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e712:	602f      	str	r7, [r5, #0]
 800e714:	2900      	cmp	r1, #0
 800e716:	d0ca      	beq.n	800e6ae <__sflush_r+0x1a>
 800e718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e71c:	4299      	cmp	r1, r3
 800e71e:	d002      	beq.n	800e726 <__sflush_r+0x92>
 800e720:	4628      	mov	r0, r5
 800e722:	f000 fdb9 	bl	800f298 <_free_r>
 800e726:	2000      	movs	r0, #0
 800e728:	6360      	str	r0, [r4, #52]	; 0x34
 800e72a:	e7c1      	b.n	800e6b0 <__sflush_r+0x1c>
 800e72c:	6a21      	ldr	r1, [r4, #32]
 800e72e:	2301      	movs	r3, #1
 800e730:	4628      	mov	r0, r5
 800e732:	47b0      	blx	r6
 800e734:	1c41      	adds	r1, r0, #1
 800e736:	d1c7      	bne.n	800e6c8 <__sflush_r+0x34>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d0c4      	beq.n	800e6c8 <__sflush_r+0x34>
 800e73e:	2b1d      	cmp	r3, #29
 800e740:	d001      	beq.n	800e746 <__sflush_r+0xb2>
 800e742:	2b16      	cmp	r3, #22
 800e744:	d101      	bne.n	800e74a <__sflush_r+0xb6>
 800e746:	602f      	str	r7, [r5, #0]
 800e748:	e7b1      	b.n	800e6ae <__sflush_r+0x1a>
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e750:	81a3      	strh	r3, [r4, #12]
 800e752:	e7ad      	b.n	800e6b0 <__sflush_r+0x1c>
 800e754:	690f      	ldr	r7, [r1, #16]
 800e756:	2f00      	cmp	r7, #0
 800e758:	d0a9      	beq.n	800e6ae <__sflush_r+0x1a>
 800e75a:	0793      	lsls	r3, r2, #30
 800e75c:	680e      	ldr	r6, [r1, #0]
 800e75e:	bf08      	it	eq
 800e760:	694b      	ldreq	r3, [r1, #20]
 800e762:	600f      	str	r7, [r1, #0]
 800e764:	bf18      	it	ne
 800e766:	2300      	movne	r3, #0
 800e768:	eba6 0807 	sub.w	r8, r6, r7
 800e76c:	608b      	str	r3, [r1, #8]
 800e76e:	f1b8 0f00 	cmp.w	r8, #0
 800e772:	dd9c      	ble.n	800e6ae <__sflush_r+0x1a>
 800e774:	6a21      	ldr	r1, [r4, #32]
 800e776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e778:	4643      	mov	r3, r8
 800e77a:	463a      	mov	r2, r7
 800e77c:	4628      	mov	r0, r5
 800e77e:	47b0      	blx	r6
 800e780:	2800      	cmp	r0, #0
 800e782:	dc06      	bgt.n	800e792 <__sflush_r+0xfe>
 800e784:	89a3      	ldrh	r3, [r4, #12]
 800e786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	f04f 30ff 	mov.w	r0, #4294967295
 800e790:	e78e      	b.n	800e6b0 <__sflush_r+0x1c>
 800e792:	4407      	add	r7, r0
 800e794:	eba8 0800 	sub.w	r8, r8, r0
 800e798:	e7e9      	b.n	800e76e <__sflush_r+0xda>
 800e79a:	bf00      	nop
 800e79c:	20400001 	.word	0x20400001

0800e7a0 <_fflush_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	690b      	ldr	r3, [r1, #16]
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	b913      	cbnz	r3, 800e7b0 <_fflush_r+0x10>
 800e7aa:	2500      	movs	r5, #0
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	bd38      	pop	{r3, r4, r5, pc}
 800e7b0:	b118      	cbz	r0, 800e7ba <_fflush_r+0x1a>
 800e7b2:	6983      	ldr	r3, [r0, #24]
 800e7b4:	b90b      	cbnz	r3, 800e7ba <_fflush_r+0x1a>
 800e7b6:	f000 f899 	bl	800e8ec <__sinit>
 800e7ba:	4b14      	ldr	r3, [pc, #80]	; (800e80c <_fflush_r+0x6c>)
 800e7bc:	429c      	cmp	r4, r3
 800e7be:	d11b      	bne.n	800e7f8 <_fflush_r+0x58>
 800e7c0:	686c      	ldr	r4, [r5, #4]
 800e7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d0ef      	beq.n	800e7aa <_fflush_r+0xa>
 800e7ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7cc:	07d0      	lsls	r0, r2, #31
 800e7ce:	d404      	bmi.n	800e7da <_fflush_r+0x3a>
 800e7d0:	0599      	lsls	r1, r3, #22
 800e7d2:	d402      	bmi.n	800e7da <_fflush_r+0x3a>
 800e7d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7d6:	f000 f948 	bl	800ea6a <__retarget_lock_acquire_recursive>
 800e7da:	4628      	mov	r0, r5
 800e7dc:	4621      	mov	r1, r4
 800e7de:	f7ff ff59 	bl	800e694 <__sflush_r>
 800e7e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7e4:	07da      	lsls	r2, r3, #31
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	d4e0      	bmi.n	800e7ac <_fflush_r+0xc>
 800e7ea:	89a3      	ldrh	r3, [r4, #12]
 800e7ec:	059b      	lsls	r3, r3, #22
 800e7ee:	d4dd      	bmi.n	800e7ac <_fflush_r+0xc>
 800e7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7f2:	f000 f93b 	bl	800ea6c <__retarget_lock_release_recursive>
 800e7f6:	e7d9      	b.n	800e7ac <_fflush_r+0xc>
 800e7f8:	4b05      	ldr	r3, [pc, #20]	; (800e810 <_fflush_r+0x70>)
 800e7fa:	429c      	cmp	r4, r3
 800e7fc:	d101      	bne.n	800e802 <_fflush_r+0x62>
 800e7fe:	68ac      	ldr	r4, [r5, #8]
 800e800:	e7df      	b.n	800e7c2 <_fflush_r+0x22>
 800e802:	4b04      	ldr	r3, [pc, #16]	; (800e814 <_fflush_r+0x74>)
 800e804:	429c      	cmp	r4, r3
 800e806:	bf08      	it	eq
 800e808:	68ec      	ldreq	r4, [r5, #12]
 800e80a:	e7da      	b.n	800e7c2 <_fflush_r+0x22>
 800e80c:	08013208 	.word	0x08013208
 800e810:	08013228 	.word	0x08013228
 800e814:	080131e8 	.word	0x080131e8

0800e818 <fflush>:
 800e818:	4601      	mov	r1, r0
 800e81a:	b920      	cbnz	r0, 800e826 <fflush+0xe>
 800e81c:	4b04      	ldr	r3, [pc, #16]	; (800e830 <fflush+0x18>)
 800e81e:	4905      	ldr	r1, [pc, #20]	; (800e834 <fflush+0x1c>)
 800e820:	6818      	ldr	r0, [r3, #0]
 800e822:	f000 b8fe 	b.w	800ea22 <_fwalk_reent>
 800e826:	4b04      	ldr	r3, [pc, #16]	; (800e838 <fflush+0x20>)
 800e828:	6818      	ldr	r0, [r3, #0]
 800e82a:	f7ff bfb9 	b.w	800e7a0 <_fflush_r>
 800e82e:	bf00      	nop
 800e830:	08013120 	.word	0x08013120
 800e834:	0800e7a1 	.word	0x0800e7a1
 800e838:	20000014 	.word	0x20000014

0800e83c <std>:
 800e83c:	2300      	movs	r3, #0
 800e83e:	b510      	push	{r4, lr}
 800e840:	4604      	mov	r4, r0
 800e842:	e9c0 3300 	strd	r3, r3, [r0]
 800e846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e84a:	6083      	str	r3, [r0, #8]
 800e84c:	8181      	strh	r1, [r0, #12]
 800e84e:	6643      	str	r3, [r0, #100]	; 0x64
 800e850:	81c2      	strh	r2, [r0, #14]
 800e852:	6183      	str	r3, [r0, #24]
 800e854:	4619      	mov	r1, r3
 800e856:	2208      	movs	r2, #8
 800e858:	305c      	adds	r0, #92	; 0x5c
 800e85a:	f7fe faa9 	bl	800cdb0 <memset>
 800e85e:	4b05      	ldr	r3, [pc, #20]	; (800e874 <std+0x38>)
 800e860:	6263      	str	r3, [r4, #36]	; 0x24
 800e862:	4b05      	ldr	r3, [pc, #20]	; (800e878 <std+0x3c>)
 800e864:	62a3      	str	r3, [r4, #40]	; 0x28
 800e866:	4b05      	ldr	r3, [pc, #20]	; (800e87c <std+0x40>)
 800e868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e86a:	4b05      	ldr	r3, [pc, #20]	; (800e880 <std+0x44>)
 800e86c:	6224      	str	r4, [r4, #32]
 800e86e:	6323      	str	r3, [r4, #48]	; 0x30
 800e870:	bd10      	pop	{r4, pc}
 800e872:	bf00      	nop
 800e874:	080101bd 	.word	0x080101bd
 800e878:	080101df 	.word	0x080101df
 800e87c:	08010217 	.word	0x08010217
 800e880:	0801023b 	.word	0x0801023b

0800e884 <_cleanup_r>:
 800e884:	4901      	ldr	r1, [pc, #4]	; (800e88c <_cleanup_r+0x8>)
 800e886:	f000 b8cc 	b.w	800ea22 <_fwalk_reent>
 800e88a:	bf00      	nop
 800e88c:	0800e7a1 	.word	0x0800e7a1

0800e890 <__sfmoreglue>:
 800e890:	b570      	push	{r4, r5, r6, lr}
 800e892:	2268      	movs	r2, #104	; 0x68
 800e894:	1e4d      	subs	r5, r1, #1
 800e896:	4355      	muls	r5, r2
 800e898:	460e      	mov	r6, r1
 800e89a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e89e:	f000 fd67 	bl	800f370 <_malloc_r>
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	b140      	cbz	r0, 800e8b8 <__sfmoreglue+0x28>
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	e9c0 1600 	strd	r1, r6, [r0]
 800e8ac:	300c      	adds	r0, #12
 800e8ae:	60a0      	str	r0, [r4, #8]
 800e8b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8b4:	f7fe fa7c 	bl	800cdb0 <memset>
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}

0800e8bc <__sfp_lock_acquire>:
 800e8bc:	4801      	ldr	r0, [pc, #4]	; (800e8c4 <__sfp_lock_acquire+0x8>)
 800e8be:	f000 b8d4 	b.w	800ea6a <__retarget_lock_acquire_recursive>
 800e8c2:	bf00      	nop
 800e8c4:	20000395 	.word	0x20000395

0800e8c8 <__sfp_lock_release>:
 800e8c8:	4801      	ldr	r0, [pc, #4]	; (800e8d0 <__sfp_lock_release+0x8>)
 800e8ca:	f000 b8cf 	b.w	800ea6c <__retarget_lock_release_recursive>
 800e8ce:	bf00      	nop
 800e8d0:	20000395 	.word	0x20000395

0800e8d4 <__sinit_lock_acquire>:
 800e8d4:	4801      	ldr	r0, [pc, #4]	; (800e8dc <__sinit_lock_acquire+0x8>)
 800e8d6:	f000 b8c8 	b.w	800ea6a <__retarget_lock_acquire_recursive>
 800e8da:	bf00      	nop
 800e8dc:	20000396 	.word	0x20000396

0800e8e0 <__sinit_lock_release>:
 800e8e0:	4801      	ldr	r0, [pc, #4]	; (800e8e8 <__sinit_lock_release+0x8>)
 800e8e2:	f000 b8c3 	b.w	800ea6c <__retarget_lock_release_recursive>
 800e8e6:	bf00      	nop
 800e8e8:	20000396 	.word	0x20000396

0800e8ec <__sinit>:
 800e8ec:	b510      	push	{r4, lr}
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	f7ff fff0 	bl	800e8d4 <__sinit_lock_acquire>
 800e8f4:	69a3      	ldr	r3, [r4, #24]
 800e8f6:	b11b      	cbz	r3, 800e900 <__sinit+0x14>
 800e8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8fc:	f7ff bff0 	b.w	800e8e0 <__sinit_lock_release>
 800e900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e904:	6523      	str	r3, [r4, #80]	; 0x50
 800e906:	4b13      	ldr	r3, [pc, #76]	; (800e954 <__sinit+0x68>)
 800e908:	4a13      	ldr	r2, [pc, #76]	; (800e958 <__sinit+0x6c>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e90e:	42a3      	cmp	r3, r4
 800e910:	bf04      	itt	eq
 800e912:	2301      	moveq	r3, #1
 800e914:	61a3      	streq	r3, [r4, #24]
 800e916:	4620      	mov	r0, r4
 800e918:	f000 f820 	bl	800e95c <__sfp>
 800e91c:	6060      	str	r0, [r4, #4]
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 f81c 	bl	800e95c <__sfp>
 800e924:	60a0      	str	r0, [r4, #8]
 800e926:	4620      	mov	r0, r4
 800e928:	f000 f818 	bl	800e95c <__sfp>
 800e92c:	2200      	movs	r2, #0
 800e92e:	60e0      	str	r0, [r4, #12]
 800e930:	2104      	movs	r1, #4
 800e932:	6860      	ldr	r0, [r4, #4]
 800e934:	f7ff ff82 	bl	800e83c <std>
 800e938:	68a0      	ldr	r0, [r4, #8]
 800e93a:	2201      	movs	r2, #1
 800e93c:	2109      	movs	r1, #9
 800e93e:	f7ff ff7d 	bl	800e83c <std>
 800e942:	68e0      	ldr	r0, [r4, #12]
 800e944:	2202      	movs	r2, #2
 800e946:	2112      	movs	r1, #18
 800e948:	f7ff ff78 	bl	800e83c <std>
 800e94c:	2301      	movs	r3, #1
 800e94e:	61a3      	str	r3, [r4, #24]
 800e950:	e7d2      	b.n	800e8f8 <__sinit+0xc>
 800e952:	bf00      	nop
 800e954:	08013120 	.word	0x08013120
 800e958:	0800e885 	.word	0x0800e885

0800e95c <__sfp>:
 800e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95e:	4607      	mov	r7, r0
 800e960:	f7ff ffac 	bl	800e8bc <__sfp_lock_acquire>
 800e964:	4b1e      	ldr	r3, [pc, #120]	; (800e9e0 <__sfp+0x84>)
 800e966:	681e      	ldr	r6, [r3, #0]
 800e968:	69b3      	ldr	r3, [r6, #24]
 800e96a:	b913      	cbnz	r3, 800e972 <__sfp+0x16>
 800e96c:	4630      	mov	r0, r6
 800e96e:	f7ff ffbd 	bl	800e8ec <__sinit>
 800e972:	3648      	adds	r6, #72	; 0x48
 800e974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e978:	3b01      	subs	r3, #1
 800e97a:	d503      	bpl.n	800e984 <__sfp+0x28>
 800e97c:	6833      	ldr	r3, [r6, #0]
 800e97e:	b30b      	cbz	r3, 800e9c4 <__sfp+0x68>
 800e980:	6836      	ldr	r6, [r6, #0]
 800e982:	e7f7      	b.n	800e974 <__sfp+0x18>
 800e984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e988:	b9d5      	cbnz	r5, 800e9c0 <__sfp+0x64>
 800e98a:	4b16      	ldr	r3, [pc, #88]	; (800e9e4 <__sfp+0x88>)
 800e98c:	60e3      	str	r3, [r4, #12]
 800e98e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e992:	6665      	str	r5, [r4, #100]	; 0x64
 800e994:	f000 f868 	bl	800ea68 <__retarget_lock_init_recursive>
 800e998:	f7ff ff96 	bl	800e8c8 <__sfp_lock_release>
 800e99c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e9a4:	6025      	str	r5, [r4, #0]
 800e9a6:	61a5      	str	r5, [r4, #24]
 800e9a8:	2208      	movs	r2, #8
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9b0:	f7fe f9fe 	bl	800cdb0 <memset>
 800e9b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9bc:	4620      	mov	r0, r4
 800e9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9c0:	3468      	adds	r4, #104	; 0x68
 800e9c2:	e7d9      	b.n	800e978 <__sfp+0x1c>
 800e9c4:	2104      	movs	r1, #4
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	f7ff ff62 	bl	800e890 <__sfmoreglue>
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	6030      	str	r0, [r6, #0]
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d1d5      	bne.n	800e980 <__sfp+0x24>
 800e9d4:	f7ff ff78 	bl	800e8c8 <__sfp_lock_release>
 800e9d8:	230c      	movs	r3, #12
 800e9da:	603b      	str	r3, [r7, #0]
 800e9dc:	e7ee      	b.n	800e9bc <__sfp+0x60>
 800e9de:	bf00      	nop
 800e9e0:	08013120 	.word	0x08013120
 800e9e4:	ffff0001 	.word	0xffff0001

0800e9e8 <_fwalk>:
 800e9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ec:	460f      	mov	r7, r1
 800e9ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e9f2:	2600      	movs	r6, #0
 800e9f4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800e9f8:	f1b8 0801 	subs.w	r8, r8, #1
 800e9fc:	d505      	bpl.n	800ea0a <_fwalk+0x22>
 800e9fe:	6824      	ldr	r4, [r4, #0]
 800ea00:	2c00      	cmp	r4, #0
 800ea02:	d1f7      	bne.n	800e9f4 <_fwalk+0xc>
 800ea04:	4630      	mov	r0, r6
 800ea06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea0a:	89ab      	ldrh	r3, [r5, #12]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d906      	bls.n	800ea1e <_fwalk+0x36>
 800ea10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea14:	3301      	adds	r3, #1
 800ea16:	d002      	beq.n	800ea1e <_fwalk+0x36>
 800ea18:	4628      	mov	r0, r5
 800ea1a:	47b8      	blx	r7
 800ea1c:	4306      	orrs	r6, r0
 800ea1e:	3568      	adds	r5, #104	; 0x68
 800ea20:	e7ea      	b.n	800e9f8 <_fwalk+0x10>

0800ea22 <_fwalk_reent>:
 800ea22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea26:	4606      	mov	r6, r0
 800ea28:	4688      	mov	r8, r1
 800ea2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea2e:	2700      	movs	r7, #0
 800ea30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea34:	f1b9 0901 	subs.w	r9, r9, #1
 800ea38:	d505      	bpl.n	800ea46 <_fwalk_reent+0x24>
 800ea3a:	6824      	ldr	r4, [r4, #0]
 800ea3c:	2c00      	cmp	r4, #0
 800ea3e:	d1f7      	bne.n	800ea30 <_fwalk_reent+0xe>
 800ea40:	4638      	mov	r0, r7
 800ea42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea46:	89ab      	ldrh	r3, [r5, #12]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d907      	bls.n	800ea5c <_fwalk_reent+0x3a>
 800ea4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea50:	3301      	adds	r3, #1
 800ea52:	d003      	beq.n	800ea5c <_fwalk_reent+0x3a>
 800ea54:	4629      	mov	r1, r5
 800ea56:	4630      	mov	r0, r6
 800ea58:	47c0      	blx	r8
 800ea5a:	4307      	orrs	r7, r0
 800ea5c:	3568      	adds	r5, #104	; 0x68
 800ea5e:	e7e9      	b.n	800ea34 <_fwalk_reent+0x12>

0800ea60 <_localeconv_r>:
 800ea60:	4800      	ldr	r0, [pc, #0]	; (800ea64 <_localeconv_r+0x4>)
 800ea62:	4770      	bx	lr
 800ea64:	20000168 	.word	0x20000168

0800ea68 <__retarget_lock_init_recursive>:
 800ea68:	4770      	bx	lr

0800ea6a <__retarget_lock_acquire_recursive>:
 800ea6a:	4770      	bx	lr

0800ea6c <__retarget_lock_release_recursive>:
 800ea6c:	4770      	bx	lr

0800ea6e <__swhatbuf_r>:
 800ea6e:	b570      	push	{r4, r5, r6, lr}
 800ea70:	460e      	mov	r6, r1
 800ea72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea76:	2900      	cmp	r1, #0
 800ea78:	b096      	sub	sp, #88	; 0x58
 800ea7a:	4614      	mov	r4, r2
 800ea7c:	461d      	mov	r5, r3
 800ea7e:	da08      	bge.n	800ea92 <__swhatbuf_r+0x24>
 800ea80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea84:	2200      	movs	r2, #0
 800ea86:	602a      	str	r2, [r5, #0]
 800ea88:	061a      	lsls	r2, r3, #24
 800ea8a:	d410      	bmi.n	800eaae <__swhatbuf_r+0x40>
 800ea8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea90:	e00e      	b.n	800eab0 <__swhatbuf_r+0x42>
 800ea92:	466a      	mov	r2, sp
 800ea94:	f001 fdf2 	bl	801067c <_fstat_r>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	dbf1      	blt.n	800ea80 <__swhatbuf_r+0x12>
 800ea9c:	9a01      	ldr	r2, [sp, #4]
 800ea9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eaa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eaa6:	425a      	negs	r2, r3
 800eaa8:	415a      	adcs	r2, r3
 800eaaa:	602a      	str	r2, [r5, #0]
 800eaac:	e7ee      	b.n	800ea8c <__swhatbuf_r+0x1e>
 800eaae:	2340      	movs	r3, #64	; 0x40
 800eab0:	2000      	movs	r0, #0
 800eab2:	6023      	str	r3, [r4, #0]
 800eab4:	b016      	add	sp, #88	; 0x58
 800eab6:	bd70      	pop	{r4, r5, r6, pc}

0800eab8 <__smakebuf_r>:
 800eab8:	898b      	ldrh	r3, [r1, #12]
 800eaba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eabc:	079d      	lsls	r5, r3, #30
 800eabe:	4606      	mov	r6, r0
 800eac0:	460c      	mov	r4, r1
 800eac2:	d507      	bpl.n	800ead4 <__smakebuf_r+0x1c>
 800eac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eac8:	6023      	str	r3, [r4, #0]
 800eaca:	6123      	str	r3, [r4, #16]
 800eacc:	2301      	movs	r3, #1
 800eace:	6163      	str	r3, [r4, #20]
 800ead0:	b002      	add	sp, #8
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	ab01      	add	r3, sp, #4
 800ead6:	466a      	mov	r2, sp
 800ead8:	f7ff ffc9 	bl	800ea6e <__swhatbuf_r>
 800eadc:	9900      	ldr	r1, [sp, #0]
 800eade:	4605      	mov	r5, r0
 800eae0:	4630      	mov	r0, r6
 800eae2:	f000 fc45 	bl	800f370 <_malloc_r>
 800eae6:	b948      	cbnz	r0, 800eafc <__smakebuf_r+0x44>
 800eae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaec:	059a      	lsls	r2, r3, #22
 800eaee:	d4ef      	bmi.n	800ead0 <__smakebuf_r+0x18>
 800eaf0:	f023 0303 	bic.w	r3, r3, #3
 800eaf4:	f043 0302 	orr.w	r3, r3, #2
 800eaf8:	81a3      	strh	r3, [r4, #12]
 800eafa:	e7e3      	b.n	800eac4 <__smakebuf_r+0xc>
 800eafc:	4b0d      	ldr	r3, [pc, #52]	; (800eb34 <__smakebuf_r+0x7c>)
 800eafe:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	6020      	str	r0, [r4, #0]
 800eb04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb08:	81a3      	strh	r3, [r4, #12]
 800eb0a:	9b00      	ldr	r3, [sp, #0]
 800eb0c:	6163      	str	r3, [r4, #20]
 800eb0e:	9b01      	ldr	r3, [sp, #4]
 800eb10:	6120      	str	r0, [r4, #16]
 800eb12:	b15b      	cbz	r3, 800eb2c <__smakebuf_r+0x74>
 800eb14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb18:	4630      	mov	r0, r6
 800eb1a:	f001 fdc1 	bl	80106a0 <_isatty_r>
 800eb1e:	b128      	cbz	r0, 800eb2c <__smakebuf_r+0x74>
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	f023 0303 	bic.w	r3, r3, #3
 800eb26:	f043 0301 	orr.w	r3, r3, #1
 800eb2a:	81a3      	strh	r3, [r4, #12]
 800eb2c:	89a0      	ldrh	r0, [r4, #12]
 800eb2e:	4305      	orrs	r5, r0
 800eb30:	81a5      	strh	r5, [r4, #12]
 800eb32:	e7cd      	b.n	800ead0 <__smakebuf_r+0x18>
 800eb34:	0800e885 	.word	0x0800e885

0800eb38 <malloc>:
 800eb38:	4b02      	ldr	r3, [pc, #8]	; (800eb44 <malloc+0xc>)
 800eb3a:	4601      	mov	r1, r0
 800eb3c:	6818      	ldr	r0, [r3, #0]
 800eb3e:	f000 bc17 	b.w	800f370 <_malloc_r>
 800eb42:	bf00      	nop
 800eb44:	20000014 	.word	0x20000014

0800eb48 <memcpy>:
 800eb48:	440a      	add	r2, r1
 800eb4a:	4291      	cmp	r1, r2
 800eb4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb50:	d100      	bne.n	800eb54 <memcpy+0xc>
 800eb52:	4770      	bx	lr
 800eb54:	b510      	push	{r4, lr}
 800eb56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb5e:	4291      	cmp	r1, r2
 800eb60:	d1f9      	bne.n	800eb56 <memcpy+0xe>
 800eb62:	bd10      	pop	{r4, pc}

0800eb64 <_Balloc>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb68:	4604      	mov	r4, r0
 800eb6a:	460d      	mov	r5, r1
 800eb6c:	b976      	cbnz	r6, 800eb8c <_Balloc+0x28>
 800eb6e:	2010      	movs	r0, #16
 800eb70:	f7ff ffe2 	bl	800eb38 <malloc>
 800eb74:	4602      	mov	r2, r0
 800eb76:	6260      	str	r0, [r4, #36]	; 0x24
 800eb78:	b920      	cbnz	r0, 800eb84 <_Balloc+0x20>
 800eb7a:	4b18      	ldr	r3, [pc, #96]	; (800ebdc <_Balloc+0x78>)
 800eb7c:	4818      	ldr	r0, [pc, #96]	; (800ebe0 <_Balloc+0x7c>)
 800eb7e:	2166      	movs	r1, #102	; 0x66
 800eb80:	f001 fd3c 	bl	80105fc <__assert_func>
 800eb84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb88:	6006      	str	r6, [r0, #0]
 800eb8a:	60c6      	str	r6, [r0, #12]
 800eb8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eb8e:	68f3      	ldr	r3, [r6, #12]
 800eb90:	b183      	cbz	r3, 800ebb4 <_Balloc+0x50>
 800eb92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb9a:	b9b8      	cbnz	r0, 800ebcc <_Balloc+0x68>
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	fa01 f605 	lsl.w	r6, r1, r5
 800eba2:	1d72      	adds	r2, r6, #5
 800eba4:	0092      	lsls	r2, r2, #2
 800eba6:	4620      	mov	r0, r4
 800eba8:	f000 fb60 	bl	800f26c <_calloc_r>
 800ebac:	b160      	cbz	r0, 800ebc8 <_Balloc+0x64>
 800ebae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ebb2:	e00e      	b.n	800ebd2 <_Balloc+0x6e>
 800ebb4:	2221      	movs	r2, #33	; 0x21
 800ebb6:	2104      	movs	r1, #4
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f000 fb57 	bl	800f26c <_calloc_r>
 800ebbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebc0:	60f0      	str	r0, [r6, #12]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1e4      	bne.n	800eb92 <_Balloc+0x2e>
 800ebc8:	2000      	movs	r0, #0
 800ebca:	bd70      	pop	{r4, r5, r6, pc}
 800ebcc:	6802      	ldr	r2, [r0, #0]
 800ebce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ebd8:	e7f7      	b.n	800ebca <_Balloc+0x66>
 800ebda:	bf00      	nop
 800ebdc:	08013163 	.word	0x08013163
 800ebe0:	08013248 	.word	0x08013248

0800ebe4 <_Bfree>:
 800ebe4:	b570      	push	{r4, r5, r6, lr}
 800ebe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ebe8:	4605      	mov	r5, r0
 800ebea:	460c      	mov	r4, r1
 800ebec:	b976      	cbnz	r6, 800ec0c <_Bfree+0x28>
 800ebee:	2010      	movs	r0, #16
 800ebf0:	f7ff ffa2 	bl	800eb38 <malloc>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	6268      	str	r0, [r5, #36]	; 0x24
 800ebf8:	b920      	cbnz	r0, 800ec04 <_Bfree+0x20>
 800ebfa:	4b09      	ldr	r3, [pc, #36]	; (800ec20 <_Bfree+0x3c>)
 800ebfc:	4809      	ldr	r0, [pc, #36]	; (800ec24 <_Bfree+0x40>)
 800ebfe:	218a      	movs	r1, #138	; 0x8a
 800ec00:	f001 fcfc 	bl	80105fc <__assert_func>
 800ec04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec08:	6006      	str	r6, [r0, #0]
 800ec0a:	60c6      	str	r6, [r0, #12]
 800ec0c:	b13c      	cbz	r4, 800ec1e <_Bfree+0x3a>
 800ec0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec10:	6862      	ldr	r2, [r4, #4]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec18:	6021      	str	r1, [r4, #0]
 800ec1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec1e:	bd70      	pop	{r4, r5, r6, pc}
 800ec20:	08013163 	.word	0x08013163
 800ec24:	08013248 	.word	0x08013248

0800ec28 <__multadd>:
 800ec28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2c:	690d      	ldr	r5, [r1, #16]
 800ec2e:	4607      	mov	r7, r0
 800ec30:	460c      	mov	r4, r1
 800ec32:	461e      	mov	r6, r3
 800ec34:	f101 0c14 	add.w	ip, r1, #20
 800ec38:	2000      	movs	r0, #0
 800ec3a:	f8dc 3000 	ldr.w	r3, [ip]
 800ec3e:	b299      	uxth	r1, r3
 800ec40:	fb02 6101 	mla	r1, r2, r1, r6
 800ec44:	0c1e      	lsrs	r6, r3, #16
 800ec46:	0c0b      	lsrs	r3, r1, #16
 800ec48:	fb02 3306 	mla	r3, r2, r6, r3
 800ec4c:	b289      	uxth	r1, r1
 800ec4e:	3001      	adds	r0, #1
 800ec50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ec54:	4285      	cmp	r5, r0
 800ec56:	f84c 1b04 	str.w	r1, [ip], #4
 800ec5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec5e:	dcec      	bgt.n	800ec3a <__multadd+0x12>
 800ec60:	b30e      	cbz	r6, 800eca6 <__multadd+0x7e>
 800ec62:	68a3      	ldr	r3, [r4, #8]
 800ec64:	42ab      	cmp	r3, r5
 800ec66:	dc19      	bgt.n	800ec9c <__multadd+0x74>
 800ec68:	6861      	ldr	r1, [r4, #4]
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	3101      	adds	r1, #1
 800ec6e:	f7ff ff79 	bl	800eb64 <_Balloc>
 800ec72:	4680      	mov	r8, r0
 800ec74:	b928      	cbnz	r0, 800ec82 <__multadd+0x5a>
 800ec76:	4602      	mov	r2, r0
 800ec78:	4b0c      	ldr	r3, [pc, #48]	; (800ecac <__multadd+0x84>)
 800ec7a:	480d      	ldr	r0, [pc, #52]	; (800ecb0 <__multadd+0x88>)
 800ec7c:	21b5      	movs	r1, #181	; 0xb5
 800ec7e:	f001 fcbd 	bl	80105fc <__assert_func>
 800ec82:	6922      	ldr	r2, [r4, #16]
 800ec84:	3202      	adds	r2, #2
 800ec86:	f104 010c 	add.w	r1, r4, #12
 800ec8a:	0092      	lsls	r2, r2, #2
 800ec8c:	300c      	adds	r0, #12
 800ec8e:	f7ff ff5b 	bl	800eb48 <memcpy>
 800ec92:	4621      	mov	r1, r4
 800ec94:	4638      	mov	r0, r7
 800ec96:	f7ff ffa5 	bl	800ebe4 <_Bfree>
 800ec9a:	4644      	mov	r4, r8
 800ec9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eca0:	3501      	adds	r5, #1
 800eca2:	615e      	str	r6, [r3, #20]
 800eca4:	6125      	str	r5, [r4, #16]
 800eca6:	4620      	mov	r0, r4
 800eca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecac:	080131d5 	.word	0x080131d5
 800ecb0:	08013248 	.word	0x08013248

0800ecb4 <__hi0bits>:
 800ecb4:	0c03      	lsrs	r3, r0, #16
 800ecb6:	041b      	lsls	r3, r3, #16
 800ecb8:	b9d3      	cbnz	r3, 800ecf0 <__hi0bits+0x3c>
 800ecba:	0400      	lsls	r0, r0, #16
 800ecbc:	2310      	movs	r3, #16
 800ecbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ecc2:	bf04      	itt	eq
 800ecc4:	0200      	lsleq	r0, r0, #8
 800ecc6:	3308      	addeq	r3, #8
 800ecc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eccc:	bf04      	itt	eq
 800ecce:	0100      	lsleq	r0, r0, #4
 800ecd0:	3304      	addeq	r3, #4
 800ecd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ecd6:	bf04      	itt	eq
 800ecd8:	0080      	lsleq	r0, r0, #2
 800ecda:	3302      	addeq	r3, #2
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	db05      	blt.n	800ecec <__hi0bits+0x38>
 800ece0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ece4:	f103 0301 	add.w	r3, r3, #1
 800ece8:	bf08      	it	eq
 800ecea:	2320      	moveq	r3, #32
 800ecec:	4618      	mov	r0, r3
 800ecee:	4770      	bx	lr
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	e7e4      	b.n	800ecbe <__hi0bits+0xa>

0800ecf4 <__lo0bits>:
 800ecf4:	6803      	ldr	r3, [r0, #0]
 800ecf6:	f013 0207 	ands.w	r2, r3, #7
 800ecfa:	4601      	mov	r1, r0
 800ecfc:	d00b      	beq.n	800ed16 <__lo0bits+0x22>
 800ecfe:	07da      	lsls	r2, r3, #31
 800ed00:	d423      	bmi.n	800ed4a <__lo0bits+0x56>
 800ed02:	0798      	lsls	r0, r3, #30
 800ed04:	bf49      	itett	mi
 800ed06:	085b      	lsrmi	r3, r3, #1
 800ed08:	089b      	lsrpl	r3, r3, #2
 800ed0a:	2001      	movmi	r0, #1
 800ed0c:	600b      	strmi	r3, [r1, #0]
 800ed0e:	bf5c      	itt	pl
 800ed10:	600b      	strpl	r3, [r1, #0]
 800ed12:	2002      	movpl	r0, #2
 800ed14:	4770      	bx	lr
 800ed16:	b298      	uxth	r0, r3
 800ed18:	b9a8      	cbnz	r0, 800ed46 <__lo0bits+0x52>
 800ed1a:	0c1b      	lsrs	r3, r3, #16
 800ed1c:	2010      	movs	r0, #16
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	b90a      	cbnz	r2, 800ed26 <__lo0bits+0x32>
 800ed22:	3008      	adds	r0, #8
 800ed24:	0a1b      	lsrs	r3, r3, #8
 800ed26:	071a      	lsls	r2, r3, #28
 800ed28:	bf04      	itt	eq
 800ed2a:	091b      	lsreq	r3, r3, #4
 800ed2c:	3004      	addeq	r0, #4
 800ed2e:	079a      	lsls	r2, r3, #30
 800ed30:	bf04      	itt	eq
 800ed32:	089b      	lsreq	r3, r3, #2
 800ed34:	3002      	addeq	r0, #2
 800ed36:	07da      	lsls	r2, r3, #31
 800ed38:	d403      	bmi.n	800ed42 <__lo0bits+0x4e>
 800ed3a:	085b      	lsrs	r3, r3, #1
 800ed3c:	f100 0001 	add.w	r0, r0, #1
 800ed40:	d005      	beq.n	800ed4e <__lo0bits+0x5a>
 800ed42:	600b      	str	r3, [r1, #0]
 800ed44:	4770      	bx	lr
 800ed46:	4610      	mov	r0, r2
 800ed48:	e7e9      	b.n	800ed1e <__lo0bits+0x2a>
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	4770      	bx	lr
 800ed4e:	2020      	movs	r0, #32
 800ed50:	4770      	bx	lr
	...

0800ed54 <__i2b>:
 800ed54:	b510      	push	{r4, lr}
 800ed56:	460c      	mov	r4, r1
 800ed58:	2101      	movs	r1, #1
 800ed5a:	f7ff ff03 	bl	800eb64 <_Balloc>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	b928      	cbnz	r0, 800ed6e <__i2b+0x1a>
 800ed62:	4b05      	ldr	r3, [pc, #20]	; (800ed78 <__i2b+0x24>)
 800ed64:	4805      	ldr	r0, [pc, #20]	; (800ed7c <__i2b+0x28>)
 800ed66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed6a:	f001 fc47 	bl	80105fc <__assert_func>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	6144      	str	r4, [r0, #20]
 800ed72:	6103      	str	r3, [r0, #16]
 800ed74:	bd10      	pop	{r4, pc}
 800ed76:	bf00      	nop
 800ed78:	080131d5 	.word	0x080131d5
 800ed7c:	08013248 	.word	0x08013248

0800ed80 <__multiply>:
 800ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	4691      	mov	r9, r2
 800ed86:	690a      	ldr	r2, [r1, #16]
 800ed88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	bfb8      	it	lt
 800ed90:	460b      	movlt	r3, r1
 800ed92:	460c      	mov	r4, r1
 800ed94:	bfbc      	itt	lt
 800ed96:	464c      	movlt	r4, r9
 800ed98:	4699      	movlt	r9, r3
 800ed9a:	6927      	ldr	r7, [r4, #16]
 800ed9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eda0:	68a3      	ldr	r3, [r4, #8]
 800eda2:	6861      	ldr	r1, [r4, #4]
 800eda4:	eb07 060a 	add.w	r6, r7, sl
 800eda8:	42b3      	cmp	r3, r6
 800edaa:	b085      	sub	sp, #20
 800edac:	bfb8      	it	lt
 800edae:	3101      	addlt	r1, #1
 800edb0:	f7ff fed8 	bl	800eb64 <_Balloc>
 800edb4:	b930      	cbnz	r0, 800edc4 <__multiply+0x44>
 800edb6:	4602      	mov	r2, r0
 800edb8:	4b44      	ldr	r3, [pc, #272]	; (800eecc <__multiply+0x14c>)
 800edba:	4845      	ldr	r0, [pc, #276]	; (800eed0 <__multiply+0x150>)
 800edbc:	f240 115d 	movw	r1, #349	; 0x15d
 800edc0:	f001 fc1c 	bl	80105fc <__assert_func>
 800edc4:	f100 0514 	add.w	r5, r0, #20
 800edc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800edcc:	462b      	mov	r3, r5
 800edce:	2200      	movs	r2, #0
 800edd0:	4543      	cmp	r3, r8
 800edd2:	d321      	bcc.n	800ee18 <__multiply+0x98>
 800edd4:	f104 0314 	add.w	r3, r4, #20
 800edd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eddc:	f109 0314 	add.w	r3, r9, #20
 800ede0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ede4:	9202      	str	r2, [sp, #8]
 800ede6:	1b3a      	subs	r2, r7, r4
 800ede8:	3a15      	subs	r2, #21
 800edea:	f022 0203 	bic.w	r2, r2, #3
 800edee:	3204      	adds	r2, #4
 800edf0:	f104 0115 	add.w	r1, r4, #21
 800edf4:	428f      	cmp	r7, r1
 800edf6:	bf38      	it	cc
 800edf8:	2204      	movcc	r2, #4
 800edfa:	9201      	str	r2, [sp, #4]
 800edfc:	9a02      	ldr	r2, [sp, #8]
 800edfe:	9303      	str	r3, [sp, #12]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d80c      	bhi.n	800ee1e <__multiply+0x9e>
 800ee04:	2e00      	cmp	r6, #0
 800ee06:	dd03      	ble.n	800ee10 <__multiply+0x90>
 800ee08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d05a      	beq.n	800eec6 <__multiply+0x146>
 800ee10:	6106      	str	r6, [r0, #16]
 800ee12:	b005      	add	sp, #20
 800ee14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee18:	f843 2b04 	str.w	r2, [r3], #4
 800ee1c:	e7d8      	b.n	800edd0 <__multiply+0x50>
 800ee1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee22:	f1ba 0f00 	cmp.w	sl, #0
 800ee26:	d024      	beq.n	800ee72 <__multiply+0xf2>
 800ee28:	f104 0e14 	add.w	lr, r4, #20
 800ee2c:	46a9      	mov	r9, r5
 800ee2e:	f04f 0c00 	mov.w	ip, #0
 800ee32:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ee36:	f8d9 1000 	ldr.w	r1, [r9]
 800ee3a:	fa1f fb82 	uxth.w	fp, r2
 800ee3e:	b289      	uxth	r1, r1
 800ee40:	fb0a 110b 	mla	r1, sl, fp, r1
 800ee44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ee48:	f8d9 2000 	ldr.w	r2, [r9]
 800ee4c:	4461      	add	r1, ip
 800ee4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ee52:	fb0a c20b 	mla	r2, sl, fp, ip
 800ee56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ee5a:	b289      	uxth	r1, r1
 800ee5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ee60:	4577      	cmp	r7, lr
 800ee62:	f849 1b04 	str.w	r1, [r9], #4
 800ee66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ee6a:	d8e2      	bhi.n	800ee32 <__multiply+0xb2>
 800ee6c:	9a01      	ldr	r2, [sp, #4]
 800ee6e:	f845 c002 	str.w	ip, [r5, r2]
 800ee72:	9a03      	ldr	r2, [sp, #12]
 800ee74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ee78:	3304      	adds	r3, #4
 800ee7a:	f1b9 0f00 	cmp.w	r9, #0
 800ee7e:	d020      	beq.n	800eec2 <__multiply+0x142>
 800ee80:	6829      	ldr	r1, [r5, #0]
 800ee82:	f104 0c14 	add.w	ip, r4, #20
 800ee86:	46ae      	mov	lr, r5
 800ee88:	f04f 0a00 	mov.w	sl, #0
 800ee8c:	f8bc b000 	ldrh.w	fp, [ip]
 800ee90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ee94:	fb09 220b 	mla	r2, r9, fp, r2
 800ee98:	4492      	add	sl, r2
 800ee9a:	b289      	uxth	r1, r1
 800ee9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eea0:	f84e 1b04 	str.w	r1, [lr], #4
 800eea4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eea8:	f8be 1000 	ldrh.w	r1, [lr]
 800eeac:	0c12      	lsrs	r2, r2, #16
 800eeae:	fb09 1102 	mla	r1, r9, r2, r1
 800eeb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eeb6:	4567      	cmp	r7, ip
 800eeb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eebc:	d8e6      	bhi.n	800ee8c <__multiply+0x10c>
 800eebe:	9a01      	ldr	r2, [sp, #4]
 800eec0:	50a9      	str	r1, [r5, r2]
 800eec2:	3504      	adds	r5, #4
 800eec4:	e79a      	b.n	800edfc <__multiply+0x7c>
 800eec6:	3e01      	subs	r6, #1
 800eec8:	e79c      	b.n	800ee04 <__multiply+0x84>
 800eeca:	bf00      	nop
 800eecc:	080131d5 	.word	0x080131d5
 800eed0:	08013248 	.word	0x08013248

0800eed4 <__pow5mult>:
 800eed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eed8:	4615      	mov	r5, r2
 800eeda:	f012 0203 	ands.w	r2, r2, #3
 800eede:	4606      	mov	r6, r0
 800eee0:	460f      	mov	r7, r1
 800eee2:	d007      	beq.n	800eef4 <__pow5mult+0x20>
 800eee4:	4c25      	ldr	r4, [pc, #148]	; (800ef7c <__pow5mult+0xa8>)
 800eee6:	3a01      	subs	r2, #1
 800eee8:	2300      	movs	r3, #0
 800eeea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eeee:	f7ff fe9b 	bl	800ec28 <__multadd>
 800eef2:	4607      	mov	r7, r0
 800eef4:	10ad      	asrs	r5, r5, #2
 800eef6:	d03d      	beq.n	800ef74 <__pow5mult+0xa0>
 800eef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eefa:	b97c      	cbnz	r4, 800ef1c <__pow5mult+0x48>
 800eefc:	2010      	movs	r0, #16
 800eefe:	f7ff fe1b 	bl	800eb38 <malloc>
 800ef02:	4602      	mov	r2, r0
 800ef04:	6270      	str	r0, [r6, #36]	; 0x24
 800ef06:	b928      	cbnz	r0, 800ef14 <__pow5mult+0x40>
 800ef08:	4b1d      	ldr	r3, [pc, #116]	; (800ef80 <__pow5mult+0xac>)
 800ef0a:	481e      	ldr	r0, [pc, #120]	; (800ef84 <__pow5mult+0xb0>)
 800ef0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ef10:	f001 fb74 	bl	80105fc <__assert_func>
 800ef14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef18:	6004      	str	r4, [r0, #0]
 800ef1a:	60c4      	str	r4, [r0, #12]
 800ef1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ef20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef24:	b94c      	cbnz	r4, 800ef3a <__pow5mult+0x66>
 800ef26:	f240 2171 	movw	r1, #625	; 0x271
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f7ff ff12 	bl	800ed54 <__i2b>
 800ef30:	2300      	movs	r3, #0
 800ef32:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef36:	4604      	mov	r4, r0
 800ef38:	6003      	str	r3, [r0, #0]
 800ef3a:	f04f 0900 	mov.w	r9, #0
 800ef3e:	07eb      	lsls	r3, r5, #31
 800ef40:	d50a      	bpl.n	800ef58 <__pow5mult+0x84>
 800ef42:	4639      	mov	r1, r7
 800ef44:	4622      	mov	r2, r4
 800ef46:	4630      	mov	r0, r6
 800ef48:	f7ff ff1a 	bl	800ed80 <__multiply>
 800ef4c:	4639      	mov	r1, r7
 800ef4e:	4680      	mov	r8, r0
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7ff fe47 	bl	800ebe4 <_Bfree>
 800ef56:	4647      	mov	r7, r8
 800ef58:	106d      	asrs	r5, r5, #1
 800ef5a:	d00b      	beq.n	800ef74 <__pow5mult+0xa0>
 800ef5c:	6820      	ldr	r0, [r4, #0]
 800ef5e:	b938      	cbnz	r0, 800ef70 <__pow5mult+0x9c>
 800ef60:	4622      	mov	r2, r4
 800ef62:	4621      	mov	r1, r4
 800ef64:	4630      	mov	r0, r6
 800ef66:	f7ff ff0b 	bl	800ed80 <__multiply>
 800ef6a:	6020      	str	r0, [r4, #0]
 800ef6c:	f8c0 9000 	str.w	r9, [r0]
 800ef70:	4604      	mov	r4, r0
 800ef72:	e7e4      	b.n	800ef3e <__pow5mult+0x6a>
 800ef74:	4638      	mov	r0, r7
 800ef76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef7a:	bf00      	nop
 800ef7c:	08013398 	.word	0x08013398
 800ef80:	08013163 	.word	0x08013163
 800ef84:	08013248 	.word	0x08013248

0800ef88 <__lshift>:
 800ef88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef8c:	460c      	mov	r4, r1
 800ef8e:	6849      	ldr	r1, [r1, #4]
 800ef90:	6923      	ldr	r3, [r4, #16]
 800ef92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	4607      	mov	r7, r0
 800ef9a:	4691      	mov	r9, r2
 800ef9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800efa0:	f108 0601 	add.w	r6, r8, #1
 800efa4:	42b3      	cmp	r3, r6
 800efa6:	db0b      	blt.n	800efc0 <__lshift+0x38>
 800efa8:	4638      	mov	r0, r7
 800efaa:	f7ff fddb 	bl	800eb64 <_Balloc>
 800efae:	4605      	mov	r5, r0
 800efb0:	b948      	cbnz	r0, 800efc6 <__lshift+0x3e>
 800efb2:	4602      	mov	r2, r0
 800efb4:	4b2a      	ldr	r3, [pc, #168]	; (800f060 <__lshift+0xd8>)
 800efb6:	482b      	ldr	r0, [pc, #172]	; (800f064 <__lshift+0xdc>)
 800efb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800efbc:	f001 fb1e 	bl	80105fc <__assert_func>
 800efc0:	3101      	adds	r1, #1
 800efc2:	005b      	lsls	r3, r3, #1
 800efc4:	e7ee      	b.n	800efa4 <__lshift+0x1c>
 800efc6:	2300      	movs	r3, #0
 800efc8:	f100 0114 	add.w	r1, r0, #20
 800efcc:	f100 0210 	add.w	r2, r0, #16
 800efd0:	4618      	mov	r0, r3
 800efd2:	4553      	cmp	r3, sl
 800efd4:	db37      	blt.n	800f046 <__lshift+0xbe>
 800efd6:	6920      	ldr	r0, [r4, #16]
 800efd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800efdc:	f104 0314 	add.w	r3, r4, #20
 800efe0:	f019 091f 	ands.w	r9, r9, #31
 800efe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800efe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800efec:	d02f      	beq.n	800f04e <__lshift+0xc6>
 800efee:	f1c9 0e20 	rsb	lr, r9, #32
 800eff2:	468a      	mov	sl, r1
 800eff4:	f04f 0c00 	mov.w	ip, #0
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	fa02 f209 	lsl.w	r2, r2, r9
 800effe:	ea42 020c 	orr.w	r2, r2, ip
 800f002:	f84a 2b04 	str.w	r2, [sl], #4
 800f006:	f853 2b04 	ldr.w	r2, [r3], #4
 800f00a:	4298      	cmp	r0, r3
 800f00c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f010:	d8f2      	bhi.n	800eff8 <__lshift+0x70>
 800f012:	1b03      	subs	r3, r0, r4
 800f014:	3b15      	subs	r3, #21
 800f016:	f023 0303 	bic.w	r3, r3, #3
 800f01a:	3304      	adds	r3, #4
 800f01c:	f104 0215 	add.w	r2, r4, #21
 800f020:	4290      	cmp	r0, r2
 800f022:	bf38      	it	cc
 800f024:	2304      	movcc	r3, #4
 800f026:	f841 c003 	str.w	ip, [r1, r3]
 800f02a:	f1bc 0f00 	cmp.w	ip, #0
 800f02e:	d001      	beq.n	800f034 <__lshift+0xac>
 800f030:	f108 0602 	add.w	r6, r8, #2
 800f034:	3e01      	subs	r6, #1
 800f036:	4638      	mov	r0, r7
 800f038:	612e      	str	r6, [r5, #16]
 800f03a:	4621      	mov	r1, r4
 800f03c:	f7ff fdd2 	bl	800ebe4 <_Bfree>
 800f040:	4628      	mov	r0, r5
 800f042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f046:	f842 0f04 	str.w	r0, [r2, #4]!
 800f04a:	3301      	adds	r3, #1
 800f04c:	e7c1      	b.n	800efd2 <__lshift+0x4a>
 800f04e:	3904      	subs	r1, #4
 800f050:	f853 2b04 	ldr.w	r2, [r3], #4
 800f054:	f841 2f04 	str.w	r2, [r1, #4]!
 800f058:	4298      	cmp	r0, r3
 800f05a:	d8f9      	bhi.n	800f050 <__lshift+0xc8>
 800f05c:	e7ea      	b.n	800f034 <__lshift+0xac>
 800f05e:	bf00      	nop
 800f060:	080131d5 	.word	0x080131d5
 800f064:	08013248 	.word	0x08013248

0800f068 <__mcmp>:
 800f068:	b530      	push	{r4, r5, lr}
 800f06a:	6902      	ldr	r2, [r0, #16]
 800f06c:	690c      	ldr	r4, [r1, #16]
 800f06e:	1b12      	subs	r2, r2, r4
 800f070:	d10e      	bne.n	800f090 <__mcmp+0x28>
 800f072:	f100 0314 	add.w	r3, r0, #20
 800f076:	3114      	adds	r1, #20
 800f078:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f07c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f080:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f084:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f088:	42a5      	cmp	r5, r4
 800f08a:	d003      	beq.n	800f094 <__mcmp+0x2c>
 800f08c:	d305      	bcc.n	800f09a <__mcmp+0x32>
 800f08e:	2201      	movs	r2, #1
 800f090:	4610      	mov	r0, r2
 800f092:	bd30      	pop	{r4, r5, pc}
 800f094:	4283      	cmp	r3, r0
 800f096:	d3f3      	bcc.n	800f080 <__mcmp+0x18>
 800f098:	e7fa      	b.n	800f090 <__mcmp+0x28>
 800f09a:	f04f 32ff 	mov.w	r2, #4294967295
 800f09e:	e7f7      	b.n	800f090 <__mcmp+0x28>

0800f0a0 <__mdiff>:
 800f0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	4690      	mov	r8, r2
 800f0ae:	f7ff ffdb 	bl	800f068 <__mcmp>
 800f0b2:	1e05      	subs	r5, r0, #0
 800f0b4:	d110      	bne.n	800f0d8 <__mdiff+0x38>
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f7ff fd53 	bl	800eb64 <_Balloc>
 800f0be:	b930      	cbnz	r0, 800f0ce <__mdiff+0x2e>
 800f0c0:	4b3a      	ldr	r3, [pc, #232]	; (800f1ac <__mdiff+0x10c>)
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	f240 2132 	movw	r1, #562	; 0x232
 800f0c8:	4839      	ldr	r0, [pc, #228]	; (800f1b0 <__mdiff+0x110>)
 800f0ca:	f001 fa97 	bl	80105fc <__assert_func>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d8:	bfa4      	itt	ge
 800f0da:	4643      	movge	r3, r8
 800f0dc:	46a0      	movge	r8, r4
 800f0de:	4630      	mov	r0, r6
 800f0e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f0e4:	bfa6      	itte	ge
 800f0e6:	461c      	movge	r4, r3
 800f0e8:	2500      	movge	r5, #0
 800f0ea:	2501      	movlt	r5, #1
 800f0ec:	f7ff fd3a 	bl	800eb64 <_Balloc>
 800f0f0:	b920      	cbnz	r0, 800f0fc <__mdiff+0x5c>
 800f0f2:	4b2e      	ldr	r3, [pc, #184]	; (800f1ac <__mdiff+0x10c>)
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f0fa:	e7e5      	b.n	800f0c8 <__mdiff+0x28>
 800f0fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f100:	6926      	ldr	r6, [r4, #16]
 800f102:	60c5      	str	r5, [r0, #12]
 800f104:	f104 0914 	add.w	r9, r4, #20
 800f108:	f108 0514 	add.w	r5, r8, #20
 800f10c:	f100 0e14 	add.w	lr, r0, #20
 800f110:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f114:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f118:	f108 0210 	add.w	r2, r8, #16
 800f11c:	46f2      	mov	sl, lr
 800f11e:	2100      	movs	r1, #0
 800f120:	f859 3b04 	ldr.w	r3, [r9], #4
 800f124:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f128:	fa1f f883 	uxth.w	r8, r3
 800f12c:	fa11 f18b 	uxtah	r1, r1, fp
 800f130:	0c1b      	lsrs	r3, r3, #16
 800f132:	eba1 0808 	sub.w	r8, r1, r8
 800f136:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f13a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f13e:	fa1f f888 	uxth.w	r8, r8
 800f142:	1419      	asrs	r1, r3, #16
 800f144:	454e      	cmp	r6, r9
 800f146:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f14a:	f84a 3b04 	str.w	r3, [sl], #4
 800f14e:	d8e7      	bhi.n	800f120 <__mdiff+0x80>
 800f150:	1b33      	subs	r3, r6, r4
 800f152:	3b15      	subs	r3, #21
 800f154:	f023 0303 	bic.w	r3, r3, #3
 800f158:	3304      	adds	r3, #4
 800f15a:	3415      	adds	r4, #21
 800f15c:	42a6      	cmp	r6, r4
 800f15e:	bf38      	it	cc
 800f160:	2304      	movcc	r3, #4
 800f162:	441d      	add	r5, r3
 800f164:	4473      	add	r3, lr
 800f166:	469e      	mov	lr, r3
 800f168:	462e      	mov	r6, r5
 800f16a:	4566      	cmp	r6, ip
 800f16c:	d30e      	bcc.n	800f18c <__mdiff+0xec>
 800f16e:	f10c 0203 	add.w	r2, ip, #3
 800f172:	1b52      	subs	r2, r2, r5
 800f174:	f022 0203 	bic.w	r2, r2, #3
 800f178:	3d03      	subs	r5, #3
 800f17a:	45ac      	cmp	ip, r5
 800f17c:	bf38      	it	cc
 800f17e:	2200      	movcc	r2, #0
 800f180:	441a      	add	r2, r3
 800f182:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f186:	b17b      	cbz	r3, 800f1a8 <__mdiff+0x108>
 800f188:	6107      	str	r7, [r0, #16]
 800f18a:	e7a3      	b.n	800f0d4 <__mdiff+0x34>
 800f18c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f190:	fa11 f288 	uxtah	r2, r1, r8
 800f194:	1414      	asrs	r4, r2, #16
 800f196:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f19a:	b292      	uxth	r2, r2
 800f19c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f1a0:	f84e 2b04 	str.w	r2, [lr], #4
 800f1a4:	1421      	asrs	r1, r4, #16
 800f1a6:	e7e0      	b.n	800f16a <__mdiff+0xca>
 800f1a8:	3f01      	subs	r7, #1
 800f1aa:	e7ea      	b.n	800f182 <__mdiff+0xe2>
 800f1ac:	080131d5 	.word	0x080131d5
 800f1b0:	08013248 	.word	0x08013248

0800f1b4 <__d2b>:
 800f1b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1b8:	4689      	mov	r9, r1
 800f1ba:	2101      	movs	r1, #1
 800f1bc:	ec57 6b10 	vmov	r6, r7, d0
 800f1c0:	4690      	mov	r8, r2
 800f1c2:	f7ff fccf 	bl	800eb64 <_Balloc>
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	b930      	cbnz	r0, 800f1d8 <__d2b+0x24>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	4b25      	ldr	r3, [pc, #148]	; (800f264 <__d2b+0xb0>)
 800f1ce:	4826      	ldr	r0, [pc, #152]	; (800f268 <__d2b+0xb4>)
 800f1d0:	f240 310a 	movw	r1, #778	; 0x30a
 800f1d4:	f001 fa12 	bl	80105fc <__assert_func>
 800f1d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f1dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f1e0:	bb35      	cbnz	r5, 800f230 <__d2b+0x7c>
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	d028      	beq.n	800f23a <__d2b+0x86>
 800f1e8:	4668      	mov	r0, sp
 800f1ea:	9600      	str	r6, [sp, #0]
 800f1ec:	f7ff fd82 	bl	800ecf4 <__lo0bits>
 800f1f0:	9900      	ldr	r1, [sp, #0]
 800f1f2:	b300      	cbz	r0, 800f236 <__d2b+0x82>
 800f1f4:	9a01      	ldr	r2, [sp, #4]
 800f1f6:	f1c0 0320 	rsb	r3, r0, #32
 800f1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f1fe:	430b      	orrs	r3, r1
 800f200:	40c2      	lsrs	r2, r0
 800f202:	6163      	str	r3, [r4, #20]
 800f204:	9201      	str	r2, [sp, #4]
 800f206:	9b01      	ldr	r3, [sp, #4]
 800f208:	61a3      	str	r3, [r4, #24]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bf14      	ite	ne
 800f20e:	2202      	movne	r2, #2
 800f210:	2201      	moveq	r2, #1
 800f212:	6122      	str	r2, [r4, #16]
 800f214:	b1d5      	cbz	r5, 800f24c <__d2b+0x98>
 800f216:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f21a:	4405      	add	r5, r0
 800f21c:	f8c9 5000 	str.w	r5, [r9]
 800f220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f224:	f8c8 0000 	str.w	r0, [r8]
 800f228:	4620      	mov	r0, r4
 800f22a:	b003      	add	sp, #12
 800f22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f234:	e7d5      	b.n	800f1e2 <__d2b+0x2e>
 800f236:	6161      	str	r1, [r4, #20]
 800f238:	e7e5      	b.n	800f206 <__d2b+0x52>
 800f23a:	a801      	add	r0, sp, #4
 800f23c:	f7ff fd5a 	bl	800ecf4 <__lo0bits>
 800f240:	9b01      	ldr	r3, [sp, #4]
 800f242:	6163      	str	r3, [r4, #20]
 800f244:	2201      	movs	r2, #1
 800f246:	6122      	str	r2, [r4, #16]
 800f248:	3020      	adds	r0, #32
 800f24a:	e7e3      	b.n	800f214 <__d2b+0x60>
 800f24c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f250:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f254:	f8c9 0000 	str.w	r0, [r9]
 800f258:	6918      	ldr	r0, [r3, #16]
 800f25a:	f7ff fd2b 	bl	800ecb4 <__hi0bits>
 800f25e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f262:	e7df      	b.n	800f224 <__d2b+0x70>
 800f264:	080131d5 	.word	0x080131d5
 800f268:	08013248 	.word	0x08013248

0800f26c <_calloc_r>:
 800f26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f26e:	fba1 2402 	umull	r2, r4, r1, r2
 800f272:	b94c      	cbnz	r4, 800f288 <_calloc_r+0x1c>
 800f274:	4611      	mov	r1, r2
 800f276:	9201      	str	r2, [sp, #4]
 800f278:	f000 f87a 	bl	800f370 <_malloc_r>
 800f27c:	9a01      	ldr	r2, [sp, #4]
 800f27e:	4605      	mov	r5, r0
 800f280:	b930      	cbnz	r0, 800f290 <_calloc_r+0x24>
 800f282:	4628      	mov	r0, r5
 800f284:	b003      	add	sp, #12
 800f286:	bd30      	pop	{r4, r5, pc}
 800f288:	220c      	movs	r2, #12
 800f28a:	6002      	str	r2, [r0, #0]
 800f28c:	2500      	movs	r5, #0
 800f28e:	e7f8      	b.n	800f282 <_calloc_r+0x16>
 800f290:	4621      	mov	r1, r4
 800f292:	f7fd fd8d 	bl	800cdb0 <memset>
 800f296:	e7f4      	b.n	800f282 <_calloc_r+0x16>

0800f298 <_free_r>:
 800f298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f29a:	2900      	cmp	r1, #0
 800f29c:	d044      	beq.n	800f328 <_free_r+0x90>
 800f29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2a2:	9001      	str	r0, [sp, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f1a1 0404 	sub.w	r4, r1, #4
 800f2aa:	bfb8      	it	lt
 800f2ac:	18e4      	addlt	r4, r4, r3
 800f2ae:	f001 fa45 	bl	801073c <__malloc_lock>
 800f2b2:	4a1e      	ldr	r2, [pc, #120]	; (800f32c <_free_r+0x94>)
 800f2b4:	9801      	ldr	r0, [sp, #4]
 800f2b6:	6813      	ldr	r3, [r2, #0]
 800f2b8:	b933      	cbnz	r3, 800f2c8 <_free_r+0x30>
 800f2ba:	6063      	str	r3, [r4, #4]
 800f2bc:	6014      	str	r4, [r2, #0]
 800f2be:	b003      	add	sp, #12
 800f2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2c4:	f001 ba40 	b.w	8010748 <__malloc_unlock>
 800f2c8:	42a3      	cmp	r3, r4
 800f2ca:	d908      	bls.n	800f2de <_free_r+0x46>
 800f2cc:	6825      	ldr	r5, [r4, #0]
 800f2ce:	1961      	adds	r1, r4, r5
 800f2d0:	428b      	cmp	r3, r1
 800f2d2:	bf01      	itttt	eq
 800f2d4:	6819      	ldreq	r1, [r3, #0]
 800f2d6:	685b      	ldreq	r3, [r3, #4]
 800f2d8:	1949      	addeq	r1, r1, r5
 800f2da:	6021      	streq	r1, [r4, #0]
 800f2dc:	e7ed      	b.n	800f2ba <_free_r+0x22>
 800f2de:	461a      	mov	r2, r3
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	b10b      	cbz	r3, 800f2e8 <_free_r+0x50>
 800f2e4:	42a3      	cmp	r3, r4
 800f2e6:	d9fa      	bls.n	800f2de <_free_r+0x46>
 800f2e8:	6811      	ldr	r1, [r2, #0]
 800f2ea:	1855      	adds	r5, r2, r1
 800f2ec:	42a5      	cmp	r5, r4
 800f2ee:	d10b      	bne.n	800f308 <_free_r+0x70>
 800f2f0:	6824      	ldr	r4, [r4, #0]
 800f2f2:	4421      	add	r1, r4
 800f2f4:	1854      	adds	r4, r2, r1
 800f2f6:	42a3      	cmp	r3, r4
 800f2f8:	6011      	str	r1, [r2, #0]
 800f2fa:	d1e0      	bne.n	800f2be <_free_r+0x26>
 800f2fc:	681c      	ldr	r4, [r3, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	6053      	str	r3, [r2, #4]
 800f302:	4421      	add	r1, r4
 800f304:	6011      	str	r1, [r2, #0]
 800f306:	e7da      	b.n	800f2be <_free_r+0x26>
 800f308:	d902      	bls.n	800f310 <_free_r+0x78>
 800f30a:	230c      	movs	r3, #12
 800f30c:	6003      	str	r3, [r0, #0]
 800f30e:	e7d6      	b.n	800f2be <_free_r+0x26>
 800f310:	6825      	ldr	r5, [r4, #0]
 800f312:	1961      	adds	r1, r4, r5
 800f314:	428b      	cmp	r3, r1
 800f316:	bf04      	itt	eq
 800f318:	6819      	ldreq	r1, [r3, #0]
 800f31a:	685b      	ldreq	r3, [r3, #4]
 800f31c:	6063      	str	r3, [r4, #4]
 800f31e:	bf04      	itt	eq
 800f320:	1949      	addeq	r1, r1, r5
 800f322:	6021      	streq	r1, [r4, #0]
 800f324:	6054      	str	r4, [r2, #4]
 800f326:	e7ca      	b.n	800f2be <_free_r+0x26>
 800f328:	b003      	add	sp, #12
 800f32a:	bd30      	pop	{r4, r5, pc}
 800f32c:	20000398 	.word	0x20000398

0800f330 <sbrk_aligned>:
 800f330:	b570      	push	{r4, r5, r6, lr}
 800f332:	4e0e      	ldr	r6, [pc, #56]	; (800f36c <sbrk_aligned+0x3c>)
 800f334:	460c      	mov	r4, r1
 800f336:	6831      	ldr	r1, [r6, #0]
 800f338:	4605      	mov	r5, r0
 800f33a:	b911      	cbnz	r1, 800f342 <sbrk_aligned+0x12>
 800f33c:	f000 fef6 	bl	801012c <_sbrk_r>
 800f340:	6030      	str	r0, [r6, #0]
 800f342:	4621      	mov	r1, r4
 800f344:	4628      	mov	r0, r5
 800f346:	f000 fef1 	bl	801012c <_sbrk_r>
 800f34a:	1c43      	adds	r3, r0, #1
 800f34c:	d00a      	beq.n	800f364 <sbrk_aligned+0x34>
 800f34e:	1cc4      	adds	r4, r0, #3
 800f350:	f024 0403 	bic.w	r4, r4, #3
 800f354:	42a0      	cmp	r0, r4
 800f356:	d007      	beq.n	800f368 <sbrk_aligned+0x38>
 800f358:	1a21      	subs	r1, r4, r0
 800f35a:	4628      	mov	r0, r5
 800f35c:	f000 fee6 	bl	801012c <_sbrk_r>
 800f360:	3001      	adds	r0, #1
 800f362:	d101      	bne.n	800f368 <sbrk_aligned+0x38>
 800f364:	f04f 34ff 	mov.w	r4, #4294967295
 800f368:	4620      	mov	r0, r4
 800f36a:	bd70      	pop	{r4, r5, r6, pc}
 800f36c:	2000039c 	.word	0x2000039c

0800f370 <_malloc_r>:
 800f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f374:	1ccd      	adds	r5, r1, #3
 800f376:	f025 0503 	bic.w	r5, r5, #3
 800f37a:	3508      	adds	r5, #8
 800f37c:	2d0c      	cmp	r5, #12
 800f37e:	bf38      	it	cc
 800f380:	250c      	movcc	r5, #12
 800f382:	2d00      	cmp	r5, #0
 800f384:	4607      	mov	r7, r0
 800f386:	db01      	blt.n	800f38c <_malloc_r+0x1c>
 800f388:	42a9      	cmp	r1, r5
 800f38a:	d905      	bls.n	800f398 <_malloc_r+0x28>
 800f38c:	230c      	movs	r3, #12
 800f38e:	603b      	str	r3, [r7, #0]
 800f390:	2600      	movs	r6, #0
 800f392:	4630      	mov	r0, r6
 800f394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f398:	4e2e      	ldr	r6, [pc, #184]	; (800f454 <_malloc_r+0xe4>)
 800f39a:	f001 f9cf 	bl	801073c <__malloc_lock>
 800f39e:	6833      	ldr	r3, [r6, #0]
 800f3a0:	461c      	mov	r4, r3
 800f3a2:	bb34      	cbnz	r4, 800f3f2 <_malloc_r+0x82>
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	f7ff ffc2 	bl	800f330 <sbrk_aligned>
 800f3ac:	1c43      	adds	r3, r0, #1
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	d14d      	bne.n	800f44e <_malloc_r+0xde>
 800f3b2:	6834      	ldr	r4, [r6, #0]
 800f3b4:	4626      	mov	r6, r4
 800f3b6:	2e00      	cmp	r6, #0
 800f3b8:	d140      	bne.n	800f43c <_malloc_r+0xcc>
 800f3ba:	6823      	ldr	r3, [r4, #0]
 800f3bc:	4631      	mov	r1, r6
 800f3be:	4638      	mov	r0, r7
 800f3c0:	eb04 0803 	add.w	r8, r4, r3
 800f3c4:	f000 feb2 	bl	801012c <_sbrk_r>
 800f3c8:	4580      	cmp	r8, r0
 800f3ca:	d13a      	bne.n	800f442 <_malloc_r+0xd2>
 800f3cc:	6821      	ldr	r1, [r4, #0]
 800f3ce:	3503      	adds	r5, #3
 800f3d0:	1a6d      	subs	r5, r5, r1
 800f3d2:	f025 0503 	bic.w	r5, r5, #3
 800f3d6:	3508      	adds	r5, #8
 800f3d8:	2d0c      	cmp	r5, #12
 800f3da:	bf38      	it	cc
 800f3dc:	250c      	movcc	r5, #12
 800f3de:	4629      	mov	r1, r5
 800f3e0:	4638      	mov	r0, r7
 800f3e2:	f7ff ffa5 	bl	800f330 <sbrk_aligned>
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	d02b      	beq.n	800f442 <_malloc_r+0xd2>
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	442b      	add	r3, r5
 800f3ee:	6023      	str	r3, [r4, #0]
 800f3f0:	e00e      	b.n	800f410 <_malloc_r+0xa0>
 800f3f2:	6822      	ldr	r2, [r4, #0]
 800f3f4:	1b52      	subs	r2, r2, r5
 800f3f6:	d41e      	bmi.n	800f436 <_malloc_r+0xc6>
 800f3f8:	2a0b      	cmp	r2, #11
 800f3fa:	d916      	bls.n	800f42a <_malloc_r+0xba>
 800f3fc:	1961      	adds	r1, r4, r5
 800f3fe:	42a3      	cmp	r3, r4
 800f400:	6025      	str	r5, [r4, #0]
 800f402:	bf18      	it	ne
 800f404:	6059      	strne	r1, [r3, #4]
 800f406:	6863      	ldr	r3, [r4, #4]
 800f408:	bf08      	it	eq
 800f40a:	6031      	streq	r1, [r6, #0]
 800f40c:	5162      	str	r2, [r4, r5]
 800f40e:	604b      	str	r3, [r1, #4]
 800f410:	4638      	mov	r0, r7
 800f412:	f104 060b 	add.w	r6, r4, #11
 800f416:	f001 f997 	bl	8010748 <__malloc_unlock>
 800f41a:	f026 0607 	bic.w	r6, r6, #7
 800f41e:	1d23      	adds	r3, r4, #4
 800f420:	1af2      	subs	r2, r6, r3
 800f422:	d0b6      	beq.n	800f392 <_malloc_r+0x22>
 800f424:	1b9b      	subs	r3, r3, r6
 800f426:	50a3      	str	r3, [r4, r2]
 800f428:	e7b3      	b.n	800f392 <_malloc_r+0x22>
 800f42a:	6862      	ldr	r2, [r4, #4]
 800f42c:	42a3      	cmp	r3, r4
 800f42e:	bf0c      	ite	eq
 800f430:	6032      	streq	r2, [r6, #0]
 800f432:	605a      	strne	r2, [r3, #4]
 800f434:	e7ec      	b.n	800f410 <_malloc_r+0xa0>
 800f436:	4623      	mov	r3, r4
 800f438:	6864      	ldr	r4, [r4, #4]
 800f43a:	e7b2      	b.n	800f3a2 <_malloc_r+0x32>
 800f43c:	4634      	mov	r4, r6
 800f43e:	6876      	ldr	r6, [r6, #4]
 800f440:	e7b9      	b.n	800f3b6 <_malloc_r+0x46>
 800f442:	230c      	movs	r3, #12
 800f444:	603b      	str	r3, [r7, #0]
 800f446:	4638      	mov	r0, r7
 800f448:	f001 f97e 	bl	8010748 <__malloc_unlock>
 800f44c:	e7a1      	b.n	800f392 <_malloc_r+0x22>
 800f44e:	6025      	str	r5, [r4, #0]
 800f450:	e7de      	b.n	800f410 <_malloc_r+0xa0>
 800f452:	bf00      	nop
 800f454:	20000398 	.word	0x20000398

0800f458 <__ssputs_r>:
 800f458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f45c:	688e      	ldr	r6, [r1, #8]
 800f45e:	429e      	cmp	r6, r3
 800f460:	4682      	mov	sl, r0
 800f462:	460c      	mov	r4, r1
 800f464:	4690      	mov	r8, r2
 800f466:	461f      	mov	r7, r3
 800f468:	d838      	bhi.n	800f4dc <__ssputs_r+0x84>
 800f46a:	898a      	ldrh	r2, [r1, #12]
 800f46c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f470:	d032      	beq.n	800f4d8 <__ssputs_r+0x80>
 800f472:	6825      	ldr	r5, [r4, #0]
 800f474:	6909      	ldr	r1, [r1, #16]
 800f476:	eba5 0901 	sub.w	r9, r5, r1
 800f47a:	6965      	ldr	r5, [r4, #20]
 800f47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f484:	3301      	adds	r3, #1
 800f486:	444b      	add	r3, r9
 800f488:	106d      	asrs	r5, r5, #1
 800f48a:	429d      	cmp	r5, r3
 800f48c:	bf38      	it	cc
 800f48e:	461d      	movcc	r5, r3
 800f490:	0553      	lsls	r3, r2, #21
 800f492:	d531      	bpl.n	800f4f8 <__ssputs_r+0xa0>
 800f494:	4629      	mov	r1, r5
 800f496:	f7ff ff6b 	bl	800f370 <_malloc_r>
 800f49a:	4606      	mov	r6, r0
 800f49c:	b950      	cbnz	r0, 800f4b4 <__ssputs_r+0x5c>
 800f49e:	230c      	movs	r3, #12
 800f4a0:	f8ca 3000 	str.w	r3, [sl]
 800f4a4:	89a3      	ldrh	r3, [r4, #12]
 800f4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4aa:	81a3      	strh	r3, [r4, #12]
 800f4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b4:	6921      	ldr	r1, [r4, #16]
 800f4b6:	464a      	mov	r2, r9
 800f4b8:	f7ff fb46 	bl	800eb48 <memcpy>
 800f4bc:	89a3      	ldrh	r3, [r4, #12]
 800f4be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4c6:	81a3      	strh	r3, [r4, #12]
 800f4c8:	6126      	str	r6, [r4, #16]
 800f4ca:	6165      	str	r5, [r4, #20]
 800f4cc:	444e      	add	r6, r9
 800f4ce:	eba5 0509 	sub.w	r5, r5, r9
 800f4d2:	6026      	str	r6, [r4, #0]
 800f4d4:	60a5      	str	r5, [r4, #8]
 800f4d6:	463e      	mov	r6, r7
 800f4d8:	42be      	cmp	r6, r7
 800f4da:	d900      	bls.n	800f4de <__ssputs_r+0x86>
 800f4dc:	463e      	mov	r6, r7
 800f4de:	6820      	ldr	r0, [r4, #0]
 800f4e0:	4632      	mov	r2, r6
 800f4e2:	4641      	mov	r1, r8
 800f4e4:	f001 f910 	bl	8010708 <memmove>
 800f4e8:	68a3      	ldr	r3, [r4, #8]
 800f4ea:	1b9b      	subs	r3, r3, r6
 800f4ec:	60a3      	str	r3, [r4, #8]
 800f4ee:	6823      	ldr	r3, [r4, #0]
 800f4f0:	4433      	add	r3, r6
 800f4f2:	6023      	str	r3, [r4, #0]
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	e7db      	b.n	800f4b0 <__ssputs_r+0x58>
 800f4f8:	462a      	mov	r2, r5
 800f4fa:	f001 f92b 	bl	8010754 <_realloc_r>
 800f4fe:	4606      	mov	r6, r0
 800f500:	2800      	cmp	r0, #0
 800f502:	d1e1      	bne.n	800f4c8 <__ssputs_r+0x70>
 800f504:	6921      	ldr	r1, [r4, #16]
 800f506:	4650      	mov	r0, sl
 800f508:	f7ff fec6 	bl	800f298 <_free_r>
 800f50c:	e7c7      	b.n	800f49e <__ssputs_r+0x46>
	...

0800f510 <_svfiprintf_r>:
 800f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	4698      	mov	r8, r3
 800f516:	898b      	ldrh	r3, [r1, #12]
 800f518:	061b      	lsls	r3, r3, #24
 800f51a:	b09d      	sub	sp, #116	; 0x74
 800f51c:	4607      	mov	r7, r0
 800f51e:	460d      	mov	r5, r1
 800f520:	4614      	mov	r4, r2
 800f522:	d50e      	bpl.n	800f542 <_svfiprintf_r+0x32>
 800f524:	690b      	ldr	r3, [r1, #16]
 800f526:	b963      	cbnz	r3, 800f542 <_svfiprintf_r+0x32>
 800f528:	2140      	movs	r1, #64	; 0x40
 800f52a:	f7ff ff21 	bl	800f370 <_malloc_r>
 800f52e:	6028      	str	r0, [r5, #0]
 800f530:	6128      	str	r0, [r5, #16]
 800f532:	b920      	cbnz	r0, 800f53e <_svfiprintf_r+0x2e>
 800f534:	230c      	movs	r3, #12
 800f536:	603b      	str	r3, [r7, #0]
 800f538:	f04f 30ff 	mov.w	r0, #4294967295
 800f53c:	e0d1      	b.n	800f6e2 <_svfiprintf_r+0x1d2>
 800f53e:	2340      	movs	r3, #64	; 0x40
 800f540:	616b      	str	r3, [r5, #20]
 800f542:	2300      	movs	r3, #0
 800f544:	9309      	str	r3, [sp, #36]	; 0x24
 800f546:	2320      	movs	r3, #32
 800f548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f54c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f550:	2330      	movs	r3, #48	; 0x30
 800f552:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f6fc <_svfiprintf_r+0x1ec>
 800f556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f55a:	f04f 0901 	mov.w	r9, #1
 800f55e:	4623      	mov	r3, r4
 800f560:	469a      	mov	sl, r3
 800f562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f566:	b10a      	cbz	r2, 800f56c <_svfiprintf_r+0x5c>
 800f568:	2a25      	cmp	r2, #37	; 0x25
 800f56a:	d1f9      	bne.n	800f560 <_svfiprintf_r+0x50>
 800f56c:	ebba 0b04 	subs.w	fp, sl, r4
 800f570:	d00b      	beq.n	800f58a <_svfiprintf_r+0x7a>
 800f572:	465b      	mov	r3, fp
 800f574:	4622      	mov	r2, r4
 800f576:	4629      	mov	r1, r5
 800f578:	4638      	mov	r0, r7
 800f57a:	f7ff ff6d 	bl	800f458 <__ssputs_r>
 800f57e:	3001      	adds	r0, #1
 800f580:	f000 80aa 	beq.w	800f6d8 <_svfiprintf_r+0x1c8>
 800f584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f586:	445a      	add	r2, fp
 800f588:	9209      	str	r2, [sp, #36]	; 0x24
 800f58a:	f89a 3000 	ldrb.w	r3, [sl]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	f000 80a2 	beq.w	800f6d8 <_svfiprintf_r+0x1c8>
 800f594:	2300      	movs	r3, #0
 800f596:	f04f 32ff 	mov.w	r2, #4294967295
 800f59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f59e:	f10a 0a01 	add.w	sl, sl, #1
 800f5a2:	9304      	str	r3, [sp, #16]
 800f5a4:	9307      	str	r3, [sp, #28]
 800f5a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5aa:	931a      	str	r3, [sp, #104]	; 0x68
 800f5ac:	4654      	mov	r4, sl
 800f5ae:	2205      	movs	r2, #5
 800f5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b4:	4851      	ldr	r0, [pc, #324]	; (800f6fc <_svfiprintf_r+0x1ec>)
 800f5b6:	f7f0 fe33 	bl	8000220 <memchr>
 800f5ba:	9a04      	ldr	r2, [sp, #16]
 800f5bc:	b9d8      	cbnz	r0, 800f5f6 <_svfiprintf_r+0xe6>
 800f5be:	06d0      	lsls	r0, r2, #27
 800f5c0:	bf44      	itt	mi
 800f5c2:	2320      	movmi	r3, #32
 800f5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5c8:	0711      	lsls	r1, r2, #28
 800f5ca:	bf44      	itt	mi
 800f5cc:	232b      	movmi	r3, #43	; 0x2b
 800f5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f5d8:	d015      	beq.n	800f606 <_svfiprintf_r+0xf6>
 800f5da:	9a07      	ldr	r2, [sp, #28]
 800f5dc:	4654      	mov	r4, sl
 800f5de:	2000      	movs	r0, #0
 800f5e0:	f04f 0c0a 	mov.w	ip, #10
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5ea:	3b30      	subs	r3, #48	; 0x30
 800f5ec:	2b09      	cmp	r3, #9
 800f5ee:	d94e      	bls.n	800f68e <_svfiprintf_r+0x17e>
 800f5f0:	b1b0      	cbz	r0, 800f620 <_svfiprintf_r+0x110>
 800f5f2:	9207      	str	r2, [sp, #28]
 800f5f4:	e014      	b.n	800f620 <_svfiprintf_r+0x110>
 800f5f6:	eba0 0308 	sub.w	r3, r0, r8
 800f5fa:	fa09 f303 	lsl.w	r3, r9, r3
 800f5fe:	4313      	orrs	r3, r2
 800f600:	9304      	str	r3, [sp, #16]
 800f602:	46a2      	mov	sl, r4
 800f604:	e7d2      	b.n	800f5ac <_svfiprintf_r+0x9c>
 800f606:	9b03      	ldr	r3, [sp, #12]
 800f608:	1d19      	adds	r1, r3, #4
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	9103      	str	r1, [sp, #12]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	bfbb      	ittet	lt
 800f612:	425b      	neglt	r3, r3
 800f614:	f042 0202 	orrlt.w	r2, r2, #2
 800f618:	9307      	strge	r3, [sp, #28]
 800f61a:	9307      	strlt	r3, [sp, #28]
 800f61c:	bfb8      	it	lt
 800f61e:	9204      	strlt	r2, [sp, #16]
 800f620:	7823      	ldrb	r3, [r4, #0]
 800f622:	2b2e      	cmp	r3, #46	; 0x2e
 800f624:	d10c      	bne.n	800f640 <_svfiprintf_r+0x130>
 800f626:	7863      	ldrb	r3, [r4, #1]
 800f628:	2b2a      	cmp	r3, #42	; 0x2a
 800f62a:	d135      	bne.n	800f698 <_svfiprintf_r+0x188>
 800f62c:	9b03      	ldr	r3, [sp, #12]
 800f62e:	1d1a      	adds	r2, r3, #4
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	9203      	str	r2, [sp, #12]
 800f634:	2b00      	cmp	r3, #0
 800f636:	bfb8      	it	lt
 800f638:	f04f 33ff 	movlt.w	r3, #4294967295
 800f63c:	3402      	adds	r4, #2
 800f63e:	9305      	str	r3, [sp, #20]
 800f640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f70c <_svfiprintf_r+0x1fc>
 800f644:	7821      	ldrb	r1, [r4, #0]
 800f646:	2203      	movs	r2, #3
 800f648:	4650      	mov	r0, sl
 800f64a:	f7f0 fde9 	bl	8000220 <memchr>
 800f64e:	b140      	cbz	r0, 800f662 <_svfiprintf_r+0x152>
 800f650:	2340      	movs	r3, #64	; 0x40
 800f652:	eba0 000a 	sub.w	r0, r0, sl
 800f656:	fa03 f000 	lsl.w	r0, r3, r0
 800f65a:	9b04      	ldr	r3, [sp, #16]
 800f65c:	4303      	orrs	r3, r0
 800f65e:	3401      	adds	r4, #1
 800f660:	9304      	str	r3, [sp, #16]
 800f662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f666:	4826      	ldr	r0, [pc, #152]	; (800f700 <_svfiprintf_r+0x1f0>)
 800f668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f66c:	2206      	movs	r2, #6
 800f66e:	f7f0 fdd7 	bl	8000220 <memchr>
 800f672:	2800      	cmp	r0, #0
 800f674:	d038      	beq.n	800f6e8 <_svfiprintf_r+0x1d8>
 800f676:	4b23      	ldr	r3, [pc, #140]	; (800f704 <_svfiprintf_r+0x1f4>)
 800f678:	bb1b      	cbnz	r3, 800f6c2 <_svfiprintf_r+0x1b2>
 800f67a:	9b03      	ldr	r3, [sp, #12]
 800f67c:	3307      	adds	r3, #7
 800f67e:	f023 0307 	bic.w	r3, r3, #7
 800f682:	3308      	adds	r3, #8
 800f684:	9303      	str	r3, [sp, #12]
 800f686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f688:	4433      	add	r3, r6
 800f68a:	9309      	str	r3, [sp, #36]	; 0x24
 800f68c:	e767      	b.n	800f55e <_svfiprintf_r+0x4e>
 800f68e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f692:	460c      	mov	r4, r1
 800f694:	2001      	movs	r0, #1
 800f696:	e7a5      	b.n	800f5e4 <_svfiprintf_r+0xd4>
 800f698:	2300      	movs	r3, #0
 800f69a:	3401      	adds	r4, #1
 800f69c:	9305      	str	r3, [sp, #20]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	f04f 0c0a 	mov.w	ip, #10
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6aa:	3a30      	subs	r2, #48	; 0x30
 800f6ac:	2a09      	cmp	r2, #9
 800f6ae:	d903      	bls.n	800f6b8 <_svfiprintf_r+0x1a8>
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d0c5      	beq.n	800f640 <_svfiprintf_r+0x130>
 800f6b4:	9105      	str	r1, [sp, #20]
 800f6b6:	e7c3      	b.n	800f640 <_svfiprintf_r+0x130>
 800f6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6bc:	4604      	mov	r4, r0
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e7f0      	b.n	800f6a4 <_svfiprintf_r+0x194>
 800f6c2:	ab03      	add	r3, sp, #12
 800f6c4:	9300      	str	r3, [sp, #0]
 800f6c6:	462a      	mov	r2, r5
 800f6c8:	4b0f      	ldr	r3, [pc, #60]	; (800f708 <_svfiprintf_r+0x1f8>)
 800f6ca:	a904      	add	r1, sp, #16
 800f6cc:	4638      	mov	r0, r7
 800f6ce:	f7fd fc17 	bl	800cf00 <_printf_float>
 800f6d2:	1c42      	adds	r2, r0, #1
 800f6d4:	4606      	mov	r6, r0
 800f6d6:	d1d6      	bne.n	800f686 <_svfiprintf_r+0x176>
 800f6d8:	89ab      	ldrh	r3, [r5, #12]
 800f6da:	065b      	lsls	r3, r3, #25
 800f6dc:	f53f af2c 	bmi.w	800f538 <_svfiprintf_r+0x28>
 800f6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6e2:	b01d      	add	sp, #116	; 0x74
 800f6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6e8:	ab03      	add	r3, sp, #12
 800f6ea:	9300      	str	r3, [sp, #0]
 800f6ec:	462a      	mov	r2, r5
 800f6ee:	4b06      	ldr	r3, [pc, #24]	; (800f708 <_svfiprintf_r+0x1f8>)
 800f6f0:	a904      	add	r1, sp, #16
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	f7fd fea8 	bl	800d448 <_printf_i>
 800f6f8:	e7eb      	b.n	800f6d2 <_svfiprintf_r+0x1c2>
 800f6fa:	bf00      	nop
 800f6fc:	080133a4 	.word	0x080133a4
 800f700:	080133ae 	.word	0x080133ae
 800f704:	0800cf01 	.word	0x0800cf01
 800f708:	0800f459 	.word	0x0800f459
 800f70c:	080133aa 	.word	0x080133aa

0800f710 <__sfputc_r>:
 800f710:	6893      	ldr	r3, [r2, #8]
 800f712:	3b01      	subs	r3, #1
 800f714:	2b00      	cmp	r3, #0
 800f716:	b410      	push	{r4}
 800f718:	6093      	str	r3, [r2, #8]
 800f71a:	da08      	bge.n	800f72e <__sfputc_r+0x1e>
 800f71c:	6994      	ldr	r4, [r2, #24]
 800f71e:	42a3      	cmp	r3, r4
 800f720:	db01      	blt.n	800f726 <__sfputc_r+0x16>
 800f722:	290a      	cmp	r1, #10
 800f724:	d103      	bne.n	800f72e <__sfputc_r+0x1e>
 800f726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f72a:	f7fe b879 	b.w	800d820 <__swbuf_r>
 800f72e:	6813      	ldr	r3, [r2, #0]
 800f730:	1c58      	adds	r0, r3, #1
 800f732:	6010      	str	r0, [r2, #0]
 800f734:	7019      	strb	r1, [r3, #0]
 800f736:	4608      	mov	r0, r1
 800f738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f73c:	4770      	bx	lr

0800f73e <__sfputs_r>:
 800f73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f740:	4606      	mov	r6, r0
 800f742:	460f      	mov	r7, r1
 800f744:	4614      	mov	r4, r2
 800f746:	18d5      	adds	r5, r2, r3
 800f748:	42ac      	cmp	r4, r5
 800f74a:	d101      	bne.n	800f750 <__sfputs_r+0x12>
 800f74c:	2000      	movs	r0, #0
 800f74e:	e007      	b.n	800f760 <__sfputs_r+0x22>
 800f750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f754:	463a      	mov	r2, r7
 800f756:	4630      	mov	r0, r6
 800f758:	f7ff ffda 	bl	800f710 <__sfputc_r>
 800f75c:	1c43      	adds	r3, r0, #1
 800f75e:	d1f3      	bne.n	800f748 <__sfputs_r+0xa>
 800f760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f764 <_vfiprintf_r>:
 800f764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f768:	460d      	mov	r5, r1
 800f76a:	b09d      	sub	sp, #116	; 0x74
 800f76c:	4614      	mov	r4, r2
 800f76e:	4698      	mov	r8, r3
 800f770:	4606      	mov	r6, r0
 800f772:	b118      	cbz	r0, 800f77c <_vfiprintf_r+0x18>
 800f774:	6983      	ldr	r3, [r0, #24]
 800f776:	b90b      	cbnz	r3, 800f77c <_vfiprintf_r+0x18>
 800f778:	f7ff f8b8 	bl	800e8ec <__sinit>
 800f77c:	4b89      	ldr	r3, [pc, #548]	; (800f9a4 <_vfiprintf_r+0x240>)
 800f77e:	429d      	cmp	r5, r3
 800f780:	d11b      	bne.n	800f7ba <_vfiprintf_r+0x56>
 800f782:	6875      	ldr	r5, [r6, #4]
 800f784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f786:	07d9      	lsls	r1, r3, #31
 800f788:	d405      	bmi.n	800f796 <_vfiprintf_r+0x32>
 800f78a:	89ab      	ldrh	r3, [r5, #12]
 800f78c:	059a      	lsls	r2, r3, #22
 800f78e:	d402      	bmi.n	800f796 <_vfiprintf_r+0x32>
 800f790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f792:	f7ff f96a 	bl	800ea6a <__retarget_lock_acquire_recursive>
 800f796:	89ab      	ldrh	r3, [r5, #12]
 800f798:	071b      	lsls	r3, r3, #28
 800f79a:	d501      	bpl.n	800f7a0 <_vfiprintf_r+0x3c>
 800f79c:	692b      	ldr	r3, [r5, #16]
 800f79e:	b9eb      	cbnz	r3, 800f7dc <_vfiprintf_r+0x78>
 800f7a0:	4629      	mov	r1, r5
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f7fe f88e 	bl	800d8c4 <__swsetup_r>
 800f7a8:	b1c0      	cbz	r0, 800f7dc <_vfiprintf_r+0x78>
 800f7aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7ac:	07dc      	lsls	r4, r3, #31
 800f7ae:	d50e      	bpl.n	800f7ce <_vfiprintf_r+0x6a>
 800f7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b4:	b01d      	add	sp, #116	; 0x74
 800f7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ba:	4b7b      	ldr	r3, [pc, #492]	; (800f9a8 <_vfiprintf_r+0x244>)
 800f7bc:	429d      	cmp	r5, r3
 800f7be:	d101      	bne.n	800f7c4 <_vfiprintf_r+0x60>
 800f7c0:	68b5      	ldr	r5, [r6, #8]
 800f7c2:	e7df      	b.n	800f784 <_vfiprintf_r+0x20>
 800f7c4:	4b79      	ldr	r3, [pc, #484]	; (800f9ac <_vfiprintf_r+0x248>)
 800f7c6:	429d      	cmp	r5, r3
 800f7c8:	bf08      	it	eq
 800f7ca:	68f5      	ldreq	r5, [r6, #12]
 800f7cc:	e7da      	b.n	800f784 <_vfiprintf_r+0x20>
 800f7ce:	89ab      	ldrh	r3, [r5, #12]
 800f7d0:	0598      	lsls	r0, r3, #22
 800f7d2:	d4ed      	bmi.n	800f7b0 <_vfiprintf_r+0x4c>
 800f7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7d6:	f7ff f949 	bl	800ea6c <__retarget_lock_release_recursive>
 800f7da:	e7e9      	b.n	800f7b0 <_vfiprintf_r+0x4c>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	9309      	str	r3, [sp, #36]	; 0x24
 800f7e0:	2320      	movs	r3, #32
 800f7e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ea:	2330      	movs	r3, #48	; 0x30
 800f7ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f9b0 <_vfiprintf_r+0x24c>
 800f7f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7f4:	f04f 0901 	mov.w	r9, #1
 800f7f8:	4623      	mov	r3, r4
 800f7fa:	469a      	mov	sl, r3
 800f7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f800:	b10a      	cbz	r2, 800f806 <_vfiprintf_r+0xa2>
 800f802:	2a25      	cmp	r2, #37	; 0x25
 800f804:	d1f9      	bne.n	800f7fa <_vfiprintf_r+0x96>
 800f806:	ebba 0b04 	subs.w	fp, sl, r4
 800f80a:	d00b      	beq.n	800f824 <_vfiprintf_r+0xc0>
 800f80c:	465b      	mov	r3, fp
 800f80e:	4622      	mov	r2, r4
 800f810:	4629      	mov	r1, r5
 800f812:	4630      	mov	r0, r6
 800f814:	f7ff ff93 	bl	800f73e <__sfputs_r>
 800f818:	3001      	adds	r0, #1
 800f81a:	f000 80aa 	beq.w	800f972 <_vfiprintf_r+0x20e>
 800f81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f820:	445a      	add	r2, fp
 800f822:	9209      	str	r2, [sp, #36]	; 0x24
 800f824:	f89a 3000 	ldrb.w	r3, [sl]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f000 80a2 	beq.w	800f972 <_vfiprintf_r+0x20e>
 800f82e:	2300      	movs	r3, #0
 800f830:	f04f 32ff 	mov.w	r2, #4294967295
 800f834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f838:	f10a 0a01 	add.w	sl, sl, #1
 800f83c:	9304      	str	r3, [sp, #16]
 800f83e:	9307      	str	r3, [sp, #28]
 800f840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f844:	931a      	str	r3, [sp, #104]	; 0x68
 800f846:	4654      	mov	r4, sl
 800f848:	2205      	movs	r2, #5
 800f84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f84e:	4858      	ldr	r0, [pc, #352]	; (800f9b0 <_vfiprintf_r+0x24c>)
 800f850:	f7f0 fce6 	bl	8000220 <memchr>
 800f854:	9a04      	ldr	r2, [sp, #16]
 800f856:	b9d8      	cbnz	r0, 800f890 <_vfiprintf_r+0x12c>
 800f858:	06d1      	lsls	r1, r2, #27
 800f85a:	bf44      	itt	mi
 800f85c:	2320      	movmi	r3, #32
 800f85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f862:	0713      	lsls	r3, r2, #28
 800f864:	bf44      	itt	mi
 800f866:	232b      	movmi	r3, #43	; 0x2b
 800f868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f86c:	f89a 3000 	ldrb.w	r3, [sl]
 800f870:	2b2a      	cmp	r3, #42	; 0x2a
 800f872:	d015      	beq.n	800f8a0 <_vfiprintf_r+0x13c>
 800f874:	9a07      	ldr	r2, [sp, #28]
 800f876:	4654      	mov	r4, sl
 800f878:	2000      	movs	r0, #0
 800f87a:	f04f 0c0a 	mov.w	ip, #10
 800f87e:	4621      	mov	r1, r4
 800f880:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f884:	3b30      	subs	r3, #48	; 0x30
 800f886:	2b09      	cmp	r3, #9
 800f888:	d94e      	bls.n	800f928 <_vfiprintf_r+0x1c4>
 800f88a:	b1b0      	cbz	r0, 800f8ba <_vfiprintf_r+0x156>
 800f88c:	9207      	str	r2, [sp, #28]
 800f88e:	e014      	b.n	800f8ba <_vfiprintf_r+0x156>
 800f890:	eba0 0308 	sub.w	r3, r0, r8
 800f894:	fa09 f303 	lsl.w	r3, r9, r3
 800f898:	4313      	orrs	r3, r2
 800f89a:	9304      	str	r3, [sp, #16]
 800f89c:	46a2      	mov	sl, r4
 800f89e:	e7d2      	b.n	800f846 <_vfiprintf_r+0xe2>
 800f8a0:	9b03      	ldr	r3, [sp, #12]
 800f8a2:	1d19      	adds	r1, r3, #4
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	9103      	str	r1, [sp, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	bfbb      	ittet	lt
 800f8ac:	425b      	neglt	r3, r3
 800f8ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f8b2:	9307      	strge	r3, [sp, #28]
 800f8b4:	9307      	strlt	r3, [sp, #28]
 800f8b6:	bfb8      	it	lt
 800f8b8:	9204      	strlt	r2, [sp, #16]
 800f8ba:	7823      	ldrb	r3, [r4, #0]
 800f8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800f8be:	d10c      	bne.n	800f8da <_vfiprintf_r+0x176>
 800f8c0:	7863      	ldrb	r3, [r4, #1]
 800f8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800f8c4:	d135      	bne.n	800f932 <_vfiprintf_r+0x1ce>
 800f8c6:	9b03      	ldr	r3, [sp, #12]
 800f8c8:	1d1a      	adds	r2, r3, #4
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	9203      	str	r2, [sp, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	bfb8      	it	lt
 800f8d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8d6:	3402      	adds	r4, #2
 800f8d8:	9305      	str	r3, [sp, #20]
 800f8da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f9c0 <_vfiprintf_r+0x25c>
 800f8de:	7821      	ldrb	r1, [r4, #0]
 800f8e0:	2203      	movs	r2, #3
 800f8e2:	4650      	mov	r0, sl
 800f8e4:	f7f0 fc9c 	bl	8000220 <memchr>
 800f8e8:	b140      	cbz	r0, 800f8fc <_vfiprintf_r+0x198>
 800f8ea:	2340      	movs	r3, #64	; 0x40
 800f8ec:	eba0 000a 	sub.w	r0, r0, sl
 800f8f0:	fa03 f000 	lsl.w	r0, r3, r0
 800f8f4:	9b04      	ldr	r3, [sp, #16]
 800f8f6:	4303      	orrs	r3, r0
 800f8f8:	3401      	adds	r4, #1
 800f8fa:	9304      	str	r3, [sp, #16]
 800f8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f900:	482c      	ldr	r0, [pc, #176]	; (800f9b4 <_vfiprintf_r+0x250>)
 800f902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f906:	2206      	movs	r2, #6
 800f908:	f7f0 fc8a 	bl	8000220 <memchr>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	d03f      	beq.n	800f990 <_vfiprintf_r+0x22c>
 800f910:	4b29      	ldr	r3, [pc, #164]	; (800f9b8 <_vfiprintf_r+0x254>)
 800f912:	bb1b      	cbnz	r3, 800f95c <_vfiprintf_r+0x1f8>
 800f914:	9b03      	ldr	r3, [sp, #12]
 800f916:	3307      	adds	r3, #7
 800f918:	f023 0307 	bic.w	r3, r3, #7
 800f91c:	3308      	adds	r3, #8
 800f91e:	9303      	str	r3, [sp, #12]
 800f920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f922:	443b      	add	r3, r7
 800f924:	9309      	str	r3, [sp, #36]	; 0x24
 800f926:	e767      	b.n	800f7f8 <_vfiprintf_r+0x94>
 800f928:	fb0c 3202 	mla	r2, ip, r2, r3
 800f92c:	460c      	mov	r4, r1
 800f92e:	2001      	movs	r0, #1
 800f930:	e7a5      	b.n	800f87e <_vfiprintf_r+0x11a>
 800f932:	2300      	movs	r3, #0
 800f934:	3401      	adds	r4, #1
 800f936:	9305      	str	r3, [sp, #20]
 800f938:	4619      	mov	r1, r3
 800f93a:	f04f 0c0a 	mov.w	ip, #10
 800f93e:	4620      	mov	r0, r4
 800f940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f944:	3a30      	subs	r2, #48	; 0x30
 800f946:	2a09      	cmp	r2, #9
 800f948:	d903      	bls.n	800f952 <_vfiprintf_r+0x1ee>
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d0c5      	beq.n	800f8da <_vfiprintf_r+0x176>
 800f94e:	9105      	str	r1, [sp, #20]
 800f950:	e7c3      	b.n	800f8da <_vfiprintf_r+0x176>
 800f952:	fb0c 2101 	mla	r1, ip, r1, r2
 800f956:	4604      	mov	r4, r0
 800f958:	2301      	movs	r3, #1
 800f95a:	e7f0      	b.n	800f93e <_vfiprintf_r+0x1da>
 800f95c:	ab03      	add	r3, sp, #12
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	462a      	mov	r2, r5
 800f962:	4b16      	ldr	r3, [pc, #88]	; (800f9bc <_vfiprintf_r+0x258>)
 800f964:	a904      	add	r1, sp, #16
 800f966:	4630      	mov	r0, r6
 800f968:	f7fd faca 	bl	800cf00 <_printf_float>
 800f96c:	4607      	mov	r7, r0
 800f96e:	1c78      	adds	r0, r7, #1
 800f970:	d1d6      	bne.n	800f920 <_vfiprintf_r+0x1bc>
 800f972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f974:	07d9      	lsls	r1, r3, #31
 800f976:	d405      	bmi.n	800f984 <_vfiprintf_r+0x220>
 800f978:	89ab      	ldrh	r3, [r5, #12]
 800f97a:	059a      	lsls	r2, r3, #22
 800f97c:	d402      	bmi.n	800f984 <_vfiprintf_r+0x220>
 800f97e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f980:	f7ff f874 	bl	800ea6c <__retarget_lock_release_recursive>
 800f984:	89ab      	ldrh	r3, [r5, #12]
 800f986:	065b      	lsls	r3, r3, #25
 800f988:	f53f af12 	bmi.w	800f7b0 <_vfiprintf_r+0x4c>
 800f98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f98e:	e711      	b.n	800f7b4 <_vfiprintf_r+0x50>
 800f990:	ab03      	add	r3, sp, #12
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	462a      	mov	r2, r5
 800f996:	4b09      	ldr	r3, [pc, #36]	; (800f9bc <_vfiprintf_r+0x258>)
 800f998:	a904      	add	r1, sp, #16
 800f99a:	4630      	mov	r0, r6
 800f99c:	f7fd fd54 	bl	800d448 <_printf_i>
 800f9a0:	e7e4      	b.n	800f96c <_vfiprintf_r+0x208>
 800f9a2:	bf00      	nop
 800f9a4:	08013208 	.word	0x08013208
 800f9a8:	08013228 	.word	0x08013228
 800f9ac:	080131e8 	.word	0x080131e8
 800f9b0:	080133a4 	.word	0x080133a4
 800f9b4:	080133ae 	.word	0x080133ae
 800f9b8:	0800cf01 	.word	0x0800cf01
 800f9bc:	0800f73f 	.word	0x0800f73f
 800f9c0:	080133aa 	.word	0x080133aa

0800f9c4 <__svfiscanf_r>:
 800f9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c8:	461d      	mov	r5, r3
 800f9ca:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f9cc:	07df      	lsls	r7, r3, #31
 800f9ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	4692      	mov	sl, r2
 800f9d8:	d405      	bmi.n	800f9e6 <__svfiscanf_r+0x22>
 800f9da:	898b      	ldrh	r3, [r1, #12]
 800f9dc:	0598      	lsls	r0, r3, #22
 800f9de:	d402      	bmi.n	800f9e6 <__svfiscanf_r+0x22>
 800f9e0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800f9e2:	f7ff f842 	bl	800ea6a <__retarget_lock_acquire_recursive>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800f9ec:	4ba6      	ldr	r3, [pc, #664]	; (800fc88 <__svfiscanf_r+0x2c4>)
 800f9ee:	93a0      	str	r3, [sp, #640]	; 0x280
 800f9f0:	f10d 0804 	add.w	r8, sp, #4
 800f9f4:	4ba5      	ldr	r3, [pc, #660]	; (800fc8c <__svfiscanf_r+0x2c8>)
 800f9f6:	4fa6      	ldr	r7, [pc, #664]	; (800fc90 <__svfiscanf_r+0x2cc>)
 800f9f8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800fc94 <__svfiscanf_r+0x2d0>
 800f9fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800fa00:	93a1      	str	r3, [sp, #644]	; 0x284
 800fa02:	9500      	str	r5, [sp, #0]
 800fa04:	f89a 3000 	ldrb.w	r3, [sl]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	f000 8173 	beq.w	800fcf4 <__svfiscanf_r+0x330>
 800fa0e:	5dd9      	ldrb	r1, [r3, r7]
 800fa10:	f011 0108 	ands.w	r1, r1, #8
 800fa14:	f10a 0501 	add.w	r5, sl, #1
 800fa18:	d019      	beq.n	800fa4e <__svfiscanf_r+0x8a>
 800fa1a:	6863      	ldr	r3, [r4, #4]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	dd0f      	ble.n	800fa40 <__svfiscanf_r+0x7c>
 800fa20:	6823      	ldr	r3, [r4, #0]
 800fa22:	781a      	ldrb	r2, [r3, #0]
 800fa24:	5cba      	ldrb	r2, [r7, r2]
 800fa26:	0711      	lsls	r1, r2, #28
 800fa28:	d401      	bmi.n	800fa2e <__svfiscanf_r+0x6a>
 800fa2a:	46aa      	mov	sl, r5
 800fa2c:	e7ea      	b.n	800fa04 <__svfiscanf_r+0x40>
 800fa2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fa30:	3201      	adds	r2, #1
 800fa32:	9245      	str	r2, [sp, #276]	; 0x114
 800fa34:	6862      	ldr	r2, [r4, #4]
 800fa36:	3301      	adds	r3, #1
 800fa38:	3a01      	subs	r2, #1
 800fa3a:	6062      	str	r2, [r4, #4]
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	e7ec      	b.n	800fa1a <__svfiscanf_r+0x56>
 800fa40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa42:	4621      	mov	r1, r4
 800fa44:	4630      	mov	r0, r6
 800fa46:	4798      	blx	r3
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	d0e9      	beq.n	800fa20 <__svfiscanf_r+0x5c>
 800fa4c:	e7ed      	b.n	800fa2a <__svfiscanf_r+0x66>
 800fa4e:	2b25      	cmp	r3, #37	; 0x25
 800fa50:	d012      	beq.n	800fa78 <__svfiscanf_r+0xb4>
 800fa52:	469a      	mov	sl, r3
 800fa54:	6863      	ldr	r3, [r4, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f340 8095 	ble.w	800fb86 <__svfiscanf_r+0x1c2>
 800fa5c:	6822      	ldr	r2, [r4, #0]
 800fa5e:	7813      	ldrb	r3, [r2, #0]
 800fa60:	4553      	cmp	r3, sl
 800fa62:	f040 8147 	bne.w	800fcf4 <__svfiscanf_r+0x330>
 800fa66:	6863      	ldr	r3, [r4, #4]
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	6063      	str	r3, [r4, #4]
 800fa6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fa6e:	3201      	adds	r2, #1
 800fa70:	3301      	adds	r3, #1
 800fa72:	6022      	str	r2, [r4, #0]
 800fa74:	9345      	str	r3, [sp, #276]	; 0x114
 800fa76:	e7d8      	b.n	800fa2a <__svfiscanf_r+0x66>
 800fa78:	9141      	str	r1, [sp, #260]	; 0x104
 800fa7a:	9143      	str	r1, [sp, #268]	; 0x10c
 800fa7c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800fa80:	2b2a      	cmp	r3, #42	; 0x2a
 800fa82:	bf02      	ittt	eq
 800fa84:	2310      	moveq	r3, #16
 800fa86:	9341      	streq	r3, [sp, #260]	; 0x104
 800fa88:	f10a 0502 	addeq.w	r5, sl, #2
 800fa8c:	220a      	movs	r2, #10
 800fa8e:	46aa      	mov	sl, r5
 800fa90:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800fa94:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fa98:	2b09      	cmp	r3, #9
 800fa9a:	d91e      	bls.n	800fada <__svfiscanf_r+0x116>
 800fa9c:	487d      	ldr	r0, [pc, #500]	; (800fc94 <__svfiscanf_r+0x2d0>)
 800fa9e:	2203      	movs	r2, #3
 800faa0:	f7f0 fbbe 	bl	8000220 <memchr>
 800faa4:	b140      	cbz	r0, 800fab8 <__svfiscanf_r+0xf4>
 800faa6:	2301      	movs	r3, #1
 800faa8:	eba0 0009 	sub.w	r0, r0, r9
 800faac:	fa03 f000 	lsl.w	r0, r3, r0
 800fab0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fab2:	4318      	orrs	r0, r3
 800fab4:	9041      	str	r0, [sp, #260]	; 0x104
 800fab6:	4655      	mov	r5, sl
 800fab8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fabc:	2b78      	cmp	r3, #120	; 0x78
 800fabe:	d807      	bhi.n	800fad0 <__svfiscanf_r+0x10c>
 800fac0:	2b57      	cmp	r3, #87	; 0x57
 800fac2:	d811      	bhi.n	800fae8 <__svfiscanf_r+0x124>
 800fac4:	2b25      	cmp	r3, #37	; 0x25
 800fac6:	d0c4      	beq.n	800fa52 <__svfiscanf_r+0x8e>
 800fac8:	d858      	bhi.n	800fb7c <__svfiscanf_r+0x1b8>
 800faca:	2b00      	cmp	r3, #0
 800facc:	f000 80c8 	beq.w	800fc60 <__svfiscanf_r+0x29c>
 800fad0:	2303      	movs	r3, #3
 800fad2:	9347      	str	r3, [sp, #284]	; 0x11c
 800fad4:	230a      	movs	r3, #10
 800fad6:	9342      	str	r3, [sp, #264]	; 0x108
 800fad8:	e07c      	b.n	800fbd4 <__svfiscanf_r+0x210>
 800fada:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fadc:	fb02 1103 	mla	r1, r2, r3, r1
 800fae0:	3930      	subs	r1, #48	; 0x30
 800fae2:	9143      	str	r1, [sp, #268]	; 0x10c
 800fae4:	4655      	mov	r5, sl
 800fae6:	e7d2      	b.n	800fa8e <__svfiscanf_r+0xca>
 800fae8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800faec:	2a20      	cmp	r2, #32
 800faee:	d8ef      	bhi.n	800fad0 <__svfiscanf_r+0x10c>
 800faf0:	a101      	add	r1, pc, #4	; (adr r1, 800faf8 <__svfiscanf_r+0x134>)
 800faf2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800faf6:	bf00      	nop
 800faf8:	0800fbbf 	.word	0x0800fbbf
 800fafc:	0800fad1 	.word	0x0800fad1
 800fb00:	0800fad1 	.word	0x0800fad1
 800fb04:	0800fc1d 	.word	0x0800fc1d
 800fb08:	0800fad1 	.word	0x0800fad1
 800fb0c:	0800fad1 	.word	0x0800fad1
 800fb10:	0800fad1 	.word	0x0800fad1
 800fb14:	0800fad1 	.word	0x0800fad1
 800fb18:	0800fad1 	.word	0x0800fad1
 800fb1c:	0800fad1 	.word	0x0800fad1
 800fb20:	0800fad1 	.word	0x0800fad1
 800fb24:	0800fc33 	.word	0x0800fc33
 800fb28:	0800fc09 	.word	0x0800fc09
 800fb2c:	0800fb83 	.word	0x0800fb83
 800fb30:	0800fb83 	.word	0x0800fb83
 800fb34:	0800fb83 	.word	0x0800fb83
 800fb38:	0800fad1 	.word	0x0800fad1
 800fb3c:	0800fc0d 	.word	0x0800fc0d
 800fb40:	0800fad1 	.word	0x0800fad1
 800fb44:	0800fad1 	.word	0x0800fad1
 800fb48:	0800fad1 	.word	0x0800fad1
 800fb4c:	0800fad1 	.word	0x0800fad1
 800fb50:	0800fc43 	.word	0x0800fc43
 800fb54:	0800fc15 	.word	0x0800fc15
 800fb58:	0800fbb7 	.word	0x0800fbb7
 800fb5c:	0800fad1 	.word	0x0800fad1
 800fb60:	0800fad1 	.word	0x0800fad1
 800fb64:	0800fc3f 	.word	0x0800fc3f
 800fb68:	0800fad1 	.word	0x0800fad1
 800fb6c:	0800fc09 	.word	0x0800fc09
 800fb70:	0800fad1 	.word	0x0800fad1
 800fb74:	0800fad1 	.word	0x0800fad1
 800fb78:	0800fbbf 	.word	0x0800fbbf
 800fb7c:	3b45      	subs	r3, #69	; 0x45
 800fb7e:	2b02      	cmp	r3, #2
 800fb80:	d8a6      	bhi.n	800fad0 <__svfiscanf_r+0x10c>
 800fb82:	2305      	movs	r3, #5
 800fb84:	e025      	b.n	800fbd2 <__svfiscanf_r+0x20e>
 800fb86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fb88:	4621      	mov	r1, r4
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	4798      	blx	r3
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	f43f af64 	beq.w	800fa5c <__svfiscanf_r+0x98>
 800fb94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb96:	07da      	lsls	r2, r3, #31
 800fb98:	f140 80a4 	bpl.w	800fce4 <__svfiscanf_r+0x320>
 800fb9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d067      	beq.n	800fc72 <__svfiscanf_r+0x2ae>
 800fba2:	89a3      	ldrh	r3, [r4, #12]
 800fba4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fba8:	bf18      	it	ne
 800fbaa:	f04f 30ff 	movne.w	r0, #4294967295
 800fbae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fbb8:	f042 0220 	orr.w	r2, r2, #32
 800fbbc:	9241      	str	r2, [sp, #260]	; 0x104
 800fbbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fbc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fbc4:	9241      	str	r2, [sp, #260]	; 0x104
 800fbc6:	2210      	movs	r2, #16
 800fbc8:	2b6f      	cmp	r3, #111	; 0x6f
 800fbca:	9242      	str	r2, [sp, #264]	; 0x108
 800fbcc:	bf34      	ite	cc
 800fbce:	2303      	movcc	r3, #3
 800fbd0:	2304      	movcs	r3, #4
 800fbd2:	9347      	str	r3, [sp, #284]	; 0x11c
 800fbd4:	6863      	ldr	r3, [r4, #4]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	dd4e      	ble.n	800fc78 <__svfiscanf_r+0x2b4>
 800fbda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fbdc:	065b      	lsls	r3, r3, #25
 800fbde:	d404      	bmi.n	800fbea <__svfiscanf_r+0x226>
 800fbe0:	6823      	ldr	r3, [r4, #0]
 800fbe2:	781a      	ldrb	r2, [r3, #0]
 800fbe4:	5cba      	ldrb	r2, [r7, r2]
 800fbe6:	0710      	lsls	r0, r2, #28
 800fbe8:	d456      	bmi.n	800fc98 <__svfiscanf_r+0x2d4>
 800fbea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fbec:	2b02      	cmp	r3, #2
 800fbee:	dc65      	bgt.n	800fcbc <__svfiscanf_r+0x2f8>
 800fbf0:	466b      	mov	r3, sp
 800fbf2:	4622      	mov	r2, r4
 800fbf4:	a941      	add	r1, sp, #260	; 0x104
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	f000 f8b2 	bl	800fd60 <_scanf_chars>
 800fbfc:	2801      	cmp	r0, #1
 800fbfe:	d079      	beq.n	800fcf4 <__svfiscanf_r+0x330>
 800fc00:	2802      	cmp	r0, #2
 800fc02:	f47f af12 	bne.w	800fa2a <__svfiscanf_r+0x66>
 800fc06:	e7c5      	b.n	800fb94 <__svfiscanf_r+0x1d0>
 800fc08:	220a      	movs	r2, #10
 800fc0a:	e7dd      	b.n	800fbc8 <__svfiscanf_r+0x204>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	9342      	str	r3, [sp, #264]	; 0x108
 800fc10:	2303      	movs	r3, #3
 800fc12:	e7de      	b.n	800fbd2 <__svfiscanf_r+0x20e>
 800fc14:	2308      	movs	r3, #8
 800fc16:	9342      	str	r3, [sp, #264]	; 0x108
 800fc18:	2304      	movs	r3, #4
 800fc1a:	e7da      	b.n	800fbd2 <__svfiscanf_r+0x20e>
 800fc1c:	4629      	mov	r1, r5
 800fc1e:	4640      	mov	r0, r8
 800fc20:	f000 fa94 	bl	801014c <__sccl>
 800fc24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fc26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc2a:	9341      	str	r3, [sp, #260]	; 0x104
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e7cf      	b.n	800fbd2 <__svfiscanf_r+0x20e>
 800fc32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fc34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc38:	9341      	str	r3, [sp, #260]	; 0x104
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	e7c9      	b.n	800fbd2 <__svfiscanf_r+0x20e>
 800fc3e:	2302      	movs	r3, #2
 800fc40:	e7c7      	b.n	800fbd2 <__svfiscanf_r+0x20e>
 800fc42:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fc44:	06c3      	lsls	r3, r0, #27
 800fc46:	f53f aef0 	bmi.w	800fa2a <__svfiscanf_r+0x66>
 800fc4a:	9b00      	ldr	r3, [sp, #0]
 800fc4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fc4e:	1d19      	adds	r1, r3, #4
 800fc50:	9100      	str	r1, [sp, #0]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f010 0f01 	tst.w	r0, #1
 800fc58:	bf14      	ite	ne
 800fc5a:	801a      	strhne	r2, [r3, #0]
 800fc5c:	601a      	streq	r2, [r3, #0]
 800fc5e:	e6e4      	b.n	800fa2a <__svfiscanf_r+0x66>
 800fc60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc62:	07d8      	lsls	r0, r3, #31
 800fc64:	d405      	bmi.n	800fc72 <__svfiscanf_r+0x2ae>
 800fc66:	89a3      	ldrh	r3, [r4, #12]
 800fc68:	0599      	lsls	r1, r3, #22
 800fc6a:	d402      	bmi.n	800fc72 <__svfiscanf_r+0x2ae>
 800fc6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc6e:	f7fe fefd 	bl	800ea6c <__retarget_lock_release_recursive>
 800fc72:	f04f 30ff 	mov.w	r0, #4294967295
 800fc76:	e79a      	b.n	800fbae <__svfiscanf_r+0x1ea>
 800fc78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	4798      	blx	r3
 800fc80:	2800      	cmp	r0, #0
 800fc82:	d0aa      	beq.n	800fbda <__svfiscanf_r+0x216>
 800fc84:	e786      	b.n	800fb94 <__svfiscanf_r+0x1d0>
 800fc86:	bf00      	nop
 800fc88:	080104a9 	.word	0x080104a9
 800fc8c:	08010019 	.word	0x08010019
 800fc90:	0801340d 	.word	0x0801340d
 800fc94:	080133aa 	.word	0x080133aa
 800fc98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fc9a:	3201      	adds	r2, #1
 800fc9c:	9245      	str	r2, [sp, #276]	; 0x114
 800fc9e:	6862      	ldr	r2, [r4, #4]
 800fca0:	3a01      	subs	r2, #1
 800fca2:	2a00      	cmp	r2, #0
 800fca4:	6062      	str	r2, [r4, #4]
 800fca6:	dd02      	ble.n	800fcae <__svfiscanf_r+0x2ea>
 800fca8:	3301      	adds	r3, #1
 800fcaa:	6023      	str	r3, [r4, #0]
 800fcac:	e798      	b.n	800fbe0 <__svfiscanf_r+0x21c>
 800fcae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fcb0:	4621      	mov	r1, r4
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	4798      	blx	r3
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d092      	beq.n	800fbe0 <__svfiscanf_r+0x21c>
 800fcba:	e76b      	b.n	800fb94 <__svfiscanf_r+0x1d0>
 800fcbc:	2b04      	cmp	r3, #4
 800fcbe:	dc06      	bgt.n	800fcce <__svfiscanf_r+0x30a>
 800fcc0:	466b      	mov	r3, sp
 800fcc2:	4622      	mov	r2, r4
 800fcc4:	a941      	add	r1, sp, #260	; 0x104
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f000 f8a4 	bl	800fe14 <_scanf_i>
 800fccc:	e796      	b.n	800fbfc <__svfiscanf_r+0x238>
 800fcce:	4b0f      	ldr	r3, [pc, #60]	; (800fd0c <__svfiscanf_r+0x348>)
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f43f aeaa 	beq.w	800fa2a <__svfiscanf_r+0x66>
 800fcd6:	466b      	mov	r3, sp
 800fcd8:	4622      	mov	r2, r4
 800fcda:	a941      	add	r1, sp, #260	; 0x104
 800fcdc:	4630      	mov	r0, r6
 800fcde:	f3af 8000 	nop.w
 800fce2:	e78b      	b.n	800fbfc <__svfiscanf_r+0x238>
 800fce4:	89a3      	ldrh	r3, [r4, #12]
 800fce6:	0599      	lsls	r1, r3, #22
 800fce8:	f53f af58 	bmi.w	800fb9c <__svfiscanf_r+0x1d8>
 800fcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcee:	f7fe febd 	bl	800ea6c <__retarget_lock_release_recursive>
 800fcf2:	e753      	b.n	800fb9c <__svfiscanf_r+0x1d8>
 800fcf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcf6:	07da      	lsls	r2, r3, #31
 800fcf8:	d405      	bmi.n	800fd06 <__svfiscanf_r+0x342>
 800fcfa:	89a3      	ldrh	r3, [r4, #12]
 800fcfc:	059b      	lsls	r3, r3, #22
 800fcfe:	d402      	bmi.n	800fd06 <__svfiscanf_r+0x342>
 800fd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd02:	f7fe feb3 	bl	800ea6c <__retarget_lock_release_recursive>
 800fd06:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fd08:	e751      	b.n	800fbae <__svfiscanf_r+0x1ea>
 800fd0a:	bf00      	nop
 800fd0c:	00000000 	.word	0x00000000

0800fd10 <_vfiscanf_r>:
 800fd10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd12:	460c      	mov	r4, r1
 800fd14:	4605      	mov	r5, r0
 800fd16:	b138      	cbz	r0, 800fd28 <_vfiscanf_r+0x18>
 800fd18:	6981      	ldr	r1, [r0, #24]
 800fd1a:	b929      	cbnz	r1, 800fd28 <_vfiscanf_r+0x18>
 800fd1c:	e9cd 2300 	strd	r2, r3, [sp]
 800fd20:	f7fe fde4 	bl	800e8ec <__sinit>
 800fd24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd28:	490a      	ldr	r1, [pc, #40]	; (800fd54 <_vfiscanf_r+0x44>)
 800fd2a:	428c      	cmp	r4, r1
 800fd2c:	d107      	bne.n	800fd3e <_vfiscanf_r+0x2e>
 800fd2e:	686c      	ldr	r4, [r5, #4]
 800fd30:	4621      	mov	r1, r4
 800fd32:	4628      	mov	r0, r5
 800fd34:	b003      	add	sp, #12
 800fd36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd3a:	f7ff be43 	b.w	800f9c4 <__svfiscanf_r>
 800fd3e:	4906      	ldr	r1, [pc, #24]	; (800fd58 <_vfiscanf_r+0x48>)
 800fd40:	428c      	cmp	r4, r1
 800fd42:	d101      	bne.n	800fd48 <_vfiscanf_r+0x38>
 800fd44:	68ac      	ldr	r4, [r5, #8]
 800fd46:	e7f3      	b.n	800fd30 <_vfiscanf_r+0x20>
 800fd48:	4904      	ldr	r1, [pc, #16]	; (800fd5c <_vfiscanf_r+0x4c>)
 800fd4a:	428c      	cmp	r4, r1
 800fd4c:	bf08      	it	eq
 800fd4e:	68ec      	ldreq	r4, [r5, #12]
 800fd50:	e7ee      	b.n	800fd30 <_vfiscanf_r+0x20>
 800fd52:	bf00      	nop
 800fd54:	08013208 	.word	0x08013208
 800fd58:	08013228 	.word	0x08013228
 800fd5c:	080131e8 	.word	0x080131e8

0800fd60 <_scanf_chars>:
 800fd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd64:	4615      	mov	r5, r2
 800fd66:	688a      	ldr	r2, [r1, #8]
 800fd68:	4680      	mov	r8, r0
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	b932      	cbnz	r2, 800fd7c <_scanf_chars+0x1c>
 800fd6e:	698a      	ldr	r2, [r1, #24]
 800fd70:	2a00      	cmp	r2, #0
 800fd72:	bf0c      	ite	eq
 800fd74:	2201      	moveq	r2, #1
 800fd76:	f04f 32ff 	movne.w	r2, #4294967295
 800fd7a:	608a      	str	r2, [r1, #8]
 800fd7c:	6822      	ldr	r2, [r4, #0]
 800fd7e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fe10 <_scanf_chars+0xb0>
 800fd82:	06d1      	lsls	r1, r2, #27
 800fd84:	bf5f      	itttt	pl
 800fd86:	681a      	ldrpl	r2, [r3, #0]
 800fd88:	1d11      	addpl	r1, r2, #4
 800fd8a:	6019      	strpl	r1, [r3, #0]
 800fd8c:	6816      	ldrpl	r6, [r2, #0]
 800fd8e:	2700      	movs	r7, #0
 800fd90:	69a0      	ldr	r0, [r4, #24]
 800fd92:	b188      	cbz	r0, 800fdb8 <_scanf_chars+0x58>
 800fd94:	2801      	cmp	r0, #1
 800fd96:	d107      	bne.n	800fda8 <_scanf_chars+0x48>
 800fd98:	682a      	ldr	r2, [r5, #0]
 800fd9a:	7811      	ldrb	r1, [r2, #0]
 800fd9c:	6962      	ldr	r2, [r4, #20]
 800fd9e:	5c52      	ldrb	r2, [r2, r1]
 800fda0:	b952      	cbnz	r2, 800fdb8 <_scanf_chars+0x58>
 800fda2:	2f00      	cmp	r7, #0
 800fda4:	d031      	beq.n	800fe0a <_scanf_chars+0xaa>
 800fda6:	e022      	b.n	800fdee <_scanf_chars+0x8e>
 800fda8:	2802      	cmp	r0, #2
 800fdaa:	d120      	bne.n	800fdee <_scanf_chars+0x8e>
 800fdac:	682b      	ldr	r3, [r5, #0]
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fdb4:	071b      	lsls	r3, r3, #28
 800fdb6:	d41a      	bmi.n	800fdee <_scanf_chars+0x8e>
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	06da      	lsls	r2, r3, #27
 800fdbc:	bf5e      	ittt	pl
 800fdbe:	682b      	ldrpl	r3, [r5, #0]
 800fdc0:	781b      	ldrbpl	r3, [r3, #0]
 800fdc2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fdc6:	682a      	ldr	r2, [r5, #0]
 800fdc8:	686b      	ldr	r3, [r5, #4]
 800fdca:	3201      	adds	r2, #1
 800fdcc:	602a      	str	r2, [r5, #0]
 800fdce:	68a2      	ldr	r2, [r4, #8]
 800fdd0:	3b01      	subs	r3, #1
 800fdd2:	3a01      	subs	r2, #1
 800fdd4:	606b      	str	r3, [r5, #4]
 800fdd6:	3701      	adds	r7, #1
 800fdd8:	60a2      	str	r2, [r4, #8]
 800fdda:	b142      	cbz	r2, 800fdee <_scanf_chars+0x8e>
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	dcd7      	bgt.n	800fd90 <_scanf_chars+0x30>
 800fde0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fde4:	4629      	mov	r1, r5
 800fde6:	4640      	mov	r0, r8
 800fde8:	4798      	blx	r3
 800fdea:	2800      	cmp	r0, #0
 800fdec:	d0d0      	beq.n	800fd90 <_scanf_chars+0x30>
 800fdee:	6823      	ldr	r3, [r4, #0]
 800fdf0:	f013 0310 	ands.w	r3, r3, #16
 800fdf4:	d105      	bne.n	800fe02 <_scanf_chars+0xa2>
 800fdf6:	68e2      	ldr	r2, [r4, #12]
 800fdf8:	3201      	adds	r2, #1
 800fdfa:	60e2      	str	r2, [r4, #12]
 800fdfc:	69a2      	ldr	r2, [r4, #24]
 800fdfe:	b102      	cbz	r2, 800fe02 <_scanf_chars+0xa2>
 800fe00:	7033      	strb	r3, [r6, #0]
 800fe02:	6923      	ldr	r3, [r4, #16]
 800fe04:	443b      	add	r3, r7
 800fe06:	6123      	str	r3, [r4, #16]
 800fe08:	2000      	movs	r0, #0
 800fe0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe0e:	bf00      	nop
 800fe10:	0801340d 	.word	0x0801340d

0800fe14 <_scanf_i>:
 800fe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe18:	4698      	mov	r8, r3
 800fe1a:	4b76      	ldr	r3, [pc, #472]	; (800fff4 <_scanf_i+0x1e0>)
 800fe1c:	460c      	mov	r4, r1
 800fe1e:	4682      	mov	sl, r0
 800fe20:	4616      	mov	r6, r2
 800fe22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe26:	b087      	sub	sp, #28
 800fe28:	ab03      	add	r3, sp, #12
 800fe2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe2e:	4b72      	ldr	r3, [pc, #456]	; (800fff8 <_scanf_i+0x1e4>)
 800fe30:	69a1      	ldr	r1, [r4, #24]
 800fe32:	4a72      	ldr	r2, [pc, #456]	; (800fffc <_scanf_i+0x1e8>)
 800fe34:	2903      	cmp	r1, #3
 800fe36:	bf18      	it	ne
 800fe38:	461a      	movne	r2, r3
 800fe3a:	68a3      	ldr	r3, [r4, #8]
 800fe3c:	9201      	str	r2, [sp, #4]
 800fe3e:	1e5a      	subs	r2, r3, #1
 800fe40:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fe44:	bf88      	it	hi
 800fe46:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fe4a:	4627      	mov	r7, r4
 800fe4c:	bf82      	ittt	hi
 800fe4e:	eb03 0905 	addhi.w	r9, r3, r5
 800fe52:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fe56:	60a3      	strhi	r3, [r4, #8]
 800fe58:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fe5c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fe60:	bf98      	it	ls
 800fe62:	f04f 0900 	movls.w	r9, #0
 800fe66:	6023      	str	r3, [r4, #0]
 800fe68:	463d      	mov	r5, r7
 800fe6a:	f04f 0b00 	mov.w	fp, #0
 800fe6e:	6831      	ldr	r1, [r6, #0]
 800fe70:	ab03      	add	r3, sp, #12
 800fe72:	7809      	ldrb	r1, [r1, #0]
 800fe74:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fe78:	2202      	movs	r2, #2
 800fe7a:	f7f0 f9d1 	bl	8000220 <memchr>
 800fe7e:	b328      	cbz	r0, 800fecc <_scanf_i+0xb8>
 800fe80:	f1bb 0f01 	cmp.w	fp, #1
 800fe84:	d159      	bne.n	800ff3a <_scanf_i+0x126>
 800fe86:	6862      	ldr	r2, [r4, #4]
 800fe88:	b92a      	cbnz	r2, 800fe96 <_scanf_i+0x82>
 800fe8a:	6822      	ldr	r2, [r4, #0]
 800fe8c:	2308      	movs	r3, #8
 800fe8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe92:	6063      	str	r3, [r4, #4]
 800fe94:	6022      	str	r2, [r4, #0]
 800fe96:	6822      	ldr	r2, [r4, #0]
 800fe98:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fe9c:	6022      	str	r2, [r4, #0]
 800fe9e:	68a2      	ldr	r2, [r4, #8]
 800fea0:	1e51      	subs	r1, r2, #1
 800fea2:	60a1      	str	r1, [r4, #8]
 800fea4:	b192      	cbz	r2, 800fecc <_scanf_i+0xb8>
 800fea6:	6832      	ldr	r2, [r6, #0]
 800fea8:	1c51      	adds	r1, r2, #1
 800feaa:	6031      	str	r1, [r6, #0]
 800feac:	7812      	ldrb	r2, [r2, #0]
 800feae:	f805 2b01 	strb.w	r2, [r5], #1
 800feb2:	6872      	ldr	r2, [r6, #4]
 800feb4:	3a01      	subs	r2, #1
 800feb6:	2a00      	cmp	r2, #0
 800feb8:	6072      	str	r2, [r6, #4]
 800feba:	dc07      	bgt.n	800fecc <_scanf_i+0xb8>
 800febc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fec0:	4631      	mov	r1, r6
 800fec2:	4650      	mov	r0, sl
 800fec4:	4790      	blx	r2
 800fec6:	2800      	cmp	r0, #0
 800fec8:	f040 8085 	bne.w	800ffd6 <_scanf_i+0x1c2>
 800fecc:	f10b 0b01 	add.w	fp, fp, #1
 800fed0:	f1bb 0f03 	cmp.w	fp, #3
 800fed4:	d1cb      	bne.n	800fe6e <_scanf_i+0x5a>
 800fed6:	6863      	ldr	r3, [r4, #4]
 800fed8:	b90b      	cbnz	r3, 800fede <_scanf_i+0xca>
 800feda:	230a      	movs	r3, #10
 800fedc:	6063      	str	r3, [r4, #4]
 800fede:	6863      	ldr	r3, [r4, #4]
 800fee0:	4947      	ldr	r1, [pc, #284]	; (8010000 <_scanf_i+0x1ec>)
 800fee2:	6960      	ldr	r0, [r4, #20]
 800fee4:	1ac9      	subs	r1, r1, r3
 800fee6:	f000 f931 	bl	801014c <__sccl>
 800feea:	f04f 0b00 	mov.w	fp, #0
 800feee:	68a3      	ldr	r3, [r4, #8]
 800fef0:	6822      	ldr	r2, [r4, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d03d      	beq.n	800ff72 <_scanf_i+0x15e>
 800fef6:	6831      	ldr	r1, [r6, #0]
 800fef8:	6960      	ldr	r0, [r4, #20]
 800fefa:	f891 c000 	ldrb.w	ip, [r1]
 800fefe:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ff02:	2800      	cmp	r0, #0
 800ff04:	d035      	beq.n	800ff72 <_scanf_i+0x15e>
 800ff06:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ff0a:	d124      	bne.n	800ff56 <_scanf_i+0x142>
 800ff0c:	0510      	lsls	r0, r2, #20
 800ff0e:	d522      	bpl.n	800ff56 <_scanf_i+0x142>
 800ff10:	f10b 0b01 	add.w	fp, fp, #1
 800ff14:	f1b9 0f00 	cmp.w	r9, #0
 800ff18:	d003      	beq.n	800ff22 <_scanf_i+0x10e>
 800ff1a:	3301      	adds	r3, #1
 800ff1c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ff20:	60a3      	str	r3, [r4, #8]
 800ff22:	6873      	ldr	r3, [r6, #4]
 800ff24:	3b01      	subs	r3, #1
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	6073      	str	r3, [r6, #4]
 800ff2a:	dd1b      	ble.n	800ff64 <_scanf_i+0x150>
 800ff2c:	6833      	ldr	r3, [r6, #0]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	6033      	str	r3, [r6, #0]
 800ff32:	68a3      	ldr	r3, [r4, #8]
 800ff34:	3b01      	subs	r3, #1
 800ff36:	60a3      	str	r3, [r4, #8]
 800ff38:	e7d9      	b.n	800feee <_scanf_i+0xda>
 800ff3a:	f1bb 0f02 	cmp.w	fp, #2
 800ff3e:	d1ae      	bne.n	800fe9e <_scanf_i+0x8a>
 800ff40:	6822      	ldr	r2, [r4, #0]
 800ff42:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ff46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ff4a:	d1bf      	bne.n	800fecc <_scanf_i+0xb8>
 800ff4c:	2310      	movs	r3, #16
 800ff4e:	6063      	str	r3, [r4, #4]
 800ff50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ff54:	e7a2      	b.n	800fe9c <_scanf_i+0x88>
 800ff56:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ff5a:	6022      	str	r2, [r4, #0]
 800ff5c:	780b      	ldrb	r3, [r1, #0]
 800ff5e:	f805 3b01 	strb.w	r3, [r5], #1
 800ff62:	e7de      	b.n	800ff22 <_scanf_i+0x10e>
 800ff64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff68:	4631      	mov	r1, r6
 800ff6a:	4650      	mov	r0, sl
 800ff6c:	4798      	blx	r3
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	d0df      	beq.n	800ff32 <_scanf_i+0x11e>
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	05db      	lsls	r3, r3, #23
 800ff76:	d50d      	bpl.n	800ff94 <_scanf_i+0x180>
 800ff78:	42bd      	cmp	r5, r7
 800ff7a:	d909      	bls.n	800ff90 <_scanf_i+0x17c>
 800ff7c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ff80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff84:	4632      	mov	r2, r6
 800ff86:	4650      	mov	r0, sl
 800ff88:	4798      	blx	r3
 800ff8a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ff8e:	464d      	mov	r5, r9
 800ff90:	42bd      	cmp	r5, r7
 800ff92:	d02d      	beq.n	800fff0 <_scanf_i+0x1dc>
 800ff94:	6822      	ldr	r2, [r4, #0]
 800ff96:	f012 0210 	ands.w	r2, r2, #16
 800ff9a:	d113      	bne.n	800ffc4 <_scanf_i+0x1b0>
 800ff9c:	702a      	strb	r2, [r5, #0]
 800ff9e:	6863      	ldr	r3, [r4, #4]
 800ffa0:	9e01      	ldr	r6, [sp, #4]
 800ffa2:	4639      	mov	r1, r7
 800ffa4:	4650      	mov	r0, sl
 800ffa6:	47b0      	blx	r6
 800ffa8:	6821      	ldr	r1, [r4, #0]
 800ffaa:	f8d8 3000 	ldr.w	r3, [r8]
 800ffae:	f011 0f20 	tst.w	r1, #32
 800ffb2:	d013      	beq.n	800ffdc <_scanf_i+0x1c8>
 800ffb4:	1d1a      	adds	r2, r3, #4
 800ffb6:	f8c8 2000 	str.w	r2, [r8]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	6018      	str	r0, [r3, #0]
 800ffbe:	68e3      	ldr	r3, [r4, #12]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	60e3      	str	r3, [r4, #12]
 800ffc4:	1bed      	subs	r5, r5, r7
 800ffc6:	44ab      	add	fp, r5
 800ffc8:	6925      	ldr	r5, [r4, #16]
 800ffca:	445d      	add	r5, fp
 800ffcc:	6125      	str	r5, [r4, #16]
 800ffce:	2000      	movs	r0, #0
 800ffd0:	b007      	add	sp, #28
 800ffd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd6:	f04f 0b00 	mov.w	fp, #0
 800ffda:	e7ca      	b.n	800ff72 <_scanf_i+0x15e>
 800ffdc:	1d1a      	adds	r2, r3, #4
 800ffde:	f8c8 2000 	str.w	r2, [r8]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f011 0f01 	tst.w	r1, #1
 800ffe8:	bf14      	ite	ne
 800ffea:	8018      	strhne	r0, [r3, #0]
 800ffec:	6018      	streq	r0, [r3, #0]
 800ffee:	e7e6      	b.n	800ffbe <_scanf_i+0x1aa>
 800fff0:	2001      	movs	r0, #1
 800fff2:	e7ed      	b.n	800ffd0 <_scanf_i+0x1bc>
 800fff4:	08012efc 	.word	0x08012efc
 800fff8:	08010431 	.word	0x08010431
 800fffc:	08010349 	.word	0x08010349
 8010000:	080133ce 	.word	0x080133ce

08010004 <lflush>:
 8010004:	8983      	ldrh	r3, [r0, #12]
 8010006:	f003 0309 	and.w	r3, r3, #9
 801000a:	2b09      	cmp	r3, #9
 801000c:	d101      	bne.n	8010012 <lflush+0xe>
 801000e:	f7fe bc03 	b.w	800e818 <fflush>
 8010012:	2000      	movs	r0, #0
 8010014:	4770      	bx	lr
	...

08010018 <__srefill_r>:
 8010018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001a:	460c      	mov	r4, r1
 801001c:	4605      	mov	r5, r0
 801001e:	b118      	cbz	r0, 8010028 <__srefill_r+0x10>
 8010020:	6983      	ldr	r3, [r0, #24]
 8010022:	b90b      	cbnz	r3, 8010028 <__srefill_r+0x10>
 8010024:	f7fe fc62 	bl	800e8ec <__sinit>
 8010028:	4b3b      	ldr	r3, [pc, #236]	; (8010118 <__srefill_r+0x100>)
 801002a:	429c      	cmp	r4, r3
 801002c:	d10a      	bne.n	8010044 <__srefill_r+0x2c>
 801002e:	686c      	ldr	r4, [r5, #4]
 8010030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010034:	2300      	movs	r3, #0
 8010036:	6063      	str	r3, [r4, #4]
 8010038:	89a3      	ldrh	r3, [r4, #12]
 801003a:	069e      	lsls	r6, r3, #26
 801003c:	d50c      	bpl.n	8010058 <__srefill_r+0x40>
 801003e:	f04f 30ff 	mov.w	r0, #4294967295
 8010042:	e066      	b.n	8010112 <__srefill_r+0xfa>
 8010044:	4b35      	ldr	r3, [pc, #212]	; (801011c <__srefill_r+0x104>)
 8010046:	429c      	cmp	r4, r3
 8010048:	d101      	bne.n	801004e <__srefill_r+0x36>
 801004a:	68ac      	ldr	r4, [r5, #8]
 801004c:	e7f0      	b.n	8010030 <__srefill_r+0x18>
 801004e:	4b34      	ldr	r3, [pc, #208]	; (8010120 <__srefill_r+0x108>)
 8010050:	429c      	cmp	r4, r3
 8010052:	bf08      	it	eq
 8010054:	68ec      	ldreq	r4, [r5, #12]
 8010056:	e7eb      	b.n	8010030 <__srefill_r+0x18>
 8010058:	0758      	lsls	r0, r3, #29
 801005a:	d448      	bmi.n	80100ee <__srefill_r+0xd6>
 801005c:	06d9      	lsls	r1, r3, #27
 801005e:	d405      	bmi.n	801006c <__srefill_r+0x54>
 8010060:	2309      	movs	r3, #9
 8010062:	602b      	str	r3, [r5, #0]
 8010064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010068:	81a3      	strh	r3, [r4, #12]
 801006a:	e7e8      	b.n	801003e <__srefill_r+0x26>
 801006c:	071a      	lsls	r2, r3, #28
 801006e:	d50b      	bpl.n	8010088 <__srefill_r+0x70>
 8010070:	4621      	mov	r1, r4
 8010072:	4628      	mov	r0, r5
 8010074:	f7fe fb94 	bl	800e7a0 <_fflush_r>
 8010078:	2800      	cmp	r0, #0
 801007a:	d1e0      	bne.n	801003e <__srefill_r+0x26>
 801007c:	89a3      	ldrh	r3, [r4, #12]
 801007e:	60a0      	str	r0, [r4, #8]
 8010080:	f023 0308 	bic.w	r3, r3, #8
 8010084:	81a3      	strh	r3, [r4, #12]
 8010086:	61a0      	str	r0, [r4, #24]
 8010088:	89a3      	ldrh	r3, [r4, #12]
 801008a:	f043 0304 	orr.w	r3, r3, #4
 801008e:	81a3      	strh	r3, [r4, #12]
 8010090:	6923      	ldr	r3, [r4, #16]
 8010092:	b91b      	cbnz	r3, 801009c <__srefill_r+0x84>
 8010094:	4621      	mov	r1, r4
 8010096:	4628      	mov	r0, r5
 8010098:	f7fe fd0e 	bl	800eab8 <__smakebuf_r>
 801009c:	89a6      	ldrh	r6, [r4, #12]
 801009e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80100a2:	07b3      	lsls	r3, r6, #30
 80100a4:	d00f      	beq.n	80100c6 <__srefill_r+0xae>
 80100a6:	2301      	movs	r3, #1
 80100a8:	81a3      	strh	r3, [r4, #12]
 80100aa:	4b1e      	ldr	r3, [pc, #120]	; (8010124 <__srefill_r+0x10c>)
 80100ac:	491e      	ldr	r1, [pc, #120]	; (8010128 <__srefill_r+0x110>)
 80100ae:	6818      	ldr	r0, [r3, #0]
 80100b0:	f006 0609 	and.w	r6, r6, #9
 80100b4:	f7fe fc98 	bl	800e9e8 <_fwalk>
 80100b8:	2e09      	cmp	r6, #9
 80100ba:	81a7      	strh	r7, [r4, #12]
 80100bc:	d103      	bne.n	80100c6 <__srefill_r+0xae>
 80100be:	4621      	mov	r1, r4
 80100c0:	4628      	mov	r0, r5
 80100c2:	f7fe fae7 	bl	800e694 <__sflush_r>
 80100c6:	6922      	ldr	r2, [r4, #16]
 80100c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80100ca:	6963      	ldr	r3, [r4, #20]
 80100cc:	6a21      	ldr	r1, [r4, #32]
 80100ce:	6022      	str	r2, [r4, #0]
 80100d0:	4628      	mov	r0, r5
 80100d2:	47b0      	blx	r6
 80100d4:	2800      	cmp	r0, #0
 80100d6:	6060      	str	r0, [r4, #4]
 80100d8:	dc1c      	bgt.n	8010114 <__srefill_r+0xfc>
 80100da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100de:	bf17      	itett	ne
 80100e0:	2200      	movne	r2, #0
 80100e2:	f043 0320 	orreq.w	r3, r3, #32
 80100e6:	6062      	strne	r2, [r4, #4]
 80100e8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80100ec:	e7bc      	b.n	8010068 <__srefill_r+0x50>
 80100ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100f0:	2900      	cmp	r1, #0
 80100f2:	d0cd      	beq.n	8010090 <__srefill_r+0x78>
 80100f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100f8:	4299      	cmp	r1, r3
 80100fa:	d002      	beq.n	8010102 <__srefill_r+0xea>
 80100fc:	4628      	mov	r0, r5
 80100fe:	f7ff f8cb 	bl	800f298 <_free_r>
 8010102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010104:	6063      	str	r3, [r4, #4]
 8010106:	2000      	movs	r0, #0
 8010108:	6360      	str	r0, [r4, #52]	; 0x34
 801010a:	2b00      	cmp	r3, #0
 801010c:	d0c0      	beq.n	8010090 <__srefill_r+0x78>
 801010e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010110:	6023      	str	r3, [r4, #0]
 8010112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010114:	2000      	movs	r0, #0
 8010116:	e7fc      	b.n	8010112 <__srefill_r+0xfa>
 8010118:	08013208 	.word	0x08013208
 801011c:	08013228 	.word	0x08013228
 8010120:	080131e8 	.word	0x080131e8
 8010124:	08013120 	.word	0x08013120
 8010128:	08010005 	.word	0x08010005

0801012c <_sbrk_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d06      	ldr	r5, [pc, #24]	; (8010148 <_sbrk_r+0x1c>)
 8010130:	2300      	movs	r3, #0
 8010132:	4604      	mov	r4, r0
 8010134:	4608      	mov	r0, r1
 8010136:	602b      	str	r3, [r5, #0]
 8010138:	f7f8 ff60 	bl	8008ffc <_sbrk>
 801013c:	1c43      	adds	r3, r0, #1
 801013e:	d102      	bne.n	8010146 <_sbrk_r+0x1a>
 8010140:	682b      	ldr	r3, [r5, #0]
 8010142:	b103      	cbz	r3, 8010146 <_sbrk_r+0x1a>
 8010144:	6023      	str	r3, [r4, #0]
 8010146:	bd38      	pop	{r3, r4, r5, pc}
 8010148:	200003a0 	.word	0x200003a0

0801014c <__sccl>:
 801014c:	b570      	push	{r4, r5, r6, lr}
 801014e:	780b      	ldrb	r3, [r1, #0]
 8010150:	4604      	mov	r4, r0
 8010152:	2b5e      	cmp	r3, #94	; 0x5e
 8010154:	bf0b      	itete	eq
 8010156:	784b      	ldrbeq	r3, [r1, #1]
 8010158:	1c48      	addne	r0, r1, #1
 801015a:	1c88      	addeq	r0, r1, #2
 801015c:	2200      	movne	r2, #0
 801015e:	bf08      	it	eq
 8010160:	2201      	moveq	r2, #1
 8010162:	1e61      	subs	r1, r4, #1
 8010164:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010168:	f801 2f01 	strb.w	r2, [r1, #1]!
 801016c:	42a9      	cmp	r1, r5
 801016e:	d1fb      	bne.n	8010168 <__sccl+0x1c>
 8010170:	b90b      	cbnz	r3, 8010176 <__sccl+0x2a>
 8010172:	3801      	subs	r0, #1
 8010174:	bd70      	pop	{r4, r5, r6, pc}
 8010176:	f082 0201 	eor.w	r2, r2, #1
 801017a:	54e2      	strb	r2, [r4, r3]
 801017c:	4605      	mov	r5, r0
 801017e:	4628      	mov	r0, r5
 8010180:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010184:	292d      	cmp	r1, #45	; 0x2d
 8010186:	d006      	beq.n	8010196 <__sccl+0x4a>
 8010188:	295d      	cmp	r1, #93	; 0x5d
 801018a:	d0f3      	beq.n	8010174 <__sccl+0x28>
 801018c:	b909      	cbnz	r1, 8010192 <__sccl+0x46>
 801018e:	4628      	mov	r0, r5
 8010190:	e7f0      	b.n	8010174 <__sccl+0x28>
 8010192:	460b      	mov	r3, r1
 8010194:	e7f1      	b.n	801017a <__sccl+0x2e>
 8010196:	786e      	ldrb	r6, [r5, #1]
 8010198:	2e5d      	cmp	r6, #93	; 0x5d
 801019a:	d0fa      	beq.n	8010192 <__sccl+0x46>
 801019c:	42b3      	cmp	r3, r6
 801019e:	dcf8      	bgt.n	8010192 <__sccl+0x46>
 80101a0:	3502      	adds	r5, #2
 80101a2:	4619      	mov	r1, r3
 80101a4:	3101      	adds	r1, #1
 80101a6:	428e      	cmp	r6, r1
 80101a8:	5462      	strb	r2, [r4, r1]
 80101aa:	dcfb      	bgt.n	80101a4 <__sccl+0x58>
 80101ac:	1af1      	subs	r1, r6, r3
 80101ae:	3901      	subs	r1, #1
 80101b0:	1c58      	adds	r0, r3, #1
 80101b2:	42b3      	cmp	r3, r6
 80101b4:	bfa8      	it	ge
 80101b6:	2100      	movge	r1, #0
 80101b8:	1843      	adds	r3, r0, r1
 80101ba:	e7e0      	b.n	801017e <__sccl+0x32>

080101bc <__sread>:
 80101bc:	b510      	push	{r4, lr}
 80101be:	460c      	mov	r4, r1
 80101c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101c4:	f000 faf6 	bl	80107b4 <_read_r>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	bfab      	itete	ge
 80101cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80101ce:	89a3      	ldrhlt	r3, [r4, #12]
 80101d0:	181b      	addge	r3, r3, r0
 80101d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80101d6:	bfac      	ite	ge
 80101d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80101da:	81a3      	strhlt	r3, [r4, #12]
 80101dc:	bd10      	pop	{r4, pc}

080101de <__swrite>:
 80101de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e2:	461f      	mov	r7, r3
 80101e4:	898b      	ldrh	r3, [r1, #12]
 80101e6:	05db      	lsls	r3, r3, #23
 80101e8:	4605      	mov	r5, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	4616      	mov	r6, r2
 80101ee:	d505      	bpl.n	80101fc <__swrite+0x1e>
 80101f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101f4:	2302      	movs	r3, #2
 80101f6:	2200      	movs	r2, #0
 80101f8:	f000 fa62 	bl	80106c0 <_lseek_r>
 80101fc:	89a3      	ldrh	r3, [r4, #12]
 80101fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010206:	81a3      	strh	r3, [r4, #12]
 8010208:	4632      	mov	r2, r6
 801020a:	463b      	mov	r3, r7
 801020c:	4628      	mov	r0, r5
 801020e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010212:	f000 b9e1 	b.w	80105d8 <_write_r>

08010216 <__sseek>:
 8010216:	b510      	push	{r4, lr}
 8010218:	460c      	mov	r4, r1
 801021a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801021e:	f000 fa4f 	bl	80106c0 <_lseek_r>
 8010222:	1c43      	adds	r3, r0, #1
 8010224:	89a3      	ldrh	r3, [r4, #12]
 8010226:	bf15      	itete	ne
 8010228:	6560      	strne	r0, [r4, #84]	; 0x54
 801022a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801022e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010232:	81a3      	strheq	r3, [r4, #12]
 8010234:	bf18      	it	ne
 8010236:	81a3      	strhne	r3, [r4, #12]
 8010238:	bd10      	pop	{r4, pc}

0801023a <__sclose>:
 801023a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801023e:	f000 b9fb 	b.w	8010638 <_close_r>
	...

08010244 <_strtol_l.constprop.0>:
 8010244:	2b01      	cmp	r3, #1
 8010246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801024a:	d001      	beq.n	8010250 <_strtol_l.constprop.0+0xc>
 801024c:	2b24      	cmp	r3, #36	; 0x24
 801024e:	d906      	bls.n	801025e <_strtol_l.constprop.0+0x1a>
 8010250:	f7fc fd84 	bl	800cd5c <__errno>
 8010254:	2316      	movs	r3, #22
 8010256:	6003      	str	r3, [r0, #0]
 8010258:	2000      	movs	r0, #0
 801025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010344 <_strtol_l.constprop.0+0x100>
 8010262:	460d      	mov	r5, r1
 8010264:	462e      	mov	r6, r5
 8010266:	f815 4b01 	ldrb.w	r4, [r5], #1
 801026a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801026e:	f017 0708 	ands.w	r7, r7, #8
 8010272:	d1f7      	bne.n	8010264 <_strtol_l.constprop.0+0x20>
 8010274:	2c2d      	cmp	r4, #45	; 0x2d
 8010276:	d132      	bne.n	80102de <_strtol_l.constprop.0+0x9a>
 8010278:	782c      	ldrb	r4, [r5, #0]
 801027a:	2701      	movs	r7, #1
 801027c:	1cb5      	adds	r5, r6, #2
 801027e:	2b00      	cmp	r3, #0
 8010280:	d05b      	beq.n	801033a <_strtol_l.constprop.0+0xf6>
 8010282:	2b10      	cmp	r3, #16
 8010284:	d109      	bne.n	801029a <_strtol_l.constprop.0+0x56>
 8010286:	2c30      	cmp	r4, #48	; 0x30
 8010288:	d107      	bne.n	801029a <_strtol_l.constprop.0+0x56>
 801028a:	782c      	ldrb	r4, [r5, #0]
 801028c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010290:	2c58      	cmp	r4, #88	; 0x58
 8010292:	d14d      	bne.n	8010330 <_strtol_l.constprop.0+0xec>
 8010294:	786c      	ldrb	r4, [r5, #1]
 8010296:	2310      	movs	r3, #16
 8010298:	3502      	adds	r5, #2
 801029a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801029e:	f108 38ff 	add.w	r8, r8, #4294967295
 80102a2:	f04f 0c00 	mov.w	ip, #0
 80102a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80102aa:	4666      	mov	r6, ip
 80102ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80102b0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80102b4:	f1be 0f09 	cmp.w	lr, #9
 80102b8:	d816      	bhi.n	80102e8 <_strtol_l.constprop.0+0xa4>
 80102ba:	4674      	mov	r4, lr
 80102bc:	42a3      	cmp	r3, r4
 80102be:	dd24      	ble.n	801030a <_strtol_l.constprop.0+0xc6>
 80102c0:	f1bc 0f00 	cmp.w	ip, #0
 80102c4:	db1e      	blt.n	8010304 <_strtol_l.constprop.0+0xc0>
 80102c6:	45b1      	cmp	r9, r6
 80102c8:	d31c      	bcc.n	8010304 <_strtol_l.constprop.0+0xc0>
 80102ca:	d101      	bne.n	80102d0 <_strtol_l.constprop.0+0x8c>
 80102cc:	45a2      	cmp	sl, r4
 80102ce:	db19      	blt.n	8010304 <_strtol_l.constprop.0+0xc0>
 80102d0:	fb06 4603 	mla	r6, r6, r3, r4
 80102d4:	f04f 0c01 	mov.w	ip, #1
 80102d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102dc:	e7e8      	b.n	80102b0 <_strtol_l.constprop.0+0x6c>
 80102de:	2c2b      	cmp	r4, #43	; 0x2b
 80102e0:	bf04      	itt	eq
 80102e2:	782c      	ldrbeq	r4, [r5, #0]
 80102e4:	1cb5      	addeq	r5, r6, #2
 80102e6:	e7ca      	b.n	801027e <_strtol_l.constprop.0+0x3a>
 80102e8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80102ec:	f1be 0f19 	cmp.w	lr, #25
 80102f0:	d801      	bhi.n	80102f6 <_strtol_l.constprop.0+0xb2>
 80102f2:	3c37      	subs	r4, #55	; 0x37
 80102f4:	e7e2      	b.n	80102bc <_strtol_l.constprop.0+0x78>
 80102f6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80102fa:	f1be 0f19 	cmp.w	lr, #25
 80102fe:	d804      	bhi.n	801030a <_strtol_l.constprop.0+0xc6>
 8010300:	3c57      	subs	r4, #87	; 0x57
 8010302:	e7db      	b.n	80102bc <_strtol_l.constprop.0+0x78>
 8010304:	f04f 3cff 	mov.w	ip, #4294967295
 8010308:	e7e6      	b.n	80102d8 <_strtol_l.constprop.0+0x94>
 801030a:	f1bc 0f00 	cmp.w	ip, #0
 801030e:	da05      	bge.n	801031c <_strtol_l.constprop.0+0xd8>
 8010310:	2322      	movs	r3, #34	; 0x22
 8010312:	6003      	str	r3, [r0, #0]
 8010314:	4646      	mov	r6, r8
 8010316:	b942      	cbnz	r2, 801032a <_strtol_l.constprop.0+0xe6>
 8010318:	4630      	mov	r0, r6
 801031a:	e79e      	b.n	801025a <_strtol_l.constprop.0+0x16>
 801031c:	b107      	cbz	r7, 8010320 <_strtol_l.constprop.0+0xdc>
 801031e:	4276      	negs	r6, r6
 8010320:	2a00      	cmp	r2, #0
 8010322:	d0f9      	beq.n	8010318 <_strtol_l.constprop.0+0xd4>
 8010324:	f1bc 0f00 	cmp.w	ip, #0
 8010328:	d000      	beq.n	801032c <_strtol_l.constprop.0+0xe8>
 801032a:	1e69      	subs	r1, r5, #1
 801032c:	6011      	str	r1, [r2, #0]
 801032e:	e7f3      	b.n	8010318 <_strtol_l.constprop.0+0xd4>
 8010330:	2430      	movs	r4, #48	; 0x30
 8010332:	2b00      	cmp	r3, #0
 8010334:	d1b1      	bne.n	801029a <_strtol_l.constprop.0+0x56>
 8010336:	2308      	movs	r3, #8
 8010338:	e7af      	b.n	801029a <_strtol_l.constprop.0+0x56>
 801033a:	2c30      	cmp	r4, #48	; 0x30
 801033c:	d0a5      	beq.n	801028a <_strtol_l.constprop.0+0x46>
 801033e:	230a      	movs	r3, #10
 8010340:	e7ab      	b.n	801029a <_strtol_l.constprop.0+0x56>
 8010342:	bf00      	nop
 8010344:	0801340d 	.word	0x0801340d

08010348 <_strtol_r>:
 8010348:	f7ff bf7c 	b.w	8010244 <_strtol_l.constprop.0>

0801034c <_strtoul_l.constprop.0>:
 801034c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010350:	4f36      	ldr	r7, [pc, #216]	; (801042c <_strtoul_l.constprop.0+0xe0>)
 8010352:	4686      	mov	lr, r0
 8010354:	460d      	mov	r5, r1
 8010356:	4628      	mov	r0, r5
 8010358:	f815 4b01 	ldrb.w	r4, [r5], #1
 801035c:	5de6      	ldrb	r6, [r4, r7]
 801035e:	f016 0608 	ands.w	r6, r6, #8
 8010362:	d1f8      	bne.n	8010356 <_strtoul_l.constprop.0+0xa>
 8010364:	2c2d      	cmp	r4, #45	; 0x2d
 8010366:	d12f      	bne.n	80103c8 <_strtoul_l.constprop.0+0x7c>
 8010368:	782c      	ldrb	r4, [r5, #0]
 801036a:	2601      	movs	r6, #1
 801036c:	1c85      	adds	r5, r0, #2
 801036e:	2b00      	cmp	r3, #0
 8010370:	d057      	beq.n	8010422 <_strtoul_l.constprop.0+0xd6>
 8010372:	2b10      	cmp	r3, #16
 8010374:	d109      	bne.n	801038a <_strtoul_l.constprop.0+0x3e>
 8010376:	2c30      	cmp	r4, #48	; 0x30
 8010378:	d107      	bne.n	801038a <_strtoul_l.constprop.0+0x3e>
 801037a:	7828      	ldrb	r0, [r5, #0]
 801037c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010380:	2858      	cmp	r0, #88	; 0x58
 8010382:	d149      	bne.n	8010418 <_strtoul_l.constprop.0+0xcc>
 8010384:	786c      	ldrb	r4, [r5, #1]
 8010386:	2310      	movs	r3, #16
 8010388:	3502      	adds	r5, #2
 801038a:	f04f 38ff 	mov.w	r8, #4294967295
 801038e:	2700      	movs	r7, #0
 8010390:	fbb8 f8f3 	udiv	r8, r8, r3
 8010394:	fb03 f908 	mul.w	r9, r3, r8
 8010398:	ea6f 0909 	mvn.w	r9, r9
 801039c:	4638      	mov	r0, r7
 801039e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80103a2:	f1bc 0f09 	cmp.w	ip, #9
 80103a6:	d814      	bhi.n	80103d2 <_strtoul_l.constprop.0+0x86>
 80103a8:	4664      	mov	r4, ip
 80103aa:	42a3      	cmp	r3, r4
 80103ac:	dd22      	ble.n	80103f4 <_strtoul_l.constprop.0+0xa8>
 80103ae:	2f00      	cmp	r7, #0
 80103b0:	db1d      	blt.n	80103ee <_strtoul_l.constprop.0+0xa2>
 80103b2:	4580      	cmp	r8, r0
 80103b4:	d31b      	bcc.n	80103ee <_strtoul_l.constprop.0+0xa2>
 80103b6:	d101      	bne.n	80103bc <_strtoul_l.constprop.0+0x70>
 80103b8:	45a1      	cmp	r9, r4
 80103ba:	db18      	blt.n	80103ee <_strtoul_l.constprop.0+0xa2>
 80103bc:	fb00 4003 	mla	r0, r0, r3, r4
 80103c0:	2701      	movs	r7, #1
 80103c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103c6:	e7ea      	b.n	801039e <_strtoul_l.constprop.0+0x52>
 80103c8:	2c2b      	cmp	r4, #43	; 0x2b
 80103ca:	bf04      	itt	eq
 80103cc:	782c      	ldrbeq	r4, [r5, #0]
 80103ce:	1c85      	addeq	r5, r0, #2
 80103d0:	e7cd      	b.n	801036e <_strtoul_l.constprop.0+0x22>
 80103d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80103d6:	f1bc 0f19 	cmp.w	ip, #25
 80103da:	d801      	bhi.n	80103e0 <_strtoul_l.constprop.0+0x94>
 80103dc:	3c37      	subs	r4, #55	; 0x37
 80103de:	e7e4      	b.n	80103aa <_strtoul_l.constprop.0+0x5e>
 80103e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80103e4:	f1bc 0f19 	cmp.w	ip, #25
 80103e8:	d804      	bhi.n	80103f4 <_strtoul_l.constprop.0+0xa8>
 80103ea:	3c57      	subs	r4, #87	; 0x57
 80103ec:	e7dd      	b.n	80103aa <_strtoul_l.constprop.0+0x5e>
 80103ee:	f04f 37ff 	mov.w	r7, #4294967295
 80103f2:	e7e6      	b.n	80103c2 <_strtoul_l.constprop.0+0x76>
 80103f4:	2f00      	cmp	r7, #0
 80103f6:	da07      	bge.n	8010408 <_strtoul_l.constprop.0+0xbc>
 80103f8:	2322      	movs	r3, #34	; 0x22
 80103fa:	f8ce 3000 	str.w	r3, [lr]
 80103fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010402:	b932      	cbnz	r2, 8010412 <_strtoul_l.constprop.0+0xc6>
 8010404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010408:	b106      	cbz	r6, 801040c <_strtoul_l.constprop.0+0xc0>
 801040a:	4240      	negs	r0, r0
 801040c:	2a00      	cmp	r2, #0
 801040e:	d0f9      	beq.n	8010404 <_strtoul_l.constprop.0+0xb8>
 8010410:	b107      	cbz	r7, 8010414 <_strtoul_l.constprop.0+0xc8>
 8010412:	1e69      	subs	r1, r5, #1
 8010414:	6011      	str	r1, [r2, #0]
 8010416:	e7f5      	b.n	8010404 <_strtoul_l.constprop.0+0xb8>
 8010418:	2430      	movs	r4, #48	; 0x30
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1b5      	bne.n	801038a <_strtoul_l.constprop.0+0x3e>
 801041e:	2308      	movs	r3, #8
 8010420:	e7b3      	b.n	801038a <_strtoul_l.constprop.0+0x3e>
 8010422:	2c30      	cmp	r4, #48	; 0x30
 8010424:	d0a9      	beq.n	801037a <_strtoul_l.constprop.0+0x2e>
 8010426:	230a      	movs	r3, #10
 8010428:	e7af      	b.n	801038a <_strtoul_l.constprop.0+0x3e>
 801042a:	bf00      	nop
 801042c:	0801340d 	.word	0x0801340d

08010430 <_strtoul_r>:
 8010430:	f7ff bf8c 	b.w	801034c <_strtoul_l.constprop.0>

08010434 <__submore>:
 8010434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010438:	460c      	mov	r4, r1
 801043a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801043c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010440:	4299      	cmp	r1, r3
 8010442:	d11d      	bne.n	8010480 <__submore+0x4c>
 8010444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010448:	f7fe ff92 	bl	800f370 <_malloc_r>
 801044c:	b918      	cbnz	r0, 8010456 <__submore+0x22>
 801044e:	f04f 30ff 	mov.w	r0, #4294967295
 8010452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801045a:	63a3      	str	r3, [r4, #56]	; 0x38
 801045c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010460:	6360      	str	r0, [r4, #52]	; 0x34
 8010462:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010466:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801046a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801046e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010472:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010476:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801047a:	6020      	str	r0, [r4, #0]
 801047c:	2000      	movs	r0, #0
 801047e:	e7e8      	b.n	8010452 <__submore+0x1e>
 8010480:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010482:	0077      	lsls	r7, r6, #1
 8010484:	463a      	mov	r2, r7
 8010486:	f000 f965 	bl	8010754 <_realloc_r>
 801048a:	4605      	mov	r5, r0
 801048c:	2800      	cmp	r0, #0
 801048e:	d0de      	beq.n	801044e <__submore+0x1a>
 8010490:	eb00 0806 	add.w	r8, r0, r6
 8010494:	4601      	mov	r1, r0
 8010496:	4632      	mov	r2, r6
 8010498:	4640      	mov	r0, r8
 801049a:	f7fe fb55 	bl	800eb48 <memcpy>
 801049e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80104a2:	f8c4 8000 	str.w	r8, [r4]
 80104a6:	e7e9      	b.n	801047c <__submore+0x48>

080104a8 <_ungetc_r>:
 80104a8:	b570      	push	{r4, r5, r6, lr}
 80104aa:	4614      	mov	r4, r2
 80104ac:	1c4a      	adds	r2, r1, #1
 80104ae:	4606      	mov	r6, r0
 80104b0:	460d      	mov	r5, r1
 80104b2:	d103      	bne.n	80104bc <_ungetc_r+0x14>
 80104b4:	f04f 35ff 	mov.w	r5, #4294967295
 80104b8:	4628      	mov	r0, r5
 80104ba:	bd70      	pop	{r4, r5, r6, pc}
 80104bc:	b118      	cbz	r0, 80104c6 <_ungetc_r+0x1e>
 80104be:	6983      	ldr	r3, [r0, #24]
 80104c0:	b90b      	cbnz	r3, 80104c6 <_ungetc_r+0x1e>
 80104c2:	f7fe fa13 	bl	800e8ec <__sinit>
 80104c6:	4b41      	ldr	r3, [pc, #260]	; (80105cc <_ungetc_r+0x124>)
 80104c8:	429c      	cmp	r4, r3
 80104ca:	d11d      	bne.n	8010508 <_ungetc_r+0x60>
 80104cc:	6874      	ldr	r4, [r6, #4]
 80104ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104d0:	07db      	lsls	r3, r3, #31
 80104d2:	d405      	bmi.n	80104e0 <_ungetc_r+0x38>
 80104d4:	89a3      	ldrh	r3, [r4, #12]
 80104d6:	0598      	lsls	r0, r3, #22
 80104d8:	d402      	bmi.n	80104e0 <_ungetc_r+0x38>
 80104da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104dc:	f7fe fac5 	bl	800ea6a <__retarget_lock_acquire_recursive>
 80104e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104e4:	f023 0320 	bic.w	r3, r3, #32
 80104e8:	0759      	lsls	r1, r3, #29
 80104ea:	81a3      	strh	r3, [r4, #12]
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	d42d      	bmi.n	801054c <_ungetc_r+0xa4>
 80104f0:	06d3      	lsls	r3, r2, #27
 80104f2:	d413      	bmi.n	801051c <_ungetc_r+0x74>
 80104f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104f6:	07dd      	lsls	r5, r3, #31
 80104f8:	d4dc      	bmi.n	80104b4 <_ungetc_r+0xc>
 80104fa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80104fe:	d1d9      	bne.n	80104b4 <_ungetc_r+0xc>
 8010500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010502:	f7fe fab3 	bl	800ea6c <__retarget_lock_release_recursive>
 8010506:	e7d5      	b.n	80104b4 <_ungetc_r+0xc>
 8010508:	4b31      	ldr	r3, [pc, #196]	; (80105d0 <_ungetc_r+0x128>)
 801050a:	429c      	cmp	r4, r3
 801050c:	d101      	bne.n	8010512 <_ungetc_r+0x6a>
 801050e:	68b4      	ldr	r4, [r6, #8]
 8010510:	e7dd      	b.n	80104ce <_ungetc_r+0x26>
 8010512:	4b30      	ldr	r3, [pc, #192]	; (80105d4 <_ungetc_r+0x12c>)
 8010514:	429c      	cmp	r4, r3
 8010516:	bf08      	it	eq
 8010518:	68f4      	ldreq	r4, [r6, #12]
 801051a:	e7d8      	b.n	80104ce <_ungetc_r+0x26>
 801051c:	0710      	lsls	r0, r2, #28
 801051e:	d511      	bpl.n	8010544 <_ungetc_r+0x9c>
 8010520:	4621      	mov	r1, r4
 8010522:	4630      	mov	r0, r6
 8010524:	f7fe f93c 	bl	800e7a0 <_fflush_r>
 8010528:	b130      	cbz	r0, 8010538 <_ungetc_r+0x90>
 801052a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801052c:	07d9      	lsls	r1, r3, #31
 801052e:	d4c1      	bmi.n	80104b4 <_ungetc_r+0xc>
 8010530:	89a3      	ldrh	r3, [r4, #12]
 8010532:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010536:	e7e2      	b.n	80104fe <_ungetc_r+0x56>
 8010538:	89a3      	ldrh	r3, [r4, #12]
 801053a:	60a0      	str	r0, [r4, #8]
 801053c:	f023 0308 	bic.w	r3, r3, #8
 8010540:	81a3      	strh	r3, [r4, #12]
 8010542:	61a0      	str	r0, [r4, #24]
 8010544:	89a3      	ldrh	r3, [r4, #12]
 8010546:	f043 0304 	orr.w	r3, r3, #4
 801054a:	81a3      	strh	r3, [r4, #12]
 801054c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801054e:	6862      	ldr	r2, [r4, #4]
 8010550:	b2ed      	uxtb	r5, r5
 8010552:	b1d3      	cbz	r3, 801058a <_ungetc_r+0xe2>
 8010554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010556:	4293      	cmp	r3, r2
 8010558:	dc05      	bgt.n	8010566 <_ungetc_r+0xbe>
 801055a:	4621      	mov	r1, r4
 801055c:	4630      	mov	r0, r6
 801055e:	f7ff ff69 	bl	8010434 <__submore>
 8010562:	2800      	cmp	r0, #0
 8010564:	d1e1      	bne.n	801052a <_ungetc_r+0x82>
 8010566:	6823      	ldr	r3, [r4, #0]
 8010568:	1e5a      	subs	r2, r3, #1
 801056a:	6022      	str	r2, [r4, #0]
 801056c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010570:	6863      	ldr	r3, [r4, #4]
 8010572:	3301      	adds	r3, #1
 8010574:	6063      	str	r3, [r4, #4]
 8010576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010578:	07da      	lsls	r2, r3, #31
 801057a:	d49d      	bmi.n	80104b8 <_ungetc_r+0x10>
 801057c:	89a3      	ldrh	r3, [r4, #12]
 801057e:	059b      	lsls	r3, r3, #22
 8010580:	d49a      	bmi.n	80104b8 <_ungetc_r+0x10>
 8010582:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010584:	f7fe fa72 	bl	800ea6c <__retarget_lock_release_recursive>
 8010588:	e796      	b.n	80104b8 <_ungetc_r+0x10>
 801058a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801058c:	6920      	ldr	r0, [r4, #16]
 801058e:	6823      	ldr	r3, [r4, #0]
 8010590:	f001 0101 	and.w	r1, r1, #1
 8010594:	b160      	cbz	r0, 80105b0 <_ungetc_r+0x108>
 8010596:	4298      	cmp	r0, r3
 8010598:	d20a      	bcs.n	80105b0 <_ungetc_r+0x108>
 801059a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 801059e:	42a8      	cmp	r0, r5
 80105a0:	d106      	bne.n	80105b0 <_ungetc_r+0x108>
 80105a2:	3b01      	subs	r3, #1
 80105a4:	3201      	adds	r2, #1
 80105a6:	6023      	str	r3, [r4, #0]
 80105a8:	6062      	str	r2, [r4, #4]
 80105aa:	2900      	cmp	r1, #0
 80105ac:	d184      	bne.n	80104b8 <_ungetc_r+0x10>
 80105ae:	e7e5      	b.n	801057c <_ungetc_r+0xd4>
 80105b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80105b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105b8:	6363      	str	r3, [r4, #52]	; 0x34
 80105ba:	2303      	movs	r3, #3
 80105bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80105be:	4623      	mov	r3, r4
 80105c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80105c4:	6023      	str	r3, [r4, #0]
 80105c6:	2301      	movs	r3, #1
 80105c8:	6063      	str	r3, [r4, #4]
 80105ca:	e7ee      	b.n	80105aa <_ungetc_r+0x102>
 80105cc:	08013208 	.word	0x08013208
 80105d0:	08013228 	.word	0x08013228
 80105d4:	080131e8 	.word	0x080131e8

080105d8 <_write_r>:
 80105d8:	b538      	push	{r3, r4, r5, lr}
 80105da:	4d07      	ldr	r5, [pc, #28]	; (80105f8 <_write_r+0x20>)
 80105dc:	4604      	mov	r4, r0
 80105de:	4608      	mov	r0, r1
 80105e0:	4611      	mov	r1, r2
 80105e2:	2200      	movs	r2, #0
 80105e4:	602a      	str	r2, [r5, #0]
 80105e6:	461a      	mov	r2, r3
 80105e8:	f7f8 fcb7 	bl	8008f5a <_write>
 80105ec:	1c43      	adds	r3, r0, #1
 80105ee:	d102      	bne.n	80105f6 <_write_r+0x1e>
 80105f0:	682b      	ldr	r3, [r5, #0]
 80105f2:	b103      	cbz	r3, 80105f6 <_write_r+0x1e>
 80105f4:	6023      	str	r3, [r4, #0]
 80105f6:	bd38      	pop	{r3, r4, r5, pc}
 80105f8:	200003a0 	.word	0x200003a0

080105fc <__assert_func>:
 80105fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105fe:	4614      	mov	r4, r2
 8010600:	461a      	mov	r2, r3
 8010602:	4b09      	ldr	r3, [pc, #36]	; (8010628 <__assert_func+0x2c>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4605      	mov	r5, r0
 8010608:	68d8      	ldr	r0, [r3, #12]
 801060a:	b14c      	cbz	r4, 8010620 <__assert_func+0x24>
 801060c:	4b07      	ldr	r3, [pc, #28]	; (801062c <__assert_func+0x30>)
 801060e:	9100      	str	r1, [sp, #0]
 8010610:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010614:	4906      	ldr	r1, [pc, #24]	; (8010630 <__assert_func+0x34>)
 8010616:	462b      	mov	r3, r5
 8010618:	f000 f81e 	bl	8010658 <fiprintf>
 801061c:	f000 f8e9 	bl	80107f2 <abort>
 8010620:	4b04      	ldr	r3, [pc, #16]	; (8010634 <__assert_func+0x38>)
 8010622:	461c      	mov	r4, r3
 8010624:	e7f3      	b.n	801060e <__assert_func+0x12>
 8010626:	bf00      	nop
 8010628:	20000014 	.word	0x20000014
 801062c:	080133d0 	.word	0x080133d0
 8010630:	080133dd 	.word	0x080133dd
 8010634:	0801340b 	.word	0x0801340b

08010638 <_close_r>:
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4d06      	ldr	r5, [pc, #24]	; (8010654 <_close_r+0x1c>)
 801063c:	2300      	movs	r3, #0
 801063e:	4604      	mov	r4, r0
 8010640:	4608      	mov	r0, r1
 8010642:	602b      	str	r3, [r5, #0]
 8010644:	f7f8 fca5 	bl	8008f92 <_close>
 8010648:	1c43      	adds	r3, r0, #1
 801064a:	d102      	bne.n	8010652 <_close_r+0x1a>
 801064c:	682b      	ldr	r3, [r5, #0]
 801064e:	b103      	cbz	r3, 8010652 <_close_r+0x1a>
 8010650:	6023      	str	r3, [r4, #0]
 8010652:	bd38      	pop	{r3, r4, r5, pc}
 8010654:	200003a0 	.word	0x200003a0

08010658 <fiprintf>:
 8010658:	b40e      	push	{r1, r2, r3}
 801065a:	b503      	push	{r0, r1, lr}
 801065c:	4601      	mov	r1, r0
 801065e:	ab03      	add	r3, sp, #12
 8010660:	4805      	ldr	r0, [pc, #20]	; (8010678 <fiprintf+0x20>)
 8010662:	f853 2b04 	ldr.w	r2, [r3], #4
 8010666:	6800      	ldr	r0, [r0, #0]
 8010668:	9301      	str	r3, [sp, #4]
 801066a:	f7ff f87b 	bl	800f764 <_vfiprintf_r>
 801066e:	b002      	add	sp, #8
 8010670:	f85d eb04 	ldr.w	lr, [sp], #4
 8010674:	b003      	add	sp, #12
 8010676:	4770      	bx	lr
 8010678:	20000014 	.word	0x20000014

0801067c <_fstat_r>:
 801067c:	b538      	push	{r3, r4, r5, lr}
 801067e:	4d07      	ldr	r5, [pc, #28]	; (801069c <_fstat_r+0x20>)
 8010680:	2300      	movs	r3, #0
 8010682:	4604      	mov	r4, r0
 8010684:	4608      	mov	r0, r1
 8010686:	4611      	mov	r1, r2
 8010688:	602b      	str	r3, [r5, #0]
 801068a:	f7f8 fc8e 	bl	8008faa <_fstat>
 801068e:	1c43      	adds	r3, r0, #1
 8010690:	d102      	bne.n	8010698 <_fstat_r+0x1c>
 8010692:	682b      	ldr	r3, [r5, #0]
 8010694:	b103      	cbz	r3, 8010698 <_fstat_r+0x1c>
 8010696:	6023      	str	r3, [r4, #0]
 8010698:	bd38      	pop	{r3, r4, r5, pc}
 801069a:	bf00      	nop
 801069c:	200003a0 	.word	0x200003a0

080106a0 <_isatty_r>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	4d06      	ldr	r5, [pc, #24]	; (80106bc <_isatty_r+0x1c>)
 80106a4:	2300      	movs	r3, #0
 80106a6:	4604      	mov	r4, r0
 80106a8:	4608      	mov	r0, r1
 80106aa:	602b      	str	r3, [r5, #0]
 80106ac:	f7f8 fc8d 	bl	8008fca <_isatty>
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	d102      	bne.n	80106ba <_isatty_r+0x1a>
 80106b4:	682b      	ldr	r3, [r5, #0]
 80106b6:	b103      	cbz	r3, 80106ba <_isatty_r+0x1a>
 80106b8:	6023      	str	r3, [r4, #0]
 80106ba:	bd38      	pop	{r3, r4, r5, pc}
 80106bc:	200003a0 	.word	0x200003a0

080106c0 <_lseek_r>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	4d07      	ldr	r5, [pc, #28]	; (80106e0 <_lseek_r+0x20>)
 80106c4:	4604      	mov	r4, r0
 80106c6:	4608      	mov	r0, r1
 80106c8:	4611      	mov	r1, r2
 80106ca:	2200      	movs	r2, #0
 80106cc:	602a      	str	r2, [r5, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	f7f8 fc86 	bl	8008fe0 <_lseek>
 80106d4:	1c43      	adds	r3, r0, #1
 80106d6:	d102      	bne.n	80106de <_lseek_r+0x1e>
 80106d8:	682b      	ldr	r3, [r5, #0]
 80106da:	b103      	cbz	r3, 80106de <_lseek_r+0x1e>
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	bd38      	pop	{r3, r4, r5, pc}
 80106e0:	200003a0 	.word	0x200003a0

080106e4 <__ascii_mbtowc>:
 80106e4:	b082      	sub	sp, #8
 80106e6:	b901      	cbnz	r1, 80106ea <__ascii_mbtowc+0x6>
 80106e8:	a901      	add	r1, sp, #4
 80106ea:	b142      	cbz	r2, 80106fe <__ascii_mbtowc+0x1a>
 80106ec:	b14b      	cbz	r3, 8010702 <__ascii_mbtowc+0x1e>
 80106ee:	7813      	ldrb	r3, [r2, #0]
 80106f0:	600b      	str	r3, [r1, #0]
 80106f2:	7812      	ldrb	r2, [r2, #0]
 80106f4:	1e10      	subs	r0, r2, #0
 80106f6:	bf18      	it	ne
 80106f8:	2001      	movne	r0, #1
 80106fa:	b002      	add	sp, #8
 80106fc:	4770      	bx	lr
 80106fe:	4610      	mov	r0, r2
 8010700:	e7fb      	b.n	80106fa <__ascii_mbtowc+0x16>
 8010702:	f06f 0001 	mvn.w	r0, #1
 8010706:	e7f8      	b.n	80106fa <__ascii_mbtowc+0x16>

08010708 <memmove>:
 8010708:	4288      	cmp	r0, r1
 801070a:	b510      	push	{r4, lr}
 801070c:	eb01 0402 	add.w	r4, r1, r2
 8010710:	d902      	bls.n	8010718 <memmove+0x10>
 8010712:	4284      	cmp	r4, r0
 8010714:	4623      	mov	r3, r4
 8010716:	d807      	bhi.n	8010728 <memmove+0x20>
 8010718:	1e43      	subs	r3, r0, #1
 801071a:	42a1      	cmp	r1, r4
 801071c:	d008      	beq.n	8010730 <memmove+0x28>
 801071e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010726:	e7f8      	b.n	801071a <memmove+0x12>
 8010728:	4402      	add	r2, r0
 801072a:	4601      	mov	r1, r0
 801072c:	428a      	cmp	r2, r1
 801072e:	d100      	bne.n	8010732 <memmove+0x2a>
 8010730:	bd10      	pop	{r4, pc}
 8010732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801073a:	e7f7      	b.n	801072c <memmove+0x24>

0801073c <__malloc_lock>:
 801073c:	4801      	ldr	r0, [pc, #4]	; (8010744 <__malloc_lock+0x8>)
 801073e:	f7fe b994 	b.w	800ea6a <__retarget_lock_acquire_recursive>
 8010742:	bf00      	nop
 8010744:	20000394 	.word	0x20000394

08010748 <__malloc_unlock>:
 8010748:	4801      	ldr	r0, [pc, #4]	; (8010750 <__malloc_unlock+0x8>)
 801074a:	f7fe b98f 	b.w	800ea6c <__retarget_lock_release_recursive>
 801074e:	bf00      	nop
 8010750:	20000394 	.word	0x20000394

08010754 <_realloc_r>:
 8010754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010758:	4680      	mov	r8, r0
 801075a:	4614      	mov	r4, r2
 801075c:	460e      	mov	r6, r1
 801075e:	b921      	cbnz	r1, 801076a <_realloc_r+0x16>
 8010760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010764:	4611      	mov	r1, r2
 8010766:	f7fe be03 	b.w	800f370 <_malloc_r>
 801076a:	b92a      	cbnz	r2, 8010778 <_realloc_r+0x24>
 801076c:	f7fe fd94 	bl	800f298 <_free_r>
 8010770:	4625      	mov	r5, r4
 8010772:	4628      	mov	r0, r5
 8010774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010778:	f000 f842 	bl	8010800 <_malloc_usable_size_r>
 801077c:	4284      	cmp	r4, r0
 801077e:	4607      	mov	r7, r0
 8010780:	d802      	bhi.n	8010788 <_realloc_r+0x34>
 8010782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010786:	d812      	bhi.n	80107ae <_realloc_r+0x5a>
 8010788:	4621      	mov	r1, r4
 801078a:	4640      	mov	r0, r8
 801078c:	f7fe fdf0 	bl	800f370 <_malloc_r>
 8010790:	4605      	mov	r5, r0
 8010792:	2800      	cmp	r0, #0
 8010794:	d0ed      	beq.n	8010772 <_realloc_r+0x1e>
 8010796:	42bc      	cmp	r4, r7
 8010798:	4622      	mov	r2, r4
 801079a:	4631      	mov	r1, r6
 801079c:	bf28      	it	cs
 801079e:	463a      	movcs	r2, r7
 80107a0:	f7fe f9d2 	bl	800eb48 <memcpy>
 80107a4:	4631      	mov	r1, r6
 80107a6:	4640      	mov	r0, r8
 80107a8:	f7fe fd76 	bl	800f298 <_free_r>
 80107ac:	e7e1      	b.n	8010772 <_realloc_r+0x1e>
 80107ae:	4635      	mov	r5, r6
 80107b0:	e7df      	b.n	8010772 <_realloc_r+0x1e>
	...

080107b4 <_read_r>:
 80107b4:	b538      	push	{r3, r4, r5, lr}
 80107b6:	4d07      	ldr	r5, [pc, #28]	; (80107d4 <_read_r+0x20>)
 80107b8:	4604      	mov	r4, r0
 80107ba:	4608      	mov	r0, r1
 80107bc:	4611      	mov	r1, r2
 80107be:	2200      	movs	r2, #0
 80107c0:	602a      	str	r2, [r5, #0]
 80107c2:	461a      	mov	r2, r3
 80107c4:	f7f8 fbac 	bl	8008f20 <_read>
 80107c8:	1c43      	adds	r3, r0, #1
 80107ca:	d102      	bne.n	80107d2 <_read_r+0x1e>
 80107cc:	682b      	ldr	r3, [r5, #0]
 80107ce:	b103      	cbz	r3, 80107d2 <_read_r+0x1e>
 80107d0:	6023      	str	r3, [r4, #0]
 80107d2:	bd38      	pop	{r3, r4, r5, pc}
 80107d4:	200003a0 	.word	0x200003a0

080107d8 <__ascii_wctomb>:
 80107d8:	b149      	cbz	r1, 80107ee <__ascii_wctomb+0x16>
 80107da:	2aff      	cmp	r2, #255	; 0xff
 80107dc:	bf85      	ittet	hi
 80107de:	238a      	movhi	r3, #138	; 0x8a
 80107e0:	6003      	strhi	r3, [r0, #0]
 80107e2:	700a      	strbls	r2, [r1, #0]
 80107e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80107e8:	bf98      	it	ls
 80107ea:	2001      	movls	r0, #1
 80107ec:	4770      	bx	lr
 80107ee:	4608      	mov	r0, r1
 80107f0:	4770      	bx	lr

080107f2 <abort>:
 80107f2:	b508      	push	{r3, lr}
 80107f4:	2006      	movs	r0, #6
 80107f6:	f000 f833 	bl	8010860 <raise>
 80107fa:	2001      	movs	r0, #1
 80107fc:	f7f8 fb86 	bl	8008f0c <_exit>

08010800 <_malloc_usable_size_r>:
 8010800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010804:	1f18      	subs	r0, r3, #4
 8010806:	2b00      	cmp	r3, #0
 8010808:	bfbc      	itt	lt
 801080a:	580b      	ldrlt	r3, [r1, r0]
 801080c:	18c0      	addlt	r0, r0, r3
 801080e:	4770      	bx	lr

08010810 <_raise_r>:
 8010810:	291f      	cmp	r1, #31
 8010812:	b538      	push	{r3, r4, r5, lr}
 8010814:	4604      	mov	r4, r0
 8010816:	460d      	mov	r5, r1
 8010818:	d904      	bls.n	8010824 <_raise_r+0x14>
 801081a:	2316      	movs	r3, #22
 801081c:	6003      	str	r3, [r0, #0]
 801081e:	f04f 30ff 	mov.w	r0, #4294967295
 8010822:	bd38      	pop	{r3, r4, r5, pc}
 8010824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010826:	b112      	cbz	r2, 801082e <_raise_r+0x1e>
 8010828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801082c:	b94b      	cbnz	r3, 8010842 <_raise_r+0x32>
 801082e:	4620      	mov	r0, r4
 8010830:	f000 f830 	bl	8010894 <_getpid_r>
 8010834:	462a      	mov	r2, r5
 8010836:	4601      	mov	r1, r0
 8010838:	4620      	mov	r0, r4
 801083a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801083e:	f000 b817 	b.w	8010870 <_kill_r>
 8010842:	2b01      	cmp	r3, #1
 8010844:	d00a      	beq.n	801085c <_raise_r+0x4c>
 8010846:	1c59      	adds	r1, r3, #1
 8010848:	d103      	bne.n	8010852 <_raise_r+0x42>
 801084a:	2316      	movs	r3, #22
 801084c:	6003      	str	r3, [r0, #0]
 801084e:	2001      	movs	r0, #1
 8010850:	e7e7      	b.n	8010822 <_raise_r+0x12>
 8010852:	2400      	movs	r4, #0
 8010854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010858:	4628      	mov	r0, r5
 801085a:	4798      	blx	r3
 801085c:	2000      	movs	r0, #0
 801085e:	e7e0      	b.n	8010822 <_raise_r+0x12>

08010860 <raise>:
 8010860:	4b02      	ldr	r3, [pc, #8]	; (801086c <raise+0xc>)
 8010862:	4601      	mov	r1, r0
 8010864:	6818      	ldr	r0, [r3, #0]
 8010866:	f7ff bfd3 	b.w	8010810 <_raise_r>
 801086a:	bf00      	nop
 801086c:	20000014 	.word	0x20000014

08010870 <_kill_r>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	4d07      	ldr	r5, [pc, #28]	; (8010890 <_kill_r+0x20>)
 8010874:	2300      	movs	r3, #0
 8010876:	4604      	mov	r4, r0
 8010878:	4608      	mov	r0, r1
 801087a:	4611      	mov	r1, r2
 801087c:	602b      	str	r3, [r5, #0]
 801087e:	f7f8 fb35 	bl	8008eec <_kill>
 8010882:	1c43      	adds	r3, r0, #1
 8010884:	d102      	bne.n	801088c <_kill_r+0x1c>
 8010886:	682b      	ldr	r3, [r5, #0]
 8010888:	b103      	cbz	r3, 801088c <_kill_r+0x1c>
 801088a:	6023      	str	r3, [r4, #0]
 801088c:	bd38      	pop	{r3, r4, r5, pc}
 801088e:	bf00      	nop
 8010890:	200003a0 	.word	0x200003a0

08010894 <_getpid_r>:
 8010894:	f7f8 bb22 	b.w	8008edc <_getpid>

08010898 <_init>:
 8010898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801089a:	bf00      	nop
 801089c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801089e:	bc08      	pop	{r3}
 80108a0:	469e      	mov	lr, r3
 80108a2:	4770      	bx	lr

080108a4 <_fini>:
 80108a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108a6:	bf00      	nop
 80108a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108aa:	bc08      	pop	{r3}
 80108ac:	469e      	mov	lr, r3
 80108ae:	4770      	bx	lr
