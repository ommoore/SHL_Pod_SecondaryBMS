
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019ec  08007fe0  08007fe0  00017fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099cc  080099cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d4  080099d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080099dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001dc  08009bb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08009bb8  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015819  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf1  00000000  00000000  00035a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00038618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  000394e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fcd  00000000  00000000  0003a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119aa  00000000  00000000  000622ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee4c9  00000000  00000000  00073c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb0  00000000  00000000  00162174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fc4 	.word	0x08007fc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007fc4 	.word	0x08007fc4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <TinyBMS_UART_ReadDeviceTemperatures>:
 * 						 	      [INT16]				   [INT16] 				  [INT16]
 * 						  	(Reg 48) DATA1 - TinyBMS Internal Temperature
 * 						  	(Reg 42) DATA2 - External Temp Sensor #1 (value of -327689 if NC)
 * 						  	(Reg 43) DATA3 - External Temp Sensor #2 (value of -327689 if NC)
 */
uint8_t TinyBMS_UART_ReadDeviceTemperatures(UART_HandleTypeDef *huart2) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0a6      	sub	sp, #152	; 0x98
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadDeviceTemperatures\n");
 8000ee8:	48ae      	ldr	r0, [pc, #696]	; (80011a4 <TinyBMS_UART_ReadDeviceTemperatures+0x2c4>)
 8000eea:	f004 fffb 	bl	8005ee4 <puts>
	uint8_t retval = 0xFF;
 8000eee:	23ff      	movs	r3, #255	; 0xff
 8000ef0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8000f12:	23aa      	movs	r3, #170	; 0xaa
 8000f14:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tx_buffer[1] = 0x1B; //command
 8000f18:	231b      	movs	r3, #27
 8000f1a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	//Verified!
	CRC_request = CRC16(tx_buffer, 2);		//should be 0x1B3F
 8000f1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f22:	2102      	movs	r1, #2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f957 	bl	80011d8 <CRC16>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	CRC_LSB = (CRC_request & 0xFF); 		//should be 0x3F
 8000f30:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000f34:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);	//should be 0x1B
 8000f38:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	printf("CRC_request: 0x%04X\n", CRC_request);
	printf("CRC_LSB: 0x%02X\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8000f44:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000f48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	tx_buffer[3] = CRC_MSB;
 8000f4c:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8000f50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	HAL_UART_Transmit_IT(huart2, (uint8_t *)tx_buffer, 4);
 8000f54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f58:	2204      	movs	r2, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f002 ff6f 	bl	8003e40 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(huart2, (uint8_t *)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	2202      	movs	r2, #2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f002 ffc4 	bl	8003ef8 <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	2baa      	cmp	r3, #170	; 0xaa
 8000f74:	f040 8108 	bne.w	8001188 <TinyBMS_UART_ReadDeviceTemperatures+0x2a8>

		//[ERROR]
		if(rx_buffer[1] == 0x00) {
 8000f78:	7b7b      	ldrb	r3, [r7, #13]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d13a      	bne.n	8000ff4 <TinyBMS_UART_ReadDeviceTemperatures+0x114>
			printf("Response from BMS [ERROR]\n");
 8000f7e:	488a      	ldr	r0, [pc, #552]	; (80011a8 <TinyBMS_UART_ReadDeviceTemperatures+0x2c8>)
 8000f80:	f004 ffb0 	bl	8005ee4 <puts>

			HAL_UART_Receive_IT(huart2, (uint8_t *)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	3302      	adds	r3, #2
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f002 ffb2 	bl	8003ef8 <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8000f9a:	7c7b      	ldrb	r3, [r7, #17]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7c3b      	ldrb	r3, [r7, #16]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f910 	bl	80011d8 <CRC16>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

			if(CRC_calc == CRC_reply) {
 8000fbe:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8000fc2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d10d      	bne.n	8000fe6 <TinyBMS_UART_ReadDeviceTemperatures+0x106>
				printf("CRC pass\n");
 8000fca:	4878      	ldr	r0, [pc, #480]	; (80011ac <TinyBMS_UART_ReadDeviceTemperatures+0x2cc>)
 8000fcc:	f004 ff8a 	bl	8005ee4 <puts>
				printf("ERROR Code: 0x%02X\n", error); //valid error code
 8000fd0:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4876      	ldr	r0, [pc, #472]	; (80011b0 <TinyBMS_UART_ReadDeviceTemperatures+0x2d0>)
 8000fd8:	f004 fefe 	bl	8005dd8 <iprintf>
				retval = error;
 8000fdc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000fe0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000fe4:	e0d8      	b.n	8001198 <TinyBMS_UART_ReadDeviceTemperatures+0x2b8>
			} else {
				printf("CRC fail in BMS ERROR\n");
 8000fe6:	4873      	ldr	r0, [pc, #460]	; (80011b4 <TinyBMS_UART_ReadDeviceTemperatures+0x2d4>)
 8000fe8:	f004 ff7c 	bl	8005ee4 <puts>
				retval = 0xFF; //failure
 8000fec:	23ff      	movs	r3, #255	; 0xff
 8000fee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000ff2:	e0d1      	b.n	8001198 <TinyBMS_UART_ReadDeviceTemperatures+0x2b8>
			}

		//[OK]
		} else if(rx_buffer[1] == 0x1B) {
 8000ff4:	7b7b      	ldrb	r3, [r7, #13]
 8000ff6:	2b1b      	cmp	r3, #27
 8000ff8:	f040 80bd 	bne.w	8001176 <TinyBMS_UART_ReadDeviceTemperatures+0x296>
			printf("Response from BMS [OK]\n");
 8000ffc:	486e      	ldr	r0, [pc, #440]	; (80011b8 <TinyBMS_UART_ReadDeviceTemperatures+0x2d8>)
 8000ffe:	f004 ff71 	bl	8005ee4 <puts>

			HAL_UART_Receive_IT(huart2, (uint8_t *)&rx_buffer[2], 1); //read byte 3 from OK reply
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	3302      	adds	r3, #2
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f002 ff73 	bl	8003ef8 <HAL_UART_Receive_IT>

			uint8_t PL = rx_buffer[2]; //payload length in bytes
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			printf("Payload Length: 0x%02X\n", PL);
 8001018:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800101c:	4619      	mov	r1, r3
 800101e:	4867      	ldr	r0, [pc, #412]	; (80011bc <TinyBMS_UART_ReadDeviceTemperatures+0x2dc>)
 8001020:	f004 feda 	bl	8005dd8 <iprintf>
			//Payload Length = PL = 2n bytes -> where n = 1,2,3 (DATA1,DATA2,DATA3)

			HAL_UART_Receive_IT(huart2, (uint8_t *)&rx_buffer[3], PL+2); //read bytes 4-2n+5 from OK reply
 8001024:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001028:	b29b      	uxth	r3, r3
 800102a:	3302      	adds	r3, #2
 800102c:	b29a      	uxth	r2, r3
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	3303      	adds	r3, #3
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f002 ff5e 	bl	8003ef8 <HAL_UART_Receive_IT>

			int16_t DATA[] = {0};
 800103c:	2300      	movs	r3, #0
 800103e:	813b      	strh	r3, [r7, #8]
			uint32_t numData = (PL / 2); //2 bytes per data reading
 8001040:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	67fb      	str	r3, [r7, #124]	; 0x7c
			uint32_t n = 1; //data index
 800104a:	2301      	movs	r3, #1
 800104c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			for(uint32_t i = 0; i < numData; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001056:	e029      	b.n	80010ac <TinyBMS_UART_ReadDeviceTemperatures+0x1cc>
				//TinyBMS Device Temperatures -> LSB = Byte(2n+2) MSB = Byte(2n+3) (i.e. rx_buffer[2n+2 : 2n+3])
				DATA[i] = ((rx_buffer[(2*n)+3-1] << 8) | (rx_buffer[(2*n)+2-1]));
 8001058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800105c:	3301      	adds	r3, #1
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001064:	4413      	add	r3, r2
 8001066:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001072:	3301      	adds	r3, #1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	3b01      	subs	r3, #1
 8001078:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800107c:	440b      	add	r3, r1
 800107e:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21a      	sxth	r2, r3
 8001088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001092:	440b      	add	r3, r1
 8001094:	f823 2c90 	strh.w	r2, [r3, #-144]
				n++;
 8001098:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800109c:	3301      	adds	r3, #1
 800109e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			for(uint32_t i = 0; i < numData; i++) {
 80010a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010a6:	3301      	adds	r3, #1
 80010a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80010ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80010b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3d0      	bcc.n	8001058 <TinyBMS_UART_ReadDeviceTemperatures+0x178>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 80010b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010ba:	3302      	adds	r3, #2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80010c2:	4413      	add	r3, r2
 80010c4:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010d0:	3302      	adds	r3, #2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	3b01      	subs	r3, #1
 80010d6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80010da:	440b      	add	r3, r1
 80010dc:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes 1-2n+3 of OK response
 80010ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	3303      	adds	r3, #3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f86c 	bl	80011d8 <CRC16>
 8001100:	4603      	mov	r3, r0
 8001102:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

			if(CRC_calc == CRC_reply) {
 8001106:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 800110a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800110e:	429a      	cmp	r2, r3
 8001110:	d12a      	bne.n	8001168 <TinyBMS_UART_ReadDeviceTemperatures+0x288>
				printf("CRC pass\n");
 8001112:	4826      	ldr	r0, [pc, #152]	; (80011ac <TinyBMS_UART_ReadDeviceTemperatures+0x2cc>)
 8001114:	f004 fee6 	bl	8005ee4 <puts>

				int16_t internalTemp = DATA[0];  //TinyBMS internal temperature
 8001118:	893b      	ldrh	r3, [r7, #8]
 800111a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
				printf("TinyBMS internal temperature: %d°C (0.1°C)\n", internalTemp);
 800111e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8001122:	4619      	mov	r1, r3
 8001124:	4826      	ldr	r0, [pc, #152]	; (80011c0 <TinyBMS_UART_ReadDeviceTemperatures+0x2e0>)
 8001126:	f004 fe57 	bl	8005dd8 <iprintf>

				if((numData == 2) || (numData == 3)) {
 800112a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800112c:	2b02      	cmp	r3, #2
 800112e:	d002      	beq.n	8001136 <TinyBMS_UART_ReadDeviceTemperatures+0x256>
 8001130:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001132:	2b03      	cmp	r3, #3
 8001134:	d114      	bne.n	8001160 <TinyBMS_UART_ReadDeviceTemperatures+0x280>
					int16_t externalTemp1 = DATA[1];  //External Temp Sensor #1
 8001136:	897b      	ldrh	r3, [r7, #10]
 8001138:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
					printf("External sensor 1 temperature: %d°C (0.1°C)\n", externalTemp1);
 800113c:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8001140:	4619      	mov	r1, r3
 8001142:	4820      	ldr	r0, [pc, #128]	; (80011c4 <TinyBMS_UART_ReadDeviceTemperatures+0x2e4>)
 8001144:	f004 fe48 	bl	8005dd8 <iprintf>
					//value of -32768 if not connected

					if(numData == 3) {
 8001148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114a:	2b03      	cmp	r3, #3
 800114c:	d108      	bne.n	8001160 <TinyBMS_UART_ReadDeviceTemperatures+0x280>
						int16_t externalTemp2 = DATA[2];  //External Temp Sensor #2
 800114e:	89bb      	ldrh	r3, [r7, #12]
 8001150:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
						printf("External sensor 2 temperature: %d°C (0.1°C)\n", externalTemp2);
 8001154:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001158:	4619      	mov	r1, r3
 800115a:	481b      	ldr	r0, [pc, #108]	; (80011c8 <TinyBMS_UART_ReadDeviceTemperatures+0x2e8>)
 800115c:	f004 fe3c 	bl	8005dd8 <iprintf>
						//value of -32768 if not connected
					}
				}
				retval = 0xAA; //success
 8001160:	23aa      	movs	r3, #170	; 0xaa
 8001162:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001166:	e017      	b.n	8001198 <TinyBMS_UART_ReadDeviceTemperatures+0x2b8>

			} else {
				printf("CRC fail in BMS OK\n");
 8001168:	4818      	ldr	r0, [pc, #96]	; (80011cc <TinyBMS_UART_ReadDeviceTemperatures+0x2ec>)
 800116a:	f004 febb 	bl	8005ee4 <puts>
				retval = 0xFF; //failure
 800116e:	23ff      	movs	r3, #255	; 0xff
 8001170:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001174:	e010      	b.n	8001198 <TinyBMS_UART_ReadDeviceTemperatures+0x2b8>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1B but was 0x%02X\n", rx_buffer[1]);
 8001176:	7b7b      	ldrb	r3, [r7, #13]
 8001178:	4619      	mov	r1, r3
 800117a:	4815      	ldr	r0, [pc, #84]	; (80011d0 <TinyBMS_UART_ReadDeviceTemperatures+0x2f0>)
 800117c:	f004 fe2c 	bl	8005dd8 <iprintf>
			retval = 0xFF; //failure
 8001180:	23ff      	movs	r3, #255	; 0xff
 8001182:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001186:	e007      	b.n	8001198 <TinyBMS_UART_ReadDeviceTemperatures+0x2b8>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\n", rx_buffer[0]);
 8001188:	7b3b      	ldrb	r3, [r7, #12]
 800118a:	4619      	mov	r1, r3
 800118c:	4811      	ldr	r0, [pc, #68]	; (80011d4 <TinyBMS_UART_ReadDeviceTemperatures+0x2f4>)
 800118e:	f004 fe23 	bl	8005dd8 <iprintf>
		retval = 0xFF; //failure
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	}

	return retval;
 8001198:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800119c:	4618      	mov	r0, r3
 800119e:	3798      	adds	r7, #152	; 0x98
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08008bf0 	.word	0x08008bf0
 80011a8:	08008160 	.word	0x08008160
 80011ac:	08008070 	.word	0x08008070
 80011b0:	0800807c 	.word	0x0800807c
 80011b4:	08008090 	.word	0x08008090
 80011b8:	0800817c 	.word	0x0800817c
 80011bc:	08008c14 	.word	0x08008c14
 80011c0:	08008c2c 	.word	0x08008c2c
 80011c4:	08008c5c 	.word	0x08008c5c
 80011c8:	08008c8c 	.word	0x08008c8c
 80011cc:	080082a0 	.word	0x080082a0
 80011d0:	080086c0 	.word	0x080086c0
 80011d4:	08008114 	.word	0x08008114

080011d8 <CRC16>:
	return retval;
}


/********************** CRC Calculation **********************/
static uint16_t CRC16(const uint8_t* data, uint16_t length) {
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
	uint8_t tmp;
	uint16_t crcWord = 0xFFFF;
 80011e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e8:	81fb      	strh	r3, [r7, #14]

	while(length--) {
 80011ea:	e011      	b.n	8001210 <CRC16+0x38>
		tmp = *data++ ^ crcWord;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4053      	eors	r3, r2
 80011fa:	737b      	strb	r3, [r7, #13]
		crcWord >>= 8;
 80011fc:	89fb      	ldrh	r3, [r7, #14]
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	81fb      	strh	r3, [r7, #14]
		crcWord ^= crcTable[tmp];
 8001202:	7b7b      	ldrb	r3, [r7, #13]
 8001204:	4a08      	ldr	r2, [pc, #32]	; (8001228 <CRC16+0x50>)
 8001206:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	4053      	eors	r3, r2
 800120e:	81fb      	strh	r3, [r7, #14]
	while(length--) {
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	807a      	strh	r2, [r7, #2]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1e8      	bne.n	80011ec <CRC16+0x14>
	}
	return crcWord;
 800121a:	89fb      	ldrh	r3, [r7, #14]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	080093d4 	.word	0x080093d4

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f000 fee2 	bl	8001ffa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f863 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f000 f9b5 	bl	80015a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800123e:	f000 f955 	bl	80014ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001242:	f000 f983 	bl	800154c <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8001246:	f000 f8ed 	bl	8001424 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800124a:	f000 f91f 	bl	800148c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init
  HAL_StatusTypeDef res;

  HAL_Delay(10);
 800124e:	200a      	movs	r0, #10
 8001250:	f000 ff30 	bl	80020b4 <HAL_Delay>

  rxCmpl = 0;
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <main+0xac>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
  readLen = 1;
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <main+0xb0>)
 800125c:	2201      	movs	r2, #1
 800125e:	801a      	strh	r2, [r3, #0]
  wasRead = 0;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <main+0xb4>)
 8001262:	2200      	movs	r2, #0
 8001264:	801a      	strh	r2, [r3, #0]
  rxPos1 = 0;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <main+0xb8>)
 8001268:	2200      	movs	r2, #0
 800126a:	801a      	strh	r2, [r3, #0]
  rxPos2 = 0;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <main+0xbc>)
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]

  if((res = HAL_UART_Receive_IT(&huart2, (uint8_t*)rx, readLen)) == HAL_OK) {
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <main+0xb0>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	491c      	ldr	r1, [pc, #112]	; (80012ec <main+0xc0>)
 800127c:	481c      	ldr	r0, [pc, #112]	; (80012f0 <main+0xc4>)
 800127e:	f002 fe3b 	bl	8003ef8 <HAL_UART_Receive_IT>
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d103      	bne.n	8001294 <main+0x68>
	  printf("HAL_OK\n");
 800128c:	4819      	ldr	r0, [pc, #100]	; (80012f4 <main+0xc8>)
 800128e:	f004 fe29 	bl	8005ee4 <puts>
 8001292:	e019      	b.n	80012c8 <main+0x9c>
  } else if(res == HAL_ERROR) {
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d110      	bne.n	80012bc <main+0x90>
	  printf("< 2 HAL_ERROR %.2X state = %s\n", (uint8_t)huart2.ErrorCode, stateUART(huart2.RxState));
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <main+0xc4>)
 800129c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <main+0xc4>)
 80012a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fb59 	bl	8001960 <stateUART>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4621      	mov	r1, r4
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <main+0xcc>)
 80012b6:	f004 fd8f 	bl	8005dd8 <iprintf>
 80012ba:	e005      	b.n	80012c8 <main+0x9c>
  } else if(res == HAL_BUSY) {
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d102      	bne.n	80012c8 <main+0x9c>
	  printf("< HAL_BUSY\n");
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <main+0xd0>)
 80012c4:	f004 fe0e 	bl	8005ee4 <puts>
  //while(TinyBMS_UART_ReadBatteryPackMaxCellVoltage(&huart2) != 0xAA) {}
  //while(TinyBMS_UART_ReadBatteryPackMinCellVoltage(&huart2) != 0xAA) {}
  //while(TinyBMS_UART_ReadOnlineStatus(&huart2) != 0xAA) {}
  //while(TinyBMS_UART_ReadLifetimeCounter(&huart2) != 0xAA) {}
  //while(TinyBMS_UART_ReadEstimatedSOCValue(&huart2) != 0xAA) {}
  while(TinyBMS_UART_ReadDeviceTemperatures(&huart2) != 0xAA) {}
 80012c8:	bf00      	nop
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <main+0xc4>)
 80012cc:	f7ff fe08 	bl	8000ee0 <TinyBMS_UART_ReadDeviceTemperatures>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2baa      	cmp	r3, #170	; 0xaa
 80012d4:	d1f9      	bne.n	80012ca <main+0x9e>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	while(1) {
 80012d6:	e7fe      	b.n	80012d6 <main+0xaa>
 80012d8:	200001f9 	.word	0x200001f9
 80012dc:	200001fc 	.word	0x200001fc
 80012e0:	20000202 	.word	0x20000202
 80012e4:	20000200 	.word	0x20000200
 80012e8:	200001fe 	.word	0x200001fe
 80012ec:	20000698 	.word	0x20000698
 80012f0:	20000768 	.word	0x20000768
 80012f4:	08009230 	.word	0x08009230
 80012f8:	08009238 	.word	0x08009238
 80012fc:	08009258 	.word	0x08009258

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0b4      	sub	sp, #208	; 0xd0
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800130a:	2230      	movs	r2, #48	; 0x30
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f004 f8f0 	bl	80054f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2284      	movs	r2, #132	; 0x84
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f004 f8e1 	bl	80054f4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001332:	f001 fc91 	bl	8002c58 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <SystemClock_Config+0x118>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a37      	ldr	r2, [pc, #220]	; (8001418 <SystemClock_Config+0x118>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <SystemClock_Config+0x118>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <SystemClock_Config+0x11c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001356:	4a31      	ldr	r2, [pc, #196]	; (800141c <SystemClock_Config+0x11c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <SystemClock_Config+0x11c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136a:	2301      	movs	r3, #1
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001370:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001386:	2304      	movs	r3, #4
 8001388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800138c:	2348      	movs	r3, #72	; 0x48
 800138e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001398:	2303      	movs	r3, #3
 800139a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fc68 	bl	8002c78 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013ae:	f000 fb63 	bl	8001a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013d6:	2102      	movs	r1, #2
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 fef1 	bl	80031c0 <HAL_RCC_ClockConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80013e4:	f000 fb48 	bl	8001a78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <SystemClock_Config+0x120>)
 80013ea:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 f8e0 	bl	80035c4 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800140a:	f000 fb35 	bl	8001a78 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	37d0      	adds	r7, #208	; 0xd0
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000
 8001420:	00200180 	.word	0x00200180

08001424 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_CAN1_Init+0x60>)
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <MX_CAN1_Init+0x64>)
 800142c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_CAN1_Init+0x60>)
 8001430:	2210      	movs	r2, #16
 8001432:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_CAN1_Init+0x60>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_CAN1_Init+0x60>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_CAN1_Init+0x60>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_CAN1_Init+0x60>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_CAN1_Init+0x60>)
 800144e:	2200      	movs	r2, #0
 8001450:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_CAN1_Init+0x60>)
 8001454:	2200      	movs	r2, #0
 8001456:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_CAN1_Init+0x60>)
 800145a:	2200      	movs	r2, #0
 800145c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_CAN1_Init+0x60>)
 8001460:	2200      	movs	r2, #0
 8001462:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_CAN1_Init+0x60>)
 8001466:	2200      	movs	r2, #0
 8001468:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_CAN1_Init+0x60>)
 800146c:	2200      	movs	r2, #0
 800146e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_CAN1_Init+0x60>)
 8001472:	f000 fe43 	bl	80020fc <HAL_CAN_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800147c:	f000 fafc 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200007ec 	.word	0x200007ec
 8001488:	40006400 	.word	0x40006400

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

  //USART2: PA3 PD5 for TinyBMS communication
  //Verified with UART configuration stated on TinyBMS_Communication_Protocols.pdf page 4

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MX_USART2_UART_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014d0:	f002 fc68 	bl	8003da4 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 facd 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000768 	.word	0x20000768
 80014e8:	40004400 	.word	0x40004400

080014ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 1 */

  //USART3: PD8 PD9 for ST_LINK debugging (printf ITM)

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_USART3_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_USART3_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART3_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART3_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_USART3_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART3_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART3_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART3_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART3_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART3_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART3_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART3_UART_Init+0x58>)
 8001530:	f002 fc38 	bl	8003da4 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f000 fa9d 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000210 	.word	0x20000210
 8001548:	40004800 	.word	0x40004800

0800154c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001552:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001556:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155a:	2206      	movs	r2, #6
 800155c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001560:	2202      	movs	r2, #2
 8001562:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156c:	2202      	movs	r2, #2
 800156e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	2201      	movs	r2, #1
 8001574:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001584:	2201      	movs	r2, #1
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001590:	f001 fa19 	bl	80029c6 <HAL_PCD_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 fa6d 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000294 	.word	0x20000294

080015a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a66      	ldr	r2, [pc, #408]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b64      	ldr	r3, [pc, #400]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	4b61      	ldr	r3, [pc, #388]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a60      	ldr	r2, [pc, #384]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b5e      	ldr	r3, [pc, #376]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b5b      	ldr	r3, [pc, #364]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a5a      	ldr	r2, [pc, #360]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b58      	ldr	r3, [pc, #352]	; (800175c <MX_GPIO_Init+0x1b4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b55      	ldr	r3, [pc, #340]	; (800175c <MX_GPIO_Init+0x1b4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a54      	ldr	r2, [pc, #336]	; (800175c <MX_GPIO_Init+0x1b4>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b52      	ldr	r3, [pc, #328]	; (800175c <MX_GPIO_Init+0x1b4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	4b4f      	ldr	r3, [pc, #316]	; (800175c <MX_GPIO_Init+0x1b4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a4e      	ldr	r2, [pc, #312]	; (800175c <MX_GPIO_Init+0x1b4>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <MX_GPIO_Init+0x1b4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <MX_GPIO_Init+0x1b4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a48      	ldr	r2, [pc, #288]	; (800175c <MX_GPIO_Init+0x1b4>)
 800163c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <MX_GPIO_Init+0x1b4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f244 0181 	movw	r1, #16513	; 0x4081
 8001654:	4842      	ldr	r0, [pc, #264]	; (8001760 <MX_GPIO_Init+0x1b8>)
 8001656:	f001 f99d 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	4841      	ldr	r0, [pc, #260]	; (8001764 <MX_GPIO_Init+0x1bc>)
 8001660:	f001 f998 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <MX_GPIO_Init+0x1c0>)
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	483c      	ldr	r0, [pc, #240]	; (800176c <MX_GPIO_Init+0x1c4>)
 800167a:	f000 ffdf 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800167e:	2332      	movs	r3, #50	; 0x32
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168e:	230b      	movs	r3, #11
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4834      	ldr	r0, [pc, #208]	; (800176c <MX_GPIO_Init+0x1c4>)
 800169a:	f000 ffcf 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800169e:	2386      	movs	r3, #134	; 0x86
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ae:	230b      	movs	r3, #11
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	482d      	ldr	r0, [pc, #180]	; (8001770 <MX_GPIO_Init+0x1c8>)
 80016ba:	f000 ffbf 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016be:	f244 0381 	movw	r3, #16513	; 0x4081
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4822      	ldr	r0, [pc, #136]	; (8001760 <MX_GPIO_Init+0x1b8>)
 80016d8:	f000 ffb0 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ee:	230b      	movs	r3, #11
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4819      	ldr	r0, [pc, #100]	; (8001760 <MX_GPIO_Init+0x1b8>)
 80016fa:	f000 ff9f 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016fe:	2340      	movs	r3, #64	; 0x40
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4813      	ldr	r0, [pc, #76]	; (8001764 <MX_GPIO_Init+0x1bc>)
 8001716:	f000 ff91 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <MX_GPIO_Init+0x1bc>)
 800172e:	f000 ff85 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001732:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001744:	230b      	movs	r3, #11
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_GPIO_Init+0x1bc>)
 8001750:	f000 ff74 	bl	800263c <HAL_GPIO_Init>

}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	; 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40020400 	.word	0x40020400
 8001764:	40021800 	.word	0x40021800
 8001768:	10110000 	.word	0x10110000
 800176c:	40020800 	.word	0x40020800
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <HAL_UART_TxCpltCallback+0xac>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d147      	bne.n	8001816 <HAL_UART_TxCpltCallback+0xa2>
		uint16_t TxXferCount = huart->TxXferCount;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800178c:	817b      	strh	r3, [r7, #10]
		uint16_t TxXferSize = huart->TxXferSize;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001794:	813b      	strh	r3, [r7, #8]

		if(TxXferSize == 0) {
 8001796:	893b      	ldrh	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_UART_TxCpltCallback+0x3c>
			//printf("HAL_UART_TxCpltCallback count = %d  size = %d \n", count, size);
			HAL_UART_Transmit_IT(huart, (uint8_t *)(tx), toTransfer);
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_UART_TxCpltCallback+0xb0>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4920      	ldr	r1, [pc, #128]	; (8001828 <HAL_UART_TxCpltCallback+0xb4>)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f002 fb49 	bl	8003e40 <HAL_UART_Transmit_IT>
			}

			//printf("USART2 HAL_UART_TxCpltCallback TxXferCount = %d  TxXferSize = %d \n", count, size);
		}
	}
}
 80017ae:	e032      	b.n	8001816 <HAL_UART_TxCpltCallback+0xa2>
		} else if((TxXferSize > 0) && (TxXferCount < TxXferSize)) {
 80017b0:	893b      	ldrh	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d02f      	beq.n	8001816 <HAL_UART_TxCpltCallback+0xa2>
 80017b6:	897a      	ldrh	r2, [r7, #10]
 80017b8:	893b      	ldrh	r3, [r7, #8]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d22b      	bcs.n	8001816 <HAL_UART_TxCpltCallback+0xa2>
			for(int i = 0; i < (TxXferSize - TxXferCount); i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e011      	b.n	80017e8 <HAL_UART_TxCpltCallback+0x74>
				tx1[wasTransferred++] = tx[i];
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_UART_TxCpltCallback+0xb8>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	b2d1      	uxtb	r1, r2
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_UART_TxCpltCallback+0xb8>)
 80017d0:	7011      	strb	r1, [r2, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_UART_TxCpltCallback+0xb4>)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_UART_TxCpltCallback+0xbc>)
 80017e0:	545a      	strb	r2, [r3, r1]
			for(int i = 0; i < (TxXferSize - TxXferCount); i++) {
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	893a      	ldrh	r2, [r7, #8]
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbe7      	blt.n	80017c4 <HAL_UART_TxCpltCallback+0x50>
			if(TxXferCount > 0) {
 80017f4:	897b      	ldrh	r3, [r7, #10]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <HAL_UART_TxCpltCallback+0x9c>
				HAL_UART_Transmit_IT(huart, (uint8_t *)(tx + TxXferSize - TxXferCount), TxXferCount);
 80017fa:	893a      	ldrh	r2, [r7, #8]
 80017fc:	897b      	ldrh	r3, [r7, #10]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_UART_TxCpltCallback+0xb4>)
 8001802:	4413      	add	r3, r2
 8001804:	897a      	ldrh	r2, [r7, #10]
 8001806:	4619      	mov	r1, r3
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f002 fb19 	bl	8003e40 <HAL_UART_Transmit_IT>
}
 800180e:	e002      	b.n	8001816 <HAL_UART_TxCpltCallback+0xa2>
				txCmpl = 1;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_UART_TxCpltCallback+0xc0>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40004400 	.word	0x40004400
 8001824:	200001fa 	.word	0x200001fa
 8001828:	20000700 	.word	0x20000700
 800182c:	200001fb 	.word	0x200001fb
 8001830:	20000734 	.word	0x20000734
 8001834:	200001f8 	.word	0x200001f8

08001838 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2e      	ldr	r2, [pc, #184]	; (8001900 <HAL_UART_RxCpltCallback+0xc8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d156      	bne.n	80018f8 <HAL_UART_RxCpltCallback+0xc0>
		uint16_t RxXferCount = huart->RxXferCount;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001850:	817b      	strh	r3, [r7, #10]
		uint16_t RxXferSize = huart->RxXferSize;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001858:	813b      	strh	r3, [r7, #8]

		//printf("USART2 HAL_UART_RxCpltCallback count = %d size = %d \n", count, size);

		if(RxXferSize == 0) {
 800185a:	893b      	ldrh	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d108      	bne.n	8001872 <HAL_UART_RxCpltCallback+0x3a>
			HAL_UART_Receive_IT(huart, (uint8_t *)(rx), readLen);
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_UART_RxCpltCallback+0xcc>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	4927      	ldr	r1, [pc, #156]	; (8001908 <HAL_UART_RxCpltCallback+0xd0>)
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f002 fb44 	bl	8003ef8 <HAL_UART_Receive_IT>
				rxCmpl = 1;
				HAL_UART_Receive_IT(huart, (uint8_t *)(rx), readLen);
			}
		}
	}
}
 8001870:	e042      	b.n	80018f8 <HAL_UART_RxCpltCallback+0xc0>
		} else if((RxXferSize > 0) && (RxXferCount < RxXferSize)) {
 8001872:	893b      	ldrh	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d03f      	beq.n	80018f8 <HAL_UART_RxCpltCallback+0xc0>
 8001878:	897a      	ldrh	r2, [r7, #10]
 800187a:	893b      	ldrh	r3, [r7, #8]
 800187c:	429a      	cmp	r2, r3
 800187e:	d23b      	bcs.n	80018f8 <HAL_UART_RxCpltCallback+0xc0>
			for(int i = 0; i < (RxXferSize - RxXferCount); i++) {
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e019      	b.n	80018ba <HAL_UART_RxCpltCallback+0x82>
				if(rxPos2 == sizeof(rx1)) {
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_UART_RxCpltCallback+0xd4>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	2b32      	cmp	r3, #50	; 0x32
 800188e:	d102      	bne.n	8001896 <HAL_UART_RxCpltCallback+0x5e>
					rxPos2 = 0;
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_UART_RxCpltCallback+0xd4>)
 8001892:	2200      	movs	r2, #0
 8001894:	801a      	strh	r2, [r3, #0]
				rx1[rxPos2++] = rx[i];
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_UART_RxCpltCallback+0xd4>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	b291      	uxth	r1, r2
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_UART_RxCpltCallback+0xd4>)
 80018a2:	8011      	strh	r1, [r2, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_UART_RxCpltCallback+0xd0>)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_UART_RxCpltCallback+0xd8>)
 80018b2:	545a      	strb	r2, [r3, r1]
			for(int i = 0; i < (RxXferSize - RxXferCount); i++) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	893a      	ldrh	r2, [r7, #8]
 80018bc:	897b      	ldrh	r3, [r7, #10]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbdf      	blt.n	8001886 <HAL_UART_RxCpltCallback+0x4e>
			if(RxXferCount > 0) {
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00a      	beq.n	80018e2 <HAL_UART_RxCpltCallback+0xaa>
				HAL_UART_Receive_IT(huart, (uint8_t *)(rx + RxXferSize - RxXferCount), RxXferCount);
 80018cc:	893a      	ldrh	r2, [r7, #8]
 80018ce:	897b      	ldrh	r3, [r7, #10]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_UART_RxCpltCallback+0xd0>)
 80018d4:	4413      	add	r3, r2
 80018d6:	897a      	ldrh	r2, [r7, #10]
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f002 fb0c 	bl	8003ef8 <HAL_UART_Receive_IT>
}
 80018e0:	e00a      	b.n	80018f8 <HAL_UART_RxCpltCallback+0xc0>
				rxCmpl = 1;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_UART_RxCpltCallback+0xdc>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(huart, (uint8_t *)(rx), readLen);
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_UART_RxCpltCallback+0xcc>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	4905      	ldr	r1, [pc, #20]	; (8001908 <HAL_UART_RxCpltCallback+0xd0>)
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f002 fb00 	bl	8003ef8 <HAL_UART_Receive_IT>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40004400 	.word	0x40004400
 8001904:	200001fc 	.word	0x200001fc
 8001908:	20000698 	.word	0x20000698
 800190c:	200001fe 	.word	0x200001fe
 8001910:	200006cc 	.word	0x200006cc
 8001914:	200001f9 	.word	0x200001f9

08001918 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_UART_ErrorCallback+0x3c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d110      	bne.n	800194c <HAL_UART_ErrorCallback+0x34>
		uint16_t TxXferCount = huart->TxXferCount;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001930:	81fb      	strh	r3, [r7, #14]
		uint16_t TxXferSize = huart->TxXferSize;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001938:	81bb      	strh	r3, [r7, #12]
		printf("> HAL_UART_ErrorCallback USART2\n");
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <HAL_UART_ErrorCallback+0x40>)
 800193c:	f004 fad2 	bl	8005ee4 <puts>
		printf("> TxXferCount = %d TxXferSize = %d\n", TxXferCount, TxXferSize);
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	89ba      	ldrh	r2, [r7, #12]
 8001944:	4619      	mov	r1, r3
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <HAL_UART_ErrorCallback+0x44>)
 8001948:	f004 fa46 	bl	8005dd8 <iprintf>
	}
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40004400 	.word	0x40004400
 8001958:	08009264 	.word	0x08009264
 800195c:	08009284 	.word	0x08009284

08001960 <stateUART>:
void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart) {

	printf("HAL_UART_AbortCpltCallback \n");
}

const char * stateUART(HAL_UART_StateTypeDef State) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

	switch(State) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2be0      	cmp	r3, #224	; 0xe0
 800196c:	d068      	beq.n	8001a40 <stateUART+0xe0>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2be0      	cmp	r3, #224	; 0xe0
 8001972:	d867      	bhi.n	8001a44 <stateUART+0xe4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b24      	cmp	r3, #36	; 0x24
 8001978:	d850      	bhi.n	8001a1c <stateUART+0xbc>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b24      	cmp	r3, #36	; 0x24
 800197e:	d861      	bhi.n	8001a44 <stateUART+0xe4>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <stateUART+0x28>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001a25 	.word	0x08001a25
 800198c:	08001a45 	.word	0x08001a45
 8001990:	08001a45 	.word	0x08001a45
 8001994:	08001a45 	.word	0x08001a45
 8001998:	08001a45 	.word	0x08001a45
 800199c:	08001a45 	.word	0x08001a45
 80019a0:	08001a45 	.word	0x08001a45
 80019a4:	08001a45 	.word	0x08001a45
 80019a8:	08001a45 	.word	0x08001a45
 80019ac:	08001a45 	.word	0x08001a45
 80019b0:	08001a45 	.word	0x08001a45
 80019b4:	08001a45 	.word	0x08001a45
 80019b8:	08001a45 	.word	0x08001a45
 80019bc:	08001a45 	.word	0x08001a45
 80019c0:	08001a45 	.word	0x08001a45
 80019c4:	08001a45 	.word	0x08001a45
 80019c8:	08001a45 	.word	0x08001a45
 80019cc:	08001a45 	.word	0x08001a45
 80019d0:	08001a45 	.word	0x08001a45
 80019d4:	08001a45 	.word	0x08001a45
 80019d8:	08001a45 	.word	0x08001a45
 80019dc:	08001a45 	.word	0x08001a45
 80019e0:	08001a45 	.word	0x08001a45
 80019e4:	08001a45 	.word	0x08001a45
 80019e8:	08001a45 	.word	0x08001a45
 80019ec:	08001a45 	.word	0x08001a45
 80019f0:	08001a45 	.word	0x08001a45
 80019f4:	08001a45 	.word	0x08001a45
 80019f8:	08001a45 	.word	0x08001a45
 80019fc:	08001a45 	.word	0x08001a45
 8001a00:	08001a45 	.word	0x08001a45
 8001a04:	08001a45 	.word	0x08001a45
 8001a08:	08001a29 	.word	0x08001a29
 8001a0c:	08001a31 	.word	0x08001a31
 8001a10:	08001a35 	.word	0x08001a35
 8001a14:	08001a39 	.word	0x08001a39
 8001a18:	08001a2d 	.word	0x08001a2d
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a20:	d00c      	beq.n	8001a3c <stateUART+0xdc>
 8001a22:	e00f      	b.n	8001a44 <stateUART+0xe4>
		case HAL_UART_STATE_RESET:
			return "HAL_UART_STATE_RESET";
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <stateUART+0xf4>)
 8001a26:	e00e      	b.n	8001a46 <stateUART+0xe6>
		case HAL_UART_STATE_READY:
			return "HAL_UART_STATE_READY";
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <stateUART+0xf8>)
 8001a2a:	e00c      	b.n	8001a46 <stateUART+0xe6>
		case HAL_UART_STATE_BUSY:
			return "HAL_UART_STATE_BUSY";
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <stateUART+0xfc>)
 8001a2e:	e00a      	b.n	8001a46 <stateUART+0xe6>
		case HAL_UART_STATE_BUSY_TX:
			return "HAL_UART_STATE_BUSY_TX";
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <stateUART+0x100>)
 8001a32:	e008      	b.n	8001a46 <stateUART+0xe6>
		case HAL_UART_STATE_BUSY_RX:
			return "HAL_UART_STATE_BUSY_RX";
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <stateUART+0x104>)
 8001a36:	e006      	b.n	8001a46 <stateUART+0xe6>
		case HAL_UART_STATE_BUSY_TX_RX:
			return "HAL_UART_STATE_BUSY_TX_RX";
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <stateUART+0x108>)
 8001a3a:	e004      	b.n	8001a46 <stateUART+0xe6>
		case HAL_UART_STATE_TIMEOUT:
			return "HAL_UART_STATE_TIMEOUT";
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <stateUART+0x10c>)
 8001a3e:	e002      	b.n	8001a46 <stateUART+0xe6>
		case HAL_UART_STATE_ERROR:
			return "HAL_UART_STATE_ERROR";
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <stateUART+0x110>)
 8001a42:	e000      	b.n	8001a46 <stateUART+0xe6>
		default:
			return "????";
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <stateUART+0x114>)
	}
	return "???";
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	0800930c 	.word	0x0800930c
 8001a58:	08009324 	.word	0x08009324
 8001a5c:	0800933c 	.word	0x0800933c
 8001a60:	08009350 	.word	0x08009350
 8001a64:	08009368 	.word	0x08009368
 8001a68:	08009380 	.word	0x08009380
 8001a6c:	0800939c 	.word	0x0800939c
 8001a70:	080093b4 	.word	0x080093b4
 8001a74:	080093cc 	.word	0x080093cc

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <Error_Handler+0x8>
	...

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_MspInit+0x44>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_MspInit+0x44>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_MspInit+0x44>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_CAN_MspInit+0x7c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d127      	bne.n	8001b3e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_CAN_MspInit+0x80>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HAL_CAN_MspInit+0x80>)
 8001af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_CAN_MspInit+0x80>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_CAN_MspInit+0x80>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <HAL_CAN_MspInit+0x80>)
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_CAN_MspInit+0x80>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b2e:	2309      	movs	r3, #9
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_CAN_MspInit+0x84>)
 8001b3a:	f000 fd7f 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40006400 	.word	0x40006400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020c00 	.word	0x40020c00

08001b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a40      	ldr	r2, [pc, #256]	; (8001c74 <HAL_UART_MspInit+0x120>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d14c      	bne.n	8001c10 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a3f      	ldr	r2, [pc, #252]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a39      	ldr	r2, [pc, #228]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a33      	ldr	r2, [pc, #204]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bce:	2307      	movs	r3, #7
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4828      	ldr	r0, [pc, #160]	; (8001c7c <HAL_UART_MspInit+0x128>)
 8001bda:	f000 fd2f 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bde:	2320      	movs	r3, #32
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4821      	ldr	r0, [pc, #132]	; (8001c80 <HAL_UART_MspInit+0x12c>)
 8001bfa:	f000 fd1f 	bl	800263c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2026      	movs	r0, #38	; 0x26
 8001c04:	f000 fc51 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c08:	2026      	movs	r0, #38	; 0x26
 8001c0a:	f000 fc6a 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c0e:	e02d      	b.n	8001c6c <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_UART_MspInit+0x130>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d128      	bne.n	8001c6c <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_UART_MspInit+0x124>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <HAL_UART_MspInit+0x12c>)
 8001c68:	f000 fce8 	bl	800263c <HAL_GPIO_Init>
}
 8001c6c:	bf00      	nop
 8001c6e:	3730      	adds	r7, #48	; 0x30
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40004400 	.word	0x40004400
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	40004800 	.word	0x40004800

08001c88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca8:	d141      	bne.n	8001d2e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a22      	ldr	r2, [pc, #136]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cc2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4817      	ldr	r0, [pc, #92]	; (8001d3c <HAL_PCD_MspInit+0xb4>)
 8001ce0:	f000 fcac 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4810      	ldr	r0, [pc, #64]	; (8001d3c <HAL_PCD_MspInit+0xb4>)
 8001cfa:	f000 fc9f 	bl	800263c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d02:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d08:	6353      	str	r3, [r2, #52]	; 0x34
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_PCD_MspInit+0xb0>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 f972 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USART2_IRQHandler+0x10>)
 8001d9a:	f002 f8eb 	bl	8003f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000768 	.word	0x20000768

08001da8 <ITM_SendChar>:
#define ITM_TER         	*((volatile uint32_t*) 0xE0000E00 )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TCR            	*((volatile uint32_t*) 0xE0000E80 )

void ITM_SendChar(uint8_t ch)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
    /* Stimulus Port #N is enabled when bit STIMENA[N] is set*/
	ITM_TER |= ( 1 << 0);
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <ITM_SendChar+0x48>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <ITM_SendChar+0x48>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]

	/*Enable ITM. This is the master enable and must be set to allow
	writes to all ITM registers, including the control register. */
	ITM_TCR |= ( 1 << 0);
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <ITM_SendChar+0x4c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a0c      	ldr	r2, [pc, #48]	; (8001df4 <ITM_SendChar+0x4c>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001dca:	bf00      	nop
 8001dcc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f8      	beq.n	8001dcc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001dda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	6013      	str	r3, [r2, #0]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e0000e00 	.word	0xe0000e00
 8001df4:	e0000e80 	.word	0xe0000e80

08001df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
	return 1;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_kill>:

int _kill(int pid, int sig)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e12:	f003 fb45 	bl	80054a0 <__errno>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2216      	movs	r2, #22
 8001e1a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_exit>:

void _exit (int status)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ffe7 	bl	8001e08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e3a:	e7fe      	b.n	8001e3a <_exit+0x12>

08001e3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	e00a      	b.n	8001e64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e4e:	f3af 8000 	nop.w
 8001e52:	4601      	mov	r1, r0
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	60ba      	str	r2, [r7, #8]
 8001e5a:	b2ca      	uxtb	r2, r1
 8001e5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dbf0      	blt.n	8001e4e <_read+0x12>
	}

return len;
 8001e6c:	687b      	ldr	r3, [r7, #4]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e009      	b.n	8001e9c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	60ba      	str	r2, [r7, #8]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff89 	bl	8001da8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dbf1      	blt.n	8001e88 <_write+0x12>
	}
	return len;
 8001ea4:	687b      	ldr	r3, [r7, #4]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_close>:

int _close(int file)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
	return -1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_isatty>:

int _isatty(int file)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
	return 1;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	return 0;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <_sbrk+0x5c>)
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <_sbrk+0x60>)
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <_sbrk+0x64>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <_sbrk+0x68>)
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d207      	bcs.n	8001f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f48:	f003 faaa 	bl	80054a0 <__errno>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	220c      	movs	r2, #12
 8001f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e009      	b.n	8001f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <_sbrk+0x64>)
 8001f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20050000 	.word	0x20050000
 8001f78:	00000400 	.word	0x00000400
 8001f7c:	20000204 	.word	0x20000204
 8001f80:	20000828 	.word	0x20000828

08001f84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <SystemInit+0x20>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <SystemInit+0x20>)
 8001f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fae:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc4:	4c0b      	ldr	r4, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd2:	f7ff ffd7 	bl	8001f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f003 fa69 	bl	80054ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7ff f927 	bl	800122c <main>
  bx  lr    
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fe0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fec:	080099dc 	.word	0x080099dc
  ldr r2, =_sbss
 8001ff0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ff4:	20000828 	.word	0x20000828

08001ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>

08001ffa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffe:	2003      	movs	r0, #3
 8002000:	f000 fa48 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002004:	2000      	movs	r0, #0
 8002006:	f000 f805 	bl	8002014 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800200a:	f7ff fd3b 	bl	8001a84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x54>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	fbb3 f3f1 	udiv	r3, r3, r1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fa63 	bl	80024fe <HAL_SYSTICK_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00e      	b.n	8002060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0f      	cmp	r3, #15
 8002046:	d80a      	bhi.n	800205e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002048:	2200      	movs	r2, #0
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f000 fa2b 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_InitTick+0x5c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000000 	.word	0x20000000
 800206c:	20000008 	.word	0x20000008
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x20>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x24>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_IncTick+0x24>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008
 8002098:	20000814 	.word	0x20000814

0800209c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_GetTick+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000814 	.word	0x20000814

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff ffee 	bl	800209c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_Delay+0x44>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffde 	bl	800209c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000008 	.word	0x20000008

080020fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0ed      	b.n	80022ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fcd6 	bl	8001acc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0202 	bic.w	r2, r2, #2
 800212e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002130:	f7ff ffb4 	bl	800209c <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002136:	e012      	b.n	800215e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002138:	f7ff ffb0 	bl	800209c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b0a      	cmp	r3, #10
 8002144:	d90b      	bls.n	800215e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2205      	movs	r2, #5
 8002156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0c5      	b.n	80022ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e5      	bne.n	8002138 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800217c:	f7ff ff8e 	bl	800209c <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002182:	e012      	b.n	80021aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002184:	f7ff ff8a 	bl	800209c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b0a      	cmp	r3, #10
 8002190:	d90b      	bls.n	80021aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2205      	movs	r2, #5
 80021a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e09f      	b.n	80022ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0e5      	beq.n	8002184 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7e1b      	ldrb	r3, [r3, #24]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d108      	bne.n	80021d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e007      	b.n	80021e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7e5b      	ldrb	r3, [r3, #25]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d108      	bne.n	80021fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e007      	b.n	800220c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7e9b      	ldrb	r3, [r3, #26]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d108      	bne.n	8002226 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0220 	orr.w	r2, r2, #32
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e007      	b.n	8002236 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0220 	bic.w	r2, r2, #32
 8002234:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7edb      	ldrb	r3, [r3, #27]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d108      	bne.n	8002250 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0210 	bic.w	r2, r2, #16
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e007      	b.n	8002260 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0210 	orr.w	r2, r2, #16
 800225e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7f1b      	ldrb	r3, [r3, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d108      	bne.n	800227a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0208 	orr.w	r2, r2, #8
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e007      	b.n	800228a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0208 	bic.w	r2, r2, #8
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7f5b      	ldrb	r3, [r3, #29]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d108      	bne.n	80022a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0204 	orr.w	r2, r2, #4
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e007      	b.n	80022b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0204 	bic.w	r2, r2, #4
 80022b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	ea42 0103 	orr.w	r1, r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	1e5a      	subs	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	; (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00
 8002338:	05fa0000 	.word	0x05fa0000

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff fdba 	bl	800209c <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d008      	beq.n	8002548 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e052      	b.n	80025ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0216 	bic.w	r2, r2, #22
 8002556:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002566:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <HAL_DMA_Abort+0x62>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0208 	bic.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002598:	e013      	b.n	80025c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800259a:	f7ff fd7f 	bl	800209c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d90c      	bls.n	80025c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e015      	b.n	80025ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e4      	bne.n	800259a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	223f      	movs	r2, #63	; 0x3f
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d004      	beq.n	8002614 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e00c      	b.n	800262e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2205      	movs	r2, #5
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e175      	b.n	8002948 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	f040 8164 	bne.w	8002942 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d00b      	beq.n	800269a <HAL_GPIO_Init+0x5e>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800268e:	2b11      	cmp	r3, #17
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b12      	cmp	r3, #18
 8002698:	d130      	bne.n	80026fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 0201 	and.w	r2, r3, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x100>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b12      	cmp	r3, #18
 800273a:	d123      	bne.n	8002784 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	220f      	movs	r2, #15
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	69b9      	ldr	r1, [r7, #24]
 8002780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0203 	and.w	r2, r3, #3
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80be 	beq.w	8002942 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c6:	4b66      	ldr	r3, [pc, #408]	; (8002960 <HAL_GPIO_Init+0x324>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_GPIO_Init+0x324>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_GPIO_Init+0x324>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027de:	4a61      	ldr	r2, [pc, #388]	; (8002964 <HAL_GPIO_Init+0x328>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_GPIO_Init+0x32c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d037      	beq.n	800287a <HAL_GPIO_Init+0x23e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a57      	ldr	r2, [pc, #348]	; (800296c <HAL_GPIO_Init+0x330>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d031      	beq.n	8002876 <HAL_GPIO_Init+0x23a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a56      	ldr	r2, [pc, #344]	; (8002970 <HAL_GPIO_Init+0x334>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d02b      	beq.n	8002872 <HAL_GPIO_Init+0x236>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a55      	ldr	r2, [pc, #340]	; (8002974 <HAL_GPIO_Init+0x338>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d025      	beq.n	800286e <HAL_GPIO_Init+0x232>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a54      	ldr	r2, [pc, #336]	; (8002978 <HAL_GPIO_Init+0x33c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01f      	beq.n	800286a <HAL_GPIO_Init+0x22e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a53      	ldr	r2, [pc, #332]	; (800297c <HAL_GPIO_Init+0x340>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x22a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_GPIO_Init+0x344>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x226>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a51      	ldr	r2, [pc, #324]	; (8002984 <HAL_GPIO_Init+0x348>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x222>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a50      	ldr	r2, [pc, #320]	; (8002988 <HAL_GPIO_Init+0x34c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x21e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4f      	ldr	r2, [pc, #316]	; (800298c <HAL_GPIO_Init+0x350>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x21a>
 8002852:	2309      	movs	r3, #9
 8002854:	e012      	b.n	800287c <HAL_GPIO_Init+0x240>
 8002856:	230a      	movs	r3, #10
 8002858:	e010      	b.n	800287c <HAL_GPIO_Init+0x240>
 800285a:	2308      	movs	r3, #8
 800285c:	e00e      	b.n	800287c <HAL_GPIO_Init+0x240>
 800285e:	2307      	movs	r3, #7
 8002860:	e00c      	b.n	800287c <HAL_GPIO_Init+0x240>
 8002862:	2306      	movs	r3, #6
 8002864:	e00a      	b.n	800287c <HAL_GPIO_Init+0x240>
 8002866:	2305      	movs	r3, #5
 8002868:	e008      	b.n	800287c <HAL_GPIO_Init+0x240>
 800286a:	2304      	movs	r3, #4
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x240>
 800286e:	2303      	movs	r3, #3
 8002870:	e004      	b.n	800287c <HAL_GPIO_Init+0x240>
 8002872:	2302      	movs	r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x240>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x240>
 800287a:	2300      	movs	r3, #0
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f002 0203 	and.w	r2, r2, #3
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4093      	lsls	r3, r2
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800288c:	4935      	ldr	r1, [pc, #212]	; (8002964 <HAL_GPIO_Init+0x328>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289a:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <HAL_GPIO_Init+0x354>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <HAL_GPIO_Init+0x354>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <HAL_GPIO_Init+0x354>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e8:	4a29      	ldr	r2, [pc, #164]	; (8002990 <HAL_GPIO_Init+0x354>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ee:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_GPIO_Init+0x354>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_GPIO_Init+0x354>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_GPIO_Init+0x354>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <HAL_GPIO_Init+0x354>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	f67f ae86 	bls.w	800265c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40013800 	.word	0x40013800
 8002968:	40020000 	.word	0x40020000
 800296c:	40020400 	.word	0x40020400
 8002970:	40020800 	.word	0x40020800
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40021400 	.word	0x40021400
 8002980:	40021800 	.word	0x40021800
 8002984:	40021c00 	.word	0x40021c00
 8002988:	40022000 	.word	0x40022000
 800298c:	40022400 	.word	0x40022400
 8002990:	40013c00 	.word	0x40013c00

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029b0:	e003      	b.n	80029ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	041a      	lsls	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	619a      	str	r2, [r3, #24]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c8:	b08f      	sub	sp, #60	; 0x3c
 80029ca:	af0a      	add	r7, sp, #40	; 0x28
 80029cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e116      	b.n	8002c06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff f948 	bl	8001c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2203      	movs	r2, #3
 80029fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fae2 	bl	8004fe0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	687e      	ldr	r6, [r7, #4]
 8002a24:	466d      	mov	r5, sp
 8002a26:	f106 0410 	add.w	r4, r6, #16
 8002a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a3a:	1d33      	adds	r3, r6, #4
 8002a3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f002 fa76 	bl	8004f30 <USB_CoreInit>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0d7      	b.n	8002c06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fad0 	bl	8005002 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e04a      	b.n	8002afe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	333d      	adds	r3, #61	; 0x3d
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	333c      	adds	r3, #60	; 0x3c
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	b298      	uxth	r0, r3
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3342      	adds	r3, #66	; 0x42
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	333f      	adds	r3, #63	; 0x3f
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3344      	adds	r3, #68	; 0x44
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3348      	adds	r3, #72	; 0x48
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3350      	adds	r3, #80	; 0x50
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	3301      	adds	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d3af      	bcc.n	8002a68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e044      	b.n	8002b98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	3301      	adds	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3b5      	bcc.n	8002b0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	687e      	ldr	r6, [r7, #4]
 8002baa:	466d      	mov	r5, sp
 8002bac:	f106 0410 	add.w	r4, r6, #16
 8002bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc0:	1d33      	adds	r3, r6, #4
 8002bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc4:	6838      	ldr	r0, [r7, #0]
 8002bc6:	f002 fa47 	bl	8005058 <USB_DevInit>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e014      	b.n	8002c06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f80b 	bl	8002c10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 fbf9 	bl	80053f6 <USB_DevDisconnect>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	10000003 	.word	0x10000003

08002c58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40007000 	.word	0x40007000

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e291      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9c:	4b96      	ldr	r3, [pc, #600]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca8:	4b93      	ldr	r3, [pc, #588]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d112      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
 8002cb4:	4b90      	ldr	r3, [pc, #576]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d06c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x130>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d168      	bne.n	8002da8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e26b      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x7a>
 8002ce4:	4b84      	ldr	r3, [pc, #528]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a83      	ldr	r2, [pc, #524]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x9c>
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b7c      	ldr	r3, [pc, #496]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7b      	ldr	r2, [pc, #492]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0xc0>
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xd8>
 8002d38:	4b6f      	ldr	r3, [pc, #444]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6b      	ldr	r2, [pc, #428]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff f9a0 	bl	800209c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7ff f99c 	bl	800209c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e21f      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe8>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7ff f98c 	bl	800209c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7ff f988 	bl	800209c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e20b      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x110>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d069      	beq.n	8002e8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db6:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b4d      	ldr	r3, [pc, #308]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x190>
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1df      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	493d      	ldr	r1, [pc, #244]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e040      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a38      	ldr	r2, [pc, #224]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f93e 	bl	800209c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7ff f93a 	bl	800209c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1bd      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4929      	ldr	r1, [pc, #164]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
 8002e56:	e018      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7ff f91a 	bl	800209c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7ff f916 	bl	800209c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e199      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d038      	beq.n	8002f08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d019      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7ff f8f7 	bl	800209c <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7ff f8f3 	bl	800209c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e176      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x23a>
 8002ed0:	e01a      	b.n	8002f08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7ff f8dd 	bl	800209c <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7ff f8d9 	bl	800209c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d903      	bls.n	8002efc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e15c      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
 8002ef8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b91      	ldr	r3, [pc, #580]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a4 	beq.w	800305e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b88      	ldr	r3, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a87      	ldr	r2, [pc, #540]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b85      	ldr	r3, [pc, #532]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3e:	4b82      	ldr	r3, [pc, #520]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7e      	ldr	r2, [pc, #504]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7ff f8a1 	bl	800209c <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7ff f89d 	bl	800209c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e120      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f70:	4b75      	ldr	r3, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x31a>
 8002f84:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a6e      	ldr	r2, [pc, #440]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	e02d      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x33c>
 8002f9a:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a69      	ldr	r2, [pc, #420]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b67      	ldr	r3, [pc, #412]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a66      	ldr	r2, [pc, #408]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e01c      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x35e>
 8002fbc:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a60      	ldr	r2, [pc, #384]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a5d      	ldr	r2, [pc, #372]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	e00b      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a5a      	ldr	r2, [pc, #360]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe2:	4b58      	ldr	r3, [pc, #352]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a57      	ldr	r2, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7ff f851 	bl	800209c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7ff f84d 	bl	800209c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0ce      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCC_OscConfig+0x386>
 8003020:	e014      	b.n	800304c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7ff f83b 	bl	800209c <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7ff f837 	bl	800209c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0b8      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003040:	4b40      	ldr	r3, [pc, #256]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80a4 	beq.w	80031b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d06b      	beq.n	800314c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d149      	bne.n	8003110 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7ff f808 	bl	800209c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7ff f804 	bl	800209c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e087      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4313      	orrs	r3, r2
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe ffd8 	bl	800209c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe ffd4 	bl	800209c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e057      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x478>
 800310e:	e04f      	b.n	80031b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe ffbe 	bl	800209c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe ffba 	bl	800209c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e03d      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_OscConfig+0x4cc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x4ac>
 8003142:	e035      	b.n	80031b0 <HAL_RCC_OscConfig+0x538>
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x544>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d028      	beq.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d121      	bne.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11a      	bne.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003182:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003184:	4293      	cmp	r3, r2
 8003186:	d111      	bne.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0d0      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d910      	bls.n	8003208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b67      	ldr	r3, [pc, #412]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 020f 	bic.w	r2, r3, #15
 80031ee:	4965      	ldr	r1, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0b8      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	494d      	ldr	r1, [pc, #308]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d040      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d115      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e073      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06b      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4936      	ldr	r1, [pc, #216]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b4:	f7fe fef2 	bl	800209c <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fe feee 	bl	800209c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e053      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 020c 	and.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1eb      	bne.n	80032bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d210      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 020f 	bic.w	r2, r3, #15
 80032fa:	4922      	ldr	r1, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e032      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003352:	f000 f821 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003356:	4602      	mov	r2, r0
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	490a      	ldr	r1, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1cc>)
 8003364:	5ccb      	ldrb	r3, [r1, r3]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1d0>)
 800336c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1d4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fe4e 	bl	8002014 <HAL_InitTick>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00
 8003388:	40023800 	.word	0x40023800
 800338c:	080095d4 	.word	0x080095d4
 8003390:	20000000 	.word	0x20000000
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	2300      	movs	r3, #0
 80033aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b0:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d00d      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x40>
 80033bc:	2b08      	cmp	r3, #8
 80033be:	f200 80bd 	bhi.w	800353c <HAL_RCC_GetSysClockFreq+0x1a4>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x34>
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ca:	e0b7      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ce:	60bb      	str	r3, [r7, #8]
      break;
 80033d0:	e0b7      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d2:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80033d4:	60bb      	str	r3, [r7, #8]
      break;
 80033d6:	e0b4      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d8:	4b5d      	ldr	r3, [pc, #372]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033e2:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d04d      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	461a      	mov	r2, r3
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	ea02 0800 	and.w	r8, r2, r0
 8003406:	ea03 0901 	and.w	r9, r3, r1
 800340a:	4640      	mov	r0, r8
 800340c:	4649      	mov	r1, r9
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	014b      	lsls	r3, r1, #5
 8003418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800341c:	0142      	lsls	r2, r0, #5
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	ebb0 0008 	subs.w	r0, r0, r8
 8003426:	eb61 0109 	sbc.w	r1, r1, r9
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	018b      	lsls	r3, r1, #6
 8003434:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003438:	0182      	lsls	r2, r0, #6
 800343a:	1a12      	subs	r2, r2, r0
 800343c:	eb63 0301 	sbc.w	r3, r3, r1
 8003440:	f04f 0000 	mov.w	r0, #0
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	00d9      	lsls	r1, r3, #3
 800344a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800344e:	00d0      	lsls	r0, r2, #3
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	eb12 0208 	adds.w	r2, r2, r8
 8003458:	eb43 0309 	adc.w	r3, r3, r9
 800345c:	f04f 0000 	mov.w	r0, #0
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	0259      	lsls	r1, r3, #9
 8003466:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800346a:	0250      	lsls	r0, r2, #9
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	461a      	mov	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd fbb4 	bl	8000be8 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4613      	mov	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e04a      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348a:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	461a      	mov	r2, r3
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	f240 10ff 	movw	r0, #511	; 0x1ff
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	ea02 0400 	and.w	r4, r2, r0
 80034a2:	ea03 0501 	and.w	r5, r3, r1
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	014b      	lsls	r3, r1, #5
 80034b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034b8:	0142      	lsls	r2, r0, #5
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	1b00      	subs	r0, r0, r4
 80034c0:	eb61 0105 	sbc.w	r1, r1, r5
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	018b      	lsls	r3, r1, #6
 80034ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034d2:	0182      	lsls	r2, r0, #6
 80034d4:	1a12      	subs	r2, r2, r0
 80034d6:	eb63 0301 	sbc.w	r3, r3, r1
 80034da:	f04f 0000 	mov.w	r0, #0
 80034de:	f04f 0100 	mov.w	r1, #0
 80034e2:	00d9      	lsls	r1, r3, #3
 80034e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034e8:	00d0      	lsls	r0, r2, #3
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	1912      	adds	r2, r2, r4
 80034f0:	eb45 0303 	adc.w	r3, r5, r3
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	0299      	lsls	r1, r3, #10
 80034fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003502:	0290      	lsls	r0, r2, #10
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	461a      	mov	r2, r3
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	f7fd fb68 	bl	8000be8 <__aeabi_uldivmod>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4613      	mov	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	3301      	adds	r3, #1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	60bb      	str	r3, [r7, #8]
      break;
 800353a:	e002      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800353e:	60bb      	str	r3, [r7, #8]
      break;
 8003540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003542:	68bb      	ldr	r3, [r7, #8]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	00f42400 	.word	0x00f42400
 8003558:	007a1200 	.word	0x007a1200

0800355c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_RCC_GetHCLKFreq+0x14>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000000 	.word	0x20000000

08003574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003578:	f7ff fff0 	bl	800355c <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0a9b      	lsrs	r3, r3, #10
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4903      	ldr	r1, [pc, #12]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	080095e4 	.word	0x080095e4

0800359c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a0:	f7ff ffdc 	bl	800355c <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	0b5b      	lsrs	r3, r3, #13
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	; (80035c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	080095e4 	.word	0x080095e4

080035c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d012      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035ec:	4b69      	ldr	r3, [pc, #420]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a68      	ldr	r2, [pc, #416]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035f6:	6093      	str	r3, [r2, #8]
 80035f8:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	4964      	ldr	r1, [pc, #400]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800360e:	2301      	movs	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d017      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	4959      	ldr	r1, [pc, #356]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363c:	d101      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800364a:	2301      	movs	r3, #1
 800364c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d017      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800365a:	4b4e      	ldr	r3, [pc, #312]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003660:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	494a      	ldr	r1, [pc, #296]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003678:	d101      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800367a:	2301      	movs	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003686:	2301      	movs	r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003696:	2301      	movs	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 808b 	beq.w	80037be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036a8:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	4a39      	ldr	r2, [pc, #228]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6413      	str	r3, [r2, #64]	; 0x40
 80036b4:	4b37      	ldr	r3, [pc, #220]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036c0:	4b35      	ldr	r3, [pc, #212]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a34      	ldr	r2, [pc, #208]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036cc:	f7fe fce6 	bl	800209c <HAL_GetTick>
 80036d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fe fce2 	bl	800209c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e357      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036e6:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d035      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	429a      	cmp	r2, r3
 800370e:	d02e      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003718:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003730:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003732:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003738:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d114      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fcaa 	bl	800209c <HAL_GetTick>
 8003748:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	e00a      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374c:	f7fe fca6 	bl	800209c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e319      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0ee      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377a:	d111      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800378a:	400b      	ands	r3, r1
 800378c:	4901      	ldr	r1, [pc, #4]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
 8003792:	e00b      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003794:	40023800 	.word	0x40023800
 8003798:	40007000 	.word	0x40007000
 800379c:	0ffffcff 	.word	0x0ffffcff
 80037a0:	4bb1      	ldr	r3, [pc, #708]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4ab0      	ldr	r2, [pc, #704]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037aa:	6093      	str	r3, [r2, #8]
 80037ac:	4bae      	ldr	r3, [pc, #696]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	49ab      	ldr	r1, [pc, #684]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037ca:	4ba7      	ldr	r3, [pc, #668]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d0:	4aa5      	ldr	r2, [pc, #660]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037da:	4ba3      	ldr	r3, [pc, #652]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	49a0      	ldr	r1, [pc, #640]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f8:	4b9b      	ldr	r3, [pc, #620]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003806:	4998      	ldr	r1, [pc, #608]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800381a:	4b93      	ldr	r3, [pc, #588]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003828:	498f      	ldr	r1, [pc, #572]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800383c:	4b8a      	ldr	r3, [pc, #552]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384a:	4987      	ldr	r1, [pc, #540]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800385e:	4b82      	ldr	r3, [pc, #520]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003864:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	497e      	ldr	r1, [pc, #504]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003880:	4b79      	ldr	r3, [pc, #484]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	4976      	ldr	r1, [pc, #472]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a2:	4b71      	ldr	r3, [pc, #452]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f023 020c 	bic.w	r2, r3, #12
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	496d      	ldr	r1, [pc, #436]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038c4:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	4965      	ldr	r1, [pc, #404]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038e6:	4b60      	ldr	r3, [pc, #384]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	495c      	ldr	r1, [pc, #368]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003908:	4b57      	ldr	r3, [pc, #348]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	4954      	ldr	r1, [pc, #336]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800392a:	4b4f      	ldr	r3, [pc, #316]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	494b      	ldr	r1, [pc, #300]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800394c:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	4943      	ldr	r1, [pc, #268]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	493a      	ldr	r1, [pc, #232]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003990:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800399e:	4932      	ldr	r1, [pc, #200]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d011      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039b2:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c0:	4929      	ldr	r1, [pc, #164]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d0:	d101      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039e2:	2301      	movs	r3, #1
 80039e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a00:	4919      	ldr	r1, [pc, #100]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a24:	4910      	ldr	r1, [pc, #64]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d006      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80d9 	beq.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fe fb26 	bl	800209c <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a52:	e00b      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a54:	f7fe fb22 	bl	800209c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d904      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e197      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a6c:	4b6c      	ldr	r3, [pc, #432]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ed      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d021      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d11d      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a8c:	4b64      	ldr	r3, [pc, #400]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a9a:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	019a      	lsls	r2, r3, #6
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	061b      	lsls	r3, r3, #24
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	071b      	lsls	r3, r3, #28
 8003ac0:	4957      	ldr	r1, [pc, #348]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d02e      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af2:	d129      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003af4:	4b4a      	ldr	r3, [pc, #296]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	0f1b      	lsrs	r3, r3, #28
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	019a      	lsls	r2, r3, #6
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	431a      	orrs	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	071b      	lsls	r3, r3, #28
 8003b28:	493d      	ldr	r1, [pc, #244]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b30:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b36:	f023 021f 	bic.w	r2, r3, #31
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	4937      	ldr	r1, [pc, #220]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01d      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b54:	4b32      	ldr	r3, [pc, #200]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5a:	0e1b      	lsrs	r3, r3, #24
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b62:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b68:	0f1b      	lsrs	r3, r3, #28
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	019a      	lsls	r2, r3, #6
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	071b      	lsls	r3, r3, #28
 8003b88:	4925      	ldr	r1, [pc, #148]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d011      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	019a      	lsls	r2, r3, #6
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	061b      	lsls	r3, r3, #24
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	071b      	lsls	r3, r3, #28
 8003bb8:	4919      	ldr	r1, [pc, #100]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fa66 	bl	800209c <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bd4:	f7fe fa62 	bl	800209c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0d7      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003be6:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f040 80cd 	bne.w	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c06:	f7fe fa49 	bl	800209c <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c0e:	f7fe fa45 	bl	800209c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b64      	cmp	r3, #100	; 0x64
 8003c1a:	d903      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0ba      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c24:	4b5e      	ldr	r3, [pc, #376]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d0ed      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02e      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d12a      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c5a:	4b51      	ldr	r3, [pc, #324]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c68:	4b4d      	ldr	r3, [pc, #308]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	0f1b      	lsrs	r3, r3, #28
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	019a      	lsls	r2, r3, #6
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	071b      	lsls	r3, r3, #28
 8003c8e:	4944      	ldr	r1, [pc, #272]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c96:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	493d      	ldr	r1, [pc, #244]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d022      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc4:	d11d      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cc6:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	0e1b      	lsrs	r3, r3, #24
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cd4:	4b32      	ldr	r3, [pc, #200]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	0f1b      	lsrs	r3, r3, #28
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	019a      	lsls	r2, r3, #6
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	061b      	lsls	r3, r3, #24
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	071b      	lsls	r3, r3, #28
 8003cfa:	4929      	ldr	r1, [pc, #164]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d028      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	0e1b      	lsrs	r3, r3, #24
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	019a      	lsls	r2, r3, #6
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	041b      	lsls	r3, r3, #16
 8003d34:	431a      	orrs	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	071b      	lsls	r3, r3, #28
 8003d42:	4917      	ldr	r1, [pc, #92]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	4911      	ldr	r1, [pc, #68]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fe f996 	bl	800209c <HAL_GetTick>
 8003d70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d74:	f7fe f992 	bl	800209c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e007      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d92:	d1ef      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e040      	b.n	8003e38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd fec4 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fabe 	bl	8004364 <UART_SetConfig>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e022      	b.n	8003e38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fd14 	bl	8004828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fd9b 	bl	800496c <UART_CheckIdleState>
 8003e36:	4603      	mov	r3, r0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d145      	bne.n	8003ee2 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_UART_Transmit_IT+0x22>
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e03e      	b.n	8003ee4 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Transmit_IT+0x34>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e037      	b.n	8003ee4 <HAL_UART_Transmit_IT+0xa4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	; 0x21
 8003ea4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d107      	bne.n	8003ec0 <HAL_UART_Transmit_IT+0x80>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a0d      	ldr	r2, [pc, #52]	; (8003ef0 <HAL_UART_Transmit_IT+0xb0>)
 8003ebc:	669a      	str	r2, [r3, #104]	; 0x68
 8003ebe:	e002      	b.n	8003ec6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_UART_Transmit_IT+0xb4>)
 8003ec4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003edc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	08004cd9 	.word	0x08004cd9
 8003ef4:	08004c67 	.word	0x08004c67

08003ef8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d12c      	bne.n	8003f68 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UART_Receive_IT+0x22>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e025      	b.n	8003f6a <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Receive_IT+0x34>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e01e      	b.n	8003f6a <HAL_UART_Receive_IT+0x72>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f56:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fdb4 	bl	8004acc <UART_Start_Receive_IT>
 8003f64:	4603      	mov	r3, r0
 8003f66:	e000      	b.n	8003f6a <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d113      	bne.n	8003fcc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00e      	beq.n	8003fcc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 81b9 	beq.w	8004334 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
      }
      return;
 8003fca:	e1b3      	b.n	8004334 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80e3 	beq.w	800419a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4ba5      	ldr	r3, [pc, #660]	; (8004278 <HAL_UART_IRQHandler+0x304>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80d8 	beq.w	800419a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_UART_IRQHandler+0xa2>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2201      	movs	r2, #1
 8004004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400c:	f043 0201 	orr.w	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d010      	beq.n	8004042 <HAL_UART_IRQHandler+0xce>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2202      	movs	r2, #2
 8004030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004038:	f043 0204 	orr.w	r2, r3, #4
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d010      	beq.n	800406e <HAL_UART_IRQHandler+0xfa>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2204      	movs	r2, #4
 800405c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004064:	f043 0202 	orr.w	r2, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00b      	beq.n	80040a4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2208      	movs	r2, #8
 8004092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409a:	f043 0208 	orr.w	r2, r3, #8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_UART_IRQHandler+0x15e>
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 812d 	beq.w	8004338 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00c      	beq.n	8004102 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004108:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d004      	beq.n	8004122 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800411e:	2b00      	cmp	r3, #0
 8004120:	d031      	beq.n	8004186 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fd5a 	bl	8004bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d123      	bne.n	800417e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004144:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	2b00      	cmp	r3, #0
 800414c:	d013      	beq.n	8004176 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a4a      	ldr	r2, [pc, #296]	; (800427c <HAL_UART_IRQHandler+0x308>)
 8004154:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fa4b 	bl	80025f6 <HAL_DMA_Abort_IT>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d017      	beq.n	8004196 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004170:	4610      	mov	r0, r2
 8004172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e00f      	b.n	8004196 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd fbce 	bl	8001918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00b      	b.n	8004196 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd fbca 	bl	8001918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e007      	b.n	8004196 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fbc6 	bl	8001918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004194:	e0d0      	b.n	8004338 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004196:	bf00      	nop
    return;
 8004198:	e0ce      	b.n	8004338 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419e:	2b01      	cmp	r3, #1
 80041a0:	f040 80a7 	bne.w	80042f2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80a1 	beq.w	80042f2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 809b 	beq.w	80042f2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2210      	movs	r2, #16
 80041c2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d156      	bne.n	8004280 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80ac 	beq.w	800433c <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041ea:	893a      	ldrh	r2, [r7, #8]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	f080 80a5 	bcs.w	800433c <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	893a      	ldrh	r2, [r7, #8]
 80041f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d02a      	beq.n	800425c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004214:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004234:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0210 	bic.w	r2, r2, #16
 8004250:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe f95d 	bl	8002516 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004268:	b29b      	uxth	r3, r3
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	b29b      	uxth	r3, r3
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f86b 	bl	800434c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004276:	e061      	b.n	800433c <HAL_UART_IRQHandler+0x3c8>
 8004278:	04000120 	.word	0x04000120
 800427c:	08004c3b 	.word	0x08004c3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800428c:	b29b      	uxth	r3, r3
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d050      	beq.n	8004340 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d04d      	beq.n	8004340 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042b2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0210 	bic.w	r2, r2, #16
 80042e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f82e 	bl	800434c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042f0:	e026      	b.n	8004340 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00d      	beq.n	8004318 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01a      	beq.n	8004344 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
    }
    return;
 8004316:	e015      	b.n	8004344 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d011      	beq.n	8004346 <HAL_UART_IRQHandler+0x3d2>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fd11 	bl	8004d54 <UART_EndTransmit_IT>
    return;
 8004332:	e008      	b.n	8004346 <HAL_UART_IRQHandler+0x3d2>
      return;
 8004334:	bf00      	nop
 8004336:	e006      	b.n	8004346 <HAL_UART_IRQHandler+0x3d2>
    return;
 8004338:	bf00      	nop
 800433a:	e004      	b.n	8004346 <HAL_UART_IRQHandler+0x3d2>
      return;
 800433c:	bf00      	nop
 800433e:	e002      	b.n	8004346 <HAL_UART_IRQHandler+0x3d2>
      return;
 8004340:	bf00      	nop
 8004342:	e000      	b.n	8004346 <HAL_UART_IRQHandler+0x3d2>
    return;
 8004344:	bf00      	nop
  }

}
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4ba7      	ldr	r3, [pc, #668]	; (800462c <UART_SetConfig+0x2c8>)
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	6979      	ldr	r1, [r7, #20]
 8004398:	430b      	orrs	r3, r1
 800439a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a95      	ldr	r2, [pc, #596]	; (8004630 <UART_SetConfig+0x2cc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d120      	bne.n	8004422 <UART_SetConfig+0xbe>
 80043e0:	4b94      	ldr	r3, [pc, #592]	; (8004634 <UART_SetConfig+0x2d0>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d816      	bhi.n	800441c <UART_SetConfig+0xb8>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <UART_SetConfig+0x90>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004411 	.word	0x08004411
 80043fc:	0800440b 	.word	0x0800440b
 8004400:	08004417 	.word	0x08004417
 8004404:	2301      	movs	r3, #1
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e14f      	b.n	80046aa <UART_SetConfig+0x346>
 800440a:	2302      	movs	r3, #2
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e14c      	b.n	80046aa <UART_SetConfig+0x346>
 8004410:	2304      	movs	r3, #4
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e149      	b.n	80046aa <UART_SetConfig+0x346>
 8004416:	2308      	movs	r3, #8
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e146      	b.n	80046aa <UART_SetConfig+0x346>
 800441c:	2310      	movs	r3, #16
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e143      	b.n	80046aa <UART_SetConfig+0x346>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a84      	ldr	r2, [pc, #528]	; (8004638 <UART_SetConfig+0x2d4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d132      	bne.n	8004492 <UART_SetConfig+0x12e>
 800442c:	4b81      	ldr	r3, [pc, #516]	; (8004634 <UART_SetConfig+0x2d0>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d828      	bhi.n	800448c <UART_SetConfig+0x128>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0xdc>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004475 	.word	0x08004475
 8004444:	0800448d 	.word	0x0800448d
 8004448:	0800448d 	.word	0x0800448d
 800444c:	0800448d 	.word	0x0800448d
 8004450:	08004481 	.word	0x08004481
 8004454:	0800448d 	.word	0x0800448d
 8004458:	0800448d 	.word	0x0800448d
 800445c:	0800448d 	.word	0x0800448d
 8004460:	0800447b 	.word	0x0800447b
 8004464:	0800448d 	.word	0x0800448d
 8004468:	0800448d 	.word	0x0800448d
 800446c:	0800448d 	.word	0x0800448d
 8004470:	08004487 	.word	0x08004487
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e117      	b.n	80046aa <UART_SetConfig+0x346>
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e114      	b.n	80046aa <UART_SetConfig+0x346>
 8004480:	2304      	movs	r3, #4
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e111      	b.n	80046aa <UART_SetConfig+0x346>
 8004486:	2308      	movs	r3, #8
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e10e      	b.n	80046aa <UART_SetConfig+0x346>
 800448c:	2310      	movs	r3, #16
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e10b      	b.n	80046aa <UART_SetConfig+0x346>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a69      	ldr	r2, [pc, #420]	; (800463c <UART_SetConfig+0x2d8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d120      	bne.n	80044de <UART_SetConfig+0x17a>
 800449c:	4b65      	ldr	r3, [pc, #404]	; (8004634 <UART_SetConfig+0x2d0>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044a6:	2b30      	cmp	r3, #48	; 0x30
 80044a8:	d013      	beq.n	80044d2 <UART_SetConfig+0x16e>
 80044aa:	2b30      	cmp	r3, #48	; 0x30
 80044ac:	d814      	bhi.n	80044d8 <UART_SetConfig+0x174>
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d009      	beq.n	80044c6 <UART_SetConfig+0x162>
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d810      	bhi.n	80044d8 <UART_SetConfig+0x174>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <UART_SetConfig+0x15c>
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d006      	beq.n	80044cc <UART_SetConfig+0x168>
 80044be:	e00b      	b.n	80044d8 <UART_SetConfig+0x174>
 80044c0:	2300      	movs	r3, #0
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e0f1      	b.n	80046aa <UART_SetConfig+0x346>
 80044c6:	2302      	movs	r3, #2
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e0ee      	b.n	80046aa <UART_SetConfig+0x346>
 80044cc:	2304      	movs	r3, #4
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e0eb      	b.n	80046aa <UART_SetConfig+0x346>
 80044d2:	2308      	movs	r3, #8
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e0e8      	b.n	80046aa <UART_SetConfig+0x346>
 80044d8:	2310      	movs	r3, #16
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e0e5      	b.n	80046aa <UART_SetConfig+0x346>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a57      	ldr	r2, [pc, #348]	; (8004640 <UART_SetConfig+0x2dc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d120      	bne.n	800452a <UART_SetConfig+0x1c6>
 80044e8:	4b52      	ldr	r3, [pc, #328]	; (8004634 <UART_SetConfig+0x2d0>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044f2:	2bc0      	cmp	r3, #192	; 0xc0
 80044f4:	d013      	beq.n	800451e <UART_SetConfig+0x1ba>
 80044f6:	2bc0      	cmp	r3, #192	; 0xc0
 80044f8:	d814      	bhi.n	8004524 <UART_SetConfig+0x1c0>
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d009      	beq.n	8004512 <UART_SetConfig+0x1ae>
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d810      	bhi.n	8004524 <UART_SetConfig+0x1c0>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <UART_SetConfig+0x1a8>
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d006      	beq.n	8004518 <UART_SetConfig+0x1b4>
 800450a:	e00b      	b.n	8004524 <UART_SetConfig+0x1c0>
 800450c:	2300      	movs	r3, #0
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e0cb      	b.n	80046aa <UART_SetConfig+0x346>
 8004512:	2302      	movs	r3, #2
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e0c8      	b.n	80046aa <UART_SetConfig+0x346>
 8004518:	2304      	movs	r3, #4
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e0c5      	b.n	80046aa <UART_SetConfig+0x346>
 800451e:	2308      	movs	r3, #8
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e0c2      	b.n	80046aa <UART_SetConfig+0x346>
 8004524:	2310      	movs	r3, #16
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e0bf      	b.n	80046aa <UART_SetConfig+0x346>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a45      	ldr	r2, [pc, #276]	; (8004644 <UART_SetConfig+0x2e0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d125      	bne.n	8004580 <UART_SetConfig+0x21c>
 8004534:	4b3f      	ldr	r3, [pc, #252]	; (8004634 <UART_SetConfig+0x2d0>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004542:	d017      	beq.n	8004574 <UART_SetConfig+0x210>
 8004544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004548:	d817      	bhi.n	800457a <UART_SetConfig+0x216>
 800454a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800454e:	d00b      	beq.n	8004568 <UART_SetConfig+0x204>
 8004550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004554:	d811      	bhi.n	800457a <UART_SetConfig+0x216>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <UART_SetConfig+0x1fe>
 800455a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455e:	d006      	beq.n	800456e <UART_SetConfig+0x20a>
 8004560:	e00b      	b.n	800457a <UART_SetConfig+0x216>
 8004562:	2300      	movs	r3, #0
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e0a0      	b.n	80046aa <UART_SetConfig+0x346>
 8004568:	2302      	movs	r3, #2
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e09d      	b.n	80046aa <UART_SetConfig+0x346>
 800456e:	2304      	movs	r3, #4
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e09a      	b.n	80046aa <UART_SetConfig+0x346>
 8004574:	2308      	movs	r3, #8
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e097      	b.n	80046aa <UART_SetConfig+0x346>
 800457a:	2310      	movs	r3, #16
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e094      	b.n	80046aa <UART_SetConfig+0x346>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a30      	ldr	r2, [pc, #192]	; (8004648 <UART_SetConfig+0x2e4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d125      	bne.n	80045d6 <UART_SetConfig+0x272>
 800458a:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <UART_SetConfig+0x2d0>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004598:	d017      	beq.n	80045ca <UART_SetConfig+0x266>
 800459a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800459e:	d817      	bhi.n	80045d0 <UART_SetConfig+0x26c>
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a4:	d00b      	beq.n	80045be <UART_SetConfig+0x25a>
 80045a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045aa:	d811      	bhi.n	80045d0 <UART_SetConfig+0x26c>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <UART_SetConfig+0x254>
 80045b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b4:	d006      	beq.n	80045c4 <UART_SetConfig+0x260>
 80045b6:	e00b      	b.n	80045d0 <UART_SetConfig+0x26c>
 80045b8:	2301      	movs	r3, #1
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e075      	b.n	80046aa <UART_SetConfig+0x346>
 80045be:	2302      	movs	r3, #2
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e072      	b.n	80046aa <UART_SetConfig+0x346>
 80045c4:	2304      	movs	r3, #4
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e06f      	b.n	80046aa <UART_SetConfig+0x346>
 80045ca:	2308      	movs	r3, #8
 80045cc:	77fb      	strb	r3, [r7, #31]
 80045ce:	e06c      	b.n	80046aa <UART_SetConfig+0x346>
 80045d0:	2310      	movs	r3, #16
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e069      	b.n	80046aa <UART_SetConfig+0x346>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <UART_SetConfig+0x2e8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d137      	bne.n	8004650 <UART_SetConfig+0x2ec>
 80045e0:	4b14      	ldr	r3, [pc, #80]	; (8004634 <UART_SetConfig+0x2d0>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045ee:	d017      	beq.n	8004620 <UART_SetConfig+0x2bc>
 80045f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045f4:	d817      	bhi.n	8004626 <UART_SetConfig+0x2c2>
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fa:	d00b      	beq.n	8004614 <UART_SetConfig+0x2b0>
 80045fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004600:	d811      	bhi.n	8004626 <UART_SetConfig+0x2c2>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <UART_SetConfig+0x2aa>
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460a:	d006      	beq.n	800461a <UART_SetConfig+0x2b6>
 800460c:	e00b      	b.n	8004626 <UART_SetConfig+0x2c2>
 800460e:	2300      	movs	r3, #0
 8004610:	77fb      	strb	r3, [r7, #31]
 8004612:	e04a      	b.n	80046aa <UART_SetConfig+0x346>
 8004614:	2302      	movs	r3, #2
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e047      	b.n	80046aa <UART_SetConfig+0x346>
 800461a:	2304      	movs	r3, #4
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e044      	b.n	80046aa <UART_SetConfig+0x346>
 8004620:	2308      	movs	r3, #8
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e041      	b.n	80046aa <UART_SetConfig+0x346>
 8004626:	2310      	movs	r3, #16
 8004628:	77fb      	strb	r3, [r7, #31]
 800462a:	e03e      	b.n	80046aa <UART_SetConfig+0x346>
 800462c:	efff69f3 	.word	0xefff69f3
 8004630:	40011000 	.word	0x40011000
 8004634:	40023800 	.word	0x40023800
 8004638:	40004400 	.word	0x40004400
 800463c:	40004800 	.word	0x40004800
 8004640:	40004c00 	.word	0x40004c00
 8004644:	40005000 	.word	0x40005000
 8004648:	40011400 	.word	0x40011400
 800464c:	40007800 	.word	0x40007800
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a71      	ldr	r2, [pc, #452]	; (800481c <UART_SetConfig+0x4b8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d125      	bne.n	80046a6 <UART_SetConfig+0x342>
 800465a:	4b71      	ldr	r3, [pc, #452]	; (8004820 <UART_SetConfig+0x4bc>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004664:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004668:	d017      	beq.n	800469a <UART_SetConfig+0x336>
 800466a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800466e:	d817      	bhi.n	80046a0 <UART_SetConfig+0x33c>
 8004670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004674:	d00b      	beq.n	800468e <UART_SetConfig+0x32a>
 8004676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467a:	d811      	bhi.n	80046a0 <UART_SetConfig+0x33c>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <UART_SetConfig+0x324>
 8004680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004684:	d006      	beq.n	8004694 <UART_SetConfig+0x330>
 8004686:	e00b      	b.n	80046a0 <UART_SetConfig+0x33c>
 8004688:	2300      	movs	r3, #0
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e00d      	b.n	80046aa <UART_SetConfig+0x346>
 800468e:	2302      	movs	r3, #2
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e00a      	b.n	80046aa <UART_SetConfig+0x346>
 8004694:	2304      	movs	r3, #4
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e007      	b.n	80046aa <UART_SetConfig+0x346>
 800469a:	2308      	movs	r3, #8
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e004      	b.n	80046aa <UART_SetConfig+0x346>
 80046a0:	2310      	movs	r3, #16
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e001      	b.n	80046aa <UART_SetConfig+0x346>
 80046a6:	2310      	movs	r3, #16
 80046a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b2:	d15b      	bne.n	800476c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80046b4:	7ffb      	ldrb	r3, [r7, #31]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d827      	bhi.n	800470a <UART_SetConfig+0x3a6>
 80046ba:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <UART_SetConfig+0x35c>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	0800470b 	.word	0x0800470b
 80046d0:	080046fb 	.word	0x080046fb
 80046d4:	0800470b 	.word	0x0800470b
 80046d8:	0800470b 	.word	0x0800470b
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	08004703 	.word	0x08004703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7fe ff46 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 80046e8:	61b8      	str	r0, [r7, #24]
        break;
 80046ea:	e013      	b.n	8004714 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ec:	f7fe ff56 	bl	800359c <HAL_RCC_GetPCLK2Freq>
 80046f0:	61b8      	str	r0, [r7, #24]
        break;
 80046f2:	e00f      	b.n	8004714 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <UART_SetConfig+0x4c0>)
 80046f6:	61bb      	str	r3, [r7, #24]
        break;
 80046f8:	e00c      	b.n	8004714 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fa:	f7fe fe4d 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 80046fe:	61b8      	str	r0, [r7, #24]
        break;
 8004700:	e008      	b.n	8004714 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	61bb      	str	r3, [r7, #24]
        break;
 8004708:	e004      	b.n	8004714 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	77bb      	strb	r3, [r7, #30]
        break;
 8004712:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d074      	beq.n	8004804 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	005a      	lsls	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	441a      	add	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	b29b      	uxth	r3, r3
 8004730:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d916      	bls.n	8004766 <UART_SetConfig+0x402>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473e:	d212      	bcs.n	8004766 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f023 030f 	bic.w	r3, r3, #15
 8004748:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	b29b      	uxth	r3, r3
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	b29a      	uxth	r2, r3
 8004756:	89fb      	ldrh	r3, [r7, #14]
 8004758:	4313      	orrs	r3, r2
 800475a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	89fa      	ldrh	r2, [r7, #14]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	e04e      	b.n	8004804 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	77bb      	strb	r3, [r7, #30]
 800476a:	e04b      	b.n	8004804 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800476c:	7ffb      	ldrb	r3, [r7, #31]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d827      	bhi.n	80047c2 <UART_SetConfig+0x45e>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0x414>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	0800479d 	.word	0x0800479d
 800477c:	080047a5 	.word	0x080047a5
 8004780:	080047ad 	.word	0x080047ad
 8004784:	080047c3 	.word	0x080047c3
 8004788:	080047b3 	.word	0x080047b3
 800478c:	080047c3 	.word	0x080047c3
 8004790:	080047c3 	.word	0x080047c3
 8004794:	080047c3 	.word	0x080047c3
 8004798:	080047bb 	.word	0x080047bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800479c:	f7fe feea 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 80047a0:	61b8      	str	r0, [r7, #24]
        break;
 80047a2:	e013      	b.n	80047cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a4:	f7fe fefa 	bl	800359c <HAL_RCC_GetPCLK2Freq>
 80047a8:	61b8      	str	r0, [r7, #24]
        break;
 80047aa:	e00f      	b.n	80047cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ac:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <UART_SetConfig+0x4c0>)
 80047ae:	61bb      	str	r3, [r7, #24]
        break;
 80047b0:	e00c      	b.n	80047cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b2:	f7fe fdf1 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 80047b6:	61b8      	str	r0, [r7, #24]
        break;
 80047b8:	e008      	b.n	80047cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047be:	61bb      	str	r3, [r7, #24]
        break;
 80047c0:	e004      	b.n	80047cc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77bb      	strb	r3, [r7, #30]
        break;
 80047ca:	bf00      	nop
    }

    if (pclk != 0U)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d018      	beq.n	8004804 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	085a      	lsrs	r2, r3, #1
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	441a      	add	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d908      	bls.n	8004800 <UART_SetConfig+0x49c>
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d204      	bcs.n	8004800 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	e001      	b.n	8004804 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004810:	7fbb      	ldrb	r3, [r7, #30]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40007c00 	.word	0x40007c00
 8004820:	40023800 	.word	0x40023800
 8004824:	00f42400 	.word	0x00f42400

08004828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01a      	beq.n	800493e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004926:	d10a      	bne.n	800493e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af02      	add	r7, sp, #8
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800497c:	f7fd fb8e 	bl	800209c <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b08      	cmp	r3, #8
 800498e:	d10e      	bne.n	80049ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f817 	bl	80049d2 <UART_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e00d      	b.n	80049ca <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e2:	e05e      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d05a      	beq.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ec:	f7fd fb56 	bl	800209c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d11b      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
 8004a20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e043      	b.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d02c      	beq.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a56:	d124      	bne.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e00f      	b.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d091      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d10e      	bne.n	8004b1e <UART_Start_Receive_IT+0x52>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <UART_Start_Receive_IT+0x48>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b12:	e02d      	b.n	8004b70 <UART_Start_Receive_IT+0xa4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b1c:	e028      	b.n	8004b70 <UART_Start_Receive_IT+0xa4>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10d      	bne.n	8004b42 <UART_Start_Receive_IT+0x76>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <UART_Start_Receive_IT+0x6c>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	22ff      	movs	r2, #255	; 0xff
 8004b32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b36:	e01b      	b.n	8004b70 <UART_Start_Receive_IT+0xa4>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	227f      	movs	r2, #127	; 0x7f
 8004b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b40:	e016      	b.n	8004b70 <UART_Start_Receive_IT+0xa4>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b4a:	d10d      	bne.n	8004b68 <UART_Start_Receive_IT+0x9c>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <UART_Start_Receive_IT+0x92>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	227f      	movs	r2, #127	; 0x7f
 8004b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b5c:	e008      	b.n	8004b70 <UART_Start_Receive_IT+0xa4>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	223f      	movs	r2, #63	; 0x3f
 8004b62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b66:	e003      	b.n	8004b70 <UART_Start_Receive_IT+0xa4>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2222      	movs	r2, #34	; 0x22
 8004b7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d107      	bne.n	8004ba8 <UART_Start_Receive_IT+0xdc>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d103      	bne.n	8004ba8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a0c      	ldr	r2, [pc, #48]	; (8004bd4 <UART_Start_Receive_IT+0x108>)
 8004ba4:	665a      	str	r2, [r3, #100]	; 0x64
 8004ba6:	e002      	b.n	8004bae <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <UART_Start_Receive_IT+0x10c>)
 8004bac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004bc4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	08004e5b 	.word	0x08004e5b
 8004bd8:	08004d87 	.word	0x08004d87

08004bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bf2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0201 	bic.w	r2, r2, #1
 8004c02:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d107      	bne.n	8004c1c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0210 	bic.w	r2, r2, #16
 8004c1a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7fc fe5d 	bl	8001918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c72:	2b21      	cmp	r3, #33	; 0x21
 8004c74:	d12a      	bne.n	8004ccc <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d110      	bne.n	8004ca4 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c90:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ca2:	e013      	b.n	8004ccc <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce4:	2b21      	cmp	r3, #33	; 0x21
 8004ce6:	d12f      	bne.n	8004d48 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d110      	bne.n	8004d16 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d02:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d12:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004d14:	e018      	b.n	8004d48 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fc fcfb 	bl	8001774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d94:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9a:	2b22      	cmp	r3, #34	; 0x22
 8004d9c:	d151      	bne.n	8004e42 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004da6:	89bb      	ldrh	r3, [r7, #12]
 8004da8:	b2d9      	uxtb	r1, r3
 8004daa:	89fb      	ldrh	r3, [r7, #14]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	400a      	ands	r2, r1
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d138      	bne.n	8004e52 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d10f      	bne.n	8004e34 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0210 	bic.w	r2, r2, #16
 8004e22:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fa8d 	bl	800434c <HAL_UARTEx_RxEventCallback>
 8004e32:	e002      	b.n	8004e3a <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fc fcff 	bl	8001838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e40:	e007      	b.n	8004e52 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0208 	orr.w	r2, r2, #8
 8004e50:	619a      	str	r2, [r3, #24]
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e68:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e6e:	2b22      	cmp	r3, #34	; 0x22
 8004e70:	d151      	bne.n	8004f16 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e80:	89ba      	ldrh	r2, [r7, #12]
 8004e82:	89fb      	ldrh	r3, [r7, #14]
 8004e84:	4013      	ands	r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d138      	bne.n	8004f26 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ec2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10f      	bne.n	8004f08 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0210 	bic.w	r2, r2, #16
 8004ef6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff fa23 	bl	800434c <HAL_UARTEx_RxEventCallback>
 8004f06:	e002      	b.n	8004f0e <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fc fc95 	bl	8001838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f14:	e007      	b.n	8004f26 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0208 	orr.w	r2, r2, #8
 8004f24:	619a      	str	r2, [r3, #24]
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f30:	b084      	sub	sp, #16
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	f107 001c 	add.w	r0, r7, #28
 8004f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d120      	bne.n	8004f8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <USB_CoreInit+0xac>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa5a 	bl	8005438 <USB_CoreReset>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e010      	b.n	8004fac <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa4e 	bl	8005438 <USB_CoreReset>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10b      	bne.n	8004fca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f043 0206 	orr.w	r2, r3, #6
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fd6:	b004      	add	sp, #16
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	ffbdffbf 	.word	0xffbdffbf

08004fe0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 0201 	bic.w	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	e00b      	b.n	8005046 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60da      	str	r2, [r3, #12]
 8005040:	e001      	b.n	8005046 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e003      	b.n	800504e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005046:	2032      	movs	r0, #50	; 0x32
 8005048:	f7fd f834 	bl	80020b4 <HAL_Delay>

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005058:	b084      	sub	sp, #16
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e009      	b.n	800508c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3340      	adds	r3, #64	; 0x40
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	2200      	movs	r2, #0
 8005084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3301      	adds	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b0e      	cmp	r3, #14
 8005090:	d9f2      	bls.n	8005078 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11c      	bne.n	80050d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a6:	f043 0302 	orr.w	r3, r3, #2
 80050aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e005      	b.n	80050de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	4619      	mov	r1, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	461a      	mov	r2, r3
 80050fa:	680b      	ldr	r3, [r1, #0]
 80050fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b01      	cmp	r3, #1
 8005102:	d10c      	bne.n	800511e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800510a:	2100      	movs	r1, #0
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f959 	bl	80053c4 <USB_SetDevSpeed>
 8005112:	e018      	b.n	8005146 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005114:	2101      	movs	r1, #1
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f954 	bl	80053c4 <USB_SetDevSpeed>
 800511c:	e013      	b.n	8005146 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2b03      	cmp	r3, #3
 8005122:	d10c      	bne.n	800513e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800512a:	2100      	movs	r1, #0
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f949 	bl	80053c4 <USB_SetDevSpeed>
 8005132:	e008      	b.n	8005146 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005134:	2101      	movs	r1, #1
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f944 	bl	80053c4 <USB_SetDevSpeed>
 800513c:	e003      	b.n	8005146 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800513e:	2103      	movs	r1, #3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f93f 	bl	80053c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005146:	2110      	movs	r1, #16
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8f3 	bl	8005334 <USB_FlushTxFifo>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f911 	bl	8005380 <USB_FlushRxFifo>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	461a      	mov	r2, r3
 800517c:	2300      	movs	r3, #0
 800517e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e043      	b.n	800521a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a8:	d118      	bne.n	80051dc <USB_DevInit+0x184>
    {
      if (i == 0U)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	461a      	mov	r2, r3
 80051be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e013      	b.n	80051ee <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	461a      	mov	r2, r3
 80051d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e008      	b.n	80051ee <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	461a      	mov	r2, r3
 80051ea:	2300      	movs	r3, #0
 80051ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	461a      	mov	r2, r3
 80051fc:	2300      	movs	r3, #0
 80051fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	461a      	mov	r2, r3
 800520e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005212:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	3301      	adds	r3, #1
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d3b7      	bcc.n	8005192 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e043      	b.n	80052b0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800523e:	d118      	bne.n	8005272 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	461a      	mov	r2, r3
 8005254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e013      	b.n	8005284 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	461a      	mov	r2, r3
 800526a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e008      	b.n	8005284 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	461a      	mov	r2, r3
 8005280:	2300      	movs	r3, #0
 8005282:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	461a      	mov	r2, r3
 8005292:	2300      	movs	r3, #0
 8005294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	461a      	mov	r2, r3
 80052a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3301      	adds	r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d3b7      	bcc.n	8005228 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f043 0210 	orr.w	r2, r3, #16
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	4b0e      	ldr	r3, [pc, #56]	; (800532c <USB_DevInit+0x2d4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f043 0208 	orr.w	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <USB_DevInit+0x2d8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005328:	b004      	add	sp, #16
 800532a:	4770      	bx	lr
 800532c:	803c3800 	.word	0x803c3800
 8005330:	40000004 	.word	0x40000004

08005334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	f043 0220 	orr.w	r2, r3, #32
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <USB_FlushTxFifo+0x48>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d901      	bls.n	8005360 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e006      	b.n	800536e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b20      	cmp	r3, #32
 800536a:	d0f0      	beq.n	800534e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	00030d40 	.word	0x00030d40

08005380 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2210      	movs	r2, #16
 8005390:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <USB_FlushRxFifo+0x40>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e006      	b.n	80053b2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d0f0      	beq.n	8005392 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	00030d40 	.word	0x00030d40

080053c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e4:	4313      	orrs	r3, r2
 80053e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005424:	f043 0302 	orr.w	r3, r3, #2
 8005428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a13      	ldr	r2, [pc, #76]	; (800549c <USB_CoreReset+0x64>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d901      	bls.n	8005456 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e01b      	b.n	800548e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	daf2      	bge.n	8005444 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f043 0201 	orr.w	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3301      	adds	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <USB_CoreReset+0x64>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d901      	bls.n	8005480 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e006      	b.n	800548e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d0f0      	beq.n	800546e <USB_CoreReset+0x36>

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	00030d40 	.word	0x00030d40

080054a0 <__errno>:
 80054a0:	4b01      	ldr	r3, [pc, #4]	; (80054a8 <__errno+0x8>)
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	2000000c 	.word	0x2000000c

080054ac <__libc_init_array>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	4d0d      	ldr	r5, [pc, #52]	; (80054e4 <__libc_init_array+0x38>)
 80054b0:	4c0d      	ldr	r4, [pc, #52]	; (80054e8 <__libc_init_array+0x3c>)
 80054b2:	1b64      	subs	r4, r4, r5
 80054b4:	10a4      	asrs	r4, r4, #2
 80054b6:	2600      	movs	r6, #0
 80054b8:	42a6      	cmp	r6, r4
 80054ba:	d109      	bne.n	80054d0 <__libc_init_array+0x24>
 80054bc:	4d0b      	ldr	r5, [pc, #44]	; (80054ec <__libc_init_array+0x40>)
 80054be:	4c0c      	ldr	r4, [pc, #48]	; (80054f0 <__libc_init_array+0x44>)
 80054c0:	f002 fd80 	bl	8007fc4 <_init>
 80054c4:	1b64      	subs	r4, r4, r5
 80054c6:	10a4      	asrs	r4, r4, #2
 80054c8:	2600      	movs	r6, #0
 80054ca:	42a6      	cmp	r6, r4
 80054cc:	d105      	bne.n	80054da <__libc_init_array+0x2e>
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d4:	4798      	blx	r3
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7ee      	b.n	80054b8 <__libc_init_array+0xc>
 80054da:	f855 3b04 	ldr.w	r3, [r5], #4
 80054de:	4798      	blx	r3
 80054e0:	3601      	adds	r6, #1
 80054e2:	e7f2      	b.n	80054ca <__libc_init_array+0x1e>
 80054e4:	080099d4 	.word	0x080099d4
 80054e8:	080099d4 	.word	0x080099d4
 80054ec:	080099d4 	.word	0x080099d4
 80054f0:	080099d8 	.word	0x080099d8

080054f4 <memset>:
 80054f4:	4402      	add	r2, r0
 80054f6:	4603      	mov	r3, r0
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d100      	bne.n	80054fe <memset+0xa>
 80054fc:	4770      	bx	lr
 80054fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005502:	e7f9      	b.n	80054f8 <memset+0x4>

08005504 <__cvt>:
 8005504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	ec55 4b10 	vmov	r4, r5, d0
 800550c:	2d00      	cmp	r5, #0
 800550e:	460e      	mov	r6, r1
 8005510:	4619      	mov	r1, r3
 8005512:	462b      	mov	r3, r5
 8005514:	bfbb      	ittet	lt
 8005516:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800551a:	461d      	movlt	r5, r3
 800551c:	2300      	movge	r3, #0
 800551e:	232d      	movlt	r3, #45	; 0x2d
 8005520:	700b      	strb	r3, [r1, #0]
 8005522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005524:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005528:	4691      	mov	r9, r2
 800552a:	f023 0820 	bic.w	r8, r3, #32
 800552e:	bfbc      	itt	lt
 8005530:	4622      	movlt	r2, r4
 8005532:	4614      	movlt	r4, r2
 8005534:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005538:	d005      	beq.n	8005546 <__cvt+0x42>
 800553a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800553e:	d100      	bne.n	8005542 <__cvt+0x3e>
 8005540:	3601      	adds	r6, #1
 8005542:	2102      	movs	r1, #2
 8005544:	e000      	b.n	8005548 <__cvt+0x44>
 8005546:	2103      	movs	r1, #3
 8005548:	ab03      	add	r3, sp, #12
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	ab02      	add	r3, sp, #8
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	ec45 4b10 	vmov	d0, r4, r5
 8005554:	4653      	mov	r3, sl
 8005556:	4632      	mov	r2, r6
 8005558:	f000 fe1a 	bl	8006190 <_dtoa_r>
 800555c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005560:	4607      	mov	r7, r0
 8005562:	d102      	bne.n	800556a <__cvt+0x66>
 8005564:	f019 0f01 	tst.w	r9, #1
 8005568:	d022      	beq.n	80055b0 <__cvt+0xac>
 800556a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800556e:	eb07 0906 	add.w	r9, r7, r6
 8005572:	d110      	bne.n	8005596 <__cvt+0x92>
 8005574:	783b      	ldrb	r3, [r7, #0]
 8005576:	2b30      	cmp	r3, #48	; 0x30
 8005578:	d10a      	bne.n	8005590 <__cvt+0x8c>
 800557a:	2200      	movs	r2, #0
 800557c:	2300      	movs	r3, #0
 800557e:	4620      	mov	r0, r4
 8005580:	4629      	mov	r1, r5
 8005582:	f7fb fac1 	bl	8000b08 <__aeabi_dcmpeq>
 8005586:	b918      	cbnz	r0, 8005590 <__cvt+0x8c>
 8005588:	f1c6 0601 	rsb	r6, r6, #1
 800558c:	f8ca 6000 	str.w	r6, [sl]
 8005590:	f8da 3000 	ldr.w	r3, [sl]
 8005594:	4499      	add	r9, r3
 8005596:	2200      	movs	r2, #0
 8005598:	2300      	movs	r3, #0
 800559a:	4620      	mov	r0, r4
 800559c:	4629      	mov	r1, r5
 800559e:	f7fb fab3 	bl	8000b08 <__aeabi_dcmpeq>
 80055a2:	b108      	cbz	r0, 80055a8 <__cvt+0xa4>
 80055a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80055a8:	2230      	movs	r2, #48	; 0x30
 80055aa:	9b03      	ldr	r3, [sp, #12]
 80055ac:	454b      	cmp	r3, r9
 80055ae:	d307      	bcc.n	80055c0 <__cvt+0xbc>
 80055b0:	9b03      	ldr	r3, [sp, #12]
 80055b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055b4:	1bdb      	subs	r3, r3, r7
 80055b6:	4638      	mov	r0, r7
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	b004      	add	sp, #16
 80055bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c0:	1c59      	adds	r1, r3, #1
 80055c2:	9103      	str	r1, [sp, #12]
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e7f0      	b.n	80055aa <__cvt+0xa6>

080055c8 <__exponent>:
 80055c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ca:	4603      	mov	r3, r0
 80055cc:	2900      	cmp	r1, #0
 80055ce:	bfb8      	it	lt
 80055d0:	4249      	neglt	r1, r1
 80055d2:	f803 2b02 	strb.w	r2, [r3], #2
 80055d6:	bfb4      	ite	lt
 80055d8:	222d      	movlt	r2, #45	; 0x2d
 80055da:	222b      	movge	r2, #43	; 0x2b
 80055dc:	2909      	cmp	r1, #9
 80055de:	7042      	strb	r2, [r0, #1]
 80055e0:	dd2a      	ble.n	8005638 <__exponent+0x70>
 80055e2:	f10d 0407 	add.w	r4, sp, #7
 80055e6:	46a4      	mov	ip, r4
 80055e8:	270a      	movs	r7, #10
 80055ea:	46a6      	mov	lr, r4
 80055ec:	460a      	mov	r2, r1
 80055ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80055f2:	fb07 1516 	mls	r5, r7, r6, r1
 80055f6:	3530      	adds	r5, #48	; 0x30
 80055f8:	2a63      	cmp	r2, #99	; 0x63
 80055fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80055fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005602:	4631      	mov	r1, r6
 8005604:	dcf1      	bgt.n	80055ea <__exponent+0x22>
 8005606:	3130      	adds	r1, #48	; 0x30
 8005608:	f1ae 0502 	sub.w	r5, lr, #2
 800560c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005610:	1c44      	adds	r4, r0, #1
 8005612:	4629      	mov	r1, r5
 8005614:	4561      	cmp	r1, ip
 8005616:	d30a      	bcc.n	800562e <__exponent+0x66>
 8005618:	f10d 0209 	add.w	r2, sp, #9
 800561c:	eba2 020e 	sub.w	r2, r2, lr
 8005620:	4565      	cmp	r5, ip
 8005622:	bf88      	it	hi
 8005624:	2200      	movhi	r2, #0
 8005626:	4413      	add	r3, r2
 8005628:	1a18      	subs	r0, r3, r0
 800562a:	b003      	add	sp, #12
 800562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005632:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005636:	e7ed      	b.n	8005614 <__exponent+0x4c>
 8005638:	2330      	movs	r3, #48	; 0x30
 800563a:	3130      	adds	r1, #48	; 0x30
 800563c:	7083      	strb	r3, [r0, #2]
 800563e:	70c1      	strb	r1, [r0, #3]
 8005640:	1d03      	adds	r3, r0, #4
 8005642:	e7f1      	b.n	8005628 <__exponent+0x60>

08005644 <_printf_float>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	ed2d 8b02 	vpush	{d8}
 800564c:	b08d      	sub	sp, #52	; 0x34
 800564e:	460c      	mov	r4, r1
 8005650:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005654:	4616      	mov	r6, r2
 8005656:	461f      	mov	r7, r3
 8005658:	4605      	mov	r5, r0
 800565a:	f001 fd3d 	bl	80070d8 <_localeconv_r>
 800565e:	f8d0 a000 	ldr.w	sl, [r0]
 8005662:	4650      	mov	r0, sl
 8005664:	f7fa fdd4 	bl	8000210 <strlen>
 8005668:	2300      	movs	r3, #0
 800566a:	930a      	str	r3, [sp, #40]	; 0x28
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	9305      	str	r3, [sp, #20]
 8005670:	f8d8 3000 	ldr.w	r3, [r8]
 8005674:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005678:	3307      	adds	r3, #7
 800567a:	f023 0307 	bic.w	r3, r3, #7
 800567e:	f103 0208 	add.w	r2, r3, #8
 8005682:	f8c8 2000 	str.w	r2, [r8]
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800568e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005696:	9307      	str	r3, [sp, #28]
 8005698:	f8cd 8018 	str.w	r8, [sp, #24]
 800569c:	ee08 0a10 	vmov	s16, r0
 80056a0:	4b9f      	ldr	r3, [pc, #636]	; (8005920 <_printf_float+0x2dc>)
 80056a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056a6:	f04f 32ff 	mov.w	r2, #4294967295
 80056aa:	f7fb fa5f 	bl	8000b6c <__aeabi_dcmpun>
 80056ae:	bb88      	cbnz	r0, 8005714 <_printf_float+0xd0>
 80056b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056b4:	4b9a      	ldr	r3, [pc, #616]	; (8005920 <_printf_float+0x2dc>)
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ba:	f7fb fa39 	bl	8000b30 <__aeabi_dcmple>
 80056be:	bb48      	cbnz	r0, 8005714 <_printf_float+0xd0>
 80056c0:	2200      	movs	r2, #0
 80056c2:	2300      	movs	r3, #0
 80056c4:	4640      	mov	r0, r8
 80056c6:	4649      	mov	r1, r9
 80056c8:	f7fb fa28 	bl	8000b1c <__aeabi_dcmplt>
 80056cc:	b110      	cbz	r0, 80056d4 <_printf_float+0x90>
 80056ce:	232d      	movs	r3, #45	; 0x2d
 80056d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d4:	4b93      	ldr	r3, [pc, #588]	; (8005924 <_printf_float+0x2e0>)
 80056d6:	4894      	ldr	r0, [pc, #592]	; (8005928 <_printf_float+0x2e4>)
 80056d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056dc:	bf94      	ite	ls
 80056de:	4698      	movls	r8, r3
 80056e0:	4680      	movhi	r8, r0
 80056e2:	2303      	movs	r3, #3
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	9b05      	ldr	r3, [sp, #20]
 80056e8:	f023 0204 	bic.w	r2, r3, #4
 80056ec:	6022      	str	r2, [r4, #0]
 80056ee:	f04f 0900 	mov.w	r9, #0
 80056f2:	9700      	str	r7, [sp, #0]
 80056f4:	4633      	mov	r3, r6
 80056f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 f9d8 	bl	8005ab0 <_printf_common>
 8005700:	3001      	adds	r0, #1
 8005702:	f040 8090 	bne.w	8005826 <_printf_float+0x1e2>
 8005706:	f04f 30ff 	mov.w	r0, #4294967295
 800570a:	b00d      	add	sp, #52	; 0x34
 800570c:	ecbd 8b02 	vpop	{d8}
 8005710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	4640      	mov	r0, r8
 800571a:	4649      	mov	r1, r9
 800571c:	f7fb fa26 	bl	8000b6c <__aeabi_dcmpun>
 8005720:	b140      	cbz	r0, 8005734 <_printf_float+0xf0>
 8005722:	464b      	mov	r3, r9
 8005724:	2b00      	cmp	r3, #0
 8005726:	bfbc      	itt	lt
 8005728:	232d      	movlt	r3, #45	; 0x2d
 800572a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800572e:	487f      	ldr	r0, [pc, #508]	; (800592c <_printf_float+0x2e8>)
 8005730:	4b7f      	ldr	r3, [pc, #508]	; (8005930 <_printf_float+0x2ec>)
 8005732:	e7d1      	b.n	80056d8 <_printf_float+0x94>
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800573a:	9206      	str	r2, [sp, #24]
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	d13f      	bne.n	80057c0 <_printf_float+0x17c>
 8005740:	2306      	movs	r3, #6
 8005742:	6063      	str	r3, [r4, #4]
 8005744:	9b05      	ldr	r3, [sp, #20]
 8005746:	6861      	ldr	r1, [r4, #4]
 8005748:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800574c:	2300      	movs	r3, #0
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	ab0a      	add	r3, sp, #40	; 0x28
 8005752:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005756:	ab09      	add	r3, sp, #36	; 0x24
 8005758:	ec49 8b10 	vmov	d0, r8, r9
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	6022      	str	r2, [r4, #0]
 8005760:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005764:	4628      	mov	r0, r5
 8005766:	f7ff fecd 	bl	8005504 <__cvt>
 800576a:	9b06      	ldr	r3, [sp, #24]
 800576c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800576e:	2b47      	cmp	r3, #71	; 0x47
 8005770:	4680      	mov	r8, r0
 8005772:	d108      	bne.n	8005786 <_printf_float+0x142>
 8005774:	1cc8      	adds	r0, r1, #3
 8005776:	db02      	blt.n	800577e <_printf_float+0x13a>
 8005778:	6863      	ldr	r3, [r4, #4]
 800577a:	4299      	cmp	r1, r3
 800577c:	dd41      	ble.n	8005802 <_printf_float+0x1be>
 800577e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005782:	fa5f fb8b 	uxtb.w	fp, fp
 8005786:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800578a:	d820      	bhi.n	80057ce <_printf_float+0x18a>
 800578c:	3901      	subs	r1, #1
 800578e:	465a      	mov	r2, fp
 8005790:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005794:	9109      	str	r1, [sp, #36]	; 0x24
 8005796:	f7ff ff17 	bl	80055c8 <__exponent>
 800579a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800579c:	1813      	adds	r3, r2, r0
 800579e:	2a01      	cmp	r2, #1
 80057a0:	4681      	mov	r9, r0
 80057a2:	6123      	str	r3, [r4, #16]
 80057a4:	dc02      	bgt.n	80057ac <_printf_float+0x168>
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	07d2      	lsls	r2, r2, #31
 80057aa:	d501      	bpl.n	80057b0 <_printf_float+0x16c>
 80057ac:	3301      	adds	r3, #1
 80057ae:	6123      	str	r3, [r4, #16]
 80057b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d09c      	beq.n	80056f2 <_printf_float+0xae>
 80057b8:	232d      	movs	r3, #45	; 0x2d
 80057ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057be:	e798      	b.n	80056f2 <_printf_float+0xae>
 80057c0:	9a06      	ldr	r2, [sp, #24]
 80057c2:	2a47      	cmp	r2, #71	; 0x47
 80057c4:	d1be      	bne.n	8005744 <_printf_float+0x100>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1bc      	bne.n	8005744 <_printf_float+0x100>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e7b9      	b.n	8005742 <_printf_float+0xfe>
 80057ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057d2:	d118      	bne.n	8005806 <_printf_float+0x1c2>
 80057d4:	2900      	cmp	r1, #0
 80057d6:	6863      	ldr	r3, [r4, #4]
 80057d8:	dd0b      	ble.n	80057f2 <_printf_float+0x1ae>
 80057da:	6121      	str	r1, [r4, #16]
 80057dc:	b913      	cbnz	r3, 80057e4 <_printf_float+0x1a0>
 80057de:	6822      	ldr	r2, [r4, #0]
 80057e0:	07d0      	lsls	r0, r2, #31
 80057e2:	d502      	bpl.n	80057ea <_printf_float+0x1a6>
 80057e4:	3301      	adds	r3, #1
 80057e6:	440b      	add	r3, r1
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80057ec:	f04f 0900 	mov.w	r9, #0
 80057f0:	e7de      	b.n	80057b0 <_printf_float+0x16c>
 80057f2:	b913      	cbnz	r3, 80057fa <_printf_float+0x1b6>
 80057f4:	6822      	ldr	r2, [r4, #0]
 80057f6:	07d2      	lsls	r2, r2, #31
 80057f8:	d501      	bpl.n	80057fe <_printf_float+0x1ba>
 80057fa:	3302      	adds	r3, #2
 80057fc:	e7f4      	b.n	80057e8 <_printf_float+0x1a4>
 80057fe:	2301      	movs	r3, #1
 8005800:	e7f2      	b.n	80057e8 <_printf_float+0x1a4>
 8005802:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005808:	4299      	cmp	r1, r3
 800580a:	db05      	blt.n	8005818 <_printf_float+0x1d4>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	6121      	str	r1, [r4, #16]
 8005810:	07d8      	lsls	r0, r3, #31
 8005812:	d5ea      	bpl.n	80057ea <_printf_float+0x1a6>
 8005814:	1c4b      	adds	r3, r1, #1
 8005816:	e7e7      	b.n	80057e8 <_printf_float+0x1a4>
 8005818:	2900      	cmp	r1, #0
 800581a:	bfd4      	ite	le
 800581c:	f1c1 0202 	rsble	r2, r1, #2
 8005820:	2201      	movgt	r2, #1
 8005822:	4413      	add	r3, r2
 8005824:	e7e0      	b.n	80057e8 <_printf_float+0x1a4>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	055a      	lsls	r2, r3, #21
 800582a:	d407      	bmi.n	800583c <_printf_float+0x1f8>
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	4642      	mov	r2, r8
 8005830:	4631      	mov	r1, r6
 8005832:	4628      	mov	r0, r5
 8005834:	47b8      	blx	r7
 8005836:	3001      	adds	r0, #1
 8005838:	d12c      	bne.n	8005894 <_printf_float+0x250>
 800583a:	e764      	b.n	8005706 <_printf_float+0xc2>
 800583c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005840:	f240 80e0 	bls.w	8005a04 <_printf_float+0x3c0>
 8005844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005848:	2200      	movs	r2, #0
 800584a:	2300      	movs	r3, #0
 800584c:	f7fb f95c 	bl	8000b08 <__aeabi_dcmpeq>
 8005850:	2800      	cmp	r0, #0
 8005852:	d034      	beq.n	80058be <_printf_float+0x27a>
 8005854:	4a37      	ldr	r2, [pc, #220]	; (8005934 <_printf_float+0x2f0>)
 8005856:	2301      	movs	r3, #1
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f43f af51 	beq.w	8005706 <_printf_float+0xc2>
 8005864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005868:	429a      	cmp	r2, r3
 800586a:	db02      	blt.n	8005872 <_printf_float+0x22e>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	07d8      	lsls	r0, r3, #31
 8005870:	d510      	bpl.n	8005894 <_printf_float+0x250>
 8005872:	ee18 3a10 	vmov	r3, s16
 8005876:	4652      	mov	r2, sl
 8005878:	4631      	mov	r1, r6
 800587a:	4628      	mov	r0, r5
 800587c:	47b8      	blx	r7
 800587e:	3001      	adds	r0, #1
 8005880:	f43f af41 	beq.w	8005706 <_printf_float+0xc2>
 8005884:	f04f 0800 	mov.w	r8, #0
 8005888:	f104 091a 	add.w	r9, r4, #26
 800588c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588e:	3b01      	subs	r3, #1
 8005890:	4543      	cmp	r3, r8
 8005892:	dc09      	bgt.n	80058a8 <_printf_float+0x264>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	079b      	lsls	r3, r3, #30
 8005898:	f100 8105 	bmi.w	8005aa6 <_printf_float+0x462>
 800589c:	68e0      	ldr	r0, [r4, #12]
 800589e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bfb8      	it	lt
 80058a4:	4618      	movlt	r0, r3
 80058a6:	e730      	b.n	800570a <_printf_float+0xc6>
 80058a8:	2301      	movs	r3, #1
 80058aa:	464a      	mov	r2, r9
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	f43f af27 	beq.w	8005706 <_printf_float+0xc2>
 80058b8:	f108 0801 	add.w	r8, r8, #1
 80058bc:	e7e6      	b.n	800588c <_printf_float+0x248>
 80058be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	dc39      	bgt.n	8005938 <_printf_float+0x2f4>
 80058c4:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <_printf_float+0x2f0>)
 80058c6:	2301      	movs	r3, #1
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f af19 	beq.w	8005706 <_printf_float+0xc2>
 80058d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d8:	4313      	orrs	r3, r2
 80058da:	d102      	bne.n	80058e2 <_printf_float+0x29e>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	d5d8      	bpl.n	8005894 <_printf_float+0x250>
 80058e2:	ee18 3a10 	vmov	r3, s16
 80058e6:	4652      	mov	r2, sl
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f af09 	beq.w	8005706 <_printf_float+0xc2>
 80058f4:	f04f 0900 	mov.w	r9, #0
 80058f8:	f104 0a1a 	add.w	sl, r4, #26
 80058fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fe:	425b      	negs	r3, r3
 8005900:	454b      	cmp	r3, r9
 8005902:	dc01      	bgt.n	8005908 <_printf_float+0x2c4>
 8005904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005906:	e792      	b.n	800582e <_printf_float+0x1ea>
 8005908:	2301      	movs	r3, #1
 800590a:	4652      	mov	r2, sl
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f aef7 	beq.w	8005706 <_printf_float+0xc2>
 8005918:	f109 0901 	add.w	r9, r9, #1
 800591c:	e7ee      	b.n	80058fc <_printf_float+0x2b8>
 800591e:	bf00      	nop
 8005920:	7fefffff 	.word	0x7fefffff
 8005924:	080095f0 	.word	0x080095f0
 8005928:	080095f4 	.word	0x080095f4
 800592c:	080095fc 	.word	0x080095fc
 8005930:	080095f8 	.word	0x080095f8
 8005934:	08009600 	.word	0x08009600
 8005938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800593a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800593c:	429a      	cmp	r2, r3
 800593e:	bfa8      	it	ge
 8005940:	461a      	movge	r2, r3
 8005942:	2a00      	cmp	r2, #0
 8005944:	4691      	mov	r9, r2
 8005946:	dc37      	bgt.n	80059b8 <_printf_float+0x374>
 8005948:	f04f 0b00 	mov.w	fp, #0
 800594c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005950:	f104 021a 	add.w	r2, r4, #26
 8005954:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005956:	9305      	str	r3, [sp, #20]
 8005958:	eba3 0309 	sub.w	r3, r3, r9
 800595c:	455b      	cmp	r3, fp
 800595e:	dc33      	bgt.n	80059c8 <_printf_float+0x384>
 8005960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005964:	429a      	cmp	r2, r3
 8005966:	db3b      	blt.n	80059e0 <_printf_float+0x39c>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07da      	lsls	r2, r3, #31
 800596c:	d438      	bmi.n	80059e0 <_printf_float+0x39c>
 800596e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005970:	9b05      	ldr	r3, [sp, #20]
 8005972:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	eba2 0901 	sub.w	r9, r2, r1
 800597a:	4599      	cmp	r9, r3
 800597c:	bfa8      	it	ge
 800597e:	4699      	movge	r9, r3
 8005980:	f1b9 0f00 	cmp.w	r9, #0
 8005984:	dc35      	bgt.n	80059f2 <_printf_float+0x3ae>
 8005986:	f04f 0800 	mov.w	r8, #0
 800598a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800598e:	f104 0a1a 	add.w	sl, r4, #26
 8005992:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	eba3 0309 	sub.w	r3, r3, r9
 800599c:	4543      	cmp	r3, r8
 800599e:	f77f af79 	ble.w	8005894 <_printf_float+0x250>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f aeaa 	beq.w	8005706 <_printf_float+0xc2>
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	e7ec      	b.n	8005992 <_printf_float+0x34e>
 80059b8:	4613      	mov	r3, r2
 80059ba:	4631      	mov	r1, r6
 80059bc:	4642      	mov	r2, r8
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	d1c0      	bne.n	8005948 <_printf_float+0x304>
 80059c6:	e69e      	b.n	8005706 <_printf_float+0xc2>
 80059c8:	2301      	movs	r3, #1
 80059ca:	4631      	mov	r1, r6
 80059cc:	4628      	mov	r0, r5
 80059ce:	9205      	str	r2, [sp, #20]
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f ae97 	beq.w	8005706 <_printf_float+0xc2>
 80059d8:	9a05      	ldr	r2, [sp, #20]
 80059da:	f10b 0b01 	add.w	fp, fp, #1
 80059de:	e7b9      	b.n	8005954 <_printf_float+0x310>
 80059e0:	ee18 3a10 	vmov	r3, s16
 80059e4:	4652      	mov	r2, sl
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b8      	blx	r7
 80059ec:	3001      	adds	r0, #1
 80059ee:	d1be      	bne.n	800596e <_printf_float+0x32a>
 80059f0:	e689      	b.n	8005706 <_printf_float+0xc2>
 80059f2:	9a05      	ldr	r2, [sp, #20]
 80059f4:	464b      	mov	r3, r9
 80059f6:	4442      	add	r2, r8
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	d1c1      	bne.n	8005986 <_printf_float+0x342>
 8005a02:	e680      	b.n	8005706 <_printf_float+0xc2>
 8005a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a06:	2a01      	cmp	r2, #1
 8005a08:	dc01      	bgt.n	8005a0e <_printf_float+0x3ca>
 8005a0a:	07db      	lsls	r3, r3, #31
 8005a0c:	d538      	bpl.n	8005a80 <_printf_float+0x43c>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4642      	mov	r2, r8
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f43f ae74 	beq.w	8005706 <_printf_float+0xc2>
 8005a1e:	ee18 3a10 	vmov	r3, s16
 8005a22:	4652      	mov	r2, sl
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f43f ae6b 	beq.w	8005706 <_printf_float+0xc2>
 8005a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a34:	2200      	movs	r2, #0
 8005a36:	2300      	movs	r3, #0
 8005a38:	f7fb f866 	bl	8000b08 <__aeabi_dcmpeq>
 8005a3c:	b9d8      	cbnz	r0, 8005a76 <_printf_float+0x432>
 8005a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a40:	f108 0201 	add.w	r2, r8, #1
 8005a44:	3b01      	subs	r3, #1
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d10e      	bne.n	8005a6e <_printf_float+0x42a>
 8005a50:	e659      	b.n	8005706 <_printf_float+0xc2>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4652      	mov	r2, sl
 8005a56:	4631      	mov	r1, r6
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b8      	blx	r7
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f ae52 	beq.w	8005706 <_printf_float+0xc2>
 8005a62:	f108 0801 	add.w	r8, r8, #1
 8005a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	4543      	cmp	r3, r8
 8005a6c:	dcf1      	bgt.n	8005a52 <_printf_float+0x40e>
 8005a6e:	464b      	mov	r3, r9
 8005a70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a74:	e6dc      	b.n	8005830 <_printf_float+0x1ec>
 8005a76:	f04f 0800 	mov.w	r8, #0
 8005a7a:	f104 0a1a 	add.w	sl, r4, #26
 8005a7e:	e7f2      	b.n	8005a66 <_printf_float+0x422>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4642      	mov	r2, r8
 8005a84:	e7df      	b.n	8005a46 <_printf_float+0x402>
 8005a86:	2301      	movs	r3, #1
 8005a88:	464a      	mov	r2, r9
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f ae38 	beq.w	8005706 <_printf_float+0xc2>
 8005a96:	f108 0801 	add.w	r8, r8, #1
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a9e:	1a5b      	subs	r3, r3, r1
 8005aa0:	4543      	cmp	r3, r8
 8005aa2:	dcf0      	bgt.n	8005a86 <_printf_float+0x442>
 8005aa4:	e6fa      	b.n	800589c <_printf_float+0x258>
 8005aa6:	f04f 0800 	mov.w	r8, #0
 8005aaa:	f104 0919 	add.w	r9, r4, #25
 8005aae:	e7f4      	b.n	8005a9a <_printf_float+0x456>

08005ab0 <_printf_common>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	4699      	mov	r9, r3
 8005ab8:	688a      	ldr	r2, [r1, #8]
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	bfb8      	it	lt
 8005ac4:	4613      	movlt	r3, r2
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005acc:	4607      	mov	r7, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	b10a      	cbz	r2, 8005ad6 <_printf_common+0x26>
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	0699      	lsls	r1, r3, #26
 8005ada:	bf42      	ittt	mi
 8005adc:	6833      	ldrmi	r3, [r6, #0]
 8005ade:	3302      	addmi	r3, #2
 8005ae0:	6033      	strmi	r3, [r6, #0]
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	f015 0506 	ands.w	r5, r5, #6
 8005ae8:	d106      	bne.n	8005af8 <_printf_common+0x48>
 8005aea:	f104 0a19 	add.w	sl, r4, #25
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	6832      	ldr	r2, [r6, #0]
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dc26      	bgt.n	8005b46 <_printf_common+0x96>
 8005af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005afc:	1e13      	subs	r3, r2, #0
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	bf18      	it	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	0692      	lsls	r2, r2, #26
 8005b06:	d42b      	bmi.n	8005b60 <_printf_common+0xb0>
 8005b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4638      	mov	r0, r7
 8005b10:	47c0      	blx	r8
 8005b12:	3001      	adds	r0, #1
 8005b14:	d01e      	beq.n	8005b54 <_printf_common+0xa4>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	68e5      	ldr	r5, [r4, #12]
 8005b1a:	6832      	ldr	r2, [r6, #0]
 8005b1c:	f003 0306 	and.w	r3, r3, #6
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	bf08      	it	eq
 8005b24:	1aad      	subeq	r5, r5, r2
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	6922      	ldr	r2, [r4, #16]
 8005b2a:	bf0c      	ite	eq
 8005b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b30:	2500      	movne	r5, #0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bfc4      	itt	gt
 8005b36:	1a9b      	subgt	r3, r3, r2
 8005b38:	18ed      	addgt	r5, r5, r3
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	341a      	adds	r4, #26
 8005b3e:	42b5      	cmp	r5, r6
 8005b40:	d11a      	bne.n	8005b78 <_printf_common+0xc8>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e008      	b.n	8005b58 <_printf_common+0xa8>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4652      	mov	r2, sl
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	47c0      	blx	r8
 8005b50:	3001      	adds	r0, #1
 8005b52:	d103      	bne.n	8005b5c <_printf_common+0xac>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	e7c6      	b.n	8005aee <_printf_common+0x3e>
 8005b60:	18e1      	adds	r1, r4, r3
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	2030      	movs	r0, #48	; 0x30
 8005b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6a:	4422      	add	r2, r4
 8005b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b74:	3302      	adds	r3, #2
 8005b76:	e7c7      	b.n	8005b08 <_printf_common+0x58>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4638      	mov	r0, r7
 8005b80:	47c0      	blx	r8
 8005b82:	3001      	adds	r0, #1
 8005b84:	d0e6      	beq.n	8005b54 <_printf_common+0xa4>
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7d9      	b.n	8005b3e <_printf_common+0x8e>
	...

08005b8c <_printf_i>:
 8005b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	460c      	mov	r4, r1
 8005b92:	4691      	mov	r9, r2
 8005b94:	7e27      	ldrb	r7, [r4, #24]
 8005b96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b98:	2f78      	cmp	r7, #120	; 0x78
 8005b9a:	4680      	mov	r8, r0
 8005b9c:	469a      	mov	sl, r3
 8005b9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba2:	d807      	bhi.n	8005bb4 <_printf_i+0x28>
 8005ba4:	2f62      	cmp	r7, #98	; 0x62
 8005ba6:	d80a      	bhi.n	8005bbe <_printf_i+0x32>
 8005ba8:	2f00      	cmp	r7, #0
 8005baa:	f000 80d8 	beq.w	8005d5e <_printf_i+0x1d2>
 8005bae:	2f58      	cmp	r7, #88	; 0x58
 8005bb0:	f000 80a3 	beq.w	8005cfa <_printf_i+0x16e>
 8005bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bbc:	e03a      	b.n	8005c34 <_printf_i+0xa8>
 8005bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bc2:	2b15      	cmp	r3, #21
 8005bc4:	d8f6      	bhi.n	8005bb4 <_printf_i+0x28>
 8005bc6:	a001      	add	r0, pc, #4	; (adr r0, 8005bcc <_printf_i+0x40>)
 8005bc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c39 	.word	0x08005c39
 8005bd4:	08005bb5 	.word	0x08005bb5
 8005bd8:	08005bb5 	.word	0x08005bb5
 8005bdc:	08005bb5 	.word	0x08005bb5
 8005be0:	08005bb5 	.word	0x08005bb5
 8005be4:	08005c39 	.word	0x08005c39
 8005be8:	08005bb5 	.word	0x08005bb5
 8005bec:	08005bb5 	.word	0x08005bb5
 8005bf0:	08005bb5 	.word	0x08005bb5
 8005bf4:	08005bb5 	.word	0x08005bb5
 8005bf8:	08005d45 	.word	0x08005d45
 8005bfc:	08005c69 	.word	0x08005c69
 8005c00:	08005d27 	.word	0x08005d27
 8005c04:	08005bb5 	.word	0x08005bb5
 8005c08:	08005bb5 	.word	0x08005bb5
 8005c0c:	08005d67 	.word	0x08005d67
 8005c10:	08005bb5 	.word	0x08005bb5
 8005c14:	08005c69 	.word	0x08005c69
 8005c18:	08005bb5 	.word	0x08005bb5
 8005c1c:	08005bb5 	.word	0x08005bb5
 8005c20:	08005d2f 	.word	0x08005d2f
 8005c24:	680b      	ldr	r3, [r1, #0]
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	600a      	str	r2, [r1, #0]
 8005c2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0a3      	b.n	8005d80 <_printf_i+0x1f4>
 8005c38:	6825      	ldr	r5, [r4, #0]
 8005c3a:	6808      	ldr	r0, [r1, #0]
 8005c3c:	062e      	lsls	r6, r5, #24
 8005c3e:	f100 0304 	add.w	r3, r0, #4
 8005c42:	d50a      	bpl.n	8005c5a <_printf_i+0xce>
 8005c44:	6805      	ldr	r5, [r0, #0]
 8005c46:	600b      	str	r3, [r1, #0]
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	da03      	bge.n	8005c54 <_printf_i+0xc8>
 8005c4c:	232d      	movs	r3, #45	; 0x2d
 8005c4e:	426d      	negs	r5, r5
 8005c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c54:	485e      	ldr	r0, [pc, #376]	; (8005dd0 <_printf_i+0x244>)
 8005c56:	230a      	movs	r3, #10
 8005c58:	e019      	b.n	8005c8e <_printf_i+0x102>
 8005c5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c5e:	6805      	ldr	r5, [r0, #0]
 8005c60:	600b      	str	r3, [r1, #0]
 8005c62:	bf18      	it	ne
 8005c64:	b22d      	sxthne	r5, r5
 8005c66:	e7ef      	b.n	8005c48 <_printf_i+0xbc>
 8005c68:	680b      	ldr	r3, [r1, #0]
 8005c6a:	6825      	ldr	r5, [r4, #0]
 8005c6c:	1d18      	adds	r0, r3, #4
 8005c6e:	6008      	str	r0, [r1, #0]
 8005c70:	0628      	lsls	r0, r5, #24
 8005c72:	d501      	bpl.n	8005c78 <_printf_i+0xec>
 8005c74:	681d      	ldr	r5, [r3, #0]
 8005c76:	e002      	b.n	8005c7e <_printf_i+0xf2>
 8005c78:	0669      	lsls	r1, r5, #25
 8005c7a:	d5fb      	bpl.n	8005c74 <_printf_i+0xe8>
 8005c7c:	881d      	ldrh	r5, [r3, #0]
 8005c7e:	4854      	ldr	r0, [pc, #336]	; (8005dd0 <_printf_i+0x244>)
 8005c80:	2f6f      	cmp	r7, #111	; 0x6f
 8005c82:	bf0c      	ite	eq
 8005c84:	2308      	moveq	r3, #8
 8005c86:	230a      	movne	r3, #10
 8005c88:	2100      	movs	r1, #0
 8005c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c8e:	6866      	ldr	r6, [r4, #4]
 8005c90:	60a6      	str	r6, [r4, #8]
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	bfa2      	ittt	ge
 8005c96:	6821      	ldrge	r1, [r4, #0]
 8005c98:	f021 0104 	bicge.w	r1, r1, #4
 8005c9c:	6021      	strge	r1, [r4, #0]
 8005c9e:	b90d      	cbnz	r5, 8005ca4 <_printf_i+0x118>
 8005ca0:	2e00      	cmp	r6, #0
 8005ca2:	d04d      	beq.n	8005d40 <_printf_i+0x1b4>
 8005ca4:	4616      	mov	r6, r2
 8005ca6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005caa:	fb03 5711 	mls	r7, r3, r1, r5
 8005cae:	5dc7      	ldrb	r7, [r0, r7]
 8005cb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cb4:	462f      	mov	r7, r5
 8005cb6:	42bb      	cmp	r3, r7
 8005cb8:	460d      	mov	r5, r1
 8005cba:	d9f4      	bls.n	8005ca6 <_printf_i+0x11a>
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d10b      	bne.n	8005cd8 <_printf_i+0x14c>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	07df      	lsls	r7, r3, #31
 8005cc4:	d508      	bpl.n	8005cd8 <_printf_i+0x14c>
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	6861      	ldr	r1, [r4, #4]
 8005cca:	4299      	cmp	r1, r3
 8005ccc:	bfde      	ittt	le
 8005cce:	2330      	movle	r3, #48	; 0x30
 8005cd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cd8:	1b92      	subs	r2, r2, r6
 8005cda:	6122      	str	r2, [r4, #16]
 8005cdc:	f8cd a000 	str.w	sl, [sp]
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	aa03      	add	r2, sp, #12
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	f7ff fee2 	bl	8005ab0 <_printf_common>
 8005cec:	3001      	adds	r0, #1
 8005cee:	d14c      	bne.n	8005d8a <_printf_i+0x1fe>
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	b004      	add	sp, #16
 8005cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfa:	4835      	ldr	r0, [pc, #212]	; (8005dd0 <_printf_i+0x244>)
 8005cfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	680e      	ldr	r6, [r1, #0]
 8005d04:	061f      	lsls	r7, r3, #24
 8005d06:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d0a:	600e      	str	r6, [r1, #0]
 8005d0c:	d514      	bpl.n	8005d38 <_printf_i+0x1ac>
 8005d0e:	07d9      	lsls	r1, r3, #31
 8005d10:	bf44      	itt	mi
 8005d12:	f043 0320 	orrmi.w	r3, r3, #32
 8005d16:	6023      	strmi	r3, [r4, #0]
 8005d18:	b91d      	cbnz	r5, 8005d22 <_printf_i+0x196>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	f023 0320 	bic.w	r3, r3, #32
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	2310      	movs	r3, #16
 8005d24:	e7b0      	b.n	8005c88 <_printf_i+0xfc>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	f043 0320 	orr.w	r3, r3, #32
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	2378      	movs	r3, #120	; 0x78
 8005d30:	4828      	ldr	r0, [pc, #160]	; (8005dd4 <_printf_i+0x248>)
 8005d32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d36:	e7e3      	b.n	8005d00 <_printf_i+0x174>
 8005d38:	065e      	lsls	r6, r3, #25
 8005d3a:	bf48      	it	mi
 8005d3c:	b2ad      	uxthmi	r5, r5
 8005d3e:	e7e6      	b.n	8005d0e <_printf_i+0x182>
 8005d40:	4616      	mov	r6, r2
 8005d42:	e7bb      	b.n	8005cbc <_printf_i+0x130>
 8005d44:	680b      	ldr	r3, [r1, #0]
 8005d46:	6826      	ldr	r6, [r4, #0]
 8005d48:	6960      	ldr	r0, [r4, #20]
 8005d4a:	1d1d      	adds	r5, r3, #4
 8005d4c:	600d      	str	r5, [r1, #0]
 8005d4e:	0635      	lsls	r5, r6, #24
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	d501      	bpl.n	8005d58 <_printf_i+0x1cc>
 8005d54:	6018      	str	r0, [r3, #0]
 8005d56:	e002      	b.n	8005d5e <_printf_i+0x1d2>
 8005d58:	0671      	lsls	r1, r6, #25
 8005d5a:	d5fb      	bpl.n	8005d54 <_printf_i+0x1c8>
 8005d5c:	8018      	strh	r0, [r3, #0]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6123      	str	r3, [r4, #16]
 8005d62:	4616      	mov	r6, r2
 8005d64:	e7ba      	b.n	8005cdc <_printf_i+0x150>
 8005d66:	680b      	ldr	r3, [r1, #0]
 8005d68:	1d1a      	adds	r2, r3, #4
 8005d6a:	600a      	str	r2, [r1, #0]
 8005d6c:	681e      	ldr	r6, [r3, #0]
 8005d6e:	6862      	ldr	r2, [r4, #4]
 8005d70:	2100      	movs	r1, #0
 8005d72:	4630      	mov	r0, r6
 8005d74:	f7fa fa54 	bl	8000220 <memchr>
 8005d78:	b108      	cbz	r0, 8005d7e <_printf_i+0x1f2>
 8005d7a:	1b80      	subs	r0, r0, r6
 8005d7c:	6060      	str	r0, [r4, #4]
 8005d7e:	6863      	ldr	r3, [r4, #4]
 8005d80:	6123      	str	r3, [r4, #16]
 8005d82:	2300      	movs	r3, #0
 8005d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d88:	e7a8      	b.n	8005cdc <_printf_i+0x150>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	4649      	mov	r1, r9
 8005d90:	4640      	mov	r0, r8
 8005d92:	47d0      	blx	sl
 8005d94:	3001      	adds	r0, #1
 8005d96:	d0ab      	beq.n	8005cf0 <_printf_i+0x164>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	079b      	lsls	r3, r3, #30
 8005d9c:	d413      	bmi.n	8005dc6 <_printf_i+0x23a>
 8005d9e:	68e0      	ldr	r0, [r4, #12]
 8005da0:	9b03      	ldr	r3, [sp, #12]
 8005da2:	4298      	cmp	r0, r3
 8005da4:	bfb8      	it	lt
 8005da6:	4618      	movlt	r0, r3
 8005da8:	e7a4      	b.n	8005cf4 <_printf_i+0x168>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4632      	mov	r2, r6
 8005dae:	4649      	mov	r1, r9
 8005db0:	4640      	mov	r0, r8
 8005db2:	47d0      	blx	sl
 8005db4:	3001      	adds	r0, #1
 8005db6:	d09b      	beq.n	8005cf0 <_printf_i+0x164>
 8005db8:	3501      	adds	r5, #1
 8005dba:	68e3      	ldr	r3, [r4, #12]
 8005dbc:	9903      	ldr	r1, [sp, #12]
 8005dbe:	1a5b      	subs	r3, r3, r1
 8005dc0:	42ab      	cmp	r3, r5
 8005dc2:	dcf2      	bgt.n	8005daa <_printf_i+0x21e>
 8005dc4:	e7eb      	b.n	8005d9e <_printf_i+0x212>
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	f104 0619 	add.w	r6, r4, #25
 8005dcc:	e7f5      	b.n	8005dba <_printf_i+0x22e>
 8005dce:	bf00      	nop
 8005dd0:	08009602 	.word	0x08009602
 8005dd4:	08009613 	.word	0x08009613

08005dd8 <iprintf>:
 8005dd8:	b40f      	push	{r0, r1, r2, r3}
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <iprintf+0x2c>)
 8005ddc:	b513      	push	{r0, r1, r4, lr}
 8005dde:	681c      	ldr	r4, [r3, #0]
 8005de0:	b124      	cbz	r4, 8005dec <iprintf+0x14>
 8005de2:	69a3      	ldr	r3, [r4, #24]
 8005de4:	b913      	cbnz	r3, 8005dec <iprintf+0x14>
 8005de6:	4620      	mov	r0, r4
 8005de8:	f001 f8d8 	bl	8006f9c <__sinit>
 8005dec:	ab05      	add	r3, sp, #20
 8005dee:	9a04      	ldr	r2, [sp, #16]
 8005df0:	68a1      	ldr	r1, [r4, #8]
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	4620      	mov	r0, r4
 8005df6:	f001 fe53 	bl	8007aa0 <_vfiprintf_r>
 8005dfa:	b002      	add	sp, #8
 8005dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e00:	b004      	add	sp, #16
 8005e02:	4770      	bx	lr
 8005e04:	2000000c 	.word	0x2000000c

08005e08 <_puts_r>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	460e      	mov	r6, r1
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	b118      	cbz	r0, 8005e18 <_puts_r+0x10>
 8005e10:	6983      	ldr	r3, [r0, #24]
 8005e12:	b90b      	cbnz	r3, 8005e18 <_puts_r+0x10>
 8005e14:	f001 f8c2 	bl	8006f9c <__sinit>
 8005e18:	69ab      	ldr	r3, [r5, #24]
 8005e1a:	68ac      	ldr	r4, [r5, #8]
 8005e1c:	b913      	cbnz	r3, 8005e24 <_puts_r+0x1c>
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f001 f8bc 	bl	8006f9c <__sinit>
 8005e24:	4b2c      	ldr	r3, [pc, #176]	; (8005ed8 <_puts_r+0xd0>)
 8005e26:	429c      	cmp	r4, r3
 8005e28:	d120      	bne.n	8005e6c <_puts_r+0x64>
 8005e2a:	686c      	ldr	r4, [r5, #4]
 8005e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e2e:	07db      	lsls	r3, r3, #31
 8005e30:	d405      	bmi.n	8005e3e <_puts_r+0x36>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	0598      	lsls	r0, r3, #22
 8005e36:	d402      	bmi.n	8005e3e <_puts_r+0x36>
 8005e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e3a:	f001 f952 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	0719      	lsls	r1, r3, #28
 8005e42:	d51d      	bpl.n	8005e80 <_puts_r+0x78>
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	b1db      	cbz	r3, 8005e80 <_puts_r+0x78>
 8005e48:	3e01      	subs	r6, #1
 8005e4a:	68a3      	ldr	r3, [r4, #8]
 8005e4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e50:	3b01      	subs	r3, #1
 8005e52:	60a3      	str	r3, [r4, #8]
 8005e54:	bb39      	cbnz	r1, 8005ea6 <_puts_r+0x9e>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da38      	bge.n	8005ecc <_puts_r+0xc4>
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	210a      	movs	r1, #10
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 f848 	bl	8005ef4 <__swbuf_r>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d011      	beq.n	8005e8c <_puts_r+0x84>
 8005e68:	250a      	movs	r5, #10
 8005e6a:	e011      	b.n	8005e90 <_puts_r+0x88>
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <_puts_r+0xd4>)
 8005e6e:	429c      	cmp	r4, r3
 8005e70:	d101      	bne.n	8005e76 <_puts_r+0x6e>
 8005e72:	68ac      	ldr	r4, [r5, #8]
 8005e74:	e7da      	b.n	8005e2c <_puts_r+0x24>
 8005e76:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <_puts_r+0xd8>)
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	bf08      	it	eq
 8005e7c:	68ec      	ldreq	r4, [r5, #12]
 8005e7e:	e7d5      	b.n	8005e2c <_puts_r+0x24>
 8005e80:	4621      	mov	r1, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 f888 	bl	8005f98 <__swsetup_r>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d0dd      	beq.n	8005e48 <_puts_r+0x40>
 8005e8c:	f04f 35ff 	mov.w	r5, #4294967295
 8005e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e92:	07da      	lsls	r2, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_puts_r+0x9a>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	059b      	lsls	r3, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_puts_r+0x9a>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9e:	f001 f921 	bl	80070e4 <__retarget_lock_release_recursive>
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da04      	bge.n	8005eb4 <_puts_r+0xac>
 8005eaa:	69a2      	ldr	r2, [r4, #24]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	dc06      	bgt.n	8005ebe <_puts_r+0xb6>
 8005eb0:	290a      	cmp	r1, #10
 8005eb2:	d004      	beq.n	8005ebe <_puts_r+0xb6>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	7019      	strb	r1, [r3, #0]
 8005ebc:	e7c5      	b.n	8005e4a <_puts_r+0x42>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f817 	bl	8005ef4 <__swbuf_r>
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d1bf      	bne.n	8005e4a <_puts_r+0x42>
 8005eca:	e7df      	b.n	8005e8c <_puts_r+0x84>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	250a      	movs	r5, #10
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	6022      	str	r2, [r4, #0]
 8005ed4:	701d      	strb	r5, [r3, #0]
 8005ed6:	e7db      	b.n	8005e90 <_puts_r+0x88>
 8005ed8:	080096d8 	.word	0x080096d8
 8005edc:	080096f8 	.word	0x080096f8
 8005ee0:	080096b8 	.word	0x080096b8

08005ee4 <puts>:
 8005ee4:	4b02      	ldr	r3, [pc, #8]	; (8005ef0 <puts+0xc>)
 8005ee6:	4601      	mov	r1, r0
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	f7ff bf8d 	b.w	8005e08 <_puts_r>
 8005eee:	bf00      	nop
 8005ef0:	2000000c 	.word	0x2000000c

08005ef4 <__swbuf_r>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	460e      	mov	r6, r1
 8005ef8:	4614      	mov	r4, r2
 8005efa:	4605      	mov	r5, r0
 8005efc:	b118      	cbz	r0, 8005f06 <__swbuf_r+0x12>
 8005efe:	6983      	ldr	r3, [r0, #24]
 8005f00:	b90b      	cbnz	r3, 8005f06 <__swbuf_r+0x12>
 8005f02:	f001 f84b 	bl	8006f9c <__sinit>
 8005f06:	4b21      	ldr	r3, [pc, #132]	; (8005f8c <__swbuf_r+0x98>)
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d12b      	bne.n	8005f64 <__swbuf_r+0x70>
 8005f0c:	686c      	ldr	r4, [r5, #4]
 8005f0e:	69a3      	ldr	r3, [r4, #24]
 8005f10:	60a3      	str	r3, [r4, #8]
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	071a      	lsls	r2, r3, #28
 8005f16:	d52f      	bpl.n	8005f78 <__swbuf_r+0x84>
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	b36b      	cbz	r3, 8005f78 <__swbuf_r+0x84>
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	1ac0      	subs	r0, r0, r3
 8005f22:	6963      	ldr	r3, [r4, #20]
 8005f24:	b2f6      	uxtb	r6, r6
 8005f26:	4283      	cmp	r3, r0
 8005f28:	4637      	mov	r7, r6
 8005f2a:	dc04      	bgt.n	8005f36 <__swbuf_r+0x42>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 ffa0 	bl	8006e74 <_fflush_r>
 8005f34:	bb30      	cbnz	r0, 8005f84 <__swbuf_r+0x90>
 8005f36:	68a3      	ldr	r3, [r4, #8]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60a3      	str	r3, [r4, #8]
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	6022      	str	r2, [r4, #0]
 8005f42:	701e      	strb	r6, [r3, #0]
 8005f44:	6963      	ldr	r3, [r4, #20]
 8005f46:	3001      	adds	r0, #1
 8005f48:	4283      	cmp	r3, r0
 8005f4a:	d004      	beq.n	8005f56 <__swbuf_r+0x62>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	07db      	lsls	r3, r3, #31
 8005f50:	d506      	bpl.n	8005f60 <__swbuf_r+0x6c>
 8005f52:	2e0a      	cmp	r6, #10
 8005f54:	d104      	bne.n	8005f60 <__swbuf_r+0x6c>
 8005f56:	4621      	mov	r1, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 ff8b 	bl	8006e74 <_fflush_r>
 8005f5e:	b988      	cbnz	r0, 8005f84 <__swbuf_r+0x90>
 8005f60:	4638      	mov	r0, r7
 8005f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <__swbuf_r+0x9c>)
 8005f66:	429c      	cmp	r4, r3
 8005f68:	d101      	bne.n	8005f6e <__swbuf_r+0x7a>
 8005f6a:	68ac      	ldr	r4, [r5, #8]
 8005f6c:	e7cf      	b.n	8005f0e <__swbuf_r+0x1a>
 8005f6e:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <__swbuf_r+0xa0>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	bf08      	it	eq
 8005f74:	68ec      	ldreq	r4, [r5, #12]
 8005f76:	e7ca      	b.n	8005f0e <__swbuf_r+0x1a>
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 f80c 	bl	8005f98 <__swsetup_r>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d0cb      	beq.n	8005f1c <__swbuf_r+0x28>
 8005f84:	f04f 37ff 	mov.w	r7, #4294967295
 8005f88:	e7ea      	b.n	8005f60 <__swbuf_r+0x6c>
 8005f8a:	bf00      	nop
 8005f8c:	080096d8 	.word	0x080096d8
 8005f90:	080096f8 	.word	0x080096f8
 8005f94:	080096b8 	.word	0x080096b8

08005f98 <__swsetup_r>:
 8005f98:	4b32      	ldr	r3, [pc, #200]	; (8006064 <__swsetup_r+0xcc>)
 8005f9a:	b570      	push	{r4, r5, r6, lr}
 8005f9c:	681d      	ldr	r5, [r3, #0]
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	b125      	cbz	r5, 8005fae <__swsetup_r+0x16>
 8005fa4:	69ab      	ldr	r3, [r5, #24]
 8005fa6:	b913      	cbnz	r3, 8005fae <__swsetup_r+0x16>
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 fff7 	bl	8006f9c <__sinit>
 8005fae:	4b2e      	ldr	r3, [pc, #184]	; (8006068 <__swsetup_r+0xd0>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d10f      	bne.n	8005fd4 <__swsetup_r+0x3c>
 8005fb4:	686c      	ldr	r4, [r5, #4]
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fbc:	0719      	lsls	r1, r3, #28
 8005fbe:	d42c      	bmi.n	800601a <__swsetup_r+0x82>
 8005fc0:	06dd      	lsls	r5, r3, #27
 8005fc2:	d411      	bmi.n	8005fe8 <__swsetup_r+0x50>
 8005fc4:	2309      	movs	r3, #9
 8005fc6:	6033      	str	r3, [r6, #0]
 8005fc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd2:	e03e      	b.n	8006052 <__swsetup_r+0xba>
 8005fd4:	4b25      	ldr	r3, [pc, #148]	; (800606c <__swsetup_r+0xd4>)
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	d101      	bne.n	8005fde <__swsetup_r+0x46>
 8005fda:	68ac      	ldr	r4, [r5, #8]
 8005fdc:	e7eb      	b.n	8005fb6 <__swsetup_r+0x1e>
 8005fde:	4b24      	ldr	r3, [pc, #144]	; (8006070 <__swsetup_r+0xd8>)
 8005fe0:	429c      	cmp	r4, r3
 8005fe2:	bf08      	it	eq
 8005fe4:	68ec      	ldreq	r4, [r5, #12]
 8005fe6:	e7e6      	b.n	8005fb6 <__swsetup_r+0x1e>
 8005fe8:	0758      	lsls	r0, r3, #29
 8005fea:	d512      	bpl.n	8006012 <__swsetup_r+0x7a>
 8005fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fee:	b141      	cbz	r1, 8006002 <__swsetup_r+0x6a>
 8005ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ff4:	4299      	cmp	r1, r3
 8005ff6:	d002      	beq.n	8005ffe <__swsetup_r+0x66>
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f001 fc7d 	bl	80078f8 <_free_r>
 8005ffe:	2300      	movs	r3, #0
 8006000:	6363      	str	r3, [r4, #52]	; 0x34
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	2300      	movs	r3, #0
 800600c:	6063      	str	r3, [r4, #4]
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f043 0308 	orr.w	r3, r3, #8
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	b94b      	cbnz	r3, 8006032 <__swsetup_r+0x9a>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006028:	d003      	beq.n	8006032 <__swsetup_r+0x9a>
 800602a:	4621      	mov	r1, r4
 800602c:	4630      	mov	r0, r6
 800602e:	f001 f87f 	bl	8007130 <__smakebuf_r>
 8006032:	89a0      	ldrh	r0, [r4, #12]
 8006034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006038:	f010 0301 	ands.w	r3, r0, #1
 800603c:	d00a      	beq.n	8006054 <__swsetup_r+0xbc>
 800603e:	2300      	movs	r3, #0
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	6963      	ldr	r3, [r4, #20]
 8006044:	425b      	negs	r3, r3
 8006046:	61a3      	str	r3, [r4, #24]
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	b943      	cbnz	r3, 800605e <__swsetup_r+0xc6>
 800604c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006050:	d1ba      	bne.n	8005fc8 <__swsetup_r+0x30>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	0781      	lsls	r1, r0, #30
 8006056:	bf58      	it	pl
 8006058:	6963      	ldrpl	r3, [r4, #20]
 800605a:	60a3      	str	r3, [r4, #8]
 800605c:	e7f4      	b.n	8006048 <__swsetup_r+0xb0>
 800605e:	2000      	movs	r0, #0
 8006060:	e7f7      	b.n	8006052 <__swsetup_r+0xba>
 8006062:	bf00      	nop
 8006064:	2000000c 	.word	0x2000000c
 8006068:	080096d8 	.word	0x080096d8
 800606c:	080096f8 	.word	0x080096f8
 8006070:	080096b8 	.word	0x080096b8

08006074 <quorem>:
 8006074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	6903      	ldr	r3, [r0, #16]
 800607a:	690c      	ldr	r4, [r1, #16]
 800607c:	42a3      	cmp	r3, r4
 800607e:	4607      	mov	r7, r0
 8006080:	f2c0 8081 	blt.w	8006186 <quorem+0x112>
 8006084:	3c01      	subs	r4, #1
 8006086:	f101 0814 	add.w	r8, r1, #20
 800608a:	f100 0514 	add.w	r5, r0, #20
 800608e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800609c:	3301      	adds	r3, #1
 800609e:	429a      	cmp	r2, r3
 80060a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80060ac:	d331      	bcc.n	8006112 <quorem+0x9e>
 80060ae:	f04f 0e00 	mov.w	lr, #0
 80060b2:	4640      	mov	r0, r8
 80060b4:	46ac      	mov	ip, r5
 80060b6:	46f2      	mov	sl, lr
 80060b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80060bc:	b293      	uxth	r3, r2
 80060be:	fb06 e303 	mla	r3, r6, r3, lr
 80060c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ebaa 0303 	sub.w	r3, sl, r3
 80060cc:	0c12      	lsrs	r2, r2, #16
 80060ce:	f8dc a000 	ldr.w	sl, [ip]
 80060d2:	fb06 e202 	mla	r2, r6, r2, lr
 80060d6:	fa13 f38a 	uxtah	r3, r3, sl
 80060da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060de:	fa1f fa82 	uxth.w	sl, r2
 80060e2:	f8dc 2000 	ldr.w	r2, [ip]
 80060e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80060ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060f4:	4581      	cmp	r9, r0
 80060f6:	f84c 3b04 	str.w	r3, [ip], #4
 80060fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060fe:	d2db      	bcs.n	80060b8 <quorem+0x44>
 8006100:	f855 300b 	ldr.w	r3, [r5, fp]
 8006104:	b92b      	cbnz	r3, 8006112 <quorem+0x9e>
 8006106:	9b01      	ldr	r3, [sp, #4]
 8006108:	3b04      	subs	r3, #4
 800610a:	429d      	cmp	r5, r3
 800610c:	461a      	mov	r2, r3
 800610e:	d32e      	bcc.n	800616e <quorem+0xfa>
 8006110:	613c      	str	r4, [r7, #16]
 8006112:	4638      	mov	r0, r7
 8006114:	f001 fae0 	bl	80076d8 <__mcmp>
 8006118:	2800      	cmp	r0, #0
 800611a:	db24      	blt.n	8006166 <quorem+0xf2>
 800611c:	3601      	adds	r6, #1
 800611e:	4628      	mov	r0, r5
 8006120:	f04f 0c00 	mov.w	ip, #0
 8006124:	f858 2b04 	ldr.w	r2, [r8], #4
 8006128:	f8d0 e000 	ldr.w	lr, [r0]
 800612c:	b293      	uxth	r3, r2
 800612e:	ebac 0303 	sub.w	r3, ip, r3
 8006132:	0c12      	lsrs	r2, r2, #16
 8006134:	fa13 f38e 	uxtah	r3, r3, lr
 8006138:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800613c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006140:	b29b      	uxth	r3, r3
 8006142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006146:	45c1      	cmp	r9, r8
 8006148:	f840 3b04 	str.w	r3, [r0], #4
 800614c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006150:	d2e8      	bcs.n	8006124 <quorem+0xb0>
 8006152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800615a:	b922      	cbnz	r2, 8006166 <quorem+0xf2>
 800615c:	3b04      	subs	r3, #4
 800615e:	429d      	cmp	r5, r3
 8006160:	461a      	mov	r2, r3
 8006162:	d30a      	bcc.n	800617a <quorem+0x106>
 8006164:	613c      	str	r4, [r7, #16]
 8006166:	4630      	mov	r0, r6
 8006168:	b003      	add	sp, #12
 800616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	3b04      	subs	r3, #4
 8006172:	2a00      	cmp	r2, #0
 8006174:	d1cc      	bne.n	8006110 <quorem+0x9c>
 8006176:	3c01      	subs	r4, #1
 8006178:	e7c7      	b.n	800610a <quorem+0x96>
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	3b04      	subs	r3, #4
 800617e:	2a00      	cmp	r2, #0
 8006180:	d1f0      	bne.n	8006164 <quorem+0xf0>
 8006182:	3c01      	subs	r4, #1
 8006184:	e7eb      	b.n	800615e <quorem+0xea>
 8006186:	2000      	movs	r0, #0
 8006188:	e7ee      	b.n	8006168 <quorem+0xf4>
 800618a:	0000      	movs	r0, r0
 800618c:	0000      	movs	r0, r0
	...

08006190 <_dtoa_r>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	ed2d 8b02 	vpush	{d8}
 8006198:	ec57 6b10 	vmov	r6, r7, d0
 800619c:	b095      	sub	sp, #84	; 0x54
 800619e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80061a4:	9105      	str	r1, [sp, #20]
 80061a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80061aa:	4604      	mov	r4, r0
 80061ac:	9209      	str	r2, [sp, #36]	; 0x24
 80061ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80061b0:	b975      	cbnz	r5, 80061d0 <_dtoa_r+0x40>
 80061b2:	2010      	movs	r0, #16
 80061b4:	f000 fffc 	bl	80071b0 <malloc>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6260      	str	r0, [r4, #36]	; 0x24
 80061bc:	b920      	cbnz	r0, 80061c8 <_dtoa_r+0x38>
 80061be:	4bb2      	ldr	r3, [pc, #712]	; (8006488 <_dtoa_r+0x2f8>)
 80061c0:	21ea      	movs	r1, #234	; 0xea
 80061c2:	48b2      	ldr	r0, [pc, #712]	; (800648c <_dtoa_r+0x2fc>)
 80061c4:	f001 fe02 	bl	8007dcc <__assert_func>
 80061c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061cc:	6005      	str	r5, [r0, #0]
 80061ce:	60c5      	str	r5, [r0, #12]
 80061d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	b151      	cbz	r1, 80061ec <_dtoa_r+0x5c>
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	604a      	str	r2, [r1, #4]
 80061da:	2301      	movs	r3, #1
 80061dc:	4093      	lsls	r3, r2
 80061de:	608b      	str	r3, [r1, #8]
 80061e0:	4620      	mov	r0, r4
 80061e2:	f001 f83b 	bl	800725c <_Bfree>
 80061e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	1e3b      	subs	r3, r7, #0
 80061ee:	bfb9      	ittee	lt
 80061f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061f4:	9303      	strlt	r3, [sp, #12]
 80061f6:	2300      	movge	r3, #0
 80061f8:	f8c8 3000 	strge.w	r3, [r8]
 80061fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006200:	4ba3      	ldr	r3, [pc, #652]	; (8006490 <_dtoa_r+0x300>)
 8006202:	bfbc      	itt	lt
 8006204:	2201      	movlt	r2, #1
 8006206:	f8c8 2000 	strlt.w	r2, [r8]
 800620a:	ea33 0309 	bics.w	r3, r3, r9
 800620e:	d11b      	bne.n	8006248 <_dtoa_r+0xb8>
 8006210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006212:	f242 730f 	movw	r3, #9999	; 0x270f
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800621c:	4333      	orrs	r3, r6
 800621e:	f000 857a 	beq.w	8006d16 <_dtoa_r+0xb86>
 8006222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006224:	b963      	cbnz	r3, 8006240 <_dtoa_r+0xb0>
 8006226:	4b9b      	ldr	r3, [pc, #620]	; (8006494 <_dtoa_r+0x304>)
 8006228:	e024      	b.n	8006274 <_dtoa_r+0xe4>
 800622a:	4b9b      	ldr	r3, [pc, #620]	; (8006498 <_dtoa_r+0x308>)
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	3308      	adds	r3, #8
 8006230:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	9800      	ldr	r0, [sp, #0]
 8006236:	b015      	add	sp, #84	; 0x54
 8006238:	ecbd 8b02 	vpop	{d8}
 800623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006240:	4b94      	ldr	r3, [pc, #592]	; (8006494 <_dtoa_r+0x304>)
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	3303      	adds	r3, #3
 8006246:	e7f3      	b.n	8006230 <_dtoa_r+0xa0>
 8006248:	ed9d 7b02 	vldr	d7, [sp, #8]
 800624c:	2200      	movs	r2, #0
 800624e:	ec51 0b17 	vmov	r0, r1, d7
 8006252:	2300      	movs	r3, #0
 8006254:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006258:	f7fa fc56 	bl	8000b08 <__aeabi_dcmpeq>
 800625c:	4680      	mov	r8, r0
 800625e:	b158      	cbz	r0, 8006278 <_dtoa_r+0xe8>
 8006260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006262:	2301      	movs	r3, #1
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8551 	beq.w	8006d10 <_dtoa_r+0xb80>
 800626e:	488b      	ldr	r0, [pc, #556]	; (800649c <_dtoa_r+0x30c>)
 8006270:	6018      	str	r0, [r3, #0]
 8006272:	1e43      	subs	r3, r0, #1
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	e7dd      	b.n	8006234 <_dtoa_r+0xa4>
 8006278:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800627c:	aa12      	add	r2, sp, #72	; 0x48
 800627e:	a913      	add	r1, sp, #76	; 0x4c
 8006280:	4620      	mov	r0, r4
 8006282:	f001 facd 	bl	8007820 <__d2b>
 8006286:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800628a:	4683      	mov	fp, r0
 800628c:	2d00      	cmp	r5, #0
 800628e:	d07c      	beq.n	800638a <_dtoa_r+0x1fa>
 8006290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006292:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800629a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800629e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80062a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80062a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062aa:	4b7d      	ldr	r3, [pc, #500]	; (80064a0 <_dtoa_r+0x310>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	4630      	mov	r0, r6
 80062b0:	4639      	mov	r1, r7
 80062b2:	f7fa f809 	bl	80002c8 <__aeabi_dsub>
 80062b6:	a36e      	add	r3, pc, #440	; (adr r3, 8006470 <_dtoa_r+0x2e0>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7fa f9bc 	bl	8000638 <__aeabi_dmul>
 80062c0:	a36d      	add	r3, pc, #436	; (adr r3, 8006478 <_dtoa_r+0x2e8>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7fa f801 	bl	80002cc <__adddf3>
 80062ca:	4606      	mov	r6, r0
 80062cc:	4628      	mov	r0, r5
 80062ce:	460f      	mov	r7, r1
 80062d0:	f7fa f948 	bl	8000564 <__aeabi_i2d>
 80062d4:	a36a      	add	r3, pc, #424	; (adr r3, 8006480 <_dtoa_r+0x2f0>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7fa f9ad 	bl	8000638 <__aeabi_dmul>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4630      	mov	r0, r6
 80062e4:	4639      	mov	r1, r7
 80062e6:	f7f9 fff1 	bl	80002cc <__adddf3>
 80062ea:	4606      	mov	r6, r0
 80062ec:	460f      	mov	r7, r1
 80062ee:	f7fa fc53 	bl	8000b98 <__aeabi_d2iz>
 80062f2:	2200      	movs	r2, #0
 80062f4:	4682      	mov	sl, r0
 80062f6:	2300      	movs	r3, #0
 80062f8:	4630      	mov	r0, r6
 80062fa:	4639      	mov	r1, r7
 80062fc:	f7fa fc0e 	bl	8000b1c <__aeabi_dcmplt>
 8006300:	b148      	cbz	r0, 8006316 <_dtoa_r+0x186>
 8006302:	4650      	mov	r0, sl
 8006304:	f7fa f92e 	bl	8000564 <__aeabi_i2d>
 8006308:	4632      	mov	r2, r6
 800630a:	463b      	mov	r3, r7
 800630c:	f7fa fbfc 	bl	8000b08 <__aeabi_dcmpeq>
 8006310:	b908      	cbnz	r0, 8006316 <_dtoa_r+0x186>
 8006312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006316:	f1ba 0f16 	cmp.w	sl, #22
 800631a:	d854      	bhi.n	80063c6 <_dtoa_r+0x236>
 800631c:	4b61      	ldr	r3, [pc, #388]	; (80064a4 <_dtoa_r+0x314>)
 800631e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800632a:	f7fa fbf7 	bl	8000b1c <__aeabi_dcmplt>
 800632e:	2800      	cmp	r0, #0
 8006330:	d04b      	beq.n	80063ca <_dtoa_r+0x23a>
 8006332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006336:	2300      	movs	r3, #0
 8006338:	930e      	str	r3, [sp, #56]	; 0x38
 800633a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800633c:	1b5d      	subs	r5, r3, r5
 800633e:	1e6b      	subs	r3, r5, #1
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	bf43      	ittte	mi
 8006344:	2300      	movmi	r3, #0
 8006346:	f1c5 0801 	rsbmi	r8, r5, #1
 800634a:	9304      	strmi	r3, [sp, #16]
 800634c:	f04f 0800 	movpl.w	r8, #0
 8006350:	f1ba 0f00 	cmp.w	sl, #0
 8006354:	db3b      	blt.n	80063ce <_dtoa_r+0x23e>
 8006356:	9b04      	ldr	r3, [sp, #16]
 8006358:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800635c:	4453      	add	r3, sl
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	2300      	movs	r3, #0
 8006362:	9306      	str	r3, [sp, #24]
 8006364:	9b05      	ldr	r3, [sp, #20]
 8006366:	2b09      	cmp	r3, #9
 8006368:	d869      	bhi.n	800643e <_dtoa_r+0x2ae>
 800636a:	2b05      	cmp	r3, #5
 800636c:	bfc4      	itt	gt
 800636e:	3b04      	subgt	r3, #4
 8006370:	9305      	strgt	r3, [sp, #20]
 8006372:	9b05      	ldr	r3, [sp, #20]
 8006374:	f1a3 0302 	sub.w	r3, r3, #2
 8006378:	bfcc      	ite	gt
 800637a:	2500      	movgt	r5, #0
 800637c:	2501      	movle	r5, #1
 800637e:	2b03      	cmp	r3, #3
 8006380:	d869      	bhi.n	8006456 <_dtoa_r+0x2c6>
 8006382:	e8df f003 	tbb	[pc, r3]
 8006386:	4e2c      	.short	0x4e2c
 8006388:	5a4c      	.short	0x5a4c
 800638a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800638e:	441d      	add	r5, r3
 8006390:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006394:	2b20      	cmp	r3, #32
 8006396:	bfc1      	itttt	gt
 8006398:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800639c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80063a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80063a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80063a8:	bfda      	itte	le
 80063aa:	f1c3 0320 	rsble	r3, r3, #32
 80063ae:	fa06 f003 	lslle.w	r0, r6, r3
 80063b2:	4318      	orrgt	r0, r3
 80063b4:	f7fa f8c6 	bl	8000544 <__aeabi_ui2d>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4606      	mov	r6, r0
 80063bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80063c0:	3d01      	subs	r5, #1
 80063c2:	9310      	str	r3, [sp, #64]	; 0x40
 80063c4:	e771      	b.n	80062aa <_dtoa_r+0x11a>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e7b6      	b.n	8006338 <_dtoa_r+0x1a8>
 80063ca:	900e      	str	r0, [sp, #56]	; 0x38
 80063cc:	e7b5      	b.n	800633a <_dtoa_r+0x1aa>
 80063ce:	f1ca 0300 	rsb	r3, sl, #0
 80063d2:	9306      	str	r3, [sp, #24]
 80063d4:	2300      	movs	r3, #0
 80063d6:	eba8 080a 	sub.w	r8, r8, sl
 80063da:	930d      	str	r3, [sp, #52]	; 0x34
 80063dc:	e7c2      	b.n	8006364 <_dtoa_r+0x1d4>
 80063de:	2300      	movs	r3, #0
 80063e0:	9308      	str	r3, [sp, #32]
 80063e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dc39      	bgt.n	800645c <_dtoa_r+0x2cc>
 80063e8:	f04f 0901 	mov.w	r9, #1
 80063ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80063f0:	464b      	mov	r3, r9
 80063f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063f8:	2200      	movs	r2, #0
 80063fa:	6042      	str	r2, [r0, #4]
 80063fc:	2204      	movs	r2, #4
 80063fe:	f102 0614 	add.w	r6, r2, #20
 8006402:	429e      	cmp	r6, r3
 8006404:	6841      	ldr	r1, [r0, #4]
 8006406:	d92f      	bls.n	8006468 <_dtoa_r+0x2d8>
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fee7 	bl	80071dc <_Balloc>
 800640e:	9000      	str	r0, [sp, #0]
 8006410:	2800      	cmp	r0, #0
 8006412:	d14b      	bne.n	80064ac <_dtoa_r+0x31c>
 8006414:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <_dtoa_r+0x318>)
 8006416:	4602      	mov	r2, r0
 8006418:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800641c:	e6d1      	b.n	80061c2 <_dtoa_r+0x32>
 800641e:	2301      	movs	r3, #1
 8006420:	e7de      	b.n	80063e0 <_dtoa_r+0x250>
 8006422:	2300      	movs	r3, #0
 8006424:	9308      	str	r3, [sp, #32]
 8006426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006428:	eb0a 0903 	add.w	r9, sl, r3
 800642c:	f109 0301 	add.w	r3, r9, #1
 8006430:	2b01      	cmp	r3, #1
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	bfb8      	it	lt
 8006436:	2301      	movlt	r3, #1
 8006438:	e7dd      	b.n	80063f6 <_dtoa_r+0x266>
 800643a:	2301      	movs	r3, #1
 800643c:	e7f2      	b.n	8006424 <_dtoa_r+0x294>
 800643e:	2501      	movs	r5, #1
 8006440:	2300      	movs	r3, #0
 8006442:	9305      	str	r3, [sp, #20]
 8006444:	9508      	str	r5, [sp, #32]
 8006446:	f04f 39ff 	mov.w	r9, #4294967295
 800644a:	2200      	movs	r2, #0
 800644c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006450:	2312      	movs	r3, #18
 8006452:	9209      	str	r2, [sp, #36]	; 0x24
 8006454:	e7cf      	b.n	80063f6 <_dtoa_r+0x266>
 8006456:	2301      	movs	r3, #1
 8006458:	9308      	str	r3, [sp, #32]
 800645a:	e7f4      	b.n	8006446 <_dtoa_r+0x2b6>
 800645c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006460:	f8cd 9004 	str.w	r9, [sp, #4]
 8006464:	464b      	mov	r3, r9
 8006466:	e7c6      	b.n	80063f6 <_dtoa_r+0x266>
 8006468:	3101      	adds	r1, #1
 800646a:	6041      	str	r1, [r0, #4]
 800646c:	0052      	lsls	r2, r2, #1
 800646e:	e7c6      	b.n	80063fe <_dtoa_r+0x26e>
 8006470:	636f4361 	.word	0x636f4361
 8006474:	3fd287a7 	.word	0x3fd287a7
 8006478:	8b60c8b3 	.word	0x8b60c8b3
 800647c:	3fc68a28 	.word	0x3fc68a28
 8006480:	509f79fb 	.word	0x509f79fb
 8006484:	3fd34413 	.word	0x3fd34413
 8006488:	08009631 	.word	0x08009631
 800648c:	08009648 	.word	0x08009648
 8006490:	7ff00000 	.word	0x7ff00000
 8006494:	0800962d 	.word	0x0800962d
 8006498:	08009624 	.word	0x08009624
 800649c:	08009601 	.word	0x08009601
 80064a0:	3ff80000 	.word	0x3ff80000
 80064a4:	080097a0 	.word	0x080097a0
 80064a8:	080096a7 	.word	0x080096a7
 80064ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ae:	9a00      	ldr	r2, [sp, #0]
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	2b0e      	cmp	r3, #14
 80064b6:	f200 80ad 	bhi.w	8006614 <_dtoa_r+0x484>
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	f000 80aa 	beq.w	8006614 <_dtoa_r+0x484>
 80064c0:	f1ba 0f00 	cmp.w	sl, #0
 80064c4:	dd36      	ble.n	8006534 <_dtoa_r+0x3a4>
 80064c6:	4ac3      	ldr	r2, [pc, #780]	; (80067d4 <_dtoa_r+0x644>)
 80064c8:	f00a 030f 	and.w	r3, sl, #15
 80064cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064d0:	ed93 7b00 	vldr	d7, [r3]
 80064d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80064d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80064dc:	eeb0 8a47 	vmov.f32	s16, s14
 80064e0:	eef0 8a67 	vmov.f32	s17, s15
 80064e4:	d016      	beq.n	8006514 <_dtoa_r+0x384>
 80064e6:	4bbc      	ldr	r3, [pc, #752]	; (80067d8 <_dtoa_r+0x648>)
 80064e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064f0:	f7fa f9cc 	bl	800088c <__aeabi_ddiv>
 80064f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f8:	f007 070f 	and.w	r7, r7, #15
 80064fc:	2503      	movs	r5, #3
 80064fe:	4eb6      	ldr	r6, [pc, #728]	; (80067d8 <_dtoa_r+0x648>)
 8006500:	b957      	cbnz	r7, 8006518 <_dtoa_r+0x388>
 8006502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006506:	ec53 2b18 	vmov	r2, r3, d8
 800650a:	f7fa f9bf 	bl	800088c <__aeabi_ddiv>
 800650e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006512:	e029      	b.n	8006568 <_dtoa_r+0x3d8>
 8006514:	2502      	movs	r5, #2
 8006516:	e7f2      	b.n	80064fe <_dtoa_r+0x36e>
 8006518:	07f9      	lsls	r1, r7, #31
 800651a:	d508      	bpl.n	800652e <_dtoa_r+0x39e>
 800651c:	ec51 0b18 	vmov	r0, r1, d8
 8006520:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006524:	f7fa f888 	bl	8000638 <__aeabi_dmul>
 8006528:	ec41 0b18 	vmov	d8, r0, r1
 800652c:	3501      	adds	r5, #1
 800652e:	107f      	asrs	r7, r7, #1
 8006530:	3608      	adds	r6, #8
 8006532:	e7e5      	b.n	8006500 <_dtoa_r+0x370>
 8006534:	f000 80a6 	beq.w	8006684 <_dtoa_r+0x4f4>
 8006538:	f1ca 0600 	rsb	r6, sl, #0
 800653c:	4ba5      	ldr	r3, [pc, #660]	; (80067d4 <_dtoa_r+0x644>)
 800653e:	4fa6      	ldr	r7, [pc, #664]	; (80067d8 <_dtoa_r+0x648>)
 8006540:	f006 020f 	and.w	r2, r6, #15
 8006544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006550:	f7fa f872 	bl	8000638 <__aeabi_dmul>
 8006554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006558:	1136      	asrs	r6, r6, #4
 800655a:	2300      	movs	r3, #0
 800655c:	2502      	movs	r5, #2
 800655e:	2e00      	cmp	r6, #0
 8006560:	f040 8085 	bne.w	800666e <_dtoa_r+0x4de>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1d2      	bne.n	800650e <_dtoa_r+0x37e>
 8006568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 808c 	beq.w	8006688 <_dtoa_r+0x4f8>
 8006570:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006574:	4b99      	ldr	r3, [pc, #612]	; (80067dc <_dtoa_r+0x64c>)
 8006576:	2200      	movs	r2, #0
 8006578:	4630      	mov	r0, r6
 800657a:	4639      	mov	r1, r7
 800657c:	f7fa face 	bl	8000b1c <__aeabi_dcmplt>
 8006580:	2800      	cmp	r0, #0
 8006582:	f000 8081 	beq.w	8006688 <_dtoa_r+0x4f8>
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d07d      	beq.n	8006688 <_dtoa_r+0x4f8>
 800658c:	f1b9 0f00 	cmp.w	r9, #0
 8006590:	dd3c      	ble.n	800660c <_dtoa_r+0x47c>
 8006592:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	2200      	movs	r2, #0
 800659a:	4b91      	ldr	r3, [pc, #580]	; (80067e0 <_dtoa_r+0x650>)
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7fa f84a 	bl	8000638 <__aeabi_dmul>
 80065a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a8:	3501      	adds	r5, #1
 80065aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80065ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065b2:	4628      	mov	r0, r5
 80065b4:	f7f9 ffd6 	bl	8000564 <__aeabi_i2d>
 80065b8:	4632      	mov	r2, r6
 80065ba:	463b      	mov	r3, r7
 80065bc:	f7fa f83c 	bl	8000638 <__aeabi_dmul>
 80065c0:	4b88      	ldr	r3, [pc, #544]	; (80067e4 <_dtoa_r+0x654>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	f7f9 fe82 	bl	80002cc <__adddf3>
 80065c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80065cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d0:	9303      	str	r3, [sp, #12]
 80065d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d15c      	bne.n	8006692 <_dtoa_r+0x502>
 80065d8:	4b83      	ldr	r3, [pc, #524]	; (80067e8 <_dtoa_r+0x658>)
 80065da:	2200      	movs	r2, #0
 80065dc:	4630      	mov	r0, r6
 80065de:	4639      	mov	r1, r7
 80065e0:	f7f9 fe72 	bl	80002c8 <__aeabi_dsub>
 80065e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065e8:	4606      	mov	r6, r0
 80065ea:	460f      	mov	r7, r1
 80065ec:	f7fa fab4 	bl	8000b58 <__aeabi_dcmpgt>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	f040 8296 	bne.w	8006b22 <_dtoa_r+0x992>
 80065f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065fa:	4630      	mov	r0, r6
 80065fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006600:	4639      	mov	r1, r7
 8006602:	f7fa fa8b 	bl	8000b1c <__aeabi_dcmplt>
 8006606:	2800      	cmp	r0, #0
 8006608:	f040 8288 	bne.w	8006b1c <_dtoa_r+0x98c>
 800660c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006610:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006616:	2b00      	cmp	r3, #0
 8006618:	f2c0 8158 	blt.w	80068cc <_dtoa_r+0x73c>
 800661c:	f1ba 0f0e 	cmp.w	sl, #14
 8006620:	f300 8154 	bgt.w	80068cc <_dtoa_r+0x73c>
 8006624:	4b6b      	ldr	r3, [pc, #428]	; (80067d4 <_dtoa_r+0x644>)
 8006626:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800662a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800662e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	f280 80e3 	bge.w	80067fc <_dtoa_r+0x66c>
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f300 80df 	bgt.w	80067fc <_dtoa_r+0x66c>
 800663e:	f040 826d 	bne.w	8006b1c <_dtoa_r+0x98c>
 8006642:	4b69      	ldr	r3, [pc, #420]	; (80067e8 <_dtoa_r+0x658>)
 8006644:	2200      	movs	r2, #0
 8006646:	4640      	mov	r0, r8
 8006648:	4649      	mov	r1, r9
 800664a:	f7f9 fff5 	bl	8000638 <__aeabi_dmul>
 800664e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006652:	f7fa fa77 	bl	8000b44 <__aeabi_dcmpge>
 8006656:	9e01      	ldr	r6, [sp, #4]
 8006658:	4637      	mov	r7, r6
 800665a:	2800      	cmp	r0, #0
 800665c:	f040 8243 	bne.w	8006ae6 <_dtoa_r+0x956>
 8006660:	9d00      	ldr	r5, [sp, #0]
 8006662:	2331      	movs	r3, #49	; 0x31
 8006664:	f805 3b01 	strb.w	r3, [r5], #1
 8006668:	f10a 0a01 	add.w	sl, sl, #1
 800666c:	e23f      	b.n	8006aee <_dtoa_r+0x95e>
 800666e:	07f2      	lsls	r2, r6, #31
 8006670:	d505      	bpl.n	800667e <_dtoa_r+0x4ee>
 8006672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006676:	f7f9 ffdf 	bl	8000638 <__aeabi_dmul>
 800667a:	3501      	adds	r5, #1
 800667c:	2301      	movs	r3, #1
 800667e:	1076      	asrs	r6, r6, #1
 8006680:	3708      	adds	r7, #8
 8006682:	e76c      	b.n	800655e <_dtoa_r+0x3ce>
 8006684:	2502      	movs	r5, #2
 8006686:	e76f      	b.n	8006568 <_dtoa_r+0x3d8>
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	f8cd a01c 	str.w	sl, [sp, #28]
 800668e:	930c      	str	r3, [sp, #48]	; 0x30
 8006690:	e78d      	b.n	80065ae <_dtoa_r+0x41e>
 8006692:	9900      	ldr	r1, [sp, #0]
 8006694:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006698:	4b4e      	ldr	r3, [pc, #312]	; (80067d4 <_dtoa_r+0x644>)
 800669a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800669e:	4401      	add	r1, r0
 80066a0:	9102      	str	r1, [sp, #8]
 80066a2:	9908      	ldr	r1, [sp, #32]
 80066a4:	eeb0 8a47 	vmov.f32	s16, s14
 80066a8:	eef0 8a67 	vmov.f32	s17, s15
 80066ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d045      	beq.n	8006744 <_dtoa_r+0x5b4>
 80066b8:	494c      	ldr	r1, [pc, #304]	; (80067ec <_dtoa_r+0x65c>)
 80066ba:	2000      	movs	r0, #0
 80066bc:	f7fa f8e6 	bl	800088c <__aeabi_ddiv>
 80066c0:	ec53 2b18 	vmov	r2, r3, d8
 80066c4:	f7f9 fe00 	bl	80002c8 <__aeabi_dsub>
 80066c8:	9d00      	ldr	r5, [sp, #0]
 80066ca:	ec41 0b18 	vmov	d8, r0, r1
 80066ce:	4639      	mov	r1, r7
 80066d0:	4630      	mov	r0, r6
 80066d2:	f7fa fa61 	bl	8000b98 <__aeabi_d2iz>
 80066d6:	900c      	str	r0, [sp, #48]	; 0x30
 80066d8:	f7f9 ff44 	bl	8000564 <__aeabi_i2d>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	f7f9 fdf0 	bl	80002c8 <__aeabi_dsub>
 80066e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ea:	3330      	adds	r3, #48	; 0x30
 80066ec:	f805 3b01 	strb.w	r3, [r5], #1
 80066f0:	ec53 2b18 	vmov	r2, r3, d8
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	f7fa fa10 	bl	8000b1c <__aeabi_dcmplt>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d165      	bne.n	80067cc <_dtoa_r+0x63c>
 8006700:	4632      	mov	r2, r6
 8006702:	463b      	mov	r3, r7
 8006704:	4935      	ldr	r1, [pc, #212]	; (80067dc <_dtoa_r+0x64c>)
 8006706:	2000      	movs	r0, #0
 8006708:	f7f9 fdde 	bl	80002c8 <__aeabi_dsub>
 800670c:	ec53 2b18 	vmov	r2, r3, d8
 8006710:	f7fa fa04 	bl	8000b1c <__aeabi_dcmplt>
 8006714:	2800      	cmp	r0, #0
 8006716:	f040 80b9 	bne.w	800688c <_dtoa_r+0x6fc>
 800671a:	9b02      	ldr	r3, [sp, #8]
 800671c:	429d      	cmp	r5, r3
 800671e:	f43f af75 	beq.w	800660c <_dtoa_r+0x47c>
 8006722:	4b2f      	ldr	r3, [pc, #188]	; (80067e0 <_dtoa_r+0x650>)
 8006724:	ec51 0b18 	vmov	r0, r1, d8
 8006728:	2200      	movs	r2, #0
 800672a:	f7f9 ff85 	bl	8000638 <__aeabi_dmul>
 800672e:	4b2c      	ldr	r3, [pc, #176]	; (80067e0 <_dtoa_r+0x650>)
 8006730:	ec41 0b18 	vmov	d8, r0, r1
 8006734:	2200      	movs	r2, #0
 8006736:	4630      	mov	r0, r6
 8006738:	4639      	mov	r1, r7
 800673a:	f7f9 ff7d 	bl	8000638 <__aeabi_dmul>
 800673e:	4606      	mov	r6, r0
 8006740:	460f      	mov	r7, r1
 8006742:	e7c4      	b.n	80066ce <_dtoa_r+0x53e>
 8006744:	ec51 0b17 	vmov	r0, r1, d7
 8006748:	f7f9 ff76 	bl	8000638 <__aeabi_dmul>
 800674c:	9b02      	ldr	r3, [sp, #8]
 800674e:	9d00      	ldr	r5, [sp, #0]
 8006750:	930c      	str	r3, [sp, #48]	; 0x30
 8006752:	ec41 0b18 	vmov	d8, r0, r1
 8006756:	4639      	mov	r1, r7
 8006758:	4630      	mov	r0, r6
 800675a:	f7fa fa1d 	bl	8000b98 <__aeabi_d2iz>
 800675e:	9011      	str	r0, [sp, #68]	; 0x44
 8006760:	f7f9 ff00 	bl	8000564 <__aeabi_i2d>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7f9 fdac 	bl	80002c8 <__aeabi_dsub>
 8006770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006772:	3330      	adds	r3, #48	; 0x30
 8006774:	f805 3b01 	strb.w	r3, [r5], #1
 8006778:	9b02      	ldr	r3, [sp, #8]
 800677a:	429d      	cmp	r5, r3
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	d134      	bne.n	80067f0 <_dtoa_r+0x660>
 8006786:	4b19      	ldr	r3, [pc, #100]	; (80067ec <_dtoa_r+0x65c>)
 8006788:	ec51 0b18 	vmov	r0, r1, d8
 800678c:	f7f9 fd9e 	bl	80002cc <__adddf3>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f7fa f9de 	bl	8000b58 <__aeabi_dcmpgt>
 800679c:	2800      	cmp	r0, #0
 800679e:	d175      	bne.n	800688c <_dtoa_r+0x6fc>
 80067a0:	ec53 2b18 	vmov	r2, r3, d8
 80067a4:	4911      	ldr	r1, [pc, #68]	; (80067ec <_dtoa_r+0x65c>)
 80067a6:	2000      	movs	r0, #0
 80067a8:	f7f9 fd8e 	bl	80002c8 <__aeabi_dsub>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4630      	mov	r0, r6
 80067b2:	4639      	mov	r1, r7
 80067b4:	f7fa f9b2 	bl	8000b1c <__aeabi_dcmplt>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f43f af27 	beq.w	800660c <_dtoa_r+0x47c>
 80067be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067c0:	1e6b      	subs	r3, r5, #1
 80067c2:	930c      	str	r3, [sp, #48]	; 0x30
 80067c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067c8:	2b30      	cmp	r3, #48	; 0x30
 80067ca:	d0f8      	beq.n	80067be <_dtoa_r+0x62e>
 80067cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80067d0:	e04a      	b.n	8006868 <_dtoa_r+0x6d8>
 80067d2:	bf00      	nop
 80067d4:	080097a0 	.word	0x080097a0
 80067d8:	08009778 	.word	0x08009778
 80067dc:	3ff00000 	.word	0x3ff00000
 80067e0:	40240000 	.word	0x40240000
 80067e4:	401c0000 	.word	0x401c0000
 80067e8:	40140000 	.word	0x40140000
 80067ec:	3fe00000 	.word	0x3fe00000
 80067f0:	4baf      	ldr	r3, [pc, #700]	; (8006ab0 <_dtoa_r+0x920>)
 80067f2:	f7f9 ff21 	bl	8000638 <__aeabi_dmul>
 80067f6:	4606      	mov	r6, r0
 80067f8:	460f      	mov	r7, r1
 80067fa:	e7ac      	b.n	8006756 <_dtoa_r+0x5c6>
 80067fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006800:	9d00      	ldr	r5, [sp, #0]
 8006802:	4642      	mov	r2, r8
 8006804:	464b      	mov	r3, r9
 8006806:	4630      	mov	r0, r6
 8006808:	4639      	mov	r1, r7
 800680a:	f7fa f83f 	bl	800088c <__aeabi_ddiv>
 800680e:	f7fa f9c3 	bl	8000b98 <__aeabi_d2iz>
 8006812:	9002      	str	r0, [sp, #8]
 8006814:	f7f9 fea6 	bl	8000564 <__aeabi_i2d>
 8006818:	4642      	mov	r2, r8
 800681a:	464b      	mov	r3, r9
 800681c:	f7f9 ff0c 	bl	8000638 <__aeabi_dmul>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7f9 fd4e 	bl	80002c8 <__aeabi_dsub>
 800682c:	9e02      	ldr	r6, [sp, #8]
 800682e:	9f01      	ldr	r7, [sp, #4]
 8006830:	3630      	adds	r6, #48	; 0x30
 8006832:	f805 6b01 	strb.w	r6, [r5], #1
 8006836:	9e00      	ldr	r6, [sp, #0]
 8006838:	1bae      	subs	r6, r5, r6
 800683a:	42b7      	cmp	r7, r6
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	d137      	bne.n	80068b2 <_dtoa_r+0x722>
 8006842:	f7f9 fd43 	bl	80002cc <__adddf3>
 8006846:	4642      	mov	r2, r8
 8006848:	464b      	mov	r3, r9
 800684a:	4606      	mov	r6, r0
 800684c:	460f      	mov	r7, r1
 800684e:	f7fa f983 	bl	8000b58 <__aeabi_dcmpgt>
 8006852:	b9c8      	cbnz	r0, 8006888 <_dtoa_r+0x6f8>
 8006854:	4642      	mov	r2, r8
 8006856:	464b      	mov	r3, r9
 8006858:	4630      	mov	r0, r6
 800685a:	4639      	mov	r1, r7
 800685c:	f7fa f954 	bl	8000b08 <__aeabi_dcmpeq>
 8006860:	b110      	cbz	r0, 8006868 <_dtoa_r+0x6d8>
 8006862:	9b02      	ldr	r3, [sp, #8]
 8006864:	07d9      	lsls	r1, r3, #31
 8006866:	d40f      	bmi.n	8006888 <_dtoa_r+0x6f8>
 8006868:	4620      	mov	r0, r4
 800686a:	4659      	mov	r1, fp
 800686c:	f000 fcf6 	bl	800725c <_Bfree>
 8006870:	2300      	movs	r3, #0
 8006872:	702b      	strb	r3, [r5, #0]
 8006874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006876:	f10a 0001 	add.w	r0, sl, #1
 800687a:	6018      	str	r0, [r3, #0]
 800687c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800687e:	2b00      	cmp	r3, #0
 8006880:	f43f acd8 	beq.w	8006234 <_dtoa_r+0xa4>
 8006884:	601d      	str	r5, [r3, #0]
 8006886:	e4d5      	b.n	8006234 <_dtoa_r+0xa4>
 8006888:	f8cd a01c 	str.w	sl, [sp, #28]
 800688c:	462b      	mov	r3, r5
 800688e:	461d      	mov	r5, r3
 8006890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006894:	2a39      	cmp	r2, #57	; 0x39
 8006896:	d108      	bne.n	80068aa <_dtoa_r+0x71a>
 8006898:	9a00      	ldr	r2, [sp, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d1f7      	bne.n	800688e <_dtoa_r+0x6fe>
 800689e:	9a07      	ldr	r2, [sp, #28]
 80068a0:	9900      	ldr	r1, [sp, #0]
 80068a2:	3201      	adds	r2, #1
 80068a4:	9207      	str	r2, [sp, #28]
 80068a6:	2230      	movs	r2, #48	; 0x30
 80068a8:	700a      	strb	r2, [r1, #0]
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	3201      	adds	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	e78c      	b.n	80067cc <_dtoa_r+0x63c>
 80068b2:	4b7f      	ldr	r3, [pc, #508]	; (8006ab0 <_dtoa_r+0x920>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	f7f9 febf 	bl	8000638 <__aeabi_dmul>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	4606      	mov	r6, r0
 80068c0:	460f      	mov	r7, r1
 80068c2:	f7fa f921 	bl	8000b08 <__aeabi_dcmpeq>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d09b      	beq.n	8006802 <_dtoa_r+0x672>
 80068ca:	e7cd      	b.n	8006868 <_dtoa_r+0x6d8>
 80068cc:	9a08      	ldr	r2, [sp, #32]
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	f000 80c4 	beq.w	8006a5c <_dtoa_r+0x8cc>
 80068d4:	9a05      	ldr	r2, [sp, #20]
 80068d6:	2a01      	cmp	r2, #1
 80068d8:	f300 80a8 	bgt.w	8006a2c <_dtoa_r+0x89c>
 80068dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068de:	2a00      	cmp	r2, #0
 80068e0:	f000 80a0 	beq.w	8006a24 <_dtoa_r+0x894>
 80068e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068e8:	9e06      	ldr	r6, [sp, #24]
 80068ea:	4645      	mov	r5, r8
 80068ec:	9a04      	ldr	r2, [sp, #16]
 80068ee:	2101      	movs	r1, #1
 80068f0:	441a      	add	r2, r3
 80068f2:	4620      	mov	r0, r4
 80068f4:	4498      	add	r8, r3
 80068f6:	9204      	str	r2, [sp, #16]
 80068f8:	f000 fd6c 	bl	80073d4 <__i2b>
 80068fc:	4607      	mov	r7, r0
 80068fe:	2d00      	cmp	r5, #0
 8006900:	dd0b      	ble.n	800691a <_dtoa_r+0x78a>
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	dd08      	ble.n	800691a <_dtoa_r+0x78a>
 8006908:	42ab      	cmp	r3, r5
 800690a:	9a04      	ldr	r2, [sp, #16]
 800690c:	bfa8      	it	ge
 800690e:	462b      	movge	r3, r5
 8006910:	eba8 0803 	sub.w	r8, r8, r3
 8006914:	1aed      	subs	r5, r5, r3
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	9b06      	ldr	r3, [sp, #24]
 800691c:	b1fb      	cbz	r3, 800695e <_dtoa_r+0x7ce>
 800691e:	9b08      	ldr	r3, [sp, #32]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 809f 	beq.w	8006a64 <_dtoa_r+0x8d4>
 8006926:	2e00      	cmp	r6, #0
 8006928:	dd11      	ble.n	800694e <_dtoa_r+0x7be>
 800692a:	4639      	mov	r1, r7
 800692c:	4632      	mov	r2, r6
 800692e:	4620      	mov	r0, r4
 8006930:	f000 fe0c 	bl	800754c <__pow5mult>
 8006934:	465a      	mov	r2, fp
 8006936:	4601      	mov	r1, r0
 8006938:	4607      	mov	r7, r0
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fd60 	bl	8007400 <__multiply>
 8006940:	4659      	mov	r1, fp
 8006942:	9007      	str	r0, [sp, #28]
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fc89 	bl	800725c <_Bfree>
 800694a:	9b07      	ldr	r3, [sp, #28]
 800694c:	469b      	mov	fp, r3
 800694e:	9b06      	ldr	r3, [sp, #24]
 8006950:	1b9a      	subs	r2, r3, r6
 8006952:	d004      	beq.n	800695e <_dtoa_r+0x7ce>
 8006954:	4659      	mov	r1, fp
 8006956:	4620      	mov	r0, r4
 8006958:	f000 fdf8 	bl	800754c <__pow5mult>
 800695c:	4683      	mov	fp, r0
 800695e:	2101      	movs	r1, #1
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fd37 	bl	80073d4 <__i2b>
 8006966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006968:	2b00      	cmp	r3, #0
 800696a:	4606      	mov	r6, r0
 800696c:	dd7c      	ble.n	8006a68 <_dtoa_r+0x8d8>
 800696e:	461a      	mov	r2, r3
 8006970:	4601      	mov	r1, r0
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fdea 	bl	800754c <__pow5mult>
 8006978:	9b05      	ldr	r3, [sp, #20]
 800697a:	2b01      	cmp	r3, #1
 800697c:	4606      	mov	r6, r0
 800697e:	dd76      	ble.n	8006a6e <_dtoa_r+0x8de>
 8006980:	2300      	movs	r3, #0
 8006982:	9306      	str	r3, [sp, #24]
 8006984:	6933      	ldr	r3, [r6, #16]
 8006986:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800698a:	6918      	ldr	r0, [r3, #16]
 800698c:	f000 fcd2 	bl	8007334 <__hi0bits>
 8006990:	f1c0 0020 	rsb	r0, r0, #32
 8006994:	9b04      	ldr	r3, [sp, #16]
 8006996:	4418      	add	r0, r3
 8006998:	f010 001f 	ands.w	r0, r0, #31
 800699c:	f000 8086 	beq.w	8006aac <_dtoa_r+0x91c>
 80069a0:	f1c0 0320 	rsb	r3, r0, #32
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	dd7f      	ble.n	8006aa8 <_dtoa_r+0x918>
 80069a8:	f1c0 001c 	rsb	r0, r0, #28
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	4403      	add	r3, r0
 80069b0:	4480      	add	r8, r0
 80069b2:	4405      	add	r5, r0
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	f1b8 0f00 	cmp.w	r8, #0
 80069ba:	dd05      	ble.n	80069c8 <_dtoa_r+0x838>
 80069bc:	4659      	mov	r1, fp
 80069be:	4642      	mov	r2, r8
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fe1d 	bl	8007600 <__lshift>
 80069c6:	4683      	mov	fp, r0
 80069c8:	9b04      	ldr	r3, [sp, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dd05      	ble.n	80069da <_dtoa_r+0x84a>
 80069ce:	4631      	mov	r1, r6
 80069d0:	461a      	mov	r2, r3
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 fe14 	bl	8007600 <__lshift>
 80069d8:	4606      	mov	r6, r0
 80069da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d069      	beq.n	8006ab4 <_dtoa_r+0x924>
 80069e0:	4631      	mov	r1, r6
 80069e2:	4658      	mov	r0, fp
 80069e4:	f000 fe78 	bl	80076d8 <__mcmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	da63      	bge.n	8006ab4 <_dtoa_r+0x924>
 80069ec:	2300      	movs	r3, #0
 80069ee:	4659      	mov	r1, fp
 80069f0:	220a      	movs	r2, #10
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 fc54 	bl	80072a0 <__multadd>
 80069f8:	9b08      	ldr	r3, [sp, #32]
 80069fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069fe:	4683      	mov	fp, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 818f 	beq.w	8006d24 <_dtoa_r+0xb94>
 8006a06:	4639      	mov	r1, r7
 8006a08:	2300      	movs	r3, #0
 8006a0a:	220a      	movs	r2, #10
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fc47 	bl	80072a0 <__multadd>
 8006a12:	f1b9 0f00 	cmp.w	r9, #0
 8006a16:	4607      	mov	r7, r0
 8006a18:	f300 808e 	bgt.w	8006b38 <_dtoa_r+0x9a8>
 8006a1c:	9b05      	ldr	r3, [sp, #20]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	dc50      	bgt.n	8006ac4 <_dtoa_r+0x934>
 8006a22:	e089      	b.n	8006b38 <_dtoa_r+0x9a8>
 8006a24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a2a:	e75d      	b.n	80068e8 <_dtoa_r+0x758>
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	1e5e      	subs	r6, r3, #1
 8006a30:	9b06      	ldr	r3, [sp, #24]
 8006a32:	42b3      	cmp	r3, r6
 8006a34:	bfbf      	itttt	lt
 8006a36:	9b06      	ldrlt	r3, [sp, #24]
 8006a38:	9606      	strlt	r6, [sp, #24]
 8006a3a:	1af2      	sublt	r2, r6, r3
 8006a3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006a3e:	bfb6      	itet	lt
 8006a40:	189b      	addlt	r3, r3, r2
 8006a42:	1b9e      	subge	r6, r3, r6
 8006a44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	bfb8      	it	lt
 8006a4a:	2600      	movlt	r6, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bfb5      	itete	lt
 8006a50:	eba8 0503 	sublt.w	r5, r8, r3
 8006a54:	9b01      	ldrge	r3, [sp, #4]
 8006a56:	2300      	movlt	r3, #0
 8006a58:	4645      	movge	r5, r8
 8006a5a:	e747      	b.n	80068ec <_dtoa_r+0x75c>
 8006a5c:	9e06      	ldr	r6, [sp, #24]
 8006a5e:	9f08      	ldr	r7, [sp, #32]
 8006a60:	4645      	mov	r5, r8
 8006a62:	e74c      	b.n	80068fe <_dtoa_r+0x76e>
 8006a64:	9a06      	ldr	r2, [sp, #24]
 8006a66:	e775      	b.n	8006954 <_dtoa_r+0x7c4>
 8006a68:	9b05      	ldr	r3, [sp, #20]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	dc18      	bgt.n	8006aa0 <_dtoa_r+0x910>
 8006a6e:	9b02      	ldr	r3, [sp, #8]
 8006a70:	b9b3      	cbnz	r3, 8006aa0 <_dtoa_r+0x910>
 8006a72:	9b03      	ldr	r3, [sp, #12]
 8006a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a78:	b9a3      	cbnz	r3, 8006aa4 <_dtoa_r+0x914>
 8006a7a:	9b03      	ldr	r3, [sp, #12]
 8006a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a80:	0d1b      	lsrs	r3, r3, #20
 8006a82:	051b      	lsls	r3, r3, #20
 8006a84:	b12b      	cbz	r3, 8006a92 <_dtoa_r+0x902>
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	9304      	str	r3, [sp, #16]
 8006a8c:	f108 0801 	add.w	r8, r8, #1
 8006a90:	2301      	movs	r3, #1
 8006a92:	9306      	str	r3, [sp, #24]
 8006a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f47f af74 	bne.w	8006984 <_dtoa_r+0x7f4>
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	e779      	b.n	8006994 <_dtoa_r+0x804>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e7f6      	b.n	8006a92 <_dtoa_r+0x902>
 8006aa4:	9b02      	ldr	r3, [sp, #8]
 8006aa6:	e7f4      	b.n	8006a92 <_dtoa_r+0x902>
 8006aa8:	d085      	beq.n	80069b6 <_dtoa_r+0x826>
 8006aaa:	4618      	mov	r0, r3
 8006aac:	301c      	adds	r0, #28
 8006aae:	e77d      	b.n	80069ac <_dtoa_r+0x81c>
 8006ab0:	40240000 	.word	0x40240000
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	dc38      	bgt.n	8006b2c <_dtoa_r+0x99c>
 8006aba:	9b05      	ldr	r3, [sp, #20]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	dd35      	ble.n	8006b2c <_dtoa_r+0x99c>
 8006ac0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006ac4:	f1b9 0f00 	cmp.w	r9, #0
 8006ac8:	d10d      	bne.n	8006ae6 <_dtoa_r+0x956>
 8006aca:	4631      	mov	r1, r6
 8006acc:	464b      	mov	r3, r9
 8006ace:	2205      	movs	r2, #5
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fbe5 	bl	80072a0 <__multadd>
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	4606      	mov	r6, r0
 8006ada:	4658      	mov	r0, fp
 8006adc:	f000 fdfc 	bl	80076d8 <__mcmp>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f73f adbd 	bgt.w	8006660 <_dtoa_r+0x4d0>
 8006ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae8:	9d00      	ldr	r5, [sp, #0]
 8006aea:	ea6f 0a03 	mvn.w	sl, r3
 8006aee:	f04f 0800 	mov.w	r8, #0
 8006af2:	4631      	mov	r1, r6
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 fbb1 	bl	800725c <_Bfree>
 8006afa:	2f00      	cmp	r7, #0
 8006afc:	f43f aeb4 	beq.w	8006868 <_dtoa_r+0x6d8>
 8006b00:	f1b8 0f00 	cmp.w	r8, #0
 8006b04:	d005      	beq.n	8006b12 <_dtoa_r+0x982>
 8006b06:	45b8      	cmp	r8, r7
 8006b08:	d003      	beq.n	8006b12 <_dtoa_r+0x982>
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 fba5 	bl	800725c <_Bfree>
 8006b12:	4639      	mov	r1, r7
 8006b14:	4620      	mov	r0, r4
 8006b16:	f000 fba1 	bl	800725c <_Bfree>
 8006b1a:	e6a5      	b.n	8006868 <_dtoa_r+0x6d8>
 8006b1c:	2600      	movs	r6, #0
 8006b1e:	4637      	mov	r7, r6
 8006b20:	e7e1      	b.n	8006ae6 <_dtoa_r+0x956>
 8006b22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b28:	4637      	mov	r7, r6
 8006b2a:	e599      	b.n	8006660 <_dtoa_r+0x4d0>
 8006b2c:	9b08      	ldr	r3, [sp, #32]
 8006b2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80fd 	beq.w	8006d32 <_dtoa_r+0xba2>
 8006b38:	2d00      	cmp	r5, #0
 8006b3a:	dd05      	ble.n	8006b48 <_dtoa_r+0x9b8>
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	462a      	mov	r2, r5
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fd5d 	bl	8007600 <__lshift>
 8006b46:	4607      	mov	r7, r0
 8006b48:	9b06      	ldr	r3, [sp, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d05c      	beq.n	8006c08 <_dtoa_r+0xa78>
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 fb43 	bl	80071dc <_Balloc>
 8006b56:	4605      	mov	r5, r0
 8006b58:	b928      	cbnz	r0, 8006b66 <_dtoa_r+0x9d6>
 8006b5a:	4b80      	ldr	r3, [pc, #512]	; (8006d5c <_dtoa_r+0xbcc>)
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b62:	f7ff bb2e 	b.w	80061c2 <_dtoa_r+0x32>
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	3202      	adds	r2, #2
 8006b6a:	0092      	lsls	r2, r2, #2
 8006b6c:	f107 010c 	add.w	r1, r7, #12
 8006b70:	300c      	adds	r0, #12
 8006b72:	f000 fb25 	bl	80071c0 <memcpy>
 8006b76:	2201      	movs	r2, #1
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fd40 	bl	8007600 <__lshift>
 8006b80:	9b00      	ldr	r3, [sp, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	9b00      	ldr	r3, [sp, #0]
 8006b88:	444b      	add	r3, r9
 8006b8a:	9307      	str	r3, [sp, #28]
 8006b8c:	9b02      	ldr	r3, [sp, #8]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	46b8      	mov	r8, r7
 8006b94:	9306      	str	r3, [sp, #24]
 8006b96:	4607      	mov	r7, r0
 8006b98:	9b01      	ldr	r3, [sp, #4]
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	4658      	mov	r0, fp
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	f7ff fa67 	bl	8006074 <quorem>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	3330      	adds	r3, #48	; 0x30
 8006baa:	9004      	str	r0, [sp, #16]
 8006bac:	4641      	mov	r1, r8
 8006bae:	4658      	mov	r0, fp
 8006bb0:	9308      	str	r3, [sp, #32]
 8006bb2:	f000 fd91 	bl	80076d8 <__mcmp>
 8006bb6:	463a      	mov	r2, r7
 8006bb8:	4681      	mov	r9, r0
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fda7 	bl	8007710 <__mdiff>
 8006bc2:	68c2      	ldr	r2, [r0, #12]
 8006bc4:	9b08      	ldr	r3, [sp, #32]
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	bb02      	cbnz	r2, 8006c0c <_dtoa_r+0xa7c>
 8006bca:	4601      	mov	r1, r0
 8006bcc:	4658      	mov	r0, fp
 8006bce:	f000 fd83 	bl	80076d8 <__mcmp>
 8006bd2:	9b08      	ldr	r3, [sp, #32]
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4620      	mov	r0, r4
 8006bda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006bde:	f000 fb3d 	bl	800725c <_Bfree>
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006be6:	9d01      	ldr	r5, [sp, #4]
 8006be8:	ea43 0102 	orr.w	r1, r3, r2
 8006bec:	9b06      	ldr	r3, [sp, #24]
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	d10d      	bne.n	8006c10 <_dtoa_r+0xa80>
 8006bf4:	2b39      	cmp	r3, #57	; 0x39
 8006bf6:	d029      	beq.n	8006c4c <_dtoa_r+0xabc>
 8006bf8:	f1b9 0f00 	cmp.w	r9, #0
 8006bfc:	dd01      	ble.n	8006c02 <_dtoa_r+0xa72>
 8006bfe:	9b04      	ldr	r3, [sp, #16]
 8006c00:	3331      	adds	r3, #49	; 0x31
 8006c02:	9a02      	ldr	r2, [sp, #8]
 8006c04:	7013      	strb	r3, [r2, #0]
 8006c06:	e774      	b.n	8006af2 <_dtoa_r+0x962>
 8006c08:	4638      	mov	r0, r7
 8006c0a:	e7b9      	b.n	8006b80 <_dtoa_r+0x9f0>
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	e7e2      	b.n	8006bd6 <_dtoa_r+0xa46>
 8006c10:	f1b9 0f00 	cmp.w	r9, #0
 8006c14:	db06      	blt.n	8006c24 <_dtoa_r+0xa94>
 8006c16:	9905      	ldr	r1, [sp, #20]
 8006c18:	ea41 0909 	orr.w	r9, r1, r9
 8006c1c:	9906      	ldr	r1, [sp, #24]
 8006c1e:	ea59 0101 	orrs.w	r1, r9, r1
 8006c22:	d120      	bne.n	8006c66 <_dtoa_r+0xad6>
 8006c24:	2a00      	cmp	r2, #0
 8006c26:	ddec      	ble.n	8006c02 <_dtoa_r+0xa72>
 8006c28:	4659      	mov	r1, fp
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	f000 fce6 	bl	8007600 <__lshift>
 8006c34:	4631      	mov	r1, r6
 8006c36:	4683      	mov	fp, r0
 8006c38:	f000 fd4e 	bl	80076d8 <__mcmp>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	9b01      	ldr	r3, [sp, #4]
 8006c40:	dc02      	bgt.n	8006c48 <_dtoa_r+0xab8>
 8006c42:	d1de      	bne.n	8006c02 <_dtoa_r+0xa72>
 8006c44:	07da      	lsls	r2, r3, #31
 8006c46:	d5dc      	bpl.n	8006c02 <_dtoa_r+0xa72>
 8006c48:	2b39      	cmp	r3, #57	; 0x39
 8006c4a:	d1d8      	bne.n	8006bfe <_dtoa_r+0xa6e>
 8006c4c:	9a02      	ldr	r2, [sp, #8]
 8006c4e:	2339      	movs	r3, #57	; 0x39
 8006c50:	7013      	strb	r3, [r2, #0]
 8006c52:	462b      	mov	r3, r5
 8006c54:	461d      	mov	r5, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c5c:	2a39      	cmp	r2, #57	; 0x39
 8006c5e:	d050      	beq.n	8006d02 <_dtoa_r+0xb72>
 8006c60:	3201      	adds	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	e745      	b.n	8006af2 <_dtoa_r+0x962>
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	dd03      	ble.n	8006c72 <_dtoa_r+0xae2>
 8006c6a:	2b39      	cmp	r3, #57	; 0x39
 8006c6c:	d0ee      	beq.n	8006c4c <_dtoa_r+0xabc>
 8006c6e:	3301      	adds	r3, #1
 8006c70:	e7c7      	b.n	8006c02 <_dtoa_r+0xa72>
 8006c72:	9a01      	ldr	r2, [sp, #4]
 8006c74:	9907      	ldr	r1, [sp, #28]
 8006c76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c7a:	428a      	cmp	r2, r1
 8006c7c:	d02a      	beq.n	8006cd4 <_dtoa_r+0xb44>
 8006c7e:	4659      	mov	r1, fp
 8006c80:	2300      	movs	r3, #0
 8006c82:	220a      	movs	r2, #10
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fb0b 	bl	80072a0 <__multadd>
 8006c8a:	45b8      	cmp	r8, r7
 8006c8c:	4683      	mov	fp, r0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	f04f 020a 	mov.w	r2, #10
 8006c96:	4641      	mov	r1, r8
 8006c98:	4620      	mov	r0, r4
 8006c9a:	d107      	bne.n	8006cac <_dtoa_r+0xb1c>
 8006c9c:	f000 fb00 	bl	80072a0 <__multadd>
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	9b01      	ldr	r3, [sp, #4]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	e775      	b.n	8006b98 <_dtoa_r+0xa08>
 8006cac:	f000 faf8 	bl	80072a0 <__multadd>
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	220a      	movs	r2, #10
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 faf1 	bl	80072a0 <__multadd>
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	e7f0      	b.n	8006ca4 <_dtoa_r+0xb14>
 8006cc2:	f1b9 0f00 	cmp.w	r9, #0
 8006cc6:	9a00      	ldr	r2, [sp, #0]
 8006cc8:	bfcc      	ite	gt
 8006cca:	464d      	movgt	r5, r9
 8006ccc:	2501      	movle	r5, #1
 8006cce:	4415      	add	r5, r2
 8006cd0:	f04f 0800 	mov.w	r8, #0
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	4620      	mov	r0, r4
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	f000 fc90 	bl	8007600 <__lshift>
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4683      	mov	fp, r0
 8006ce4:	f000 fcf8 	bl	80076d8 <__mcmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	dcb2      	bgt.n	8006c52 <_dtoa_r+0xac2>
 8006cec:	d102      	bne.n	8006cf4 <_dtoa_r+0xb64>
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	07db      	lsls	r3, r3, #31
 8006cf2:	d4ae      	bmi.n	8006c52 <_dtoa_r+0xac2>
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cfc:	2a30      	cmp	r2, #48	; 0x30
 8006cfe:	d0fa      	beq.n	8006cf6 <_dtoa_r+0xb66>
 8006d00:	e6f7      	b.n	8006af2 <_dtoa_r+0x962>
 8006d02:	9a00      	ldr	r2, [sp, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d1a5      	bne.n	8006c54 <_dtoa_r+0xac4>
 8006d08:	f10a 0a01 	add.w	sl, sl, #1
 8006d0c:	2331      	movs	r3, #49	; 0x31
 8006d0e:	e779      	b.n	8006c04 <_dtoa_r+0xa74>
 8006d10:	4b13      	ldr	r3, [pc, #76]	; (8006d60 <_dtoa_r+0xbd0>)
 8006d12:	f7ff baaf 	b.w	8006274 <_dtoa_r+0xe4>
 8006d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f47f aa86 	bne.w	800622a <_dtoa_r+0x9a>
 8006d1e:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <_dtoa_r+0xbd4>)
 8006d20:	f7ff baa8 	b.w	8006274 <_dtoa_r+0xe4>
 8006d24:	f1b9 0f00 	cmp.w	r9, #0
 8006d28:	dc03      	bgt.n	8006d32 <_dtoa_r+0xba2>
 8006d2a:	9b05      	ldr	r3, [sp, #20]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	f73f aec9 	bgt.w	8006ac4 <_dtoa_r+0x934>
 8006d32:	9d00      	ldr	r5, [sp, #0]
 8006d34:	4631      	mov	r1, r6
 8006d36:	4658      	mov	r0, fp
 8006d38:	f7ff f99c 	bl	8006074 <quorem>
 8006d3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d40:	f805 3b01 	strb.w	r3, [r5], #1
 8006d44:	9a00      	ldr	r2, [sp, #0]
 8006d46:	1aaa      	subs	r2, r5, r2
 8006d48:	4591      	cmp	r9, r2
 8006d4a:	ddba      	ble.n	8006cc2 <_dtoa_r+0xb32>
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	2300      	movs	r3, #0
 8006d50:	220a      	movs	r2, #10
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 faa4 	bl	80072a0 <__multadd>
 8006d58:	4683      	mov	fp, r0
 8006d5a:	e7eb      	b.n	8006d34 <_dtoa_r+0xba4>
 8006d5c:	080096a7 	.word	0x080096a7
 8006d60:	08009600 	.word	0x08009600
 8006d64:	08009624 	.word	0x08009624

08006d68 <__sflush_r>:
 8006d68:	898a      	ldrh	r2, [r1, #12]
 8006d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6e:	4605      	mov	r5, r0
 8006d70:	0710      	lsls	r0, r2, #28
 8006d72:	460c      	mov	r4, r1
 8006d74:	d458      	bmi.n	8006e28 <__sflush_r+0xc0>
 8006d76:	684b      	ldr	r3, [r1, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dc05      	bgt.n	8006d88 <__sflush_r+0x20>
 8006d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dc02      	bgt.n	8006d88 <__sflush_r+0x20>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	d0f9      	beq.n	8006d82 <__sflush_r+0x1a>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d94:	682f      	ldr	r7, [r5, #0]
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	d032      	beq.n	8006e00 <__sflush_r+0x98>
 8006d9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	075a      	lsls	r2, r3, #29
 8006da0:	d505      	bpl.n	8006dae <__sflush_r+0x46>
 8006da2:	6863      	ldr	r3, [r4, #4]
 8006da4:	1ac0      	subs	r0, r0, r3
 8006da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006da8:	b10b      	cbz	r3, 8006dae <__sflush_r+0x46>
 8006daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dac:	1ac0      	subs	r0, r0, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	4602      	mov	r2, r0
 8006db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db4:	6a21      	ldr	r1, [r4, #32]
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b0      	blx	r6
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	d106      	bne.n	8006dce <__sflush_r+0x66>
 8006dc0:	6829      	ldr	r1, [r5, #0]
 8006dc2:	291d      	cmp	r1, #29
 8006dc4:	d82c      	bhi.n	8006e20 <__sflush_r+0xb8>
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <__sflush_r+0x108>)
 8006dc8:	40ca      	lsrs	r2, r1
 8006dca:	07d6      	lsls	r6, r2, #31
 8006dcc:	d528      	bpl.n	8006e20 <__sflush_r+0xb8>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6062      	str	r2, [r4, #4]
 8006dd2:	04d9      	lsls	r1, r3, #19
 8006dd4:	6922      	ldr	r2, [r4, #16]
 8006dd6:	6022      	str	r2, [r4, #0]
 8006dd8:	d504      	bpl.n	8006de4 <__sflush_r+0x7c>
 8006dda:	1c42      	adds	r2, r0, #1
 8006ddc:	d101      	bne.n	8006de2 <__sflush_r+0x7a>
 8006dde:	682b      	ldr	r3, [r5, #0]
 8006de0:	b903      	cbnz	r3, 8006de4 <__sflush_r+0x7c>
 8006de2:	6560      	str	r0, [r4, #84]	; 0x54
 8006de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006de6:	602f      	str	r7, [r5, #0]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	d0ca      	beq.n	8006d82 <__sflush_r+0x1a>
 8006dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d002      	beq.n	8006dfa <__sflush_r+0x92>
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 fd7f 	bl	80078f8 <_free_r>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8006dfe:	e7c1      	b.n	8006d84 <__sflush_r+0x1c>
 8006e00:	6a21      	ldr	r1, [r4, #32]
 8006e02:	2301      	movs	r3, #1
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b0      	blx	r6
 8006e08:	1c41      	adds	r1, r0, #1
 8006e0a:	d1c7      	bne.n	8006d9c <__sflush_r+0x34>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0c4      	beq.n	8006d9c <__sflush_r+0x34>
 8006e12:	2b1d      	cmp	r3, #29
 8006e14:	d001      	beq.n	8006e1a <__sflush_r+0xb2>
 8006e16:	2b16      	cmp	r3, #22
 8006e18:	d101      	bne.n	8006e1e <__sflush_r+0xb6>
 8006e1a:	602f      	str	r7, [r5, #0]
 8006e1c:	e7b1      	b.n	8006d82 <__sflush_r+0x1a>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	e7ad      	b.n	8006d84 <__sflush_r+0x1c>
 8006e28:	690f      	ldr	r7, [r1, #16]
 8006e2a:	2f00      	cmp	r7, #0
 8006e2c:	d0a9      	beq.n	8006d82 <__sflush_r+0x1a>
 8006e2e:	0793      	lsls	r3, r2, #30
 8006e30:	680e      	ldr	r6, [r1, #0]
 8006e32:	bf08      	it	eq
 8006e34:	694b      	ldreq	r3, [r1, #20]
 8006e36:	600f      	str	r7, [r1, #0]
 8006e38:	bf18      	it	ne
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	eba6 0807 	sub.w	r8, r6, r7
 8006e40:	608b      	str	r3, [r1, #8]
 8006e42:	f1b8 0f00 	cmp.w	r8, #0
 8006e46:	dd9c      	ble.n	8006d82 <__sflush_r+0x1a>
 8006e48:	6a21      	ldr	r1, [r4, #32]
 8006e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e4c:	4643      	mov	r3, r8
 8006e4e:	463a      	mov	r2, r7
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b0      	blx	r6
 8006e54:	2800      	cmp	r0, #0
 8006e56:	dc06      	bgt.n	8006e66 <__sflush_r+0xfe>
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e78e      	b.n	8006d84 <__sflush_r+0x1c>
 8006e66:	4407      	add	r7, r0
 8006e68:	eba8 0800 	sub.w	r8, r8, r0
 8006e6c:	e7e9      	b.n	8006e42 <__sflush_r+0xda>
 8006e6e:	bf00      	nop
 8006e70:	20400001 	.word	0x20400001

08006e74 <_fflush_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	b913      	cbnz	r3, 8006e84 <_fflush_r+0x10>
 8006e7e:	2500      	movs	r5, #0
 8006e80:	4628      	mov	r0, r5
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	b118      	cbz	r0, 8006e8e <_fflush_r+0x1a>
 8006e86:	6983      	ldr	r3, [r0, #24]
 8006e88:	b90b      	cbnz	r3, 8006e8e <_fflush_r+0x1a>
 8006e8a:	f000 f887 	bl	8006f9c <__sinit>
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <_fflush_r+0x6c>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d11b      	bne.n	8006ecc <_fflush_r+0x58>
 8006e94:	686c      	ldr	r4, [r5, #4]
 8006e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0ef      	beq.n	8006e7e <_fflush_r+0xa>
 8006e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ea0:	07d0      	lsls	r0, r2, #31
 8006ea2:	d404      	bmi.n	8006eae <_fflush_r+0x3a>
 8006ea4:	0599      	lsls	r1, r3, #22
 8006ea6:	d402      	bmi.n	8006eae <_fflush_r+0x3a>
 8006ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eaa:	f000 f91a 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8006eae:	4628      	mov	r0, r5
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	f7ff ff59 	bl	8006d68 <__sflush_r>
 8006eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb8:	07da      	lsls	r2, r3, #31
 8006eba:	4605      	mov	r5, r0
 8006ebc:	d4e0      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	059b      	lsls	r3, r3, #22
 8006ec2:	d4dd      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec6:	f000 f90d 	bl	80070e4 <__retarget_lock_release_recursive>
 8006eca:	e7d9      	b.n	8006e80 <_fflush_r+0xc>
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <_fflush_r+0x70>)
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	d101      	bne.n	8006ed6 <_fflush_r+0x62>
 8006ed2:	68ac      	ldr	r4, [r5, #8]
 8006ed4:	e7df      	b.n	8006e96 <_fflush_r+0x22>
 8006ed6:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <_fflush_r+0x74>)
 8006ed8:	429c      	cmp	r4, r3
 8006eda:	bf08      	it	eq
 8006edc:	68ec      	ldreq	r4, [r5, #12]
 8006ede:	e7da      	b.n	8006e96 <_fflush_r+0x22>
 8006ee0:	080096d8 	.word	0x080096d8
 8006ee4:	080096f8 	.word	0x080096f8
 8006ee8:	080096b8 	.word	0x080096b8

08006eec <std>:
 8006eec:	2300      	movs	r3, #0
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006efa:	6083      	str	r3, [r0, #8]
 8006efc:	8181      	strh	r1, [r0, #12]
 8006efe:	6643      	str	r3, [r0, #100]	; 0x64
 8006f00:	81c2      	strh	r2, [r0, #14]
 8006f02:	6183      	str	r3, [r0, #24]
 8006f04:	4619      	mov	r1, r3
 8006f06:	2208      	movs	r2, #8
 8006f08:	305c      	adds	r0, #92	; 0x5c
 8006f0a:	f7fe faf3 	bl	80054f4 <memset>
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <std+0x38>)
 8006f10:	6263      	str	r3, [r4, #36]	; 0x24
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <std+0x3c>)
 8006f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <std+0x40>)
 8006f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <std+0x44>)
 8006f1c:	6224      	str	r4, [r4, #32]
 8006f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	08007d21 	.word	0x08007d21
 8006f28:	08007d43 	.word	0x08007d43
 8006f2c:	08007d7b 	.word	0x08007d7b
 8006f30:	08007d9f 	.word	0x08007d9f

08006f34 <_cleanup_r>:
 8006f34:	4901      	ldr	r1, [pc, #4]	; (8006f3c <_cleanup_r+0x8>)
 8006f36:	f000 b8af 	b.w	8007098 <_fwalk_reent>
 8006f3a:	bf00      	nop
 8006f3c:	08006e75 	.word	0x08006e75

08006f40 <__sfmoreglue>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	1e4a      	subs	r2, r1, #1
 8006f44:	2568      	movs	r5, #104	; 0x68
 8006f46:	4355      	muls	r5, r2
 8006f48:	460e      	mov	r6, r1
 8006f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f4e:	f000 fd23 	bl	8007998 <_malloc_r>
 8006f52:	4604      	mov	r4, r0
 8006f54:	b140      	cbz	r0, 8006f68 <__sfmoreglue+0x28>
 8006f56:	2100      	movs	r1, #0
 8006f58:	e9c0 1600 	strd	r1, r6, [r0]
 8006f5c:	300c      	adds	r0, #12
 8006f5e:	60a0      	str	r0, [r4, #8]
 8006f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f64:	f7fe fac6 	bl	80054f4 <memset>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}

08006f6c <__sfp_lock_acquire>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__sfp_lock_acquire+0x8>)
 8006f6e:	f000 b8b8 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20000820 	.word	0x20000820

08006f78 <__sfp_lock_release>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__sfp_lock_release+0x8>)
 8006f7a:	f000 b8b3 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20000820 	.word	0x20000820

08006f84 <__sinit_lock_acquire>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__sinit_lock_acquire+0x8>)
 8006f86:	f000 b8ac 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	2000081b 	.word	0x2000081b

08006f90 <__sinit_lock_release>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__sinit_lock_release+0x8>)
 8006f92:	f000 b8a7 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	2000081b 	.word	0x2000081b

08006f9c <__sinit>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	f7ff fff0 	bl	8006f84 <__sinit_lock_acquire>
 8006fa4:	69a3      	ldr	r3, [r4, #24]
 8006fa6:	b11b      	cbz	r3, 8006fb0 <__sinit+0x14>
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f7ff bff0 	b.w	8006f90 <__sinit_lock_release>
 8006fb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8006fb6:	4b13      	ldr	r3, [pc, #76]	; (8007004 <__sinit+0x68>)
 8006fb8:	4a13      	ldr	r2, [pc, #76]	; (8007008 <__sinit+0x6c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	bf04      	itt	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	61a3      	streq	r3, [r4, #24]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f820 	bl	800700c <__sfp>
 8006fcc:	6060      	str	r0, [r4, #4]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 f81c 	bl	800700c <__sfp>
 8006fd4:	60a0      	str	r0, [r4, #8]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 f818 	bl	800700c <__sfp>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	60e0      	str	r0, [r4, #12]
 8006fe0:	2104      	movs	r1, #4
 8006fe2:	6860      	ldr	r0, [r4, #4]
 8006fe4:	f7ff ff82 	bl	8006eec <std>
 8006fe8:	68a0      	ldr	r0, [r4, #8]
 8006fea:	2201      	movs	r2, #1
 8006fec:	2109      	movs	r1, #9
 8006fee:	f7ff ff7d 	bl	8006eec <std>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	2112      	movs	r1, #18
 8006ff8:	f7ff ff78 	bl	8006eec <std>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	61a3      	str	r3, [r4, #24]
 8007000:	e7d2      	b.n	8006fa8 <__sinit+0xc>
 8007002:	bf00      	nop
 8007004:	080095ec 	.word	0x080095ec
 8007008:	08006f35 	.word	0x08006f35

0800700c <__sfp>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	4607      	mov	r7, r0
 8007010:	f7ff ffac 	bl	8006f6c <__sfp_lock_acquire>
 8007014:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <__sfp+0x84>)
 8007016:	681e      	ldr	r6, [r3, #0]
 8007018:	69b3      	ldr	r3, [r6, #24]
 800701a:	b913      	cbnz	r3, 8007022 <__sfp+0x16>
 800701c:	4630      	mov	r0, r6
 800701e:	f7ff ffbd 	bl	8006f9c <__sinit>
 8007022:	3648      	adds	r6, #72	; 0x48
 8007024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007028:	3b01      	subs	r3, #1
 800702a:	d503      	bpl.n	8007034 <__sfp+0x28>
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	b30b      	cbz	r3, 8007074 <__sfp+0x68>
 8007030:	6836      	ldr	r6, [r6, #0]
 8007032:	e7f7      	b.n	8007024 <__sfp+0x18>
 8007034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007038:	b9d5      	cbnz	r5, 8007070 <__sfp+0x64>
 800703a:	4b16      	ldr	r3, [pc, #88]	; (8007094 <__sfp+0x88>)
 800703c:	60e3      	str	r3, [r4, #12]
 800703e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007042:	6665      	str	r5, [r4, #100]	; 0x64
 8007044:	f000 f84c 	bl	80070e0 <__retarget_lock_init_recursive>
 8007048:	f7ff ff96 	bl	8006f78 <__sfp_lock_release>
 800704c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007054:	6025      	str	r5, [r4, #0]
 8007056:	61a5      	str	r5, [r4, #24]
 8007058:	2208      	movs	r2, #8
 800705a:	4629      	mov	r1, r5
 800705c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007060:	f7fe fa48 	bl	80054f4 <memset>
 8007064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800706c:	4620      	mov	r0, r4
 800706e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007070:	3468      	adds	r4, #104	; 0x68
 8007072:	e7d9      	b.n	8007028 <__sfp+0x1c>
 8007074:	2104      	movs	r1, #4
 8007076:	4638      	mov	r0, r7
 8007078:	f7ff ff62 	bl	8006f40 <__sfmoreglue>
 800707c:	4604      	mov	r4, r0
 800707e:	6030      	str	r0, [r6, #0]
 8007080:	2800      	cmp	r0, #0
 8007082:	d1d5      	bne.n	8007030 <__sfp+0x24>
 8007084:	f7ff ff78 	bl	8006f78 <__sfp_lock_release>
 8007088:	230c      	movs	r3, #12
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	e7ee      	b.n	800706c <__sfp+0x60>
 800708e:	bf00      	nop
 8007090:	080095ec 	.word	0x080095ec
 8007094:	ffff0001 	.word	0xffff0001

08007098 <_fwalk_reent>:
 8007098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800709c:	4606      	mov	r6, r0
 800709e:	4688      	mov	r8, r1
 80070a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070a4:	2700      	movs	r7, #0
 80070a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070aa:	f1b9 0901 	subs.w	r9, r9, #1
 80070ae:	d505      	bpl.n	80070bc <_fwalk_reent+0x24>
 80070b0:	6824      	ldr	r4, [r4, #0]
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	d1f7      	bne.n	80070a6 <_fwalk_reent+0xe>
 80070b6:	4638      	mov	r0, r7
 80070b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d907      	bls.n	80070d2 <_fwalk_reent+0x3a>
 80070c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070c6:	3301      	adds	r3, #1
 80070c8:	d003      	beq.n	80070d2 <_fwalk_reent+0x3a>
 80070ca:	4629      	mov	r1, r5
 80070cc:	4630      	mov	r0, r6
 80070ce:	47c0      	blx	r8
 80070d0:	4307      	orrs	r7, r0
 80070d2:	3568      	adds	r5, #104	; 0x68
 80070d4:	e7e9      	b.n	80070aa <_fwalk_reent+0x12>
	...

080070d8 <_localeconv_r>:
 80070d8:	4800      	ldr	r0, [pc, #0]	; (80070dc <_localeconv_r+0x4>)
 80070da:	4770      	bx	lr
 80070dc:	20000160 	.word	0x20000160

080070e0 <__retarget_lock_init_recursive>:
 80070e0:	4770      	bx	lr

080070e2 <__retarget_lock_acquire_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_release_recursive>:
 80070e4:	4770      	bx	lr

080070e6 <__swhatbuf_r>:
 80070e6:	b570      	push	{r4, r5, r6, lr}
 80070e8:	460e      	mov	r6, r1
 80070ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ee:	2900      	cmp	r1, #0
 80070f0:	b096      	sub	sp, #88	; 0x58
 80070f2:	4614      	mov	r4, r2
 80070f4:	461d      	mov	r5, r3
 80070f6:	da07      	bge.n	8007108 <__swhatbuf_r+0x22>
 80070f8:	2300      	movs	r3, #0
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	89b3      	ldrh	r3, [r6, #12]
 80070fe:	061a      	lsls	r2, r3, #24
 8007100:	d410      	bmi.n	8007124 <__swhatbuf_r+0x3e>
 8007102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007106:	e00e      	b.n	8007126 <__swhatbuf_r+0x40>
 8007108:	466a      	mov	r2, sp
 800710a:	f000 fe9f 	bl	8007e4c <_fstat_r>
 800710e:	2800      	cmp	r0, #0
 8007110:	dbf2      	blt.n	80070f8 <__swhatbuf_r+0x12>
 8007112:	9a01      	ldr	r2, [sp, #4]
 8007114:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007118:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800711c:	425a      	negs	r2, r3
 800711e:	415a      	adcs	r2, r3
 8007120:	602a      	str	r2, [r5, #0]
 8007122:	e7ee      	b.n	8007102 <__swhatbuf_r+0x1c>
 8007124:	2340      	movs	r3, #64	; 0x40
 8007126:	2000      	movs	r0, #0
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	b016      	add	sp, #88	; 0x58
 800712c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007130 <__smakebuf_r>:
 8007130:	898b      	ldrh	r3, [r1, #12]
 8007132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007134:	079d      	lsls	r5, r3, #30
 8007136:	4606      	mov	r6, r0
 8007138:	460c      	mov	r4, r1
 800713a:	d507      	bpl.n	800714c <__smakebuf_r+0x1c>
 800713c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	2301      	movs	r3, #1
 8007146:	6163      	str	r3, [r4, #20]
 8007148:	b002      	add	sp, #8
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	ab01      	add	r3, sp, #4
 800714e:	466a      	mov	r2, sp
 8007150:	f7ff ffc9 	bl	80070e6 <__swhatbuf_r>
 8007154:	9900      	ldr	r1, [sp, #0]
 8007156:	4605      	mov	r5, r0
 8007158:	4630      	mov	r0, r6
 800715a:	f000 fc1d 	bl	8007998 <_malloc_r>
 800715e:	b948      	cbnz	r0, 8007174 <__smakebuf_r+0x44>
 8007160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007164:	059a      	lsls	r2, r3, #22
 8007166:	d4ef      	bmi.n	8007148 <__smakebuf_r+0x18>
 8007168:	f023 0303 	bic.w	r3, r3, #3
 800716c:	f043 0302 	orr.w	r3, r3, #2
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	e7e3      	b.n	800713c <__smakebuf_r+0xc>
 8007174:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <__smakebuf_r+0x7c>)
 8007176:	62b3      	str	r3, [r6, #40]	; 0x28
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	6020      	str	r0, [r4, #0]
 800717c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	9b00      	ldr	r3, [sp, #0]
 8007184:	6163      	str	r3, [r4, #20]
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	6120      	str	r0, [r4, #16]
 800718a:	b15b      	cbz	r3, 80071a4 <__smakebuf_r+0x74>
 800718c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007190:	4630      	mov	r0, r6
 8007192:	f000 fe6d 	bl	8007e70 <_isatty_r>
 8007196:	b128      	cbz	r0, 80071a4 <__smakebuf_r+0x74>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	89a0      	ldrh	r0, [r4, #12]
 80071a6:	4305      	orrs	r5, r0
 80071a8:	81a5      	strh	r5, [r4, #12]
 80071aa:	e7cd      	b.n	8007148 <__smakebuf_r+0x18>
 80071ac:	08006f35 	.word	0x08006f35

080071b0 <malloc>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <malloc+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f000 bbef 	b.w	8007998 <_malloc_r>
 80071ba:	bf00      	nop
 80071bc:	2000000c 	.word	0x2000000c

080071c0 <memcpy>:
 80071c0:	440a      	add	r2, r1
 80071c2:	4291      	cmp	r1, r2
 80071c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071c8:	d100      	bne.n	80071cc <memcpy+0xc>
 80071ca:	4770      	bx	lr
 80071cc:	b510      	push	{r4, lr}
 80071ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d6:	4291      	cmp	r1, r2
 80071d8:	d1f9      	bne.n	80071ce <memcpy+0xe>
 80071da:	bd10      	pop	{r4, pc}

080071dc <_Balloc>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	b976      	cbnz	r6, 8007204 <_Balloc+0x28>
 80071e6:	2010      	movs	r0, #16
 80071e8:	f7ff ffe2 	bl	80071b0 <malloc>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6260      	str	r0, [r4, #36]	; 0x24
 80071f0:	b920      	cbnz	r0, 80071fc <_Balloc+0x20>
 80071f2:	4b18      	ldr	r3, [pc, #96]	; (8007254 <_Balloc+0x78>)
 80071f4:	4818      	ldr	r0, [pc, #96]	; (8007258 <_Balloc+0x7c>)
 80071f6:	2166      	movs	r1, #102	; 0x66
 80071f8:	f000 fde8 	bl	8007dcc <__assert_func>
 80071fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007200:	6006      	str	r6, [r0, #0]
 8007202:	60c6      	str	r6, [r0, #12]
 8007204:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007206:	68f3      	ldr	r3, [r6, #12]
 8007208:	b183      	cbz	r3, 800722c <_Balloc+0x50>
 800720a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007212:	b9b8      	cbnz	r0, 8007244 <_Balloc+0x68>
 8007214:	2101      	movs	r1, #1
 8007216:	fa01 f605 	lsl.w	r6, r1, r5
 800721a:	1d72      	adds	r2, r6, #5
 800721c:	0092      	lsls	r2, r2, #2
 800721e:	4620      	mov	r0, r4
 8007220:	f000 fb5a 	bl	80078d8 <_calloc_r>
 8007224:	b160      	cbz	r0, 8007240 <_Balloc+0x64>
 8007226:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800722a:	e00e      	b.n	800724a <_Balloc+0x6e>
 800722c:	2221      	movs	r2, #33	; 0x21
 800722e:	2104      	movs	r1, #4
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fb51 	bl	80078d8 <_calloc_r>
 8007236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007238:	60f0      	str	r0, [r6, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e4      	bne.n	800720a <_Balloc+0x2e>
 8007240:	2000      	movs	r0, #0
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	6802      	ldr	r2, [r0, #0]
 8007246:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800724a:	2300      	movs	r3, #0
 800724c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007250:	e7f7      	b.n	8007242 <_Balloc+0x66>
 8007252:	bf00      	nop
 8007254:	08009631 	.word	0x08009631
 8007258:	08009718 	.word	0x08009718

0800725c <_Bfree>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007260:	4605      	mov	r5, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b976      	cbnz	r6, 8007284 <_Bfree+0x28>
 8007266:	2010      	movs	r0, #16
 8007268:	f7ff ffa2 	bl	80071b0 <malloc>
 800726c:	4602      	mov	r2, r0
 800726e:	6268      	str	r0, [r5, #36]	; 0x24
 8007270:	b920      	cbnz	r0, 800727c <_Bfree+0x20>
 8007272:	4b09      	ldr	r3, [pc, #36]	; (8007298 <_Bfree+0x3c>)
 8007274:	4809      	ldr	r0, [pc, #36]	; (800729c <_Bfree+0x40>)
 8007276:	218a      	movs	r1, #138	; 0x8a
 8007278:	f000 fda8 	bl	8007dcc <__assert_func>
 800727c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007280:	6006      	str	r6, [r0, #0]
 8007282:	60c6      	str	r6, [r0, #12]
 8007284:	b13c      	cbz	r4, 8007296 <_Bfree+0x3a>
 8007286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007290:	6021      	str	r1, [r4, #0]
 8007292:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	08009631 	.word	0x08009631
 800729c:	08009718 	.word	0x08009718

080072a0 <__multadd>:
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	690e      	ldr	r6, [r1, #16]
 80072a6:	4607      	mov	r7, r0
 80072a8:	4698      	mov	r8, r3
 80072aa:	460c      	mov	r4, r1
 80072ac:	f101 0014 	add.w	r0, r1, #20
 80072b0:	2300      	movs	r3, #0
 80072b2:	6805      	ldr	r5, [r0, #0]
 80072b4:	b2a9      	uxth	r1, r5
 80072b6:	fb02 8101 	mla	r1, r2, r1, r8
 80072ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80072be:	0c2d      	lsrs	r5, r5, #16
 80072c0:	fb02 c505 	mla	r5, r2, r5, ip
 80072c4:	b289      	uxth	r1, r1
 80072c6:	3301      	adds	r3, #1
 80072c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80072cc:	429e      	cmp	r6, r3
 80072ce:	f840 1b04 	str.w	r1, [r0], #4
 80072d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80072d6:	dcec      	bgt.n	80072b2 <__multadd+0x12>
 80072d8:	f1b8 0f00 	cmp.w	r8, #0
 80072dc:	d022      	beq.n	8007324 <__multadd+0x84>
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	42b3      	cmp	r3, r6
 80072e2:	dc19      	bgt.n	8007318 <__multadd+0x78>
 80072e4:	6861      	ldr	r1, [r4, #4]
 80072e6:	4638      	mov	r0, r7
 80072e8:	3101      	adds	r1, #1
 80072ea:	f7ff ff77 	bl	80071dc <_Balloc>
 80072ee:	4605      	mov	r5, r0
 80072f0:	b928      	cbnz	r0, 80072fe <__multadd+0x5e>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b0d      	ldr	r3, [pc, #52]	; (800732c <__multadd+0x8c>)
 80072f6:	480e      	ldr	r0, [pc, #56]	; (8007330 <__multadd+0x90>)
 80072f8:	21b5      	movs	r1, #181	; 0xb5
 80072fa:	f000 fd67 	bl	8007dcc <__assert_func>
 80072fe:	6922      	ldr	r2, [r4, #16]
 8007300:	3202      	adds	r2, #2
 8007302:	f104 010c 	add.w	r1, r4, #12
 8007306:	0092      	lsls	r2, r2, #2
 8007308:	300c      	adds	r0, #12
 800730a:	f7ff ff59 	bl	80071c0 <memcpy>
 800730e:	4621      	mov	r1, r4
 8007310:	4638      	mov	r0, r7
 8007312:	f7ff ffa3 	bl	800725c <_Bfree>
 8007316:	462c      	mov	r4, r5
 8007318:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800731c:	3601      	adds	r6, #1
 800731e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007322:	6126      	str	r6, [r4, #16]
 8007324:	4620      	mov	r0, r4
 8007326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732a:	bf00      	nop
 800732c:	080096a7 	.word	0x080096a7
 8007330:	08009718 	.word	0x08009718

08007334 <__hi0bits>:
 8007334:	0c03      	lsrs	r3, r0, #16
 8007336:	041b      	lsls	r3, r3, #16
 8007338:	b9d3      	cbnz	r3, 8007370 <__hi0bits+0x3c>
 800733a:	0400      	lsls	r0, r0, #16
 800733c:	2310      	movs	r3, #16
 800733e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007342:	bf04      	itt	eq
 8007344:	0200      	lsleq	r0, r0, #8
 8007346:	3308      	addeq	r3, #8
 8007348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800734c:	bf04      	itt	eq
 800734e:	0100      	lsleq	r0, r0, #4
 8007350:	3304      	addeq	r3, #4
 8007352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007356:	bf04      	itt	eq
 8007358:	0080      	lsleq	r0, r0, #2
 800735a:	3302      	addeq	r3, #2
 800735c:	2800      	cmp	r0, #0
 800735e:	db05      	blt.n	800736c <__hi0bits+0x38>
 8007360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007364:	f103 0301 	add.w	r3, r3, #1
 8007368:	bf08      	it	eq
 800736a:	2320      	moveq	r3, #32
 800736c:	4618      	mov	r0, r3
 800736e:	4770      	bx	lr
 8007370:	2300      	movs	r3, #0
 8007372:	e7e4      	b.n	800733e <__hi0bits+0xa>

08007374 <__lo0bits>:
 8007374:	6803      	ldr	r3, [r0, #0]
 8007376:	f013 0207 	ands.w	r2, r3, #7
 800737a:	4601      	mov	r1, r0
 800737c:	d00b      	beq.n	8007396 <__lo0bits+0x22>
 800737e:	07da      	lsls	r2, r3, #31
 8007380:	d424      	bmi.n	80073cc <__lo0bits+0x58>
 8007382:	0798      	lsls	r0, r3, #30
 8007384:	bf49      	itett	mi
 8007386:	085b      	lsrmi	r3, r3, #1
 8007388:	089b      	lsrpl	r3, r3, #2
 800738a:	2001      	movmi	r0, #1
 800738c:	600b      	strmi	r3, [r1, #0]
 800738e:	bf5c      	itt	pl
 8007390:	600b      	strpl	r3, [r1, #0]
 8007392:	2002      	movpl	r0, #2
 8007394:	4770      	bx	lr
 8007396:	b298      	uxth	r0, r3
 8007398:	b9b0      	cbnz	r0, 80073c8 <__lo0bits+0x54>
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	2010      	movs	r0, #16
 800739e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80073a2:	bf04      	itt	eq
 80073a4:	0a1b      	lsreq	r3, r3, #8
 80073a6:	3008      	addeq	r0, #8
 80073a8:	071a      	lsls	r2, r3, #28
 80073aa:	bf04      	itt	eq
 80073ac:	091b      	lsreq	r3, r3, #4
 80073ae:	3004      	addeq	r0, #4
 80073b0:	079a      	lsls	r2, r3, #30
 80073b2:	bf04      	itt	eq
 80073b4:	089b      	lsreq	r3, r3, #2
 80073b6:	3002      	addeq	r0, #2
 80073b8:	07da      	lsls	r2, r3, #31
 80073ba:	d403      	bmi.n	80073c4 <__lo0bits+0x50>
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	f100 0001 	add.w	r0, r0, #1
 80073c2:	d005      	beq.n	80073d0 <__lo0bits+0x5c>
 80073c4:	600b      	str	r3, [r1, #0]
 80073c6:	4770      	bx	lr
 80073c8:	4610      	mov	r0, r2
 80073ca:	e7e8      	b.n	800739e <__lo0bits+0x2a>
 80073cc:	2000      	movs	r0, #0
 80073ce:	4770      	bx	lr
 80073d0:	2020      	movs	r0, #32
 80073d2:	4770      	bx	lr

080073d4 <__i2b>:
 80073d4:	b510      	push	{r4, lr}
 80073d6:	460c      	mov	r4, r1
 80073d8:	2101      	movs	r1, #1
 80073da:	f7ff feff 	bl	80071dc <_Balloc>
 80073de:	4602      	mov	r2, r0
 80073e0:	b928      	cbnz	r0, 80073ee <__i2b+0x1a>
 80073e2:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <__i2b+0x24>)
 80073e4:	4805      	ldr	r0, [pc, #20]	; (80073fc <__i2b+0x28>)
 80073e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073ea:	f000 fcef 	bl	8007dcc <__assert_func>
 80073ee:	2301      	movs	r3, #1
 80073f0:	6144      	str	r4, [r0, #20]
 80073f2:	6103      	str	r3, [r0, #16]
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	bf00      	nop
 80073f8:	080096a7 	.word	0x080096a7
 80073fc:	08009718 	.word	0x08009718

08007400 <__multiply>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	4614      	mov	r4, r2
 8007406:	690a      	ldr	r2, [r1, #16]
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	429a      	cmp	r2, r3
 800740c:	bfb8      	it	lt
 800740e:	460b      	movlt	r3, r1
 8007410:	460d      	mov	r5, r1
 8007412:	bfbc      	itt	lt
 8007414:	4625      	movlt	r5, r4
 8007416:	461c      	movlt	r4, r3
 8007418:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800741c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007420:	68ab      	ldr	r3, [r5, #8]
 8007422:	6869      	ldr	r1, [r5, #4]
 8007424:	eb0a 0709 	add.w	r7, sl, r9
 8007428:	42bb      	cmp	r3, r7
 800742a:	b085      	sub	sp, #20
 800742c:	bfb8      	it	lt
 800742e:	3101      	addlt	r1, #1
 8007430:	f7ff fed4 	bl	80071dc <_Balloc>
 8007434:	b930      	cbnz	r0, 8007444 <__multiply+0x44>
 8007436:	4602      	mov	r2, r0
 8007438:	4b42      	ldr	r3, [pc, #264]	; (8007544 <__multiply+0x144>)
 800743a:	4843      	ldr	r0, [pc, #268]	; (8007548 <__multiply+0x148>)
 800743c:	f240 115d 	movw	r1, #349	; 0x15d
 8007440:	f000 fcc4 	bl	8007dcc <__assert_func>
 8007444:	f100 0614 	add.w	r6, r0, #20
 8007448:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800744c:	4633      	mov	r3, r6
 800744e:	2200      	movs	r2, #0
 8007450:	4543      	cmp	r3, r8
 8007452:	d31e      	bcc.n	8007492 <__multiply+0x92>
 8007454:	f105 0c14 	add.w	ip, r5, #20
 8007458:	f104 0314 	add.w	r3, r4, #20
 800745c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007460:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007464:	9202      	str	r2, [sp, #8]
 8007466:	ebac 0205 	sub.w	r2, ip, r5
 800746a:	3a15      	subs	r2, #21
 800746c:	f022 0203 	bic.w	r2, r2, #3
 8007470:	3204      	adds	r2, #4
 8007472:	f105 0115 	add.w	r1, r5, #21
 8007476:	458c      	cmp	ip, r1
 8007478:	bf38      	it	cc
 800747a:	2204      	movcc	r2, #4
 800747c:	9201      	str	r2, [sp, #4]
 800747e:	9a02      	ldr	r2, [sp, #8]
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	429a      	cmp	r2, r3
 8007484:	d808      	bhi.n	8007498 <__multiply+0x98>
 8007486:	2f00      	cmp	r7, #0
 8007488:	dc55      	bgt.n	8007536 <__multiply+0x136>
 800748a:	6107      	str	r7, [r0, #16]
 800748c:	b005      	add	sp, #20
 800748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	f843 2b04 	str.w	r2, [r3], #4
 8007496:	e7db      	b.n	8007450 <__multiply+0x50>
 8007498:	f8b3 a000 	ldrh.w	sl, [r3]
 800749c:	f1ba 0f00 	cmp.w	sl, #0
 80074a0:	d020      	beq.n	80074e4 <__multiply+0xe4>
 80074a2:	f105 0e14 	add.w	lr, r5, #20
 80074a6:	46b1      	mov	r9, r6
 80074a8:	2200      	movs	r2, #0
 80074aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80074ae:	f8d9 b000 	ldr.w	fp, [r9]
 80074b2:	b2a1      	uxth	r1, r4
 80074b4:	fa1f fb8b 	uxth.w	fp, fp
 80074b8:	fb0a b101 	mla	r1, sl, r1, fp
 80074bc:	4411      	add	r1, r2
 80074be:	f8d9 2000 	ldr.w	r2, [r9]
 80074c2:	0c24      	lsrs	r4, r4, #16
 80074c4:	0c12      	lsrs	r2, r2, #16
 80074c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80074ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80074ce:	b289      	uxth	r1, r1
 80074d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80074d4:	45f4      	cmp	ip, lr
 80074d6:	f849 1b04 	str.w	r1, [r9], #4
 80074da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80074de:	d8e4      	bhi.n	80074aa <__multiply+0xaa>
 80074e0:	9901      	ldr	r1, [sp, #4]
 80074e2:	5072      	str	r2, [r6, r1]
 80074e4:	9a03      	ldr	r2, [sp, #12]
 80074e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074ea:	3304      	adds	r3, #4
 80074ec:	f1b9 0f00 	cmp.w	r9, #0
 80074f0:	d01f      	beq.n	8007532 <__multiply+0x132>
 80074f2:	6834      	ldr	r4, [r6, #0]
 80074f4:	f105 0114 	add.w	r1, r5, #20
 80074f8:	46b6      	mov	lr, r6
 80074fa:	f04f 0a00 	mov.w	sl, #0
 80074fe:	880a      	ldrh	r2, [r1, #0]
 8007500:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007504:	fb09 b202 	mla	r2, r9, r2, fp
 8007508:	4492      	add	sl, r2
 800750a:	b2a4      	uxth	r4, r4
 800750c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007510:	f84e 4b04 	str.w	r4, [lr], #4
 8007514:	f851 4b04 	ldr.w	r4, [r1], #4
 8007518:	f8be 2000 	ldrh.w	r2, [lr]
 800751c:	0c24      	lsrs	r4, r4, #16
 800751e:	fb09 2404 	mla	r4, r9, r4, r2
 8007522:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007526:	458c      	cmp	ip, r1
 8007528:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800752c:	d8e7      	bhi.n	80074fe <__multiply+0xfe>
 800752e:	9a01      	ldr	r2, [sp, #4]
 8007530:	50b4      	str	r4, [r6, r2]
 8007532:	3604      	adds	r6, #4
 8007534:	e7a3      	b.n	800747e <__multiply+0x7e>
 8007536:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1a5      	bne.n	800748a <__multiply+0x8a>
 800753e:	3f01      	subs	r7, #1
 8007540:	e7a1      	b.n	8007486 <__multiply+0x86>
 8007542:	bf00      	nop
 8007544:	080096a7 	.word	0x080096a7
 8007548:	08009718 	.word	0x08009718

0800754c <__pow5mult>:
 800754c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007550:	4615      	mov	r5, r2
 8007552:	f012 0203 	ands.w	r2, r2, #3
 8007556:	4606      	mov	r6, r0
 8007558:	460f      	mov	r7, r1
 800755a:	d007      	beq.n	800756c <__pow5mult+0x20>
 800755c:	4c25      	ldr	r4, [pc, #148]	; (80075f4 <__pow5mult+0xa8>)
 800755e:	3a01      	subs	r2, #1
 8007560:	2300      	movs	r3, #0
 8007562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007566:	f7ff fe9b 	bl	80072a0 <__multadd>
 800756a:	4607      	mov	r7, r0
 800756c:	10ad      	asrs	r5, r5, #2
 800756e:	d03d      	beq.n	80075ec <__pow5mult+0xa0>
 8007570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007572:	b97c      	cbnz	r4, 8007594 <__pow5mult+0x48>
 8007574:	2010      	movs	r0, #16
 8007576:	f7ff fe1b 	bl	80071b0 <malloc>
 800757a:	4602      	mov	r2, r0
 800757c:	6270      	str	r0, [r6, #36]	; 0x24
 800757e:	b928      	cbnz	r0, 800758c <__pow5mult+0x40>
 8007580:	4b1d      	ldr	r3, [pc, #116]	; (80075f8 <__pow5mult+0xac>)
 8007582:	481e      	ldr	r0, [pc, #120]	; (80075fc <__pow5mult+0xb0>)
 8007584:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007588:	f000 fc20 	bl	8007dcc <__assert_func>
 800758c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007590:	6004      	str	r4, [r0, #0]
 8007592:	60c4      	str	r4, [r0, #12]
 8007594:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800759c:	b94c      	cbnz	r4, 80075b2 <__pow5mult+0x66>
 800759e:	f240 2171 	movw	r1, #625	; 0x271
 80075a2:	4630      	mov	r0, r6
 80075a4:	f7ff ff16 	bl	80073d4 <__i2b>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80075ae:	4604      	mov	r4, r0
 80075b0:	6003      	str	r3, [r0, #0]
 80075b2:	f04f 0900 	mov.w	r9, #0
 80075b6:	07eb      	lsls	r3, r5, #31
 80075b8:	d50a      	bpl.n	80075d0 <__pow5mult+0x84>
 80075ba:	4639      	mov	r1, r7
 80075bc:	4622      	mov	r2, r4
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff ff1e 	bl	8007400 <__multiply>
 80075c4:	4639      	mov	r1, r7
 80075c6:	4680      	mov	r8, r0
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff fe47 	bl	800725c <_Bfree>
 80075ce:	4647      	mov	r7, r8
 80075d0:	106d      	asrs	r5, r5, #1
 80075d2:	d00b      	beq.n	80075ec <__pow5mult+0xa0>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	b938      	cbnz	r0, 80075e8 <__pow5mult+0x9c>
 80075d8:	4622      	mov	r2, r4
 80075da:	4621      	mov	r1, r4
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff ff0f 	bl	8007400 <__multiply>
 80075e2:	6020      	str	r0, [r4, #0]
 80075e4:	f8c0 9000 	str.w	r9, [r0]
 80075e8:	4604      	mov	r4, r0
 80075ea:	e7e4      	b.n	80075b6 <__pow5mult+0x6a>
 80075ec:	4638      	mov	r0, r7
 80075ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075f2:	bf00      	nop
 80075f4:	08009868 	.word	0x08009868
 80075f8:	08009631 	.word	0x08009631
 80075fc:	08009718 	.word	0x08009718

08007600 <__lshift>:
 8007600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007604:	460c      	mov	r4, r1
 8007606:	6849      	ldr	r1, [r1, #4]
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	4607      	mov	r7, r0
 8007612:	4691      	mov	r9, r2
 8007614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007618:	f108 0601 	add.w	r6, r8, #1
 800761c:	42b3      	cmp	r3, r6
 800761e:	db0b      	blt.n	8007638 <__lshift+0x38>
 8007620:	4638      	mov	r0, r7
 8007622:	f7ff fddb 	bl	80071dc <_Balloc>
 8007626:	4605      	mov	r5, r0
 8007628:	b948      	cbnz	r0, 800763e <__lshift+0x3e>
 800762a:	4602      	mov	r2, r0
 800762c:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <__lshift+0xd0>)
 800762e:	4829      	ldr	r0, [pc, #164]	; (80076d4 <__lshift+0xd4>)
 8007630:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007634:	f000 fbca 	bl	8007dcc <__assert_func>
 8007638:	3101      	adds	r1, #1
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	e7ee      	b.n	800761c <__lshift+0x1c>
 800763e:	2300      	movs	r3, #0
 8007640:	f100 0114 	add.w	r1, r0, #20
 8007644:	f100 0210 	add.w	r2, r0, #16
 8007648:	4618      	mov	r0, r3
 800764a:	4553      	cmp	r3, sl
 800764c:	db33      	blt.n	80076b6 <__lshift+0xb6>
 800764e:	6920      	ldr	r0, [r4, #16]
 8007650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007654:	f104 0314 	add.w	r3, r4, #20
 8007658:	f019 091f 	ands.w	r9, r9, #31
 800765c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007664:	d02b      	beq.n	80076be <__lshift+0xbe>
 8007666:	f1c9 0e20 	rsb	lr, r9, #32
 800766a:	468a      	mov	sl, r1
 800766c:	2200      	movs	r2, #0
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	fa00 f009 	lsl.w	r0, r0, r9
 8007674:	4302      	orrs	r2, r0
 8007676:	f84a 2b04 	str.w	r2, [sl], #4
 800767a:	f853 2b04 	ldr.w	r2, [r3], #4
 800767e:	459c      	cmp	ip, r3
 8007680:	fa22 f20e 	lsr.w	r2, r2, lr
 8007684:	d8f3      	bhi.n	800766e <__lshift+0x6e>
 8007686:	ebac 0304 	sub.w	r3, ip, r4
 800768a:	3b15      	subs	r3, #21
 800768c:	f023 0303 	bic.w	r3, r3, #3
 8007690:	3304      	adds	r3, #4
 8007692:	f104 0015 	add.w	r0, r4, #21
 8007696:	4584      	cmp	ip, r0
 8007698:	bf38      	it	cc
 800769a:	2304      	movcc	r3, #4
 800769c:	50ca      	str	r2, [r1, r3]
 800769e:	b10a      	cbz	r2, 80076a4 <__lshift+0xa4>
 80076a0:	f108 0602 	add.w	r6, r8, #2
 80076a4:	3e01      	subs	r6, #1
 80076a6:	4638      	mov	r0, r7
 80076a8:	612e      	str	r6, [r5, #16]
 80076aa:	4621      	mov	r1, r4
 80076ac:	f7ff fdd6 	bl	800725c <_Bfree>
 80076b0:	4628      	mov	r0, r5
 80076b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ba:	3301      	adds	r3, #1
 80076bc:	e7c5      	b.n	800764a <__lshift+0x4a>
 80076be:	3904      	subs	r1, #4
 80076c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80076c8:	459c      	cmp	ip, r3
 80076ca:	d8f9      	bhi.n	80076c0 <__lshift+0xc0>
 80076cc:	e7ea      	b.n	80076a4 <__lshift+0xa4>
 80076ce:	bf00      	nop
 80076d0:	080096a7 	.word	0x080096a7
 80076d4:	08009718 	.word	0x08009718

080076d8 <__mcmp>:
 80076d8:	b530      	push	{r4, r5, lr}
 80076da:	6902      	ldr	r2, [r0, #16]
 80076dc:	690c      	ldr	r4, [r1, #16]
 80076de:	1b12      	subs	r2, r2, r4
 80076e0:	d10e      	bne.n	8007700 <__mcmp+0x28>
 80076e2:	f100 0314 	add.w	r3, r0, #20
 80076e6:	3114      	adds	r1, #20
 80076e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076f8:	42a5      	cmp	r5, r4
 80076fa:	d003      	beq.n	8007704 <__mcmp+0x2c>
 80076fc:	d305      	bcc.n	800770a <__mcmp+0x32>
 80076fe:	2201      	movs	r2, #1
 8007700:	4610      	mov	r0, r2
 8007702:	bd30      	pop	{r4, r5, pc}
 8007704:	4283      	cmp	r3, r0
 8007706:	d3f3      	bcc.n	80076f0 <__mcmp+0x18>
 8007708:	e7fa      	b.n	8007700 <__mcmp+0x28>
 800770a:	f04f 32ff 	mov.w	r2, #4294967295
 800770e:	e7f7      	b.n	8007700 <__mcmp+0x28>

08007710 <__mdiff>:
 8007710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	460c      	mov	r4, r1
 8007716:	4606      	mov	r6, r0
 8007718:	4611      	mov	r1, r2
 800771a:	4620      	mov	r0, r4
 800771c:	4617      	mov	r7, r2
 800771e:	f7ff ffdb 	bl	80076d8 <__mcmp>
 8007722:	1e05      	subs	r5, r0, #0
 8007724:	d110      	bne.n	8007748 <__mdiff+0x38>
 8007726:	4629      	mov	r1, r5
 8007728:	4630      	mov	r0, r6
 800772a:	f7ff fd57 	bl	80071dc <_Balloc>
 800772e:	b930      	cbnz	r0, 800773e <__mdiff+0x2e>
 8007730:	4b39      	ldr	r3, [pc, #228]	; (8007818 <__mdiff+0x108>)
 8007732:	4602      	mov	r2, r0
 8007734:	f240 2132 	movw	r1, #562	; 0x232
 8007738:	4838      	ldr	r0, [pc, #224]	; (800781c <__mdiff+0x10c>)
 800773a:	f000 fb47 	bl	8007dcc <__assert_func>
 800773e:	2301      	movs	r3, #1
 8007740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	bfa4      	itt	ge
 800774a:	463b      	movge	r3, r7
 800774c:	4627      	movge	r7, r4
 800774e:	4630      	mov	r0, r6
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	bfa6      	itte	ge
 8007754:	461c      	movge	r4, r3
 8007756:	2500      	movge	r5, #0
 8007758:	2501      	movlt	r5, #1
 800775a:	f7ff fd3f 	bl	80071dc <_Balloc>
 800775e:	b920      	cbnz	r0, 800776a <__mdiff+0x5a>
 8007760:	4b2d      	ldr	r3, [pc, #180]	; (8007818 <__mdiff+0x108>)
 8007762:	4602      	mov	r2, r0
 8007764:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007768:	e7e6      	b.n	8007738 <__mdiff+0x28>
 800776a:	693e      	ldr	r6, [r7, #16]
 800776c:	60c5      	str	r5, [r0, #12]
 800776e:	6925      	ldr	r5, [r4, #16]
 8007770:	f107 0114 	add.w	r1, r7, #20
 8007774:	f104 0914 	add.w	r9, r4, #20
 8007778:	f100 0e14 	add.w	lr, r0, #20
 800777c:	f107 0210 	add.w	r2, r7, #16
 8007780:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007784:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007788:	46f2      	mov	sl, lr
 800778a:	2700      	movs	r7, #0
 800778c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007794:	fa1f f883 	uxth.w	r8, r3
 8007798:	fa17 f78b 	uxtah	r7, r7, fp
 800779c:	0c1b      	lsrs	r3, r3, #16
 800779e:	eba7 0808 	sub.w	r8, r7, r8
 80077a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077aa:	fa1f f888 	uxth.w	r8, r8
 80077ae:	141f      	asrs	r7, r3, #16
 80077b0:	454d      	cmp	r5, r9
 80077b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077b6:	f84a 3b04 	str.w	r3, [sl], #4
 80077ba:	d8e7      	bhi.n	800778c <__mdiff+0x7c>
 80077bc:	1b2b      	subs	r3, r5, r4
 80077be:	3b15      	subs	r3, #21
 80077c0:	f023 0303 	bic.w	r3, r3, #3
 80077c4:	3304      	adds	r3, #4
 80077c6:	3415      	adds	r4, #21
 80077c8:	42a5      	cmp	r5, r4
 80077ca:	bf38      	it	cc
 80077cc:	2304      	movcc	r3, #4
 80077ce:	4419      	add	r1, r3
 80077d0:	4473      	add	r3, lr
 80077d2:	469e      	mov	lr, r3
 80077d4:	460d      	mov	r5, r1
 80077d6:	4565      	cmp	r5, ip
 80077d8:	d30e      	bcc.n	80077f8 <__mdiff+0xe8>
 80077da:	f10c 0203 	add.w	r2, ip, #3
 80077de:	1a52      	subs	r2, r2, r1
 80077e0:	f022 0203 	bic.w	r2, r2, #3
 80077e4:	3903      	subs	r1, #3
 80077e6:	458c      	cmp	ip, r1
 80077e8:	bf38      	it	cc
 80077ea:	2200      	movcc	r2, #0
 80077ec:	441a      	add	r2, r3
 80077ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077f2:	b17b      	cbz	r3, 8007814 <__mdiff+0x104>
 80077f4:	6106      	str	r6, [r0, #16]
 80077f6:	e7a5      	b.n	8007744 <__mdiff+0x34>
 80077f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80077fc:	fa17 f488 	uxtah	r4, r7, r8
 8007800:	1422      	asrs	r2, r4, #16
 8007802:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007806:	b2a4      	uxth	r4, r4
 8007808:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800780c:	f84e 4b04 	str.w	r4, [lr], #4
 8007810:	1417      	asrs	r7, r2, #16
 8007812:	e7e0      	b.n	80077d6 <__mdiff+0xc6>
 8007814:	3e01      	subs	r6, #1
 8007816:	e7ea      	b.n	80077ee <__mdiff+0xde>
 8007818:	080096a7 	.word	0x080096a7
 800781c:	08009718 	.word	0x08009718

08007820 <__d2b>:
 8007820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007824:	4689      	mov	r9, r1
 8007826:	2101      	movs	r1, #1
 8007828:	ec57 6b10 	vmov	r6, r7, d0
 800782c:	4690      	mov	r8, r2
 800782e:	f7ff fcd5 	bl	80071dc <_Balloc>
 8007832:	4604      	mov	r4, r0
 8007834:	b930      	cbnz	r0, 8007844 <__d2b+0x24>
 8007836:	4602      	mov	r2, r0
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <__d2b+0xb0>)
 800783a:	4826      	ldr	r0, [pc, #152]	; (80078d4 <__d2b+0xb4>)
 800783c:	f240 310a 	movw	r1, #778	; 0x30a
 8007840:	f000 fac4 	bl	8007dcc <__assert_func>
 8007844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800784c:	bb35      	cbnz	r5, 800789c <__d2b+0x7c>
 800784e:	2e00      	cmp	r6, #0
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	d028      	beq.n	80078a6 <__d2b+0x86>
 8007854:	4668      	mov	r0, sp
 8007856:	9600      	str	r6, [sp, #0]
 8007858:	f7ff fd8c 	bl	8007374 <__lo0bits>
 800785c:	9900      	ldr	r1, [sp, #0]
 800785e:	b300      	cbz	r0, 80078a2 <__d2b+0x82>
 8007860:	9a01      	ldr	r2, [sp, #4]
 8007862:	f1c0 0320 	rsb	r3, r0, #32
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	430b      	orrs	r3, r1
 800786c:	40c2      	lsrs	r2, r0
 800786e:	6163      	str	r3, [r4, #20]
 8007870:	9201      	str	r2, [sp, #4]
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	61a3      	str	r3, [r4, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	bf14      	ite	ne
 800787a:	2202      	movne	r2, #2
 800787c:	2201      	moveq	r2, #1
 800787e:	6122      	str	r2, [r4, #16]
 8007880:	b1d5      	cbz	r5, 80078b8 <__d2b+0x98>
 8007882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007886:	4405      	add	r5, r0
 8007888:	f8c9 5000 	str.w	r5, [r9]
 800788c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007890:	f8c8 0000 	str.w	r0, [r8]
 8007894:	4620      	mov	r0, r4
 8007896:	b003      	add	sp, #12
 8007898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800789c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078a0:	e7d5      	b.n	800784e <__d2b+0x2e>
 80078a2:	6161      	str	r1, [r4, #20]
 80078a4:	e7e5      	b.n	8007872 <__d2b+0x52>
 80078a6:	a801      	add	r0, sp, #4
 80078a8:	f7ff fd64 	bl	8007374 <__lo0bits>
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	6163      	str	r3, [r4, #20]
 80078b0:	2201      	movs	r2, #1
 80078b2:	6122      	str	r2, [r4, #16]
 80078b4:	3020      	adds	r0, #32
 80078b6:	e7e3      	b.n	8007880 <__d2b+0x60>
 80078b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078c0:	f8c9 0000 	str.w	r0, [r9]
 80078c4:	6918      	ldr	r0, [r3, #16]
 80078c6:	f7ff fd35 	bl	8007334 <__hi0bits>
 80078ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078ce:	e7df      	b.n	8007890 <__d2b+0x70>
 80078d0:	080096a7 	.word	0x080096a7
 80078d4:	08009718 	.word	0x08009718

080078d8 <_calloc_r>:
 80078d8:	b513      	push	{r0, r1, r4, lr}
 80078da:	434a      	muls	r2, r1
 80078dc:	4611      	mov	r1, r2
 80078de:	9201      	str	r2, [sp, #4]
 80078e0:	f000 f85a 	bl	8007998 <_malloc_r>
 80078e4:	4604      	mov	r4, r0
 80078e6:	b118      	cbz	r0, 80078f0 <_calloc_r+0x18>
 80078e8:	9a01      	ldr	r2, [sp, #4]
 80078ea:	2100      	movs	r1, #0
 80078ec:	f7fd fe02 	bl	80054f4 <memset>
 80078f0:	4620      	mov	r0, r4
 80078f2:	b002      	add	sp, #8
 80078f4:	bd10      	pop	{r4, pc}
	...

080078f8 <_free_r>:
 80078f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078fa:	2900      	cmp	r1, #0
 80078fc:	d048      	beq.n	8007990 <_free_r+0x98>
 80078fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007902:	9001      	str	r0, [sp, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f1a1 0404 	sub.w	r4, r1, #4
 800790a:	bfb8      	it	lt
 800790c:	18e4      	addlt	r4, r4, r3
 800790e:	f000 fae3 	bl	8007ed8 <__malloc_lock>
 8007912:	4a20      	ldr	r2, [pc, #128]	; (8007994 <_free_r+0x9c>)
 8007914:	9801      	ldr	r0, [sp, #4]
 8007916:	6813      	ldr	r3, [r2, #0]
 8007918:	4615      	mov	r5, r2
 800791a:	b933      	cbnz	r3, 800792a <_free_r+0x32>
 800791c:	6063      	str	r3, [r4, #4]
 800791e:	6014      	str	r4, [r2, #0]
 8007920:	b003      	add	sp, #12
 8007922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007926:	f000 badd 	b.w	8007ee4 <__malloc_unlock>
 800792a:	42a3      	cmp	r3, r4
 800792c:	d90b      	bls.n	8007946 <_free_r+0x4e>
 800792e:	6821      	ldr	r1, [r4, #0]
 8007930:	1862      	adds	r2, r4, r1
 8007932:	4293      	cmp	r3, r2
 8007934:	bf04      	itt	eq
 8007936:	681a      	ldreq	r2, [r3, #0]
 8007938:	685b      	ldreq	r3, [r3, #4]
 800793a:	6063      	str	r3, [r4, #4]
 800793c:	bf04      	itt	eq
 800793e:	1852      	addeq	r2, r2, r1
 8007940:	6022      	streq	r2, [r4, #0]
 8007942:	602c      	str	r4, [r5, #0]
 8007944:	e7ec      	b.n	8007920 <_free_r+0x28>
 8007946:	461a      	mov	r2, r3
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	b10b      	cbz	r3, 8007950 <_free_r+0x58>
 800794c:	42a3      	cmp	r3, r4
 800794e:	d9fa      	bls.n	8007946 <_free_r+0x4e>
 8007950:	6811      	ldr	r1, [r2, #0]
 8007952:	1855      	adds	r5, r2, r1
 8007954:	42a5      	cmp	r5, r4
 8007956:	d10b      	bne.n	8007970 <_free_r+0x78>
 8007958:	6824      	ldr	r4, [r4, #0]
 800795a:	4421      	add	r1, r4
 800795c:	1854      	adds	r4, r2, r1
 800795e:	42a3      	cmp	r3, r4
 8007960:	6011      	str	r1, [r2, #0]
 8007962:	d1dd      	bne.n	8007920 <_free_r+0x28>
 8007964:	681c      	ldr	r4, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	6053      	str	r3, [r2, #4]
 800796a:	4421      	add	r1, r4
 800796c:	6011      	str	r1, [r2, #0]
 800796e:	e7d7      	b.n	8007920 <_free_r+0x28>
 8007970:	d902      	bls.n	8007978 <_free_r+0x80>
 8007972:	230c      	movs	r3, #12
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	e7d3      	b.n	8007920 <_free_r+0x28>
 8007978:	6825      	ldr	r5, [r4, #0]
 800797a:	1961      	adds	r1, r4, r5
 800797c:	428b      	cmp	r3, r1
 800797e:	bf04      	itt	eq
 8007980:	6819      	ldreq	r1, [r3, #0]
 8007982:	685b      	ldreq	r3, [r3, #4]
 8007984:	6063      	str	r3, [r4, #4]
 8007986:	bf04      	itt	eq
 8007988:	1949      	addeq	r1, r1, r5
 800798a:	6021      	streq	r1, [r4, #0]
 800798c:	6054      	str	r4, [r2, #4]
 800798e:	e7c7      	b.n	8007920 <_free_r+0x28>
 8007990:	b003      	add	sp, #12
 8007992:	bd30      	pop	{r4, r5, pc}
 8007994:	20000208 	.word	0x20000208

08007998 <_malloc_r>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	1ccd      	adds	r5, r1, #3
 800799c:	f025 0503 	bic.w	r5, r5, #3
 80079a0:	3508      	adds	r5, #8
 80079a2:	2d0c      	cmp	r5, #12
 80079a4:	bf38      	it	cc
 80079a6:	250c      	movcc	r5, #12
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	4606      	mov	r6, r0
 80079ac:	db01      	blt.n	80079b2 <_malloc_r+0x1a>
 80079ae:	42a9      	cmp	r1, r5
 80079b0:	d903      	bls.n	80079ba <_malloc_r+0x22>
 80079b2:	230c      	movs	r3, #12
 80079b4:	6033      	str	r3, [r6, #0]
 80079b6:	2000      	movs	r0, #0
 80079b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ba:	f000 fa8d 	bl	8007ed8 <__malloc_lock>
 80079be:	4921      	ldr	r1, [pc, #132]	; (8007a44 <_malloc_r+0xac>)
 80079c0:	680a      	ldr	r2, [r1, #0]
 80079c2:	4614      	mov	r4, r2
 80079c4:	b99c      	cbnz	r4, 80079ee <_malloc_r+0x56>
 80079c6:	4f20      	ldr	r7, [pc, #128]	; (8007a48 <_malloc_r+0xb0>)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	b923      	cbnz	r3, 80079d6 <_malloc_r+0x3e>
 80079cc:	4621      	mov	r1, r4
 80079ce:	4630      	mov	r0, r6
 80079d0:	f000 f996 	bl	8007d00 <_sbrk_r>
 80079d4:	6038      	str	r0, [r7, #0]
 80079d6:	4629      	mov	r1, r5
 80079d8:	4630      	mov	r0, r6
 80079da:	f000 f991 	bl	8007d00 <_sbrk_r>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	d123      	bne.n	8007a2a <_malloc_r+0x92>
 80079e2:	230c      	movs	r3, #12
 80079e4:	6033      	str	r3, [r6, #0]
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 fa7c 	bl	8007ee4 <__malloc_unlock>
 80079ec:	e7e3      	b.n	80079b6 <_malloc_r+0x1e>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	1b5b      	subs	r3, r3, r5
 80079f2:	d417      	bmi.n	8007a24 <_malloc_r+0x8c>
 80079f4:	2b0b      	cmp	r3, #11
 80079f6:	d903      	bls.n	8007a00 <_malloc_r+0x68>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	441c      	add	r4, r3
 80079fc:	6025      	str	r5, [r4, #0]
 80079fe:	e004      	b.n	8007a0a <_malloc_r+0x72>
 8007a00:	6863      	ldr	r3, [r4, #4]
 8007a02:	42a2      	cmp	r2, r4
 8007a04:	bf0c      	ite	eq
 8007a06:	600b      	streq	r3, [r1, #0]
 8007a08:	6053      	strne	r3, [r2, #4]
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f000 fa6a 	bl	8007ee4 <__malloc_unlock>
 8007a10:	f104 000b 	add.w	r0, r4, #11
 8007a14:	1d23      	adds	r3, r4, #4
 8007a16:	f020 0007 	bic.w	r0, r0, #7
 8007a1a:	1ac2      	subs	r2, r0, r3
 8007a1c:	d0cc      	beq.n	80079b8 <_malloc_r+0x20>
 8007a1e:	1a1b      	subs	r3, r3, r0
 8007a20:	50a3      	str	r3, [r4, r2]
 8007a22:	e7c9      	b.n	80079b8 <_malloc_r+0x20>
 8007a24:	4622      	mov	r2, r4
 8007a26:	6864      	ldr	r4, [r4, #4]
 8007a28:	e7cc      	b.n	80079c4 <_malloc_r+0x2c>
 8007a2a:	1cc4      	adds	r4, r0, #3
 8007a2c:	f024 0403 	bic.w	r4, r4, #3
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d0e3      	beq.n	80079fc <_malloc_r+0x64>
 8007a34:	1a21      	subs	r1, r4, r0
 8007a36:	4630      	mov	r0, r6
 8007a38:	f000 f962 	bl	8007d00 <_sbrk_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d1dd      	bne.n	80079fc <_malloc_r+0x64>
 8007a40:	e7cf      	b.n	80079e2 <_malloc_r+0x4a>
 8007a42:	bf00      	nop
 8007a44:	20000208 	.word	0x20000208
 8007a48:	2000020c 	.word	0x2000020c

08007a4c <__sfputc_r>:
 8007a4c:	6893      	ldr	r3, [r2, #8]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	b410      	push	{r4}
 8007a54:	6093      	str	r3, [r2, #8]
 8007a56:	da08      	bge.n	8007a6a <__sfputc_r+0x1e>
 8007a58:	6994      	ldr	r4, [r2, #24]
 8007a5a:	42a3      	cmp	r3, r4
 8007a5c:	db01      	blt.n	8007a62 <__sfputc_r+0x16>
 8007a5e:	290a      	cmp	r1, #10
 8007a60:	d103      	bne.n	8007a6a <__sfputc_r+0x1e>
 8007a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a66:	f7fe ba45 	b.w	8005ef4 <__swbuf_r>
 8007a6a:	6813      	ldr	r3, [r2, #0]
 8007a6c:	1c58      	adds	r0, r3, #1
 8007a6e:	6010      	str	r0, [r2, #0]
 8007a70:	7019      	strb	r1, [r3, #0]
 8007a72:	4608      	mov	r0, r1
 8007a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <__sfputs_r>:
 8007a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	460f      	mov	r7, r1
 8007a80:	4614      	mov	r4, r2
 8007a82:	18d5      	adds	r5, r2, r3
 8007a84:	42ac      	cmp	r4, r5
 8007a86:	d101      	bne.n	8007a8c <__sfputs_r+0x12>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e007      	b.n	8007a9c <__sfputs_r+0x22>
 8007a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a90:	463a      	mov	r2, r7
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7ff ffda 	bl	8007a4c <__sfputc_r>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d1f3      	bne.n	8007a84 <__sfputs_r+0xa>
 8007a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aa0 <_vfiprintf_r>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	b09d      	sub	sp, #116	; 0x74
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	4698      	mov	r8, r3
 8007aac:	4606      	mov	r6, r0
 8007aae:	b118      	cbz	r0, 8007ab8 <_vfiprintf_r+0x18>
 8007ab0:	6983      	ldr	r3, [r0, #24]
 8007ab2:	b90b      	cbnz	r3, 8007ab8 <_vfiprintf_r+0x18>
 8007ab4:	f7ff fa72 	bl	8006f9c <__sinit>
 8007ab8:	4b89      	ldr	r3, [pc, #548]	; (8007ce0 <_vfiprintf_r+0x240>)
 8007aba:	429d      	cmp	r5, r3
 8007abc:	d11b      	bne.n	8007af6 <_vfiprintf_r+0x56>
 8007abe:	6875      	ldr	r5, [r6, #4]
 8007ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac2:	07d9      	lsls	r1, r3, #31
 8007ac4:	d405      	bmi.n	8007ad2 <_vfiprintf_r+0x32>
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	059a      	lsls	r2, r3, #22
 8007aca:	d402      	bmi.n	8007ad2 <_vfiprintf_r+0x32>
 8007acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ace:	f7ff fb08 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	071b      	lsls	r3, r3, #28
 8007ad6:	d501      	bpl.n	8007adc <_vfiprintf_r+0x3c>
 8007ad8:	692b      	ldr	r3, [r5, #16]
 8007ada:	b9eb      	cbnz	r3, 8007b18 <_vfiprintf_r+0x78>
 8007adc:	4629      	mov	r1, r5
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7fe fa5a 	bl	8005f98 <__swsetup_r>
 8007ae4:	b1c0      	cbz	r0, 8007b18 <_vfiprintf_r+0x78>
 8007ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae8:	07dc      	lsls	r4, r3, #31
 8007aea:	d50e      	bpl.n	8007b0a <_vfiprintf_r+0x6a>
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	b01d      	add	sp, #116	; 0x74
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af6:	4b7b      	ldr	r3, [pc, #492]	; (8007ce4 <_vfiprintf_r+0x244>)
 8007af8:	429d      	cmp	r5, r3
 8007afa:	d101      	bne.n	8007b00 <_vfiprintf_r+0x60>
 8007afc:	68b5      	ldr	r5, [r6, #8]
 8007afe:	e7df      	b.n	8007ac0 <_vfiprintf_r+0x20>
 8007b00:	4b79      	ldr	r3, [pc, #484]	; (8007ce8 <_vfiprintf_r+0x248>)
 8007b02:	429d      	cmp	r5, r3
 8007b04:	bf08      	it	eq
 8007b06:	68f5      	ldreq	r5, [r6, #12]
 8007b08:	e7da      	b.n	8007ac0 <_vfiprintf_r+0x20>
 8007b0a:	89ab      	ldrh	r3, [r5, #12]
 8007b0c:	0598      	lsls	r0, r3, #22
 8007b0e:	d4ed      	bmi.n	8007aec <_vfiprintf_r+0x4c>
 8007b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b12:	f7ff fae7 	bl	80070e4 <__retarget_lock_release_recursive>
 8007b16:	e7e9      	b.n	8007aec <_vfiprintf_r+0x4c>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b26:	2330      	movs	r3, #48	; 0x30
 8007b28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cec <_vfiprintf_r+0x24c>
 8007b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b30:	f04f 0901 	mov.w	r9, #1
 8007b34:	4623      	mov	r3, r4
 8007b36:	469a      	mov	sl, r3
 8007b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b3c:	b10a      	cbz	r2, 8007b42 <_vfiprintf_r+0xa2>
 8007b3e:	2a25      	cmp	r2, #37	; 0x25
 8007b40:	d1f9      	bne.n	8007b36 <_vfiprintf_r+0x96>
 8007b42:	ebba 0b04 	subs.w	fp, sl, r4
 8007b46:	d00b      	beq.n	8007b60 <_vfiprintf_r+0xc0>
 8007b48:	465b      	mov	r3, fp
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7ff ff93 	bl	8007a7a <__sfputs_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	f000 80aa 	beq.w	8007cae <_vfiprintf_r+0x20e>
 8007b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b5c:	445a      	add	r2, fp
 8007b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b60:	f89a 3000 	ldrb.w	r3, [sl]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80a2 	beq.w	8007cae <_vfiprintf_r+0x20e>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b74:	f10a 0a01 	add.w	sl, sl, #1
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	9307      	str	r3, [sp, #28]
 8007b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b80:	931a      	str	r3, [sp, #104]	; 0x68
 8007b82:	4654      	mov	r4, sl
 8007b84:	2205      	movs	r2, #5
 8007b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8a:	4858      	ldr	r0, [pc, #352]	; (8007cec <_vfiprintf_r+0x24c>)
 8007b8c:	f7f8 fb48 	bl	8000220 <memchr>
 8007b90:	9a04      	ldr	r2, [sp, #16]
 8007b92:	b9d8      	cbnz	r0, 8007bcc <_vfiprintf_r+0x12c>
 8007b94:	06d1      	lsls	r1, r2, #27
 8007b96:	bf44      	itt	mi
 8007b98:	2320      	movmi	r3, #32
 8007b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b9e:	0713      	lsls	r3, r2, #28
 8007ba0:	bf44      	itt	mi
 8007ba2:	232b      	movmi	r3, #43	; 0x2b
 8007ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bac:	2b2a      	cmp	r3, #42	; 0x2a
 8007bae:	d015      	beq.n	8007bdc <_vfiprintf_r+0x13c>
 8007bb0:	9a07      	ldr	r2, [sp, #28]
 8007bb2:	4654      	mov	r4, sl
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f04f 0c0a 	mov.w	ip, #10
 8007bba:	4621      	mov	r1, r4
 8007bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bc0:	3b30      	subs	r3, #48	; 0x30
 8007bc2:	2b09      	cmp	r3, #9
 8007bc4:	d94e      	bls.n	8007c64 <_vfiprintf_r+0x1c4>
 8007bc6:	b1b0      	cbz	r0, 8007bf6 <_vfiprintf_r+0x156>
 8007bc8:	9207      	str	r2, [sp, #28]
 8007bca:	e014      	b.n	8007bf6 <_vfiprintf_r+0x156>
 8007bcc:	eba0 0308 	sub.w	r3, r0, r8
 8007bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	46a2      	mov	sl, r4
 8007bda:	e7d2      	b.n	8007b82 <_vfiprintf_r+0xe2>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	1d19      	adds	r1, r3, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	9103      	str	r1, [sp, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfbb      	ittet	lt
 8007be8:	425b      	neglt	r3, r3
 8007bea:	f042 0202 	orrlt.w	r2, r2, #2
 8007bee:	9307      	strge	r3, [sp, #28]
 8007bf0:	9307      	strlt	r3, [sp, #28]
 8007bf2:	bfb8      	it	lt
 8007bf4:	9204      	strlt	r2, [sp, #16]
 8007bf6:	7823      	ldrb	r3, [r4, #0]
 8007bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8007bfa:	d10c      	bne.n	8007c16 <_vfiprintf_r+0x176>
 8007bfc:	7863      	ldrb	r3, [r4, #1]
 8007bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007c00:	d135      	bne.n	8007c6e <_vfiprintf_r+0x1ce>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	1d1a      	adds	r2, r3, #4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	9203      	str	r2, [sp, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bfb8      	it	lt
 8007c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c12:	3402      	adds	r4, #2
 8007c14:	9305      	str	r3, [sp, #20]
 8007c16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cfc <_vfiprintf_r+0x25c>
 8007c1a:	7821      	ldrb	r1, [r4, #0]
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	4650      	mov	r0, sl
 8007c20:	f7f8 fafe 	bl	8000220 <memchr>
 8007c24:	b140      	cbz	r0, 8007c38 <_vfiprintf_r+0x198>
 8007c26:	2340      	movs	r3, #64	; 0x40
 8007c28:	eba0 000a 	sub.w	r0, r0, sl
 8007c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8007c30:	9b04      	ldr	r3, [sp, #16]
 8007c32:	4303      	orrs	r3, r0
 8007c34:	3401      	adds	r4, #1
 8007c36:	9304      	str	r3, [sp, #16]
 8007c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3c:	482c      	ldr	r0, [pc, #176]	; (8007cf0 <_vfiprintf_r+0x250>)
 8007c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c42:	2206      	movs	r2, #6
 8007c44:	f7f8 faec 	bl	8000220 <memchr>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d03f      	beq.n	8007ccc <_vfiprintf_r+0x22c>
 8007c4c:	4b29      	ldr	r3, [pc, #164]	; (8007cf4 <_vfiprintf_r+0x254>)
 8007c4e:	bb1b      	cbnz	r3, 8007c98 <_vfiprintf_r+0x1f8>
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	3307      	adds	r3, #7
 8007c54:	f023 0307 	bic.w	r3, r3, #7
 8007c58:	3308      	adds	r3, #8
 8007c5a:	9303      	str	r3, [sp, #12]
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	443b      	add	r3, r7
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24
 8007c62:	e767      	b.n	8007b34 <_vfiprintf_r+0x94>
 8007c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c68:	460c      	mov	r4, r1
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	e7a5      	b.n	8007bba <_vfiprintf_r+0x11a>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	3401      	adds	r4, #1
 8007c72:	9305      	str	r3, [sp, #20]
 8007c74:	4619      	mov	r1, r3
 8007c76:	f04f 0c0a 	mov.w	ip, #10
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c80:	3a30      	subs	r2, #48	; 0x30
 8007c82:	2a09      	cmp	r2, #9
 8007c84:	d903      	bls.n	8007c8e <_vfiprintf_r+0x1ee>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0c5      	beq.n	8007c16 <_vfiprintf_r+0x176>
 8007c8a:	9105      	str	r1, [sp, #20]
 8007c8c:	e7c3      	b.n	8007c16 <_vfiprintf_r+0x176>
 8007c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c92:	4604      	mov	r4, r0
 8007c94:	2301      	movs	r3, #1
 8007c96:	e7f0      	b.n	8007c7a <_vfiprintf_r+0x1da>
 8007c98:	ab03      	add	r3, sp, #12
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	462a      	mov	r2, r5
 8007c9e:	4b16      	ldr	r3, [pc, #88]	; (8007cf8 <_vfiprintf_r+0x258>)
 8007ca0:	a904      	add	r1, sp, #16
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7fd fcce 	bl	8005644 <_printf_float>
 8007ca8:	4607      	mov	r7, r0
 8007caa:	1c78      	adds	r0, r7, #1
 8007cac:	d1d6      	bne.n	8007c5c <_vfiprintf_r+0x1bc>
 8007cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cb0:	07d9      	lsls	r1, r3, #31
 8007cb2:	d405      	bmi.n	8007cc0 <_vfiprintf_r+0x220>
 8007cb4:	89ab      	ldrh	r3, [r5, #12]
 8007cb6:	059a      	lsls	r2, r3, #22
 8007cb8:	d402      	bmi.n	8007cc0 <_vfiprintf_r+0x220>
 8007cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cbc:	f7ff fa12 	bl	80070e4 <__retarget_lock_release_recursive>
 8007cc0:	89ab      	ldrh	r3, [r5, #12]
 8007cc2:	065b      	lsls	r3, r3, #25
 8007cc4:	f53f af12 	bmi.w	8007aec <_vfiprintf_r+0x4c>
 8007cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cca:	e711      	b.n	8007af0 <_vfiprintf_r+0x50>
 8007ccc:	ab03      	add	r3, sp, #12
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	462a      	mov	r2, r5
 8007cd2:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <_vfiprintf_r+0x258>)
 8007cd4:	a904      	add	r1, sp, #16
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7fd ff58 	bl	8005b8c <_printf_i>
 8007cdc:	e7e4      	b.n	8007ca8 <_vfiprintf_r+0x208>
 8007cde:	bf00      	nop
 8007ce0:	080096d8 	.word	0x080096d8
 8007ce4:	080096f8 	.word	0x080096f8
 8007ce8:	080096b8 	.word	0x080096b8
 8007cec:	08009874 	.word	0x08009874
 8007cf0:	0800987e 	.word	0x0800987e
 8007cf4:	08005645 	.word	0x08005645
 8007cf8:	08007a7b 	.word	0x08007a7b
 8007cfc:	0800987a 	.word	0x0800987a

08007d00 <_sbrk_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d06      	ldr	r5, [pc, #24]	; (8007d1c <_sbrk_r+0x1c>)
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	f7fa f904 	bl	8001f18 <_sbrk>
 8007d10:	1c43      	adds	r3, r0, #1
 8007d12:	d102      	bne.n	8007d1a <_sbrk_r+0x1a>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	b103      	cbz	r3, 8007d1a <_sbrk_r+0x1a>
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	20000824 	.word	0x20000824

08007d20 <__sread>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	f000 f8e2 	bl	8007ef0 <_read_r>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	bfab      	itete	ge
 8007d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d32:	89a3      	ldrhlt	r3, [r4, #12]
 8007d34:	181b      	addge	r3, r3, r0
 8007d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d3a:	bfac      	ite	ge
 8007d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d3e:	81a3      	strhlt	r3, [r4, #12]
 8007d40:	bd10      	pop	{r4, pc}

08007d42 <__swrite>:
 8007d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d46:	461f      	mov	r7, r3
 8007d48:	898b      	ldrh	r3, [r1, #12]
 8007d4a:	05db      	lsls	r3, r3, #23
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	4616      	mov	r6, r2
 8007d52:	d505      	bpl.n	8007d60 <__swrite+0x1e>
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	2302      	movs	r3, #2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f000 f898 	bl	8007e90 <_lseek_r>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	463b      	mov	r3, r7
 8007d70:	4628      	mov	r0, r5
 8007d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	f000 b817 	b.w	8007da8 <_write_r>

08007d7a <__sseek>:
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d82:	f000 f885 	bl	8007e90 <_lseek_r>
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	bf15      	itete	ne
 8007d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d96:	81a3      	strheq	r3, [r4, #12]
 8007d98:	bf18      	it	ne
 8007d9a:	81a3      	strhne	r3, [r4, #12]
 8007d9c:	bd10      	pop	{r4, pc}

08007d9e <__sclose>:
 8007d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da2:	f000 b831 	b.w	8007e08 <_close_r>
	...

08007da8 <_write_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d07      	ldr	r5, [pc, #28]	; (8007dc8 <_write_r+0x20>)
 8007dac:	4604      	mov	r4, r0
 8007dae:	4608      	mov	r0, r1
 8007db0:	4611      	mov	r1, r2
 8007db2:	2200      	movs	r2, #0
 8007db4:	602a      	str	r2, [r5, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f7fa f85d 	bl	8001e76 <_write>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_write_r+0x1e>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_write_r+0x1e>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	20000824 	.word	0x20000824

08007dcc <__assert_func>:
 8007dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dce:	4614      	mov	r4, r2
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <__assert_func+0x2c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	68d8      	ldr	r0, [r3, #12]
 8007dda:	b14c      	cbz	r4, 8007df0 <__assert_func+0x24>
 8007ddc:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <__assert_func+0x30>)
 8007dde:	9100      	str	r1, [sp, #0]
 8007de0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007de4:	4906      	ldr	r1, [pc, #24]	; (8007e00 <__assert_func+0x34>)
 8007de6:	462b      	mov	r3, r5
 8007de8:	f000 f81e 	bl	8007e28 <fiprintf>
 8007dec:	f000 f89f 	bl	8007f2e <abort>
 8007df0:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <__assert_func+0x38>)
 8007df2:	461c      	mov	r4, r3
 8007df4:	e7f3      	b.n	8007dde <__assert_func+0x12>
 8007df6:	bf00      	nop
 8007df8:	2000000c 	.word	0x2000000c
 8007dfc:	08009885 	.word	0x08009885
 8007e00:	08009892 	.word	0x08009892
 8007e04:	080098c0 	.word	0x080098c0

08007e08 <_close_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d06      	ldr	r5, [pc, #24]	; (8007e24 <_close_r+0x1c>)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7fa f84b 	bl	8001eae <_close>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_close_r+0x1a>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_close_r+0x1a>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	20000824 	.word	0x20000824

08007e28 <fiprintf>:
 8007e28:	b40e      	push	{r1, r2, r3}
 8007e2a:	b503      	push	{r0, r1, lr}
 8007e2c:	4601      	mov	r1, r0
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <fiprintf+0x20>)
 8007e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e36:	6800      	ldr	r0, [r0, #0]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	f7ff fe31 	bl	8007aa0 <_vfiprintf_r>
 8007e3e:	b002      	add	sp, #8
 8007e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e44:	b003      	add	sp, #12
 8007e46:	4770      	bx	lr
 8007e48:	2000000c 	.word	0x2000000c

08007e4c <_fstat_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	4d07      	ldr	r5, [pc, #28]	; (8007e6c <_fstat_r+0x20>)
 8007e50:	2300      	movs	r3, #0
 8007e52:	4604      	mov	r4, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	4611      	mov	r1, r2
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	f7fa f834 	bl	8001ec6 <_fstat>
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	d102      	bne.n	8007e68 <_fstat_r+0x1c>
 8007e62:	682b      	ldr	r3, [r5, #0]
 8007e64:	b103      	cbz	r3, 8007e68 <_fstat_r+0x1c>
 8007e66:	6023      	str	r3, [r4, #0]
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000824 	.word	0x20000824

08007e70 <_isatty_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4d06      	ldr	r5, [pc, #24]	; (8007e8c <_isatty_r+0x1c>)
 8007e74:	2300      	movs	r3, #0
 8007e76:	4604      	mov	r4, r0
 8007e78:	4608      	mov	r0, r1
 8007e7a:	602b      	str	r3, [r5, #0]
 8007e7c:	f7fa f833 	bl	8001ee6 <_isatty>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_isatty_r+0x1a>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_isatty_r+0x1a>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20000824 	.word	0x20000824

08007e90 <_lseek_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d07      	ldr	r5, [pc, #28]	; (8007eb0 <_lseek_r+0x20>)
 8007e94:	4604      	mov	r4, r0
 8007e96:	4608      	mov	r0, r1
 8007e98:	4611      	mov	r1, r2
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	602a      	str	r2, [r5, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f7fa f82c 	bl	8001efc <_lseek>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d102      	bne.n	8007eae <_lseek_r+0x1e>
 8007ea8:	682b      	ldr	r3, [r5, #0]
 8007eaa:	b103      	cbz	r3, 8007eae <_lseek_r+0x1e>
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	20000824 	.word	0x20000824

08007eb4 <__ascii_mbtowc>:
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	b901      	cbnz	r1, 8007eba <__ascii_mbtowc+0x6>
 8007eb8:	a901      	add	r1, sp, #4
 8007eba:	b142      	cbz	r2, 8007ece <__ascii_mbtowc+0x1a>
 8007ebc:	b14b      	cbz	r3, 8007ed2 <__ascii_mbtowc+0x1e>
 8007ebe:	7813      	ldrb	r3, [r2, #0]
 8007ec0:	600b      	str	r3, [r1, #0]
 8007ec2:	7812      	ldrb	r2, [r2, #0]
 8007ec4:	1e10      	subs	r0, r2, #0
 8007ec6:	bf18      	it	ne
 8007ec8:	2001      	movne	r0, #1
 8007eca:	b002      	add	sp, #8
 8007ecc:	4770      	bx	lr
 8007ece:	4610      	mov	r0, r2
 8007ed0:	e7fb      	b.n	8007eca <__ascii_mbtowc+0x16>
 8007ed2:	f06f 0001 	mvn.w	r0, #1
 8007ed6:	e7f8      	b.n	8007eca <__ascii_mbtowc+0x16>

08007ed8 <__malloc_lock>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__malloc_lock+0x8>)
 8007eda:	f7ff b902 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	2000081c 	.word	0x2000081c

08007ee4 <__malloc_unlock>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__malloc_unlock+0x8>)
 8007ee6:	f7ff b8fd 	b.w	80070e4 <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	2000081c 	.word	0x2000081c

08007ef0 <_read_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d07      	ldr	r5, [pc, #28]	; (8007f10 <_read_r+0x20>)
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	4611      	mov	r1, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	602a      	str	r2, [r5, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f7f9 ff9c 	bl	8001e3c <_read>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_read_r+0x1e>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_read_r+0x1e>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	20000824 	.word	0x20000824

08007f14 <__ascii_wctomb>:
 8007f14:	b149      	cbz	r1, 8007f2a <__ascii_wctomb+0x16>
 8007f16:	2aff      	cmp	r2, #255	; 0xff
 8007f18:	bf85      	ittet	hi
 8007f1a:	238a      	movhi	r3, #138	; 0x8a
 8007f1c:	6003      	strhi	r3, [r0, #0]
 8007f1e:	700a      	strbls	r2, [r1, #0]
 8007f20:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f24:	bf98      	it	ls
 8007f26:	2001      	movls	r0, #1
 8007f28:	4770      	bx	lr
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	4770      	bx	lr

08007f2e <abort>:
 8007f2e:	b508      	push	{r3, lr}
 8007f30:	2006      	movs	r0, #6
 8007f32:	f000 f82b 	bl	8007f8c <raise>
 8007f36:	2001      	movs	r0, #1
 8007f38:	f7f9 ff76 	bl	8001e28 <_exit>

08007f3c <_raise_r>:
 8007f3c:	291f      	cmp	r1, #31
 8007f3e:	b538      	push	{r3, r4, r5, lr}
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
 8007f44:	d904      	bls.n	8007f50 <_raise_r+0x14>
 8007f46:	2316      	movs	r3, #22
 8007f48:	6003      	str	r3, [r0, #0]
 8007f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f52:	b112      	cbz	r2, 8007f5a <_raise_r+0x1e>
 8007f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f58:	b94b      	cbnz	r3, 8007f6e <_raise_r+0x32>
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 f830 	bl	8007fc0 <_getpid_r>
 8007f60:	462a      	mov	r2, r5
 8007f62:	4601      	mov	r1, r0
 8007f64:	4620      	mov	r0, r4
 8007f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f6a:	f000 b817 	b.w	8007f9c <_kill_r>
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d00a      	beq.n	8007f88 <_raise_r+0x4c>
 8007f72:	1c59      	adds	r1, r3, #1
 8007f74:	d103      	bne.n	8007f7e <_raise_r+0x42>
 8007f76:	2316      	movs	r3, #22
 8007f78:	6003      	str	r3, [r0, #0]
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	e7e7      	b.n	8007f4e <_raise_r+0x12>
 8007f7e:	2400      	movs	r4, #0
 8007f80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f84:	4628      	mov	r0, r5
 8007f86:	4798      	blx	r3
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e7e0      	b.n	8007f4e <_raise_r+0x12>

08007f8c <raise>:
 8007f8c:	4b02      	ldr	r3, [pc, #8]	; (8007f98 <raise+0xc>)
 8007f8e:	4601      	mov	r1, r0
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	f7ff bfd3 	b.w	8007f3c <_raise_r>
 8007f96:	bf00      	nop
 8007f98:	2000000c 	.word	0x2000000c

08007f9c <_kill_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	; (8007fbc <_kill_r+0x20>)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	602b      	str	r3, [r5, #0]
 8007faa:	f7f9 ff2d 	bl	8001e08 <_kill>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	d102      	bne.n	8007fb8 <_kill_r+0x1c>
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	b103      	cbz	r3, 8007fb8 <_kill_r+0x1c>
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000824 	.word	0x20000824

08007fc0 <_getpid_r>:
 8007fc0:	f7f9 bf1a 	b.w	8001df8 <_getpid>

08007fc4 <_init>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr

08007fd0 <_fini>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr
