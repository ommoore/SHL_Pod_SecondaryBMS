
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08007f10  08007f10  00017f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800855c  0800855c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008564  08008564  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008568  08008568  00018568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800856c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200001dc  08008748  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08008748  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c81  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002381  00000000  00000000  00034e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00037210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00038138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002df9  00000000  00000000  00038f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001124d  00000000  00000000  0003bd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5ffa  00000000  00000000  0004cfde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005230  00000000  00000000  0014302c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ef4 	.word	0x08007ef4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007ef4 	.word	0x08007ef4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <NMI_Handler>:
extern TIM_HandleTypeDef htim6;

/******************************************************************************/
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
	while(1) {}
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:
}

void HardFault_Handler(void) {
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
	while(1) {}
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:
}

void MemManage_Handler(void) {
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	while(1) {}
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
	while(1) {}
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	while(1) {}
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:
}

void SVC_Handler(void) {
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

void DebugMon_Handler(void) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

void PendSV_Handler(void) {
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000f2c:	f000 fec2 	bl	8001cb4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000f30:	f001 fe48 	bl	8002bc4 <HAL_SYSTICK_IRQHandler>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <USART2_IRQHandler>:
/* STM32F7xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/
void USART2_IRQHandler(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <USART2_IRQHandler+0x10>)
 8000f3e:	f003 f929 	bl	8004194 <HAL_UART_IRQHandler>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200002d8 	.word	0x200002d8

08000f4c <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <CAN1_TX_IRQHandler+0x10>)
 8000f52:	f001 fb02 	bl	800255a <HAL_CAN_IRQHandler>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000035c 	.word	0x2000035c

08000f60 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <CAN1_RX0_IRQHandler+0x10>)
 8000f66:	f001 faf8 	bl	800255a <HAL_CAN_IRQHandler>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000035c 	.word	0x2000035c

08000f74 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <CAN1_RX1_IRQHandler+0x10>)
 8000f7a:	f001 faee 	bl	800255a <HAL_CAN_IRQHandler>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000035c 	.word	0x2000035c

08000f88 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <CAN1_SCE_IRQHandler+0x10>)
 8000f8e:	f001 fae4 	bl	800255a <HAL_CAN_IRQHandler>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000035c 	.word	0x2000035c

08000f9c <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM6_DAC_IRQHandler+0x10>)
 8000fa2:	f002 fe0f 	bl	8003bc4 <HAL_TIM_IRQHandler>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000028c 	.word	0x2000028c

08000fb0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <EXTI15_10_IRQHandler+0x18>)
 8000fb6:	f002 fd8d 	bl	8003ad4 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fbe:	f002 f867 	bl	8003090 <HAL_GPIO_EXTI_IRQHandler>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000028c 	.word	0x2000028c

08000fcc <main>:
CAN_RxHeaderTypeDef RxHeader;

uint8_t request_count = 0;
uint8_t led_num = 0;

int main(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	/* Resets all peripherals, initializes the flash interface and Systick. */
	HAL_Init();
 8000fd0:	f000 fe33 	bl	8001c3a <HAL_Init>

	/* Configure SYSCLK to 50MHZ */
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50MHZ);
 8000fd4:	2032      	movs	r0, #50	; 0x32
 8000fd6:	f000 f821 	bl	800101c <SystemClock_Config_HSE>

	/* Initialize all configured peripherals */
	GPIO_Init();
 8000fda:	f000 f8b5 	bl	8001148 <GPIO_Init>
	UART_Init();
 8000fde:	f000 f917 	bl	8001210 <UART_Init>
	TIM_Init();
 8000fe2:	f000 f96f 	bl	80012c4 <TIM_Init>
	CAN_Init(CANBITRATE_500KBIT_50MHZ);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 f988 	bl	80012fc <CAN_Init>
	CAN_Filter_Config();
 8000fec:	f000 fa26 	bl	800143c <CAN_Filter_Config>

	//Activate Interrupts by setting CAN_IER bits
	if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8000ff0:	f240 4103 	movw	r1, #1027	; 0x403
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <main+0x4c>)
 8000ff6:	f001 fa8a 	bl	800250e <HAL_CAN_ActivateNotification>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <main+0x38>
		Error_Handler();
 8001000:	f000 fbaa 	bl	8001758 <Error_Handler>
	}

	//Start CAN
	if(HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <main+0x4c>)
 8001006:	f001 f851 	bl	80020ac <HAL_CAN_Start>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <main+0x48>
		Error_Handler();
 8001010:	f000 fba2 	bl	8001758 <Error_Handler>


	//UART_Test_API();
	//CAN_Test_API();

  	while(1) {
 8001014:	e7fe      	b.n	8001014 <main+0x48>
 8001016:	bf00      	nop
 8001018:	2000035c 	.word	0x2000035c

0800101c <SystemClock_Config_HSE>:
	//while(TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft(&hcan1) != CMD_SUCCESS) {}
	//while(TinyBMS_CAN_ReadNodeID(&hcan1) != CMD_SUCCESS) {}
	//while(TinyBMS_CAN_WriteNodeID(&hcan1) != CMD_SUCCESS) {}
}

void SystemClock_Config_HSE(uint8_t clock_freq) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint8_t flash_latency = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	//Using HSE to derive PLL
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_ON;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b78      	cmp	r3, #120	; 0x78
 8001044:	d036      	beq.n	80010b4 <SystemClock_Config_HSE+0x98>
 8001046:	2b78      	cmp	r3, #120	; 0x78
 8001048:	dc77      	bgt.n	800113a <SystemClock_Config_HSE+0x11e>
 800104a:	2b32      	cmp	r3, #50	; 0x32
 800104c:	d002      	beq.n	8001054 <SystemClock_Config_HSE+0x38>
 800104e:	2b54      	cmp	r3, #84	; 0x54
 8001050:	d018      	beq.n	8001084 <SystemClock_Config_HSE+0x68>
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
		flash_latency = 3;
		break;
	}
	default:
		return;
 8001052:	e072      	b.n	800113a <SystemClock_Config_HSE+0x11e>
		osc_init.PLL.PLLM = 16;
 8001054:	2310      	movs	r3, #16
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 100;
 8001058:	2364      	movs	r3, #100	; 0x64
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8001064:	230f      	movs	r3, #15
 8001066:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2302      	movs	r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001074:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	61bb      	str	r3, [r7, #24]
		flash_latency = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8001082:	e02f      	b.n	80010e4 <SystemClock_Config_HSE+0xc8>
		osc_init.PLL.PLLM = 16;
 8001084:	2310      	movs	r3, #16
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 168;
 8001088:	23a8      	movs	r3, #168	; 0xa8
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8001090:	2302      	movs	r3, #2
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8001094:	230f      	movs	r3, #15
 8001096:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2302      	movs	r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	61bb      	str	r3, [r7, #24]
		flash_latency = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 80010b2:	e017      	b.n	80010e4 <SystemClock_Config_HSE+0xc8>
		osc_init.PLL.PLLM = 16;
 80010b4:	2310      	movs	r3, #16
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 240;
 80010b8:	23f0      	movs	r3, #240	; 0xf0
 80010ba:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80010bc:	2302      	movs	r3, #2
 80010be:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80010c4:	230f      	movs	r3, #15
 80010c6:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d4:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	61bb      	str	r3, [r7, #24]
		flash_latency = 3;
 80010dc:	2303      	movs	r3, #3
 80010de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 80010e2:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fff5 	bl	80030d8 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config_HSE+0xdc>
		Error_Handler();
 80010f4:	f000 fb30 	bl	8001758 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) {
 80010f8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fa8c 	bl	8003620 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config_HSE+0xf6>
		Error_Handler();
 800110e:	f000 fb23 	bl	8001758 <Error_Handler>
	}

	//Configure the SYSTICK timer interrupt frequency for every 1ms
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8001112:	f002 fc53 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8001116:	4603      	mov	r3, r0
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SystemClock_Config_HSE+0x128>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	099b      	lsrs	r3, r3, #6
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fd26 	bl	8002b72 <HAL_SYSTICK_Config>
	//Configure SYSTICK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001126:	2004      	movs	r0, #4
 8001128:	f001 fd30 	bl	8002b8c <HAL_SYSTICK_CLKSourceConfig>
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f001 fcf3 	bl	8002b1e <HAL_NVIC_SetPriority>
 8001138:	e000      	b.n	800113c <SystemClock_Config_HSE+0x120>
		return;
 800113a:	bf00      	nop
}
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	10624dd3 	.word	0x10624dd3

08001148 <GPIO_Init>:

void GPIO_Init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <GPIO_Init+0xbc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <GPIO_Init+0xbc>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <GPIO_Init+0xbc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <GPIO_Init+0xbc>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a26      	ldr	r2, [pc, #152]	; (8001204 <GPIO_Init+0xbc>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <GPIO_Init+0xbc>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <GPIO_Init+0xbc>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a20      	ldr	r2, [pc, #128]	; (8001204 <GPIO_Init+0xbc>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <GPIO_Init+0xbc>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <GPIO_Init+0xbc>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <GPIO_Init+0xbc>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <GPIO_Init+0xbc>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, (LED1_Pin | LED2_Pin | LED3_Pin), GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80011b4:	4814      	ldr	r0, [pc, #80]	; (8001208 <GPIO_Init+0xc0>)
 80011b6:	f001 ff51 	bl	800305c <HAL_GPIO_WritePin>

	/* Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	480e      	ldr	r0, [pc, #56]	; (800120c <GPIO_Init+0xc4>)
 80011d2:	f001 fd97 	bl	8002d04 <HAL_GPIO_Init>

	/* Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = (LED1_Pin | LED2_Pin | LED3_Pin);
 80011d6:	f244 0381 	movw	r3, #16513	; 0x4081
 80011da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <GPIO_Init+0xc0>)
 80011f0:	f001 fd88 	bl	8002d04 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011f4:	2028      	movs	r0, #40	; 0x28
 80011f6:	f001 fcae 	bl	8002b56 <HAL_NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800

08001210 <UART_Init>:

void UART_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	//USART2: PD5 PD6 for TinyBMS communication
	huart2.Instance = USART2;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <UART_Init+0xa4>)
 8001216:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <UART_Init+0xa8>)
 8001218:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <UART_Init+0xa4>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <UART_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <UART_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <UART_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <UART_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <UART_Init+0xa4>)
 800123c:	220c      	movs	r2, #12
 800123e:	615a      	str	r2, [r3, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <UART_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <UART_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <UART_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart2) != HAL_OK) {
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <UART_Init+0xa4>)
 8001254:	f002 febc 	bl	8003fd0 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <UART_Init+0x52>
		Error_Handler();
 800125e:	f000 fa7b 	bl	8001758 <Error_Handler>
	}

	//USART3: PD8 PD9 for ST-LINK debugging (printf ITM)
	huart3.Instance = USART3;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <UART_Init+0xac>)
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <UART_Init+0xb0>)
 8001266:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <UART_Init+0xac>)
 800126a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800126e:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <UART_Init+0xac>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <UART_Init+0xac>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <UART_Init+0xac>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <UART_Init+0xac>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <UART_Init+0xac>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <UART_Init+0xac>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <UART_Init+0xac>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <UART_Init+0xac>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart3) != HAL_OK) {
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <UART_Init+0xac>)
 80012a2:	f002 fe95 	bl	8003fd0 <HAL_UART_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <UART_Init+0xa0>
		Error_Handler();
 80012ac:	f000 fa54 	bl	8001758 <Error_Handler>
	}
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200002d8 	.word	0x200002d8
 80012b8:	40004400 	.word	0x40004400
 80012bc:	20000208 	.word	0x20000208
 80012c0:	40004800 	.word	0x40004800

080012c4 <TIM_Init>:

void TIM_Init(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	//TIM6 - Basic Timer
	htim6.Instance = TIM6;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <TIM_Init+0x30>)
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <TIM_Init+0x34>)
 80012cc:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 4999;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <TIM_Init+0x30>)
 80012d0:	f241 3287 	movw	r2, #4999	; 0x1387
 80012d4:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 10000-1;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <TIM_Init+0x30>)
 80012d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80012dc:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <TIM_Init+0x30>)
 80012e0:	f002 fba0 	bl	8003a24 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <TIM_Init+0x2a>
		Error_Handler();
 80012ea:	f000 fa35 	bl	8001758 <Error_Handler>
	}
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000028c 	.word	0x2000028c
 80012f8:	40001000 	.word	0x40001000

080012fc <CAN_Init>:

void CAN_Init(uint8_t can_bitrate) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	//CAN1
	hcan1.Instance = CAN1;
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <CAN_Init+0xe8>)
 8001308:	4a37      	ldr	r2, [pc, #220]	; (80013e8 <CAN_Init+0xec>)
 800130a:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800130c:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <CAN_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <CAN_Init+0xe8>)
 8001314:	2201      	movs	r2, #1
 8001316:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <CAN_Init+0xe8>)
 800131a:	2201      	movs	r2, #1
 800131c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <CAN_Init+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <CAN_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <CAN_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <CAN_Init+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	775a      	strb	r2, [r3, #29]

	/* Settings related to CAN bit timings (http://www.bittiming.can-wiki.info/) */
	switch(can_bitrate) {
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d844      	bhi.n	80013c6 <CAN_Init+0xca>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <CAN_Init+0x48>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001355 	.word	0x08001355
 8001348:	08001371 	.word	0x08001371
 800134c:	0800138d 	.word	0x0800138d
 8001350:	080013a9 	.word	0x080013a9
	case CANBITRATE_1MBIT_50MHZ:
		/* ** 1Mbit/s @ 50MHz SYSCLK ** */
		//prescaler = 5, num_TQ = 10, Seg1 = 8, Seg2 = 1, Sample point at 90.0, register CAN_BTR = 0x00070004
		hcan1.Init.Prescaler = 5;
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <CAN_Init+0xe8>)
 8001356:	2205      	movs	r2, #5
 8001358:	605a      	str	r2, [r3, #4]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <CAN_Init+0xe8>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <CAN_Init+0xe8>)
 8001362:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001366:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <CAN_Init+0xe8>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
		break;
 800136e:	e02c      	b.n	80013ca <CAN_Init+0xce>
	case CANBITRATE_500KBIT_50MHZ:
		/* ** 500kbit/s @ 50MHz SYSCLK ** */
		//prescaler = 5, num_TQ = 10, Seg1 = 8, Seg2 = 1, Sample point at 90.0, register CAN_BTR = 0x00070009
		hcan1.Init.Prescaler = 10;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <CAN_Init+0xe8>)
 8001372:	220a      	movs	r2, #10
 8001374:	605a      	str	r2, [r3, #4]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <CAN_Init+0xe8>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <CAN_Init+0xe8>)
 800137e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001382:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <CAN_Init+0xe8>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
		break;
 800138a:	e01e      	b.n	80013ca <CAN_Init+0xce>
	case CANBITRATE_250KBIT_50MHZ:
		/* ** 250kbit/s @ 50MHz SYSCLK ** */
		//prescaler = 5, num_TQ = 10, Seg1 = 8, Seg2 = 1, Sample point at 90.0, register CAN_BTR = 0x00070013
		hcan1.Init.Prescaler = 20;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <CAN_Init+0xe8>)
 800138e:	2214      	movs	r2, #20
 8001390:	605a      	str	r2, [r3, #4]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <CAN_Init+0xe8>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <CAN_Init+0xe8>)
 800139a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800139e:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <CAN_Init+0xe8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
		break;
 80013a6:	e010      	b.n	80013ca <CAN_Init+0xce>
	case CANBITRATE_125KBIT_50MHZ:
		/* ** 125kbit/s @ 50MHz SYSCLK ** */
		//prescaler = 25, num_TQ = 16, Seg1 = 13, Seg2 = 2, Sample point at 87.5, register CAN_BTR = 0x001c0018
		hcan1.Init.Prescaler = 25;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <CAN_Init+0xe8>)
 80013aa:	2219      	movs	r2, #25
 80013ac:	605a      	str	r2, [r3, #4]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <CAN_Init+0xe8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <CAN_Init+0xe8>)
 80013b6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80013ba:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <CAN_Init+0xe8>)
 80013be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013c2:	615a      	str	r2, [r3, #20]
		break;
 80013c4:	e001      	b.n	80013ca <CAN_Init+0xce>
	default:
		Error_Handler();
 80013c6:	f000 f9c7 	bl	8001758 <Error_Handler>
	}
	if(HAL_CAN_Init(&hcan1) != HAL_OK) {
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <CAN_Init+0xe8>)
 80013cc:	f000 fc92 	bl	8001cf4 <HAL_CAN_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <CAN_Init+0xde>
		Error_Handler();
 80013d6:	f000 f9bf 	bl	8001758 <Error_Handler>
	}
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000035c 	.word	0x2000035c
 80013e8:	40006400 	.word	0x40006400

080013ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_UART_TxCpltCallback+0x20>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d102      	bne.n	8001404 <HAL_UART_TxCpltCallback+0x18>
		printf("HAL_UART_TxCpltCallback USART2\r\n");
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <HAL_UART_TxCpltCallback+0x24>)
 8001400:	f004 fb46 	bl	8005a90 <puts>
	}
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40004400 	.word	0x40004400
 8001410:	08007f10 	.word	0x08007f10

08001414 <HAL_UART_ErrorCallback>:
	if(huart->Instance == USART2) {
		printf("HAL_UART_RxCpltCallback USART2\r\n");
	}
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_UART_ErrorCallback+0x20>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d102      	bne.n	800142c <HAL_UART_ErrorCallback+0x18>
		printf("HAL_UART_ErrorCallback USART2\r\n");
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <HAL_UART_ErrorCallback+0x24>)
 8001428:	f004 fb32 	bl	8005a90 <puts>
	}
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40004400 	.word	0x40004400
 8001438:	08007f50 	.word	0x08007f50

0800143c <CAN_Filter_Config>:
	if(huart->Instance == USART2) {
		printf("HAL_UART_AbortCpltCallback USART2\r\n");
	}
}

void CAN_Filter_Config(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8001462:	2301      	movs	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK) {
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <CAN_Filter_Config+0x48>)
 800146c:	f000 fd3e 	bl	8001eec <HAL_CAN_ConfigFilter>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <CAN_Filter_Config+0x3e>
		Error_Handler();
 8001476:	f000 f96f 	bl	8001758 <Error_Handler>
	}
}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000035c 	.word	0x2000035c

08001488 <CAN1_Tx>:

void CAN1_Tx(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t message[5] = {'H','E','L','L','O'};
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <CAN1_Tx+0x48>)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001496:	6018      	str	r0, [r3, #0]
 8001498:	3304      	adds	r3, #4
 800149a:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5; //Data Length Code (in Bytes)
 800149c:	2305      	movs	r3, #5
 800149e:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;	//Standard ID
 80014a0:	f240 635d 	movw	r3, #1629	; 0x65d
 80014a4:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD; //Standard or Extended ID type
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; //Remote Transmission Request
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	1d3a      	adds	r2, r7, #4
 80014b4:	f107 0110 	add.w	r1, r7, #16
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <CAN1_Tx+0x4c>)
 80014ba:	f000 fe3b 	bl	8002134 <HAL_CAN_AddTxMessage>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <CAN1_Tx+0x40>
		Error_Handler();
 80014c4:	f000 f948 	bl	8001758 <Error_Handler>
	}
}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	08007fec 	.word	0x08007fec
 80014d4:	2000035c 	.word	0x2000035c

080014d8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	; 0x40
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d116      	bne.n	8001518 <HAL_CAN_TxMailbox0CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox0CompleteCallback CAN1\r\n");
 80014ea:	480e      	ldr	r0, [pc, #56]	; (8001524 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 80014ec:	f004 fad0 	bl	8005a90 <puts>
		sprintf(msg,"Message Transmitted:M0\r\n");
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 fad2 	bl	8005aa0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fe85 	bl	8000210 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f107 010c 	add.w	r1, r7, #12
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8001514:	f002 fdaa 	bl	800406c <HAL_UART_Transmit>
	}
}
 8001518:	bf00      	nop
 800151a:	3740      	adds	r7, #64	; 0x40
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40006400 	.word	0x40006400
 8001524:	08007ff4 	.word	0x08007ff4
 8001528:	08008020 	.word	0x08008020
 800152c:	200002d8 	.word	0x200002d8

08001530 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b090      	sub	sp, #64	; 0x40
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d116      	bne.n	8001570 <HAL_CAN_TxMailbox1CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox1CompleteCallback CAN1\r\n");
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 8001544:	f004 faa4 	bl	8005a90 <puts>
		sprintf(msg,"Message Transmitted:M1\r\n");
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 800154e:	4618      	mov	r0, r3
 8001550:	f004 faa6 	bl	8005aa0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fe59 	bl	8000210 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	b29a      	uxth	r2, r3
 8001562:	f107 010c 	add.w	r1, r7, #12
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 800156c:	f002 fd7e 	bl	800406c <HAL_UART_Transmit>
	}
}
 8001570:	bf00      	nop
 8001572:	3740      	adds	r7, #64	; 0x40
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40006400 	.word	0x40006400
 800157c:	0800803c 	.word	0x0800803c
 8001580:	08008068 	.word	0x08008068
 8001584:	200002d8 	.word	0x200002d8

08001588 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b090      	sub	sp, #64	; 0x40
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d116      	bne.n	80015c8 <HAL_CAN_TxMailbox2CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox2CompleteCallback CAN1\r\n");
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 800159c:	f004 fa78 	bl	8005a90 <puts>
		sprintf(msg,"Message Transmitted:M2\r\n");
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 fa7a 	bl	8005aa0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fe2d 	bl	8000210 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f107 010c 	add.w	r1, r7, #12
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 80015c4:	f002 fd52 	bl	800406c <HAL_UART_Transmit>
	}
}
 80015c8:	bf00      	nop
 80015ca:	3740      	adds	r7, #64	; 0x40
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40006400 	.word	0x40006400
 80015d4:	08008084 	.word	0x08008084
 80015d8:	080080b0 	.word	0x080080b0
 80015dc:	200002d8 	.word	0x200002d8

080015e0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b098      	sub	sp, #96	; 0x60
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d125      	bne.n	800163e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
		CAN_RxHeaderTypeDef RxHeader;
		uint8_t rcvd_msg[5];
		char msg[50];
		printf("HAL_CAN_RxFifo0MsgPendingCallback CAN1\r\n");
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80015f4:	f004 fa4c 	bl	8005a90 <puts>

		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 80015f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015fc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001600:	2100      	movs	r1, #0
 8001602:	4813      	ldr	r0, [pc, #76]	; (8001650 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001604:	f000 fe71 	bl	80022ea <HAL_CAN_GetRxMessage>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			Error_Handler();
 800160e:	f000 f8a3 	bl	8001758 <Error_Handler>
		}

		sprintf(msg, "Message Received : %s\r\n", rcvd_msg);
 8001612:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800161c:	4618      	mov	r0, r3
 800161e:	f004 fa3f 	bl	8005aa0 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fdf2 	bl	8000210 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800163a:	f002 fd17 	bl	800406c <HAL_UART_Transmit>
	}
}
 800163e:	bf00      	nop
 8001640:	3760      	adds	r7, #96	; 0x60
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40006400 	.word	0x40006400
 800164c:	080080cc 	.word	0x080080cc
 8001650:	2000035c 	.word	0x2000035c
 8001654:	080080f4 	.word	0x080080f4
 8001658:	200002d8 	.word	0x200002d8

0800165c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b090      	sub	sp, #64	; 0x40
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_CAN_ErrorCallback+0x48>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d116      	bne.n	800169c <HAL_CAN_ErrorCallback+0x40>
		char msg[50];
		printf("HAL_CAN_ErrorCallback CAN1\r\n");
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <HAL_CAN_ErrorCallback+0x4c>)
 8001670:	f004 fa0e 	bl	8005a90 <puts>
		sprintf(msg,"CAN Error Detected\r\n");
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <HAL_CAN_ErrorCallback+0x50>)
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fa10 	bl	8005aa0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fdc3 	bl	8000210 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	f107 010c 	add.w	r1, r7, #12
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <HAL_CAN_ErrorCallback+0x54>)
 8001698:	f002 fce8 	bl	800406c <HAL_UART_Transmit>
	}
}
 800169c:	bf00      	nop
 800169e:	3740      	adds	r7, #64	; 0x40
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40006400 	.word	0x40006400
 80016a8:	0800810c 	.word	0x0800810c
 80016ac:	08008128 	.word	0x08008128
 80016b0:	200002d8 	.word	0x200002d8

080016b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a20      	ldr	r2, [pc, #128]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d139      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0x86>
		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;
		uint8_t message; //no meaning for data frame
		printf("HAL_TIM_PeriodElapsedCallback TIM6\r\n");
 80016c6:	4820      	ldr	r0, [pc, #128]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016c8:	f004 f9e2 	bl	8005a90 <puts>

		if(request_count == 4) {
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d11a      	bne.n	800170a <HAL_TIM_PeriodElapsedCallback+0x56>
			//N1 sending Remote frame to N2
			TxHeader.DLC = 2; //N1 demanding a reply of 2 bytes
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
			TxHeader.StdId = 0x651;
 80016d8:	f240 6351 	movw	r3, #1617	; 0x651
 80016dc:	613b      	str	r3, [r7, #16]
			TxHeader.IDE = CAN_ID_STD;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
			TxHeader.RTR = CAN_RTR_REMOTE;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message, &TxMailbox) != HAL_OK) {
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	f107 020b 	add.w	r2, r7, #11
 80016ee:	f107 0110 	add.w	r1, r7, #16
 80016f2:	4817      	ldr	r0, [pc, #92]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80016f4:	f000 fd1e 	bl	8002134 <HAL_CAN_AddTxMessage>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_TIM_PeriodElapsedCallback+0x4e>
				Error_Handler();
 80016fe:	f000 f82b 	bl	8001758 <Error_Handler>
			}
			request_count = 0;
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e007      	b.n	800171a <HAL_TIM_PeriodElapsedCallback+0x66>
		} else {
			CAN1_Tx();
 800170a:	f7ff febd 	bl	8001488 <CAN1_Tx>
			request_count++;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001718:	701a      	strb	r2, [r3, #0]
		}
		message = ++led_num;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	72fb      	strb	r3, [r7, #11]

		if(led_num == 4) {
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d102      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0x86>
			led_num = 0;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40001000 	.word	0x40001000
 8001748:	08008140 	.word	0x08008140
 800174c:	200001f8 	.word	0x200001f8
 8001750:	2000035c 	.word	0x2000035c
 8001754:	200001f9 	.word	0x200001f9

08001758 <Error_Handler>:
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, response, &TxMailbox) != HAL_OK) {
		Error_Handler();
	}
}

void Error_Handler(void) {
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	while(1);
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x4>
	...

08001760 <HAL_MspInit>:
* @date 02-03-2022
***********************************************/

#include "main.h"

void HAL_MspInit(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0

	/* Low level processor specific inits */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_MspInit+0x74>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <HAL_MspInit+0x74>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_MspInit+0x74>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_MspInit+0x74>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_MspInit+0x74>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_MspInit+0x74>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //default setting
 8001796:	2003      	movs	r0, #3
 8001798:	f001 f9b6 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_MspInit+0x78>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_MspInit+0x78>)
 80017a2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80017a6:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	f06f 000b 	mvn.w	r0, #11
 80017b0:	f001 f9b5 	bl	8002b1e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	f06f 000a 	mvn.w	r0, #10
 80017bc:	f001 f9af 	bl	8002b1e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	f06f 0009 	mvn.w	r0, #9
 80017c8:	f001 f9a9 	bl	8002b1e <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]

	if(hcan->Instance == CAN1) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a27      	ldr	r2, [pc, #156]	; (8001898 <HAL_CAN_MspInit+0xbc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d147      	bne.n	800188e <HAL_CAN_MspInit+0xb2>
		__HAL_RCC_CAN1_CLK_ENABLE();
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_CAN_MspInit+0xc0>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_CAN_MspInit+0xc0>)
 8001804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_CAN_MspInit+0xc0>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_CAN_MspInit+0xc0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a20      	ldr	r2, [pc, #128]	; (800189c <HAL_CAN_MspInit+0xc0>)
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_CAN_MspInit+0xc0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

		/** CAN1 GPIO Configuration
			PD0     ------> CAN1_RX
			PD1     ------> CAN1_TX
		*/
		GPIO_InitStruct.Pin = (CAN1_RX_PIN | CAN1_TX_PIN);
 800182e:	2303      	movs	r3, #3
 8001830:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800183e:	2309      	movs	r3, #9
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(CAN1_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4815      	ldr	r0, [pc, #84]	; (80018a0 <HAL_CAN_MspInit+0xc4>)
 800184a:	f001 fa5b 	bl	8002d04 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	210f      	movs	r1, #15
 8001852:	2013      	movs	r0, #19
 8001854:	f001 f963 	bl	8002b1e <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	210f      	movs	r1, #15
 800185c:	2014      	movs	r0, #20
 800185e:	f001 f95e 	bl	8002b1e <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	210f      	movs	r1, #15
 8001866:	2015      	movs	r0, #21
 8001868:	f001 f959 	bl	8002b1e <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	210f      	movs	r1, #15
 8001870:	2016      	movs	r0, #22
 8001872:	f001 f954 	bl	8002b1e <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001876:	2013      	movs	r0, #19
 8001878:	f001 f96d 	bl	8002b56 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800187c:	2014      	movs	r0, #20
 800187e:	f001 f96a 	bl	8002b56 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001882:	2015      	movs	r0, #21
 8001884:	f001 f967 	bl	8002b56 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001888:	2016      	movs	r0, #22
 800188a:	f001 f964 	bl	8002b56 <HAL_NVIC_EnableIRQ>
	}
}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40006400 	.word	0x40006400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020c00 	.word	0x40020c00

080018a4 <HAL_UART_MspInit>:
		HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
		HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

	if(huart->Instance == USART2) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a32      	ldr	r2, [pc, #200]	; (800198c <HAL_UART_MspInit+0xe8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d130      	bne.n	8001928 <HAL_UART_MspInit+0x84>
		__HAL_RCC_USART2_CLK_ENABLE();
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a31      	ldr	r2, [pc, #196]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_UART_MspInit+0xec>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
		 *  USART2 GPIO Configuration
			PD5     ------> USART2_TX
			PD6     ------> USART2_RX
		*/

		GPIO_InitStruct.Pin = (USART2_TX_Pin | USART2_RX_Pin);
 80018f6:	2360      	movs	r3, #96	; 0x60
 80018f8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001906:	2307      	movs	r3, #7
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART2_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4820      	ldr	r0, [pc, #128]	; (8001994 <HAL_UART_MspInit+0xf0>)
 8001912:	f001 f9f7 	bl	8002d04 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	210f      	movs	r1, #15
 800191a:	2026      	movs	r0, #38	; 0x26
 800191c:	f001 f8ff 	bl	8002b1e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001920:	2026      	movs	r0, #38	; 0x26
 8001922:	f001 f918 	bl	8002b56 <HAL_NVIC_EnableIRQ>
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
	}
}
 8001926:	e02d      	b.n	8001984 <HAL_UART_MspInit+0xe0>
	} else if(huart->Instance == USART3) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <HAL_UART_MspInit+0xf4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d128      	bne.n	8001984 <HAL_UART_MspInit+0xe0>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a16      	ldr	r2, [pc, #88]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_UART_MspInit+0xec>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_UART_MspInit+0xec>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = (USART3_TX_Pin | USART3_RX_Pin);
 8001962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001966:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001974:	2307      	movs	r3, #7
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <HAL_UART_MspInit+0xf0>)
 8001980:	f001 f9c0 	bl	8002d04 <HAL_GPIO_Init>
}
 8001984:	bf00      	nop
 8001986:	3730      	adds	r7, #48	; 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40004400 	.word	0x40004400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40004800 	.word	0x40004800

0800199c <HAL_TIM_Base_MspInit>:
		*/
		HAL_GPIO_DeInit(USART3_GPIO_Port, (USART3_TX_Pin | USART3_RX_Pin));
	}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <HAL_TIM_Base_MspInit+0x44>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d113      	bne.n	80019d6 <HAL_TIM_Base_MspInit+0x3a>
		//1. Enable TIM6 Clock
		__HAL_RCC_TIM6_CLK_ENABLE();
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_TIM_Base_MspInit+0x48>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <HAL_TIM_Base_MspInit+0x48>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_TIM_Base_MspInit+0x48>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

		//2. Enable TIM6 IRQ
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c6:	2036      	movs	r0, #54	; 0x36
 80019c8:	f001 f8c5 	bl	8002b56 <HAL_NVIC_EnableIRQ>

		//3. Setup TIM6_DAC_IRQn priority
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	210f      	movs	r1, #15
 80019d0:	2036      	movs	r0, #54	; 0x36
 80019d2:	f001 f8a4 	bl	8002b1e <HAL_NVIC_SetPriority>
	}
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40001000 	.word	0x40001000
 80019e4:	40023800 	.word	0x40023800

080019e8 <ITM_SendChar>:
#define ITM_TER         	*((volatile uint32_t*) 0xE0000E00 )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TCR            	*((volatile uint32_t*) 0xE0000E80 )

void ITM_SendChar(uint8_t ch)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
    /* Stimulus Port #N is enabled when bit STIMENA[N] is set*/
	ITM_TER |= ( 1 << 0);
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <ITM_SendChar+0x48>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <ITM_SendChar+0x48>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6013      	str	r3, [r2, #0]

	/*Enable ITM. This is the master enable and must be set to allow
	writes to all ITM registers, including the control register. */
	ITM_TCR |= ( 1 << 0);
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <ITM_SendChar+0x4c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <ITM_SendChar+0x4c>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001a0a:	bf00      	nop
 8001a0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f8      	beq.n	8001a0c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001a1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	6013      	str	r3, [r2, #0]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e0000e00 	.word	0xe0000e00
 8001a34:	e0000e80 	.word	0xe0000e80

08001a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_kill>:

int _kill(int pid, int sig)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a52:	f003 fb13 	bl	800507c <__errno>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2216      	movs	r2, #22
 8001a5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_exit>:

void _exit (int status)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe7 	bl	8001a48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a7a:	e7fe      	b.n	8001a7a <_exit+0x12>

08001a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e00a      	b.n	8001aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a8e:	f3af 8000 	nop.w
 8001a92:	4601      	mov	r1, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	b2ca      	uxtb	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf0      	blt.n	8001a8e <_read+0x12>
	}

return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e009      	b.n	8001adc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff89 	bl	80019e8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf1      	blt.n	8001ac8 <_write+0x12>
	}
	return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_close>:

int _close(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	return -1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b16:	605a      	str	r2, [r3, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_isatty>:

int _isatty(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
	return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f003 fa78 	bl	800507c <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20050000 	.word	0x20050000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	200001fc 	.word	0x200001fc
 8001bc0:	200003b8 	.word	0x200003b8

08001bc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <SystemInit+0x20>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <SystemInit+0x20>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bec:	480d      	ldr	r0, [pc, #52]	; (8001c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bee:	490e      	ldr	r1, [pc, #56]	; (8001c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c04:	4c0b      	ldr	r4, [pc, #44]	; (8001c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c12:	f7ff ffd7 	bl	8001bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c16:	f003 fa37 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7ff f9d7 	bl	8000fcc <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c2c:	0800856c 	.word	0x0800856c
  ldr r2, =_sbss
 8001c30:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c34:	200003b4 	.word	0x200003b4

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>

08001c3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f000 ff62 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 f805 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4a:	f7ff fd89 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 ff7d 	bl	8002b72 <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 ff45 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	200003a0 	.word	0x200003a0

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	200003a0 	.word	0x200003a0

08001cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ed      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fd62 	bl	80017dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff ffd8 	bl	8001cdc <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2e:	e012      	b.n	8001d56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff ffd4 	bl	8001cdc <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d90b      	bls.n	8001d56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0c5      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0e5      	beq.n	8001d30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0202 	bic.w	r2, r2, #2
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff ffb2 	bl	8001cdc <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7a:	e012      	b.n	8001da2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7c:	f7ff ffae 	bl	8001cdc <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d90b      	bls.n	8001da2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e09f      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e5      	bne.n	8001d7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e5b      	ldrb	r3, [r3, #25]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e9b      	ldrb	r3, [r3, #26]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0220 	bic.w	r2, r2, #32
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7edb      	ldrb	r3, [r3, #27]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0210 	bic.w	r2, r2, #16
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0210 	orr.w	r2, r2, #16
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7f1b      	ldrb	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7f5b      	ldrb	r3, [r3, #29]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f02:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d003      	beq.n	8001f12 <HAL_CAN_ConfigFilter+0x26>
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	f040 80be 	bne.w	800208e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f14:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	431a      	orrs	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2201      	movs	r2, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d123      	bne.n	8001fbc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3248      	adds	r2, #72	; 0x48
 8001f9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fb2:	6979      	ldr	r1, [r7, #20]
 8001fb4:	3348      	adds	r3, #72	; 0x48
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d122      	bne.n	800200a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fe4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3248      	adds	r2, #72	; 0x48
 8001fea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ffe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002000:	6979      	ldr	r1, [r7, #20]
 8002002:	3348      	adds	r3, #72	; 0x48
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002024:	e007      	b.n	8002036 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	401a      	ands	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002050:	e007      	b.n	8002062 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	431a      	orrs	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	431a      	orrs	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002080:	f023 0201 	bic.w	r2, r3, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e006      	b.n	800209c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40006400 	.word	0x40006400

080020ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d12e      	bne.n	800211e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020d8:	f7ff fe00 	bl	8001cdc <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020de:	e012      	b.n	8002106 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020e0:	f7ff fdfc 	bl	8001cdc <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d90b      	bls.n	8002106 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2205      	movs	r2, #5
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e012      	b.n	800212c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e5      	bne.n	80020e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e006      	b.n	800212c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002148:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d003      	beq.n	8002160 <HAL_CAN_AddTxMessage+0x2c>
 8002158:	7ffb      	ldrb	r3, [r7, #31]
 800215a:	2b02      	cmp	r3, #2
 800215c:	f040 80b8 	bne.w	80022d0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80a0 	beq.w	80022c0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	0e1b      	lsrs	r3, r3, #24
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d907      	bls.n	80021a0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e09e      	b.n	80022de <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021a0:	2201      	movs	r2, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	409a      	lsls	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10d      	bne.n	80021ce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	6809      	ldr	r1, [r1, #0]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3318      	adds	r3, #24
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	440b      	add	r3, r1
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e00f      	b.n	80021ee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021de:	68f9      	ldr	r1, [r7, #12]
 80021e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3318      	adds	r3, #24
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	440b      	add	r3, r1
 80021ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3318      	adds	r3, #24
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	440b      	add	r3, r1
 80021fe:	3304      	adds	r3, #4
 8002200:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	7d1b      	ldrb	r3, [r3, #20]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d111      	bne.n	800222e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3318      	adds	r3, #24
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	4413      	add	r3, r2
 8002216:	3304      	adds	r3, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	6811      	ldr	r1, [r2, #0]
 800221e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3318      	adds	r3, #24
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	440b      	add	r3, r1
 800222a:	3304      	adds	r3, #4
 800222c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3307      	adds	r3, #7
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	061a      	lsls	r2, r3, #24
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3306      	adds	r3, #6
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3305      	adds	r3, #5
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4313      	orrs	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	3204      	adds	r2, #4
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	4610      	mov	r0, r2
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	6811      	ldr	r1, [r2, #0]
 8002256:	ea43 0200 	orr.w	r2, r3, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	440b      	add	r3, r1
 8002260:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002264:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3303      	adds	r3, #3
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	061a      	lsls	r2, r3, #24
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3302      	adds	r3, #2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3301      	adds	r3, #1
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	4313      	orrs	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	4610      	mov	r0, r2
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	6811      	ldr	r1, [r2, #0]
 800228c:	ea43 0200 	orr.w	r2, r3, r0
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	440b      	add	r3, r1
 8002296:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800229a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3318      	adds	r3, #24
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4413      	add	r3, r2
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	6811      	ldr	r1, [r2, #0]
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3318      	adds	r3, #24
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	440b      	add	r3, r1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e00e      	b.n	80022de <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e006      	b.n	80022de <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022ea:	b480      	push	{r7}
 80022ec:	b087      	sub	sp, #28
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <HAL_CAN_GetRxMessage+0x24>
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	2b02      	cmp	r3, #2
 800230a:	f040 80f3 	bne.w	80024f4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10e      	bne.n	8002332 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0e7      	b.n	8002502 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0d8      	b.n	8002502 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	331b      	adds	r3, #27
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0204 	and.w	r2, r3, #4
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	331b      	adds	r3, #27
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0d5b      	lsrs	r3, r3, #21
 800237e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	331b      	adds	r3, #27
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	08db      	lsrs	r3, r3, #3
 8002398:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	331b      	adds	r3, #27
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0202 	and.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	331b      	adds	r3, #27
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	4413      	add	r3, r2
 80023c2:	3304      	adds	r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 020f 	and.w	r2, r3, #15
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	331b      	adds	r3, #27
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	331b      	adds	r3, #27
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	3304      	adds	r3, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	4413      	add	r3, r2
 8002408:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	4413      	add	r3, r2
 800241e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0a1a      	lsrs	r2, r3, #8
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	4413      	add	r3, r2
 8002438:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	0c1a      	lsrs	r2, r3, #16
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	3302      	adds	r3, #2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e1a      	lsrs	r2, r3, #24
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	3303      	adds	r3, #3
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4413      	add	r3, r2
 800246c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3304      	adds	r3, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	4413      	add	r3, r2
 8002484:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0a1a      	lsrs	r2, r3, #8
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	3305      	adds	r3, #5
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	4413      	add	r3, r2
 800249e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0c1a      	lsrs	r2, r3, #16
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	3306      	adds	r3, #6
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0e1a      	lsrs	r2, r3, #24
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	3307      	adds	r3, #7
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d108      	bne.n	80024e0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0220 	orr.w	r2, r2, #32
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	e007      	b.n	80024f0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0220 	orr.w	r2, r2, #32
 80024ee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e006      	b.n	8002502 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d002      	beq.n	800252c <HAL_CAN_ActivateNotification+0x1e>
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d109      	bne.n	8002540 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6959      	ldr	r1, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e006      	b.n	800254e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
  }
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b08a      	sub	sp, #40	; 0x28
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d07c      	beq.n	800269a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d023      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe ff8b 	bl	80014d8 <HAL_CAN_TxMailbox0CompleteCallback>
 80025c2:	e016      	b.n	80025f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	e00c      	b.n	80025f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	e002      	b.n	80025f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f96b 	bl	80028c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d024      	beq.n	8002646 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002604:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe ff8d 	bl	8001530 <HAL_CAN_TxMailbox1CompleteCallback>
 8002616:	e016      	b.n	8002646 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	e00c      	b.n	8002646 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	e002      	b.n	8002646 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f94b 	bl	80028dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d024      	beq.n	800269a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002658:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7fe ff8f 	bl	8001588 <HAL_CAN_TxMailbox2CompleteCallback>
 800266a:	e016      	b.n	800269a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	e00c      	b.n	800269a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	e002      	b.n	800269a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f92b 	bl	80028f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2210      	movs	r2, #16
 80026bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2208      	movs	r2, #8
 80026d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f912 	bl	8002904 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7fe ff71 	bl	80015e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2210      	movs	r2, #16
 8002720:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2208      	movs	r2, #8
 800273c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8f4 	bl	800292c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f8db 	bl	8002918 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2210      	movs	r2, #16
 800277c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8de 	bl	8002940 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2208      	movs	r2, #8
 800279e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f8d7 	bl	8002954 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d07b      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d072      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002814:	2b00      	cmp	r3, #0
 8002816:	d043      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	d03e      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002828:	2b60      	cmp	r3, #96	; 0x60
 800282a:	d02b      	beq.n	8002884 <HAL_CAN_IRQHandler+0x32a>
 800282c:	2b60      	cmp	r3, #96	; 0x60
 800282e:	d82e      	bhi.n	800288e <HAL_CAN_IRQHandler+0x334>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d022      	beq.n	800287a <HAL_CAN_IRQHandler+0x320>
 8002834:	2b50      	cmp	r3, #80	; 0x50
 8002836:	d82a      	bhi.n	800288e <HAL_CAN_IRQHandler+0x334>
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d019      	beq.n	8002870 <HAL_CAN_IRQHandler+0x316>
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d826      	bhi.n	800288e <HAL_CAN_IRQHandler+0x334>
 8002840:	2b30      	cmp	r3, #48	; 0x30
 8002842:	d010      	beq.n	8002866 <HAL_CAN_IRQHandler+0x30c>
 8002844:	2b30      	cmp	r3, #48	; 0x30
 8002846:	d822      	bhi.n	800288e <HAL_CAN_IRQHandler+0x334>
 8002848:	2b10      	cmp	r3, #16
 800284a:	d002      	beq.n	8002852 <HAL_CAN_IRQHandler+0x2f8>
 800284c:	2b20      	cmp	r3, #32
 800284e:	d005      	beq.n	800285c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002850:	e01d      	b.n	800288e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800285a:	e019      	b.n	8002890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	f043 0310 	orr.w	r3, r3, #16
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002864:	e014      	b.n	8002890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	f043 0320 	orr.w	r3, r3, #32
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800286e:	e00f      	b.n	8002890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002878:	e00a      	b.n	8002890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002882:	e005      	b.n	8002890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800288c:	e000      	b.n	8002890 <HAL_CAN_IRQHandler+0x336>
            break;
 800288e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800289e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2204      	movs	r2, #4
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fece 	bl	800165c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028c0:	bf00      	nop
 80028c2:	3728      	adds	r7, #40	; 0x28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00
 80029ac:	05fa0000 	.word	0x05fa0000

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4907      	ldr	r1, [pc, #28]	; (8002a04 <__NVIC_EnableIRQ+0x38>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff29 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff3e 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff8e 	bl	8002a5c <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5d 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff31 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffa2 	bl	8002ac4 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d106      	bne.n	8002ba8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002ba6:	e005      	b.n	8002bb4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e010 	.word	0xe000e010

08002bc4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002bc8:	f000 f802 	bl	8002bd0 <HAL_SYSTICK_Callback>
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff f876 	bl	8001cdc <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d008      	beq.n	8002c10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e052      	b.n	8002cb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0216 	bic.w	r2, r2, #22
 8002c1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d103      	bne.n	8002c40 <HAL_DMA_Abort+0x62>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0208 	bic.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c60:	e013      	b.n	8002c8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c62:	f7ff f83b 	bl	8001cdc <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d90c      	bls.n	8002c8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e015      	b.n	8002cb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e4      	bne.n	8002c62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	223f      	movs	r2, #63	; 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d004      	beq.n	8002cdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e00c      	b.n	8002cf6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2205      	movs	r2, #5
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e175      	b.n	8003010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f040 8164 	bne.w	800300a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <HAL_GPIO_Init+0x56>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d130      	bne.n	8002dbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d017      	beq.n	8002df8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d123      	bne.n	8002e4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80be 	beq.w	800300a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	4b66      	ldr	r3, [pc, #408]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a65      	ldr	r2, [pc, #404]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b63      	ldr	r3, [pc, #396]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ea6:	4a61      	ldr	r2, [pc, #388]	; (800302c <HAL_GPIO_Init+0x328>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_GPIO_Init+0x32c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d037      	beq.n	8002f42 <HAL_GPIO_Init+0x23e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a57      	ldr	r2, [pc, #348]	; (8003034 <HAL_GPIO_Init+0x330>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_GPIO_Init+0x23a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a56      	ldr	r2, [pc, #344]	; (8003038 <HAL_GPIO_Init+0x334>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d02b      	beq.n	8002f3a <HAL_GPIO_Init+0x236>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a55      	ldr	r2, [pc, #340]	; (800303c <HAL_GPIO_Init+0x338>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x232>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a54      	ldr	r2, [pc, #336]	; (8003040 <HAL_GPIO_Init+0x33c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x22e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a53      	ldr	r2, [pc, #332]	; (8003044 <HAL_GPIO_Init+0x340>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x22a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a52      	ldr	r2, [pc, #328]	; (8003048 <HAL_GPIO_Init+0x344>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x226>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a51      	ldr	r2, [pc, #324]	; (800304c <HAL_GPIO_Init+0x348>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x222>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a50      	ldr	r2, [pc, #320]	; (8003050 <HAL_GPIO_Init+0x34c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x21e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x21a>
 8002f1a:	2309      	movs	r3, #9
 8002f1c:	e012      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f1e:	230a      	movs	r3, #10
 8002f20:	e010      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f22:	2308      	movs	r3, #8
 8002f24:	e00e      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f54:	4935      	ldr	r1, [pc, #212]	; (800302c <HAL_GPIO_Init+0x328>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a34      	ldr	r2, [pc, #208]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a29      	ldr	r2, [pc, #164]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb6:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fda:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <HAL_GPIO_Init+0x354>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae86 	bls.w	8002d24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	; 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40022000 	.word	0x40022000
 8003054:	40022400 	.word	0x40022400
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030a6:	4a05      	ldr	r2, [pc, #20]	; (80030bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f806 	bl	80030c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40013c00 	.word	0x40013c00

080030c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030e0:	2300      	movs	r3, #0
 80030e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e291      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fc:	4b96      	ldr	r3, [pc, #600]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d00c      	beq.n	8003122 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003108:	4b93      	ldr	r3, [pc, #588]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d112      	bne.n	800313a <HAL_RCC_OscConfig+0x62>
 8003114:	4b90      	ldr	r3, [pc, #576]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003120:	d10b      	bne.n	800313a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d06c      	beq.n	8003208 <HAL_RCC_OscConfig+0x130>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d168      	bne.n	8003208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e26b      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x7a>
 8003144:	4b84      	ldr	r3, [pc, #528]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a83      	ldr	r2, [pc, #524]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e02e      	b.n	80031b0 <HAL_RCC_OscConfig+0xd8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x9c>
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7e      	ldr	r2, [pc, #504]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b7c      	ldr	r3, [pc, #496]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7b      	ldr	r2, [pc, #492]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800316c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e01d      	b.n	80031b0 <HAL_RCC_OscConfig+0xd8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0xc0>
 800317e:	4b76      	ldr	r3, [pc, #472]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a75      	ldr	r2, [pc, #468]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a72      	ldr	r2, [pc, #456]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xd8>
 8003198:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6e      	ldr	r2, [pc, #440]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6b      	ldr	r2, [pc, #428]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fd90 	bl	8001cdc <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fd8c 	bl	8001cdc <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e21f      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe8>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fd7c 	bl	8001cdc <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fd78 	bl	8001cdc <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e20b      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x110>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d069      	beq.n	80032ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003216:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003222:	4b4d      	ldr	r3, [pc, #308]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d11c      	bne.n	8003268 <HAL_RCC_OscConfig+0x190>
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d116      	bne.n	8003268 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x17a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e1df      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	493d      	ldr	r1, [pc, #244]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	e040      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b39      	ldr	r3, [pc, #228]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a38      	ldr	r2, [pc, #224]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe fd2e 	bl	8001cdc <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003284:	f7fe fd2a 	bl	8001cdc <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1bd      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4929      	ldr	r1, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
 80032b6:	e018      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b8:	4b27      	ldr	r3, [pc, #156]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a26      	ldr	r2, [pc, #152]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fd0a 	bl	8001cdc <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe fd06 	bl	8001cdc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e199      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d038      	beq.n	8003368 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d019      	beq.n	8003332 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	4a15      	ldr	r2, [pc, #84]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe fce7 	bl	8001cdc <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003312:	f7fe fce3 	bl	8001cdc <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e176      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x23a>
 8003330:	e01a      	b.n	8003368 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fe fccd 	bl	8001cdc <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe fcc9 	bl	8001cdc <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d903      	bls.n	800335c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e15c      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
 8003358:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b91      	ldr	r3, [pc, #580]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80a4 	beq.w	80034be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b8b      	ldr	r3, [pc, #556]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	4b88      	ldr	r3, [pc, #544]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a87      	ldr	r2, [pc, #540]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
 800338e:	4b85      	ldr	r3, [pc, #532]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d118      	bne.n	80033dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033aa:	4b7f      	ldr	r3, [pc, #508]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7e      	ldr	r2, [pc, #504]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fc91 	bl	8001cdc <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fe fc8d 	bl	8001cdc <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b64      	cmp	r3, #100	; 0x64
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e120      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d0:	4b75      	ldr	r3, [pc, #468]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x31a>
 80033e4:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a6e      	ldr	r2, [pc, #440]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	e02d      	b.n	800344e <HAL_RCC_OscConfig+0x376>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x33c>
 80033fa:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a69      	ldr	r2, [pc, #420]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a66      	ldr	r2, [pc, #408]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 800340c:	f023 0304 	bic.w	r3, r3, #4
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	e01c      	b.n	800344e <HAL_RCC_OscConfig+0x376>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b05      	cmp	r3, #5
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_OscConfig+0x35e>
 800341c:	4b61      	ldr	r3, [pc, #388]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a60      	ldr	r2, [pc, #384]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	4b5e      	ldr	r3, [pc, #376]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a5d      	ldr	r2, [pc, #372]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	e00b      	b.n	800344e <HAL_RCC_OscConfig+0x376>
 8003436:	4b5b      	ldr	r3, [pc, #364]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a5a      	ldr	r2, [pc, #360]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	4b58      	ldr	r3, [pc, #352]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d015      	beq.n	8003482 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fe fc41 	bl	8001cdc <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe fc3d 	bl	8001cdc <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0ce      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ee      	beq.n	800345e <HAL_RCC_OscConfig+0x386>
 8003480:	e014      	b.n	80034ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe fc2b 	bl	8001cdc <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fc27 	bl	8001cdc <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a0:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ee      	bne.n	800348a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d105      	bne.n	80034be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b3c      	ldr	r3, [pc, #240]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a3b      	ldr	r2, [pc, #236]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80a4 	beq.w	8003610 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d06b      	beq.n	80035ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d149      	bne.n	8003570 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a30      	ldr	r2, [pc, #192]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fbf8 	bl	8001cdc <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe fbf4 	bl	8001cdc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e087      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	3b01      	subs	r3, #1
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	4313      	orrs	r3, r2
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800353a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe fbc8 	bl	8001cdc <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003550:	f7fe fbc4 	bl	8001cdc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e057      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x478>
 800356e:	e04f      	b.n	8003610 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe fbae 	bl	8001cdc <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe fbaa 	bl	8001cdc <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e03d      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x4ac>
 80035a2:	e035      	b.n	8003610 <HAL_RCC_OscConfig+0x538>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x544>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d028      	beq.n	800360c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d121      	bne.n	800360c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d11a      	bne.n	800360c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035dc:	4013      	ands	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d111      	bne.n	800360c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	3b01      	subs	r3, #1
 80035f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d107      	bne.n	800360c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800

08003620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0d0      	b.n	80037da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003638:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d910      	bls.n	8003668 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b67      	ldr	r3, [pc, #412]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 020f 	bic.w	r2, r3, #15
 800364e:	4965      	ldr	r1, [pc, #404]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a58      	ldr	r2, [pc, #352]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800368a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a52      	ldr	r2, [pc, #328]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	494d      	ldr	r1, [pc, #308]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d040      	beq.n	8003744 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d115      	bne.n	8003702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e073      	b.n	80037da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	4b3d      	ldr	r3, [pc, #244]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06b      	b.n	80037da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4936      	ldr	r1, [pc, #216]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003714:	f7fe fae2 	bl	8001cdc <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe fade 	bl	8001cdc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e053      	b.n	80037da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003744:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d210      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 020f 	bic.w	r2, r3, #15
 800375a:	4922      	ldr	r1, [pc, #136]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4916      	ldr	r1, [pc, #88]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	490e      	ldr	r1, [pc, #56]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f821 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490a      	ldr	r1, [pc, #40]	; (80037ec <HAL_RCC_ClockConfig+0x1cc>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1d0>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_RCC_ClockConfig+0x1d4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fa3e 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00
 80037e8:	40023800 	.word	0x40023800
 80037ec:	08008164 	.word	0x08008164
 80037f0:	20000000 	.word	0x20000000
 80037f4:	20000004 	.word	0x20000004

080037f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	2300      	movs	r3, #0
 800380a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003810:	4b67      	ldr	r3, [pc, #412]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d00d      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x40>
 800381c:	2b08      	cmp	r3, #8
 800381e:	f200 80bd 	bhi.w	800399c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x34>
 8003826:	2b04      	cmp	r3, #4
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0x3a>
 800382a:	e0b7      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800382e:	60bb      	str	r3, [r7, #8]
      break;
 8003830:	e0b7      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003832:	4b61      	ldr	r3, [pc, #388]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003834:	60bb      	str	r3, [r7, #8]
      break;
 8003836:	e0b4      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003838:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003840:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003842:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d04d      	beq.n	80038ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b58      	ldr	r3, [pc, #352]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	461a      	mov	r2, r3
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	ea02 0800 	and.w	r8, r2, r0
 8003866:	ea03 0901 	and.w	r9, r3, r1
 800386a:	4640      	mov	r0, r8
 800386c:	4649      	mov	r1, r9
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	014b      	lsls	r3, r1, #5
 8003878:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800387c:	0142      	lsls	r2, r0, #5
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	ebb0 0008 	subs.w	r0, r0, r8
 8003886:	eb61 0109 	sbc.w	r1, r1, r9
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	018b      	lsls	r3, r1, #6
 8003894:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003898:	0182      	lsls	r2, r0, #6
 800389a:	1a12      	subs	r2, r2, r0
 800389c:	eb63 0301 	sbc.w	r3, r3, r1
 80038a0:	f04f 0000 	mov.w	r0, #0
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	00d9      	lsls	r1, r3, #3
 80038aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ae:	00d0      	lsls	r0, r2, #3
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	eb12 0208 	adds.w	r2, r2, r8
 80038b8:	eb43 0309 	adc.w	r3, r3, r9
 80038bc:	f04f 0000 	mov.w	r0, #0
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	0259      	lsls	r1, r3, #9
 80038c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038ca:	0250      	lsls	r0, r2, #9
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	f7fd f984 	bl	8000be8 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e04a      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ea:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	099b      	lsrs	r3, r3, #6
 80038f0:	461a      	mov	r2, r3
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	ea02 0400 	and.w	r4, r2, r0
 8003902:	ea03 0501 	and.w	r5, r3, r1
 8003906:	4620      	mov	r0, r4
 8003908:	4629      	mov	r1, r5
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	014b      	lsls	r3, r1, #5
 8003914:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003918:	0142      	lsls	r2, r0, #5
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	1b00      	subs	r0, r0, r4
 8003920:	eb61 0105 	sbc.w	r1, r1, r5
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	018b      	lsls	r3, r1, #6
 800392e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003932:	0182      	lsls	r2, r0, #6
 8003934:	1a12      	subs	r2, r2, r0
 8003936:	eb63 0301 	sbc.w	r3, r3, r1
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	00d9      	lsls	r1, r3, #3
 8003944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003948:	00d0      	lsls	r0, r2, #3
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	1912      	adds	r2, r2, r4
 8003950:	eb45 0303 	adc.w	r3, r5, r3
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	0299      	lsls	r1, r3, #10
 800395e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003962:	0290      	lsls	r0, r2, #10
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	461a      	mov	r2, r3
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	f7fd f938 	bl	8000be8 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	3301      	adds	r3, #1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	60bb      	str	r3, [r7, #8]
      break;
 800399a:	e002      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800399e:	60bb      	str	r3, [r7, #8]
      break;
 80039a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a2:	68bb      	ldr	r3, [r7, #8]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800
 80039b4:	00f42400 	.word	0x00f42400
 80039b8:	007a1200 	.word	0x007a1200

080039bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000000 	.word	0x20000000

080039d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039d8:	f7ff fff0 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0a9b      	lsrs	r3, r3, #10
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08008174 	.word	0x08008174

080039fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a00:	f7ff ffdc 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0b5b      	lsrs	r3, r3, #13
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4903      	ldr	r1, [pc, #12]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	08008174 	.word	0x08008174

08003a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e049      	b.n	8003aca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd ffa6 	bl	800199c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f000 f9f6 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e054      	b.n	8003b96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d01d      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	; (8003bac <HAL_TIM_Base_Start_IT+0xd8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x80>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <HAL_TIM_Base_Start_IT+0xe8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d115      	bne.n	8003b80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xec>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b06      	cmp	r3, #6
 8003b64:	d015      	beq.n	8003b92 <HAL_TIM_Base_Start_IT+0xbe>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6c:	d011      	beq.n	8003b92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7e:	e008      	b.n	8003b92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e000      	b.n	8003b94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40001800 	.word	0x40001800
 8003bc0:	00010007 	.word	0x00010007

08003bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d122      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d11b      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0202 	mvn.w	r2, #2
 8003bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f905 	bl	8003e16 <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e005      	b.n	8003c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8f7 	bl	8003e02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f908 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d122      	bne.n	8003c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d11b      	bne.n	8003c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0204 	mvn.w	r2, #4
 8003c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8db 	bl	8003e16 <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8cd 	bl	8003e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f8de 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d122      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0208 	mvn.w	r2, #8
 8003c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f8b1 	bl	8003e16 <HAL_TIM_IC_CaptureCallback>
 8003cb4:	e005      	b.n	8003cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f8a3 	bl	8003e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8b4 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d122      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d11b      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0210 	mvn.w	r2, #16
 8003cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f887 	bl	8003e16 <HAL_TIM_IC_CaptureCallback>
 8003d08:	e005      	b.n	8003d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f879 	bl	8003e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f88a 	bl	8003e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d10e      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0201 	mvn.w	r2, #1
 8003d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fcb6 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d10e      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d107      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f91a 	bl	8003fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d82:	d10e      	bne.n	8003da2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b80      	cmp	r3, #128	; 0x80
 8003d90:	d107      	bne.n	8003da2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f90d 	bl	8003fbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d10e      	bne.n	8003dce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d107      	bne.n	8003dce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f838 	bl	8003e3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d10e      	bne.n	8003dfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d107      	bne.n	8003dfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f06f 0220 	mvn.w	r2, #32
 8003df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f8cd 	bl	8003f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a40      	ldr	r2, [pc, #256]	; (8003f68 <TIM_Base_SetConfig+0x114>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d013      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d00f      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3d      	ldr	r2, [pc, #244]	; (8003f6c <TIM_Base_SetConfig+0x118>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00b      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3c      	ldr	r2, [pc, #240]	; (8003f70 <TIM_Base_SetConfig+0x11c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3b      	ldr	r2, [pc, #236]	; (8003f74 <TIM_Base_SetConfig+0x120>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <TIM_Base_SetConfig+0x124>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d108      	bne.n	8003ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2f      	ldr	r2, [pc, #188]	; (8003f68 <TIM_Base_SetConfig+0x114>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d02b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d027      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <TIM_Base_SetConfig+0x118>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d023      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2b      	ldr	r2, [pc, #172]	; (8003f70 <TIM_Base_SetConfig+0x11c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01f      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <TIM_Base_SetConfig+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <TIM_Base_SetConfig+0x124>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d017      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a28      	ldr	r2, [pc, #160]	; (8003f7c <TIM_Base_SetConfig+0x128>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <TIM_Base_SetConfig+0x12c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a26      	ldr	r2, [pc, #152]	; (8003f84 <TIM_Base_SetConfig+0x130>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a25      	ldr	r2, [pc, #148]	; (8003f88 <TIM_Base_SetConfig+0x134>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a24      	ldr	r2, [pc, #144]	; (8003f8c <TIM_Base_SetConfig+0x138>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <TIM_Base_SetConfig+0x13c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d108      	bne.n	8003f18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <TIM_Base_SetConfig+0x114>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_Base_SetConfig+0xf8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <TIM_Base_SetConfig+0x124>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d103      	bne.n	8003f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	615a      	str	r2, [r3, #20]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40014400 	.word	0x40014400
 8003f84:	40014800 	.word	0x40014800
 8003f88:	40001800 	.word	0x40001800
 8003f8c:	40001c00 	.word	0x40001c00
 8003f90:	40002000 	.word	0x40002000

08003f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e040      	b.n	8004064 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fc56 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fb96 	bl	8004740 <UART_SetConfig>
 8004014:	4603      	mov	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e022      	b.n	8004064 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fdec 	bl	8004c04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fe73 	bl	8004d48 <UART_CheckIdleState>
 8004062:	4603      	mov	r3, r0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004080:	2b20      	cmp	r3, #32
 8004082:	f040 8081 	bne.w	8004188 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_UART_Transmit+0x26>
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e079      	b.n	800418a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Transmit+0x38>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e072      	b.n	800418a <HAL_UART_Transmit+0x11e>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2221      	movs	r2, #33	; 0x21
 80040b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ba:	f7fd fe0f 	bl	8001cdc <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d8:	d108      	bne.n	80040ec <HAL_UART_Transmit+0x80>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e003      	b.n	80040f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040fc:	e02c      	b.n	8004158 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	2180      	movs	r1, #128	; 0x80
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fe50 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e038      	b.n	800418a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	3302      	adds	r3, #2
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	e007      	b.n	8004146 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	781a      	ldrb	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	3301      	adds	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1cc      	bne.n	80040fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2200      	movs	r2, #0
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fe1d 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e005      	b.n	800418a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b0ba      	sub	sp, #232	; 0xe8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041be:	f640 030f 	movw	r3, #2063	; 0x80f
 80041c2:	4013      	ands	r3, r2
 80041c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d115      	bne.n	80041fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00f      	beq.n	80041fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 828f 	beq.w	8004710 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	4798      	blx	r3
      }
      return;
 80041fa:	e289      	b.n	8004710 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8117 	beq.w	8004434 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004216:	4b85      	ldr	r3, [pc, #532]	; (800442c <HAL_UART_IRQHandler+0x298>)
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 810a 	beq.w	8004434 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d011      	beq.n	8004250 <HAL_UART_IRQHandler+0xbc>
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2201      	movs	r2, #1
 800423e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004246:	f043 0201 	orr.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d011      	beq.n	8004280 <HAL_UART_IRQHandler+0xec>
 800425c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2202      	movs	r2, #2
 800426e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d011      	beq.n	80042b0 <HAL_UART_IRQHandler+0x11c>
 800428c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2204      	movs	r2, #4
 800429e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a6:	f043 0202 	orr.w	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d017      	beq.n	80042ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00b      	beq.n	80042ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2208      	movs	r2, #8
 80042da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e2:	f043 0208 	orr.w	r2, r3, #8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d012      	beq.n	800431e <HAL_UART_IRQHandler+0x18a>
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 81f5 	beq.w	8004714 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800432a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d005      	beq.n	8004376 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800436a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800436e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004372:	2b00      	cmp	r3, #0
 8004374:	d04f      	beq.n	8004416 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fddd 	bl	8004f36 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d141      	bne.n	800440e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3308      	adds	r3, #8
 8004390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3308      	adds	r3, #8
 80043b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1d9      	bne.n	800438a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d013      	beq.n	8004406 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a13      	ldr	r2, [pc, #76]	; (8004430 <HAL_UART_IRQHandler+0x29c>)
 80043e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fc67 	bl	8002cbe <HAL_DMA_Abort_IT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004400:	4610      	mov	r0, r2
 8004402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	e00f      	b.n	8004426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd f804 	bl	8001414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	e00b      	b.n	8004426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd f800 	bl	8001414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	e007      	b.n	8004426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc fffc 	bl	8001414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004424:	e176      	b.n	8004714 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004426:	bf00      	nop
    return;
 8004428:	e174      	b.n	8004714 <HAL_UART_IRQHandler+0x580>
 800442a:	bf00      	nop
 800442c:	04000120 	.word	0x04000120
 8004430:	08004ffd 	.word	0x08004ffd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004438:	2b01      	cmp	r3, #1
 800443a:	f040 8144 	bne.w	80046c6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 813d 	beq.w	80046c6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8136 	beq.w	80046c6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2210      	movs	r2, #16
 8004460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	f040 80b2 	bne.w	80045d6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800447e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8148 	beq.w	8004718 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800448e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004492:	429a      	cmp	r2, r3
 8004494:	f080 8140 	bcs.w	8004718 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800449e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ac:	f000 8085 	beq.w	80045ba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1da      	bne.n	80044b0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800450a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800451e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004522:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004526:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e1      	bne.n	80044fa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800455a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800455c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004560:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e3      	bne.n	8004536 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	f023 0310 	bic.w	r3, r3, #16
 800458e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800459c:	65bb      	str	r3, [r7, #88]	; 0x58
 800459e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e4      	bne.n	800457a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe fb12 	bl	8002bde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8aa 	bl	8004728 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045d4:	e0a0      	b.n	8004718 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8092 	beq.w	800471c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80045f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 808d 	beq.w	800471c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004612:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004624:	647b      	str	r3, [r7, #68]	; 0x44
 8004626:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800462a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e4      	bne.n	8004602 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3308      	adds	r3, #8
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	623b      	str	r3, [r7, #32]
   return(result);
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800465c:	633a      	str	r2, [r7, #48]	; 0x30
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e3      	bne.n	8004638 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0310 	bic.w	r3, r3, #16
 8004696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	617b      	str	r3, [r7, #20]
   return(result);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e4      	bne.n	8004682 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f832 	bl	8004728 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c4:	e02a      	b.n	800471c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01c      	beq.n	8004720 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
    }
    return;
 80046ee:	e017      	b.n	8004720 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d012      	beq.n	8004722 <HAL_UART_IRQHandler+0x58e>
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00c      	beq.n	8004722 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fc8d 	bl	8005028 <UART_EndTransmit_IT>
    return;
 800470e:	e008      	b.n	8004722 <HAL_UART_IRQHandler+0x58e>
      return;
 8004710:	bf00      	nop
 8004712:	e006      	b.n	8004722 <HAL_UART_IRQHandler+0x58e>
    return;
 8004714:	bf00      	nop
 8004716:	e004      	b.n	8004722 <HAL_UART_IRQHandler+0x58e>
      return;
 8004718:	bf00      	nop
 800471a:	e002      	b.n	8004722 <HAL_UART_IRQHandler+0x58e>
      return;
 800471c:	bf00      	nop
 800471e:	e000      	b.n	8004722 <HAL_UART_IRQHandler+0x58e>
    return;
 8004720:	bf00      	nop
  }

}
 8004722:	37e8      	adds	r7, #232	; 0xe8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4ba7      	ldr	r3, [pc, #668]	; (8004a08 <UART_SetConfig+0x2c8>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	6979      	ldr	r1, [r7, #20]
 8004774:	430b      	orrs	r3, r1
 8004776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a95      	ldr	r2, [pc, #596]	; (8004a0c <UART_SetConfig+0x2cc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d120      	bne.n	80047fe <UART_SetConfig+0xbe>
 80047bc:	4b94      	ldr	r3, [pc, #592]	; (8004a10 <UART_SetConfig+0x2d0>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d816      	bhi.n	80047f8 <UART_SetConfig+0xb8>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x90>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047e1 	.word	0x080047e1
 80047d4:	080047ed 	.word	0x080047ed
 80047d8:	080047e7 	.word	0x080047e7
 80047dc:	080047f3 	.word	0x080047f3
 80047e0:	2301      	movs	r3, #1
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e14f      	b.n	8004a86 <UART_SetConfig+0x346>
 80047e6:	2302      	movs	r3, #2
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e14c      	b.n	8004a86 <UART_SetConfig+0x346>
 80047ec:	2304      	movs	r3, #4
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e149      	b.n	8004a86 <UART_SetConfig+0x346>
 80047f2:	2308      	movs	r3, #8
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e146      	b.n	8004a86 <UART_SetConfig+0x346>
 80047f8:	2310      	movs	r3, #16
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e143      	b.n	8004a86 <UART_SetConfig+0x346>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a84      	ldr	r2, [pc, #528]	; (8004a14 <UART_SetConfig+0x2d4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d132      	bne.n	800486e <UART_SetConfig+0x12e>
 8004808:	4b81      	ldr	r3, [pc, #516]	; (8004a10 <UART_SetConfig+0x2d0>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d828      	bhi.n	8004868 <UART_SetConfig+0x128>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0xdc>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004851 	.word	0x08004851
 8004820:	08004869 	.word	0x08004869
 8004824:	08004869 	.word	0x08004869
 8004828:	08004869 	.word	0x08004869
 800482c:	0800485d 	.word	0x0800485d
 8004830:	08004869 	.word	0x08004869
 8004834:	08004869 	.word	0x08004869
 8004838:	08004869 	.word	0x08004869
 800483c:	08004857 	.word	0x08004857
 8004840:	08004869 	.word	0x08004869
 8004844:	08004869 	.word	0x08004869
 8004848:	08004869 	.word	0x08004869
 800484c:	08004863 	.word	0x08004863
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e117      	b.n	8004a86 <UART_SetConfig+0x346>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e114      	b.n	8004a86 <UART_SetConfig+0x346>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e111      	b.n	8004a86 <UART_SetConfig+0x346>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e10e      	b.n	8004a86 <UART_SetConfig+0x346>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e10b      	b.n	8004a86 <UART_SetConfig+0x346>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a69      	ldr	r2, [pc, #420]	; (8004a18 <UART_SetConfig+0x2d8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d120      	bne.n	80048ba <UART_SetConfig+0x17a>
 8004878:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <UART_SetConfig+0x2d0>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004882:	2b30      	cmp	r3, #48	; 0x30
 8004884:	d013      	beq.n	80048ae <UART_SetConfig+0x16e>
 8004886:	2b30      	cmp	r3, #48	; 0x30
 8004888:	d814      	bhi.n	80048b4 <UART_SetConfig+0x174>
 800488a:	2b20      	cmp	r3, #32
 800488c:	d009      	beq.n	80048a2 <UART_SetConfig+0x162>
 800488e:	2b20      	cmp	r3, #32
 8004890:	d810      	bhi.n	80048b4 <UART_SetConfig+0x174>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <UART_SetConfig+0x15c>
 8004896:	2b10      	cmp	r3, #16
 8004898:	d006      	beq.n	80048a8 <UART_SetConfig+0x168>
 800489a:	e00b      	b.n	80048b4 <UART_SetConfig+0x174>
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0f1      	b.n	8004a86 <UART_SetConfig+0x346>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e0ee      	b.n	8004a86 <UART_SetConfig+0x346>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0eb      	b.n	8004a86 <UART_SetConfig+0x346>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0e8      	b.n	8004a86 <UART_SetConfig+0x346>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0e5      	b.n	8004a86 <UART_SetConfig+0x346>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a57      	ldr	r2, [pc, #348]	; (8004a1c <UART_SetConfig+0x2dc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d120      	bne.n	8004906 <UART_SetConfig+0x1c6>
 80048c4:	4b52      	ldr	r3, [pc, #328]	; (8004a10 <UART_SetConfig+0x2d0>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048ce:	2bc0      	cmp	r3, #192	; 0xc0
 80048d0:	d013      	beq.n	80048fa <UART_SetConfig+0x1ba>
 80048d2:	2bc0      	cmp	r3, #192	; 0xc0
 80048d4:	d814      	bhi.n	8004900 <UART_SetConfig+0x1c0>
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d009      	beq.n	80048ee <UART_SetConfig+0x1ae>
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d810      	bhi.n	8004900 <UART_SetConfig+0x1c0>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <UART_SetConfig+0x1a8>
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d006      	beq.n	80048f4 <UART_SetConfig+0x1b4>
 80048e6:	e00b      	b.n	8004900 <UART_SetConfig+0x1c0>
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e0cb      	b.n	8004a86 <UART_SetConfig+0x346>
 80048ee:	2302      	movs	r3, #2
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e0c8      	b.n	8004a86 <UART_SetConfig+0x346>
 80048f4:	2304      	movs	r3, #4
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e0c5      	b.n	8004a86 <UART_SetConfig+0x346>
 80048fa:	2308      	movs	r3, #8
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e0c2      	b.n	8004a86 <UART_SetConfig+0x346>
 8004900:	2310      	movs	r3, #16
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e0bf      	b.n	8004a86 <UART_SetConfig+0x346>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a45      	ldr	r2, [pc, #276]	; (8004a20 <UART_SetConfig+0x2e0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d125      	bne.n	800495c <UART_SetConfig+0x21c>
 8004910:	4b3f      	ldr	r3, [pc, #252]	; (8004a10 <UART_SetConfig+0x2d0>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491e:	d017      	beq.n	8004950 <UART_SetConfig+0x210>
 8004920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004924:	d817      	bhi.n	8004956 <UART_SetConfig+0x216>
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d00b      	beq.n	8004944 <UART_SetConfig+0x204>
 800492c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004930:	d811      	bhi.n	8004956 <UART_SetConfig+0x216>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <UART_SetConfig+0x1fe>
 8004936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493a:	d006      	beq.n	800494a <UART_SetConfig+0x20a>
 800493c:	e00b      	b.n	8004956 <UART_SetConfig+0x216>
 800493e:	2300      	movs	r3, #0
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e0a0      	b.n	8004a86 <UART_SetConfig+0x346>
 8004944:	2302      	movs	r3, #2
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e09d      	b.n	8004a86 <UART_SetConfig+0x346>
 800494a:	2304      	movs	r3, #4
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e09a      	b.n	8004a86 <UART_SetConfig+0x346>
 8004950:	2308      	movs	r3, #8
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e097      	b.n	8004a86 <UART_SetConfig+0x346>
 8004956:	2310      	movs	r3, #16
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e094      	b.n	8004a86 <UART_SetConfig+0x346>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a30      	ldr	r2, [pc, #192]	; (8004a24 <UART_SetConfig+0x2e4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d125      	bne.n	80049b2 <UART_SetConfig+0x272>
 8004966:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <UART_SetConfig+0x2d0>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004974:	d017      	beq.n	80049a6 <UART_SetConfig+0x266>
 8004976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800497a:	d817      	bhi.n	80049ac <UART_SetConfig+0x26c>
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004980:	d00b      	beq.n	800499a <UART_SetConfig+0x25a>
 8004982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004986:	d811      	bhi.n	80049ac <UART_SetConfig+0x26c>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <UART_SetConfig+0x254>
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004990:	d006      	beq.n	80049a0 <UART_SetConfig+0x260>
 8004992:	e00b      	b.n	80049ac <UART_SetConfig+0x26c>
 8004994:	2301      	movs	r3, #1
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e075      	b.n	8004a86 <UART_SetConfig+0x346>
 800499a:	2302      	movs	r3, #2
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e072      	b.n	8004a86 <UART_SetConfig+0x346>
 80049a0:	2304      	movs	r3, #4
 80049a2:	77fb      	strb	r3, [r7, #31]
 80049a4:	e06f      	b.n	8004a86 <UART_SetConfig+0x346>
 80049a6:	2308      	movs	r3, #8
 80049a8:	77fb      	strb	r3, [r7, #31]
 80049aa:	e06c      	b.n	8004a86 <UART_SetConfig+0x346>
 80049ac:	2310      	movs	r3, #16
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e069      	b.n	8004a86 <UART_SetConfig+0x346>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1c      	ldr	r2, [pc, #112]	; (8004a28 <UART_SetConfig+0x2e8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d137      	bne.n	8004a2c <UART_SetConfig+0x2ec>
 80049bc:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <UART_SetConfig+0x2d0>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049ca:	d017      	beq.n	80049fc <UART_SetConfig+0x2bc>
 80049cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049d0:	d817      	bhi.n	8004a02 <UART_SetConfig+0x2c2>
 80049d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d6:	d00b      	beq.n	80049f0 <UART_SetConfig+0x2b0>
 80049d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049dc:	d811      	bhi.n	8004a02 <UART_SetConfig+0x2c2>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <UART_SetConfig+0x2aa>
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d006      	beq.n	80049f6 <UART_SetConfig+0x2b6>
 80049e8:	e00b      	b.n	8004a02 <UART_SetConfig+0x2c2>
 80049ea:	2300      	movs	r3, #0
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e04a      	b.n	8004a86 <UART_SetConfig+0x346>
 80049f0:	2302      	movs	r3, #2
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e047      	b.n	8004a86 <UART_SetConfig+0x346>
 80049f6:	2304      	movs	r3, #4
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e044      	b.n	8004a86 <UART_SetConfig+0x346>
 80049fc:	2308      	movs	r3, #8
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e041      	b.n	8004a86 <UART_SetConfig+0x346>
 8004a02:	2310      	movs	r3, #16
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e03e      	b.n	8004a86 <UART_SetConfig+0x346>
 8004a08:	efff69f3 	.word	0xefff69f3
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40004400 	.word	0x40004400
 8004a18:	40004800 	.word	0x40004800
 8004a1c:	40004c00 	.word	0x40004c00
 8004a20:	40005000 	.word	0x40005000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	40007800 	.word	0x40007800
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a71      	ldr	r2, [pc, #452]	; (8004bf8 <UART_SetConfig+0x4b8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d125      	bne.n	8004a82 <UART_SetConfig+0x342>
 8004a36:	4b71      	ldr	r3, [pc, #452]	; (8004bfc <UART_SetConfig+0x4bc>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a44:	d017      	beq.n	8004a76 <UART_SetConfig+0x336>
 8004a46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a4a:	d817      	bhi.n	8004a7c <UART_SetConfig+0x33c>
 8004a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a50:	d00b      	beq.n	8004a6a <UART_SetConfig+0x32a>
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a56:	d811      	bhi.n	8004a7c <UART_SetConfig+0x33c>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <UART_SetConfig+0x324>
 8004a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a60:	d006      	beq.n	8004a70 <UART_SetConfig+0x330>
 8004a62:	e00b      	b.n	8004a7c <UART_SetConfig+0x33c>
 8004a64:	2300      	movs	r3, #0
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e00d      	b.n	8004a86 <UART_SetConfig+0x346>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e00a      	b.n	8004a86 <UART_SetConfig+0x346>
 8004a70:	2304      	movs	r3, #4
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e007      	b.n	8004a86 <UART_SetConfig+0x346>
 8004a76:	2308      	movs	r3, #8
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e004      	b.n	8004a86 <UART_SetConfig+0x346>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e001      	b.n	8004a86 <UART_SetConfig+0x346>
 8004a82:	2310      	movs	r3, #16
 8004a84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8e:	d15a      	bne.n	8004b46 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004a90:	7ffb      	ldrb	r3, [r7, #31]
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d827      	bhi.n	8004ae6 <UART_SetConfig+0x3a6>
 8004a96:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <UART_SetConfig+0x35c>)
 8004a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	08004ae7 	.word	0x08004ae7
 8004aac:	08004ad7 	.word	0x08004ad7
 8004ab0:	08004ae7 	.word	0x08004ae7
 8004ab4:	08004ae7 	.word	0x08004ae7
 8004ab8:	08004ae7 	.word	0x08004ae7
 8004abc:	08004adf 	.word	0x08004adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f7fe ff88 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8004ac4:	61b8      	str	r0, [r7, #24]
        break;
 8004ac6:	e013      	b.n	8004af0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac8:	f7fe ff98 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8004acc:	61b8      	str	r0, [r7, #24]
        break;
 8004ace:	e00f      	b.n	8004af0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad0:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <UART_SetConfig+0x4c0>)
 8004ad2:	61bb      	str	r3, [r7, #24]
        break;
 8004ad4:	e00c      	b.n	8004af0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad6:	f7fe fe8f 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 8004ada:	61b8      	str	r0, [r7, #24]
        break;
 8004adc:	e008      	b.n	8004af0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae2:	61bb      	str	r3, [r7, #24]
        break;
 8004ae4:	e004      	b.n	8004af0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	77bb      	strb	r3, [r7, #30]
        break;
 8004aee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d074      	beq.n	8004be0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	005a      	lsls	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b0f      	cmp	r3, #15
 8004b10:	d916      	bls.n	8004b40 <UART_SetConfig+0x400>
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d212      	bcs.n	8004b40 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f023 030f 	bic.w	r3, r3, #15
 8004b22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	89fb      	ldrh	r3, [r7, #14]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	89fa      	ldrh	r2, [r7, #14]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e04f      	b.n	8004be0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	77bb      	strb	r3, [r7, #30]
 8004b44:	e04c      	b.n	8004be0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b46:	7ffb      	ldrb	r3, [r7, #31]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d828      	bhi.n	8004b9e <UART_SetConfig+0x45e>
 8004b4c:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0x414>)
 8004b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	08004b9f 	.word	0x08004b9f
 8004b64:	08004b8f 	.word	0x08004b8f
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	08004b97 	.word	0x08004b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b78:	f7fe ff2c 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8004b7c:	61b8      	str	r0, [r7, #24]
        break;
 8004b7e:	e013      	b.n	8004ba8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe ff3c 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8004b84:	61b8      	str	r0, [r7, #24]
        break;
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <UART_SetConfig+0x4c0>)
 8004b8a:	61bb      	str	r3, [r7, #24]
        break;
 8004b8c:	e00c      	b.n	8004ba8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7fe fe33 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 8004b92:	61b8      	str	r0, [r7, #24]
        break;
 8004b94:	e008      	b.n	8004ba8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9a:	61bb      	str	r3, [r7, #24]
        break;
 8004b9c:	e004      	b.n	8004ba8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ba6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d018      	beq.n	8004be0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	085a      	lsrs	r2, r3, #1
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d909      	bls.n	8004bdc <UART_SetConfig+0x49c>
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bce:	d205      	bcs.n	8004bdc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	e001      	b.n	8004be0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bec:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40007c00 	.word	0x40007c00
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	00f42400 	.word	0x00f42400

08004c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d02:	d10a      	bne.n	8004d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d58:	f7fc ffc0 	bl	8001cdc <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d10e      	bne.n	8004d8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f817 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e00d      	b.n	8004da6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b09c      	sub	sp, #112	; 0x70
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbe:	e0a5      	b.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	f000 80a1 	beq.w	8004f0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dca:	f7fc ff87 	bl	8001cdc <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d13e      	bne.n	8004e5e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004df4:	667b      	str	r3, [r7, #100]	; 0x64
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e6      	bne.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e32:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e067      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d04f      	beq.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7a:	d147      	bne.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e6      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ed8:	623a      	str	r2, [r7, #32]
 8004eda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	69f9      	ldr	r1, [r7, #28]
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e5      	bne.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e010      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	f43f af4a 	beq.w	8004dc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3770      	adds	r7, #112	; 0x70
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b095      	sub	sp, #84	; 0x54
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e6      	bne.n	8004f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d118      	bne.n	8004fde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f023 0310 	bic.w	r3, r3, #16
 8004fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ff0:	bf00      	nop
 8004ff2:	3754      	adds	r7, #84	; 0x54
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7fc f9fa 	bl	8001414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	e853 3f00 	ldrex	r3, [r3]
 800503c:	60bb      	str	r3, [r7, #8]
   return(result);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6979      	ldr	r1, [r7, #20]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	613b      	str	r3, [r7, #16]
   return(result);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e6      	bne.n	8005030 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc f9bc 	bl	80013ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005074:	bf00      	nop
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <__errno>:
 800507c:	4b01      	ldr	r3, [pc, #4]	; (8005084 <__errno+0x8>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000000c 	.word	0x2000000c

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	4d0d      	ldr	r5, [pc, #52]	; (80050c0 <__libc_init_array+0x38>)
 800508c:	4c0d      	ldr	r4, [pc, #52]	; (80050c4 <__libc_init_array+0x3c>)
 800508e:	1b64      	subs	r4, r4, r5
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	2600      	movs	r6, #0
 8005094:	42a6      	cmp	r6, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	4d0b      	ldr	r5, [pc, #44]	; (80050c8 <__libc_init_array+0x40>)
 800509a:	4c0c      	ldr	r4, [pc, #48]	; (80050cc <__libc_init_array+0x44>)
 800509c:	f002 ff2a 	bl	8007ef4 <_init>
 80050a0:	1b64      	subs	r4, r4, r5
 80050a2:	10a4      	asrs	r4, r4, #2
 80050a4:	2600      	movs	r6, #0
 80050a6:	42a6      	cmp	r6, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b0:	4798      	blx	r3
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ba:	4798      	blx	r3
 80050bc:	3601      	adds	r6, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08008564 	.word	0x08008564
 80050c4:	08008564 	.word	0x08008564
 80050c8:	08008564 	.word	0x08008564
 80050cc:	08008568 	.word	0x08008568

080050d0 <memset>:
 80050d0:	4402      	add	r2, r0
 80050d2:	4603      	mov	r3, r0
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d100      	bne.n	80050da <memset+0xa>
 80050d8:	4770      	bx	lr
 80050da:	f803 1b01 	strb.w	r1, [r3], #1
 80050de:	e7f9      	b.n	80050d4 <memset+0x4>

080050e0 <__cvt>:
 80050e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	ec55 4b10 	vmov	r4, r5, d0
 80050e8:	2d00      	cmp	r5, #0
 80050ea:	460e      	mov	r6, r1
 80050ec:	4619      	mov	r1, r3
 80050ee:	462b      	mov	r3, r5
 80050f0:	bfbb      	ittet	lt
 80050f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050f6:	461d      	movlt	r5, r3
 80050f8:	2300      	movge	r3, #0
 80050fa:	232d      	movlt	r3, #45	; 0x2d
 80050fc:	700b      	strb	r3, [r1, #0]
 80050fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005100:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005104:	4691      	mov	r9, r2
 8005106:	f023 0820 	bic.w	r8, r3, #32
 800510a:	bfbc      	itt	lt
 800510c:	4622      	movlt	r2, r4
 800510e:	4614      	movlt	r4, r2
 8005110:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005114:	d005      	beq.n	8005122 <__cvt+0x42>
 8005116:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800511a:	d100      	bne.n	800511e <__cvt+0x3e>
 800511c:	3601      	adds	r6, #1
 800511e:	2102      	movs	r1, #2
 8005120:	e000      	b.n	8005124 <__cvt+0x44>
 8005122:	2103      	movs	r1, #3
 8005124:	ab03      	add	r3, sp, #12
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	ab02      	add	r3, sp, #8
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	ec45 4b10 	vmov	d0, r4, r5
 8005130:	4653      	mov	r3, sl
 8005132:	4632      	mov	r2, r6
 8005134:	f000 fe20 	bl	8005d78 <_dtoa_r>
 8005138:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800513c:	4607      	mov	r7, r0
 800513e:	d102      	bne.n	8005146 <__cvt+0x66>
 8005140:	f019 0f01 	tst.w	r9, #1
 8005144:	d022      	beq.n	800518c <__cvt+0xac>
 8005146:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800514a:	eb07 0906 	add.w	r9, r7, r6
 800514e:	d110      	bne.n	8005172 <__cvt+0x92>
 8005150:	783b      	ldrb	r3, [r7, #0]
 8005152:	2b30      	cmp	r3, #48	; 0x30
 8005154:	d10a      	bne.n	800516c <__cvt+0x8c>
 8005156:	2200      	movs	r2, #0
 8005158:	2300      	movs	r3, #0
 800515a:	4620      	mov	r0, r4
 800515c:	4629      	mov	r1, r5
 800515e:	f7fb fcd3 	bl	8000b08 <__aeabi_dcmpeq>
 8005162:	b918      	cbnz	r0, 800516c <__cvt+0x8c>
 8005164:	f1c6 0601 	rsb	r6, r6, #1
 8005168:	f8ca 6000 	str.w	r6, [sl]
 800516c:	f8da 3000 	ldr.w	r3, [sl]
 8005170:	4499      	add	r9, r3
 8005172:	2200      	movs	r2, #0
 8005174:	2300      	movs	r3, #0
 8005176:	4620      	mov	r0, r4
 8005178:	4629      	mov	r1, r5
 800517a:	f7fb fcc5 	bl	8000b08 <__aeabi_dcmpeq>
 800517e:	b108      	cbz	r0, 8005184 <__cvt+0xa4>
 8005180:	f8cd 900c 	str.w	r9, [sp, #12]
 8005184:	2230      	movs	r2, #48	; 0x30
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	454b      	cmp	r3, r9
 800518a:	d307      	bcc.n	800519c <__cvt+0xbc>
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005190:	1bdb      	subs	r3, r3, r7
 8005192:	4638      	mov	r0, r7
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	b004      	add	sp, #16
 8005198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519c:	1c59      	adds	r1, r3, #1
 800519e:	9103      	str	r1, [sp, #12]
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e7f0      	b.n	8005186 <__cvt+0xa6>

080051a4 <__exponent>:
 80051a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051a6:	4603      	mov	r3, r0
 80051a8:	2900      	cmp	r1, #0
 80051aa:	bfb8      	it	lt
 80051ac:	4249      	neglt	r1, r1
 80051ae:	f803 2b02 	strb.w	r2, [r3], #2
 80051b2:	bfb4      	ite	lt
 80051b4:	222d      	movlt	r2, #45	; 0x2d
 80051b6:	222b      	movge	r2, #43	; 0x2b
 80051b8:	2909      	cmp	r1, #9
 80051ba:	7042      	strb	r2, [r0, #1]
 80051bc:	dd2a      	ble.n	8005214 <__exponent+0x70>
 80051be:	f10d 0407 	add.w	r4, sp, #7
 80051c2:	46a4      	mov	ip, r4
 80051c4:	270a      	movs	r7, #10
 80051c6:	46a6      	mov	lr, r4
 80051c8:	460a      	mov	r2, r1
 80051ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80051ce:	fb07 1516 	mls	r5, r7, r6, r1
 80051d2:	3530      	adds	r5, #48	; 0x30
 80051d4:	2a63      	cmp	r2, #99	; 0x63
 80051d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80051da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051de:	4631      	mov	r1, r6
 80051e0:	dcf1      	bgt.n	80051c6 <__exponent+0x22>
 80051e2:	3130      	adds	r1, #48	; 0x30
 80051e4:	f1ae 0502 	sub.w	r5, lr, #2
 80051e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051ec:	1c44      	adds	r4, r0, #1
 80051ee:	4629      	mov	r1, r5
 80051f0:	4561      	cmp	r1, ip
 80051f2:	d30a      	bcc.n	800520a <__exponent+0x66>
 80051f4:	f10d 0209 	add.w	r2, sp, #9
 80051f8:	eba2 020e 	sub.w	r2, r2, lr
 80051fc:	4565      	cmp	r5, ip
 80051fe:	bf88      	it	hi
 8005200:	2200      	movhi	r2, #0
 8005202:	4413      	add	r3, r2
 8005204:	1a18      	subs	r0, r3, r0
 8005206:	b003      	add	sp, #12
 8005208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800520a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800520e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005212:	e7ed      	b.n	80051f0 <__exponent+0x4c>
 8005214:	2330      	movs	r3, #48	; 0x30
 8005216:	3130      	adds	r1, #48	; 0x30
 8005218:	7083      	strb	r3, [r0, #2]
 800521a:	70c1      	strb	r1, [r0, #3]
 800521c:	1d03      	adds	r3, r0, #4
 800521e:	e7f1      	b.n	8005204 <__exponent+0x60>

08005220 <_printf_float>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	ed2d 8b02 	vpush	{d8}
 8005228:	b08d      	sub	sp, #52	; 0x34
 800522a:	460c      	mov	r4, r1
 800522c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005230:	4616      	mov	r6, r2
 8005232:	461f      	mov	r7, r3
 8005234:	4605      	mov	r5, r0
 8005236:	f001 fd43 	bl	8006cc0 <_localeconv_r>
 800523a:	f8d0 a000 	ldr.w	sl, [r0]
 800523e:	4650      	mov	r0, sl
 8005240:	f7fa ffe6 	bl	8000210 <strlen>
 8005244:	2300      	movs	r3, #0
 8005246:	930a      	str	r3, [sp, #40]	; 0x28
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	9305      	str	r3, [sp, #20]
 800524c:	f8d8 3000 	ldr.w	r3, [r8]
 8005250:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005254:	3307      	adds	r3, #7
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	f103 0208 	add.w	r2, r3, #8
 800525e:	f8c8 2000 	str.w	r2, [r8]
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800526a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800526e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	f8cd 8018 	str.w	r8, [sp, #24]
 8005278:	ee08 0a10 	vmov	s16, r0
 800527c:	4b9f      	ldr	r3, [pc, #636]	; (80054fc <_printf_float+0x2dc>)
 800527e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005282:	f04f 32ff 	mov.w	r2, #4294967295
 8005286:	f7fb fc71 	bl	8000b6c <__aeabi_dcmpun>
 800528a:	bb88      	cbnz	r0, 80052f0 <_printf_float+0xd0>
 800528c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005290:	4b9a      	ldr	r3, [pc, #616]	; (80054fc <_printf_float+0x2dc>)
 8005292:	f04f 32ff 	mov.w	r2, #4294967295
 8005296:	f7fb fc4b 	bl	8000b30 <__aeabi_dcmple>
 800529a:	bb48      	cbnz	r0, 80052f0 <_printf_float+0xd0>
 800529c:	2200      	movs	r2, #0
 800529e:	2300      	movs	r3, #0
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fb fc3a 	bl	8000b1c <__aeabi_dcmplt>
 80052a8:	b110      	cbz	r0, 80052b0 <_printf_float+0x90>
 80052aa:	232d      	movs	r3, #45	; 0x2d
 80052ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b0:	4b93      	ldr	r3, [pc, #588]	; (8005500 <_printf_float+0x2e0>)
 80052b2:	4894      	ldr	r0, [pc, #592]	; (8005504 <_printf_float+0x2e4>)
 80052b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80052b8:	bf94      	ite	ls
 80052ba:	4698      	movls	r8, r3
 80052bc:	4680      	movhi	r8, r0
 80052be:	2303      	movs	r3, #3
 80052c0:	6123      	str	r3, [r4, #16]
 80052c2:	9b05      	ldr	r3, [sp, #20]
 80052c4:	f023 0204 	bic.w	r2, r3, #4
 80052c8:	6022      	str	r2, [r4, #0]
 80052ca:	f04f 0900 	mov.w	r9, #0
 80052ce:	9700      	str	r7, [sp, #0]
 80052d0:	4633      	mov	r3, r6
 80052d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80052d4:	4621      	mov	r1, r4
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 f9d8 	bl	800568c <_printf_common>
 80052dc:	3001      	adds	r0, #1
 80052de:	f040 8090 	bne.w	8005402 <_printf_float+0x1e2>
 80052e2:	f04f 30ff 	mov.w	r0, #4294967295
 80052e6:	b00d      	add	sp, #52	; 0x34
 80052e8:	ecbd 8b02 	vpop	{d8}
 80052ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	4640      	mov	r0, r8
 80052f6:	4649      	mov	r1, r9
 80052f8:	f7fb fc38 	bl	8000b6c <__aeabi_dcmpun>
 80052fc:	b140      	cbz	r0, 8005310 <_printf_float+0xf0>
 80052fe:	464b      	mov	r3, r9
 8005300:	2b00      	cmp	r3, #0
 8005302:	bfbc      	itt	lt
 8005304:	232d      	movlt	r3, #45	; 0x2d
 8005306:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800530a:	487f      	ldr	r0, [pc, #508]	; (8005508 <_printf_float+0x2e8>)
 800530c:	4b7f      	ldr	r3, [pc, #508]	; (800550c <_printf_float+0x2ec>)
 800530e:	e7d1      	b.n	80052b4 <_printf_float+0x94>
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005316:	9206      	str	r2, [sp, #24]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	d13f      	bne.n	800539c <_printf_float+0x17c>
 800531c:	2306      	movs	r3, #6
 800531e:	6063      	str	r3, [r4, #4]
 8005320:	9b05      	ldr	r3, [sp, #20]
 8005322:	6861      	ldr	r1, [r4, #4]
 8005324:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005328:	2300      	movs	r3, #0
 800532a:	9303      	str	r3, [sp, #12]
 800532c:	ab0a      	add	r3, sp, #40	; 0x28
 800532e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005332:	ab09      	add	r3, sp, #36	; 0x24
 8005334:	ec49 8b10 	vmov	d0, r8, r9
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	6022      	str	r2, [r4, #0]
 800533c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005340:	4628      	mov	r0, r5
 8005342:	f7ff fecd 	bl	80050e0 <__cvt>
 8005346:	9b06      	ldr	r3, [sp, #24]
 8005348:	9909      	ldr	r1, [sp, #36]	; 0x24
 800534a:	2b47      	cmp	r3, #71	; 0x47
 800534c:	4680      	mov	r8, r0
 800534e:	d108      	bne.n	8005362 <_printf_float+0x142>
 8005350:	1cc8      	adds	r0, r1, #3
 8005352:	db02      	blt.n	800535a <_printf_float+0x13a>
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	4299      	cmp	r1, r3
 8005358:	dd41      	ble.n	80053de <_printf_float+0x1be>
 800535a:	f1ab 0b02 	sub.w	fp, fp, #2
 800535e:	fa5f fb8b 	uxtb.w	fp, fp
 8005362:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005366:	d820      	bhi.n	80053aa <_printf_float+0x18a>
 8005368:	3901      	subs	r1, #1
 800536a:	465a      	mov	r2, fp
 800536c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005370:	9109      	str	r1, [sp, #36]	; 0x24
 8005372:	f7ff ff17 	bl	80051a4 <__exponent>
 8005376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005378:	1813      	adds	r3, r2, r0
 800537a:	2a01      	cmp	r2, #1
 800537c:	4681      	mov	r9, r0
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	dc02      	bgt.n	8005388 <_printf_float+0x168>
 8005382:	6822      	ldr	r2, [r4, #0]
 8005384:	07d2      	lsls	r2, r2, #31
 8005386:	d501      	bpl.n	800538c <_printf_float+0x16c>
 8005388:	3301      	adds	r3, #1
 800538a:	6123      	str	r3, [r4, #16]
 800538c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005390:	2b00      	cmp	r3, #0
 8005392:	d09c      	beq.n	80052ce <_printf_float+0xae>
 8005394:	232d      	movs	r3, #45	; 0x2d
 8005396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800539a:	e798      	b.n	80052ce <_printf_float+0xae>
 800539c:	9a06      	ldr	r2, [sp, #24]
 800539e:	2a47      	cmp	r2, #71	; 0x47
 80053a0:	d1be      	bne.n	8005320 <_printf_float+0x100>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1bc      	bne.n	8005320 <_printf_float+0x100>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e7b9      	b.n	800531e <_printf_float+0xfe>
 80053aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80053ae:	d118      	bne.n	80053e2 <_printf_float+0x1c2>
 80053b0:	2900      	cmp	r1, #0
 80053b2:	6863      	ldr	r3, [r4, #4]
 80053b4:	dd0b      	ble.n	80053ce <_printf_float+0x1ae>
 80053b6:	6121      	str	r1, [r4, #16]
 80053b8:	b913      	cbnz	r3, 80053c0 <_printf_float+0x1a0>
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	07d0      	lsls	r0, r2, #31
 80053be:	d502      	bpl.n	80053c6 <_printf_float+0x1a6>
 80053c0:	3301      	adds	r3, #1
 80053c2:	440b      	add	r3, r1
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80053c8:	f04f 0900 	mov.w	r9, #0
 80053cc:	e7de      	b.n	800538c <_printf_float+0x16c>
 80053ce:	b913      	cbnz	r3, 80053d6 <_printf_float+0x1b6>
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	07d2      	lsls	r2, r2, #31
 80053d4:	d501      	bpl.n	80053da <_printf_float+0x1ba>
 80053d6:	3302      	adds	r3, #2
 80053d8:	e7f4      	b.n	80053c4 <_printf_float+0x1a4>
 80053da:	2301      	movs	r3, #1
 80053dc:	e7f2      	b.n	80053c4 <_printf_float+0x1a4>
 80053de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e4:	4299      	cmp	r1, r3
 80053e6:	db05      	blt.n	80053f4 <_printf_float+0x1d4>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	6121      	str	r1, [r4, #16]
 80053ec:	07d8      	lsls	r0, r3, #31
 80053ee:	d5ea      	bpl.n	80053c6 <_printf_float+0x1a6>
 80053f0:	1c4b      	adds	r3, r1, #1
 80053f2:	e7e7      	b.n	80053c4 <_printf_float+0x1a4>
 80053f4:	2900      	cmp	r1, #0
 80053f6:	bfd4      	ite	le
 80053f8:	f1c1 0202 	rsble	r2, r1, #2
 80053fc:	2201      	movgt	r2, #1
 80053fe:	4413      	add	r3, r2
 8005400:	e7e0      	b.n	80053c4 <_printf_float+0x1a4>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	055a      	lsls	r2, r3, #21
 8005406:	d407      	bmi.n	8005418 <_printf_float+0x1f8>
 8005408:	6923      	ldr	r3, [r4, #16]
 800540a:	4642      	mov	r2, r8
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	d12c      	bne.n	8005470 <_printf_float+0x250>
 8005416:	e764      	b.n	80052e2 <_printf_float+0xc2>
 8005418:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800541c:	f240 80e0 	bls.w	80055e0 <_printf_float+0x3c0>
 8005420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005424:	2200      	movs	r2, #0
 8005426:	2300      	movs	r3, #0
 8005428:	f7fb fb6e 	bl	8000b08 <__aeabi_dcmpeq>
 800542c:	2800      	cmp	r0, #0
 800542e:	d034      	beq.n	800549a <_printf_float+0x27a>
 8005430:	4a37      	ldr	r2, [pc, #220]	; (8005510 <_printf_float+0x2f0>)
 8005432:	2301      	movs	r3, #1
 8005434:	4631      	mov	r1, r6
 8005436:	4628      	mov	r0, r5
 8005438:	47b8      	blx	r7
 800543a:	3001      	adds	r0, #1
 800543c:	f43f af51 	beq.w	80052e2 <_printf_float+0xc2>
 8005440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005444:	429a      	cmp	r2, r3
 8005446:	db02      	blt.n	800544e <_printf_float+0x22e>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	07d8      	lsls	r0, r3, #31
 800544c:	d510      	bpl.n	8005470 <_printf_float+0x250>
 800544e:	ee18 3a10 	vmov	r3, s16
 8005452:	4652      	mov	r2, sl
 8005454:	4631      	mov	r1, r6
 8005456:	4628      	mov	r0, r5
 8005458:	47b8      	blx	r7
 800545a:	3001      	adds	r0, #1
 800545c:	f43f af41 	beq.w	80052e2 <_printf_float+0xc2>
 8005460:	f04f 0800 	mov.w	r8, #0
 8005464:	f104 091a 	add.w	r9, r4, #26
 8005468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546a:	3b01      	subs	r3, #1
 800546c:	4543      	cmp	r3, r8
 800546e:	dc09      	bgt.n	8005484 <_printf_float+0x264>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	079b      	lsls	r3, r3, #30
 8005474:	f100 8105 	bmi.w	8005682 <_printf_float+0x462>
 8005478:	68e0      	ldr	r0, [r4, #12]
 800547a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800547c:	4298      	cmp	r0, r3
 800547e:	bfb8      	it	lt
 8005480:	4618      	movlt	r0, r3
 8005482:	e730      	b.n	80052e6 <_printf_float+0xc6>
 8005484:	2301      	movs	r3, #1
 8005486:	464a      	mov	r2, r9
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	f43f af27 	beq.w	80052e2 <_printf_float+0xc2>
 8005494:	f108 0801 	add.w	r8, r8, #1
 8005498:	e7e6      	b.n	8005468 <_printf_float+0x248>
 800549a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	dc39      	bgt.n	8005514 <_printf_float+0x2f4>
 80054a0:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <_printf_float+0x2f0>)
 80054a2:	2301      	movs	r3, #1
 80054a4:	4631      	mov	r1, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	f43f af19 	beq.w	80052e2 <_printf_float+0xc2>
 80054b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b4:	4313      	orrs	r3, r2
 80054b6:	d102      	bne.n	80054be <_printf_float+0x29e>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	07d9      	lsls	r1, r3, #31
 80054bc:	d5d8      	bpl.n	8005470 <_printf_float+0x250>
 80054be:	ee18 3a10 	vmov	r3, s16
 80054c2:	4652      	mov	r2, sl
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	f43f af09 	beq.w	80052e2 <_printf_float+0xc2>
 80054d0:	f04f 0900 	mov.w	r9, #0
 80054d4:	f104 0a1a 	add.w	sl, r4, #26
 80054d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054da:	425b      	negs	r3, r3
 80054dc:	454b      	cmp	r3, r9
 80054de:	dc01      	bgt.n	80054e4 <_printf_float+0x2c4>
 80054e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e2:	e792      	b.n	800540a <_printf_float+0x1ea>
 80054e4:	2301      	movs	r3, #1
 80054e6:	4652      	mov	r2, sl
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	f43f aef7 	beq.w	80052e2 <_printf_float+0xc2>
 80054f4:	f109 0901 	add.w	r9, r9, #1
 80054f8:	e7ee      	b.n	80054d8 <_printf_float+0x2b8>
 80054fa:	bf00      	nop
 80054fc:	7fefffff 	.word	0x7fefffff
 8005500:	08008180 	.word	0x08008180
 8005504:	08008184 	.word	0x08008184
 8005508:	0800818c 	.word	0x0800818c
 800550c:	08008188 	.word	0x08008188
 8005510:	08008190 	.word	0x08008190
 8005514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005518:	429a      	cmp	r2, r3
 800551a:	bfa8      	it	ge
 800551c:	461a      	movge	r2, r3
 800551e:	2a00      	cmp	r2, #0
 8005520:	4691      	mov	r9, r2
 8005522:	dc37      	bgt.n	8005594 <_printf_float+0x374>
 8005524:	f04f 0b00 	mov.w	fp, #0
 8005528:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800552c:	f104 021a 	add.w	r2, r4, #26
 8005530:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005532:	9305      	str	r3, [sp, #20]
 8005534:	eba3 0309 	sub.w	r3, r3, r9
 8005538:	455b      	cmp	r3, fp
 800553a:	dc33      	bgt.n	80055a4 <_printf_float+0x384>
 800553c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005540:	429a      	cmp	r2, r3
 8005542:	db3b      	blt.n	80055bc <_printf_float+0x39c>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	07da      	lsls	r2, r3, #31
 8005548:	d438      	bmi.n	80055bc <_printf_float+0x39c>
 800554a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800554c:	9b05      	ldr	r3, [sp, #20]
 800554e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	eba2 0901 	sub.w	r9, r2, r1
 8005556:	4599      	cmp	r9, r3
 8005558:	bfa8      	it	ge
 800555a:	4699      	movge	r9, r3
 800555c:	f1b9 0f00 	cmp.w	r9, #0
 8005560:	dc35      	bgt.n	80055ce <_printf_float+0x3ae>
 8005562:	f04f 0800 	mov.w	r8, #0
 8005566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800556a:	f104 0a1a 	add.w	sl, r4, #26
 800556e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	eba3 0309 	sub.w	r3, r3, r9
 8005578:	4543      	cmp	r3, r8
 800557a:	f77f af79 	ble.w	8005470 <_printf_float+0x250>
 800557e:	2301      	movs	r3, #1
 8005580:	4652      	mov	r2, sl
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	f43f aeaa 	beq.w	80052e2 <_printf_float+0xc2>
 800558e:	f108 0801 	add.w	r8, r8, #1
 8005592:	e7ec      	b.n	800556e <_printf_float+0x34e>
 8005594:	4613      	mov	r3, r2
 8005596:	4631      	mov	r1, r6
 8005598:	4642      	mov	r2, r8
 800559a:	4628      	mov	r0, r5
 800559c:	47b8      	blx	r7
 800559e:	3001      	adds	r0, #1
 80055a0:	d1c0      	bne.n	8005524 <_printf_float+0x304>
 80055a2:	e69e      	b.n	80052e2 <_printf_float+0xc2>
 80055a4:	2301      	movs	r3, #1
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	9205      	str	r2, [sp, #20]
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	f43f ae97 	beq.w	80052e2 <_printf_float+0xc2>
 80055b4:	9a05      	ldr	r2, [sp, #20]
 80055b6:	f10b 0b01 	add.w	fp, fp, #1
 80055ba:	e7b9      	b.n	8005530 <_printf_float+0x310>
 80055bc:	ee18 3a10 	vmov	r3, s16
 80055c0:	4652      	mov	r2, sl
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	d1be      	bne.n	800554a <_printf_float+0x32a>
 80055cc:	e689      	b.n	80052e2 <_printf_float+0xc2>
 80055ce:	9a05      	ldr	r2, [sp, #20]
 80055d0:	464b      	mov	r3, r9
 80055d2:	4442      	add	r2, r8
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	d1c1      	bne.n	8005562 <_printf_float+0x342>
 80055de:	e680      	b.n	80052e2 <_printf_float+0xc2>
 80055e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055e2:	2a01      	cmp	r2, #1
 80055e4:	dc01      	bgt.n	80055ea <_printf_float+0x3ca>
 80055e6:	07db      	lsls	r3, r3, #31
 80055e8:	d538      	bpl.n	800565c <_printf_float+0x43c>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4642      	mov	r2, r8
 80055ee:	4631      	mov	r1, r6
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b8      	blx	r7
 80055f4:	3001      	adds	r0, #1
 80055f6:	f43f ae74 	beq.w	80052e2 <_printf_float+0xc2>
 80055fa:	ee18 3a10 	vmov	r3, s16
 80055fe:	4652      	mov	r2, sl
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f ae6b 	beq.w	80052e2 <_printf_float+0xc2>
 800560c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	f7fb fa78 	bl	8000b08 <__aeabi_dcmpeq>
 8005618:	b9d8      	cbnz	r0, 8005652 <_printf_float+0x432>
 800561a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561c:	f108 0201 	add.w	r2, r8, #1
 8005620:	3b01      	subs	r3, #1
 8005622:	4631      	mov	r1, r6
 8005624:	4628      	mov	r0, r5
 8005626:	47b8      	blx	r7
 8005628:	3001      	adds	r0, #1
 800562a:	d10e      	bne.n	800564a <_printf_float+0x42a>
 800562c:	e659      	b.n	80052e2 <_printf_float+0xc2>
 800562e:	2301      	movs	r3, #1
 8005630:	4652      	mov	r2, sl
 8005632:	4631      	mov	r1, r6
 8005634:	4628      	mov	r0, r5
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	f43f ae52 	beq.w	80052e2 <_printf_float+0xc2>
 800563e:	f108 0801 	add.w	r8, r8, #1
 8005642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005644:	3b01      	subs	r3, #1
 8005646:	4543      	cmp	r3, r8
 8005648:	dcf1      	bgt.n	800562e <_printf_float+0x40e>
 800564a:	464b      	mov	r3, r9
 800564c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005650:	e6dc      	b.n	800540c <_printf_float+0x1ec>
 8005652:	f04f 0800 	mov.w	r8, #0
 8005656:	f104 0a1a 	add.w	sl, r4, #26
 800565a:	e7f2      	b.n	8005642 <_printf_float+0x422>
 800565c:	2301      	movs	r3, #1
 800565e:	4642      	mov	r2, r8
 8005660:	e7df      	b.n	8005622 <_printf_float+0x402>
 8005662:	2301      	movs	r3, #1
 8005664:	464a      	mov	r2, r9
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	f43f ae38 	beq.w	80052e2 <_printf_float+0xc2>
 8005672:	f108 0801 	add.w	r8, r8, #1
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800567a:	1a5b      	subs	r3, r3, r1
 800567c:	4543      	cmp	r3, r8
 800567e:	dcf0      	bgt.n	8005662 <_printf_float+0x442>
 8005680:	e6fa      	b.n	8005478 <_printf_float+0x258>
 8005682:	f04f 0800 	mov.w	r8, #0
 8005686:	f104 0919 	add.w	r9, r4, #25
 800568a:	e7f4      	b.n	8005676 <_printf_float+0x456>

0800568c <_printf_common>:
 800568c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005690:	4616      	mov	r6, r2
 8005692:	4699      	mov	r9, r3
 8005694:	688a      	ldr	r2, [r1, #8]
 8005696:	690b      	ldr	r3, [r1, #16]
 8005698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800569c:	4293      	cmp	r3, r2
 800569e:	bfb8      	it	lt
 80056a0:	4613      	movlt	r3, r2
 80056a2:	6033      	str	r3, [r6, #0]
 80056a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056a8:	4607      	mov	r7, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	b10a      	cbz	r2, 80056b2 <_printf_common+0x26>
 80056ae:	3301      	adds	r3, #1
 80056b0:	6033      	str	r3, [r6, #0]
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	0699      	lsls	r1, r3, #26
 80056b6:	bf42      	ittt	mi
 80056b8:	6833      	ldrmi	r3, [r6, #0]
 80056ba:	3302      	addmi	r3, #2
 80056bc:	6033      	strmi	r3, [r6, #0]
 80056be:	6825      	ldr	r5, [r4, #0]
 80056c0:	f015 0506 	ands.w	r5, r5, #6
 80056c4:	d106      	bne.n	80056d4 <_printf_common+0x48>
 80056c6:	f104 0a19 	add.w	sl, r4, #25
 80056ca:	68e3      	ldr	r3, [r4, #12]
 80056cc:	6832      	ldr	r2, [r6, #0]
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	42ab      	cmp	r3, r5
 80056d2:	dc26      	bgt.n	8005722 <_printf_common+0x96>
 80056d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056d8:	1e13      	subs	r3, r2, #0
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	bf18      	it	ne
 80056de:	2301      	movne	r3, #1
 80056e0:	0692      	lsls	r2, r2, #26
 80056e2:	d42b      	bmi.n	800573c <_printf_common+0xb0>
 80056e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056e8:	4649      	mov	r1, r9
 80056ea:	4638      	mov	r0, r7
 80056ec:	47c0      	blx	r8
 80056ee:	3001      	adds	r0, #1
 80056f0:	d01e      	beq.n	8005730 <_printf_common+0xa4>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	68e5      	ldr	r5, [r4, #12]
 80056f6:	6832      	ldr	r2, [r6, #0]
 80056f8:	f003 0306 	and.w	r3, r3, #6
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	bf08      	it	eq
 8005700:	1aad      	subeq	r5, r5, r2
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	6922      	ldr	r2, [r4, #16]
 8005706:	bf0c      	ite	eq
 8005708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800570c:	2500      	movne	r5, #0
 800570e:	4293      	cmp	r3, r2
 8005710:	bfc4      	itt	gt
 8005712:	1a9b      	subgt	r3, r3, r2
 8005714:	18ed      	addgt	r5, r5, r3
 8005716:	2600      	movs	r6, #0
 8005718:	341a      	adds	r4, #26
 800571a:	42b5      	cmp	r5, r6
 800571c:	d11a      	bne.n	8005754 <_printf_common+0xc8>
 800571e:	2000      	movs	r0, #0
 8005720:	e008      	b.n	8005734 <_printf_common+0xa8>
 8005722:	2301      	movs	r3, #1
 8005724:	4652      	mov	r2, sl
 8005726:	4649      	mov	r1, r9
 8005728:	4638      	mov	r0, r7
 800572a:	47c0      	blx	r8
 800572c:	3001      	adds	r0, #1
 800572e:	d103      	bne.n	8005738 <_printf_common+0xac>
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005738:	3501      	adds	r5, #1
 800573a:	e7c6      	b.n	80056ca <_printf_common+0x3e>
 800573c:	18e1      	adds	r1, r4, r3
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	2030      	movs	r0, #48	; 0x30
 8005742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005746:	4422      	add	r2, r4
 8005748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800574c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005750:	3302      	adds	r3, #2
 8005752:	e7c7      	b.n	80056e4 <_printf_common+0x58>
 8005754:	2301      	movs	r3, #1
 8005756:	4622      	mov	r2, r4
 8005758:	4649      	mov	r1, r9
 800575a:	4638      	mov	r0, r7
 800575c:	47c0      	blx	r8
 800575e:	3001      	adds	r0, #1
 8005760:	d0e6      	beq.n	8005730 <_printf_common+0xa4>
 8005762:	3601      	adds	r6, #1
 8005764:	e7d9      	b.n	800571a <_printf_common+0x8e>
	...

08005768 <_printf_i>:
 8005768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800576c:	460c      	mov	r4, r1
 800576e:	4691      	mov	r9, r2
 8005770:	7e27      	ldrb	r7, [r4, #24]
 8005772:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005774:	2f78      	cmp	r7, #120	; 0x78
 8005776:	4680      	mov	r8, r0
 8005778:	469a      	mov	sl, r3
 800577a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800577e:	d807      	bhi.n	8005790 <_printf_i+0x28>
 8005780:	2f62      	cmp	r7, #98	; 0x62
 8005782:	d80a      	bhi.n	800579a <_printf_i+0x32>
 8005784:	2f00      	cmp	r7, #0
 8005786:	f000 80d8 	beq.w	800593a <_printf_i+0x1d2>
 800578a:	2f58      	cmp	r7, #88	; 0x58
 800578c:	f000 80a3 	beq.w	80058d6 <_printf_i+0x16e>
 8005790:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005798:	e03a      	b.n	8005810 <_printf_i+0xa8>
 800579a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800579e:	2b15      	cmp	r3, #21
 80057a0:	d8f6      	bhi.n	8005790 <_printf_i+0x28>
 80057a2:	a001      	add	r0, pc, #4	; (adr r0, 80057a8 <_printf_i+0x40>)
 80057a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80057a8:	08005801 	.word	0x08005801
 80057ac:	08005815 	.word	0x08005815
 80057b0:	08005791 	.word	0x08005791
 80057b4:	08005791 	.word	0x08005791
 80057b8:	08005791 	.word	0x08005791
 80057bc:	08005791 	.word	0x08005791
 80057c0:	08005815 	.word	0x08005815
 80057c4:	08005791 	.word	0x08005791
 80057c8:	08005791 	.word	0x08005791
 80057cc:	08005791 	.word	0x08005791
 80057d0:	08005791 	.word	0x08005791
 80057d4:	08005921 	.word	0x08005921
 80057d8:	08005845 	.word	0x08005845
 80057dc:	08005903 	.word	0x08005903
 80057e0:	08005791 	.word	0x08005791
 80057e4:	08005791 	.word	0x08005791
 80057e8:	08005943 	.word	0x08005943
 80057ec:	08005791 	.word	0x08005791
 80057f0:	08005845 	.word	0x08005845
 80057f4:	08005791 	.word	0x08005791
 80057f8:	08005791 	.word	0x08005791
 80057fc:	0800590b 	.word	0x0800590b
 8005800:	680b      	ldr	r3, [r1, #0]
 8005802:	1d1a      	adds	r2, r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	600a      	str	r2, [r1, #0]
 8005808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800580c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005810:	2301      	movs	r3, #1
 8005812:	e0a3      	b.n	800595c <_printf_i+0x1f4>
 8005814:	6825      	ldr	r5, [r4, #0]
 8005816:	6808      	ldr	r0, [r1, #0]
 8005818:	062e      	lsls	r6, r5, #24
 800581a:	f100 0304 	add.w	r3, r0, #4
 800581e:	d50a      	bpl.n	8005836 <_printf_i+0xce>
 8005820:	6805      	ldr	r5, [r0, #0]
 8005822:	600b      	str	r3, [r1, #0]
 8005824:	2d00      	cmp	r5, #0
 8005826:	da03      	bge.n	8005830 <_printf_i+0xc8>
 8005828:	232d      	movs	r3, #45	; 0x2d
 800582a:	426d      	negs	r5, r5
 800582c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005830:	485e      	ldr	r0, [pc, #376]	; (80059ac <_printf_i+0x244>)
 8005832:	230a      	movs	r3, #10
 8005834:	e019      	b.n	800586a <_printf_i+0x102>
 8005836:	f015 0f40 	tst.w	r5, #64	; 0x40
 800583a:	6805      	ldr	r5, [r0, #0]
 800583c:	600b      	str	r3, [r1, #0]
 800583e:	bf18      	it	ne
 8005840:	b22d      	sxthne	r5, r5
 8005842:	e7ef      	b.n	8005824 <_printf_i+0xbc>
 8005844:	680b      	ldr	r3, [r1, #0]
 8005846:	6825      	ldr	r5, [r4, #0]
 8005848:	1d18      	adds	r0, r3, #4
 800584a:	6008      	str	r0, [r1, #0]
 800584c:	0628      	lsls	r0, r5, #24
 800584e:	d501      	bpl.n	8005854 <_printf_i+0xec>
 8005850:	681d      	ldr	r5, [r3, #0]
 8005852:	e002      	b.n	800585a <_printf_i+0xf2>
 8005854:	0669      	lsls	r1, r5, #25
 8005856:	d5fb      	bpl.n	8005850 <_printf_i+0xe8>
 8005858:	881d      	ldrh	r5, [r3, #0]
 800585a:	4854      	ldr	r0, [pc, #336]	; (80059ac <_printf_i+0x244>)
 800585c:	2f6f      	cmp	r7, #111	; 0x6f
 800585e:	bf0c      	ite	eq
 8005860:	2308      	moveq	r3, #8
 8005862:	230a      	movne	r3, #10
 8005864:	2100      	movs	r1, #0
 8005866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800586a:	6866      	ldr	r6, [r4, #4]
 800586c:	60a6      	str	r6, [r4, #8]
 800586e:	2e00      	cmp	r6, #0
 8005870:	bfa2      	ittt	ge
 8005872:	6821      	ldrge	r1, [r4, #0]
 8005874:	f021 0104 	bicge.w	r1, r1, #4
 8005878:	6021      	strge	r1, [r4, #0]
 800587a:	b90d      	cbnz	r5, 8005880 <_printf_i+0x118>
 800587c:	2e00      	cmp	r6, #0
 800587e:	d04d      	beq.n	800591c <_printf_i+0x1b4>
 8005880:	4616      	mov	r6, r2
 8005882:	fbb5 f1f3 	udiv	r1, r5, r3
 8005886:	fb03 5711 	mls	r7, r3, r1, r5
 800588a:	5dc7      	ldrb	r7, [r0, r7]
 800588c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005890:	462f      	mov	r7, r5
 8005892:	42bb      	cmp	r3, r7
 8005894:	460d      	mov	r5, r1
 8005896:	d9f4      	bls.n	8005882 <_printf_i+0x11a>
 8005898:	2b08      	cmp	r3, #8
 800589a:	d10b      	bne.n	80058b4 <_printf_i+0x14c>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	07df      	lsls	r7, r3, #31
 80058a0:	d508      	bpl.n	80058b4 <_printf_i+0x14c>
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	6861      	ldr	r1, [r4, #4]
 80058a6:	4299      	cmp	r1, r3
 80058a8:	bfde      	ittt	le
 80058aa:	2330      	movle	r3, #48	; 0x30
 80058ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058b4:	1b92      	subs	r2, r2, r6
 80058b6:	6122      	str	r2, [r4, #16]
 80058b8:	f8cd a000 	str.w	sl, [sp]
 80058bc:	464b      	mov	r3, r9
 80058be:	aa03      	add	r2, sp, #12
 80058c0:	4621      	mov	r1, r4
 80058c2:	4640      	mov	r0, r8
 80058c4:	f7ff fee2 	bl	800568c <_printf_common>
 80058c8:	3001      	adds	r0, #1
 80058ca:	d14c      	bne.n	8005966 <_printf_i+0x1fe>
 80058cc:	f04f 30ff 	mov.w	r0, #4294967295
 80058d0:	b004      	add	sp, #16
 80058d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d6:	4835      	ldr	r0, [pc, #212]	; (80059ac <_printf_i+0x244>)
 80058d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	680e      	ldr	r6, [r1, #0]
 80058e0:	061f      	lsls	r7, r3, #24
 80058e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80058e6:	600e      	str	r6, [r1, #0]
 80058e8:	d514      	bpl.n	8005914 <_printf_i+0x1ac>
 80058ea:	07d9      	lsls	r1, r3, #31
 80058ec:	bf44      	itt	mi
 80058ee:	f043 0320 	orrmi.w	r3, r3, #32
 80058f2:	6023      	strmi	r3, [r4, #0]
 80058f4:	b91d      	cbnz	r5, 80058fe <_printf_i+0x196>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	f023 0320 	bic.w	r3, r3, #32
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	2310      	movs	r3, #16
 8005900:	e7b0      	b.n	8005864 <_printf_i+0xfc>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f043 0320 	orr.w	r3, r3, #32
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	2378      	movs	r3, #120	; 0x78
 800590c:	4828      	ldr	r0, [pc, #160]	; (80059b0 <_printf_i+0x248>)
 800590e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005912:	e7e3      	b.n	80058dc <_printf_i+0x174>
 8005914:	065e      	lsls	r6, r3, #25
 8005916:	bf48      	it	mi
 8005918:	b2ad      	uxthmi	r5, r5
 800591a:	e7e6      	b.n	80058ea <_printf_i+0x182>
 800591c:	4616      	mov	r6, r2
 800591e:	e7bb      	b.n	8005898 <_printf_i+0x130>
 8005920:	680b      	ldr	r3, [r1, #0]
 8005922:	6826      	ldr	r6, [r4, #0]
 8005924:	6960      	ldr	r0, [r4, #20]
 8005926:	1d1d      	adds	r5, r3, #4
 8005928:	600d      	str	r5, [r1, #0]
 800592a:	0635      	lsls	r5, r6, #24
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	d501      	bpl.n	8005934 <_printf_i+0x1cc>
 8005930:	6018      	str	r0, [r3, #0]
 8005932:	e002      	b.n	800593a <_printf_i+0x1d2>
 8005934:	0671      	lsls	r1, r6, #25
 8005936:	d5fb      	bpl.n	8005930 <_printf_i+0x1c8>
 8005938:	8018      	strh	r0, [r3, #0]
 800593a:	2300      	movs	r3, #0
 800593c:	6123      	str	r3, [r4, #16]
 800593e:	4616      	mov	r6, r2
 8005940:	e7ba      	b.n	80058b8 <_printf_i+0x150>
 8005942:	680b      	ldr	r3, [r1, #0]
 8005944:	1d1a      	adds	r2, r3, #4
 8005946:	600a      	str	r2, [r1, #0]
 8005948:	681e      	ldr	r6, [r3, #0]
 800594a:	6862      	ldr	r2, [r4, #4]
 800594c:	2100      	movs	r1, #0
 800594e:	4630      	mov	r0, r6
 8005950:	f7fa fc66 	bl	8000220 <memchr>
 8005954:	b108      	cbz	r0, 800595a <_printf_i+0x1f2>
 8005956:	1b80      	subs	r0, r0, r6
 8005958:	6060      	str	r0, [r4, #4]
 800595a:	6863      	ldr	r3, [r4, #4]
 800595c:	6123      	str	r3, [r4, #16]
 800595e:	2300      	movs	r3, #0
 8005960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005964:	e7a8      	b.n	80058b8 <_printf_i+0x150>
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	4632      	mov	r2, r6
 800596a:	4649      	mov	r1, r9
 800596c:	4640      	mov	r0, r8
 800596e:	47d0      	blx	sl
 8005970:	3001      	adds	r0, #1
 8005972:	d0ab      	beq.n	80058cc <_printf_i+0x164>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	079b      	lsls	r3, r3, #30
 8005978:	d413      	bmi.n	80059a2 <_printf_i+0x23a>
 800597a:	68e0      	ldr	r0, [r4, #12]
 800597c:	9b03      	ldr	r3, [sp, #12]
 800597e:	4298      	cmp	r0, r3
 8005980:	bfb8      	it	lt
 8005982:	4618      	movlt	r0, r3
 8005984:	e7a4      	b.n	80058d0 <_printf_i+0x168>
 8005986:	2301      	movs	r3, #1
 8005988:	4632      	mov	r2, r6
 800598a:	4649      	mov	r1, r9
 800598c:	4640      	mov	r0, r8
 800598e:	47d0      	blx	sl
 8005990:	3001      	adds	r0, #1
 8005992:	d09b      	beq.n	80058cc <_printf_i+0x164>
 8005994:	3501      	adds	r5, #1
 8005996:	68e3      	ldr	r3, [r4, #12]
 8005998:	9903      	ldr	r1, [sp, #12]
 800599a:	1a5b      	subs	r3, r3, r1
 800599c:	42ab      	cmp	r3, r5
 800599e:	dcf2      	bgt.n	8005986 <_printf_i+0x21e>
 80059a0:	e7eb      	b.n	800597a <_printf_i+0x212>
 80059a2:	2500      	movs	r5, #0
 80059a4:	f104 0619 	add.w	r6, r4, #25
 80059a8:	e7f5      	b.n	8005996 <_printf_i+0x22e>
 80059aa:	bf00      	nop
 80059ac:	08008192 	.word	0x08008192
 80059b0:	080081a3 	.word	0x080081a3

080059b4 <_puts_r>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	460e      	mov	r6, r1
 80059b8:	4605      	mov	r5, r0
 80059ba:	b118      	cbz	r0, 80059c4 <_puts_r+0x10>
 80059bc:	6983      	ldr	r3, [r0, #24]
 80059be:	b90b      	cbnz	r3, 80059c4 <_puts_r+0x10>
 80059c0:	f001 f8e0 	bl	8006b84 <__sinit>
 80059c4:	69ab      	ldr	r3, [r5, #24]
 80059c6:	68ac      	ldr	r4, [r5, #8]
 80059c8:	b913      	cbnz	r3, 80059d0 <_puts_r+0x1c>
 80059ca:	4628      	mov	r0, r5
 80059cc:	f001 f8da 	bl	8006b84 <__sinit>
 80059d0:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <_puts_r+0xd0>)
 80059d2:	429c      	cmp	r4, r3
 80059d4:	d120      	bne.n	8005a18 <_puts_r+0x64>
 80059d6:	686c      	ldr	r4, [r5, #4]
 80059d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059da:	07db      	lsls	r3, r3, #31
 80059dc:	d405      	bmi.n	80059ea <_puts_r+0x36>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	0598      	lsls	r0, r3, #22
 80059e2:	d402      	bmi.n	80059ea <_puts_r+0x36>
 80059e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e6:	f001 f970 	bl	8006cca <__retarget_lock_acquire_recursive>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	0719      	lsls	r1, r3, #28
 80059ee:	d51d      	bpl.n	8005a2c <_puts_r+0x78>
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	b1db      	cbz	r3, 8005a2c <_puts_r+0x78>
 80059f4:	3e01      	subs	r6, #1
 80059f6:	68a3      	ldr	r3, [r4, #8]
 80059f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059fc:	3b01      	subs	r3, #1
 80059fe:	60a3      	str	r3, [r4, #8]
 8005a00:	bb39      	cbnz	r1, 8005a52 <_puts_r+0x9e>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	da38      	bge.n	8005a78 <_puts_r+0xc4>
 8005a06:	4622      	mov	r2, r4
 8005a08:	210a      	movs	r1, #10
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 f868 	bl	8005ae0 <__swbuf_r>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d011      	beq.n	8005a38 <_puts_r+0x84>
 8005a14:	250a      	movs	r5, #10
 8005a16:	e011      	b.n	8005a3c <_puts_r+0x88>
 8005a18:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <_puts_r+0xd4>)
 8005a1a:	429c      	cmp	r4, r3
 8005a1c:	d101      	bne.n	8005a22 <_puts_r+0x6e>
 8005a1e:	68ac      	ldr	r4, [r5, #8]
 8005a20:	e7da      	b.n	80059d8 <_puts_r+0x24>
 8005a22:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <_puts_r+0xd8>)
 8005a24:	429c      	cmp	r4, r3
 8005a26:	bf08      	it	eq
 8005a28:	68ec      	ldreq	r4, [r5, #12]
 8005a2a:	e7d5      	b.n	80059d8 <_puts_r+0x24>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 f8a8 	bl	8005b84 <__swsetup_r>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d0dd      	beq.n	80059f4 <_puts_r+0x40>
 8005a38:	f04f 35ff 	mov.w	r5, #4294967295
 8005a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a3e:	07da      	lsls	r2, r3, #31
 8005a40:	d405      	bmi.n	8005a4e <_puts_r+0x9a>
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	059b      	lsls	r3, r3, #22
 8005a46:	d402      	bmi.n	8005a4e <_puts_r+0x9a>
 8005a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a4a:	f001 f93f 	bl	8006ccc <__retarget_lock_release_recursive>
 8005a4e:	4628      	mov	r0, r5
 8005a50:	bd70      	pop	{r4, r5, r6, pc}
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da04      	bge.n	8005a60 <_puts_r+0xac>
 8005a56:	69a2      	ldr	r2, [r4, #24]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	dc06      	bgt.n	8005a6a <_puts_r+0xb6>
 8005a5c:	290a      	cmp	r1, #10
 8005a5e:	d004      	beq.n	8005a6a <_puts_r+0xb6>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	6022      	str	r2, [r4, #0]
 8005a66:	7019      	strb	r1, [r3, #0]
 8005a68:	e7c5      	b.n	80059f6 <_puts_r+0x42>
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f000 f837 	bl	8005ae0 <__swbuf_r>
 8005a72:	3001      	adds	r0, #1
 8005a74:	d1bf      	bne.n	80059f6 <_puts_r+0x42>
 8005a76:	e7df      	b.n	8005a38 <_puts_r+0x84>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	250a      	movs	r5, #10
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	6022      	str	r2, [r4, #0]
 8005a80:	701d      	strb	r5, [r3, #0]
 8005a82:	e7db      	b.n	8005a3c <_puts_r+0x88>
 8005a84:	08008268 	.word	0x08008268
 8005a88:	08008288 	.word	0x08008288
 8005a8c:	08008248 	.word	0x08008248

08005a90 <puts>:
 8005a90:	4b02      	ldr	r3, [pc, #8]	; (8005a9c <puts+0xc>)
 8005a92:	4601      	mov	r1, r0
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	f7ff bf8d 	b.w	80059b4 <_puts_r>
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c

08005aa0 <siprintf>:
 8005aa0:	b40e      	push	{r1, r2, r3}
 8005aa2:	b500      	push	{lr}
 8005aa4:	b09c      	sub	sp, #112	; 0x70
 8005aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8005aa8:	9002      	str	r0, [sp, #8]
 8005aaa:	9006      	str	r0, [sp, #24]
 8005aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ab0:	4809      	ldr	r0, [pc, #36]	; (8005ad8 <siprintf+0x38>)
 8005ab2:	9107      	str	r1, [sp, #28]
 8005ab4:	9104      	str	r1, [sp, #16]
 8005ab6:	4909      	ldr	r1, [pc, #36]	; (8005adc <siprintf+0x3c>)
 8005ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	a902      	add	r1, sp, #8
 8005ac4:	f001 fe12 	bl	80076ec <_svfiprintf_r>
 8005ac8:	9b02      	ldr	r3, [sp, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	b01c      	add	sp, #112	; 0x70
 8005ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	4770      	bx	lr
 8005ad8:	2000000c 	.word	0x2000000c
 8005adc:	ffff0208 	.word	0xffff0208

08005ae0 <__swbuf_r>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	460e      	mov	r6, r1
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	b118      	cbz	r0, 8005af2 <__swbuf_r+0x12>
 8005aea:	6983      	ldr	r3, [r0, #24]
 8005aec:	b90b      	cbnz	r3, 8005af2 <__swbuf_r+0x12>
 8005aee:	f001 f849 	bl	8006b84 <__sinit>
 8005af2:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <__swbuf_r+0x98>)
 8005af4:	429c      	cmp	r4, r3
 8005af6:	d12b      	bne.n	8005b50 <__swbuf_r+0x70>
 8005af8:	686c      	ldr	r4, [r5, #4]
 8005afa:	69a3      	ldr	r3, [r4, #24]
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	071a      	lsls	r2, r3, #28
 8005b02:	d52f      	bpl.n	8005b64 <__swbuf_r+0x84>
 8005b04:	6923      	ldr	r3, [r4, #16]
 8005b06:	b36b      	cbz	r3, 8005b64 <__swbuf_r+0x84>
 8005b08:	6923      	ldr	r3, [r4, #16]
 8005b0a:	6820      	ldr	r0, [r4, #0]
 8005b0c:	1ac0      	subs	r0, r0, r3
 8005b0e:	6963      	ldr	r3, [r4, #20]
 8005b10:	b2f6      	uxtb	r6, r6
 8005b12:	4283      	cmp	r3, r0
 8005b14:	4637      	mov	r7, r6
 8005b16:	dc04      	bgt.n	8005b22 <__swbuf_r+0x42>
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f000 ff9e 	bl	8006a5c <_fflush_r>
 8005b20:	bb30      	cbnz	r0, 8005b70 <__swbuf_r+0x90>
 8005b22:	68a3      	ldr	r3, [r4, #8]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	60a3      	str	r3, [r4, #8]
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	6022      	str	r2, [r4, #0]
 8005b2e:	701e      	strb	r6, [r3, #0]
 8005b30:	6963      	ldr	r3, [r4, #20]
 8005b32:	3001      	adds	r0, #1
 8005b34:	4283      	cmp	r3, r0
 8005b36:	d004      	beq.n	8005b42 <__swbuf_r+0x62>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	07db      	lsls	r3, r3, #31
 8005b3c:	d506      	bpl.n	8005b4c <__swbuf_r+0x6c>
 8005b3e:	2e0a      	cmp	r6, #10
 8005b40:	d104      	bne.n	8005b4c <__swbuf_r+0x6c>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	f000 ff89 	bl	8006a5c <_fflush_r>
 8005b4a:	b988      	cbnz	r0, 8005b70 <__swbuf_r+0x90>
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b50:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <__swbuf_r+0x9c>)
 8005b52:	429c      	cmp	r4, r3
 8005b54:	d101      	bne.n	8005b5a <__swbuf_r+0x7a>
 8005b56:	68ac      	ldr	r4, [r5, #8]
 8005b58:	e7cf      	b.n	8005afa <__swbuf_r+0x1a>
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <__swbuf_r+0xa0>)
 8005b5c:	429c      	cmp	r4, r3
 8005b5e:	bf08      	it	eq
 8005b60:	68ec      	ldreq	r4, [r5, #12]
 8005b62:	e7ca      	b.n	8005afa <__swbuf_r+0x1a>
 8005b64:	4621      	mov	r1, r4
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 f80c 	bl	8005b84 <__swsetup_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d0cb      	beq.n	8005b08 <__swbuf_r+0x28>
 8005b70:	f04f 37ff 	mov.w	r7, #4294967295
 8005b74:	e7ea      	b.n	8005b4c <__swbuf_r+0x6c>
 8005b76:	bf00      	nop
 8005b78:	08008268 	.word	0x08008268
 8005b7c:	08008288 	.word	0x08008288
 8005b80:	08008248 	.word	0x08008248

08005b84 <__swsetup_r>:
 8005b84:	4b32      	ldr	r3, [pc, #200]	; (8005c50 <__swsetup_r+0xcc>)
 8005b86:	b570      	push	{r4, r5, r6, lr}
 8005b88:	681d      	ldr	r5, [r3, #0]
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	b125      	cbz	r5, 8005b9a <__swsetup_r+0x16>
 8005b90:	69ab      	ldr	r3, [r5, #24]
 8005b92:	b913      	cbnz	r3, 8005b9a <__swsetup_r+0x16>
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 fff5 	bl	8006b84 <__sinit>
 8005b9a:	4b2e      	ldr	r3, [pc, #184]	; (8005c54 <__swsetup_r+0xd0>)
 8005b9c:	429c      	cmp	r4, r3
 8005b9e:	d10f      	bne.n	8005bc0 <__swsetup_r+0x3c>
 8005ba0:	686c      	ldr	r4, [r5, #4]
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ba8:	0719      	lsls	r1, r3, #28
 8005baa:	d42c      	bmi.n	8005c06 <__swsetup_r+0x82>
 8005bac:	06dd      	lsls	r5, r3, #27
 8005bae:	d411      	bmi.n	8005bd4 <__swsetup_r+0x50>
 8005bb0:	2309      	movs	r3, #9
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbe:	e03e      	b.n	8005c3e <__swsetup_r+0xba>
 8005bc0:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <__swsetup_r+0xd4>)
 8005bc2:	429c      	cmp	r4, r3
 8005bc4:	d101      	bne.n	8005bca <__swsetup_r+0x46>
 8005bc6:	68ac      	ldr	r4, [r5, #8]
 8005bc8:	e7eb      	b.n	8005ba2 <__swsetup_r+0x1e>
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <__swsetup_r+0xd8>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	bf08      	it	eq
 8005bd0:	68ec      	ldreq	r4, [r5, #12]
 8005bd2:	e7e6      	b.n	8005ba2 <__swsetup_r+0x1e>
 8005bd4:	0758      	lsls	r0, r3, #29
 8005bd6:	d512      	bpl.n	8005bfe <__swsetup_r+0x7a>
 8005bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bda:	b141      	cbz	r1, 8005bee <__swsetup_r+0x6a>
 8005bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d002      	beq.n	8005bea <__swsetup_r+0x66>
 8005be4:	4630      	mov	r0, r6
 8005be6:	f001 fc7b 	bl	80074e0 <_free_r>
 8005bea:	2300      	movs	r3, #0
 8005bec:	6363      	str	r3, [r4, #52]	; 0x34
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	6063      	str	r3, [r4, #4]
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	f043 0308 	orr.w	r3, r3, #8
 8005c04:	81a3      	strh	r3, [r4, #12]
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	b94b      	cbnz	r3, 8005c1e <__swsetup_r+0x9a>
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c14:	d003      	beq.n	8005c1e <__swsetup_r+0x9a>
 8005c16:	4621      	mov	r1, r4
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f001 f87d 	bl	8006d18 <__smakebuf_r>
 8005c1e:	89a0      	ldrh	r0, [r4, #12]
 8005c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c24:	f010 0301 	ands.w	r3, r0, #1
 8005c28:	d00a      	beq.n	8005c40 <__swsetup_r+0xbc>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60a3      	str	r3, [r4, #8]
 8005c2e:	6963      	ldr	r3, [r4, #20]
 8005c30:	425b      	negs	r3, r3
 8005c32:	61a3      	str	r3, [r4, #24]
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	b943      	cbnz	r3, 8005c4a <__swsetup_r+0xc6>
 8005c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c3c:	d1ba      	bne.n	8005bb4 <__swsetup_r+0x30>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	0781      	lsls	r1, r0, #30
 8005c42:	bf58      	it	pl
 8005c44:	6963      	ldrpl	r3, [r4, #20]
 8005c46:	60a3      	str	r3, [r4, #8]
 8005c48:	e7f4      	b.n	8005c34 <__swsetup_r+0xb0>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e7f7      	b.n	8005c3e <__swsetup_r+0xba>
 8005c4e:	bf00      	nop
 8005c50:	2000000c 	.word	0x2000000c
 8005c54:	08008268 	.word	0x08008268
 8005c58:	08008288 	.word	0x08008288
 8005c5c:	08008248 	.word	0x08008248

08005c60 <quorem>:
 8005c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	6903      	ldr	r3, [r0, #16]
 8005c66:	690c      	ldr	r4, [r1, #16]
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	f2c0 8081 	blt.w	8005d72 <quorem+0x112>
 8005c70:	3c01      	subs	r4, #1
 8005c72:	f101 0814 	add.w	r8, r1, #20
 8005c76:	f100 0514 	add.w	r5, r0, #20
 8005c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c94:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c98:	d331      	bcc.n	8005cfe <quorem+0x9e>
 8005c9a:	f04f 0e00 	mov.w	lr, #0
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	46ac      	mov	ip, r5
 8005ca2:	46f2      	mov	sl, lr
 8005ca4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ca8:	b293      	uxth	r3, r2
 8005caa:	fb06 e303 	mla	r3, r6, r3, lr
 8005cae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	ebaa 0303 	sub.w	r3, sl, r3
 8005cb8:	0c12      	lsrs	r2, r2, #16
 8005cba:	f8dc a000 	ldr.w	sl, [ip]
 8005cbe:	fb06 e202 	mla	r2, r6, r2, lr
 8005cc2:	fa13 f38a 	uxtah	r3, r3, sl
 8005cc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cca:	fa1f fa82 	uxth.w	sl, r2
 8005cce:	f8dc 2000 	ldr.w	r2, [ip]
 8005cd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005cd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ce0:	4581      	cmp	r9, r0
 8005ce2:	f84c 3b04 	str.w	r3, [ip], #4
 8005ce6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cea:	d2db      	bcs.n	8005ca4 <quorem+0x44>
 8005cec:	f855 300b 	ldr.w	r3, [r5, fp]
 8005cf0:	b92b      	cbnz	r3, 8005cfe <quorem+0x9e>
 8005cf2:	9b01      	ldr	r3, [sp, #4]
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	429d      	cmp	r5, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	d32e      	bcc.n	8005d5a <quorem+0xfa>
 8005cfc:	613c      	str	r4, [r7, #16]
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f001 fade 	bl	80072c0 <__mcmp>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	db24      	blt.n	8005d52 <quorem+0xf2>
 8005d08:	3601      	adds	r6, #1
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f04f 0c00 	mov.w	ip, #0
 8005d10:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d14:	f8d0 e000 	ldr.w	lr, [r0]
 8005d18:	b293      	uxth	r3, r2
 8005d1a:	ebac 0303 	sub.w	r3, ip, r3
 8005d1e:	0c12      	lsrs	r2, r2, #16
 8005d20:	fa13 f38e 	uxtah	r3, r3, lr
 8005d24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d32:	45c1      	cmp	r9, r8
 8005d34:	f840 3b04 	str.w	r3, [r0], #4
 8005d38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d3c:	d2e8      	bcs.n	8005d10 <quorem+0xb0>
 8005d3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d46:	b922      	cbnz	r2, 8005d52 <quorem+0xf2>
 8005d48:	3b04      	subs	r3, #4
 8005d4a:	429d      	cmp	r5, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	d30a      	bcc.n	8005d66 <quorem+0x106>
 8005d50:	613c      	str	r4, [r7, #16]
 8005d52:	4630      	mov	r0, r6
 8005d54:	b003      	add	sp, #12
 8005d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	d1cc      	bne.n	8005cfc <quorem+0x9c>
 8005d62:	3c01      	subs	r4, #1
 8005d64:	e7c7      	b.n	8005cf6 <quorem+0x96>
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	3b04      	subs	r3, #4
 8005d6a:	2a00      	cmp	r2, #0
 8005d6c:	d1f0      	bne.n	8005d50 <quorem+0xf0>
 8005d6e:	3c01      	subs	r4, #1
 8005d70:	e7eb      	b.n	8005d4a <quorem+0xea>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e7ee      	b.n	8005d54 <quorem+0xf4>
	...

08005d78 <_dtoa_r>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	ed2d 8b02 	vpush	{d8}
 8005d80:	ec57 6b10 	vmov	r6, r7, d0
 8005d84:	b095      	sub	sp, #84	; 0x54
 8005d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d8c:	9105      	str	r1, [sp, #20]
 8005d8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d92:	4604      	mov	r4, r0
 8005d94:	9209      	str	r2, [sp, #36]	; 0x24
 8005d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d98:	b975      	cbnz	r5, 8005db8 <_dtoa_r+0x40>
 8005d9a:	2010      	movs	r0, #16
 8005d9c:	f000 fffc 	bl	8006d98 <malloc>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6260      	str	r0, [r4, #36]	; 0x24
 8005da4:	b920      	cbnz	r0, 8005db0 <_dtoa_r+0x38>
 8005da6:	4bb2      	ldr	r3, [pc, #712]	; (8006070 <_dtoa_r+0x2f8>)
 8005da8:	21ea      	movs	r1, #234	; 0xea
 8005daa:	48b2      	ldr	r0, [pc, #712]	; (8006074 <_dtoa_r+0x2fc>)
 8005dac:	f001 ff5e 	bl	8007c6c <__assert_func>
 8005db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005db4:	6005      	str	r5, [r0, #0]
 8005db6:	60c5      	str	r5, [r0, #12]
 8005db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dba:	6819      	ldr	r1, [r3, #0]
 8005dbc:	b151      	cbz	r1, 8005dd4 <_dtoa_r+0x5c>
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	604a      	str	r2, [r1, #4]
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4093      	lsls	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f001 f83b 	bl	8006e44 <_Bfree>
 8005dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	1e3b      	subs	r3, r7, #0
 8005dd6:	bfb9      	ittee	lt
 8005dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	9303      	strlt	r3, [sp, #12]
 8005dde:	2300      	movge	r3, #0
 8005de0:	f8c8 3000 	strge.w	r3, [r8]
 8005de4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005de8:	4ba3      	ldr	r3, [pc, #652]	; (8006078 <_dtoa_r+0x300>)
 8005dea:	bfbc      	itt	lt
 8005dec:	2201      	movlt	r2, #1
 8005dee:	f8c8 2000 	strlt.w	r2, [r8]
 8005df2:	ea33 0309 	bics.w	r3, r3, r9
 8005df6:	d11b      	bne.n	8005e30 <_dtoa_r+0xb8>
 8005df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e04:	4333      	orrs	r3, r6
 8005e06:	f000 857a 	beq.w	80068fe <_dtoa_r+0xb86>
 8005e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e0c:	b963      	cbnz	r3, 8005e28 <_dtoa_r+0xb0>
 8005e0e:	4b9b      	ldr	r3, [pc, #620]	; (800607c <_dtoa_r+0x304>)
 8005e10:	e024      	b.n	8005e5c <_dtoa_r+0xe4>
 8005e12:	4b9b      	ldr	r3, [pc, #620]	; (8006080 <_dtoa_r+0x308>)
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	3308      	adds	r3, #8
 8005e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	9800      	ldr	r0, [sp, #0]
 8005e1e:	b015      	add	sp, #84	; 0x54
 8005e20:	ecbd 8b02 	vpop	{d8}
 8005e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e28:	4b94      	ldr	r3, [pc, #592]	; (800607c <_dtoa_r+0x304>)
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	3303      	adds	r3, #3
 8005e2e:	e7f3      	b.n	8005e18 <_dtoa_r+0xa0>
 8005e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e34:	2200      	movs	r2, #0
 8005e36:	ec51 0b17 	vmov	r0, r1, d7
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005e40:	f7fa fe62 	bl	8000b08 <__aeabi_dcmpeq>
 8005e44:	4680      	mov	r8, r0
 8005e46:	b158      	cbz	r0, 8005e60 <_dtoa_r+0xe8>
 8005e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8551 	beq.w	80068f8 <_dtoa_r+0xb80>
 8005e56:	488b      	ldr	r0, [pc, #556]	; (8006084 <_dtoa_r+0x30c>)
 8005e58:	6018      	str	r0, [r3, #0]
 8005e5a:	1e43      	subs	r3, r0, #1
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	e7dd      	b.n	8005e1c <_dtoa_r+0xa4>
 8005e60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005e64:	aa12      	add	r2, sp, #72	; 0x48
 8005e66:	a913      	add	r1, sp, #76	; 0x4c
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f001 facd 	bl	8007408 <__d2b>
 8005e6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e72:	4683      	mov	fp, r0
 8005e74:	2d00      	cmp	r5, #0
 8005e76:	d07c      	beq.n	8005f72 <_dtoa_r+0x1fa>
 8005e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005e86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e92:	4b7d      	ldr	r3, [pc, #500]	; (8006088 <_dtoa_r+0x310>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	4630      	mov	r0, r6
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f7fa fa15 	bl	80002c8 <__aeabi_dsub>
 8005e9e:	a36e      	add	r3, pc, #440	; (adr r3, 8006058 <_dtoa_r+0x2e0>)
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f7fa fbc8 	bl	8000638 <__aeabi_dmul>
 8005ea8:	a36d      	add	r3, pc, #436	; (adr r3, 8006060 <_dtoa_r+0x2e8>)
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f7fa fa0d 	bl	80002cc <__adddf3>
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	460f      	mov	r7, r1
 8005eb8:	f7fa fb54 	bl	8000564 <__aeabi_i2d>
 8005ebc:	a36a      	add	r3, pc, #424	; (adr r3, 8006068 <_dtoa_r+0x2f0>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa fbb9 	bl	8000638 <__aeabi_dmul>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4630      	mov	r0, r6
 8005ecc:	4639      	mov	r1, r7
 8005ece:	f7fa f9fd 	bl	80002cc <__adddf3>
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	460f      	mov	r7, r1
 8005ed6:	f7fa fe5f 	bl	8000b98 <__aeabi_d2iz>
 8005eda:	2200      	movs	r2, #0
 8005edc:	4682      	mov	sl, r0
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fe1a 	bl	8000b1c <__aeabi_dcmplt>
 8005ee8:	b148      	cbz	r0, 8005efe <_dtoa_r+0x186>
 8005eea:	4650      	mov	r0, sl
 8005eec:	f7fa fb3a 	bl	8000564 <__aeabi_i2d>
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	f7fa fe08 	bl	8000b08 <__aeabi_dcmpeq>
 8005ef8:	b908      	cbnz	r0, 8005efe <_dtoa_r+0x186>
 8005efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005efe:	f1ba 0f16 	cmp.w	sl, #22
 8005f02:	d854      	bhi.n	8005fae <_dtoa_r+0x236>
 8005f04:	4b61      	ldr	r3, [pc, #388]	; (800608c <_dtoa_r+0x314>)
 8005f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f12:	f7fa fe03 	bl	8000b1c <__aeabi_dcmplt>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d04b      	beq.n	8005fb2 <_dtoa_r+0x23a>
 8005f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f1e:	2300      	movs	r3, #0
 8005f20:	930e      	str	r3, [sp, #56]	; 0x38
 8005f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f24:	1b5d      	subs	r5, r3, r5
 8005f26:	1e6b      	subs	r3, r5, #1
 8005f28:	9304      	str	r3, [sp, #16]
 8005f2a:	bf43      	ittte	mi
 8005f2c:	2300      	movmi	r3, #0
 8005f2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005f32:	9304      	strmi	r3, [sp, #16]
 8005f34:	f04f 0800 	movpl.w	r8, #0
 8005f38:	f1ba 0f00 	cmp.w	sl, #0
 8005f3c:	db3b      	blt.n	8005fb6 <_dtoa_r+0x23e>
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005f44:	4453      	add	r3, sl
 8005f46:	9304      	str	r3, [sp, #16]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9306      	str	r3, [sp, #24]
 8005f4c:	9b05      	ldr	r3, [sp, #20]
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	d869      	bhi.n	8006026 <_dtoa_r+0x2ae>
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	bfc4      	itt	gt
 8005f56:	3b04      	subgt	r3, #4
 8005f58:	9305      	strgt	r3, [sp, #20]
 8005f5a:	9b05      	ldr	r3, [sp, #20]
 8005f5c:	f1a3 0302 	sub.w	r3, r3, #2
 8005f60:	bfcc      	ite	gt
 8005f62:	2500      	movgt	r5, #0
 8005f64:	2501      	movle	r5, #1
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d869      	bhi.n	800603e <_dtoa_r+0x2c6>
 8005f6a:	e8df f003 	tbb	[pc, r3]
 8005f6e:	4e2c      	.short	0x4e2c
 8005f70:	5a4c      	.short	0x5a4c
 8005f72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005f76:	441d      	add	r5, r3
 8005f78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	bfc1      	itttt	gt
 8005f80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f88:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f90:	bfda      	itte	le
 8005f92:	f1c3 0320 	rsble	r3, r3, #32
 8005f96:	fa06 f003 	lslle.w	r0, r6, r3
 8005f9a:	4318      	orrgt	r0, r3
 8005f9c:	f7fa fad2 	bl	8000544 <__aeabi_ui2d>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005fa8:	3d01      	subs	r5, #1
 8005faa:	9310      	str	r3, [sp, #64]	; 0x40
 8005fac:	e771      	b.n	8005e92 <_dtoa_r+0x11a>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e7b6      	b.n	8005f20 <_dtoa_r+0x1a8>
 8005fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8005fb4:	e7b5      	b.n	8005f22 <_dtoa_r+0x1aa>
 8005fb6:	f1ca 0300 	rsb	r3, sl, #0
 8005fba:	9306      	str	r3, [sp, #24]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	eba8 080a 	sub.w	r8, r8, sl
 8005fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8005fc4:	e7c2      	b.n	8005f4c <_dtoa_r+0x1d4>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9308      	str	r3, [sp, #32]
 8005fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	dc39      	bgt.n	8006044 <_dtoa_r+0x2cc>
 8005fd0:	f04f 0901 	mov.w	r9, #1
 8005fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fd8:	464b      	mov	r3, r9
 8005fda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	6042      	str	r2, [r0, #4]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	f102 0614 	add.w	r6, r2, #20
 8005fea:	429e      	cmp	r6, r3
 8005fec:	6841      	ldr	r1, [r0, #4]
 8005fee:	d92f      	bls.n	8006050 <_dtoa_r+0x2d8>
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 fee7 	bl	8006dc4 <_Balloc>
 8005ff6:	9000      	str	r0, [sp, #0]
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d14b      	bne.n	8006094 <_dtoa_r+0x31c>
 8005ffc:	4b24      	ldr	r3, [pc, #144]	; (8006090 <_dtoa_r+0x318>)
 8005ffe:	4602      	mov	r2, r0
 8006000:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006004:	e6d1      	b.n	8005daa <_dtoa_r+0x32>
 8006006:	2301      	movs	r3, #1
 8006008:	e7de      	b.n	8005fc8 <_dtoa_r+0x250>
 800600a:	2300      	movs	r3, #0
 800600c:	9308      	str	r3, [sp, #32]
 800600e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006010:	eb0a 0903 	add.w	r9, sl, r3
 8006014:	f109 0301 	add.w	r3, r9, #1
 8006018:	2b01      	cmp	r3, #1
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	bfb8      	it	lt
 800601e:	2301      	movlt	r3, #1
 8006020:	e7dd      	b.n	8005fde <_dtoa_r+0x266>
 8006022:	2301      	movs	r3, #1
 8006024:	e7f2      	b.n	800600c <_dtoa_r+0x294>
 8006026:	2501      	movs	r5, #1
 8006028:	2300      	movs	r3, #0
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	9508      	str	r5, [sp, #32]
 800602e:	f04f 39ff 	mov.w	r9, #4294967295
 8006032:	2200      	movs	r2, #0
 8006034:	f8cd 9004 	str.w	r9, [sp, #4]
 8006038:	2312      	movs	r3, #18
 800603a:	9209      	str	r2, [sp, #36]	; 0x24
 800603c:	e7cf      	b.n	8005fde <_dtoa_r+0x266>
 800603e:	2301      	movs	r3, #1
 8006040:	9308      	str	r3, [sp, #32]
 8006042:	e7f4      	b.n	800602e <_dtoa_r+0x2b6>
 8006044:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006048:	f8cd 9004 	str.w	r9, [sp, #4]
 800604c:	464b      	mov	r3, r9
 800604e:	e7c6      	b.n	8005fde <_dtoa_r+0x266>
 8006050:	3101      	adds	r1, #1
 8006052:	6041      	str	r1, [r0, #4]
 8006054:	0052      	lsls	r2, r2, #1
 8006056:	e7c6      	b.n	8005fe6 <_dtoa_r+0x26e>
 8006058:	636f4361 	.word	0x636f4361
 800605c:	3fd287a7 	.word	0x3fd287a7
 8006060:	8b60c8b3 	.word	0x8b60c8b3
 8006064:	3fc68a28 	.word	0x3fc68a28
 8006068:	509f79fb 	.word	0x509f79fb
 800606c:	3fd34413 	.word	0x3fd34413
 8006070:	080081c1 	.word	0x080081c1
 8006074:	080081d8 	.word	0x080081d8
 8006078:	7ff00000 	.word	0x7ff00000
 800607c:	080081bd 	.word	0x080081bd
 8006080:	080081b4 	.word	0x080081b4
 8006084:	08008191 	.word	0x08008191
 8006088:	3ff80000 	.word	0x3ff80000
 800608c:	08008330 	.word	0x08008330
 8006090:	08008237 	.word	0x08008237
 8006094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006096:	9a00      	ldr	r2, [sp, #0]
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	9b01      	ldr	r3, [sp, #4]
 800609c:	2b0e      	cmp	r3, #14
 800609e:	f200 80ad 	bhi.w	80061fc <_dtoa_r+0x484>
 80060a2:	2d00      	cmp	r5, #0
 80060a4:	f000 80aa 	beq.w	80061fc <_dtoa_r+0x484>
 80060a8:	f1ba 0f00 	cmp.w	sl, #0
 80060ac:	dd36      	ble.n	800611c <_dtoa_r+0x3a4>
 80060ae:	4ac3      	ldr	r2, [pc, #780]	; (80063bc <_dtoa_r+0x644>)
 80060b0:	f00a 030f 	and.w	r3, sl, #15
 80060b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060b8:	ed93 7b00 	vldr	d7, [r3]
 80060bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80060c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80060c4:	eeb0 8a47 	vmov.f32	s16, s14
 80060c8:	eef0 8a67 	vmov.f32	s17, s15
 80060cc:	d016      	beq.n	80060fc <_dtoa_r+0x384>
 80060ce:	4bbc      	ldr	r3, [pc, #752]	; (80063c0 <_dtoa_r+0x648>)
 80060d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060d8:	f7fa fbd8 	bl	800088c <__aeabi_ddiv>
 80060dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e0:	f007 070f 	and.w	r7, r7, #15
 80060e4:	2503      	movs	r5, #3
 80060e6:	4eb6      	ldr	r6, [pc, #728]	; (80063c0 <_dtoa_r+0x648>)
 80060e8:	b957      	cbnz	r7, 8006100 <_dtoa_r+0x388>
 80060ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ee:	ec53 2b18 	vmov	r2, r3, d8
 80060f2:	f7fa fbcb 	bl	800088c <__aeabi_ddiv>
 80060f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060fa:	e029      	b.n	8006150 <_dtoa_r+0x3d8>
 80060fc:	2502      	movs	r5, #2
 80060fe:	e7f2      	b.n	80060e6 <_dtoa_r+0x36e>
 8006100:	07f9      	lsls	r1, r7, #31
 8006102:	d508      	bpl.n	8006116 <_dtoa_r+0x39e>
 8006104:	ec51 0b18 	vmov	r0, r1, d8
 8006108:	e9d6 2300 	ldrd	r2, r3, [r6]
 800610c:	f7fa fa94 	bl	8000638 <__aeabi_dmul>
 8006110:	ec41 0b18 	vmov	d8, r0, r1
 8006114:	3501      	adds	r5, #1
 8006116:	107f      	asrs	r7, r7, #1
 8006118:	3608      	adds	r6, #8
 800611a:	e7e5      	b.n	80060e8 <_dtoa_r+0x370>
 800611c:	f000 80a6 	beq.w	800626c <_dtoa_r+0x4f4>
 8006120:	f1ca 0600 	rsb	r6, sl, #0
 8006124:	4ba5      	ldr	r3, [pc, #660]	; (80063bc <_dtoa_r+0x644>)
 8006126:	4fa6      	ldr	r7, [pc, #664]	; (80063c0 <_dtoa_r+0x648>)
 8006128:	f006 020f 	and.w	r2, r6, #15
 800612c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006138:	f7fa fa7e 	bl	8000638 <__aeabi_dmul>
 800613c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006140:	1136      	asrs	r6, r6, #4
 8006142:	2300      	movs	r3, #0
 8006144:	2502      	movs	r5, #2
 8006146:	2e00      	cmp	r6, #0
 8006148:	f040 8085 	bne.w	8006256 <_dtoa_r+0x4de>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1d2      	bne.n	80060f6 <_dtoa_r+0x37e>
 8006150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 808c 	beq.w	8006270 <_dtoa_r+0x4f8>
 8006158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800615c:	4b99      	ldr	r3, [pc, #612]	; (80063c4 <_dtoa_r+0x64c>)
 800615e:	2200      	movs	r2, #0
 8006160:	4630      	mov	r0, r6
 8006162:	4639      	mov	r1, r7
 8006164:	f7fa fcda 	bl	8000b1c <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f000 8081 	beq.w	8006270 <_dtoa_r+0x4f8>
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d07d      	beq.n	8006270 <_dtoa_r+0x4f8>
 8006174:	f1b9 0f00 	cmp.w	r9, #0
 8006178:	dd3c      	ble.n	80061f4 <_dtoa_r+0x47c>
 800617a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	2200      	movs	r2, #0
 8006182:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <_dtoa_r+0x650>)
 8006184:	4630      	mov	r0, r6
 8006186:	4639      	mov	r1, r7
 8006188:	f7fa fa56 	bl	8000638 <__aeabi_dmul>
 800618c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006190:	3501      	adds	r5, #1
 8006192:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006196:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800619a:	4628      	mov	r0, r5
 800619c:	f7fa f9e2 	bl	8000564 <__aeabi_i2d>
 80061a0:	4632      	mov	r2, r6
 80061a2:	463b      	mov	r3, r7
 80061a4:	f7fa fa48 	bl	8000638 <__aeabi_dmul>
 80061a8:	4b88      	ldr	r3, [pc, #544]	; (80063cc <_dtoa_r+0x654>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	f7fa f88e 	bl	80002cc <__adddf3>
 80061b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80061b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b8:	9303      	str	r3, [sp, #12]
 80061ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d15c      	bne.n	800627a <_dtoa_r+0x502>
 80061c0:	4b83      	ldr	r3, [pc, #524]	; (80063d0 <_dtoa_r+0x658>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	4630      	mov	r0, r6
 80061c6:	4639      	mov	r1, r7
 80061c8:	f7fa f87e 	bl	80002c8 <__aeabi_dsub>
 80061cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d0:	4606      	mov	r6, r0
 80061d2:	460f      	mov	r7, r1
 80061d4:	f7fa fcc0 	bl	8000b58 <__aeabi_dcmpgt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f040 8296 	bne.w	800670a <_dtoa_r+0x992>
 80061de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80061e2:	4630      	mov	r0, r6
 80061e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061e8:	4639      	mov	r1, r7
 80061ea:	f7fa fc97 	bl	8000b1c <__aeabi_dcmplt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f040 8288 	bne.w	8006704 <_dtoa_r+0x98c>
 80061f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f2c0 8158 	blt.w	80064b4 <_dtoa_r+0x73c>
 8006204:	f1ba 0f0e 	cmp.w	sl, #14
 8006208:	f300 8154 	bgt.w	80064b4 <_dtoa_r+0x73c>
 800620c:	4b6b      	ldr	r3, [pc, #428]	; (80063bc <_dtoa_r+0x644>)
 800620e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006212:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	f280 80e3 	bge.w	80063e4 <_dtoa_r+0x66c>
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f300 80df 	bgt.w	80063e4 <_dtoa_r+0x66c>
 8006226:	f040 826d 	bne.w	8006704 <_dtoa_r+0x98c>
 800622a:	4b69      	ldr	r3, [pc, #420]	; (80063d0 <_dtoa_r+0x658>)
 800622c:	2200      	movs	r2, #0
 800622e:	4640      	mov	r0, r8
 8006230:	4649      	mov	r1, r9
 8006232:	f7fa fa01 	bl	8000638 <__aeabi_dmul>
 8006236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800623a:	f7fa fc83 	bl	8000b44 <__aeabi_dcmpge>
 800623e:	9e01      	ldr	r6, [sp, #4]
 8006240:	4637      	mov	r7, r6
 8006242:	2800      	cmp	r0, #0
 8006244:	f040 8243 	bne.w	80066ce <_dtoa_r+0x956>
 8006248:	9d00      	ldr	r5, [sp, #0]
 800624a:	2331      	movs	r3, #49	; 0x31
 800624c:	f805 3b01 	strb.w	r3, [r5], #1
 8006250:	f10a 0a01 	add.w	sl, sl, #1
 8006254:	e23f      	b.n	80066d6 <_dtoa_r+0x95e>
 8006256:	07f2      	lsls	r2, r6, #31
 8006258:	d505      	bpl.n	8006266 <_dtoa_r+0x4ee>
 800625a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800625e:	f7fa f9eb 	bl	8000638 <__aeabi_dmul>
 8006262:	3501      	adds	r5, #1
 8006264:	2301      	movs	r3, #1
 8006266:	1076      	asrs	r6, r6, #1
 8006268:	3708      	adds	r7, #8
 800626a:	e76c      	b.n	8006146 <_dtoa_r+0x3ce>
 800626c:	2502      	movs	r5, #2
 800626e:	e76f      	b.n	8006150 <_dtoa_r+0x3d8>
 8006270:	9b01      	ldr	r3, [sp, #4]
 8006272:	f8cd a01c 	str.w	sl, [sp, #28]
 8006276:	930c      	str	r3, [sp, #48]	; 0x30
 8006278:	e78d      	b.n	8006196 <_dtoa_r+0x41e>
 800627a:	9900      	ldr	r1, [sp, #0]
 800627c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800627e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006280:	4b4e      	ldr	r3, [pc, #312]	; (80063bc <_dtoa_r+0x644>)
 8006282:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006286:	4401      	add	r1, r0
 8006288:	9102      	str	r1, [sp, #8]
 800628a:	9908      	ldr	r1, [sp, #32]
 800628c:	eeb0 8a47 	vmov.f32	s16, s14
 8006290:	eef0 8a67 	vmov.f32	s17, s15
 8006294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800629c:	2900      	cmp	r1, #0
 800629e:	d045      	beq.n	800632c <_dtoa_r+0x5b4>
 80062a0:	494c      	ldr	r1, [pc, #304]	; (80063d4 <_dtoa_r+0x65c>)
 80062a2:	2000      	movs	r0, #0
 80062a4:	f7fa faf2 	bl	800088c <__aeabi_ddiv>
 80062a8:	ec53 2b18 	vmov	r2, r3, d8
 80062ac:	f7fa f80c 	bl	80002c8 <__aeabi_dsub>
 80062b0:	9d00      	ldr	r5, [sp, #0]
 80062b2:	ec41 0b18 	vmov	d8, r0, r1
 80062b6:	4639      	mov	r1, r7
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7fa fc6d 	bl	8000b98 <__aeabi_d2iz>
 80062be:	900c      	str	r0, [sp, #48]	; 0x30
 80062c0:	f7fa f950 	bl	8000564 <__aeabi_i2d>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7f9 fffc 	bl	80002c8 <__aeabi_dsub>
 80062d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062d2:	3330      	adds	r3, #48	; 0x30
 80062d4:	f805 3b01 	strb.w	r3, [r5], #1
 80062d8:	ec53 2b18 	vmov	r2, r3, d8
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	f7fa fc1c 	bl	8000b1c <__aeabi_dcmplt>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d165      	bne.n	80063b4 <_dtoa_r+0x63c>
 80062e8:	4632      	mov	r2, r6
 80062ea:	463b      	mov	r3, r7
 80062ec:	4935      	ldr	r1, [pc, #212]	; (80063c4 <_dtoa_r+0x64c>)
 80062ee:	2000      	movs	r0, #0
 80062f0:	f7f9 ffea 	bl	80002c8 <__aeabi_dsub>
 80062f4:	ec53 2b18 	vmov	r2, r3, d8
 80062f8:	f7fa fc10 	bl	8000b1c <__aeabi_dcmplt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	f040 80b9 	bne.w	8006474 <_dtoa_r+0x6fc>
 8006302:	9b02      	ldr	r3, [sp, #8]
 8006304:	429d      	cmp	r5, r3
 8006306:	f43f af75 	beq.w	80061f4 <_dtoa_r+0x47c>
 800630a:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <_dtoa_r+0x650>)
 800630c:	ec51 0b18 	vmov	r0, r1, d8
 8006310:	2200      	movs	r2, #0
 8006312:	f7fa f991 	bl	8000638 <__aeabi_dmul>
 8006316:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <_dtoa_r+0x650>)
 8006318:	ec41 0b18 	vmov	d8, r0, r1
 800631c:	2200      	movs	r2, #0
 800631e:	4630      	mov	r0, r6
 8006320:	4639      	mov	r1, r7
 8006322:	f7fa f989 	bl	8000638 <__aeabi_dmul>
 8006326:	4606      	mov	r6, r0
 8006328:	460f      	mov	r7, r1
 800632a:	e7c4      	b.n	80062b6 <_dtoa_r+0x53e>
 800632c:	ec51 0b17 	vmov	r0, r1, d7
 8006330:	f7fa f982 	bl	8000638 <__aeabi_dmul>
 8006334:	9b02      	ldr	r3, [sp, #8]
 8006336:	9d00      	ldr	r5, [sp, #0]
 8006338:	930c      	str	r3, [sp, #48]	; 0x30
 800633a:	ec41 0b18 	vmov	d8, r0, r1
 800633e:	4639      	mov	r1, r7
 8006340:	4630      	mov	r0, r6
 8006342:	f7fa fc29 	bl	8000b98 <__aeabi_d2iz>
 8006346:	9011      	str	r0, [sp, #68]	; 0x44
 8006348:	f7fa f90c 	bl	8000564 <__aeabi_i2d>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4630      	mov	r0, r6
 8006352:	4639      	mov	r1, r7
 8006354:	f7f9 ffb8 	bl	80002c8 <__aeabi_dsub>
 8006358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800635a:	3330      	adds	r3, #48	; 0x30
 800635c:	f805 3b01 	strb.w	r3, [r5], #1
 8006360:	9b02      	ldr	r3, [sp, #8]
 8006362:	429d      	cmp	r5, r3
 8006364:	4606      	mov	r6, r0
 8006366:	460f      	mov	r7, r1
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	d134      	bne.n	80063d8 <_dtoa_r+0x660>
 800636e:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <_dtoa_r+0x65c>)
 8006370:	ec51 0b18 	vmov	r0, r1, d8
 8006374:	f7f9 ffaa 	bl	80002cc <__adddf3>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7fa fbea 	bl	8000b58 <__aeabi_dcmpgt>
 8006384:	2800      	cmp	r0, #0
 8006386:	d175      	bne.n	8006474 <_dtoa_r+0x6fc>
 8006388:	ec53 2b18 	vmov	r2, r3, d8
 800638c:	4911      	ldr	r1, [pc, #68]	; (80063d4 <_dtoa_r+0x65c>)
 800638e:	2000      	movs	r0, #0
 8006390:	f7f9 ff9a 	bl	80002c8 <__aeabi_dsub>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4630      	mov	r0, r6
 800639a:	4639      	mov	r1, r7
 800639c:	f7fa fbbe 	bl	8000b1c <__aeabi_dcmplt>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	f43f af27 	beq.w	80061f4 <_dtoa_r+0x47c>
 80063a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063a8:	1e6b      	subs	r3, r5, #1
 80063aa:	930c      	str	r3, [sp, #48]	; 0x30
 80063ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d0f8      	beq.n	80063a6 <_dtoa_r+0x62e>
 80063b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80063b8:	e04a      	b.n	8006450 <_dtoa_r+0x6d8>
 80063ba:	bf00      	nop
 80063bc:	08008330 	.word	0x08008330
 80063c0:	08008308 	.word	0x08008308
 80063c4:	3ff00000 	.word	0x3ff00000
 80063c8:	40240000 	.word	0x40240000
 80063cc:	401c0000 	.word	0x401c0000
 80063d0:	40140000 	.word	0x40140000
 80063d4:	3fe00000 	.word	0x3fe00000
 80063d8:	4baf      	ldr	r3, [pc, #700]	; (8006698 <_dtoa_r+0x920>)
 80063da:	f7fa f92d 	bl	8000638 <__aeabi_dmul>
 80063de:	4606      	mov	r6, r0
 80063e0:	460f      	mov	r7, r1
 80063e2:	e7ac      	b.n	800633e <_dtoa_r+0x5c6>
 80063e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063e8:	9d00      	ldr	r5, [sp, #0]
 80063ea:	4642      	mov	r2, r8
 80063ec:	464b      	mov	r3, r9
 80063ee:	4630      	mov	r0, r6
 80063f0:	4639      	mov	r1, r7
 80063f2:	f7fa fa4b 	bl	800088c <__aeabi_ddiv>
 80063f6:	f7fa fbcf 	bl	8000b98 <__aeabi_d2iz>
 80063fa:	9002      	str	r0, [sp, #8]
 80063fc:	f7fa f8b2 	bl	8000564 <__aeabi_i2d>
 8006400:	4642      	mov	r2, r8
 8006402:	464b      	mov	r3, r9
 8006404:	f7fa f918 	bl	8000638 <__aeabi_dmul>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4630      	mov	r0, r6
 800640e:	4639      	mov	r1, r7
 8006410:	f7f9 ff5a 	bl	80002c8 <__aeabi_dsub>
 8006414:	9e02      	ldr	r6, [sp, #8]
 8006416:	9f01      	ldr	r7, [sp, #4]
 8006418:	3630      	adds	r6, #48	; 0x30
 800641a:	f805 6b01 	strb.w	r6, [r5], #1
 800641e:	9e00      	ldr	r6, [sp, #0]
 8006420:	1bae      	subs	r6, r5, r6
 8006422:	42b7      	cmp	r7, r6
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	d137      	bne.n	800649a <_dtoa_r+0x722>
 800642a:	f7f9 ff4f 	bl	80002cc <__adddf3>
 800642e:	4642      	mov	r2, r8
 8006430:	464b      	mov	r3, r9
 8006432:	4606      	mov	r6, r0
 8006434:	460f      	mov	r7, r1
 8006436:	f7fa fb8f 	bl	8000b58 <__aeabi_dcmpgt>
 800643a:	b9c8      	cbnz	r0, 8006470 <_dtoa_r+0x6f8>
 800643c:	4642      	mov	r2, r8
 800643e:	464b      	mov	r3, r9
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7fa fb60 	bl	8000b08 <__aeabi_dcmpeq>
 8006448:	b110      	cbz	r0, 8006450 <_dtoa_r+0x6d8>
 800644a:	9b02      	ldr	r3, [sp, #8]
 800644c:	07d9      	lsls	r1, r3, #31
 800644e:	d40f      	bmi.n	8006470 <_dtoa_r+0x6f8>
 8006450:	4620      	mov	r0, r4
 8006452:	4659      	mov	r1, fp
 8006454:	f000 fcf6 	bl	8006e44 <_Bfree>
 8006458:	2300      	movs	r3, #0
 800645a:	702b      	strb	r3, [r5, #0]
 800645c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800645e:	f10a 0001 	add.w	r0, sl, #1
 8006462:	6018      	str	r0, [r3, #0]
 8006464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006466:	2b00      	cmp	r3, #0
 8006468:	f43f acd8 	beq.w	8005e1c <_dtoa_r+0xa4>
 800646c:	601d      	str	r5, [r3, #0]
 800646e:	e4d5      	b.n	8005e1c <_dtoa_r+0xa4>
 8006470:	f8cd a01c 	str.w	sl, [sp, #28]
 8006474:	462b      	mov	r3, r5
 8006476:	461d      	mov	r5, r3
 8006478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800647c:	2a39      	cmp	r2, #57	; 0x39
 800647e:	d108      	bne.n	8006492 <_dtoa_r+0x71a>
 8006480:	9a00      	ldr	r2, [sp, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d1f7      	bne.n	8006476 <_dtoa_r+0x6fe>
 8006486:	9a07      	ldr	r2, [sp, #28]
 8006488:	9900      	ldr	r1, [sp, #0]
 800648a:	3201      	adds	r2, #1
 800648c:	9207      	str	r2, [sp, #28]
 800648e:	2230      	movs	r2, #48	; 0x30
 8006490:	700a      	strb	r2, [r1, #0]
 8006492:	781a      	ldrb	r2, [r3, #0]
 8006494:	3201      	adds	r2, #1
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e78c      	b.n	80063b4 <_dtoa_r+0x63c>
 800649a:	4b7f      	ldr	r3, [pc, #508]	; (8006698 <_dtoa_r+0x920>)
 800649c:	2200      	movs	r2, #0
 800649e:	f7fa f8cb 	bl	8000638 <__aeabi_dmul>
 80064a2:	2200      	movs	r2, #0
 80064a4:	2300      	movs	r3, #0
 80064a6:	4606      	mov	r6, r0
 80064a8:	460f      	mov	r7, r1
 80064aa:	f7fa fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d09b      	beq.n	80063ea <_dtoa_r+0x672>
 80064b2:	e7cd      	b.n	8006450 <_dtoa_r+0x6d8>
 80064b4:	9a08      	ldr	r2, [sp, #32]
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	f000 80c4 	beq.w	8006644 <_dtoa_r+0x8cc>
 80064bc:	9a05      	ldr	r2, [sp, #20]
 80064be:	2a01      	cmp	r2, #1
 80064c0:	f300 80a8 	bgt.w	8006614 <_dtoa_r+0x89c>
 80064c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	f000 80a0 	beq.w	800660c <_dtoa_r+0x894>
 80064cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064d0:	9e06      	ldr	r6, [sp, #24]
 80064d2:	4645      	mov	r5, r8
 80064d4:	9a04      	ldr	r2, [sp, #16]
 80064d6:	2101      	movs	r1, #1
 80064d8:	441a      	add	r2, r3
 80064da:	4620      	mov	r0, r4
 80064dc:	4498      	add	r8, r3
 80064de:	9204      	str	r2, [sp, #16]
 80064e0:	f000 fd6c 	bl	8006fbc <__i2b>
 80064e4:	4607      	mov	r7, r0
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	dd0b      	ble.n	8006502 <_dtoa_r+0x78a>
 80064ea:	9b04      	ldr	r3, [sp, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dd08      	ble.n	8006502 <_dtoa_r+0x78a>
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	9a04      	ldr	r2, [sp, #16]
 80064f4:	bfa8      	it	ge
 80064f6:	462b      	movge	r3, r5
 80064f8:	eba8 0803 	sub.w	r8, r8, r3
 80064fc:	1aed      	subs	r5, r5, r3
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	9304      	str	r3, [sp, #16]
 8006502:	9b06      	ldr	r3, [sp, #24]
 8006504:	b1fb      	cbz	r3, 8006546 <_dtoa_r+0x7ce>
 8006506:	9b08      	ldr	r3, [sp, #32]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 809f 	beq.w	800664c <_dtoa_r+0x8d4>
 800650e:	2e00      	cmp	r6, #0
 8006510:	dd11      	ble.n	8006536 <_dtoa_r+0x7be>
 8006512:	4639      	mov	r1, r7
 8006514:	4632      	mov	r2, r6
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fe0c 	bl	8007134 <__pow5mult>
 800651c:	465a      	mov	r2, fp
 800651e:	4601      	mov	r1, r0
 8006520:	4607      	mov	r7, r0
 8006522:	4620      	mov	r0, r4
 8006524:	f000 fd60 	bl	8006fe8 <__multiply>
 8006528:	4659      	mov	r1, fp
 800652a:	9007      	str	r0, [sp, #28]
 800652c:	4620      	mov	r0, r4
 800652e:	f000 fc89 	bl	8006e44 <_Bfree>
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	469b      	mov	fp, r3
 8006536:	9b06      	ldr	r3, [sp, #24]
 8006538:	1b9a      	subs	r2, r3, r6
 800653a:	d004      	beq.n	8006546 <_dtoa_r+0x7ce>
 800653c:	4659      	mov	r1, fp
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fdf8 	bl	8007134 <__pow5mult>
 8006544:	4683      	mov	fp, r0
 8006546:	2101      	movs	r1, #1
 8006548:	4620      	mov	r0, r4
 800654a:	f000 fd37 	bl	8006fbc <__i2b>
 800654e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	4606      	mov	r6, r0
 8006554:	dd7c      	ble.n	8006650 <_dtoa_r+0x8d8>
 8006556:	461a      	mov	r2, r3
 8006558:	4601      	mov	r1, r0
 800655a:	4620      	mov	r0, r4
 800655c:	f000 fdea 	bl	8007134 <__pow5mult>
 8006560:	9b05      	ldr	r3, [sp, #20]
 8006562:	2b01      	cmp	r3, #1
 8006564:	4606      	mov	r6, r0
 8006566:	dd76      	ble.n	8006656 <_dtoa_r+0x8de>
 8006568:	2300      	movs	r3, #0
 800656a:	9306      	str	r3, [sp, #24]
 800656c:	6933      	ldr	r3, [r6, #16]
 800656e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006572:	6918      	ldr	r0, [r3, #16]
 8006574:	f000 fcd2 	bl	8006f1c <__hi0bits>
 8006578:	f1c0 0020 	rsb	r0, r0, #32
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	4418      	add	r0, r3
 8006580:	f010 001f 	ands.w	r0, r0, #31
 8006584:	f000 8086 	beq.w	8006694 <_dtoa_r+0x91c>
 8006588:	f1c0 0320 	rsb	r3, r0, #32
 800658c:	2b04      	cmp	r3, #4
 800658e:	dd7f      	ble.n	8006690 <_dtoa_r+0x918>
 8006590:	f1c0 001c 	rsb	r0, r0, #28
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	4403      	add	r3, r0
 8006598:	4480      	add	r8, r0
 800659a:	4405      	add	r5, r0
 800659c:	9304      	str	r3, [sp, #16]
 800659e:	f1b8 0f00 	cmp.w	r8, #0
 80065a2:	dd05      	ble.n	80065b0 <_dtoa_r+0x838>
 80065a4:	4659      	mov	r1, fp
 80065a6:	4642      	mov	r2, r8
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 fe1d 	bl	80071e8 <__lshift>
 80065ae:	4683      	mov	fp, r0
 80065b0:	9b04      	ldr	r3, [sp, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	dd05      	ble.n	80065c2 <_dtoa_r+0x84a>
 80065b6:	4631      	mov	r1, r6
 80065b8:	461a      	mov	r2, r3
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 fe14 	bl	80071e8 <__lshift>
 80065c0:	4606      	mov	r6, r0
 80065c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d069      	beq.n	800669c <_dtoa_r+0x924>
 80065c8:	4631      	mov	r1, r6
 80065ca:	4658      	mov	r0, fp
 80065cc:	f000 fe78 	bl	80072c0 <__mcmp>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	da63      	bge.n	800669c <_dtoa_r+0x924>
 80065d4:	2300      	movs	r3, #0
 80065d6:	4659      	mov	r1, fp
 80065d8:	220a      	movs	r2, #10
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fc54 	bl	8006e88 <__multadd>
 80065e0:	9b08      	ldr	r3, [sp, #32]
 80065e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065e6:	4683      	mov	fp, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 818f 	beq.w	800690c <_dtoa_r+0xb94>
 80065ee:	4639      	mov	r1, r7
 80065f0:	2300      	movs	r3, #0
 80065f2:	220a      	movs	r2, #10
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fc47 	bl	8006e88 <__multadd>
 80065fa:	f1b9 0f00 	cmp.w	r9, #0
 80065fe:	4607      	mov	r7, r0
 8006600:	f300 808e 	bgt.w	8006720 <_dtoa_r+0x9a8>
 8006604:	9b05      	ldr	r3, [sp, #20]
 8006606:	2b02      	cmp	r3, #2
 8006608:	dc50      	bgt.n	80066ac <_dtoa_r+0x934>
 800660a:	e089      	b.n	8006720 <_dtoa_r+0x9a8>
 800660c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800660e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006612:	e75d      	b.n	80064d0 <_dtoa_r+0x758>
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	1e5e      	subs	r6, r3, #1
 8006618:	9b06      	ldr	r3, [sp, #24]
 800661a:	42b3      	cmp	r3, r6
 800661c:	bfbf      	itttt	lt
 800661e:	9b06      	ldrlt	r3, [sp, #24]
 8006620:	9606      	strlt	r6, [sp, #24]
 8006622:	1af2      	sublt	r2, r6, r3
 8006624:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006626:	bfb6      	itet	lt
 8006628:	189b      	addlt	r3, r3, r2
 800662a:	1b9e      	subge	r6, r3, r6
 800662c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	bfb8      	it	lt
 8006632:	2600      	movlt	r6, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	bfb5      	itete	lt
 8006638:	eba8 0503 	sublt.w	r5, r8, r3
 800663c:	9b01      	ldrge	r3, [sp, #4]
 800663e:	2300      	movlt	r3, #0
 8006640:	4645      	movge	r5, r8
 8006642:	e747      	b.n	80064d4 <_dtoa_r+0x75c>
 8006644:	9e06      	ldr	r6, [sp, #24]
 8006646:	9f08      	ldr	r7, [sp, #32]
 8006648:	4645      	mov	r5, r8
 800664a:	e74c      	b.n	80064e6 <_dtoa_r+0x76e>
 800664c:	9a06      	ldr	r2, [sp, #24]
 800664e:	e775      	b.n	800653c <_dtoa_r+0x7c4>
 8006650:	9b05      	ldr	r3, [sp, #20]
 8006652:	2b01      	cmp	r3, #1
 8006654:	dc18      	bgt.n	8006688 <_dtoa_r+0x910>
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	b9b3      	cbnz	r3, 8006688 <_dtoa_r+0x910>
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006660:	b9a3      	cbnz	r3, 800668c <_dtoa_r+0x914>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006668:	0d1b      	lsrs	r3, r3, #20
 800666a:	051b      	lsls	r3, r3, #20
 800666c:	b12b      	cbz	r3, 800667a <_dtoa_r+0x902>
 800666e:	9b04      	ldr	r3, [sp, #16]
 8006670:	3301      	adds	r3, #1
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	f108 0801 	add.w	r8, r8, #1
 8006678:	2301      	movs	r3, #1
 800667a:	9306      	str	r3, [sp, #24]
 800667c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800667e:	2b00      	cmp	r3, #0
 8006680:	f47f af74 	bne.w	800656c <_dtoa_r+0x7f4>
 8006684:	2001      	movs	r0, #1
 8006686:	e779      	b.n	800657c <_dtoa_r+0x804>
 8006688:	2300      	movs	r3, #0
 800668a:	e7f6      	b.n	800667a <_dtoa_r+0x902>
 800668c:	9b02      	ldr	r3, [sp, #8]
 800668e:	e7f4      	b.n	800667a <_dtoa_r+0x902>
 8006690:	d085      	beq.n	800659e <_dtoa_r+0x826>
 8006692:	4618      	mov	r0, r3
 8006694:	301c      	adds	r0, #28
 8006696:	e77d      	b.n	8006594 <_dtoa_r+0x81c>
 8006698:	40240000 	.word	0x40240000
 800669c:	9b01      	ldr	r3, [sp, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dc38      	bgt.n	8006714 <_dtoa_r+0x99c>
 80066a2:	9b05      	ldr	r3, [sp, #20]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	dd35      	ble.n	8006714 <_dtoa_r+0x99c>
 80066a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80066ac:	f1b9 0f00 	cmp.w	r9, #0
 80066b0:	d10d      	bne.n	80066ce <_dtoa_r+0x956>
 80066b2:	4631      	mov	r1, r6
 80066b4:	464b      	mov	r3, r9
 80066b6:	2205      	movs	r2, #5
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 fbe5 	bl	8006e88 <__multadd>
 80066be:	4601      	mov	r1, r0
 80066c0:	4606      	mov	r6, r0
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 fdfc 	bl	80072c0 <__mcmp>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	f73f adbd 	bgt.w	8006248 <_dtoa_r+0x4d0>
 80066ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d0:	9d00      	ldr	r5, [sp, #0]
 80066d2:	ea6f 0a03 	mvn.w	sl, r3
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	4631      	mov	r1, r6
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fbb1 	bl	8006e44 <_Bfree>
 80066e2:	2f00      	cmp	r7, #0
 80066e4:	f43f aeb4 	beq.w	8006450 <_dtoa_r+0x6d8>
 80066e8:	f1b8 0f00 	cmp.w	r8, #0
 80066ec:	d005      	beq.n	80066fa <_dtoa_r+0x982>
 80066ee:	45b8      	cmp	r8, r7
 80066f0:	d003      	beq.n	80066fa <_dtoa_r+0x982>
 80066f2:	4641      	mov	r1, r8
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fba5 	bl	8006e44 <_Bfree>
 80066fa:	4639      	mov	r1, r7
 80066fc:	4620      	mov	r0, r4
 80066fe:	f000 fba1 	bl	8006e44 <_Bfree>
 8006702:	e6a5      	b.n	8006450 <_dtoa_r+0x6d8>
 8006704:	2600      	movs	r6, #0
 8006706:	4637      	mov	r7, r6
 8006708:	e7e1      	b.n	80066ce <_dtoa_r+0x956>
 800670a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800670c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006710:	4637      	mov	r7, r6
 8006712:	e599      	b.n	8006248 <_dtoa_r+0x4d0>
 8006714:	9b08      	ldr	r3, [sp, #32]
 8006716:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80fd 	beq.w	800691a <_dtoa_r+0xba2>
 8006720:	2d00      	cmp	r5, #0
 8006722:	dd05      	ble.n	8006730 <_dtoa_r+0x9b8>
 8006724:	4639      	mov	r1, r7
 8006726:	462a      	mov	r2, r5
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fd5d 	bl	80071e8 <__lshift>
 800672e:	4607      	mov	r7, r0
 8006730:	9b06      	ldr	r3, [sp, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d05c      	beq.n	80067f0 <_dtoa_r+0xa78>
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fb43 	bl	8006dc4 <_Balloc>
 800673e:	4605      	mov	r5, r0
 8006740:	b928      	cbnz	r0, 800674e <_dtoa_r+0x9d6>
 8006742:	4b80      	ldr	r3, [pc, #512]	; (8006944 <_dtoa_r+0xbcc>)
 8006744:	4602      	mov	r2, r0
 8006746:	f240 21ea 	movw	r1, #746	; 0x2ea
 800674a:	f7ff bb2e 	b.w	8005daa <_dtoa_r+0x32>
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	3202      	adds	r2, #2
 8006752:	0092      	lsls	r2, r2, #2
 8006754:	f107 010c 	add.w	r1, r7, #12
 8006758:	300c      	adds	r0, #12
 800675a:	f000 fb25 	bl	8006da8 <memcpy>
 800675e:	2201      	movs	r2, #1
 8006760:	4629      	mov	r1, r5
 8006762:	4620      	mov	r0, r4
 8006764:	f000 fd40 	bl	80071e8 <__lshift>
 8006768:	9b00      	ldr	r3, [sp, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	9b00      	ldr	r3, [sp, #0]
 8006770:	444b      	add	r3, r9
 8006772:	9307      	str	r3, [sp, #28]
 8006774:	9b02      	ldr	r3, [sp, #8]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	46b8      	mov	r8, r7
 800677c:	9306      	str	r3, [sp, #24]
 800677e:	4607      	mov	r7, r0
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	4631      	mov	r1, r6
 8006784:	3b01      	subs	r3, #1
 8006786:	4658      	mov	r0, fp
 8006788:	9302      	str	r3, [sp, #8]
 800678a:	f7ff fa69 	bl	8005c60 <quorem>
 800678e:	4603      	mov	r3, r0
 8006790:	3330      	adds	r3, #48	; 0x30
 8006792:	9004      	str	r0, [sp, #16]
 8006794:	4641      	mov	r1, r8
 8006796:	4658      	mov	r0, fp
 8006798:	9308      	str	r3, [sp, #32]
 800679a:	f000 fd91 	bl	80072c0 <__mcmp>
 800679e:	463a      	mov	r2, r7
 80067a0:	4681      	mov	r9, r0
 80067a2:	4631      	mov	r1, r6
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 fda7 	bl	80072f8 <__mdiff>
 80067aa:	68c2      	ldr	r2, [r0, #12]
 80067ac:	9b08      	ldr	r3, [sp, #32]
 80067ae:	4605      	mov	r5, r0
 80067b0:	bb02      	cbnz	r2, 80067f4 <_dtoa_r+0xa7c>
 80067b2:	4601      	mov	r1, r0
 80067b4:	4658      	mov	r0, fp
 80067b6:	f000 fd83 	bl	80072c0 <__mcmp>
 80067ba:	9b08      	ldr	r3, [sp, #32]
 80067bc:	4602      	mov	r2, r0
 80067be:	4629      	mov	r1, r5
 80067c0:	4620      	mov	r0, r4
 80067c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80067c6:	f000 fb3d 	bl	8006e44 <_Bfree>
 80067ca:	9b05      	ldr	r3, [sp, #20]
 80067cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ce:	9d01      	ldr	r5, [sp, #4]
 80067d0:	ea43 0102 	orr.w	r1, r3, r2
 80067d4:	9b06      	ldr	r3, [sp, #24]
 80067d6:	430b      	orrs	r3, r1
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	d10d      	bne.n	80067f8 <_dtoa_r+0xa80>
 80067dc:	2b39      	cmp	r3, #57	; 0x39
 80067de:	d029      	beq.n	8006834 <_dtoa_r+0xabc>
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	dd01      	ble.n	80067ea <_dtoa_r+0xa72>
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	3331      	adds	r3, #49	; 0x31
 80067ea:	9a02      	ldr	r2, [sp, #8]
 80067ec:	7013      	strb	r3, [r2, #0]
 80067ee:	e774      	b.n	80066da <_dtoa_r+0x962>
 80067f0:	4638      	mov	r0, r7
 80067f2:	e7b9      	b.n	8006768 <_dtoa_r+0x9f0>
 80067f4:	2201      	movs	r2, #1
 80067f6:	e7e2      	b.n	80067be <_dtoa_r+0xa46>
 80067f8:	f1b9 0f00 	cmp.w	r9, #0
 80067fc:	db06      	blt.n	800680c <_dtoa_r+0xa94>
 80067fe:	9905      	ldr	r1, [sp, #20]
 8006800:	ea41 0909 	orr.w	r9, r1, r9
 8006804:	9906      	ldr	r1, [sp, #24]
 8006806:	ea59 0101 	orrs.w	r1, r9, r1
 800680a:	d120      	bne.n	800684e <_dtoa_r+0xad6>
 800680c:	2a00      	cmp	r2, #0
 800680e:	ddec      	ble.n	80067ea <_dtoa_r+0xa72>
 8006810:	4659      	mov	r1, fp
 8006812:	2201      	movs	r2, #1
 8006814:	4620      	mov	r0, r4
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	f000 fce6 	bl	80071e8 <__lshift>
 800681c:	4631      	mov	r1, r6
 800681e:	4683      	mov	fp, r0
 8006820:	f000 fd4e 	bl	80072c0 <__mcmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	dc02      	bgt.n	8006830 <_dtoa_r+0xab8>
 800682a:	d1de      	bne.n	80067ea <_dtoa_r+0xa72>
 800682c:	07da      	lsls	r2, r3, #31
 800682e:	d5dc      	bpl.n	80067ea <_dtoa_r+0xa72>
 8006830:	2b39      	cmp	r3, #57	; 0x39
 8006832:	d1d8      	bne.n	80067e6 <_dtoa_r+0xa6e>
 8006834:	9a02      	ldr	r2, [sp, #8]
 8006836:	2339      	movs	r3, #57	; 0x39
 8006838:	7013      	strb	r3, [r2, #0]
 800683a:	462b      	mov	r3, r5
 800683c:	461d      	mov	r5, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006844:	2a39      	cmp	r2, #57	; 0x39
 8006846:	d050      	beq.n	80068ea <_dtoa_r+0xb72>
 8006848:	3201      	adds	r2, #1
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e745      	b.n	80066da <_dtoa_r+0x962>
 800684e:	2a00      	cmp	r2, #0
 8006850:	dd03      	ble.n	800685a <_dtoa_r+0xae2>
 8006852:	2b39      	cmp	r3, #57	; 0x39
 8006854:	d0ee      	beq.n	8006834 <_dtoa_r+0xabc>
 8006856:	3301      	adds	r3, #1
 8006858:	e7c7      	b.n	80067ea <_dtoa_r+0xa72>
 800685a:	9a01      	ldr	r2, [sp, #4]
 800685c:	9907      	ldr	r1, [sp, #28]
 800685e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006862:	428a      	cmp	r2, r1
 8006864:	d02a      	beq.n	80068bc <_dtoa_r+0xb44>
 8006866:	4659      	mov	r1, fp
 8006868:	2300      	movs	r3, #0
 800686a:	220a      	movs	r2, #10
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fb0b 	bl	8006e88 <__multadd>
 8006872:	45b8      	cmp	r8, r7
 8006874:	4683      	mov	fp, r0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	f04f 020a 	mov.w	r2, #10
 800687e:	4641      	mov	r1, r8
 8006880:	4620      	mov	r0, r4
 8006882:	d107      	bne.n	8006894 <_dtoa_r+0xb1c>
 8006884:	f000 fb00 	bl	8006e88 <__multadd>
 8006888:	4680      	mov	r8, r0
 800688a:	4607      	mov	r7, r0
 800688c:	9b01      	ldr	r3, [sp, #4]
 800688e:	3301      	adds	r3, #1
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	e775      	b.n	8006780 <_dtoa_r+0xa08>
 8006894:	f000 faf8 	bl	8006e88 <__multadd>
 8006898:	4639      	mov	r1, r7
 800689a:	4680      	mov	r8, r0
 800689c:	2300      	movs	r3, #0
 800689e:	220a      	movs	r2, #10
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 faf1 	bl	8006e88 <__multadd>
 80068a6:	4607      	mov	r7, r0
 80068a8:	e7f0      	b.n	800688c <_dtoa_r+0xb14>
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	9a00      	ldr	r2, [sp, #0]
 80068b0:	bfcc      	ite	gt
 80068b2:	464d      	movgt	r5, r9
 80068b4:	2501      	movle	r5, #1
 80068b6:	4415      	add	r5, r2
 80068b8:	f04f 0800 	mov.w	r8, #0
 80068bc:	4659      	mov	r1, fp
 80068be:	2201      	movs	r2, #1
 80068c0:	4620      	mov	r0, r4
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	f000 fc90 	bl	80071e8 <__lshift>
 80068c8:	4631      	mov	r1, r6
 80068ca:	4683      	mov	fp, r0
 80068cc:	f000 fcf8 	bl	80072c0 <__mcmp>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	dcb2      	bgt.n	800683a <_dtoa_r+0xac2>
 80068d4:	d102      	bne.n	80068dc <_dtoa_r+0xb64>
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	07db      	lsls	r3, r3, #31
 80068da:	d4ae      	bmi.n	800683a <_dtoa_r+0xac2>
 80068dc:	462b      	mov	r3, r5
 80068de:	461d      	mov	r5, r3
 80068e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068e4:	2a30      	cmp	r2, #48	; 0x30
 80068e6:	d0fa      	beq.n	80068de <_dtoa_r+0xb66>
 80068e8:	e6f7      	b.n	80066da <_dtoa_r+0x962>
 80068ea:	9a00      	ldr	r2, [sp, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d1a5      	bne.n	800683c <_dtoa_r+0xac4>
 80068f0:	f10a 0a01 	add.w	sl, sl, #1
 80068f4:	2331      	movs	r3, #49	; 0x31
 80068f6:	e779      	b.n	80067ec <_dtoa_r+0xa74>
 80068f8:	4b13      	ldr	r3, [pc, #76]	; (8006948 <_dtoa_r+0xbd0>)
 80068fa:	f7ff baaf 	b.w	8005e5c <_dtoa_r+0xe4>
 80068fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006900:	2b00      	cmp	r3, #0
 8006902:	f47f aa86 	bne.w	8005e12 <_dtoa_r+0x9a>
 8006906:	4b11      	ldr	r3, [pc, #68]	; (800694c <_dtoa_r+0xbd4>)
 8006908:	f7ff baa8 	b.w	8005e5c <_dtoa_r+0xe4>
 800690c:	f1b9 0f00 	cmp.w	r9, #0
 8006910:	dc03      	bgt.n	800691a <_dtoa_r+0xba2>
 8006912:	9b05      	ldr	r3, [sp, #20]
 8006914:	2b02      	cmp	r3, #2
 8006916:	f73f aec9 	bgt.w	80066ac <_dtoa_r+0x934>
 800691a:	9d00      	ldr	r5, [sp, #0]
 800691c:	4631      	mov	r1, r6
 800691e:	4658      	mov	r0, fp
 8006920:	f7ff f99e 	bl	8005c60 <quorem>
 8006924:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006928:	f805 3b01 	strb.w	r3, [r5], #1
 800692c:	9a00      	ldr	r2, [sp, #0]
 800692e:	1aaa      	subs	r2, r5, r2
 8006930:	4591      	cmp	r9, r2
 8006932:	ddba      	ble.n	80068aa <_dtoa_r+0xb32>
 8006934:	4659      	mov	r1, fp
 8006936:	2300      	movs	r3, #0
 8006938:	220a      	movs	r2, #10
 800693a:	4620      	mov	r0, r4
 800693c:	f000 faa4 	bl	8006e88 <__multadd>
 8006940:	4683      	mov	fp, r0
 8006942:	e7eb      	b.n	800691c <_dtoa_r+0xba4>
 8006944:	08008237 	.word	0x08008237
 8006948:	08008190 	.word	0x08008190
 800694c:	080081b4 	.word	0x080081b4

08006950 <__sflush_r>:
 8006950:	898a      	ldrh	r2, [r1, #12]
 8006952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006956:	4605      	mov	r5, r0
 8006958:	0710      	lsls	r0, r2, #28
 800695a:	460c      	mov	r4, r1
 800695c:	d458      	bmi.n	8006a10 <__sflush_r+0xc0>
 800695e:	684b      	ldr	r3, [r1, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	dc05      	bgt.n	8006970 <__sflush_r+0x20>
 8006964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	dc02      	bgt.n	8006970 <__sflush_r+0x20>
 800696a:	2000      	movs	r0, #0
 800696c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006972:	2e00      	cmp	r6, #0
 8006974:	d0f9      	beq.n	800696a <__sflush_r+0x1a>
 8006976:	2300      	movs	r3, #0
 8006978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800697c:	682f      	ldr	r7, [r5, #0]
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	d032      	beq.n	80069e8 <__sflush_r+0x98>
 8006982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	075a      	lsls	r2, r3, #29
 8006988:	d505      	bpl.n	8006996 <__sflush_r+0x46>
 800698a:	6863      	ldr	r3, [r4, #4]
 800698c:	1ac0      	subs	r0, r0, r3
 800698e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006990:	b10b      	cbz	r3, 8006996 <__sflush_r+0x46>
 8006992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006994:	1ac0      	subs	r0, r0, r3
 8006996:	2300      	movs	r3, #0
 8006998:	4602      	mov	r2, r0
 800699a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800699c:	6a21      	ldr	r1, [r4, #32]
 800699e:	4628      	mov	r0, r5
 80069a0:	47b0      	blx	r6
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	d106      	bne.n	80069b6 <__sflush_r+0x66>
 80069a8:	6829      	ldr	r1, [r5, #0]
 80069aa:	291d      	cmp	r1, #29
 80069ac:	d82c      	bhi.n	8006a08 <__sflush_r+0xb8>
 80069ae:	4a2a      	ldr	r2, [pc, #168]	; (8006a58 <__sflush_r+0x108>)
 80069b0:	40ca      	lsrs	r2, r1
 80069b2:	07d6      	lsls	r6, r2, #31
 80069b4:	d528      	bpl.n	8006a08 <__sflush_r+0xb8>
 80069b6:	2200      	movs	r2, #0
 80069b8:	6062      	str	r2, [r4, #4]
 80069ba:	04d9      	lsls	r1, r3, #19
 80069bc:	6922      	ldr	r2, [r4, #16]
 80069be:	6022      	str	r2, [r4, #0]
 80069c0:	d504      	bpl.n	80069cc <__sflush_r+0x7c>
 80069c2:	1c42      	adds	r2, r0, #1
 80069c4:	d101      	bne.n	80069ca <__sflush_r+0x7a>
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	b903      	cbnz	r3, 80069cc <__sflush_r+0x7c>
 80069ca:	6560      	str	r0, [r4, #84]	; 0x54
 80069cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ce:	602f      	str	r7, [r5, #0]
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d0ca      	beq.n	800696a <__sflush_r+0x1a>
 80069d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d8:	4299      	cmp	r1, r3
 80069da:	d002      	beq.n	80069e2 <__sflush_r+0x92>
 80069dc:	4628      	mov	r0, r5
 80069de:	f000 fd7f 	bl	80074e0 <_free_r>
 80069e2:	2000      	movs	r0, #0
 80069e4:	6360      	str	r0, [r4, #52]	; 0x34
 80069e6:	e7c1      	b.n	800696c <__sflush_r+0x1c>
 80069e8:	6a21      	ldr	r1, [r4, #32]
 80069ea:	2301      	movs	r3, #1
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b0      	blx	r6
 80069f0:	1c41      	adds	r1, r0, #1
 80069f2:	d1c7      	bne.n	8006984 <__sflush_r+0x34>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0c4      	beq.n	8006984 <__sflush_r+0x34>
 80069fa:	2b1d      	cmp	r3, #29
 80069fc:	d001      	beq.n	8006a02 <__sflush_r+0xb2>
 80069fe:	2b16      	cmp	r3, #22
 8006a00:	d101      	bne.n	8006a06 <__sflush_r+0xb6>
 8006a02:	602f      	str	r7, [r5, #0]
 8006a04:	e7b1      	b.n	800696a <__sflush_r+0x1a>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	e7ad      	b.n	800696c <__sflush_r+0x1c>
 8006a10:	690f      	ldr	r7, [r1, #16]
 8006a12:	2f00      	cmp	r7, #0
 8006a14:	d0a9      	beq.n	800696a <__sflush_r+0x1a>
 8006a16:	0793      	lsls	r3, r2, #30
 8006a18:	680e      	ldr	r6, [r1, #0]
 8006a1a:	bf08      	it	eq
 8006a1c:	694b      	ldreq	r3, [r1, #20]
 8006a1e:	600f      	str	r7, [r1, #0]
 8006a20:	bf18      	it	ne
 8006a22:	2300      	movne	r3, #0
 8006a24:	eba6 0807 	sub.w	r8, r6, r7
 8006a28:	608b      	str	r3, [r1, #8]
 8006a2a:	f1b8 0f00 	cmp.w	r8, #0
 8006a2e:	dd9c      	ble.n	800696a <__sflush_r+0x1a>
 8006a30:	6a21      	ldr	r1, [r4, #32]
 8006a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a34:	4643      	mov	r3, r8
 8006a36:	463a      	mov	r2, r7
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b0      	blx	r6
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	dc06      	bgt.n	8006a4e <__sflush_r+0xfe>
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	e78e      	b.n	800696c <__sflush_r+0x1c>
 8006a4e:	4407      	add	r7, r0
 8006a50:	eba8 0800 	sub.w	r8, r8, r0
 8006a54:	e7e9      	b.n	8006a2a <__sflush_r+0xda>
 8006a56:	bf00      	nop
 8006a58:	20400001 	.word	0x20400001

08006a5c <_fflush_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	690b      	ldr	r3, [r1, #16]
 8006a60:	4605      	mov	r5, r0
 8006a62:	460c      	mov	r4, r1
 8006a64:	b913      	cbnz	r3, 8006a6c <_fflush_r+0x10>
 8006a66:	2500      	movs	r5, #0
 8006a68:	4628      	mov	r0, r5
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	b118      	cbz	r0, 8006a76 <_fflush_r+0x1a>
 8006a6e:	6983      	ldr	r3, [r0, #24]
 8006a70:	b90b      	cbnz	r3, 8006a76 <_fflush_r+0x1a>
 8006a72:	f000 f887 	bl	8006b84 <__sinit>
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <_fflush_r+0x6c>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	d11b      	bne.n	8006ab4 <_fflush_r+0x58>
 8006a7c:	686c      	ldr	r4, [r5, #4]
 8006a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0ef      	beq.n	8006a66 <_fflush_r+0xa>
 8006a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a88:	07d0      	lsls	r0, r2, #31
 8006a8a:	d404      	bmi.n	8006a96 <_fflush_r+0x3a>
 8006a8c:	0599      	lsls	r1, r3, #22
 8006a8e:	d402      	bmi.n	8006a96 <_fflush_r+0x3a>
 8006a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a92:	f000 f91a 	bl	8006cca <__retarget_lock_acquire_recursive>
 8006a96:	4628      	mov	r0, r5
 8006a98:	4621      	mov	r1, r4
 8006a9a:	f7ff ff59 	bl	8006950 <__sflush_r>
 8006a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa0:	07da      	lsls	r2, r3, #31
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	d4e0      	bmi.n	8006a68 <_fflush_r+0xc>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	059b      	lsls	r3, r3, #22
 8006aaa:	d4dd      	bmi.n	8006a68 <_fflush_r+0xc>
 8006aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aae:	f000 f90d 	bl	8006ccc <__retarget_lock_release_recursive>
 8006ab2:	e7d9      	b.n	8006a68 <_fflush_r+0xc>
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <_fflush_r+0x70>)
 8006ab6:	429c      	cmp	r4, r3
 8006ab8:	d101      	bne.n	8006abe <_fflush_r+0x62>
 8006aba:	68ac      	ldr	r4, [r5, #8]
 8006abc:	e7df      	b.n	8006a7e <_fflush_r+0x22>
 8006abe:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <_fflush_r+0x74>)
 8006ac0:	429c      	cmp	r4, r3
 8006ac2:	bf08      	it	eq
 8006ac4:	68ec      	ldreq	r4, [r5, #12]
 8006ac6:	e7da      	b.n	8006a7e <_fflush_r+0x22>
 8006ac8:	08008268 	.word	0x08008268
 8006acc:	08008288 	.word	0x08008288
 8006ad0:	08008248 	.word	0x08008248

08006ad4 <std>:
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	4604      	mov	r4, r0
 8006ada:	e9c0 3300 	strd	r3, r3, [r0]
 8006ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ae2:	6083      	str	r3, [r0, #8]
 8006ae4:	8181      	strh	r1, [r0, #12]
 8006ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae8:	81c2      	strh	r2, [r0, #14]
 8006aea:	6183      	str	r3, [r0, #24]
 8006aec:	4619      	mov	r1, r3
 8006aee:	2208      	movs	r2, #8
 8006af0:	305c      	adds	r0, #92	; 0x5c
 8006af2:	f7fe faed 	bl	80050d0 <memset>
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <std+0x38>)
 8006af8:	6263      	str	r3, [r4, #36]	; 0x24
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x3c>)
 8006afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x40>)
 8006b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <std+0x44>)
 8006b04:	6224      	str	r4, [r4, #32]
 8006b06:	6323      	str	r3, [r4, #48]	; 0x30
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	08007bc1 	.word	0x08007bc1
 8006b10:	08007be3 	.word	0x08007be3
 8006b14:	08007c1b 	.word	0x08007c1b
 8006b18:	08007c3f 	.word	0x08007c3f

08006b1c <_cleanup_r>:
 8006b1c:	4901      	ldr	r1, [pc, #4]	; (8006b24 <_cleanup_r+0x8>)
 8006b1e:	f000 b8af 	b.w	8006c80 <_fwalk_reent>
 8006b22:	bf00      	nop
 8006b24:	08006a5d 	.word	0x08006a5d

08006b28 <__sfmoreglue>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	1e4a      	subs	r2, r1, #1
 8006b2c:	2568      	movs	r5, #104	; 0x68
 8006b2e:	4355      	muls	r5, r2
 8006b30:	460e      	mov	r6, r1
 8006b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b36:	f000 fd23 	bl	8007580 <_malloc_r>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	b140      	cbz	r0, 8006b50 <__sfmoreglue+0x28>
 8006b3e:	2100      	movs	r1, #0
 8006b40:	e9c0 1600 	strd	r1, r6, [r0]
 8006b44:	300c      	adds	r0, #12
 8006b46:	60a0      	str	r0, [r4, #8]
 8006b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b4c:	f7fe fac0 	bl	80050d0 <memset>
 8006b50:	4620      	mov	r0, r4
 8006b52:	bd70      	pop	{r4, r5, r6, pc}

08006b54 <__sfp_lock_acquire>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__sfp_lock_acquire+0x8>)
 8006b56:	f000 b8b8 	b.w	8006cca <__retarget_lock_acquire_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	200003ac 	.word	0x200003ac

08006b60 <__sfp_lock_release>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__sfp_lock_release+0x8>)
 8006b62:	f000 b8b3 	b.w	8006ccc <__retarget_lock_release_recursive>
 8006b66:	bf00      	nop
 8006b68:	200003ac 	.word	0x200003ac

08006b6c <__sinit_lock_acquire>:
 8006b6c:	4801      	ldr	r0, [pc, #4]	; (8006b74 <__sinit_lock_acquire+0x8>)
 8006b6e:	f000 b8ac 	b.w	8006cca <__retarget_lock_acquire_recursive>
 8006b72:	bf00      	nop
 8006b74:	200003a7 	.word	0x200003a7

08006b78 <__sinit_lock_release>:
 8006b78:	4801      	ldr	r0, [pc, #4]	; (8006b80 <__sinit_lock_release+0x8>)
 8006b7a:	f000 b8a7 	b.w	8006ccc <__retarget_lock_release_recursive>
 8006b7e:	bf00      	nop
 8006b80:	200003a7 	.word	0x200003a7

08006b84 <__sinit>:
 8006b84:	b510      	push	{r4, lr}
 8006b86:	4604      	mov	r4, r0
 8006b88:	f7ff fff0 	bl	8006b6c <__sinit_lock_acquire>
 8006b8c:	69a3      	ldr	r3, [r4, #24]
 8006b8e:	b11b      	cbz	r3, 8006b98 <__sinit+0x14>
 8006b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b94:	f7ff bff0 	b.w	8006b78 <__sinit_lock_release>
 8006b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <__sinit+0x68>)
 8006ba0:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <__sinit+0x6c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	bf04      	itt	eq
 8006baa:	2301      	moveq	r3, #1
 8006bac:	61a3      	streq	r3, [r4, #24]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 f820 	bl	8006bf4 <__sfp>
 8006bb4:	6060      	str	r0, [r4, #4]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 f81c 	bl	8006bf4 <__sfp>
 8006bbc:	60a0      	str	r0, [r4, #8]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 f818 	bl	8006bf4 <__sfp>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	60e0      	str	r0, [r4, #12]
 8006bc8:	2104      	movs	r1, #4
 8006bca:	6860      	ldr	r0, [r4, #4]
 8006bcc:	f7ff ff82 	bl	8006ad4 <std>
 8006bd0:	68a0      	ldr	r0, [r4, #8]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	2109      	movs	r1, #9
 8006bd6:	f7ff ff7d 	bl	8006ad4 <std>
 8006bda:	68e0      	ldr	r0, [r4, #12]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	2112      	movs	r1, #18
 8006be0:	f7ff ff78 	bl	8006ad4 <std>
 8006be4:	2301      	movs	r3, #1
 8006be6:	61a3      	str	r3, [r4, #24]
 8006be8:	e7d2      	b.n	8006b90 <__sinit+0xc>
 8006bea:	bf00      	nop
 8006bec:	0800817c 	.word	0x0800817c
 8006bf0:	08006b1d 	.word	0x08006b1d

08006bf4 <__sfp>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	f7ff ffac 	bl	8006b54 <__sfp_lock_acquire>
 8006bfc:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <__sfp+0x84>)
 8006bfe:	681e      	ldr	r6, [r3, #0]
 8006c00:	69b3      	ldr	r3, [r6, #24]
 8006c02:	b913      	cbnz	r3, 8006c0a <__sfp+0x16>
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7ff ffbd 	bl	8006b84 <__sinit>
 8006c0a:	3648      	adds	r6, #72	; 0x48
 8006c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	d503      	bpl.n	8006c1c <__sfp+0x28>
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	b30b      	cbz	r3, 8006c5c <__sfp+0x68>
 8006c18:	6836      	ldr	r6, [r6, #0]
 8006c1a:	e7f7      	b.n	8006c0c <__sfp+0x18>
 8006c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c20:	b9d5      	cbnz	r5, 8006c58 <__sfp+0x64>
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <__sfp+0x88>)
 8006c24:	60e3      	str	r3, [r4, #12]
 8006c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c2c:	f000 f84c 	bl	8006cc8 <__retarget_lock_init_recursive>
 8006c30:	f7ff ff96 	bl	8006b60 <__sfp_lock_release>
 8006c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c3c:	6025      	str	r5, [r4, #0]
 8006c3e:	61a5      	str	r5, [r4, #24]
 8006c40:	2208      	movs	r2, #8
 8006c42:	4629      	mov	r1, r5
 8006c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c48:	f7fe fa42 	bl	80050d0 <memset>
 8006c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c54:	4620      	mov	r0, r4
 8006c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c58:	3468      	adds	r4, #104	; 0x68
 8006c5a:	e7d9      	b.n	8006c10 <__sfp+0x1c>
 8006c5c:	2104      	movs	r1, #4
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f7ff ff62 	bl	8006b28 <__sfmoreglue>
 8006c64:	4604      	mov	r4, r0
 8006c66:	6030      	str	r0, [r6, #0]
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d1d5      	bne.n	8006c18 <__sfp+0x24>
 8006c6c:	f7ff ff78 	bl	8006b60 <__sfp_lock_release>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	e7ee      	b.n	8006c54 <__sfp+0x60>
 8006c76:	bf00      	nop
 8006c78:	0800817c 	.word	0x0800817c
 8006c7c:	ffff0001 	.word	0xffff0001

08006c80 <_fwalk_reent>:
 8006c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c84:	4606      	mov	r6, r0
 8006c86:	4688      	mov	r8, r1
 8006c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c8c:	2700      	movs	r7, #0
 8006c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c92:	f1b9 0901 	subs.w	r9, r9, #1
 8006c96:	d505      	bpl.n	8006ca4 <_fwalk_reent+0x24>
 8006c98:	6824      	ldr	r4, [r4, #0]
 8006c9a:	2c00      	cmp	r4, #0
 8006c9c:	d1f7      	bne.n	8006c8e <_fwalk_reent+0xe>
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca4:	89ab      	ldrh	r3, [r5, #12]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d907      	bls.n	8006cba <_fwalk_reent+0x3a>
 8006caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	d003      	beq.n	8006cba <_fwalk_reent+0x3a>
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	47c0      	blx	r8
 8006cb8:	4307      	orrs	r7, r0
 8006cba:	3568      	adds	r5, #104	; 0x68
 8006cbc:	e7e9      	b.n	8006c92 <_fwalk_reent+0x12>
	...

08006cc0 <_localeconv_r>:
 8006cc0:	4800      	ldr	r0, [pc, #0]	; (8006cc4 <_localeconv_r+0x4>)
 8006cc2:	4770      	bx	lr
 8006cc4:	20000160 	.word	0x20000160

08006cc8 <__retarget_lock_init_recursive>:
 8006cc8:	4770      	bx	lr

08006cca <__retarget_lock_acquire_recursive>:
 8006cca:	4770      	bx	lr

08006ccc <__retarget_lock_release_recursive>:
 8006ccc:	4770      	bx	lr

08006cce <__swhatbuf_r>:
 8006cce:	b570      	push	{r4, r5, r6, lr}
 8006cd0:	460e      	mov	r6, r1
 8006cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	b096      	sub	sp, #88	; 0x58
 8006cda:	4614      	mov	r4, r2
 8006cdc:	461d      	mov	r5, r3
 8006cde:	da07      	bge.n	8006cf0 <__swhatbuf_r+0x22>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	89b3      	ldrh	r3, [r6, #12]
 8006ce6:	061a      	lsls	r2, r3, #24
 8006ce8:	d410      	bmi.n	8006d0c <__swhatbuf_r+0x3e>
 8006cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cee:	e00e      	b.n	8006d0e <__swhatbuf_r+0x40>
 8006cf0:	466a      	mov	r2, sp
 8006cf2:	f000 fffb 	bl	8007cec <_fstat_r>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	dbf2      	blt.n	8006ce0 <__swhatbuf_r+0x12>
 8006cfa:	9a01      	ldr	r2, [sp, #4]
 8006cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d04:	425a      	negs	r2, r3
 8006d06:	415a      	adcs	r2, r3
 8006d08:	602a      	str	r2, [r5, #0]
 8006d0a:	e7ee      	b.n	8006cea <__swhatbuf_r+0x1c>
 8006d0c:	2340      	movs	r3, #64	; 0x40
 8006d0e:	2000      	movs	r0, #0
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	b016      	add	sp, #88	; 0x58
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d18 <__smakebuf_r>:
 8006d18:	898b      	ldrh	r3, [r1, #12]
 8006d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d1c:	079d      	lsls	r5, r3, #30
 8006d1e:	4606      	mov	r6, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	d507      	bpl.n	8006d34 <__smakebuf_r+0x1c>
 8006d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	6163      	str	r3, [r4, #20]
 8006d30:	b002      	add	sp, #8
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	ab01      	add	r3, sp, #4
 8006d36:	466a      	mov	r2, sp
 8006d38:	f7ff ffc9 	bl	8006cce <__swhatbuf_r>
 8006d3c:	9900      	ldr	r1, [sp, #0]
 8006d3e:	4605      	mov	r5, r0
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 fc1d 	bl	8007580 <_malloc_r>
 8006d46:	b948      	cbnz	r0, 8006d5c <__smakebuf_r+0x44>
 8006d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d4c:	059a      	lsls	r2, r3, #22
 8006d4e:	d4ef      	bmi.n	8006d30 <__smakebuf_r+0x18>
 8006d50:	f023 0303 	bic.w	r3, r3, #3
 8006d54:	f043 0302 	orr.w	r3, r3, #2
 8006d58:	81a3      	strh	r3, [r4, #12]
 8006d5a:	e7e3      	b.n	8006d24 <__smakebuf_r+0xc>
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <__smakebuf_r+0x7c>)
 8006d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	6020      	str	r0, [r4, #0]
 8006d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	9b00      	ldr	r3, [sp, #0]
 8006d6c:	6163      	str	r3, [r4, #20]
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	6120      	str	r0, [r4, #16]
 8006d72:	b15b      	cbz	r3, 8006d8c <__smakebuf_r+0x74>
 8006d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f000 ffc9 	bl	8007d10 <_isatty_r>
 8006d7e:	b128      	cbz	r0, 8006d8c <__smakebuf_r+0x74>
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	f043 0301 	orr.w	r3, r3, #1
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	89a0      	ldrh	r0, [r4, #12]
 8006d8e:	4305      	orrs	r5, r0
 8006d90:	81a5      	strh	r5, [r4, #12]
 8006d92:	e7cd      	b.n	8006d30 <__smakebuf_r+0x18>
 8006d94:	08006b1d 	.word	0x08006b1d

08006d98 <malloc>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <malloc+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f000 bbef 	b.w	8007580 <_malloc_r>
 8006da2:	bf00      	nop
 8006da4:	2000000c 	.word	0x2000000c

08006da8 <memcpy>:
 8006da8:	440a      	add	r2, r1
 8006daa:	4291      	cmp	r1, r2
 8006dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006db0:	d100      	bne.n	8006db4 <memcpy+0xc>
 8006db2:	4770      	bx	lr
 8006db4:	b510      	push	{r4, lr}
 8006db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dbe:	4291      	cmp	r1, r2
 8006dc0:	d1f9      	bne.n	8006db6 <memcpy+0xe>
 8006dc2:	bd10      	pop	{r4, pc}

08006dc4 <_Balloc>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc8:	4604      	mov	r4, r0
 8006dca:	460d      	mov	r5, r1
 8006dcc:	b976      	cbnz	r6, 8006dec <_Balloc+0x28>
 8006dce:	2010      	movs	r0, #16
 8006dd0:	f7ff ffe2 	bl	8006d98 <malloc>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6260      	str	r0, [r4, #36]	; 0x24
 8006dd8:	b920      	cbnz	r0, 8006de4 <_Balloc+0x20>
 8006dda:	4b18      	ldr	r3, [pc, #96]	; (8006e3c <_Balloc+0x78>)
 8006ddc:	4818      	ldr	r0, [pc, #96]	; (8006e40 <_Balloc+0x7c>)
 8006dde:	2166      	movs	r1, #102	; 0x66
 8006de0:	f000 ff44 	bl	8007c6c <__assert_func>
 8006de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de8:	6006      	str	r6, [r0, #0]
 8006dea:	60c6      	str	r6, [r0, #12]
 8006dec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dee:	68f3      	ldr	r3, [r6, #12]
 8006df0:	b183      	cbz	r3, 8006e14 <_Balloc+0x50>
 8006df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dfa:	b9b8      	cbnz	r0, 8006e2c <_Balloc+0x68>
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f605 	lsl.w	r6, r1, r5
 8006e02:	1d72      	adds	r2, r6, #5
 8006e04:	0092      	lsls	r2, r2, #2
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 fb5a 	bl	80074c0 <_calloc_r>
 8006e0c:	b160      	cbz	r0, 8006e28 <_Balloc+0x64>
 8006e0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e12:	e00e      	b.n	8006e32 <_Balloc+0x6e>
 8006e14:	2221      	movs	r2, #33	; 0x21
 8006e16:	2104      	movs	r1, #4
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 fb51 	bl	80074c0 <_calloc_r>
 8006e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e20:	60f0      	str	r0, [r6, #12]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e4      	bne.n	8006df2 <_Balloc+0x2e>
 8006e28:	2000      	movs	r0, #0
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	6802      	ldr	r2, [r0, #0]
 8006e2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e32:	2300      	movs	r3, #0
 8006e34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e38:	e7f7      	b.n	8006e2a <_Balloc+0x66>
 8006e3a:	bf00      	nop
 8006e3c:	080081c1 	.word	0x080081c1
 8006e40:	080082a8 	.word	0x080082a8

08006e44 <_Bfree>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e48:	4605      	mov	r5, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	b976      	cbnz	r6, 8006e6c <_Bfree+0x28>
 8006e4e:	2010      	movs	r0, #16
 8006e50:	f7ff ffa2 	bl	8006d98 <malloc>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6268      	str	r0, [r5, #36]	; 0x24
 8006e58:	b920      	cbnz	r0, 8006e64 <_Bfree+0x20>
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <_Bfree+0x3c>)
 8006e5c:	4809      	ldr	r0, [pc, #36]	; (8006e84 <_Bfree+0x40>)
 8006e5e:	218a      	movs	r1, #138	; 0x8a
 8006e60:	f000 ff04 	bl	8007c6c <__assert_func>
 8006e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e68:	6006      	str	r6, [r0, #0]
 8006e6a:	60c6      	str	r6, [r0, #12]
 8006e6c:	b13c      	cbz	r4, 8006e7e <_Bfree+0x3a>
 8006e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e70:	6862      	ldr	r2, [r4, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e78:	6021      	str	r1, [r4, #0]
 8006e7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	080081c1 	.word	0x080081c1
 8006e84:	080082a8 	.word	0x080082a8

08006e88 <__multadd>:
 8006e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8c:	690e      	ldr	r6, [r1, #16]
 8006e8e:	4607      	mov	r7, r0
 8006e90:	4698      	mov	r8, r3
 8006e92:	460c      	mov	r4, r1
 8006e94:	f101 0014 	add.w	r0, r1, #20
 8006e98:	2300      	movs	r3, #0
 8006e9a:	6805      	ldr	r5, [r0, #0]
 8006e9c:	b2a9      	uxth	r1, r5
 8006e9e:	fb02 8101 	mla	r1, r2, r1, r8
 8006ea2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006ea6:	0c2d      	lsrs	r5, r5, #16
 8006ea8:	fb02 c505 	mla	r5, r2, r5, ip
 8006eac:	b289      	uxth	r1, r1
 8006eae:	3301      	adds	r3, #1
 8006eb0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006eb4:	429e      	cmp	r6, r3
 8006eb6:	f840 1b04 	str.w	r1, [r0], #4
 8006eba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ebe:	dcec      	bgt.n	8006e9a <__multadd+0x12>
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	d022      	beq.n	8006f0c <__multadd+0x84>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	42b3      	cmp	r3, r6
 8006eca:	dc19      	bgt.n	8006f00 <__multadd+0x78>
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4638      	mov	r0, r7
 8006ed0:	3101      	adds	r1, #1
 8006ed2:	f7ff ff77 	bl	8006dc4 <_Balloc>
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	b928      	cbnz	r0, 8006ee6 <__multadd+0x5e>
 8006eda:	4602      	mov	r2, r0
 8006edc:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <__multadd+0x8c>)
 8006ede:	480e      	ldr	r0, [pc, #56]	; (8006f18 <__multadd+0x90>)
 8006ee0:	21b5      	movs	r1, #181	; 0xb5
 8006ee2:	f000 fec3 	bl	8007c6c <__assert_func>
 8006ee6:	6922      	ldr	r2, [r4, #16]
 8006ee8:	3202      	adds	r2, #2
 8006eea:	f104 010c 	add.w	r1, r4, #12
 8006eee:	0092      	lsls	r2, r2, #2
 8006ef0:	300c      	adds	r0, #12
 8006ef2:	f7ff ff59 	bl	8006da8 <memcpy>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff ffa3 	bl	8006e44 <_Bfree>
 8006efe:	462c      	mov	r4, r5
 8006f00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f04:	3601      	adds	r6, #1
 8006f06:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f0a:	6126      	str	r6, [r4, #16]
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f12:	bf00      	nop
 8006f14:	08008237 	.word	0x08008237
 8006f18:	080082a8 	.word	0x080082a8

08006f1c <__hi0bits>:
 8006f1c:	0c03      	lsrs	r3, r0, #16
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	b9d3      	cbnz	r3, 8006f58 <__hi0bits+0x3c>
 8006f22:	0400      	lsls	r0, r0, #16
 8006f24:	2310      	movs	r3, #16
 8006f26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f2a:	bf04      	itt	eq
 8006f2c:	0200      	lsleq	r0, r0, #8
 8006f2e:	3308      	addeq	r3, #8
 8006f30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f34:	bf04      	itt	eq
 8006f36:	0100      	lsleq	r0, r0, #4
 8006f38:	3304      	addeq	r3, #4
 8006f3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f3e:	bf04      	itt	eq
 8006f40:	0080      	lsleq	r0, r0, #2
 8006f42:	3302      	addeq	r3, #2
 8006f44:	2800      	cmp	r0, #0
 8006f46:	db05      	blt.n	8006f54 <__hi0bits+0x38>
 8006f48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f4c:	f103 0301 	add.w	r3, r3, #1
 8006f50:	bf08      	it	eq
 8006f52:	2320      	moveq	r3, #32
 8006f54:	4618      	mov	r0, r3
 8006f56:	4770      	bx	lr
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e7e4      	b.n	8006f26 <__hi0bits+0xa>

08006f5c <__lo0bits>:
 8006f5c:	6803      	ldr	r3, [r0, #0]
 8006f5e:	f013 0207 	ands.w	r2, r3, #7
 8006f62:	4601      	mov	r1, r0
 8006f64:	d00b      	beq.n	8006f7e <__lo0bits+0x22>
 8006f66:	07da      	lsls	r2, r3, #31
 8006f68:	d424      	bmi.n	8006fb4 <__lo0bits+0x58>
 8006f6a:	0798      	lsls	r0, r3, #30
 8006f6c:	bf49      	itett	mi
 8006f6e:	085b      	lsrmi	r3, r3, #1
 8006f70:	089b      	lsrpl	r3, r3, #2
 8006f72:	2001      	movmi	r0, #1
 8006f74:	600b      	strmi	r3, [r1, #0]
 8006f76:	bf5c      	itt	pl
 8006f78:	600b      	strpl	r3, [r1, #0]
 8006f7a:	2002      	movpl	r0, #2
 8006f7c:	4770      	bx	lr
 8006f7e:	b298      	uxth	r0, r3
 8006f80:	b9b0      	cbnz	r0, 8006fb0 <__lo0bits+0x54>
 8006f82:	0c1b      	lsrs	r3, r3, #16
 8006f84:	2010      	movs	r0, #16
 8006f86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f8a:	bf04      	itt	eq
 8006f8c:	0a1b      	lsreq	r3, r3, #8
 8006f8e:	3008      	addeq	r0, #8
 8006f90:	071a      	lsls	r2, r3, #28
 8006f92:	bf04      	itt	eq
 8006f94:	091b      	lsreq	r3, r3, #4
 8006f96:	3004      	addeq	r0, #4
 8006f98:	079a      	lsls	r2, r3, #30
 8006f9a:	bf04      	itt	eq
 8006f9c:	089b      	lsreq	r3, r3, #2
 8006f9e:	3002      	addeq	r0, #2
 8006fa0:	07da      	lsls	r2, r3, #31
 8006fa2:	d403      	bmi.n	8006fac <__lo0bits+0x50>
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	f100 0001 	add.w	r0, r0, #1
 8006faa:	d005      	beq.n	8006fb8 <__lo0bits+0x5c>
 8006fac:	600b      	str	r3, [r1, #0]
 8006fae:	4770      	bx	lr
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	e7e8      	b.n	8006f86 <__lo0bits+0x2a>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4770      	bx	lr
 8006fb8:	2020      	movs	r0, #32
 8006fba:	4770      	bx	lr

08006fbc <__i2b>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	f7ff feff 	bl	8006dc4 <_Balloc>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	b928      	cbnz	r0, 8006fd6 <__i2b+0x1a>
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <__i2b+0x24>)
 8006fcc:	4805      	ldr	r0, [pc, #20]	; (8006fe4 <__i2b+0x28>)
 8006fce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fd2:	f000 fe4b 	bl	8007c6c <__assert_func>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	6144      	str	r4, [r0, #20]
 8006fda:	6103      	str	r3, [r0, #16]
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	bf00      	nop
 8006fe0:	08008237 	.word	0x08008237
 8006fe4:	080082a8 	.word	0x080082a8

08006fe8 <__multiply>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4614      	mov	r4, r2
 8006fee:	690a      	ldr	r2, [r1, #16]
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	bfb8      	it	lt
 8006ff6:	460b      	movlt	r3, r1
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	bfbc      	itt	lt
 8006ffc:	4625      	movlt	r5, r4
 8006ffe:	461c      	movlt	r4, r3
 8007000:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007004:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007008:	68ab      	ldr	r3, [r5, #8]
 800700a:	6869      	ldr	r1, [r5, #4]
 800700c:	eb0a 0709 	add.w	r7, sl, r9
 8007010:	42bb      	cmp	r3, r7
 8007012:	b085      	sub	sp, #20
 8007014:	bfb8      	it	lt
 8007016:	3101      	addlt	r1, #1
 8007018:	f7ff fed4 	bl	8006dc4 <_Balloc>
 800701c:	b930      	cbnz	r0, 800702c <__multiply+0x44>
 800701e:	4602      	mov	r2, r0
 8007020:	4b42      	ldr	r3, [pc, #264]	; (800712c <__multiply+0x144>)
 8007022:	4843      	ldr	r0, [pc, #268]	; (8007130 <__multiply+0x148>)
 8007024:	f240 115d 	movw	r1, #349	; 0x15d
 8007028:	f000 fe20 	bl	8007c6c <__assert_func>
 800702c:	f100 0614 	add.w	r6, r0, #20
 8007030:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007034:	4633      	mov	r3, r6
 8007036:	2200      	movs	r2, #0
 8007038:	4543      	cmp	r3, r8
 800703a:	d31e      	bcc.n	800707a <__multiply+0x92>
 800703c:	f105 0c14 	add.w	ip, r5, #20
 8007040:	f104 0314 	add.w	r3, r4, #20
 8007044:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007048:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800704c:	9202      	str	r2, [sp, #8]
 800704e:	ebac 0205 	sub.w	r2, ip, r5
 8007052:	3a15      	subs	r2, #21
 8007054:	f022 0203 	bic.w	r2, r2, #3
 8007058:	3204      	adds	r2, #4
 800705a:	f105 0115 	add.w	r1, r5, #21
 800705e:	458c      	cmp	ip, r1
 8007060:	bf38      	it	cc
 8007062:	2204      	movcc	r2, #4
 8007064:	9201      	str	r2, [sp, #4]
 8007066:	9a02      	ldr	r2, [sp, #8]
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	429a      	cmp	r2, r3
 800706c:	d808      	bhi.n	8007080 <__multiply+0x98>
 800706e:	2f00      	cmp	r7, #0
 8007070:	dc55      	bgt.n	800711e <__multiply+0x136>
 8007072:	6107      	str	r7, [r0, #16]
 8007074:	b005      	add	sp, #20
 8007076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707a:	f843 2b04 	str.w	r2, [r3], #4
 800707e:	e7db      	b.n	8007038 <__multiply+0x50>
 8007080:	f8b3 a000 	ldrh.w	sl, [r3]
 8007084:	f1ba 0f00 	cmp.w	sl, #0
 8007088:	d020      	beq.n	80070cc <__multiply+0xe4>
 800708a:	f105 0e14 	add.w	lr, r5, #20
 800708e:	46b1      	mov	r9, r6
 8007090:	2200      	movs	r2, #0
 8007092:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007096:	f8d9 b000 	ldr.w	fp, [r9]
 800709a:	b2a1      	uxth	r1, r4
 800709c:	fa1f fb8b 	uxth.w	fp, fp
 80070a0:	fb0a b101 	mla	r1, sl, r1, fp
 80070a4:	4411      	add	r1, r2
 80070a6:	f8d9 2000 	ldr.w	r2, [r9]
 80070aa:	0c24      	lsrs	r4, r4, #16
 80070ac:	0c12      	lsrs	r2, r2, #16
 80070ae:	fb0a 2404 	mla	r4, sl, r4, r2
 80070b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80070b6:	b289      	uxth	r1, r1
 80070b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070bc:	45f4      	cmp	ip, lr
 80070be:	f849 1b04 	str.w	r1, [r9], #4
 80070c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80070c6:	d8e4      	bhi.n	8007092 <__multiply+0xaa>
 80070c8:	9901      	ldr	r1, [sp, #4]
 80070ca:	5072      	str	r2, [r6, r1]
 80070cc:	9a03      	ldr	r2, [sp, #12]
 80070ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070d2:	3304      	adds	r3, #4
 80070d4:	f1b9 0f00 	cmp.w	r9, #0
 80070d8:	d01f      	beq.n	800711a <__multiply+0x132>
 80070da:	6834      	ldr	r4, [r6, #0]
 80070dc:	f105 0114 	add.w	r1, r5, #20
 80070e0:	46b6      	mov	lr, r6
 80070e2:	f04f 0a00 	mov.w	sl, #0
 80070e6:	880a      	ldrh	r2, [r1, #0]
 80070e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80070ec:	fb09 b202 	mla	r2, r9, r2, fp
 80070f0:	4492      	add	sl, r2
 80070f2:	b2a4      	uxth	r4, r4
 80070f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80070f8:	f84e 4b04 	str.w	r4, [lr], #4
 80070fc:	f851 4b04 	ldr.w	r4, [r1], #4
 8007100:	f8be 2000 	ldrh.w	r2, [lr]
 8007104:	0c24      	lsrs	r4, r4, #16
 8007106:	fb09 2404 	mla	r4, r9, r4, r2
 800710a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800710e:	458c      	cmp	ip, r1
 8007110:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007114:	d8e7      	bhi.n	80070e6 <__multiply+0xfe>
 8007116:	9a01      	ldr	r2, [sp, #4]
 8007118:	50b4      	str	r4, [r6, r2]
 800711a:	3604      	adds	r6, #4
 800711c:	e7a3      	b.n	8007066 <__multiply+0x7e>
 800711e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1a5      	bne.n	8007072 <__multiply+0x8a>
 8007126:	3f01      	subs	r7, #1
 8007128:	e7a1      	b.n	800706e <__multiply+0x86>
 800712a:	bf00      	nop
 800712c:	08008237 	.word	0x08008237
 8007130:	080082a8 	.word	0x080082a8

08007134 <__pow5mult>:
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	4615      	mov	r5, r2
 800713a:	f012 0203 	ands.w	r2, r2, #3
 800713e:	4606      	mov	r6, r0
 8007140:	460f      	mov	r7, r1
 8007142:	d007      	beq.n	8007154 <__pow5mult+0x20>
 8007144:	4c25      	ldr	r4, [pc, #148]	; (80071dc <__pow5mult+0xa8>)
 8007146:	3a01      	subs	r2, #1
 8007148:	2300      	movs	r3, #0
 800714a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800714e:	f7ff fe9b 	bl	8006e88 <__multadd>
 8007152:	4607      	mov	r7, r0
 8007154:	10ad      	asrs	r5, r5, #2
 8007156:	d03d      	beq.n	80071d4 <__pow5mult+0xa0>
 8007158:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800715a:	b97c      	cbnz	r4, 800717c <__pow5mult+0x48>
 800715c:	2010      	movs	r0, #16
 800715e:	f7ff fe1b 	bl	8006d98 <malloc>
 8007162:	4602      	mov	r2, r0
 8007164:	6270      	str	r0, [r6, #36]	; 0x24
 8007166:	b928      	cbnz	r0, 8007174 <__pow5mult+0x40>
 8007168:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <__pow5mult+0xac>)
 800716a:	481e      	ldr	r0, [pc, #120]	; (80071e4 <__pow5mult+0xb0>)
 800716c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007170:	f000 fd7c 	bl	8007c6c <__assert_func>
 8007174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007178:	6004      	str	r4, [r0, #0]
 800717a:	60c4      	str	r4, [r0, #12]
 800717c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007184:	b94c      	cbnz	r4, 800719a <__pow5mult+0x66>
 8007186:	f240 2171 	movw	r1, #625	; 0x271
 800718a:	4630      	mov	r0, r6
 800718c:	f7ff ff16 	bl	8006fbc <__i2b>
 8007190:	2300      	movs	r3, #0
 8007192:	f8c8 0008 	str.w	r0, [r8, #8]
 8007196:	4604      	mov	r4, r0
 8007198:	6003      	str	r3, [r0, #0]
 800719a:	f04f 0900 	mov.w	r9, #0
 800719e:	07eb      	lsls	r3, r5, #31
 80071a0:	d50a      	bpl.n	80071b8 <__pow5mult+0x84>
 80071a2:	4639      	mov	r1, r7
 80071a4:	4622      	mov	r2, r4
 80071a6:	4630      	mov	r0, r6
 80071a8:	f7ff ff1e 	bl	8006fe8 <__multiply>
 80071ac:	4639      	mov	r1, r7
 80071ae:	4680      	mov	r8, r0
 80071b0:	4630      	mov	r0, r6
 80071b2:	f7ff fe47 	bl	8006e44 <_Bfree>
 80071b6:	4647      	mov	r7, r8
 80071b8:	106d      	asrs	r5, r5, #1
 80071ba:	d00b      	beq.n	80071d4 <__pow5mult+0xa0>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	b938      	cbnz	r0, 80071d0 <__pow5mult+0x9c>
 80071c0:	4622      	mov	r2, r4
 80071c2:	4621      	mov	r1, r4
 80071c4:	4630      	mov	r0, r6
 80071c6:	f7ff ff0f 	bl	8006fe8 <__multiply>
 80071ca:	6020      	str	r0, [r4, #0]
 80071cc:	f8c0 9000 	str.w	r9, [r0]
 80071d0:	4604      	mov	r4, r0
 80071d2:	e7e4      	b.n	800719e <__pow5mult+0x6a>
 80071d4:	4638      	mov	r0, r7
 80071d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071da:	bf00      	nop
 80071dc:	080083f8 	.word	0x080083f8
 80071e0:	080081c1 	.word	0x080081c1
 80071e4:	080082a8 	.word	0x080082a8

080071e8 <__lshift>:
 80071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	460c      	mov	r4, r1
 80071ee:	6849      	ldr	r1, [r1, #4]
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071f6:	68a3      	ldr	r3, [r4, #8]
 80071f8:	4607      	mov	r7, r0
 80071fa:	4691      	mov	r9, r2
 80071fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007200:	f108 0601 	add.w	r6, r8, #1
 8007204:	42b3      	cmp	r3, r6
 8007206:	db0b      	blt.n	8007220 <__lshift+0x38>
 8007208:	4638      	mov	r0, r7
 800720a:	f7ff fddb 	bl	8006dc4 <_Balloc>
 800720e:	4605      	mov	r5, r0
 8007210:	b948      	cbnz	r0, 8007226 <__lshift+0x3e>
 8007212:	4602      	mov	r2, r0
 8007214:	4b28      	ldr	r3, [pc, #160]	; (80072b8 <__lshift+0xd0>)
 8007216:	4829      	ldr	r0, [pc, #164]	; (80072bc <__lshift+0xd4>)
 8007218:	f240 11d9 	movw	r1, #473	; 0x1d9
 800721c:	f000 fd26 	bl	8007c6c <__assert_func>
 8007220:	3101      	adds	r1, #1
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	e7ee      	b.n	8007204 <__lshift+0x1c>
 8007226:	2300      	movs	r3, #0
 8007228:	f100 0114 	add.w	r1, r0, #20
 800722c:	f100 0210 	add.w	r2, r0, #16
 8007230:	4618      	mov	r0, r3
 8007232:	4553      	cmp	r3, sl
 8007234:	db33      	blt.n	800729e <__lshift+0xb6>
 8007236:	6920      	ldr	r0, [r4, #16]
 8007238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800723c:	f104 0314 	add.w	r3, r4, #20
 8007240:	f019 091f 	ands.w	r9, r9, #31
 8007244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800724c:	d02b      	beq.n	80072a6 <__lshift+0xbe>
 800724e:	f1c9 0e20 	rsb	lr, r9, #32
 8007252:	468a      	mov	sl, r1
 8007254:	2200      	movs	r2, #0
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	fa00 f009 	lsl.w	r0, r0, r9
 800725c:	4302      	orrs	r2, r0
 800725e:	f84a 2b04 	str.w	r2, [sl], #4
 8007262:	f853 2b04 	ldr.w	r2, [r3], #4
 8007266:	459c      	cmp	ip, r3
 8007268:	fa22 f20e 	lsr.w	r2, r2, lr
 800726c:	d8f3      	bhi.n	8007256 <__lshift+0x6e>
 800726e:	ebac 0304 	sub.w	r3, ip, r4
 8007272:	3b15      	subs	r3, #21
 8007274:	f023 0303 	bic.w	r3, r3, #3
 8007278:	3304      	adds	r3, #4
 800727a:	f104 0015 	add.w	r0, r4, #21
 800727e:	4584      	cmp	ip, r0
 8007280:	bf38      	it	cc
 8007282:	2304      	movcc	r3, #4
 8007284:	50ca      	str	r2, [r1, r3]
 8007286:	b10a      	cbz	r2, 800728c <__lshift+0xa4>
 8007288:	f108 0602 	add.w	r6, r8, #2
 800728c:	3e01      	subs	r6, #1
 800728e:	4638      	mov	r0, r7
 8007290:	612e      	str	r6, [r5, #16]
 8007292:	4621      	mov	r1, r4
 8007294:	f7ff fdd6 	bl	8006e44 <_Bfree>
 8007298:	4628      	mov	r0, r5
 800729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729e:	f842 0f04 	str.w	r0, [r2, #4]!
 80072a2:	3301      	adds	r3, #1
 80072a4:	e7c5      	b.n	8007232 <__lshift+0x4a>
 80072a6:	3904      	subs	r1, #4
 80072a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80072b0:	459c      	cmp	ip, r3
 80072b2:	d8f9      	bhi.n	80072a8 <__lshift+0xc0>
 80072b4:	e7ea      	b.n	800728c <__lshift+0xa4>
 80072b6:	bf00      	nop
 80072b8:	08008237 	.word	0x08008237
 80072bc:	080082a8 	.word	0x080082a8

080072c0 <__mcmp>:
 80072c0:	b530      	push	{r4, r5, lr}
 80072c2:	6902      	ldr	r2, [r0, #16]
 80072c4:	690c      	ldr	r4, [r1, #16]
 80072c6:	1b12      	subs	r2, r2, r4
 80072c8:	d10e      	bne.n	80072e8 <__mcmp+0x28>
 80072ca:	f100 0314 	add.w	r3, r0, #20
 80072ce:	3114      	adds	r1, #20
 80072d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072e0:	42a5      	cmp	r5, r4
 80072e2:	d003      	beq.n	80072ec <__mcmp+0x2c>
 80072e4:	d305      	bcc.n	80072f2 <__mcmp+0x32>
 80072e6:	2201      	movs	r2, #1
 80072e8:	4610      	mov	r0, r2
 80072ea:	bd30      	pop	{r4, r5, pc}
 80072ec:	4283      	cmp	r3, r0
 80072ee:	d3f3      	bcc.n	80072d8 <__mcmp+0x18>
 80072f0:	e7fa      	b.n	80072e8 <__mcmp+0x28>
 80072f2:	f04f 32ff 	mov.w	r2, #4294967295
 80072f6:	e7f7      	b.n	80072e8 <__mcmp+0x28>

080072f8 <__mdiff>:
 80072f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	460c      	mov	r4, r1
 80072fe:	4606      	mov	r6, r0
 8007300:	4611      	mov	r1, r2
 8007302:	4620      	mov	r0, r4
 8007304:	4617      	mov	r7, r2
 8007306:	f7ff ffdb 	bl	80072c0 <__mcmp>
 800730a:	1e05      	subs	r5, r0, #0
 800730c:	d110      	bne.n	8007330 <__mdiff+0x38>
 800730e:	4629      	mov	r1, r5
 8007310:	4630      	mov	r0, r6
 8007312:	f7ff fd57 	bl	8006dc4 <_Balloc>
 8007316:	b930      	cbnz	r0, 8007326 <__mdiff+0x2e>
 8007318:	4b39      	ldr	r3, [pc, #228]	; (8007400 <__mdiff+0x108>)
 800731a:	4602      	mov	r2, r0
 800731c:	f240 2132 	movw	r1, #562	; 0x232
 8007320:	4838      	ldr	r0, [pc, #224]	; (8007404 <__mdiff+0x10c>)
 8007322:	f000 fca3 	bl	8007c6c <__assert_func>
 8007326:	2301      	movs	r3, #1
 8007328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800732c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007330:	bfa4      	itt	ge
 8007332:	463b      	movge	r3, r7
 8007334:	4627      	movge	r7, r4
 8007336:	4630      	mov	r0, r6
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	bfa6      	itte	ge
 800733c:	461c      	movge	r4, r3
 800733e:	2500      	movge	r5, #0
 8007340:	2501      	movlt	r5, #1
 8007342:	f7ff fd3f 	bl	8006dc4 <_Balloc>
 8007346:	b920      	cbnz	r0, 8007352 <__mdiff+0x5a>
 8007348:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <__mdiff+0x108>)
 800734a:	4602      	mov	r2, r0
 800734c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007350:	e7e6      	b.n	8007320 <__mdiff+0x28>
 8007352:	693e      	ldr	r6, [r7, #16]
 8007354:	60c5      	str	r5, [r0, #12]
 8007356:	6925      	ldr	r5, [r4, #16]
 8007358:	f107 0114 	add.w	r1, r7, #20
 800735c:	f104 0914 	add.w	r9, r4, #20
 8007360:	f100 0e14 	add.w	lr, r0, #20
 8007364:	f107 0210 	add.w	r2, r7, #16
 8007368:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800736c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007370:	46f2      	mov	sl, lr
 8007372:	2700      	movs	r7, #0
 8007374:	f859 3b04 	ldr.w	r3, [r9], #4
 8007378:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800737c:	fa1f f883 	uxth.w	r8, r3
 8007380:	fa17 f78b 	uxtah	r7, r7, fp
 8007384:	0c1b      	lsrs	r3, r3, #16
 8007386:	eba7 0808 	sub.w	r8, r7, r8
 800738a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800738e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007392:	fa1f f888 	uxth.w	r8, r8
 8007396:	141f      	asrs	r7, r3, #16
 8007398:	454d      	cmp	r5, r9
 800739a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800739e:	f84a 3b04 	str.w	r3, [sl], #4
 80073a2:	d8e7      	bhi.n	8007374 <__mdiff+0x7c>
 80073a4:	1b2b      	subs	r3, r5, r4
 80073a6:	3b15      	subs	r3, #21
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	3304      	adds	r3, #4
 80073ae:	3415      	adds	r4, #21
 80073b0:	42a5      	cmp	r5, r4
 80073b2:	bf38      	it	cc
 80073b4:	2304      	movcc	r3, #4
 80073b6:	4419      	add	r1, r3
 80073b8:	4473      	add	r3, lr
 80073ba:	469e      	mov	lr, r3
 80073bc:	460d      	mov	r5, r1
 80073be:	4565      	cmp	r5, ip
 80073c0:	d30e      	bcc.n	80073e0 <__mdiff+0xe8>
 80073c2:	f10c 0203 	add.w	r2, ip, #3
 80073c6:	1a52      	subs	r2, r2, r1
 80073c8:	f022 0203 	bic.w	r2, r2, #3
 80073cc:	3903      	subs	r1, #3
 80073ce:	458c      	cmp	ip, r1
 80073d0:	bf38      	it	cc
 80073d2:	2200      	movcc	r2, #0
 80073d4:	441a      	add	r2, r3
 80073d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073da:	b17b      	cbz	r3, 80073fc <__mdiff+0x104>
 80073dc:	6106      	str	r6, [r0, #16]
 80073de:	e7a5      	b.n	800732c <__mdiff+0x34>
 80073e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80073e4:	fa17 f488 	uxtah	r4, r7, r8
 80073e8:	1422      	asrs	r2, r4, #16
 80073ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80073ee:	b2a4      	uxth	r4, r4
 80073f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80073f4:	f84e 4b04 	str.w	r4, [lr], #4
 80073f8:	1417      	asrs	r7, r2, #16
 80073fa:	e7e0      	b.n	80073be <__mdiff+0xc6>
 80073fc:	3e01      	subs	r6, #1
 80073fe:	e7ea      	b.n	80073d6 <__mdiff+0xde>
 8007400:	08008237 	.word	0x08008237
 8007404:	080082a8 	.word	0x080082a8

08007408 <__d2b>:
 8007408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800740c:	4689      	mov	r9, r1
 800740e:	2101      	movs	r1, #1
 8007410:	ec57 6b10 	vmov	r6, r7, d0
 8007414:	4690      	mov	r8, r2
 8007416:	f7ff fcd5 	bl	8006dc4 <_Balloc>
 800741a:	4604      	mov	r4, r0
 800741c:	b930      	cbnz	r0, 800742c <__d2b+0x24>
 800741e:	4602      	mov	r2, r0
 8007420:	4b25      	ldr	r3, [pc, #148]	; (80074b8 <__d2b+0xb0>)
 8007422:	4826      	ldr	r0, [pc, #152]	; (80074bc <__d2b+0xb4>)
 8007424:	f240 310a 	movw	r1, #778	; 0x30a
 8007428:	f000 fc20 	bl	8007c6c <__assert_func>
 800742c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007430:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007434:	bb35      	cbnz	r5, 8007484 <__d2b+0x7c>
 8007436:	2e00      	cmp	r6, #0
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	d028      	beq.n	800748e <__d2b+0x86>
 800743c:	4668      	mov	r0, sp
 800743e:	9600      	str	r6, [sp, #0]
 8007440:	f7ff fd8c 	bl	8006f5c <__lo0bits>
 8007444:	9900      	ldr	r1, [sp, #0]
 8007446:	b300      	cbz	r0, 800748a <__d2b+0x82>
 8007448:	9a01      	ldr	r2, [sp, #4]
 800744a:	f1c0 0320 	rsb	r3, r0, #32
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	430b      	orrs	r3, r1
 8007454:	40c2      	lsrs	r2, r0
 8007456:	6163      	str	r3, [r4, #20]
 8007458:	9201      	str	r2, [sp, #4]
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	61a3      	str	r3, [r4, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf14      	ite	ne
 8007462:	2202      	movne	r2, #2
 8007464:	2201      	moveq	r2, #1
 8007466:	6122      	str	r2, [r4, #16]
 8007468:	b1d5      	cbz	r5, 80074a0 <__d2b+0x98>
 800746a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800746e:	4405      	add	r5, r0
 8007470:	f8c9 5000 	str.w	r5, [r9]
 8007474:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007478:	f8c8 0000 	str.w	r0, [r8]
 800747c:	4620      	mov	r0, r4
 800747e:	b003      	add	sp, #12
 8007480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007488:	e7d5      	b.n	8007436 <__d2b+0x2e>
 800748a:	6161      	str	r1, [r4, #20]
 800748c:	e7e5      	b.n	800745a <__d2b+0x52>
 800748e:	a801      	add	r0, sp, #4
 8007490:	f7ff fd64 	bl	8006f5c <__lo0bits>
 8007494:	9b01      	ldr	r3, [sp, #4]
 8007496:	6163      	str	r3, [r4, #20]
 8007498:	2201      	movs	r2, #1
 800749a:	6122      	str	r2, [r4, #16]
 800749c:	3020      	adds	r0, #32
 800749e:	e7e3      	b.n	8007468 <__d2b+0x60>
 80074a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074a8:	f8c9 0000 	str.w	r0, [r9]
 80074ac:	6918      	ldr	r0, [r3, #16]
 80074ae:	f7ff fd35 	bl	8006f1c <__hi0bits>
 80074b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074b6:	e7df      	b.n	8007478 <__d2b+0x70>
 80074b8:	08008237 	.word	0x08008237
 80074bc:	080082a8 	.word	0x080082a8

080074c0 <_calloc_r>:
 80074c0:	b513      	push	{r0, r1, r4, lr}
 80074c2:	434a      	muls	r2, r1
 80074c4:	4611      	mov	r1, r2
 80074c6:	9201      	str	r2, [sp, #4]
 80074c8:	f000 f85a 	bl	8007580 <_malloc_r>
 80074cc:	4604      	mov	r4, r0
 80074ce:	b118      	cbz	r0, 80074d8 <_calloc_r+0x18>
 80074d0:	9a01      	ldr	r2, [sp, #4]
 80074d2:	2100      	movs	r1, #0
 80074d4:	f7fd fdfc 	bl	80050d0 <memset>
 80074d8:	4620      	mov	r0, r4
 80074da:	b002      	add	sp, #8
 80074dc:	bd10      	pop	{r4, pc}
	...

080074e0 <_free_r>:
 80074e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074e2:	2900      	cmp	r1, #0
 80074e4:	d048      	beq.n	8007578 <_free_r+0x98>
 80074e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ea:	9001      	str	r0, [sp, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f1a1 0404 	sub.w	r4, r1, #4
 80074f2:	bfb8      	it	lt
 80074f4:	18e4      	addlt	r4, r4, r3
 80074f6:	f000 fc59 	bl	8007dac <__malloc_lock>
 80074fa:	4a20      	ldr	r2, [pc, #128]	; (800757c <_free_r+0x9c>)
 80074fc:	9801      	ldr	r0, [sp, #4]
 80074fe:	6813      	ldr	r3, [r2, #0]
 8007500:	4615      	mov	r5, r2
 8007502:	b933      	cbnz	r3, 8007512 <_free_r+0x32>
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	6014      	str	r4, [r2, #0]
 8007508:	b003      	add	sp, #12
 800750a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800750e:	f000 bc53 	b.w	8007db8 <__malloc_unlock>
 8007512:	42a3      	cmp	r3, r4
 8007514:	d90b      	bls.n	800752e <_free_r+0x4e>
 8007516:	6821      	ldr	r1, [r4, #0]
 8007518:	1862      	adds	r2, r4, r1
 800751a:	4293      	cmp	r3, r2
 800751c:	bf04      	itt	eq
 800751e:	681a      	ldreq	r2, [r3, #0]
 8007520:	685b      	ldreq	r3, [r3, #4]
 8007522:	6063      	str	r3, [r4, #4]
 8007524:	bf04      	itt	eq
 8007526:	1852      	addeq	r2, r2, r1
 8007528:	6022      	streq	r2, [r4, #0]
 800752a:	602c      	str	r4, [r5, #0]
 800752c:	e7ec      	b.n	8007508 <_free_r+0x28>
 800752e:	461a      	mov	r2, r3
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	b10b      	cbz	r3, 8007538 <_free_r+0x58>
 8007534:	42a3      	cmp	r3, r4
 8007536:	d9fa      	bls.n	800752e <_free_r+0x4e>
 8007538:	6811      	ldr	r1, [r2, #0]
 800753a:	1855      	adds	r5, r2, r1
 800753c:	42a5      	cmp	r5, r4
 800753e:	d10b      	bne.n	8007558 <_free_r+0x78>
 8007540:	6824      	ldr	r4, [r4, #0]
 8007542:	4421      	add	r1, r4
 8007544:	1854      	adds	r4, r2, r1
 8007546:	42a3      	cmp	r3, r4
 8007548:	6011      	str	r1, [r2, #0]
 800754a:	d1dd      	bne.n	8007508 <_free_r+0x28>
 800754c:	681c      	ldr	r4, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	6053      	str	r3, [r2, #4]
 8007552:	4421      	add	r1, r4
 8007554:	6011      	str	r1, [r2, #0]
 8007556:	e7d7      	b.n	8007508 <_free_r+0x28>
 8007558:	d902      	bls.n	8007560 <_free_r+0x80>
 800755a:	230c      	movs	r3, #12
 800755c:	6003      	str	r3, [r0, #0]
 800755e:	e7d3      	b.n	8007508 <_free_r+0x28>
 8007560:	6825      	ldr	r5, [r4, #0]
 8007562:	1961      	adds	r1, r4, r5
 8007564:	428b      	cmp	r3, r1
 8007566:	bf04      	itt	eq
 8007568:	6819      	ldreq	r1, [r3, #0]
 800756a:	685b      	ldreq	r3, [r3, #4]
 800756c:	6063      	str	r3, [r4, #4]
 800756e:	bf04      	itt	eq
 8007570:	1949      	addeq	r1, r1, r5
 8007572:	6021      	streq	r1, [r4, #0]
 8007574:	6054      	str	r4, [r2, #4]
 8007576:	e7c7      	b.n	8007508 <_free_r+0x28>
 8007578:	b003      	add	sp, #12
 800757a:	bd30      	pop	{r4, r5, pc}
 800757c:	20000200 	.word	0x20000200

08007580 <_malloc_r>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	1ccd      	adds	r5, r1, #3
 8007584:	f025 0503 	bic.w	r5, r5, #3
 8007588:	3508      	adds	r5, #8
 800758a:	2d0c      	cmp	r5, #12
 800758c:	bf38      	it	cc
 800758e:	250c      	movcc	r5, #12
 8007590:	2d00      	cmp	r5, #0
 8007592:	4606      	mov	r6, r0
 8007594:	db01      	blt.n	800759a <_malloc_r+0x1a>
 8007596:	42a9      	cmp	r1, r5
 8007598:	d903      	bls.n	80075a2 <_malloc_r+0x22>
 800759a:	230c      	movs	r3, #12
 800759c:	6033      	str	r3, [r6, #0]
 800759e:	2000      	movs	r0, #0
 80075a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a2:	f000 fc03 	bl	8007dac <__malloc_lock>
 80075a6:	4921      	ldr	r1, [pc, #132]	; (800762c <_malloc_r+0xac>)
 80075a8:	680a      	ldr	r2, [r1, #0]
 80075aa:	4614      	mov	r4, r2
 80075ac:	b99c      	cbnz	r4, 80075d6 <_malloc_r+0x56>
 80075ae:	4f20      	ldr	r7, [pc, #128]	; (8007630 <_malloc_r+0xb0>)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	b923      	cbnz	r3, 80075be <_malloc_r+0x3e>
 80075b4:	4621      	mov	r1, r4
 80075b6:	4630      	mov	r0, r6
 80075b8:	f000 faf2 	bl	8007ba0 <_sbrk_r>
 80075bc:	6038      	str	r0, [r7, #0]
 80075be:	4629      	mov	r1, r5
 80075c0:	4630      	mov	r0, r6
 80075c2:	f000 faed 	bl	8007ba0 <_sbrk_r>
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	d123      	bne.n	8007612 <_malloc_r+0x92>
 80075ca:	230c      	movs	r3, #12
 80075cc:	6033      	str	r3, [r6, #0]
 80075ce:	4630      	mov	r0, r6
 80075d0:	f000 fbf2 	bl	8007db8 <__malloc_unlock>
 80075d4:	e7e3      	b.n	800759e <_malloc_r+0x1e>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	1b5b      	subs	r3, r3, r5
 80075da:	d417      	bmi.n	800760c <_malloc_r+0x8c>
 80075dc:	2b0b      	cmp	r3, #11
 80075de:	d903      	bls.n	80075e8 <_malloc_r+0x68>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	441c      	add	r4, r3
 80075e4:	6025      	str	r5, [r4, #0]
 80075e6:	e004      	b.n	80075f2 <_malloc_r+0x72>
 80075e8:	6863      	ldr	r3, [r4, #4]
 80075ea:	42a2      	cmp	r2, r4
 80075ec:	bf0c      	ite	eq
 80075ee:	600b      	streq	r3, [r1, #0]
 80075f0:	6053      	strne	r3, [r2, #4]
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 fbe0 	bl	8007db8 <__malloc_unlock>
 80075f8:	f104 000b 	add.w	r0, r4, #11
 80075fc:	1d23      	adds	r3, r4, #4
 80075fe:	f020 0007 	bic.w	r0, r0, #7
 8007602:	1ac2      	subs	r2, r0, r3
 8007604:	d0cc      	beq.n	80075a0 <_malloc_r+0x20>
 8007606:	1a1b      	subs	r3, r3, r0
 8007608:	50a3      	str	r3, [r4, r2]
 800760a:	e7c9      	b.n	80075a0 <_malloc_r+0x20>
 800760c:	4622      	mov	r2, r4
 800760e:	6864      	ldr	r4, [r4, #4]
 8007610:	e7cc      	b.n	80075ac <_malloc_r+0x2c>
 8007612:	1cc4      	adds	r4, r0, #3
 8007614:	f024 0403 	bic.w	r4, r4, #3
 8007618:	42a0      	cmp	r0, r4
 800761a:	d0e3      	beq.n	80075e4 <_malloc_r+0x64>
 800761c:	1a21      	subs	r1, r4, r0
 800761e:	4630      	mov	r0, r6
 8007620:	f000 fabe 	bl	8007ba0 <_sbrk_r>
 8007624:	3001      	adds	r0, #1
 8007626:	d1dd      	bne.n	80075e4 <_malloc_r+0x64>
 8007628:	e7cf      	b.n	80075ca <_malloc_r+0x4a>
 800762a:	bf00      	nop
 800762c:	20000200 	.word	0x20000200
 8007630:	20000204 	.word	0x20000204

08007634 <__ssputs_r>:
 8007634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	688e      	ldr	r6, [r1, #8]
 800763a:	429e      	cmp	r6, r3
 800763c:	4682      	mov	sl, r0
 800763e:	460c      	mov	r4, r1
 8007640:	4690      	mov	r8, r2
 8007642:	461f      	mov	r7, r3
 8007644:	d838      	bhi.n	80076b8 <__ssputs_r+0x84>
 8007646:	898a      	ldrh	r2, [r1, #12]
 8007648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800764c:	d032      	beq.n	80076b4 <__ssputs_r+0x80>
 800764e:	6825      	ldr	r5, [r4, #0]
 8007650:	6909      	ldr	r1, [r1, #16]
 8007652:	eba5 0901 	sub.w	r9, r5, r1
 8007656:	6965      	ldr	r5, [r4, #20]
 8007658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800765c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007660:	3301      	adds	r3, #1
 8007662:	444b      	add	r3, r9
 8007664:	106d      	asrs	r5, r5, #1
 8007666:	429d      	cmp	r5, r3
 8007668:	bf38      	it	cc
 800766a:	461d      	movcc	r5, r3
 800766c:	0553      	lsls	r3, r2, #21
 800766e:	d531      	bpl.n	80076d4 <__ssputs_r+0xa0>
 8007670:	4629      	mov	r1, r5
 8007672:	f7ff ff85 	bl	8007580 <_malloc_r>
 8007676:	4606      	mov	r6, r0
 8007678:	b950      	cbnz	r0, 8007690 <__ssputs_r+0x5c>
 800767a:	230c      	movs	r3, #12
 800767c:	f8ca 3000 	str.w	r3, [sl]
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007690:	6921      	ldr	r1, [r4, #16]
 8007692:	464a      	mov	r2, r9
 8007694:	f7ff fb88 	bl	8006da8 <memcpy>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800769e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a2:	81a3      	strh	r3, [r4, #12]
 80076a4:	6126      	str	r6, [r4, #16]
 80076a6:	6165      	str	r5, [r4, #20]
 80076a8:	444e      	add	r6, r9
 80076aa:	eba5 0509 	sub.w	r5, r5, r9
 80076ae:	6026      	str	r6, [r4, #0]
 80076b0:	60a5      	str	r5, [r4, #8]
 80076b2:	463e      	mov	r6, r7
 80076b4:	42be      	cmp	r6, r7
 80076b6:	d900      	bls.n	80076ba <__ssputs_r+0x86>
 80076b8:	463e      	mov	r6, r7
 80076ba:	4632      	mov	r2, r6
 80076bc:	6820      	ldr	r0, [r4, #0]
 80076be:	4641      	mov	r1, r8
 80076c0:	f000 fb5a 	bl	8007d78 <memmove>
 80076c4:	68a3      	ldr	r3, [r4, #8]
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	1b9b      	subs	r3, r3, r6
 80076ca:	4432      	add	r2, r6
 80076cc:	60a3      	str	r3, [r4, #8]
 80076ce:	6022      	str	r2, [r4, #0]
 80076d0:	2000      	movs	r0, #0
 80076d2:	e7db      	b.n	800768c <__ssputs_r+0x58>
 80076d4:	462a      	mov	r2, r5
 80076d6:	f000 fb75 	bl	8007dc4 <_realloc_r>
 80076da:	4606      	mov	r6, r0
 80076dc:	2800      	cmp	r0, #0
 80076de:	d1e1      	bne.n	80076a4 <__ssputs_r+0x70>
 80076e0:	6921      	ldr	r1, [r4, #16]
 80076e2:	4650      	mov	r0, sl
 80076e4:	f7ff fefc 	bl	80074e0 <_free_r>
 80076e8:	e7c7      	b.n	800767a <__ssputs_r+0x46>
	...

080076ec <_svfiprintf_r>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	4698      	mov	r8, r3
 80076f2:	898b      	ldrh	r3, [r1, #12]
 80076f4:	061b      	lsls	r3, r3, #24
 80076f6:	b09d      	sub	sp, #116	; 0x74
 80076f8:	4607      	mov	r7, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	d50e      	bpl.n	800771e <_svfiprintf_r+0x32>
 8007700:	690b      	ldr	r3, [r1, #16]
 8007702:	b963      	cbnz	r3, 800771e <_svfiprintf_r+0x32>
 8007704:	2140      	movs	r1, #64	; 0x40
 8007706:	f7ff ff3b 	bl	8007580 <_malloc_r>
 800770a:	6028      	str	r0, [r5, #0]
 800770c:	6128      	str	r0, [r5, #16]
 800770e:	b920      	cbnz	r0, 800771a <_svfiprintf_r+0x2e>
 8007710:	230c      	movs	r3, #12
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e0d1      	b.n	80078be <_svfiprintf_r+0x1d2>
 800771a:	2340      	movs	r3, #64	; 0x40
 800771c:	616b      	str	r3, [r5, #20]
 800771e:	2300      	movs	r3, #0
 8007720:	9309      	str	r3, [sp, #36]	; 0x24
 8007722:	2320      	movs	r3, #32
 8007724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007728:	f8cd 800c 	str.w	r8, [sp, #12]
 800772c:	2330      	movs	r3, #48	; 0x30
 800772e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078d8 <_svfiprintf_r+0x1ec>
 8007732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007736:	f04f 0901 	mov.w	r9, #1
 800773a:	4623      	mov	r3, r4
 800773c:	469a      	mov	sl, r3
 800773e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007742:	b10a      	cbz	r2, 8007748 <_svfiprintf_r+0x5c>
 8007744:	2a25      	cmp	r2, #37	; 0x25
 8007746:	d1f9      	bne.n	800773c <_svfiprintf_r+0x50>
 8007748:	ebba 0b04 	subs.w	fp, sl, r4
 800774c:	d00b      	beq.n	8007766 <_svfiprintf_r+0x7a>
 800774e:	465b      	mov	r3, fp
 8007750:	4622      	mov	r2, r4
 8007752:	4629      	mov	r1, r5
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff ff6d 	bl	8007634 <__ssputs_r>
 800775a:	3001      	adds	r0, #1
 800775c:	f000 80aa 	beq.w	80078b4 <_svfiprintf_r+0x1c8>
 8007760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007762:	445a      	add	r2, fp
 8007764:	9209      	str	r2, [sp, #36]	; 0x24
 8007766:	f89a 3000 	ldrb.w	r3, [sl]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80a2 	beq.w	80078b4 <_svfiprintf_r+0x1c8>
 8007770:	2300      	movs	r3, #0
 8007772:	f04f 32ff 	mov.w	r2, #4294967295
 8007776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800777a:	f10a 0a01 	add.w	sl, sl, #1
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	9307      	str	r3, [sp, #28]
 8007782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007786:	931a      	str	r3, [sp, #104]	; 0x68
 8007788:	4654      	mov	r4, sl
 800778a:	2205      	movs	r2, #5
 800778c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007790:	4851      	ldr	r0, [pc, #324]	; (80078d8 <_svfiprintf_r+0x1ec>)
 8007792:	f7f8 fd45 	bl	8000220 <memchr>
 8007796:	9a04      	ldr	r2, [sp, #16]
 8007798:	b9d8      	cbnz	r0, 80077d2 <_svfiprintf_r+0xe6>
 800779a:	06d0      	lsls	r0, r2, #27
 800779c:	bf44      	itt	mi
 800779e:	2320      	movmi	r3, #32
 80077a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a4:	0711      	lsls	r1, r2, #28
 80077a6:	bf44      	itt	mi
 80077a8:	232b      	movmi	r3, #43	; 0x2b
 80077aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ae:	f89a 3000 	ldrb.w	r3, [sl]
 80077b2:	2b2a      	cmp	r3, #42	; 0x2a
 80077b4:	d015      	beq.n	80077e2 <_svfiprintf_r+0xf6>
 80077b6:	9a07      	ldr	r2, [sp, #28]
 80077b8:	4654      	mov	r4, sl
 80077ba:	2000      	movs	r0, #0
 80077bc:	f04f 0c0a 	mov.w	ip, #10
 80077c0:	4621      	mov	r1, r4
 80077c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c6:	3b30      	subs	r3, #48	; 0x30
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d94e      	bls.n	800786a <_svfiprintf_r+0x17e>
 80077cc:	b1b0      	cbz	r0, 80077fc <_svfiprintf_r+0x110>
 80077ce:	9207      	str	r2, [sp, #28]
 80077d0:	e014      	b.n	80077fc <_svfiprintf_r+0x110>
 80077d2:	eba0 0308 	sub.w	r3, r0, r8
 80077d6:	fa09 f303 	lsl.w	r3, r9, r3
 80077da:	4313      	orrs	r3, r2
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	46a2      	mov	sl, r4
 80077e0:	e7d2      	b.n	8007788 <_svfiprintf_r+0x9c>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	1d19      	adds	r1, r3, #4
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	9103      	str	r1, [sp, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	bfbb      	ittet	lt
 80077ee:	425b      	neglt	r3, r3
 80077f0:	f042 0202 	orrlt.w	r2, r2, #2
 80077f4:	9307      	strge	r3, [sp, #28]
 80077f6:	9307      	strlt	r3, [sp, #28]
 80077f8:	bfb8      	it	lt
 80077fa:	9204      	strlt	r2, [sp, #16]
 80077fc:	7823      	ldrb	r3, [r4, #0]
 80077fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007800:	d10c      	bne.n	800781c <_svfiprintf_r+0x130>
 8007802:	7863      	ldrb	r3, [r4, #1]
 8007804:	2b2a      	cmp	r3, #42	; 0x2a
 8007806:	d135      	bne.n	8007874 <_svfiprintf_r+0x188>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	1d1a      	adds	r2, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	9203      	str	r2, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfb8      	it	lt
 8007814:	f04f 33ff 	movlt.w	r3, #4294967295
 8007818:	3402      	adds	r4, #2
 800781a:	9305      	str	r3, [sp, #20]
 800781c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078e8 <_svfiprintf_r+0x1fc>
 8007820:	7821      	ldrb	r1, [r4, #0]
 8007822:	2203      	movs	r2, #3
 8007824:	4650      	mov	r0, sl
 8007826:	f7f8 fcfb 	bl	8000220 <memchr>
 800782a:	b140      	cbz	r0, 800783e <_svfiprintf_r+0x152>
 800782c:	2340      	movs	r3, #64	; 0x40
 800782e:	eba0 000a 	sub.w	r0, r0, sl
 8007832:	fa03 f000 	lsl.w	r0, r3, r0
 8007836:	9b04      	ldr	r3, [sp, #16]
 8007838:	4303      	orrs	r3, r0
 800783a:	3401      	adds	r4, #1
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007842:	4826      	ldr	r0, [pc, #152]	; (80078dc <_svfiprintf_r+0x1f0>)
 8007844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007848:	2206      	movs	r2, #6
 800784a:	f7f8 fce9 	bl	8000220 <memchr>
 800784e:	2800      	cmp	r0, #0
 8007850:	d038      	beq.n	80078c4 <_svfiprintf_r+0x1d8>
 8007852:	4b23      	ldr	r3, [pc, #140]	; (80078e0 <_svfiprintf_r+0x1f4>)
 8007854:	bb1b      	cbnz	r3, 800789e <_svfiprintf_r+0x1b2>
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	3307      	adds	r3, #7
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	3308      	adds	r3, #8
 8007860:	9303      	str	r3, [sp, #12]
 8007862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007864:	4433      	add	r3, r6
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	e767      	b.n	800773a <_svfiprintf_r+0x4e>
 800786a:	fb0c 3202 	mla	r2, ip, r2, r3
 800786e:	460c      	mov	r4, r1
 8007870:	2001      	movs	r0, #1
 8007872:	e7a5      	b.n	80077c0 <_svfiprintf_r+0xd4>
 8007874:	2300      	movs	r3, #0
 8007876:	3401      	adds	r4, #1
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	4619      	mov	r1, r3
 800787c:	f04f 0c0a 	mov.w	ip, #10
 8007880:	4620      	mov	r0, r4
 8007882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007886:	3a30      	subs	r2, #48	; 0x30
 8007888:	2a09      	cmp	r2, #9
 800788a:	d903      	bls.n	8007894 <_svfiprintf_r+0x1a8>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0c5      	beq.n	800781c <_svfiprintf_r+0x130>
 8007890:	9105      	str	r1, [sp, #20]
 8007892:	e7c3      	b.n	800781c <_svfiprintf_r+0x130>
 8007894:	fb0c 2101 	mla	r1, ip, r1, r2
 8007898:	4604      	mov	r4, r0
 800789a:	2301      	movs	r3, #1
 800789c:	e7f0      	b.n	8007880 <_svfiprintf_r+0x194>
 800789e:	ab03      	add	r3, sp, #12
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	462a      	mov	r2, r5
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <_svfiprintf_r+0x1f8>)
 80078a6:	a904      	add	r1, sp, #16
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7fd fcb9 	bl	8005220 <_printf_float>
 80078ae:	1c42      	adds	r2, r0, #1
 80078b0:	4606      	mov	r6, r0
 80078b2:	d1d6      	bne.n	8007862 <_svfiprintf_r+0x176>
 80078b4:	89ab      	ldrh	r3, [r5, #12]
 80078b6:	065b      	lsls	r3, r3, #25
 80078b8:	f53f af2c 	bmi.w	8007714 <_svfiprintf_r+0x28>
 80078bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078be:	b01d      	add	sp, #116	; 0x74
 80078c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c4:	ab03      	add	r3, sp, #12
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	462a      	mov	r2, r5
 80078ca:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <_svfiprintf_r+0x1f8>)
 80078cc:	a904      	add	r1, sp, #16
 80078ce:	4638      	mov	r0, r7
 80078d0:	f7fd ff4a 	bl	8005768 <_printf_i>
 80078d4:	e7eb      	b.n	80078ae <_svfiprintf_r+0x1c2>
 80078d6:	bf00      	nop
 80078d8:	08008404 	.word	0x08008404
 80078dc:	0800840e 	.word	0x0800840e
 80078e0:	08005221 	.word	0x08005221
 80078e4:	08007635 	.word	0x08007635
 80078e8:	0800840a 	.word	0x0800840a

080078ec <__sfputc_r>:
 80078ec:	6893      	ldr	r3, [r2, #8]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	b410      	push	{r4}
 80078f4:	6093      	str	r3, [r2, #8]
 80078f6:	da08      	bge.n	800790a <__sfputc_r+0x1e>
 80078f8:	6994      	ldr	r4, [r2, #24]
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	db01      	blt.n	8007902 <__sfputc_r+0x16>
 80078fe:	290a      	cmp	r1, #10
 8007900:	d103      	bne.n	800790a <__sfputc_r+0x1e>
 8007902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007906:	f7fe b8eb 	b.w	8005ae0 <__swbuf_r>
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	1c58      	adds	r0, r3, #1
 800790e:	6010      	str	r0, [r2, #0]
 8007910:	7019      	strb	r1, [r3, #0]
 8007912:	4608      	mov	r0, r1
 8007914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007918:	4770      	bx	lr

0800791a <__sfputs_r>:
 800791a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	4614      	mov	r4, r2
 8007922:	18d5      	adds	r5, r2, r3
 8007924:	42ac      	cmp	r4, r5
 8007926:	d101      	bne.n	800792c <__sfputs_r+0x12>
 8007928:	2000      	movs	r0, #0
 800792a:	e007      	b.n	800793c <__sfputs_r+0x22>
 800792c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007930:	463a      	mov	r2, r7
 8007932:	4630      	mov	r0, r6
 8007934:	f7ff ffda 	bl	80078ec <__sfputc_r>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d1f3      	bne.n	8007924 <__sfputs_r+0xa>
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007940 <_vfiprintf_r>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	460d      	mov	r5, r1
 8007946:	b09d      	sub	sp, #116	; 0x74
 8007948:	4614      	mov	r4, r2
 800794a:	4698      	mov	r8, r3
 800794c:	4606      	mov	r6, r0
 800794e:	b118      	cbz	r0, 8007958 <_vfiprintf_r+0x18>
 8007950:	6983      	ldr	r3, [r0, #24]
 8007952:	b90b      	cbnz	r3, 8007958 <_vfiprintf_r+0x18>
 8007954:	f7ff f916 	bl	8006b84 <__sinit>
 8007958:	4b89      	ldr	r3, [pc, #548]	; (8007b80 <_vfiprintf_r+0x240>)
 800795a:	429d      	cmp	r5, r3
 800795c:	d11b      	bne.n	8007996 <_vfiprintf_r+0x56>
 800795e:	6875      	ldr	r5, [r6, #4]
 8007960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007962:	07d9      	lsls	r1, r3, #31
 8007964:	d405      	bmi.n	8007972 <_vfiprintf_r+0x32>
 8007966:	89ab      	ldrh	r3, [r5, #12]
 8007968:	059a      	lsls	r2, r3, #22
 800796a:	d402      	bmi.n	8007972 <_vfiprintf_r+0x32>
 800796c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800796e:	f7ff f9ac 	bl	8006cca <__retarget_lock_acquire_recursive>
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	071b      	lsls	r3, r3, #28
 8007976:	d501      	bpl.n	800797c <_vfiprintf_r+0x3c>
 8007978:	692b      	ldr	r3, [r5, #16]
 800797a:	b9eb      	cbnz	r3, 80079b8 <_vfiprintf_r+0x78>
 800797c:	4629      	mov	r1, r5
 800797e:	4630      	mov	r0, r6
 8007980:	f7fe f900 	bl	8005b84 <__swsetup_r>
 8007984:	b1c0      	cbz	r0, 80079b8 <_vfiprintf_r+0x78>
 8007986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007988:	07dc      	lsls	r4, r3, #31
 800798a:	d50e      	bpl.n	80079aa <_vfiprintf_r+0x6a>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b01d      	add	sp, #116	; 0x74
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	4b7b      	ldr	r3, [pc, #492]	; (8007b84 <_vfiprintf_r+0x244>)
 8007998:	429d      	cmp	r5, r3
 800799a:	d101      	bne.n	80079a0 <_vfiprintf_r+0x60>
 800799c:	68b5      	ldr	r5, [r6, #8]
 800799e:	e7df      	b.n	8007960 <_vfiprintf_r+0x20>
 80079a0:	4b79      	ldr	r3, [pc, #484]	; (8007b88 <_vfiprintf_r+0x248>)
 80079a2:	429d      	cmp	r5, r3
 80079a4:	bf08      	it	eq
 80079a6:	68f5      	ldreq	r5, [r6, #12]
 80079a8:	e7da      	b.n	8007960 <_vfiprintf_r+0x20>
 80079aa:	89ab      	ldrh	r3, [r5, #12]
 80079ac:	0598      	lsls	r0, r3, #22
 80079ae:	d4ed      	bmi.n	800798c <_vfiprintf_r+0x4c>
 80079b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079b2:	f7ff f98b 	bl	8006ccc <__retarget_lock_release_recursive>
 80079b6:	e7e9      	b.n	800798c <_vfiprintf_r+0x4c>
 80079b8:	2300      	movs	r3, #0
 80079ba:	9309      	str	r3, [sp, #36]	; 0x24
 80079bc:	2320      	movs	r3, #32
 80079be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c6:	2330      	movs	r3, #48	; 0x30
 80079c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b8c <_vfiprintf_r+0x24c>
 80079cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079d0:	f04f 0901 	mov.w	r9, #1
 80079d4:	4623      	mov	r3, r4
 80079d6:	469a      	mov	sl, r3
 80079d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079dc:	b10a      	cbz	r2, 80079e2 <_vfiprintf_r+0xa2>
 80079de:	2a25      	cmp	r2, #37	; 0x25
 80079e0:	d1f9      	bne.n	80079d6 <_vfiprintf_r+0x96>
 80079e2:	ebba 0b04 	subs.w	fp, sl, r4
 80079e6:	d00b      	beq.n	8007a00 <_vfiprintf_r+0xc0>
 80079e8:	465b      	mov	r3, fp
 80079ea:	4622      	mov	r2, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7ff ff93 	bl	800791a <__sfputs_r>
 80079f4:	3001      	adds	r0, #1
 80079f6:	f000 80aa 	beq.w	8007b4e <_vfiprintf_r+0x20e>
 80079fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fc:	445a      	add	r2, fp
 80079fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007a00:	f89a 3000 	ldrb.w	r3, [sl]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 80a2 	beq.w	8007b4e <_vfiprintf_r+0x20e>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a14:	f10a 0a01 	add.w	sl, sl, #1
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	9307      	str	r3, [sp, #28]
 8007a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a20:	931a      	str	r3, [sp, #104]	; 0x68
 8007a22:	4654      	mov	r4, sl
 8007a24:	2205      	movs	r2, #5
 8007a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2a:	4858      	ldr	r0, [pc, #352]	; (8007b8c <_vfiprintf_r+0x24c>)
 8007a2c:	f7f8 fbf8 	bl	8000220 <memchr>
 8007a30:	9a04      	ldr	r2, [sp, #16]
 8007a32:	b9d8      	cbnz	r0, 8007a6c <_vfiprintf_r+0x12c>
 8007a34:	06d1      	lsls	r1, r2, #27
 8007a36:	bf44      	itt	mi
 8007a38:	2320      	movmi	r3, #32
 8007a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3e:	0713      	lsls	r3, r2, #28
 8007a40:	bf44      	itt	mi
 8007a42:	232b      	movmi	r3, #43	; 0x2b
 8007a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a48:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a4e:	d015      	beq.n	8007a7c <_vfiprintf_r+0x13c>
 8007a50:	9a07      	ldr	r2, [sp, #28]
 8007a52:	4654      	mov	r4, sl
 8007a54:	2000      	movs	r0, #0
 8007a56:	f04f 0c0a 	mov.w	ip, #10
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a60:	3b30      	subs	r3, #48	; 0x30
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	d94e      	bls.n	8007b04 <_vfiprintf_r+0x1c4>
 8007a66:	b1b0      	cbz	r0, 8007a96 <_vfiprintf_r+0x156>
 8007a68:	9207      	str	r2, [sp, #28]
 8007a6a:	e014      	b.n	8007a96 <_vfiprintf_r+0x156>
 8007a6c:	eba0 0308 	sub.w	r3, r0, r8
 8007a70:	fa09 f303 	lsl.w	r3, r9, r3
 8007a74:	4313      	orrs	r3, r2
 8007a76:	9304      	str	r3, [sp, #16]
 8007a78:	46a2      	mov	sl, r4
 8007a7a:	e7d2      	b.n	8007a22 <_vfiprintf_r+0xe2>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	1d19      	adds	r1, r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	9103      	str	r1, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bfbb      	ittet	lt
 8007a88:	425b      	neglt	r3, r3
 8007a8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a8e:	9307      	strge	r3, [sp, #28]
 8007a90:	9307      	strlt	r3, [sp, #28]
 8007a92:	bfb8      	it	lt
 8007a94:	9204      	strlt	r2, [sp, #16]
 8007a96:	7823      	ldrb	r3, [r4, #0]
 8007a98:	2b2e      	cmp	r3, #46	; 0x2e
 8007a9a:	d10c      	bne.n	8007ab6 <_vfiprintf_r+0x176>
 8007a9c:	7863      	ldrb	r3, [r4, #1]
 8007a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa0:	d135      	bne.n	8007b0e <_vfiprintf_r+0x1ce>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	1d1a      	adds	r2, r3, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	9203      	str	r2, [sp, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfb8      	it	lt
 8007aae:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab2:	3402      	adds	r4, #2
 8007ab4:	9305      	str	r3, [sp, #20]
 8007ab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b9c <_vfiprintf_r+0x25c>
 8007aba:	7821      	ldrb	r1, [r4, #0]
 8007abc:	2203      	movs	r2, #3
 8007abe:	4650      	mov	r0, sl
 8007ac0:	f7f8 fbae 	bl	8000220 <memchr>
 8007ac4:	b140      	cbz	r0, 8007ad8 <_vfiprintf_r+0x198>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	eba0 000a 	sub.w	r0, r0, sl
 8007acc:	fa03 f000 	lsl.w	r0, r3, r0
 8007ad0:	9b04      	ldr	r3, [sp, #16]
 8007ad2:	4303      	orrs	r3, r0
 8007ad4:	3401      	adds	r4, #1
 8007ad6:	9304      	str	r3, [sp, #16]
 8007ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007adc:	482c      	ldr	r0, [pc, #176]	; (8007b90 <_vfiprintf_r+0x250>)
 8007ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae2:	2206      	movs	r2, #6
 8007ae4:	f7f8 fb9c 	bl	8000220 <memchr>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d03f      	beq.n	8007b6c <_vfiprintf_r+0x22c>
 8007aec:	4b29      	ldr	r3, [pc, #164]	; (8007b94 <_vfiprintf_r+0x254>)
 8007aee:	bb1b      	cbnz	r3, 8007b38 <_vfiprintf_r+0x1f8>
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	3307      	adds	r3, #7
 8007af4:	f023 0307 	bic.w	r3, r3, #7
 8007af8:	3308      	adds	r3, #8
 8007afa:	9303      	str	r3, [sp, #12]
 8007afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afe:	443b      	add	r3, r7
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	e767      	b.n	80079d4 <_vfiprintf_r+0x94>
 8007b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b08:	460c      	mov	r4, r1
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	e7a5      	b.n	8007a5a <_vfiprintf_r+0x11a>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	3401      	adds	r4, #1
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	4619      	mov	r1, r3
 8007b16:	f04f 0c0a 	mov.w	ip, #10
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b20:	3a30      	subs	r2, #48	; 0x30
 8007b22:	2a09      	cmp	r2, #9
 8007b24:	d903      	bls.n	8007b2e <_vfiprintf_r+0x1ee>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0c5      	beq.n	8007ab6 <_vfiprintf_r+0x176>
 8007b2a:	9105      	str	r1, [sp, #20]
 8007b2c:	e7c3      	b.n	8007ab6 <_vfiprintf_r+0x176>
 8007b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b32:	4604      	mov	r4, r0
 8007b34:	2301      	movs	r3, #1
 8007b36:	e7f0      	b.n	8007b1a <_vfiprintf_r+0x1da>
 8007b38:	ab03      	add	r3, sp, #12
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <_vfiprintf_r+0x258>)
 8007b40:	a904      	add	r1, sp, #16
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7fd fb6c 	bl	8005220 <_printf_float>
 8007b48:	4607      	mov	r7, r0
 8007b4a:	1c78      	adds	r0, r7, #1
 8007b4c:	d1d6      	bne.n	8007afc <_vfiprintf_r+0x1bc>
 8007b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b50:	07d9      	lsls	r1, r3, #31
 8007b52:	d405      	bmi.n	8007b60 <_vfiprintf_r+0x220>
 8007b54:	89ab      	ldrh	r3, [r5, #12]
 8007b56:	059a      	lsls	r2, r3, #22
 8007b58:	d402      	bmi.n	8007b60 <_vfiprintf_r+0x220>
 8007b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b5c:	f7ff f8b6 	bl	8006ccc <__retarget_lock_release_recursive>
 8007b60:	89ab      	ldrh	r3, [r5, #12]
 8007b62:	065b      	lsls	r3, r3, #25
 8007b64:	f53f af12 	bmi.w	800798c <_vfiprintf_r+0x4c>
 8007b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b6a:	e711      	b.n	8007990 <_vfiprintf_r+0x50>
 8007b6c:	ab03      	add	r3, sp, #12
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	462a      	mov	r2, r5
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <_vfiprintf_r+0x258>)
 8007b74:	a904      	add	r1, sp, #16
 8007b76:	4630      	mov	r0, r6
 8007b78:	f7fd fdf6 	bl	8005768 <_printf_i>
 8007b7c:	e7e4      	b.n	8007b48 <_vfiprintf_r+0x208>
 8007b7e:	bf00      	nop
 8007b80:	08008268 	.word	0x08008268
 8007b84:	08008288 	.word	0x08008288
 8007b88:	08008248 	.word	0x08008248
 8007b8c:	08008404 	.word	0x08008404
 8007b90:	0800840e 	.word	0x0800840e
 8007b94:	08005221 	.word	0x08005221
 8007b98:	0800791b 	.word	0x0800791b
 8007b9c:	0800840a 	.word	0x0800840a

08007ba0 <_sbrk_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d06      	ldr	r5, [pc, #24]	; (8007bbc <_sbrk_r+0x1c>)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	4608      	mov	r0, r1
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	f7f9 ffd4 	bl	8001b58 <_sbrk>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_sbrk_r+0x1a>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_sbrk_r+0x1a>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	200003b0 	.word	0x200003b0

08007bc0 <__sread>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc8:	f000 f922 	bl	8007e10 <_read_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	bfab      	itete	ge
 8007bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bd4:	181b      	addge	r3, r3, r0
 8007bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bda:	bfac      	ite	ge
 8007bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bde:	81a3      	strhlt	r3, [r4, #12]
 8007be0:	bd10      	pop	{r4, pc}

08007be2 <__swrite>:
 8007be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be6:	461f      	mov	r7, r3
 8007be8:	898b      	ldrh	r3, [r1, #12]
 8007bea:	05db      	lsls	r3, r3, #23
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4616      	mov	r6, r2
 8007bf2:	d505      	bpl.n	8007c00 <__swrite+0x1e>
 8007bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f000 f898 	bl	8007d30 <_lseek_r>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	463b      	mov	r3, r7
 8007c10:	4628      	mov	r0, r5
 8007c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c16:	f000 b817 	b.w	8007c48 <_write_r>

08007c1a <__sseek>:
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c22:	f000 f885 	bl	8007d30 <_lseek_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	bf15      	itete	ne
 8007c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c36:	81a3      	strheq	r3, [r4, #12]
 8007c38:	bf18      	it	ne
 8007c3a:	81a3      	strhne	r3, [r4, #12]
 8007c3c:	bd10      	pop	{r4, pc}

08007c3e <__sclose>:
 8007c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c42:	f000 b831 	b.w	8007ca8 <_close_r>
	...

08007c48 <_write_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d07      	ldr	r5, [pc, #28]	; (8007c68 <_write_r+0x20>)
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	4608      	mov	r0, r1
 8007c50:	4611      	mov	r1, r2
 8007c52:	2200      	movs	r2, #0
 8007c54:	602a      	str	r2, [r5, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f7f9 ff2d 	bl	8001ab6 <_write>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_write_r+0x1e>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_write_r+0x1e>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	200003b0 	.word	0x200003b0

08007c6c <__assert_func>:
 8007c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c6e:	4614      	mov	r4, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <__assert_func+0x2c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4605      	mov	r5, r0
 8007c78:	68d8      	ldr	r0, [r3, #12]
 8007c7a:	b14c      	cbz	r4, 8007c90 <__assert_func+0x24>
 8007c7c:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <__assert_func+0x30>)
 8007c7e:	9100      	str	r1, [sp, #0]
 8007c80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c84:	4906      	ldr	r1, [pc, #24]	; (8007ca0 <__assert_func+0x34>)
 8007c86:	462b      	mov	r3, r5
 8007c88:	f000 f81e 	bl	8007cc8 <fiprintf>
 8007c8c:	f000 f8df 	bl	8007e4e <abort>
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <__assert_func+0x38>)
 8007c92:	461c      	mov	r4, r3
 8007c94:	e7f3      	b.n	8007c7e <__assert_func+0x12>
 8007c96:	bf00      	nop
 8007c98:	2000000c 	.word	0x2000000c
 8007c9c:	08008415 	.word	0x08008415
 8007ca0:	08008422 	.word	0x08008422
 8007ca4:	08008450 	.word	0x08008450

08007ca8 <_close_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d06      	ldr	r5, [pc, #24]	; (8007cc4 <_close_r+0x1c>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	602b      	str	r3, [r5, #0]
 8007cb4:	f7f9 ff1b 	bl	8001aee <_close>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_close_r+0x1a>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_close_r+0x1a>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	200003b0 	.word	0x200003b0

08007cc8 <fiprintf>:
 8007cc8:	b40e      	push	{r1, r2, r3}
 8007cca:	b503      	push	{r0, r1, lr}
 8007ccc:	4601      	mov	r1, r0
 8007cce:	ab03      	add	r3, sp, #12
 8007cd0:	4805      	ldr	r0, [pc, #20]	; (8007ce8 <fiprintf+0x20>)
 8007cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd6:	6800      	ldr	r0, [r0, #0]
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	f7ff fe31 	bl	8007940 <_vfiprintf_r>
 8007cde:	b002      	add	sp, #8
 8007ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce4:	b003      	add	sp, #12
 8007ce6:	4770      	bx	lr
 8007ce8:	2000000c 	.word	0x2000000c

08007cec <_fstat_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4d07      	ldr	r5, [pc, #28]	; (8007d0c <_fstat_r+0x20>)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	602b      	str	r3, [r5, #0]
 8007cfa:	f7f9 ff04 	bl	8001b06 <_fstat>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d102      	bne.n	8007d08 <_fstat_r+0x1c>
 8007d02:	682b      	ldr	r3, [r5, #0]
 8007d04:	b103      	cbz	r3, 8007d08 <_fstat_r+0x1c>
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	bd38      	pop	{r3, r4, r5, pc}
 8007d0a:	bf00      	nop
 8007d0c:	200003b0 	.word	0x200003b0

08007d10 <_isatty_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d06      	ldr	r5, [pc, #24]	; (8007d2c <_isatty_r+0x1c>)
 8007d14:	2300      	movs	r3, #0
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	f7f9 ff03 	bl	8001b26 <_isatty>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_isatty_r+0x1a>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_isatty_r+0x1a>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	200003b0 	.word	0x200003b0

08007d30 <_lseek_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d07      	ldr	r5, [pc, #28]	; (8007d50 <_lseek_r+0x20>)
 8007d34:	4604      	mov	r4, r0
 8007d36:	4608      	mov	r0, r1
 8007d38:	4611      	mov	r1, r2
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	602a      	str	r2, [r5, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f7f9 fefc 	bl	8001b3c <_lseek>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d102      	bne.n	8007d4e <_lseek_r+0x1e>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	b103      	cbz	r3, 8007d4e <_lseek_r+0x1e>
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	200003b0 	.word	0x200003b0

08007d54 <__ascii_mbtowc>:
 8007d54:	b082      	sub	sp, #8
 8007d56:	b901      	cbnz	r1, 8007d5a <__ascii_mbtowc+0x6>
 8007d58:	a901      	add	r1, sp, #4
 8007d5a:	b142      	cbz	r2, 8007d6e <__ascii_mbtowc+0x1a>
 8007d5c:	b14b      	cbz	r3, 8007d72 <__ascii_mbtowc+0x1e>
 8007d5e:	7813      	ldrb	r3, [r2, #0]
 8007d60:	600b      	str	r3, [r1, #0]
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	1e10      	subs	r0, r2, #0
 8007d66:	bf18      	it	ne
 8007d68:	2001      	movne	r0, #1
 8007d6a:	b002      	add	sp, #8
 8007d6c:	4770      	bx	lr
 8007d6e:	4610      	mov	r0, r2
 8007d70:	e7fb      	b.n	8007d6a <__ascii_mbtowc+0x16>
 8007d72:	f06f 0001 	mvn.w	r0, #1
 8007d76:	e7f8      	b.n	8007d6a <__ascii_mbtowc+0x16>

08007d78 <memmove>:
 8007d78:	4288      	cmp	r0, r1
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	eb01 0402 	add.w	r4, r1, r2
 8007d80:	d902      	bls.n	8007d88 <memmove+0x10>
 8007d82:	4284      	cmp	r4, r0
 8007d84:	4623      	mov	r3, r4
 8007d86:	d807      	bhi.n	8007d98 <memmove+0x20>
 8007d88:	1e43      	subs	r3, r0, #1
 8007d8a:	42a1      	cmp	r1, r4
 8007d8c:	d008      	beq.n	8007da0 <memmove+0x28>
 8007d8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d96:	e7f8      	b.n	8007d8a <memmove+0x12>
 8007d98:	4402      	add	r2, r0
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	428a      	cmp	r2, r1
 8007d9e:	d100      	bne.n	8007da2 <memmove+0x2a>
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007da6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007daa:	e7f7      	b.n	8007d9c <memmove+0x24>

08007dac <__malloc_lock>:
 8007dac:	4801      	ldr	r0, [pc, #4]	; (8007db4 <__malloc_lock+0x8>)
 8007dae:	f7fe bf8c 	b.w	8006cca <__retarget_lock_acquire_recursive>
 8007db2:	bf00      	nop
 8007db4:	200003a8 	.word	0x200003a8

08007db8 <__malloc_unlock>:
 8007db8:	4801      	ldr	r0, [pc, #4]	; (8007dc0 <__malloc_unlock+0x8>)
 8007dba:	f7fe bf87 	b.w	8006ccc <__retarget_lock_release_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	200003a8 	.word	0x200003a8

08007dc4 <_realloc_r>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	4614      	mov	r4, r2
 8007dca:	460e      	mov	r6, r1
 8007dcc:	b921      	cbnz	r1, 8007dd8 <_realloc_r+0x14>
 8007dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	f7ff bbd4 	b.w	8007580 <_malloc_r>
 8007dd8:	b922      	cbnz	r2, 8007de4 <_realloc_r+0x20>
 8007dda:	f7ff fb81 	bl	80074e0 <_free_r>
 8007dde:	4625      	mov	r5, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de4:	f000 f83a 	bl	8007e5c <_malloc_usable_size_r>
 8007de8:	42a0      	cmp	r0, r4
 8007dea:	d20f      	bcs.n	8007e0c <_realloc_r+0x48>
 8007dec:	4621      	mov	r1, r4
 8007dee:	4638      	mov	r0, r7
 8007df0:	f7ff fbc6 	bl	8007580 <_malloc_r>
 8007df4:	4605      	mov	r5, r0
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d0f2      	beq.n	8007de0 <_realloc_r+0x1c>
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	f7fe ffd3 	bl	8006da8 <memcpy>
 8007e02:	4631      	mov	r1, r6
 8007e04:	4638      	mov	r0, r7
 8007e06:	f7ff fb6b 	bl	80074e0 <_free_r>
 8007e0a:	e7e9      	b.n	8007de0 <_realloc_r+0x1c>
 8007e0c:	4635      	mov	r5, r6
 8007e0e:	e7e7      	b.n	8007de0 <_realloc_r+0x1c>

08007e10 <_read_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d07      	ldr	r5, [pc, #28]	; (8007e30 <_read_r+0x20>)
 8007e14:	4604      	mov	r4, r0
 8007e16:	4608      	mov	r0, r1
 8007e18:	4611      	mov	r1, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f7f9 fe2c 	bl	8001a7c <_read>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_read_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_read_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	200003b0 	.word	0x200003b0

08007e34 <__ascii_wctomb>:
 8007e34:	b149      	cbz	r1, 8007e4a <__ascii_wctomb+0x16>
 8007e36:	2aff      	cmp	r2, #255	; 0xff
 8007e38:	bf85      	ittet	hi
 8007e3a:	238a      	movhi	r3, #138	; 0x8a
 8007e3c:	6003      	strhi	r3, [r0, #0]
 8007e3e:	700a      	strbls	r2, [r1, #0]
 8007e40:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e44:	bf98      	it	ls
 8007e46:	2001      	movls	r0, #1
 8007e48:	4770      	bx	lr
 8007e4a:	4608      	mov	r0, r1
 8007e4c:	4770      	bx	lr

08007e4e <abort>:
 8007e4e:	b508      	push	{r3, lr}
 8007e50:	2006      	movs	r0, #6
 8007e52:	f000 f833 	bl	8007ebc <raise>
 8007e56:	2001      	movs	r0, #1
 8007e58:	f7f9 fe06 	bl	8001a68 <_exit>

08007e5c <_malloc_usable_size_r>:
 8007e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e60:	1f18      	subs	r0, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bfbc      	itt	lt
 8007e66:	580b      	ldrlt	r3, [r1, r0]
 8007e68:	18c0      	addlt	r0, r0, r3
 8007e6a:	4770      	bx	lr

08007e6c <_raise_r>:
 8007e6c:	291f      	cmp	r1, #31
 8007e6e:	b538      	push	{r3, r4, r5, lr}
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	d904      	bls.n	8007e80 <_raise_r+0x14>
 8007e76:	2316      	movs	r3, #22
 8007e78:	6003      	str	r3, [r0, #0]
 8007e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e82:	b112      	cbz	r2, 8007e8a <_raise_r+0x1e>
 8007e84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e88:	b94b      	cbnz	r3, 8007e9e <_raise_r+0x32>
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f830 	bl	8007ef0 <_getpid_r>
 8007e90:	462a      	mov	r2, r5
 8007e92:	4601      	mov	r1, r0
 8007e94:	4620      	mov	r0, r4
 8007e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e9a:	f000 b817 	b.w	8007ecc <_kill_r>
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d00a      	beq.n	8007eb8 <_raise_r+0x4c>
 8007ea2:	1c59      	adds	r1, r3, #1
 8007ea4:	d103      	bne.n	8007eae <_raise_r+0x42>
 8007ea6:	2316      	movs	r3, #22
 8007ea8:	6003      	str	r3, [r0, #0]
 8007eaa:	2001      	movs	r0, #1
 8007eac:	e7e7      	b.n	8007e7e <_raise_r+0x12>
 8007eae:	2400      	movs	r4, #0
 8007eb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	4798      	blx	r3
 8007eb8:	2000      	movs	r0, #0
 8007eba:	e7e0      	b.n	8007e7e <_raise_r+0x12>

08007ebc <raise>:
 8007ebc:	4b02      	ldr	r3, [pc, #8]	; (8007ec8 <raise+0xc>)
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	f7ff bfd3 	b.w	8007e6c <_raise_r>
 8007ec6:	bf00      	nop
 8007ec8:	2000000c 	.word	0x2000000c

08007ecc <_kill_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4d07      	ldr	r5, [pc, #28]	; (8007eec <_kill_r+0x20>)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	602b      	str	r3, [r5, #0]
 8007eda:	f7f9 fdb5 	bl	8001a48 <_kill>
 8007ede:	1c43      	adds	r3, r0, #1
 8007ee0:	d102      	bne.n	8007ee8 <_kill_r+0x1c>
 8007ee2:	682b      	ldr	r3, [r5, #0]
 8007ee4:	b103      	cbz	r3, 8007ee8 <_kill_r+0x1c>
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	bd38      	pop	{r3, r4, r5, pc}
 8007eea:	bf00      	nop
 8007eec:	200003b0 	.word	0x200003b0

08007ef0 <_getpid_r>:
 8007ef0:	f7f9 bda2 	b.w	8001a38 <_getpid>

08007ef4 <_init>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr

08007f00 <_fini>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr
