
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002624  08009de0  08009de0  00019de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c404  0800c404  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c404  0800c404  0001c404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c40c  0800c40c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c40c  0800c40c  0001c40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c410  0800c410  0001c410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001e4  0800c5f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800c5f8  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159be  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002391  00000000  00000000  00035bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00037f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00039020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028100  00000000  00000000  0003a018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b48  00000000  00000000  00062118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6faa  00000000  00000000  00076c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016dc0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e4  00000000  00000000  0016dc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009dc8 	.word	0x08009dc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08009dc8 	.word	0x08009dc8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <TinyBMS_CAN_ResetClearEventsStatistics>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  Options: 0x01 - Clear Events , 0x02 - Clear Statistics , 0x05 - Reset BMS
 *
 */
uint8_t TinyBMS_CAN_ResetClearEventsStatistics(CAN_HandleTypeDef *hcan, uint8_t option) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	; 0x38
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	printf("TinyBMS_CAN_ResetClearEventsStatistics\n");
 8000ef8:	4851      	ldr	r0, [pc, #324]	; (8001040 <TinyBMS_CAN_ResetClearEventsStatistics+0x154>)
 8000efa:	f006 fce3 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8000efe:	23ff      	movs	r3, #255	; 0xff
 8000f00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	switch(option) {
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b05      	cmp	r3, #5
 8000f08:	d00e      	beq.n	8000f28 <TinyBMS_CAN_ResetClearEventsStatistics+0x3c>
 8000f0a:	2b05      	cmp	r3, #5
 8000f0c:	dc10      	bgt.n	8000f30 <TinyBMS_CAN_ResetClearEventsStatistics+0x44>
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d002      	beq.n	8000f18 <TinyBMS_CAN_ResetClearEventsStatistics+0x2c>
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d004      	beq.n	8000f20 <TinyBMS_CAN_ResetClearEventsStatistics+0x34>
 8000f16:	e00b      	b.n	8000f30 <TinyBMS_CAN_ResetClearEventsStatistics+0x44>
	case TINYBMS_CLEAR_EVENTS:
		printf("0x01 Clear Events\n");
 8000f18:	484a      	ldr	r0, [pc, #296]	; (8001044 <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8000f1a:	f006 fcd3 	bl	80078c4 <puts>
		break;
 8000f1e:	e010      	b.n	8000f42 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	case TINYBMS_CLEAR_STATS:
		printf("0x02 Clear Statistics\n");
 8000f20:	4849      	ldr	r0, [pc, #292]	; (8001048 <TinyBMS_CAN_ResetClearEventsStatistics+0x15c>)
 8000f22:	f006 fccf 	bl	80078c4 <puts>
		break;
 8000f26:	e00c      	b.n	8000f42 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	case TINYBMS_RESET_BMS:
		printf("0x05 Reset BMS\n");
 8000f28:	4848      	ldr	r0, [pc, #288]	; (800104c <TinyBMS_CAN_ResetClearEventsStatistics+0x160>)
 8000f2a:	f006 fccb 	bl	80078c4 <puts>
		break;
 8000f2e:	e008      	b.n	8000f42 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	default:
		printf("Invalid option\n");
 8000f30:	4847      	ldr	r0, [pc, #284]	; (8001050 <TinyBMS_CAN_ResetClearEventsStatistics+0x164>)
 8000f32:	f006 fcc7 	bl	80078c4 <puts>
		retval = CMD_FAILURE;
 8000f36:	23ff      	movs	r3, #255	; 0xff
 8000f38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return retval;
 8000f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f40:	e079      	b.n	8001036 <TinyBMS_CAN_ResetClearEventsStatistics+0x14a>
	}

	uint8_t tx_msg[8] = {0x02, option, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f42:	2302      	movs	r3, #2
 8000f44:	723b      	strb	r3, [r7, #8]
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	727b      	strb	r3, [r7, #9]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	72bb      	strb	r3, [r7, #10]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	72fb      	strb	r3, [r7, #11]
 8000f52:	2300      	movs	r3, #0
 8000f54:	733b      	strb	r3, [r7, #12]
 8000f56:	2300      	movs	r3, #0
 8000f58:	737b      	strb	r3, [r7, #13]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73bb      	strb	r3, [r7, #14]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8000f68:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	4619      	mov	r1, r3
 8000f72:	2000      	movs	r0, #0
 8000f74:	f002 f90e 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8000f78:	e051      	b.n	800101e <TinyBMS_CAN_ResetClearEventsStatistics+0x132>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	f107 0218 	add.w	r2, r7, #24
 8000f82:	2100      	movs	r1, #0
 8000f84:	4833      	ldr	r0, [pc, #204]	; (8001054 <TinyBMS_CAN_ResetClearEventsStatistics+0x168>)
 8000f86:	f003 f832 	bl	8003fee <HAL_CAN_GetRxMessage>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <TinyBMS_CAN_ResetClearEventsStatistics+0xa8>
			Error_Handler();
 8000f90:	f002 fa64 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8000f94:	f240 4103 	movw	r1, #1027	; 0x403
 8000f98:	482e      	ldr	r0, [pc, #184]	; (8001054 <TinyBMS_CAN_ResetClearEventsStatistics+0x168>)
 8000f9a:	f003 f962 	bl	8004262 <HAL_CAN_ActivateNotification>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <TinyBMS_CAN_ResetClearEventsStatistics+0xbc>
			Error_Handler();
 8000fa4:	f002 fa5a 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <TinyBMS_CAN_ResetClearEventsStatistics+0x16c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d135      	bne.n	800101e <TinyBMS_CAN_ResetClearEventsStatistics+0x132>
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d132      	bne.n	800101e <TinyBMS_CAN_ResetClearEventsStatistics+0x132>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8000fb8:	7c3b      	ldrb	r3, [r7, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d117      	bne.n	8000fee <TinyBMS_CAN_ResetClearEventsStatistics+0x102>
				printf("Response from BMS [Error]\n");
 8000fbe:	4827      	ldr	r0, [pc, #156]	; (800105c <TinyBMS_CAN_ResetClearEventsStatistics+0x170>)
 8000fc0:	f006 fc80 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8000fc4:	7c7b      	ldrb	r3, [r7, #17]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	7cbb      	ldrb	r3, [r7, #18]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4824      	ldr	r0, [pc, #144]	; (8001060 <TinyBMS_CAN_ResetClearEventsStatistics+0x174>)
 8000fce:	f006 fbf3 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 8000fd2:	7cbb      	ldrb	r3, [r7, #18]
 8000fd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				reportBMSError(error);
 8000fd8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fcfb 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8000fe2:	23ff      	movs	r3, #255	; 0xff
 8000fe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 8000fe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fec:	e023      	b.n	8001036 <TinyBMS_CAN_ResetClearEventsStatistics+0x14a>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_RESET_CLEAR_EVENTS_STATS)) {
 8000fee:	7c3b      	ldrb	r3, [r7, #16]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d10b      	bne.n	800100c <TinyBMS_CAN_ResetClearEventsStatistics+0x120>
 8000ff4:	7c7b      	ldrb	r3, [r7, #17]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d108      	bne.n	800100c <TinyBMS_CAN_ResetClearEventsStatistics+0x120>
				printf("Response from BMS [OK]\n");
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <TinyBMS_CAN_ResetClearEventsStatistics+0x178>)
 8000ffc:	f006 fc62 	bl	80078c4 <puts>
				printf("CAN_TBMS_RESET_CLEAR_EVENTS_STATS | CMD: 0x%02X\n", rx_msg[1]);
 8001000:	7c7b      	ldrb	r3, [r7, #17]
 8001002:	4619      	mov	r1, r3
 8001004:	4818      	ldr	r0, [pc, #96]	; (8001068 <TinyBMS_CAN_ResetClearEventsStatistics+0x17c>)
 8001006:	f006 fbd7 	bl	80077b8 <iprintf>
 800100a:	e008      	b.n	800101e <TinyBMS_CAN_ResetClearEventsStatistics+0x132>

			} else {
				printf("Data Corruption\n");
 800100c:	4817      	ldr	r0, [pc, #92]	; (800106c <TinyBMS_CAN_ResetClearEventsStatistics+0x180>)
 800100e:	f006 fc59 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8001012:	23ff      	movs	r3, #255	; 0xff
 8001014:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 8001018:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800101c:	e00b      	b.n	8001036 <TinyBMS_CAN_ResetClearEventsStatistics+0x14a>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800101e:	2100      	movs	r1, #0
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <TinyBMS_CAN_ResetClearEventsStatistics+0x168>)
 8001022:	f003 f8f6 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1a6      	bne.n	8000f7a <TinyBMS_CAN_ResetClearEventsStatistics+0x8e>
			}
		}
	}
	retval = CMD_SUCCESS;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return retval;
 8001032:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001036:	4618      	mov	r0, r3
 8001038:	3738      	adds	r7, #56	; 0x38
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800b078 	.word	0x0800b078
 8001044:	0800b0a0 	.word	0x0800b0a0
 8001048:	0800b0b4 	.word	0x0800b0b4
 800104c:	0800b0cc 	.word	0x0800b0cc
 8001050:	0800b0dc 	.word	0x0800b0dc
 8001054:	20000200 	.word	0x20000200
 8001058:	20000004 	.word	0x20000004
 800105c:	0800b0ec 	.word	0x0800b0ec
 8001060:	0800b108 	.word	0x0800b108
 8001064:	08009f18 	.word	0x08009f18
 8001068:	0800b12c 	.word	0x0800b12c
 800106c:	0800b160 	.word	0x0800b160

08001070 <TinyBMS_CAN_ReadRegBlock>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated
 * 						   by malloc(size_t size).
 */
uint8_t TinyBMS_CAN_ReadRegBlock(CAN_HandleTypeDef *hcan, uint8_t rl, uint16_t addr) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b090      	sub	sp, #64	; 0x40
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
 800107c:	4613      	mov	r3, r2
 800107e:	803b      	strh	r3, [r7, #0]
	printf("TinyBMS_CAN_ReadRegBlock\n");
 8001080:	4873      	ldr	r0, [pc, #460]	; (8001250 <TinyBMS_CAN_ReadRegBlock+0x1e0>)
 8001082:	f006 fc1f 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8001086:	23ff      	movs	r3, #255	; 0xff
 8001088:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t addr_MSB = 0, addr_LSB = 0, msg_count = 1, pl = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001092:	2300      	movs	r3, #0
 8001094:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001098:	2301      	movs	r3, #1
 800109a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t data = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Request to BMS */
	//Check if number of registers to write is within bounds
	if((rl <= 0) || (rl > 0x7F)) {
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <TinyBMS_CAN_ReadRegBlock+0x46>
 80010ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da05      	bge.n	80010c2 <TinyBMS_CAN_ReadRegBlock+0x52>
		retval = CMD_FAILURE;
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 80010bc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010c0:	e0c1      	b.n	8001246 <TinyBMS_CAN_ReadRegBlock+0x1d6>
	}

	//Starting address of Register Block
	addr_MSB = ((addr >> 8) & 0xFF);
 80010c2:	883b      	ldrh	r3, [r7, #0]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	addr_LSB = (addr & 0xFF);
 80010cc:	883b      	ldrh	r3, [r7, #0]
 80010ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	uint8_t tx_msg[8] = {CAN_TBMS_READ_REG_BLOCK, addr_MSB, addr_LSB, 0x00, rl, 0x00, 0x00, 0x00};
 80010d2:	2303      	movs	r3, #3
 80010d4:	723b      	strb	r3, [r7, #8]
 80010d6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80010da:	727b      	strb	r3, [r7, #9]
 80010dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010e0:	72bb      	strb	r3, [r7, #10]
 80010e2:	2300      	movs	r3, #0
 80010e4:	72fb      	strb	r3, [r7, #11]
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	733b      	strb	r3, [r7, #12]
 80010ea:	2300      	movs	r3, #0
 80010ec:	737b      	strb	r3, [r7, #13]
 80010ee:	2300      	movs	r3, #0
 80010f0:	73bb      	strb	r3, [r7, #14]
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 5;
 80010f6:	2305      	movs	r3, #5
 80010f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80010fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	2000      	movs	r0, #0
 8001108:	f002 f844 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800110c:	e08e      	b.n	800122c <TinyBMS_CAN_ReadRegBlock+0x1bc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	f107 0218 	add.w	r2, r7, #24
 8001116:	2100      	movs	r1, #0
 8001118:	484e      	ldr	r0, [pc, #312]	; (8001254 <TinyBMS_CAN_ReadRegBlock+0x1e4>)
 800111a:	f002 ff68 	bl	8003fee <HAL_CAN_GetRxMessage>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <TinyBMS_CAN_ReadRegBlock+0xb8>
			Error_Handler();
 8001124:	f002 f99a 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001128:	f240 4103 	movw	r1, #1027	; 0x403
 800112c:	4849      	ldr	r0, [pc, #292]	; (8001254 <TinyBMS_CAN_ReadRegBlock+0x1e4>)
 800112e:	f003 f898 	bl	8004262 <HAL_CAN_ActivateNotification>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <TinyBMS_CAN_ReadRegBlock+0xcc>
			Error_Handler();
 8001138:	f002 f990 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4b46      	ldr	r3, [pc, #280]	; (8001258 <TinyBMS_CAN_ReadRegBlock+0x1e8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d172      	bne.n	800122c <TinyBMS_CAN_ReadRegBlock+0x1bc>
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	2b00      	cmp	r3, #0
 800114a:	d16f      	bne.n	800122c <TinyBMS_CAN_ReadRegBlock+0x1bc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 800114c:	7c3b      	ldrb	r3, [r7, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d117      	bne.n	8001182 <TinyBMS_CAN_ReadRegBlock+0x112>
				printf("Response from BMS [Error]\n");
 8001152:	4842      	ldr	r0, [pc, #264]	; (800125c <TinyBMS_CAN_ReadRegBlock+0x1ec>)
 8001154:	f006 fbb6 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001158:	7c7b      	ldrb	r3, [r7, #17]
 800115a:	4619      	mov	r1, r3
 800115c:	7cbb      	ldrb	r3, [r7, #18]
 800115e:	461a      	mov	r2, r3
 8001160:	483f      	ldr	r0, [pc, #252]	; (8001260 <TinyBMS_CAN_ReadRegBlock+0x1f0>)
 8001162:	f006 fb29 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 8001166:	7cbb      	ldrb	r3, [r7, #18]
 8001168:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				reportBMSError(error);
 800116c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fc31 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8001176:	23ff      	movs	r3, #255	; 0xff
 8001178:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 800117c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001180:	e061      	b.n	8001246 <TinyBMS_CAN_ReadRegBlock+0x1d6>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_REG_BLOCK)) {
 8001182:	7c3b      	ldrb	r3, [r7, #16]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d148      	bne.n	800121a <TinyBMS_CAN_ReadRegBlock+0x1aa>
 8001188:	7c7b      	ldrb	r3, [r7, #17]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d145      	bne.n	800121a <TinyBMS_CAN_ReadRegBlock+0x1aa>
				if(msg_count == 1) {
 800118e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <TinyBMS_CAN_ReadRegBlock+0x136>
					printf("Response from BMS [OK]\n");
 8001196:	4833      	ldr	r0, [pc, #204]	; (8001264 <TinyBMS_CAN_ReadRegBlock+0x1f4>)
 8001198:	f006 fb94 	bl	80078c4 <puts>
					printf("CAN_TBMS_READ_REG_BLOCK | CMD: 0x%02X\n", rx_msg[1]);
 800119c:	7c7b      	ldrb	r3, [r7, #17]
 800119e:	4619      	mov	r1, r3
 80011a0:	4831      	ldr	r0, [pc, #196]	; (8001268 <TinyBMS_CAN_ReadRegBlock+0x1f8>)
 80011a2:	f006 fb09 	bl	80077b8 <iprintf>
				}
				pl = rx_msg[2];
 80011a6:	7cbb      	ldrb	r3, [r7, #18]
 80011a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 80011ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d129      	bne.n	8001208 <TinyBMS_CAN_ReadRegBlock+0x198>
 80011b4:	7d7b      	ldrb	r3, [r7, #21]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011bc:	3b01      	subs	r3, #1
 80011be:	429a      	cmp	r2, r3
 80011c0:	d122      	bne.n	8001208 <TinyBMS_CAN_ReadRegBlock+0x198>
					data = ((rx_msg[3] << 8) | rx_msg[4]);
 80011c2:	7cfb      	ldrb	r3, [r7, #19]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7d3b      	ldrb	r3, [r7, #20]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	873b      	strh	r3, [r7, #56]	; 0x38

					// MSG1 - Addr: 0xABCD - Data: 0x1234
					// MSG2 - Addr: 0xABDD - Data: 0x5678
					printf("MSG%u - ", msg_count);
 80011d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011d6:	4619      	mov	r1, r3
 80011d8:	4824      	ldr	r0, [pc, #144]	; (800126c <TinyBMS_CAN_ReadRegBlock+0x1fc>)
 80011da:	f006 faed 	bl	80077b8 <iprintf>
					printf("Addr: 0x%04X - ", (addr+(sizeof(addr)*(msg_count-1))) );
 80011de:	883a      	ldrh	r2, [r7, #0]
 80011e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011e4:	3b01      	subs	r3, #1
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4820      	ldr	r0, [pc, #128]	; (8001270 <TinyBMS_CAN_ReadRegBlock+0x200>)
 80011ee:	f006 fae3 	bl	80077b8 <iprintf>
					printf("Data: 0x%04X\n", data);
 80011f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011f4:	4619      	mov	r1, r3
 80011f6:	481f      	ldr	r0, [pc, #124]	; (8001274 <TinyBMS_CAN_ReadRegBlock+0x204>)
 80011f8:	f006 fade 	bl	80077b8 <iprintf>
					msg_count++;
 80011fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001200:	3301      	adds	r3, #1
 8001202:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8001206:	e011      	b.n	800122c <TinyBMS_CAN_ReadRegBlock+0x1bc>
				} else {
					printf("Data Corruption\n");
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <TinyBMS_CAN_ReadRegBlock+0x208>)
 800120a:	f006 fb5b 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 800120e:	23ff      	movs	r3, #255	; 0xff
 8001210:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 8001214:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001218:	e015      	b.n	8001246 <TinyBMS_CAN_ReadRegBlock+0x1d6>
				}

			} else {
				printf("Data Corruption\n");
 800121a:	4817      	ldr	r0, [pc, #92]	; (8001278 <TinyBMS_CAN_ReadRegBlock+0x208>)
 800121c:	f006 fb52 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8001226:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800122a:	e00c      	b.n	8001246 <TinyBMS_CAN_ReadRegBlock+0x1d6>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800122c:	2100      	movs	r1, #0
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <TinyBMS_CAN_ReadRegBlock+0x1e4>)
 8001230:	f002 ffef 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	f47f af69 	bne.w	800110e <TinyBMS_CAN_ReadRegBlock+0x9e>
			}
		}
	}
	retval = CMD_SUCCESS;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 8001242:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8001246:	4618      	mov	r0, r3
 8001248:	3740      	adds	r7, #64	; 0x40
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800b170 	.word	0x0800b170
 8001254:	20000200 	.word	0x20000200
 8001258:	20000004 	.word	0x20000004
 800125c:	0800b0ec 	.word	0x0800b0ec
 8001260:	0800b108 	.word	0x0800b108
 8001264:	08009f18 	.word	0x08009f18
 8001268:	0800b18c 	.word	0x0800b18c
 800126c:	0800b1b4 	.word	0x0800b1b4
 8001270:	0800b1c0 	.word	0x0800b1c0
 8001274:	0800b1d0 	.word	0x0800b1d0
 8001278:	0800b160 	.word	0x0800b160

0800127c <TinyBMS_CAN_ReadNewestEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_CAN_ReadNewestEvents(CAN_HandleTypeDef *hcan) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b092      	sub	sp, #72	; 0x48
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadNewestEvents\n");
 8001284:	486c      	ldr	r0, [pc, #432]	; (8001438 <TinyBMS_CAN_ReadNewestEvents+0x1bc>)
 8001286:	f006 fb1d 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 800128a:	23ff      	movs	r3, #255	; 0xff
 800128c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0, msg_count = 1, IDn = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001296:	2301      	movs	r3, #1
 8001298:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint32_t BTSP = 0, TSP = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	643b      	str	r3, [r7, #64]	; 0x40
 80012a6:	2300      	movs	r3, #0
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_NEWEST_EVENTS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80012aa:	4a64      	ldr	r2, [pc, #400]	; (800143c <TinyBMS_CAN_ReadNewestEvents+0x1c0>)
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80012be:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	2000      	movs	r0, #0
 80012ca:	f001 ff63 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80012ce:	e0a2      	b.n	8001416 <TinyBMS_CAN_ReadNewestEvents+0x19a>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	f107 021c 	add.w	r2, r7, #28
 80012d8:	2100      	movs	r1, #0
 80012da:	4859      	ldr	r0, [pc, #356]	; (8001440 <TinyBMS_CAN_ReadNewestEvents+0x1c4>)
 80012dc:	f002 fe87 	bl	8003fee <HAL_CAN_GetRxMessage>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <TinyBMS_CAN_ReadNewestEvents+0x6e>
			Error_Handler();
 80012e6:	f002 f8b9 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80012ea:	f240 4103 	movw	r1, #1027	; 0x403
 80012ee:	4854      	ldr	r0, [pc, #336]	; (8001440 <TinyBMS_CAN_ReadNewestEvents+0x1c4>)
 80012f0:	f002 ffb7 	bl	8004262 <HAL_CAN_ActivateNotification>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <TinyBMS_CAN_ReadNewestEvents+0x82>
			Error_Handler();
 80012fa:	f002 f8af 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4b50      	ldr	r3, [pc, #320]	; (8001444 <TinyBMS_CAN_ReadNewestEvents+0x1c8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8086 	bne.w	8001416 <TinyBMS_CAN_ReadNewestEvents+0x19a>
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	2b00      	cmp	r3, #0
 800130e:	f040 8082 	bne.w	8001416 <TinyBMS_CAN_ReadNewestEvents+0x19a>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001312:	7d3b      	ldrb	r3, [r7, #20]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d117      	bne.n	8001348 <TinyBMS_CAN_ReadNewestEvents+0xcc>
				printf("Response from BMS [Error]\n");
 8001318:	484b      	ldr	r0, [pc, #300]	; (8001448 <TinyBMS_CAN_ReadNewestEvents+0x1cc>)
 800131a:	f006 fad3 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 800131e:	7d7b      	ldrb	r3, [r7, #21]
 8001320:	4619      	mov	r1, r3
 8001322:	7dbb      	ldrb	r3, [r7, #22]
 8001324:	461a      	mov	r2, r3
 8001326:	4849      	ldr	r0, [pc, #292]	; (800144c <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8001328:	f006 fa46 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 800132c:	7dbb      	ldrb	r3, [r7, #22]
 800132e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				reportBMSError(error);
 8001332:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001336:	4618      	mov	r0, r3
 8001338:	f001 fb4e 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 800133c:	23ff      	movs	r3, #255	; 0xff
 800133e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 8001342:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001346:	e073      	b.n	8001430 <TinyBMS_CAN_ReadNewestEvents+0x1b4>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_NEWEST_EVENTS)) {
 8001348:	7d3b      	ldrb	r3, [r7, #20]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d15a      	bne.n	8001404 <TinyBMS_CAN_ReadNewestEvents+0x188>
 800134e:	7d7b      	ldrb	r3, [r7, #21]
 8001350:	2b11      	cmp	r3, #17
 8001352:	d157      	bne.n	8001404 <TinyBMS_CAN_ReadNewestEvents+0x188>
				if(msg_count == 1) {
 8001354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001358:	2b01      	cmp	r3, #1
 800135a:	d107      	bne.n	800136c <TinyBMS_CAN_ReadNewestEvents+0xf0>
					printf("Response from BMS [OK]\n");
 800135c:	483c      	ldr	r0, [pc, #240]	; (8001450 <TinyBMS_CAN_ReadNewestEvents+0x1d4>)
 800135e:	f006 fab1 	bl	80078c4 <puts>
					printf("CAN_TBMS_READ_NEWEST_EVENTS | CMD: 0x%02X\n", rx_msg[1]);
 8001362:	7d7b      	ldrb	r3, [r7, #21]
 8001364:	4619      	mov	r1, r3
 8001366:	483b      	ldr	r0, [pc, #236]	; (8001454 <TinyBMS_CAN_ReadNewestEvents+0x1d8>)
 8001368:	f006 fa26 	bl	80077b8 <iprintf>
				}
				pl = rx_msg[2];
 800136c:	7dbb      	ldrb	r3, [r7, #22]
 800136e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				//MSG1 - TinyBMS Timestamp
				//If payload is 4 Bytes and Byte 8 is 0x00
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 8001372:	7efb      	ldrb	r3, [r7, #27]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d118      	bne.n	80013aa <TinyBMS_CAN_ReadNewestEvents+0x12e>
 8001378:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800137c:	2b04      	cmp	r3, #4
 800137e:	d114      	bne.n	80013aa <TinyBMS_CAN_ReadNewestEvents+0x12e>
					BTSP = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 8001380:	7ebb      	ldrb	r3, [r7, #26]
 8001382:	061a      	lsls	r2, r3, #24
 8001384:	7e7b      	ldrb	r3, [r7, #25]
 8001386:	041b      	lsls	r3, r3, #16
 8001388:	431a      	orrs	r2, r3
 800138a:	7e3b      	ldrb	r3, [r7, #24]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	4313      	orrs	r3, r2
 8001390:	7dfa      	ldrb	r2, [r7, #23]
 8001392:	4313      	orrs	r3, r2
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
					printf("TinyBMS Timestamp (s): [%lu]\n", BTSP);
 8001396:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001398:	482f      	ldr	r0, [pc, #188]	; (8001458 <TinyBMS_CAN_ReadNewestEvents+0x1dc>)
 800139a:	f006 fa0d 	bl	80077b8 <iprintf>
					msg_count++;
 800139e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013a2:	3301      	adds	r3, #1
 80013a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013a8:	e02b      	b.n	8001402 <TinyBMS_CAN_ReadNewestEvents+0x186>
				//MSG2..n - Newest Event ID + Timestamp
				//If payload is 4 Bytes and Byte 8 is 1..n-1
				} else if((rx_msg[7] == (msg_count-1)) && (pl == 4)) {
 80013aa:	7efb      	ldrb	r3, [r7, #27]
 80013ac:	461a      	mov	r2, r3
 80013ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013b2:	3b01      	subs	r3, #1
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d11b      	bne.n	80013f0 <TinyBMS_CAN_ReadNewestEvents+0x174>
 80013b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d117      	bne.n	80013f0 <TinyBMS_CAN_ReadNewestEvents+0x174>
					TSP = ((0x00 << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 80013c0:	7e7b      	ldrb	r3, [r7, #25]
 80013c2:	041a      	lsls	r2, r3, #16
 80013c4:	7e3b      	ldrb	r3, [r7, #24]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	4313      	orrs	r3, r2
 80013ca:	7dfa      	ldrb	r2, [r7, #23]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
					IDn = rx_msg[6];
 80013d0:	7ebb      	ldrb	r3, [r7, #26]
 80013d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					printf("Event - ID: 0x%02X | Timestamp (s): [%lu]\n", IDn, TSP);
 80013d6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80013da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013dc:	4619      	mov	r1, r3
 80013de:	481f      	ldr	r0, [pc, #124]	; (800145c <TinyBMS_CAN_ReadNewestEvents+0x1e0>)
 80013e0:	f006 f9ea 	bl	80077b8 <iprintf>
					msg_count++;
 80013e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013e8:	3301      	adds	r3, #1
 80013ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013ee:	e008      	b.n	8001402 <TinyBMS_CAN_ReadNewestEvents+0x186>
				} else {
					printf("Data Corruption\n");
 80013f0:	481b      	ldr	r0, [pc, #108]	; (8001460 <TinyBMS_CAN_ReadNewestEvents+0x1e4>)
 80013f2:	f006 fa67 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 80013f6:	23ff      	movs	r3, #255	; 0xff
 80013f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					return retval;
 80013fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001400:	e016      	b.n	8001430 <TinyBMS_CAN_ReadNewestEvents+0x1b4>
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 8001402:	e008      	b.n	8001416 <TinyBMS_CAN_ReadNewestEvents+0x19a>
				}

			} else {
				printf("Data Corruption\n");
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <TinyBMS_CAN_ReadNewestEvents+0x1e4>)
 8001406:	f006 fa5d 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 8001410:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001414:	e00c      	b.n	8001430 <TinyBMS_CAN_ReadNewestEvents+0x1b4>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001416:	2100      	movs	r1, #0
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <TinyBMS_CAN_ReadNewestEvents+0x1c4>)
 800141a:	f002 fefa 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	f47f af55 	bne.w	80012d0 <TinyBMS_CAN_ReadNewestEvents+0x54>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001426:	2300      	movs	r3, #0
 8001428:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	return retval;
 800142c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
}
 8001430:	4618      	mov	r0, r3
 8001432:	3748      	adds	r7, #72	; 0x48
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	0800b268 	.word	0x0800b268
 800143c:	0800b300 	.word	0x0800b300
 8001440:	20000200 	.word	0x20000200
 8001444:	20000004 	.word	0x20000004
 8001448:	0800b0ec 	.word	0x0800b0ec
 800144c:	0800b108 	.word	0x0800b108
 8001450:	08009f18 	.word	0x08009f18
 8001454:	0800b288 	.word	0x0800b288
 8001458:	0800b2b4 	.word	0x0800b2b4
 800145c:	0800b2d4 	.word	0x0800b2d4
 8001460:	0800b160 	.word	0x0800b160

08001464 <TinyBMS_CAN_ReadAllEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_CAN_ReadAllEvents(CAN_HandleTypeDef *hcan) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b092      	sub	sp, #72	; 0x48
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadAllEvents\n");
 800146c:	486c      	ldr	r0, [pc, #432]	; (8001620 <TinyBMS_CAN_ReadAllEvents+0x1bc>)
 800146e:	f006 fa29 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8001472:	23ff      	movs	r3, #255	; 0xff
 8001474:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0, msg_count = 1, IDn = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800147e:	2301      	movs	r3, #1
 8001480:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint32_t BTSP = 0, TSP = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	643b      	str	r3, [r7, #64]	; 0x40
 800148e:	2300      	movs	r3, #0
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_ALL_EVENTS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001492:	4a64      	ldr	r2, [pc, #400]	; (8001624 <TinyBMS_CAN_ReadAllEvents+0x1c0>)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80014a6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	4619      	mov	r1, r3
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 fe6f 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80014b6:	e0a2      	b.n	80015fe <TinyBMS_CAN_ReadAllEvents+0x19a>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	f107 021c 	add.w	r2, r7, #28
 80014c0:	2100      	movs	r1, #0
 80014c2:	4859      	ldr	r0, [pc, #356]	; (8001628 <TinyBMS_CAN_ReadAllEvents+0x1c4>)
 80014c4:	f002 fd93 	bl	8003fee <HAL_CAN_GetRxMessage>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <TinyBMS_CAN_ReadAllEvents+0x6e>
			Error_Handler();
 80014ce:	f001 ffc5 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80014d2:	f240 4103 	movw	r1, #1027	; 0x403
 80014d6:	4854      	ldr	r0, [pc, #336]	; (8001628 <TinyBMS_CAN_ReadAllEvents+0x1c4>)
 80014d8:	f002 fec3 	bl	8004262 <HAL_CAN_ActivateNotification>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <TinyBMS_CAN_ReadAllEvents+0x82>
			Error_Handler();
 80014e2:	f001 ffbb 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	4b50      	ldr	r3, [pc, #320]	; (800162c <TinyBMS_CAN_ReadAllEvents+0x1c8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8086 	bne.w	80015fe <TinyBMS_CAN_ReadAllEvents+0x19a>
 80014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f040 8082 	bne.w	80015fe <TinyBMS_CAN_ReadAllEvents+0x19a>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80014fa:	7d3b      	ldrb	r3, [r7, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d117      	bne.n	8001530 <TinyBMS_CAN_ReadAllEvents+0xcc>
				printf("Response from BMS [Error]\n");
 8001500:	484b      	ldr	r0, [pc, #300]	; (8001630 <TinyBMS_CAN_ReadAllEvents+0x1cc>)
 8001502:	f006 f9df 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001506:	7d7b      	ldrb	r3, [r7, #21]
 8001508:	4619      	mov	r1, r3
 800150a:	7dbb      	ldrb	r3, [r7, #22]
 800150c:	461a      	mov	r2, r3
 800150e:	4849      	ldr	r0, [pc, #292]	; (8001634 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8001510:	f006 f952 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 8001514:	7dbb      	ldrb	r3, [r7, #22]
 8001516:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				reportBMSError(error);
 800151a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fa5a 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8001524:	23ff      	movs	r3, #255	; 0xff
 8001526:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 800152a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800152e:	e073      	b.n	8001618 <TinyBMS_CAN_ReadAllEvents+0x1b4>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ALL_EVENTS)) {
 8001530:	7d3b      	ldrb	r3, [r7, #20]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d15a      	bne.n	80015ec <TinyBMS_CAN_ReadAllEvents+0x188>
 8001536:	7d7b      	ldrb	r3, [r7, #21]
 8001538:	2b12      	cmp	r3, #18
 800153a:	d157      	bne.n	80015ec <TinyBMS_CAN_ReadAllEvents+0x188>
				if(msg_count == 1) {
 800153c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001540:	2b01      	cmp	r3, #1
 8001542:	d107      	bne.n	8001554 <TinyBMS_CAN_ReadAllEvents+0xf0>
					printf("Response from BMS [OK]\n");
 8001544:	483c      	ldr	r0, [pc, #240]	; (8001638 <TinyBMS_CAN_ReadAllEvents+0x1d4>)
 8001546:	f006 f9bd 	bl	80078c4 <puts>
					printf("CAN_TBMS_READ_ALL_EVENTS | CMD: 0x%02X\n", rx_msg[1]);
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	4619      	mov	r1, r3
 800154e:	483b      	ldr	r0, [pc, #236]	; (800163c <TinyBMS_CAN_ReadAllEvents+0x1d8>)
 8001550:	f006 f932 	bl	80077b8 <iprintf>
				}
				pl = rx_msg[2];
 8001554:	7dbb      	ldrb	r3, [r7, #22]
 8001556:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				//MSG1 - TinyBMS Timestamp
				//If payload is 4 Bytes and Byte 8 is 0x00
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 800155a:	7efb      	ldrb	r3, [r7, #27]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d118      	bne.n	8001592 <TinyBMS_CAN_ReadAllEvents+0x12e>
 8001560:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001564:	2b04      	cmp	r3, #4
 8001566:	d114      	bne.n	8001592 <TinyBMS_CAN_ReadAllEvents+0x12e>
					BTSP = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 8001568:	7ebb      	ldrb	r3, [r7, #26]
 800156a:	061a      	lsls	r2, r3, #24
 800156c:	7e7b      	ldrb	r3, [r7, #25]
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	431a      	orrs	r2, r3
 8001572:	7e3b      	ldrb	r3, [r7, #24]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	4313      	orrs	r3, r2
 8001578:	7dfa      	ldrb	r2, [r7, #23]
 800157a:	4313      	orrs	r3, r2
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
					printf("TinyBMS Timestamp (s): [%lu]\n", BTSP);
 800157e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001580:	482f      	ldr	r0, [pc, #188]	; (8001640 <TinyBMS_CAN_ReadAllEvents+0x1dc>)
 8001582:	f006 f919 	bl	80077b8 <iprintf>
					msg_count++;
 8001586:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800158a:	3301      	adds	r3, #1
 800158c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001590:	e02b      	b.n	80015ea <TinyBMS_CAN_ReadAllEvents+0x186>
				//MSG2..n - Event ID + Timestamp
				//If payload is 4 Bytes and Byte 8 is 1..n-1
				} else if((rx_msg[7] == (msg_count-1)) && (pl == 4)) {
 8001592:	7efb      	ldrb	r3, [r7, #27]
 8001594:	461a      	mov	r2, r3
 8001596:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800159a:	3b01      	subs	r3, #1
 800159c:	429a      	cmp	r2, r3
 800159e:	d11b      	bne.n	80015d8 <TinyBMS_CAN_ReadAllEvents+0x174>
 80015a0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d117      	bne.n	80015d8 <TinyBMS_CAN_ReadAllEvents+0x174>
					TSP = ((0x00 << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 80015a8:	7e7b      	ldrb	r3, [r7, #25]
 80015aa:	041a      	lsls	r2, r3, #16
 80015ac:	7e3b      	ldrb	r3, [r7, #24]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	7dfa      	ldrb	r2, [r7, #23]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
					IDn = rx_msg[6];
 80015b8:	7ebb      	ldrb	r3, [r7, #26]
 80015ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					printf("Event - ID: 0x%02X | Timestamp (s): [%lu]\n", IDn, TSP);
 80015be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80015c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015c4:	4619      	mov	r1, r3
 80015c6:	481f      	ldr	r0, [pc, #124]	; (8001644 <TinyBMS_CAN_ReadAllEvents+0x1e0>)
 80015c8:	f006 f8f6 	bl	80077b8 <iprintf>
					msg_count++;
 80015cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015d0:	3301      	adds	r3, #1
 80015d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80015d6:	e008      	b.n	80015ea <TinyBMS_CAN_ReadAllEvents+0x186>
				} else {
					printf("Data Corruption\n");
 80015d8:	481b      	ldr	r0, [pc, #108]	; (8001648 <TinyBMS_CAN_ReadAllEvents+0x1e4>)
 80015da:	f006 f973 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 80015de:	23ff      	movs	r3, #255	; 0xff
 80015e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					return retval;
 80015e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015e8:	e016      	b.n	8001618 <TinyBMS_CAN_ReadAllEvents+0x1b4>
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 80015ea:	e008      	b.n	80015fe <TinyBMS_CAN_ReadAllEvents+0x19a>
				}

			} else {
				printf("Data Corruption\n");
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <TinyBMS_CAN_ReadAllEvents+0x1e4>)
 80015ee:	f006 f969 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 80015f2:	23ff      	movs	r3, #255	; 0xff
 80015f4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 80015f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015fc:	e00c      	b.n	8001618 <TinyBMS_CAN_ReadAllEvents+0x1b4>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80015fe:	2100      	movs	r1, #0
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <TinyBMS_CAN_ReadAllEvents+0x1c4>)
 8001602:	f002 fe06 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f47f af55 	bne.w	80014b8 <TinyBMS_CAN_ReadAllEvents+0x54>
			}
		}
	}
	retval = CMD_SUCCESS;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	return retval;
 8001614:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
}
 8001618:	4618      	mov	r0, r3
 800161a:	3748      	adds	r7, #72	; 0x48
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	0800b308 	.word	0x0800b308
 8001624:	0800b34c 	.word	0x0800b34c
 8001628:	20000200 	.word	0x20000200
 800162c:	20000004 	.word	0x20000004
 8001630:	0800b0ec 	.word	0x0800b0ec
 8001634:	0800b108 	.word	0x0800b108
 8001638:	08009f18 	.word	0x08009f18
 800163c:	0800b324 	.word	0x0800b324
 8001640:	0800b2b4 	.word	0x0800b2b4
 8001644:	0800b2d4 	.word	0x0800b2d4
 8001648:	0800b160 	.word	0x0800b160

0800164c <TinyBMS_CAN_ReadBatteryPackVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_CAN_ReadBatteryPackVoltage(CAN_HandleTypeDef *hcan) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b092      	sub	sp, #72	; 0x48
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackVoltage\n");
 8001654:	4850      	ldr	r0, [pc, #320]	; (8001798 <TinyBMS_CAN_ReadBatteryPackVoltage+0x14c>)
 8001656:	f006 f935 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 800165a:	23ff      	movs	r3, #255	; 0xff
 800165c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_PACK_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001660:	4a4e      	ldr	r2, [pc, #312]	; (800179c <TinyBMS_CAN_ReadBatteryPackVoltage+0x150>)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001674:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4619      	mov	r1, r3
 800167e:	2000      	movs	r0, #0
 8001680:	f001 fd88 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001684:	e073      	b.n	800176e <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	f107 021c 	add.w	r2, r7, #28
 800168e:	2100      	movs	r1, #0
 8001690:	4843      	ldr	r0, [pc, #268]	; (80017a0 <TinyBMS_CAN_ReadBatteryPackVoltage+0x154>)
 8001692:	f002 fcac 	bl	8003fee <HAL_CAN_GetRxMessage>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <TinyBMS_CAN_ReadBatteryPackVoltage+0x54>
			Error_Handler();
 800169c:	f001 fede 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80016a0:	f240 4103 	movw	r1, #1027	; 0x403
 80016a4:	483e      	ldr	r0, [pc, #248]	; (80017a0 <TinyBMS_CAN_ReadBatteryPackVoltage+0x154>)
 80016a6:	f002 fddc 	bl	8004262 <HAL_CAN_ActivateNotification>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <TinyBMS_CAN_ReadBatteryPackVoltage+0x68>
			Error_Handler();
 80016b0:	f001 fed4 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <TinyBMS_CAN_ReadBatteryPackVoltage+0x158>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d157      	bne.n	800176e <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d154      	bne.n	800176e <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80016c4:	7d3b      	ldrb	r3, [r7, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11b      	bne.n	8001702 <TinyBMS_CAN_ReadBatteryPackVoltage+0xb6>
				printf("Response from BMS [Error]\n");
 80016ca:	4837      	ldr	r0, [pc, #220]	; (80017a8 <TinyBMS_CAN_ReadBatteryPackVoltage+0x15c>)
 80016cc:	f006 f8fa 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80016d0:	7d7b      	ldrb	r3, [r7, #21]
 80016d2:	4619      	mov	r1, r3
 80016d4:	7dbb      	ldrb	r3, [r7, #22]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4834      	ldr	r0, [pc, #208]	; (80017ac <TinyBMS_CAN_ReadBatteryPackVoltage+0x160>)
 80016da:	f006 f86d 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 80016de:	7dbb      	ldrb	r3, [r7, #22]
 80016e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 80016e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f975 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 80016ee:	23ff      	movs	r3, #255	; 0xff
 80016f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 80016f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001700:	e045      	b.n	800178e <TinyBMS_CAN_ReadBatteryPackVoltage+0x142>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_VOLTAGE)) {
 8001702:	7d3b      	ldrb	r3, [r7, #20]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d125      	bne.n	8001754 <TinyBMS_CAN_ReadBatteryPackVoltage+0x108>
 8001708:	7d7b      	ldrb	r3, [r7, #21]
 800170a:	2b14      	cmp	r3, #20
 800170c:	d122      	bne.n	8001754 <TinyBMS_CAN_ReadBatteryPackVoltage+0x108>
				printf("Response from BMS [OK]\n");
 800170e:	4828      	ldr	r0, [pc, #160]	; (80017b0 <TinyBMS_CAN_ReadBatteryPackVoltage+0x164>)
 8001710:	f006 f8d8 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_PACK_VOLTAGE | CMD: 0x%02X\n", rx_msg[1]);
 8001714:	7d7b      	ldrb	r3, [r7, #21]
 8001716:	4619      	mov	r1, r3
 8001718:	4826      	ldr	r0, [pc, #152]	; (80017b4 <TinyBMS_CAN_ReadBatteryPackVoltage+0x168>)
 800171a:	f006 f84d 	bl	80077b8 <iprintf>
				uint32_t data = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 800171e:	7e7b      	ldrb	r3, [r7, #25]
 8001720:	061a      	lsls	r2, r3, #24
 8001722:	7e3b      	ldrb	r3, [r7, #24]
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	431a      	orrs	r2, r3
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4313      	orrs	r3, r2
 800172e:	7dba      	ldrb	r2, [r7, #22]
 8001730:	4313      	orrs	r3, r2
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
				float packVoltage = data;
 8001734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Voltage: %f (V)\n", packVoltage);
 8001742:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001744:	f7fe ff20 	bl	8000588 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	481a      	ldr	r0, [pc, #104]	; (80017b8 <TinyBMS_CAN_ReadBatteryPackVoltage+0x16c>)
 800174e:	f006 f833 	bl	80077b8 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_VOLTAGE)) {
 8001752:	e00c      	b.n	800176e <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>

			} else {
				printf("Data Corruption\n");
 8001754:	4819      	ldr	r0, [pc, #100]	; (80017bc <TinyBMS_CAN_ReadBatteryPackVoltage+0x170>)
 8001756:	f006 f8b5 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 800175a:	23ff      	movs	r3, #255	; 0xff
 800175c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8001760:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176c:	e00f      	b.n	800178e <TinyBMS_CAN_ReadBatteryPackVoltage+0x142>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800176e:	2100      	movs	r1, #0
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <TinyBMS_CAN_ReadBatteryPackVoltage+0x154>)
 8001772:	f002 fd4e 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d184      	bne.n	8001686 <TinyBMS_CAN_ReadBatteryPackVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return retval;
 8001782:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	3748      	adds	r7, #72	; 0x48
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	0800b354 	.word	0x0800b354
 800179c:	0800b3cc 	.word	0x0800b3cc
 80017a0:	20000200 	.word	0x20000200
 80017a4:	20000004 	.word	0x20000004
 80017a8:	0800b0ec 	.word	0x0800b0ec
 80017ac:	0800b108 	.word	0x0800b108
 80017b0:	08009f18 	.word	0x08009f18
 80017b4:	0800b378 	.word	0x0800b378
 80017b8:	0800b3a4 	.word	0x0800b3a4
 80017bc:	0800b160 	.word	0x0800b160

080017c0 <TinyBMS_CAN_ReadBatteryPackCurrent>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_CAN_ReadBatteryPackCurrent(CAN_HandleTypeDef *hcan) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b092      	sub	sp, #72	; 0x48
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackCurrent\n");
 80017c8:	4850      	ldr	r0, [pc, #320]	; (800190c <TinyBMS_CAN_ReadBatteryPackCurrent+0x14c>)
 80017ca:	f006 f87b 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 80017ce:	23ff      	movs	r3, #255	; 0xff
 80017d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_PACK_CURRENT, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80017d4:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <TinyBMS_CAN_ReadBatteryPackCurrent+0x150>)
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017de:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80017e8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4619      	mov	r1, r3
 80017f2:	2000      	movs	r0, #0
 80017f4:	f001 fcce 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80017f8:	e073      	b.n	80018e2 <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	f107 021c 	add.w	r2, r7, #28
 8001802:	2100      	movs	r1, #0
 8001804:	4843      	ldr	r0, [pc, #268]	; (8001914 <TinyBMS_CAN_ReadBatteryPackCurrent+0x154>)
 8001806:	f002 fbf2 	bl	8003fee <HAL_CAN_GetRxMessage>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <TinyBMS_CAN_ReadBatteryPackCurrent+0x54>
			Error_Handler();
 8001810:	f001 fe24 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001814:	f240 4103 	movw	r1, #1027	; 0x403
 8001818:	483e      	ldr	r0, [pc, #248]	; (8001914 <TinyBMS_CAN_ReadBatteryPackCurrent+0x154>)
 800181a:	f002 fd22 	bl	8004262 <HAL_CAN_ActivateNotification>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <TinyBMS_CAN_ReadBatteryPackCurrent+0x68>
			Error_Handler();
 8001824:	f001 fe1a 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <TinyBMS_CAN_ReadBatteryPackCurrent+0x158>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d157      	bne.n	80018e2 <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d154      	bne.n	80018e2 <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001838:	7d3b      	ldrb	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11b      	bne.n	8001876 <TinyBMS_CAN_ReadBatteryPackCurrent+0xb6>
				printf("Response from BMS [Error]\n");
 800183e:	4837      	ldr	r0, [pc, #220]	; (800191c <TinyBMS_CAN_ReadBatteryPackCurrent+0x15c>)
 8001840:	f006 f840 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001844:	7d7b      	ldrb	r3, [r7, #21]
 8001846:	4619      	mov	r1, r3
 8001848:	7dbb      	ldrb	r3, [r7, #22]
 800184a:	461a      	mov	r2, r3
 800184c:	4834      	ldr	r0, [pc, #208]	; (8001920 <TinyBMS_CAN_ReadBatteryPackCurrent+0x160>)
 800184e:	f005 ffb3 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 8001852:	7dbb      	ldrb	r3, [r7, #22]
 8001854:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 8001858:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800185c:	4618      	mov	r0, r3
 800185e:	f001 f8bb 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8001862:	23ff      	movs	r3, #255	; 0xff
 8001864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8001868:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001874:	e045      	b.n	8001902 <TinyBMS_CAN_ReadBatteryPackCurrent+0x142>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_CURRENT)) {
 8001876:	7d3b      	ldrb	r3, [r7, #20]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d125      	bne.n	80018c8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x108>
 800187c:	7d7b      	ldrb	r3, [r7, #21]
 800187e:	2b15      	cmp	r3, #21
 8001880:	d122      	bne.n	80018c8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x108>
				printf("Response from BMS [OK]\n");
 8001882:	4828      	ldr	r0, [pc, #160]	; (8001924 <TinyBMS_CAN_ReadBatteryPackCurrent+0x164>)
 8001884:	f006 f81e 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_PACK_CURRENT | CMD: 0x%02X\n", rx_msg[1]);
 8001888:	7d7b      	ldrb	r3, [r7, #21]
 800188a:	4619      	mov	r1, r3
 800188c:	4826      	ldr	r0, [pc, #152]	; (8001928 <TinyBMS_CAN_ReadBatteryPackCurrent+0x168>)
 800188e:	f005 ff93 	bl	80077b8 <iprintf>
				uint32_t data = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 8001892:	7e7b      	ldrb	r3, [r7, #25]
 8001894:	061a      	lsls	r2, r3, #24
 8001896:	7e3b      	ldrb	r3, [r7, #24]
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	4313      	orrs	r3, r2
 80018a2:	7dba      	ldrb	r2, [r7, #22]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
				float packCurrent = data;
 80018a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Current: %f (A)\n", packCurrent);
 80018b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018b8:	f7fe fe66 	bl	8000588 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	481a      	ldr	r0, [pc, #104]	; (800192c <TinyBMS_CAN_ReadBatteryPackCurrent+0x16c>)
 80018c2:	f005 ff79 	bl	80077b8 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_CURRENT)) {
 80018c6:	e00c      	b.n	80018e2 <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>

			} else {
				printf("Data Corruption\n");
 80018c8:	4819      	ldr	r0, [pc, #100]	; (8001930 <TinyBMS_CAN_ReadBatteryPackCurrent+0x170>)
 80018ca:	f005 fffb 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 80018ce:	23ff      	movs	r3, #255	; 0xff
 80018d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 80018d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e0:	e00f      	b.n	8001902 <TinyBMS_CAN_ReadBatteryPackCurrent+0x142>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80018e2:	2100      	movs	r1, #0
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <TinyBMS_CAN_ReadBatteryPackCurrent+0x154>)
 80018e6:	f002 fc94 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d184      	bne.n	80017fa <TinyBMS_CAN_ReadBatteryPackCurrent+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return retval;
 80018f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	3748      	adds	r7, #72	; 0x48
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	0800b3d4 	.word	0x0800b3d4
 8001910:	0800b44c 	.word	0x0800b44c
 8001914:	20000200 	.word	0x20000200
 8001918:	20000004 	.word	0x20000004
 800191c:	0800b0ec 	.word	0x0800b0ec
 8001920:	0800b108 	.word	0x0800b108
 8001924:	08009f18 	.word	0x08009f18
 8001928:	0800b3f8 	.word	0x0800b3f8
 800192c:	0800b424 	.word	0x0800b424
 8001930:	0800b160 	.word	0x0800b160

08001934 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(CAN_HandleTypeDef *hcan) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b090      	sub	sp, #64	; 0x40
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackMaxCellVoltage\n");
 800193c:	4845      	ldr	r0, [pc, #276]	; (8001a54 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x120>)
 800193e:	f005 ffc1 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8001942:	23ff      	movs	r3, #255	; 0xff
 8001944:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_MAX_CELL_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001948:	4a43      	ldr	r2, [pc, #268]	; (8001a58 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x124>)
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001952:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 800195c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	4619      	mov	r1, r3
 8001966:	2000      	movs	r0, #0
 8001968:	f001 fc14 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800196c:	e060      	b.n	8001a30 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xfc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	f107 021c 	add.w	r2, r7, #28
 8001976:	2100      	movs	r1, #0
 8001978:	4838      	ldr	r0, [pc, #224]	; (8001a5c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x128>)
 800197a:	f002 fb38 	bl	8003fee <HAL_CAN_GetRxMessage>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x54>
			Error_Handler();
 8001984:	f001 fd6a 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001988:	f240 4103 	movw	r1, #1027	; 0x403
 800198c:	4833      	ldr	r0, [pc, #204]	; (8001a5c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x128>)
 800198e:	f002 fc68 	bl	8004262 <HAL_CAN_ActivateNotification>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x68>
			Error_Handler();
 8001998:	f001 fd60 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x12c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d144      	bne.n	8001a30 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xfc>
 80019a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d141      	bne.n	8001a30 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xfc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80019ac:	7d3b      	ldrb	r3, [r7, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xb0>
				printf("Response from BMS [Error]\n");
 80019b2:	482c      	ldr	r0, [pc, #176]	; (8001a64 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x130>)
 80019b4:	f005 ff86 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80019b8:	7d7b      	ldrb	r3, [r7, #21]
 80019ba:	4619      	mov	r1, r3
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	461a      	mov	r2, r3
 80019c0:	4829      	ldr	r0, [pc, #164]	; (8001a68 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x134>)
 80019c2:	f005 fef9 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 80019c6:	7dbb      	ldrb	r3, [r7, #22]
 80019c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 80019cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 f801 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 80019d6:	23ff      	movs	r3, #255	; 0xff
 80019d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80019dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	e032      	b.n	8001a4a <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x116>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MAX_CELL_VOLTAGE)) {
 80019e4:	7d3b      	ldrb	r3, [r7, #20]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d118      	bne.n	8001a1c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xe8>
 80019ea:	7d7b      	ldrb	r3, [r7, #21]
 80019ec:	2b16      	cmp	r3, #22
 80019ee:	d115      	bne.n	8001a1c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xe8>
				printf("Response from BMS [OK]\n");
 80019f0:	481e      	ldr	r0, [pc, #120]	; (8001a6c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x138>)
 80019f2:	f005 ff67 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_MAX_CELL_VOLTAGE | CMD: 0x%02X\n", rx_msg[1]);
 80019f6:	7d7b      	ldrb	r3, [r7, #21]
 80019f8:	4619      	mov	r1, r3
 80019fa:	481d      	ldr	r0, [pc, #116]	; (8001a70 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x13c>)
 80019fc:	f005 fedc 	bl	80077b8 <iprintf>
				uint16_t maxCellVoltage = ((rx_msg[3] << 8) | (rx_msg[2]));
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	7dbb      	ldrb	r3, [r7, #22]
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Maximum Cell Voltage: %u (mV)\n", maxCellVoltage);
 8001a10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a12:	4619      	mov	r1, r3
 8001a14:	4817      	ldr	r0, [pc, #92]	; (8001a74 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x140>)
 8001a16:	f005 fecf 	bl	80077b8 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MAX_CELL_VOLTAGE)) {
 8001a1a:	e009      	b.n	8001a30 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xfc>

			} else {
				printf("Data Corruption\n");
 8001a1c:	4816      	ldr	r0, [pc, #88]	; (8001a78 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x144>)
 8001a1e:	f005 ff51 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8001a22:	23ff      	movs	r3, #255	; 0xff
 8001a24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001a28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	e00c      	b.n	8001a4a <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x116>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001a30:	2100      	movs	r1, #0
 8001a32:	480a      	ldr	r0, [pc, #40]	; (8001a5c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x128>)
 8001a34:	f002 fbed 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d197      	bne.n	800196e <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8001a44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a48:	b29b      	uxth	r3, r3
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3740      	adds	r7, #64	; 0x40
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	0800b454 	.word	0x0800b454
 8001a58:	0800b4e8 	.word	0x0800b4e8
 8001a5c:	20000200 	.word	0x20000200
 8001a60:	20000004 	.word	0x20000004
 8001a64:	0800b0ec 	.word	0x0800b0ec
 8001a68:	0800b108 	.word	0x0800b108
 8001a6c:	08009f18 	.word	0x08009f18
 8001a70:	0800b480 	.word	0x0800b480
 8001a74:	0800b4b0 	.word	0x0800b4b0
 8001a78:	0800b160 	.word	0x0800b160

08001a7c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_CAN_ReadBatteryPackMinCellVoltage(CAN_HandleTypeDef *hcan) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b090      	sub	sp, #64	; 0x40
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackMinCellVoltage\n");
 8001a84:	4845      	ldr	r0, [pc, #276]	; (8001b9c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x120>)
 8001a86:	f005 ff1d 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8001a8a:	23ff      	movs	r3, #255	; 0xff
 8001a8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_MIN_CELL_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001a90:	4a43      	ldr	r2, [pc, #268]	; (8001ba0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x124>)
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a9a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001aa4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f001 fb70 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001ab4:	e060      	b.n	8001b78 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xfc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	f107 021c 	add.w	r2, r7, #28
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4838      	ldr	r0, [pc, #224]	; (8001ba4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x128>)
 8001ac2:	f002 fa94 	bl	8003fee <HAL_CAN_GetRxMessage>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x54>
			Error_Handler();
 8001acc:	f001 fcc6 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001ad0:	f240 4103 	movw	r1, #1027	; 0x403
 8001ad4:	4833      	ldr	r0, [pc, #204]	; (8001ba4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x128>)
 8001ad6:	f002 fbc4 	bl	8004262 <HAL_CAN_ActivateNotification>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x68>
			Error_Handler();
 8001ae0:	f001 fcbc 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x12c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d144      	bne.n	8001b78 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xfc>
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d141      	bne.n	8001b78 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xfc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001af4:	7d3b      	ldrb	r3, [r7, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xb0>
				printf("Response from BMS [Error]\n");
 8001afa:	482c      	ldr	r0, [pc, #176]	; (8001bac <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x130>)
 8001afc:	f005 fee2 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001b00:	7d7b      	ldrb	r3, [r7, #21]
 8001b02:	4619      	mov	r1, r3
 8001b04:	7dbb      	ldrb	r3, [r7, #22]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4829      	ldr	r0, [pc, #164]	; (8001bb0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x134>)
 8001b0a:	f005 fe55 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 8001b0e:	7dbb      	ldrb	r3, [r7, #22]
 8001b10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 8001b14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 ff5d 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8001b1e:	23ff      	movs	r3, #255	; 0xff
 8001b20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001b24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	e032      	b.n	8001b92 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x116>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MIN_CELL_VOLTAGE)) {
 8001b2c:	7d3b      	ldrb	r3, [r7, #20]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d118      	bne.n	8001b64 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xe8>
 8001b32:	7d7b      	ldrb	r3, [r7, #21]
 8001b34:	2b17      	cmp	r3, #23
 8001b36:	d115      	bne.n	8001b64 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xe8>
				printf("Response from BMS [OK]\n");
 8001b38:	481e      	ldr	r0, [pc, #120]	; (8001bb4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x138>)
 8001b3a:	f005 fec3 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_MIN_CELL_VOLTAGE | CMD: 0x%02X\n", rx_msg[1]);
 8001b3e:	7d7b      	ldrb	r3, [r7, #21]
 8001b40:	4619      	mov	r1, r3
 8001b42:	481d      	ldr	r0, [pc, #116]	; (8001bb8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x13c>)
 8001b44:	f005 fe38 	bl	80077b8 <iprintf>
				uint16_t minCellVoltage = ((rx_msg[3] << 8) | (rx_msg[2]));
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	7dbb      	ldrb	r3, [r7, #22]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	87bb      	strh	r3, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Minimum Cell Voltage: %u (mV)\n", minCellVoltage);
 8001b58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4817      	ldr	r0, [pc, #92]	; (8001bbc <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x140>)
 8001b5e:	f005 fe2b 	bl	80077b8 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MIN_CELL_VOLTAGE)) {
 8001b62:	e009      	b.n	8001b78 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xfc>

			} else {
				printf("Data Corruption\n");
 8001b64:	4816      	ldr	r0, [pc, #88]	; (8001bc0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x144>)
 8001b66:	f005 fead 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8001b6a:	23ff      	movs	r3, #255	; 0xff
 8001b6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001b70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	e00c      	b.n	8001b92 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x116>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001b78:	2100      	movs	r1, #0
 8001b7a:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x128>)
 8001b7c:	f002 fb49 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d197      	bne.n	8001ab6 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8001b8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b90:	b29b      	uxth	r3, r3
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3740      	adds	r7, #64	; 0x40
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	0800b4f0 	.word	0x0800b4f0
 8001ba0:	0800b584 	.word	0x0800b584
 8001ba4:	20000200 	.word	0x20000200
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	0800b0ec 	.word	0x0800b0ec
 8001bb0:	0800b108 	.word	0x0800b108
 8001bb4:	08009f18 	.word	0x08009f18
 8001bb8:	0800b51c 	.word	0x0800b51c
 8001bbc:	0800b54c 	.word	0x0800b54c
 8001bc0:	0800b160 	.word	0x0800b160

08001bc4 <TinyBMS_CAN_ReadOnlineStatus>:
 * 						 	        [UINT16]
 * 						   0x91 - Charging [INFO], 0x92 - Fully Charged [INFO]
 * 						   0x93 - Discharging [INFO], 0x94 - Regeneration [INFO]
 * 						   0x97 - Idle [INFO], 0x9B - Fault [ERROR]
 */
uint16_t TinyBMS_CAN_ReadOnlineStatus(CAN_HandleTypeDef *hcan) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b090      	sub	sp, #64	; 0x40
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadOnlineStatus\n");
 8001bcc:	486a      	ldr	r0, [pc, #424]	; (8001d78 <TinyBMS_CAN_ReadOnlineStatus+0x1b4>)
 8001bce:	f005 fe79 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8001bd2:	23ff      	movs	r3, #255	; 0xff
 8001bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_ONLINE_STATUS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001bd8:	4a68      	ldr	r2, [pc, #416]	; (8001d7c <TinyBMS_CAN_ReadOnlineStatus+0x1b8>)
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001be2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001bec:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f001 facc 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001bfc:	e0a9      	b.n	8001d52 <TinyBMS_CAN_ReadOnlineStatus+0x18e>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	f107 021c 	add.w	r2, r7, #28
 8001c06:	2100      	movs	r1, #0
 8001c08:	485d      	ldr	r0, [pc, #372]	; (8001d80 <TinyBMS_CAN_ReadOnlineStatus+0x1bc>)
 8001c0a:	f002 f9f0 	bl	8003fee <HAL_CAN_GetRxMessage>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <TinyBMS_CAN_ReadOnlineStatus+0x54>
			Error_Handler();
 8001c14:	f001 fc22 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001c18:	f240 4103 	movw	r1, #1027	; 0x403
 8001c1c:	4858      	ldr	r0, [pc, #352]	; (8001d80 <TinyBMS_CAN_ReadOnlineStatus+0x1bc>)
 8001c1e:	f002 fb20 	bl	8004262 <HAL_CAN_ActivateNotification>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <TinyBMS_CAN_ReadOnlineStatus+0x68>
			Error_Handler();
 8001c28:	f001 fc18 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	4b55      	ldr	r3, [pc, #340]	; (8001d84 <TinyBMS_CAN_ReadOnlineStatus+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	f040 808d 	bne.w	8001d52 <TinyBMS_CAN_ReadOnlineStatus+0x18e>
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 8089 	bne.w	8001d52 <TinyBMS_CAN_ReadOnlineStatus+0x18e>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001c40:	7d3b      	ldrb	r3, [r7, #20]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d118      	bne.n	8001c78 <TinyBMS_CAN_ReadOnlineStatus+0xb4>
				printf("Response from BMS [Error]\n");
 8001c46:	4850      	ldr	r0, [pc, #320]	; (8001d88 <TinyBMS_CAN_ReadOnlineStatus+0x1c4>)
 8001c48:	f005 fe3c 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001c4c:	7d7b      	ldrb	r3, [r7, #21]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	7dbb      	ldrb	r3, [r7, #22]
 8001c52:	461a      	mov	r2, r3
 8001c54:	484d      	ldr	r0, [pc, #308]	; (8001d8c <TinyBMS_CAN_ReadOnlineStatus+0x1c8>)
 8001c56:	f005 fdaf 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 8001c5a:	7dbb      	ldrb	r3, [r7, #22]
 8001c5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				reportBMSError(error);
 8001c60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 feb7 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8001c6a:	23ff      	movs	r3, #255	; 0xff
 8001c6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	e07a      	b.n	8001d6e <TinyBMS_CAN_ReadOnlineStatus+0x1aa>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ONLINE_STATUS)) {
 8001c78:	7d3b      	ldrb	r3, [r7, #20]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d15f      	bne.n	8001d3e <TinyBMS_CAN_ReadOnlineStatus+0x17a>
 8001c7e:	7d7b      	ldrb	r3, [r7, #21]
 8001c80:	2b18      	cmp	r3, #24
 8001c82:	d15c      	bne.n	8001d3e <TinyBMS_CAN_ReadOnlineStatus+0x17a>
				printf("Response from BMS [OK]\n");
 8001c84:	4842      	ldr	r0, [pc, #264]	; (8001d90 <TinyBMS_CAN_ReadOnlineStatus+0x1cc>)
 8001c86:	f005 fe1d 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_ONLINE_STATUS | CMD: 0x%02X\n", rx_msg[1]);
 8001c8a:	7d7b      	ldrb	r3, [r7, #21]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4841      	ldr	r0, [pc, #260]	; (8001d94 <TinyBMS_CAN_ReadOnlineStatus+0x1d0>)
 8001c90:	f005 fd92 	bl	80077b8 <iprintf>
				uint16_t onlineStatus = ((rx_msg[3] << 8) | (rx_msg[2]));
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	7dbb      	ldrb	r3, [r7, #22]
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	87bb      	strh	r3, [r7, #60]	; 0x3c

				switch(onlineStatus) {
 8001ca4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ca6:	3b91      	subs	r3, #145	; 0x91
 8001ca8:	2b0a      	cmp	r3, #10
 8001caa:	d83d      	bhi.n	8001d28 <TinyBMS_CAN_ReadOnlineStatus+0x164>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <TinyBMS_CAN_ReadOnlineStatus+0xf0>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001ce1 	.word	0x08001ce1
 8001cb8:	08001ced 	.word	0x08001ced
 8001cbc:	08001cf9 	.word	0x08001cf9
 8001cc0:	08001d29 	.word	0x08001d29
 8001cc4:	08001d29 	.word	0x08001d29
 8001cc8:	08001d05 	.word	0x08001d05
 8001ccc:	08001d11 	.word	0x08001d11
 8001cd0:	08001d29 	.word	0x08001d29
 8001cd4:	08001d29 	.word	0x08001d29
 8001cd8:	08001d29 	.word	0x08001d29
 8001cdc:	08001d1d 	.word	0x08001d1d
				case TINYBMS_STATUS_CHARGING:
					printf("TinyBMS Online Status: 0x%02X - Charging [INFO]\n", onlineStatus);
 8001ce0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	482c      	ldr	r0, [pc, #176]	; (8001d98 <TinyBMS_CAN_ReadOnlineStatus+0x1d4>)
 8001ce6:	f005 fd67 	bl	80077b8 <iprintf>
					break;
 8001cea:	e027      	b.n	8001d3c <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_FULLYCHARGED:
					printf("TinyBMS Online Status: 0x%02X - Fully Charged [INFO]\n", onlineStatus);
 8001cec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001cee:	4619      	mov	r1, r3
 8001cf0:	482a      	ldr	r0, [pc, #168]	; (8001d9c <TinyBMS_CAN_ReadOnlineStatus+0x1d8>)
 8001cf2:	f005 fd61 	bl	80077b8 <iprintf>
					break;
 8001cf6:	e021      	b.n	8001d3c <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_DISCHARGING:
					printf("TinyBMS Online Status: 0x%02X - Discharging [INFO]\n", onlineStatus);
 8001cf8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4828      	ldr	r0, [pc, #160]	; (8001da0 <TinyBMS_CAN_ReadOnlineStatus+0x1dc>)
 8001cfe:	f005 fd5b 	bl	80077b8 <iprintf>
					break;
 8001d02:	e01b      	b.n	8001d3c <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_REGENERATION:
					printf("TinyBMS Online Status: 0x%02X - Regeneration [INFO]\n", onlineStatus);
 8001d04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001d06:	4619      	mov	r1, r3
 8001d08:	4826      	ldr	r0, [pc, #152]	; (8001da4 <TinyBMS_CAN_ReadOnlineStatus+0x1e0>)
 8001d0a:	f005 fd55 	bl	80077b8 <iprintf>
					break;
 8001d0e:	e015      	b.n	8001d3c <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_IDLE:
					printf("TinyBMS Online Status: 0x%02X - Idle [INFO]\n", onlineStatus);
 8001d10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001d12:	4619      	mov	r1, r3
 8001d14:	4824      	ldr	r0, [pc, #144]	; (8001da8 <TinyBMS_CAN_ReadOnlineStatus+0x1e4>)
 8001d16:	f005 fd4f 	bl	80077b8 <iprintf>
					break;
 8001d1a:	e00f      	b.n	8001d3c <TinyBMS_CAN_ReadOnlineStatus+0x178>
				case TINYBMS_STATUS_FAULT:
					printf("TinyBMS Online Status: 0x%02X - Fault [Error]\n", onlineStatus);
 8001d1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4822      	ldr	r0, [pc, #136]	; (8001dac <TinyBMS_CAN_ReadOnlineStatus+0x1e8>)
 8001d22:	f005 fd49 	bl	80077b8 <iprintf>
					break;
 8001d26:	e009      	b.n	8001d3c <TinyBMS_CAN_ReadOnlineStatus+0x178>
				default:
					printf("Invalid TinyBMS OnlineStatus received\n");
 8001d28:	4821      	ldr	r0, [pc, #132]	; (8001db0 <TinyBMS_CAN_ReadOnlineStatus+0x1ec>)
 8001d2a:	f005 fdcb 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 8001d2e:	23ff      	movs	r3, #255	; 0xff
 8001d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					return retval;
 8001d34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	e018      	b.n	8001d6e <TinyBMS_CAN_ReadOnlineStatus+0x1aa>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ONLINE_STATUS)) {
 8001d3c:	e009      	b.n	8001d52 <TinyBMS_CAN_ReadOnlineStatus+0x18e>
				}

			} else {
				printf("Data Corruption\n");
 8001d3e:	481d      	ldr	r0, [pc, #116]	; (8001db4 <TinyBMS_CAN_ReadOnlineStatus+0x1f0>)
 8001d40:	f005 fdc0 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8001d44:	23ff      	movs	r3, #255	; 0xff
 8001d46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001d4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	e00d      	b.n	8001d6e <TinyBMS_CAN_ReadOnlineStatus+0x1aa>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001d52:	2100      	movs	r1, #0
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <TinyBMS_CAN_ReadOnlineStatus+0x1bc>)
 8001d56:	f002 fa5c 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f47f af4e 	bne.w	8001bfe <TinyBMS_CAN_ReadOnlineStatus+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8001d68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d6c:	b29b      	uxth	r3, r3
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3740      	adds	r7, #64	; 0x40
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	0800b58c 	.word	0x0800b58c
 8001d7c:	0800b738 	.word	0x0800b738
 8001d80:	20000200 	.word	0x20000200
 8001d84:	20000004 	.word	0x20000004
 8001d88:	0800b0ec 	.word	0x0800b0ec
 8001d8c:	0800b108 	.word	0x0800b108
 8001d90:	08009f18 	.word	0x08009f18
 8001d94:	0800b5ac 	.word	0x0800b5ac
 8001d98:	0800b5d8 	.word	0x0800b5d8
 8001d9c:	0800b60c 	.word	0x0800b60c
 8001da0:	0800b644 	.word	0x0800b644
 8001da4:	0800b678 	.word	0x0800b678
 8001da8:	0800b6b0 	.word	0x0800b6b0
 8001dac:	0800b6e0 	.word	0x0800b6e0
 8001db0:	0800b710 	.word	0x0800b710
 8001db4:	0800b160 	.word	0x0800b160

08001db8 <TinyBMS_CAN_ReadLifetimeCounter>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_CAN_ReadLifetimeCounter(CAN_HandleTypeDef *hcan) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b090      	sub	sp, #64	; 0x40
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadLifetimeCounter\n");
 8001dc0:	4844      	ldr	r0, [pc, #272]	; (8001ed4 <TinyBMS_CAN_ReadLifetimeCounter+0x11c>)
 8001dc2:	f005 fd7f 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8001dc6:	23ff      	movs	r3, #255	; 0xff
 8001dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_LIFETIME_COUNTER, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001dcc:	4a42      	ldr	r2, [pc, #264]	; (8001ed8 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dd6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001de0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	4619      	mov	r1, r3
 8001dea:	2000      	movs	r0, #0
 8001dec:	f001 f9d2 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001df0:	e060      	b.n	8001eb4 <TinyBMS_CAN_ReadLifetimeCounter+0xfc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	f107 0218 	add.w	r2, r7, #24
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4837      	ldr	r0, [pc, #220]	; (8001edc <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 8001dfe:	f002 f8f6 	bl	8003fee <HAL_CAN_GetRxMessage>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <TinyBMS_CAN_ReadLifetimeCounter+0x54>
			Error_Handler();
 8001e08:	f001 fb28 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001e0c:	f240 4103 	movw	r1, #1027	; 0x403
 8001e10:	4832      	ldr	r0, [pc, #200]	; (8001edc <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 8001e12:	f002 fa26 	bl	8004262 <HAL_CAN_ActivateNotification>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <TinyBMS_CAN_ReadLifetimeCounter+0x68>
			Error_Handler();
 8001e1c:	f001 fb1e 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <TinyBMS_CAN_ReadLifetimeCounter+0x128>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d144      	bne.n	8001eb4 <TinyBMS_CAN_ReadLifetimeCounter+0xfc>
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d141      	bne.n	8001eb4 <TinyBMS_CAN_ReadLifetimeCounter+0xfc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001e30:	7c3b      	ldrb	r3, [r7, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d117      	bne.n	8001e66 <TinyBMS_CAN_ReadLifetimeCounter+0xae>
				printf("Response from BMS [Error]\n");
 8001e36:	482b      	ldr	r0, [pc, #172]	; (8001ee4 <TinyBMS_CAN_ReadLifetimeCounter+0x12c>)
 8001e38:	f005 fd44 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001e3c:	7c7b      	ldrb	r3, [r7, #17]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	7cbb      	ldrb	r3, [r7, #18]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4828      	ldr	r0, [pc, #160]	; (8001ee8 <TinyBMS_CAN_ReadLifetimeCounter+0x130>)
 8001e46:	f005 fcb7 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 8001e4a:	7cbb      	ldrb	r3, [r7, #18]
 8001e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				reportBMSError(error);
 8001e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fdbf 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8001e5a:	23ff      	movs	r3, #255	; 0xff
 8001e5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001e60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e64:	e032      	b.n	8001ecc <TinyBMS_CAN_ReadLifetimeCounter+0x114>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_LIFETIME_COUNTER)) {
 8001e66:	7c3b      	ldrb	r3, [r7, #16]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d11a      	bne.n	8001ea2 <TinyBMS_CAN_ReadLifetimeCounter+0xea>
 8001e6c:	7c7b      	ldrb	r3, [r7, #17]
 8001e6e:	2b19      	cmp	r3, #25
 8001e70:	d117      	bne.n	8001ea2 <TinyBMS_CAN_ReadLifetimeCounter+0xea>
				printf("Response from BMS [OK]\n");
 8001e72:	481e      	ldr	r0, [pc, #120]	; (8001eec <TinyBMS_CAN_ReadLifetimeCounter+0x134>)
 8001e74:	f005 fd26 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_LIFETIME_COUNTER | CMD: 0x%02X\n", rx_msg[1]);
 8001e78:	7c7b      	ldrb	r3, [r7, #17]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <TinyBMS_CAN_ReadLifetimeCounter+0x138>)
 8001e7e:	f005 fc9b 	bl	80077b8 <iprintf>
				uint32_t bms_lifetime = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 8001e82:	7d7b      	ldrb	r3, [r7, #21]
 8001e84:	061a      	lsls	r2, r3, #24
 8001e86:	7d3b      	ldrb	r3, [r7, #20]
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	4313      	orrs	r3, r2
 8001e92:	7cba      	ldrb	r2, [r7, #18]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
				printf("TinyBMS Lifetime Counter: %lu (s)\n", bms_lifetime);
 8001e98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e9a:	4816      	ldr	r0, [pc, #88]	; (8001ef4 <TinyBMS_CAN_ReadLifetimeCounter+0x13c>)
 8001e9c:	f005 fc8c 	bl	80077b8 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_LIFETIME_COUNTER)) {
 8001ea0:	e008      	b.n	8001eb4 <TinyBMS_CAN_ReadLifetimeCounter+0xfc>

			} else {
				printf("Data Corruption\n");
 8001ea2:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <TinyBMS_CAN_ReadLifetimeCounter+0x140>)
 8001ea4:	f005 fd0e 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8001ea8:	23ff      	movs	r3, #255	; 0xff
 8001eaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001eae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001eb2:	e00b      	b.n	8001ecc <TinyBMS_CAN_ReadLifetimeCounter+0x114>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 8001eb8:	f002 f9ab 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d197      	bne.n	8001df2 <TinyBMS_CAN_ReadLifetimeCounter+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8001ec8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3740      	adds	r7, #64	; 0x40
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	0800b740 	.word	0x0800b740
 8001ed8:	0800b790 	.word	0x0800b790
 8001edc:	20000200 	.word	0x20000200
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	0800b0ec 	.word	0x0800b0ec
 8001ee8:	0800b108 	.word	0x0800b108
 8001eec:	08009f18 	.word	0x08009f18
 8001ef0:	0800b760 	.word	0x0800b760
 8001ef4:	0800a960 	.word	0x0800a960
 8001ef8:	0800b160 	.word	0x0800b160

08001efc <TinyBMS_CAN_ReadEstimatedSOCValue>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_CAN_ReadEstimatedSOCValue(CAN_HandleTypeDef *hcan) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b090      	sub	sp, #64	; 0x40
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadEstimatedSOCValue\n");
 8001f04:	4844      	ldr	r0, [pc, #272]	; (8002018 <TinyBMS_CAN_ReadEstimatedSOCValue+0x11c>)
 8001f06:	f005 fcdd 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8001f0a:	23ff      	movs	r3, #255	; 0xff
 8001f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_EST_SOC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001f10:	4a42      	ldr	r2, [pc, #264]	; (800201c <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f1a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001f24:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f001 f930 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001f34:	e060      	b.n	8001ff8 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfc>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	f107 0218 	add.w	r2, r7, #24
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4837      	ldr	r0, [pc, #220]	; (8002020 <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8001f42:	f002 f854 	bl	8003fee <HAL_CAN_GetRxMessage>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <TinyBMS_CAN_ReadEstimatedSOCValue+0x54>
			Error_Handler();
 8001f4c:	f001 fa86 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001f50:	f240 4103 	movw	r1, #1027	; 0x403
 8001f54:	4832      	ldr	r0, [pc, #200]	; (8002020 <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8001f56:	f002 f984 	bl	8004262 <HAL_CAN_ActivateNotification>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <TinyBMS_CAN_ReadEstimatedSOCValue+0x68>
			Error_Handler();
 8001f60:	f001 fa7c 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <TinyBMS_CAN_ReadEstimatedSOCValue+0x128>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d144      	bne.n	8001ff8 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfc>
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d141      	bne.n	8001ff8 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfc>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001f74:	7c3b      	ldrb	r3, [r7, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d117      	bne.n	8001faa <TinyBMS_CAN_ReadEstimatedSOCValue+0xae>
				printf("Response from BMS [Error]\n");
 8001f7a:	482b      	ldr	r0, [pc, #172]	; (8002028 <TinyBMS_CAN_ReadEstimatedSOCValue+0x12c>)
 8001f7c:	f005 fca2 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001f80:	7c7b      	ldrb	r3, [r7, #17]
 8001f82:	4619      	mov	r1, r3
 8001f84:	7cbb      	ldrb	r3, [r7, #18]
 8001f86:	461a      	mov	r2, r3
 8001f88:	4828      	ldr	r0, [pc, #160]	; (800202c <TinyBMS_CAN_ReadEstimatedSOCValue+0x130>)
 8001f8a:	f005 fc15 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 8001f8e:	7cbb      	ldrb	r3, [r7, #18]
 8001f90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				reportBMSError(error);
 8001f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fd1d 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8001f9e:	23ff      	movs	r3, #255	; 0xff
 8001fa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001fa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fa8:	e032      	b.n	8002010 <TinyBMS_CAN_ReadEstimatedSOCValue+0x114>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_EST_SOC)) {
 8001faa:	7c3b      	ldrb	r3, [r7, #16]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d11a      	bne.n	8001fe6 <TinyBMS_CAN_ReadEstimatedSOCValue+0xea>
 8001fb0:	7c7b      	ldrb	r3, [r7, #17]
 8001fb2:	2b1a      	cmp	r3, #26
 8001fb4:	d117      	bne.n	8001fe6 <TinyBMS_CAN_ReadEstimatedSOCValue+0xea>
				printf("Response from BMS [OK]\n");
 8001fb6:	481e      	ldr	r0, [pc, #120]	; (8002030 <TinyBMS_CAN_ReadEstimatedSOCValue+0x134>)
 8001fb8:	f005 fc84 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_EST_SOC | CMD: 0x%02X\n", rx_msg[1]);
 8001fbc:	7c7b      	ldrb	r3, [r7, #17]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481c      	ldr	r0, [pc, #112]	; (8002034 <TinyBMS_CAN_ReadEstimatedSOCValue+0x138>)
 8001fc2:	f005 fbf9 	bl	80077b8 <iprintf>
				uint32_t est_soc = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 8001fc6:	7d7b      	ldrb	r3, [r7, #21]
 8001fc8:	061a      	lsls	r2, r3, #24
 8001fca:	7d3b      	ldrb	r3, [r7, #20]
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	7cba      	ldrb	r2, [r7, #18]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38
				printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\n", est_soc);
 8001fdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fde:	4816      	ldr	r0, [pc, #88]	; (8002038 <TinyBMS_CAN_ReadEstimatedSOCValue+0x13c>)
 8001fe0:	f005 fbea 	bl	80077b8 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_EST_SOC)) {
 8001fe4:	e008      	b.n	8001ff8 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfc>

			} else {
				printf("Data Corruption\n");
 8001fe6:	4815      	ldr	r0, [pc, #84]	; (800203c <TinyBMS_CAN_ReadEstimatedSOCValue+0x140>)
 8001fe8:	f005 fc6c 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8001fec:	23ff      	movs	r3, #255	; 0xff
 8001fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ff6:	e00b      	b.n	8002010 <TinyBMS_CAN_ReadEstimatedSOCValue+0x114>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8001ffc:	f002 f909 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d197      	bne.n	8001f36 <TinyBMS_CAN_ReadEstimatedSOCValue+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 800200c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8002010:	4618      	mov	r0, r3
 8002012:	3740      	adds	r7, #64	; 0x40
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	0800b798 	.word	0x0800b798
 800201c:	0800b824 	.word	0x0800b824
 8002020:	20000200 	.word	0x20000200
 8002024:	20000004 	.word	0x20000004
 8002028:	0800b0ec 	.word	0x0800b0ec
 800202c:	0800b108 	.word	0x0800b108
 8002030:	08009f18 	.word	0x08009f18
 8002034:	0800b7bc 	.word	0x0800b7bc
 8002038:	0800b7e4 	.word	0x0800b7e4
 800203c:	0800b160 	.word	0x0800b160

08002040 <TinyBMS_CAN_ReadDeviceTemperatures>:
 * 						 	      [INT16]				   [INT16] 				  [INT16]
 * 						  	(Reg 48) DATA1 - TinyBMS Internal Temperature
 * 						  	(Reg 42) DATA2 - External Temp Sensor #1 (value of -327689 if NC)
 * 						  	(Reg 43) DATA3 - External Temp Sensor #2 (value of -327689 if NC)
 */
uint8_t TinyBMS_CAN_ReadDeviceTemperatures(CAN_HandleTypeDef *hcan) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b090      	sub	sp, #64	; 0x40
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadDeviceTemperatures\n");
 8002048:	486e      	ldr	r0, [pc, #440]	; (8002204 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c4>)
 800204a:	f005 fc3b 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 800204e:	23ff      	movs	r3, #255	; 0xff
 8002050:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800205a:	2300      	movs	r3, #0
 800205c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_TEMPS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002060:	4a69      	ldr	r2, [pc, #420]	; (8002208 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c8>)
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800206a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8002074:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	4619      	mov	r1, r3
 800207e:	2000      	movs	r0, #0
 8002080:	f001 f888 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002084:	e0ac      	b.n	80021e0 <TinyBMS_CAN_ReadDeviceTemperatures+0x1a0>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	f107 0218 	add.w	r2, r7, #24
 800208e:	2100      	movs	r1, #0
 8002090:	485e      	ldr	r0, [pc, #376]	; (800220c <TinyBMS_CAN_ReadDeviceTemperatures+0x1cc>)
 8002092:	f001 ffac 	bl	8003fee <HAL_CAN_GetRxMessage>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <TinyBMS_CAN_ReadDeviceTemperatures+0x60>
			Error_Handler();
 800209c:	f001 f9de 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80020a0:	f240 4103 	movw	r1, #1027	; 0x403
 80020a4:	4859      	ldr	r0, [pc, #356]	; (800220c <TinyBMS_CAN_ReadDeviceTemperatures+0x1cc>)
 80020a6:	f002 f8dc 	bl	8004262 <HAL_CAN_ActivateNotification>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <TinyBMS_CAN_ReadDeviceTemperatures+0x74>
			Error_Handler();
 80020b0:	f001 f9d4 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4b56      	ldr	r3, [pc, #344]	; (8002210 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	f040 8090 	bne.w	80021e0 <TinyBMS_CAN_ReadDeviceTemperatures+0x1a0>
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 808c 	bne.w	80021e0 <TinyBMS_CAN_ReadDeviceTemperatures+0x1a0>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80020c8:	7c3b      	ldrb	r3, [r7, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d117      	bne.n	80020fe <TinyBMS_CAN_ReadDeviceTemperatures+0xbe>
				printf("Response from BMS [Error]\n");
 80020ce:	4851      	ldr	r0, [pc, #324]	; (8002214 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 80020d0:	f005 fbf8 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80020d4:	7c7b      	ldrb	r3, [r7, #17]
 80020d6:	4619      	mov	r1, r3
 80020d8:	7cbb      	ldrb	r3, [r7, #18]
 80020da:	461a      	mov	r2, r3
 80020dc:	484e      	ldr	r0, [pc, #312]	; (8002218 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d8>)
 80020de:	f005 fb6b 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 80020e2:	7cbb      	ldrb	r3, [r7, #18]
 80020e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				reportBMSError(error);
 80020e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fc73 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 80020f2:	23ff      	movs	r3, #255	; 0xff
 80020f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 80020f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80020fc:	e07d      	b.n	80021fa <TinyBMS_CAN_ReadDeviceTemperatures+0x1ba>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_TEMPS)) {
 80020fe:	7c3b      	ldrb	r3, [r7, #16]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d164      	bne.n	80021ce <TinyBMS_CAN_ReadDeviceTemperatures+0x18e>
 8002104:	7c7b      	ldrb	r3, [r7, #17]
 8002106:	2b1b      	cmp	r3, #27
 8002108:	d161      	bne.n	80021ce <TinyBMS_CAN_ReadDeviceTemperatures+0x18e>
				if(msg_count == 1) {
 800210a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <TinyBMS_CAN_ReadDeviceTemperatures+0xe2>
					printf("Response from BMS [OK]\n");
 8002112:	4842      	ldr	r0, [pc, #264]	; (800221c <TinyBMS_CAN_ReadDeviceTemperatures+0x1dc>)
 8002114:	f005 fbd6 	bl	80078c4 <puts>
					printf("CAN_TBMS_READ_TEMPS | CMD: 0x%02X\n", rx_msg[1]);
 8002118:	7c7b      	ldrb	r3, [r7, #17]
 800211a:	4619      	mov	r1, r3
 800211c:	4840      	ldr	r0, [pc, #256]	; (8002220 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e0>)
 800211e:	f005 fb4b 	bl	80077b8 <iprintf>
				}
				pl = rx_msg[2];
 8002122:	7cbb      	ldrb	r3, [r7, #18]
 8002124:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//MSG1
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 8002128:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800212c:	2b02      	cmp	r3, #2
 800212e:	d115      	bne.n	800215c <TinyBMS_CAN_ReadDeviceTemperatures+0x11c>
 8002130:	7d7b      	ldrb	r3, [r7, #21]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d112      	bne.n	800215c <TinyBMS_CAN_ReadDeviceTemperatures+0x11c>
					int16_t temp1 = ((rx_msg[4] << 8) | (rx_msg[3]));
 8002136:	7d3b      	ldrb	r3, [r7, #20]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21a      	sxth	r2, r3
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("TinyBMS   Internal Temp: %d (°C)\n", temp1);
 8002144:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8002148:	4619      	mov	r1, r3
 800214a:	4836      	ldr	r0, [pc, #216]	; (8002224 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e4>)
 800214c:	f005 fb34 	bl	80077b8 <iprintf>
					msg_count++;
 8002150:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002154:	3301      	adds	r3, #1
 8002156:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 800215a:	e037      	b.n	80021cc <TinyBMS_CAN_ReadDeviceTemperatures+0x18c>
				//MSG2
				} else if((pl == 2) && (rx_msg[5] == 0x01)) {
 800215c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002160:	2b02      	cmp	r3, #2
 8002162:	d115      	bne.n	8002190 <TinyBMS_CAN_ReadDeviceTemperatures+0x150>
 8002164:	7d7b      	ldrb	r3, [r7, #21]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d112      	bne.n	8002190 <TinyBMS_CAN_ReadDeviceTemperatures+0x150>
					int16_t temp2 = ((rx_msg[4] << 8) | (rx_msg[3]));
 800216a:	7d3b      	ldrb	r3, [r7, #20]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21a      	sxth	r2, r3
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	873b      	strh	r3, [r7, #56]	; 0x38
					printf("TinyBMS External Temp 1: %d (°C)\n", temp2);
 8002178:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800217c:	4619      	mov	r1, r3
 800217e:	482a      	ldr	r0, [pc, #168]	; (8002228 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e8>)
 8002180:	f005 fb1a 	bl	80077b8 <iprintf>
					msg_count++;
 8002184:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002188:	3301      	adds	r3, #1
 800218a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				} else if((pl == 2) && (rx_msg[5] == 0x01)) {
 800218e:	e01d      	b.n	80021cc <TinyBMS_CAN_ReadDeviceTemperatures+0x18c>
				//MSG3
				} else if((pl == 2) && (rx_msg[5] == 0x02)) {
 8002190:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002194:	2b02      	cmp	r3, #2
 8002196:	d110      	bne.n	80021ba <TinyBMS_CAN_ReadDeviceTemperatures+0x17a>
 8002198:	7d7b      	ldrb	r3, [r7, #21]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d10d      	bne.n	80021ba <TinyBMS_CAN_ReadDeviceTemperatures+0x17a>
					int16_t temp3 = ((rx_msg[4] << 8) | (rx_msg[3]));
 800219e:	7d3b      	ldrb	r3, [r7, #20]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	86fb      	strh	r3, [r7, #54]	; 0x36
					printf("TinyBMS External Temp 2: %d (°C)\n", temp3);
 80021ac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80021b0:	4619      	mov	r1, r3
 80021b2:	481e      	ldr	r0, [pc, #120]	; (800222c <TinyBMS_CAN_ReadDeviceTemperatures+0x1ec>)
 80021b4:	f005 fb00 	bl	80077b8 <iprintf>
				} else if((pl == 2) && (rx_msg[5] == 0x02)) {
 80021b8:	e008      	b.n	80021cc <TinyBMS_CAN_ReadDeviceTemperatures+0x18c>
				} else {
					printf("Data Corruption\n");
 80021ba:	481d      	ldr	r0, [pc, #116]	; (8002230 <TinyBMS_CAN_ReadDeviceTemperatures+0x1f0>)
 80021bc:	f005 fb82 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 80021c0:	23ff      	movs	r3, #255	; 0xff
 80021c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 80021c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80021ca:	e016      	b.n	80021fa <TinyBMS_CAN_ReadDeviceTemperatures+0x1ba>
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 80021cc:	e008      	b.n	80021e0 <TinyBMS_CAN_ReadDeviceTemperatures+0x1a0>
				}

			} else {
				printf("Data Corruption\n");
 80021ce:	4818      	ldr	r0, [pc, #96]	; (8002230 <TinyBMS_CAN_ReadDeviceTemperatures+0x1f0>)
 80021d0:	f005 fb78 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 80021d4:	23ff      	movs	r3, #255	; 0xff
 80021d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 80021da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80021de:	e00c      	b.n	80021fa <TinyBMS_CAN_ReadDeviceTemperatures+0x1ba>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80021e0:	2100      	movs	r1, #0
 80021e2:	480a      	ldr	r0, [pc, #40]	; (800220c <TinyBMS_CAN_ReadDeviceTemperatures+0x1cc>)
 80021e4:	f002 f815 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f47f af4b 	bne.w	8002086 <TinyBMS_CAN_ReadDeviceTemperatures+0x46>
			}
		}
	}
	retval = CMD_SUCCESS;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 80021f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3740      	adds	r7, #64	; 0x40
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	0800b82c 	.word	0x0800b82c
 8002208:	0800b8e0 	.word	0x0800b8e0
 800220c:	20000200 	.word	0x20000200
 8002210:	20000004 	.word	0x20000004
 8002214:	0800b0ec 	.word	0x0800b0ec
 8002218:	0800b108 	.word	0x0800b108
 800221c:	08009f18 	.word	0x08009f18
 8002220:	0800b850 	.word	0x0800b850
 8002224:	0800b874 	.word	0x0800b874
 8002228:	0800b898 	.word	0x0800b898
 800222c:	0800b8bc 	.word	0x0800b8bc
 8002230:	0800b160 	.word	0x0800b160

08002234 <TinyBMS_CAN_ReadBatteryPackCellVoltages>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte n*2+2    Byte n*2+3 		Byte n*2+4 	Byte n*2+5
 * 						 	  DATAn:LSB   	DATAn:MSB   	CRC:LSB 	CRC:MSB
 * 						 	       	 [UINT16]
 */
uint8_t TinyBMS_CAN_ReadBatteryPackCellVoltages(CAN_HandleTypeDef *hcan) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	; 0x40
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackCellVoltages\n");
 800223c:	4859      	ldr	r0, [pc, #356]	; (80023a4 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x170>)
 800223e:	f005 fb41 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8002242:	23ff      	movs	r3, #255	; 0xff
 8002244:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800224e:	2300      	movs	r3, #0
 8002250:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t cellVoltage = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	877b      	strh	r3, [r7, #58]	; 0x3a

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_CELL_VOLTAGES, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002258:	4a53      	ldr	r2, [pc, #332]	; (80023a8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002262:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 800226c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	4619      	mov	r1, r3
 8002276:	2000      	movs	r0, #0
 8002278:	f000 ff8c 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800227c:	e080      	b.n	8002380 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14c>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	f107 021c 	add.w	r2, r7, #28
 8002286:	2100      	movs	r1, #0
 8002288:	4848      	ldr	r0, [pc, #288]	; (80023ac <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 800228a:	f001 feb0 	bl	8003fee <HAL_CAN_GetRxMessage>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x64>
			Error_Handler();
 8002294:	f001 f8e2 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8002298:	f240 4103 	movw	r1, #1027	; 0x403
 800229c:	4843      	ldr	r0, [pc, #268]	; (80023ac <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 800229e:	f001 ffe0 	bl	8004262 <HAL_CAN_ActivateNotification>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x78>
			Error_Handler();
 80022a8:	f001 f8d8 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	4b40      	ldr	r3, [pc, #256]	; (80023b0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x17c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d164      	bne.n	8002380 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14c>
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d161      	bne.n	8002380 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14c>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80022bc:	7d3b      	ldrb	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d117      	bne.n	80022f2 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0xbe>
				printf("Response from BMS [Error]\n");
 80022c2:	483c      	ldr	r0, [pc, #240]	; (80023b4 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x180>)
 80022c4:	f005 fafe 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80022c8:	7d7b      	ldrb	r3, [r7, #21]
 80022ca:	4619      	mov	r1, r3
 80022cc:	7dbb      	ldrb	r3, [r7, #22]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4839      	ldr	r0, [pc, #228]	; (80023b8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x184>)
 80022d2:	f005 fa71 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 80022d6:	7dbb      	ldrb	r3, [r7, #22]
 80022d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				reportBMSError(error);
 80022dc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fb79 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 80022e6:	23ff      	movs	r3, #255	; 0xff
 80022e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 80022ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80022f0:	e053      	b.n	800239a <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x166>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CELL_VOLTAGES)) {
 80022f2:	7d3b      	ldrb	r3, [r7, #20]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13a      	bne.n	800236e <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x13a>
 80022f8:	7d7b      	ldrb	r3, [r7, #21]
 80022fa:	2b1c      	cmp	r3, #28
 80022fc:	d137      	bne.n	800236e <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x13a>
				if(msg_count == 1) {
 80022fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002302:	2b01      	cmp	r3, #1
 8002304:	d107      	bne.n	8002316 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0xe2>
					printf("Response from BMS [OK]\n");
 8002306:	482d      	ldr	r0, [pc, #180]	; (80023bc <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x188>)
 8002308:	f005 fadc 	bl	80078c4 <puts>
					printf("CAN_TBMS_READ_CELL_VOLTAGES | CMD: 0x%02X\n", rx_msg[1]);
 800230c:	7d7b      	ldrb	r3, [r7, #21]
 800230e:	4619      	mov	r1, r3
 8002310:	482b      	ldr	r0, [pc, #172]	; (80023c0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x18c>)
 8002312:	f005 fa51 	bl	80077b8 <iprintf>
				}
				pl = rx_msg[2];
 8002316:	7dbb      	ldrb	r3, [r7, #22]
 8002318:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				//msg_count is equal to the cell_count
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 800231c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002320:	2b02      	cmp	r3, #2
 8002322:	d11b      	bne.n	800235c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x128>
 8002324:	7e7b      	ldrb	r3, [r7, #25]
 8002326:	461a      	mov	r2, r3
 8002328:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800232c:	3b01      	subs	r3, #1
 800232e:	429a      	cmp	r2, r3
 8002330:	d114      	bne.n	800235c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x128>
					cellVoltage = ((rx_msg[4] << 8) | rx_msg[3]);
 8002332:	7e3b      	ldrb	r3, [r7, #24]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	b21a      	sxth	r2, r3
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	b21b      	sxth	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b21b      	sxth	r3, r3
 8002340:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("Secondary Battery Pack - Cell#: %u | Voltage: %u (0.1mV Resolution)\n", msg_count, cellVoltage);
 8002342:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002346:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002348:	4619      	mov	r1, r3
 800234a:	481e      	ldr	r0, [pc, #120]	; (80023c4 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x190>)
 800234c:	f005 fa34 	bl	80077b8 <iprintf>
					msg_count++;
 8002350:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002354:	3301      	adds	r3, #1
 8002356:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 800235a:	e011      	b.n	8002380 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14c>
				} else {
					printf("Data Corruption\n");
 800235c:	481a      	ldr	r0, [pc, #104]	; (80023c8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x194>)
 800235e:	f005 fab1 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 8002362:	23ff      	movs	r3, #255	; 0xff
 8002364:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 8002368:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800236c:	e015      	b.n	800239a <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x166>
				}

			} else {
				printf("Data Corruption\n");
 800236e:	4816      	ldr	r0, [pc, #88]	; (80023c8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x194>)
 8002370:	f005 faa8 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8002374:	23ff      	movs	r3, #255	; 0xff
 8002376:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 800237a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800237e:	e00c      	b.n	800239a <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x166>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002380:	2100      	movs	r1, #0
 8002382:	480a      	ldr	r0, [pc, #40]	; (80023ac <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 8002384:	f001 ff45 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	f47f af77 	bne.w	800227e <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x4a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8002390:	2300      	movs	r3, #0
 8002392:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 8002396:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 800239a:	4618      	mov	r0, r3
 800239c:	3740      	adds	r7, #64	; 0x40
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	0800b8e8 	.word	0x0800b8e8
 80023a8:	0800b984 	.word	0x0800b984
 80023ac:	20000200 	.word	0x20000200
 80023b0:	20000004 	.word	0x20000004
 80023b4:	0800b0ec 	.word	0x0800b0ec
 80023b8:	0800b108 	.word	0x0800b108
 80023bc:	08009f18 	.word	0x08009f18
 80023c0:	0800b910 	.word	0x0800b910
 80023c4:	0800b93c 	.word	0x0800b93c
 80023c8:	0800b160 	.word	0x0800b160

080023cc <TinyBMS_CAN_ReadSettingsValues>:
 * 						   0x01 - Min. settings     0x02 - Max. settings,
 * 						   0x03 - Default settings  0x04 - Current settings
 *
 * 						   RL - Registers to read. Max. 100 (0x64) registers
 */
uint8_t TinyBMS_CAN_ReadSettingsValues(CAN_HandleTypeDef *hcan, uint8_t option, uint8_t rl) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b090      	sub	sp, #64	; 0x40
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	printf("TinyBMS_CAN_ReadSettingsValues\n");
 80023dc:	4877      	ldr	r0, [pc, #476]	; (80025bc <TinyBMS_CAN_ReadSettingsValues+0x1f0>)
 80023de:	f005 fa71 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 80023e2:	23ff      	movs	r3, #255	; 0xff
 80023e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t data = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	877b      	strh	r3, [r7, #58]	; 0x3a

	switch(option) {
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d81a      	bhi.n	8002436 <TinyBMS_CAN_ReadSettingsValues+0x6a>
 8002400:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <TinyBMS_CAN_ReadSettingsValues+0x3c>)
 8002402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002406:	bf00      	nop
 8002408:	08002419 	.word	0x08002419
 800240c:	08002421 	.word	0x08002421
 8002410:	08002429 	.word	0x08002429
 8002414:	08002431 	.word	0x08002431
	case 0x01:
		printf("0x01 Min Settings\n");
 8002418:	4869      	ldr	r0, [pc, #420]	; (80025c0 <TinyBMS_CAN_ReadSettingsValues+0x1f4>)
 800241a:	f005 fa53 	bl	80078c4 <puts>
		break;
 800241e:	e013      	b.n	8002448 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x02:
		printf("0x02 Max Settings\n");
 8002420:	4868      	ldr	r0, [pc, #416]	; (80025c4 <TinyBMS_CAN_ReadSettingsValues+0x1f8>)
 8002422:	f005 fa4f 	bl	80078c4 <puts>
		break;
 8002426:	e00f      	b.n	8002448 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x03:
		printf("0x03 Default Settings\n");
 8002428:	4867      	ldr	r0, [pc, #412]	; (80025c8 <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 800242a:	f005 fa4b 	bl	80078c4 <puts>
		break;
 800242e:	e00b      	b.n	8002448 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x04:
		printf("0x04 Current Settings\n");
 8002430:	4866      	ldr	r0, [pc, #408]	; (80025cc <TinyBMS_CAN_ReadSettingsValues+0x200>)
 8002432:	f005 fa47 	bl	80078c4 <puts>
	default:
		printf("Invalid option\n");
 8002436:	4866      	ldr	r0, [pc, #408]	; (80025d0 <TinyBMS_CAN_ReadSettingsValues+0x204>)
 8002438:	f005 fa44 	bl	80078c4 <puts>
		retval = CMD_FAILURE;
 800243c:	23ff      	movs	r3, #255	; 0xff
 800243e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 8002442:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002446:	e0b5      	b.n	80025b4 <TinyBMS_CAN_ReadSettingsValues+0x1e8>
	}

	//Check if number of registers to read is within bounds
	if((rl <= 0) || (rl > 0x64)) {
 8002448:	78bb      	ldrb	r3, [r7, #2]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <TinyBMS_CAN_ReadSettingsValues+0x88>
 800244e:	78bb      	ldrb	r3, [r7, #2]
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d905      	bls.n	8002460 <TinyBMS_CAN_ReadSettingsValues+0x94>
		retval = CMD_FAILURE;
 8002454:	23ff      	movs	r3, #255	; 0xff
 8002456:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 800245a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800245e:	e0a9      	b.n	80025b4 <TinyBMS_CAN_ReadSettingsValues+0x1e8>
	}

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_SETTINGS_VALUES, option, 0x00, rl, 0x00, 0x00, 0x00, 0x00};
 8002460:	231d      	movs	r3, #29
 8002462:	733b      	strb	r3, [r7, #12]
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	737b      	strb	r3, [r7, #13]
 8002468:	2300      	movs	r3, #0
 800246a:	73bb      	strb	r3, [r7, #14]
 800246c:	78bb      	ldrb	r3, [r7, #2]
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	2300      	movs	r3, #0
 8002472:	743b      	strb	r3, [r7, #16]
 8002474:	2300      	movs	r3, #0
 8002476:	747b      	strb	r3, [r7, #17]
 8002478:	2300      	movs	r3, #0
 800247a:	74bb      	strb	r3, [r7, #18]
 800247c:	2300      	movs	r3, #0
 800247e:	74fb      	strb	r3, [r7, #19]
	uint8_t tx_len = 4;
 8002480:	2304      	movs	r3, #4
 8002482:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8002486:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	4619      	mov	r1, r3
 8002490:	2000      	movs	r0, #0
 8002492:	f000 fe7f 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002496:	e080      	b.n	800259a <TinyBMS_CAN_ReadSettingsValues+0x1ce>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	f107 021c 	add.w	r2, r7, #28
 80024a0:	2100      	movs	r1, #0
 80024a2:	484c      	ldr	r0, [pc, #304]	; (80025d4 <TinyBMS_CAN_ReadSettingsValues+0x208>)
 80024a4:	f001 fda3 	bl	8003fee <HAL_CAN_GetRxMessage>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <TinyBMS_CAN_ReadSettingsValues+0xe6>
			Error_Handler();
 80024ae:	f000 ffd5 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80024b2:	f240 4103 	movw	r1, #1027	; 0x403
 80024b6:	4847      	ldr	r0, [pc, #284]	; (80025d4 <TinyBMS_CAN_ReadSettingsValues+0x208>)
 80024b8:	f001 fed3 	bl	8004262 <HAL_CAN_ActivateNotification>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <TinyBMS_CAN_ReadSettingsValues+0xfa>
			Error_Handler();
 80024c2:	f000 ffcb 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <TinyBMS_CAN_ReadSettingsValues+0x20c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d164      	bne.n	800259a <TinyBMS_CAN_ReadSettingsValues+0x1ce>
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d161      	bne.n	800259a <TinyBMS_CAN_ReadSettingsValues+0x1ce>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80024d6:	7d3b      	ldrb	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d117      	bne.n	800250c <TinyBMS_CAN_ReadSettingsValues+0x140>
				printf("Response from BMS [Error]\n");
 80024dc:	483f      	ldr	r0, [pc, #252]	; (80025dc <TinyBMS_CAN_ReadSettingsValues+0x210>)
 80024de:	f005 f9f1 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80024e2:	7d7b      	ldrb	r3, [r7, #21]
 80024e4:	4619      	mov	r1, r3
 80024e6:	7dbb      	ldrb	r3, [r7, #22]
 80024e8:	461a      	mov	r2, r3
 80024ea:	483d      	ldr	r0, [pc, #244]	; (80025e0 <TinyBMS_CAN_ReadSettingsValues+0x214>)
 80024ec:	f005 f964 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 80024f0:	7dbb      	ldrb	r3, [r7, #22]
 80024f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				reportBMSError(error);
 80024f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fa6c 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 8002500:	23ff      	movs	r3, #255	; 0xff
 8002502:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8002506:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800250a:	e053      	b.n	80025b4 <TinyBMS_CAN_ReadSettingsValues+0x1e8>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_SETTINGS_VALUES)) {
 800250c:	7d3b      	ldrb	r3, [r7, #20]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d13a      	bne.n	8002588 <TinyBMS_CAN_ReadSettingsValues+0x1bc>
 8002512:	7d7b      	ldrb	r3, [r7, #21]
 8002514:	2b1d      	cmp	r3, #29
 8002516:	d137      	bne.n	8002588 <TinyBMS_CAN_ReadSettingsValues+0x1bc>
				if(msg_count == 1) {
 8002518:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <TinyBMS_CAN_ReadSettingsValues+0x164>
					printf("Response from BMS [OK]\n");
 8002520:	4830      	ldr	r0, [pc, #192]	; (80025e4 <TinyBMS_CAN_ReadSettingsValues+0x218>)
 8002522:	f005 f9cf 	bl	80078c4 <puts>
					printf("CAN_TBMS_READ_SETTINGS_VALUES | CMD: 0x%02X\n", rx_msg[1]);
 8002526:	7d7b      	ldrb	r3, [r7, #21]
 8002528:	4619      	mov	r1, r3
 800252a:	482f      	ldr	r0, [pc, #188]	; (80025e8 <TinyBMS_CAN_ReadSettingsValues+0x21c>)
 800252c:	f005 f944 	bl	80077b8 <iprintf>
				}
				pl = rx_msg[2];
 8002530:	7dbb      	ldrb	r3, [r7, #22]
 8002532:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				//msg_count is equal to the settings_count
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8002536:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800253a:	2b02      	cmp	r3, #2
 800253c:	d11b      	bne.n	8002576 <TinyBMS_CAN_ReadSettingsValues+0x1aa>
 800253e:	7e7b      	ldrb	r3, [r7, #25]
 8002540:	461a      	mov	r2, r3
 8002542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002546:	3b01      	subs	r3, #1
 8002548:	429a      	cmp	r2, r3
 800254a:	d114      	bne.n	8002576 <TinyBMS_CAN_ReadSettingsValues+0x1aa>
					data = ((rx_msg[4] << 8) | rx_msg[3]);
 800254c:	7e3b      	ldrb	r3, [r7, #24]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	b21a      	sxth	r2, r3
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	b21b      	sxth	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b21b      	sxth	r3, r3
 800255a:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("TinyBMS Setting#: %u | Value: %u\n", msg_count, data);
 800255c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002560:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002562:	4619      	mov	r1, r3
 8002564:	4821      	ldr	r0, [pc, #132]	; (80025ec <TinyBMS_CAN_ReadSettingsValues+0x220>)
 8002566:	f005 f927 	bl	80077b8 <iprintf>
					msg_count++;
 800256a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800256e:	3301      	adds	r3, #1
 8002570:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8002574:	e011      	b.n	800259a <TinyBMS_CAN_ReadSettingsValues+0x1ce>
				} else {
					printf("Data Corruption\n");
 8002576:	481e      	ldr	r0, [pc, #120]	; (80025f0 <TinyBMS_CAN_ReadSettingsValues+0x224>)
 8002578:	f005 f9a4 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 800257c:	23ff      	movs	r3, #255	; 0xff
 800257e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 8002582:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002586:	e015      	b.n	80025b4 <TinyBMS_CAN_ReadSettingsValues+0x1e8>
				}

			} else {
				printf("Data Corruption\n");
 8002588:	4819      	ldr	r0, [pc, #100]	; (80025f0 <TinyBMS_CAN_ReadSettingsValues+0x224>)
 800258a:	f005 f99b 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 800258e:	23ff      	movs	r3, #255	; 0xff
 8002590:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8002594:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002598:	e00c      	b.n	80025b4 <TinyBMS_CAN_ReadSettingsValues+0x1e8>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800259a:	2100      	movs	r1, #0
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <TinyBMS_CAN_ReadSettingsValues+0x208>)
 800259e:	f001 fe38 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f47f af77 	bne.w	8002498 <TinyBMS_CAN_ReadSettingsValues+0xcc>
			}
		}
	}
	retval = CMD_SUCCESS;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 80025b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3740      	adds	r7, #64	; 0x40
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	0800b98c 	.word	0x0800b98c
 80025c0:	0800b9ac 	.word	0x0800b9ac
 80025c4:	0800b9c0 	.word	0x0800b9c0
 80025c8:	0800b9d4 	.word	0x0800b9d4
 80025cc:	0800b9ec 	.word	0x0800b9ec
 80025d0:	0800b0dc 	.word	0x0800b0dc
 80025d4:	20000200 	.word	0x20000200
 80025d8:	20000004 	.word	0x20000004
 80025dc:	0800b0ec 	.word	0x0800b0ec
 80025e0:	0800b108 	.word	0x0800b108
 80025e4:	08009f18 	.word	0x08009f18
 80025e8:	0800ba04 	.word	0x0800ba04
 80025ec:	0800ba34 	.word	0x0800ba34
 80025f0:	0800b160 	.word	0x0800b160

080025f4 <TinyBMS_CAN_ReadVersion>:
 * 						 	 DATA1 - Hardware version
 * 						 	 DATA2 - Hardware changes version
 * 						 	 DATA3 - Firmware public version
 * 						 	 DATA4 - Firmware internal version
 */
uint8_t TinyBMS_CAN_ReadVersion(CAN_HandleTypeDef *hcan) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b090      	sub	sp, #64	; 0x40
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadVersion\n");
 80025fc:	4886      	ldr	r0, [pc, #536]	; (8002818 <TinyBMS_CAN_ReadVersion+0x224>)
 80025fe:	f005 f961 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 8002602:	23ff      	movs	r3, #255	; 0xff
 8002604:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t hw_version = 0, hw_changes = 0, firmware_public = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002614:	2300      	movs	r3, #0
 8002616:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800261a:	2300      	movs	r3, #0
 800261c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t firmware_internal = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_VERSION, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002624:	4a7d      	ldr	r2, [pc, #500]	; (800281c <TinyBMS_CAN_ReadVersion+0x228>)
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800262e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8002638:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800263c:	f107 0308 	add.w	r3, r7, #8
 8002640:	4619      	mov	r1, r3
 8002642:	2000      	movs	r0, #0
 8002644:	f000 fda6 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002648:	e0d5      	b.n	80027f6 <TinyBMS_CAN_ReadVersion+0x202>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800264a:	f107 0310 	add.w	r3, r7, #16
 800264e:	f107 0218 	add.w	r2, r7, #24
 8002652:	2100      	movs	r1, #0
 8002654:	4872      	ldr	r0, [pc, #456]	; (8002820 <TinyBMS_CAN_ReadVersion+0x22c>)
 8002656:	f001 fcca 	bl	8003fee <HAL_CAN_GetRxMessage>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <TinyBMS_CAN_ReadVersion+0x70>
			Error_Handler();
 8002660:	f000 fefc 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8002664:	f240 4103 	movw	r1, #1027	; 0x403
 8002668:	486d      	ldr	r0, [pc, #436]	; (8002820 <TinyBMS_CAN_ReadVersion+0x22c>)
 800266a:	f001 fdfa 	bl	8004262 <HAL_CAN_ActivateNotification>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <TinyBMS_CAN_ReadVersion+0x84>
			Error_Handler();
 8002674:	f000 fef2 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <TinyBMS_CAN_ReadVersion+0x230>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	f040 80b9 	bne.w	80027f6 <TinyBMS_CAN_ReadVersion+0x202>
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80b5 	bne.w	80027f6 <TinyBMS_CAN_ReadVersion+0x202>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 800268c:	7c3b      	ldrb	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d117      	bne.n	80026c2 <TinyBMS_CAN_ReadVersion+0xce>
				printf("Response from BMS [Error]\n");
 8002692:	4865      	ldr	r0, [pc, #404]	; (8002828 <TinyBMS_CAN_ReadVersion+0x234>)
 8002694:	f005 f916 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8002698:	7c7b      	ldrb	r3, [r7, #17]
 800269a:	4619      	mov	r1, r3
 800269c:	7cbb      	ldrb	r3, [r7, #18]
 800269e:	461a      	mov	r2, r3
 80026a0:	4862      	ldr	r0, [pc, #392]	; (800282c <TinyBMS_CAN_ReadVersion+0x238>)
 80026a2:	f005 f889 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 80026a6:	7cbb      	ldrb	r3, [r7, #18]
 80026a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				reportBMSError(error);
 80026ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f991 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 80026b6:	23ff      	movs	r3, #255	; 0xff
 80026b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80026bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80026c0:	e0a6      	b.n	8002810 <TinyBMS_CAN_ReadVersion+0x21c>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_VERSION)) {
 80026c2:	7c3b      	ldrb	r3, [r7, #16]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f040 808d 	bne.w	80027e4 <TinyBMS_CAN_ReadVersion+0x1f0>
 80026ca:	7c7b      	ldrb	r3, [r7, #17]
 80026cc:	2b1e      	cmp	r3, #30
 80026ce:	f040 8089 	bne.w	80027e4 <TinyBMS_CAN_ReadVersion+0x1f0>
				printf("Response from BMS [OK]\n");
 80026d2:	4857      	ldr	r0, [pc, #348]	; (8002830 <TinyBMS_CAN_ReadVersion+0x23c>)
 80026d4:	f005 f8f6 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_VERSION | CMD: 0x%02X\n", rx_msg[1]);
 80026d8:	7c7b      	ldrb	r3, [r7, #17]
 80026da:	4619      	mov	r1, r3
 80026dc:	4855      	ldr	r0, [pc, #340]	; (8002834 <TinyBMS_CAN_ReadVersion+0x240>)
 80026de:	f005 f86b 	bl	80077b8 <iprintf>
				pl = rx_msg[2];
 80026e2:	7cbb      	ldrb	r3, [r7, #18]
 80026e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				switch(pl) {
 80026e8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026ec:	3b01      	subs	r3, #1
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d86e      	bhi.n	80027d0 <TinyBMS_CAN_ReadVersion+0x1dc>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <TinyBMS_CAN_ReadVersion+0x104>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	0800270d 	.word	0x0800270d
 80026fc:	08002721 	.word	0x08002721
 8002700:	08002747 	.word	0x08002747
 8002704:	080027d1 	.word	0x080027d1
 8002708:	0800277f 	.word	0x0800277f
				case 1: //DATA1
					hw_version = rx_msg[3];
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					printf("TinyBMS Hardware Version: %u\n", hw_version);
 8002712:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002716:	4619      	mov	r1, r3
 8002718:	4847      	ldr	r0, [pc, #284]	; (8002838 <TinyBMS_CAN_ReadVersion+0x244>)
 800271a:	f005 f84d 	bl	80077b8 <iprintf>
					break;
 800271e:	e060      	b.n	80027e2 <TinyBMS_CAN_ReadVersion+0x1ee>
				case 2: //DATA1 + DATA2
					hw_version = rx_msg[3];
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 8002726:	7d3b      	ldrb	r3, [r7, #20]
 8002728:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					printf("TinyBMS Hardware Version: %u\n", hw_version);
 800272c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002730:	4619      	mov	r1, r3
 8002732:	4841      	ldr	r0, [pc, #260]	; (8002838 <TinyBMS_CAN_ReadVersion+0x244>)
 8002734:	f005 f840 	bl	80077b8 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\n", hw_changes);
 8002738:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800273c:	4619      	mov	r1, r3
 800273e:	483f      	ldr	r0, [pc, #252]	; (800283c <TinyBMS_CAN_ReadVersion+0x248>)
 8002740:	f005 f83a 	bl	80077b8 <iprintf>
					break;
 8002744:	e04d      	b.n	80027e2 <TinyBMS_CAN_ReadVersion+0x1ee>
				case 3: //DATA1 + DATA2 + DATA3
					hw_version = rx_msg[3];
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 800274c:	7d3b      	ldrb	r3, [r7, #20]
 800274e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					firmware_public = rx_msg[5];
 8002752:	7d7b      	ldrb	r3, [r7, #21]
 8002754:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					printf("TinyBMS Hardware Version: %u\n", hw_version);
 8002758:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800275c:	4619      	mov	r1, r3
 800275e:	4836      	ldr	r0, [pc, #216]	; (8002838 <TinyBMS_CAN_ReadVersion+0x244>)
 8002760:	f005 f82a 	bl	80077b8 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\n", hw_changes);
 8002764:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002768:	4619      	mov	r1, r3
 800276a:	4834      	ldr	r0, [pc, #208]	; (800283c <TinyBMS_CAN_ReadVersion+0x248>)
 800276c:	f005 f824 	bl	80077b8 <iprintf>
					printf("TinyBMS Firmware Public Version: %u\n", firmware_public);
 8002770:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002774:	4619      	mov	r1, r3
 8002776:	4832      	ldr	r0, [pc, #200]	; (8002840 <TinyBMS_CAN_ReadVersion+0x24c>)
 8002778:	f005 f81e 	bl	80077b8 <iprintf>
					break;
 800277c:	e031      	b.n	80027e2 <TinyBMS_CAN_ReadVersion+0x1ee>
				case 5: //DATA1 + DATA2 + DATA3 + DATA4
					hw_version = rx_msg[3];
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 8002784:	7d3b      	ldrb	r3, [r7, #20]
 8002786:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					firmware_public = rx_msg[5];
 800278a:	7d7b      	ldrb	r3, [r7, #21]
 800278c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					firmware_internal = ((rx_msg[7] << 8) | rx_msg[6]);
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	b21a      	sxth	r2, r3
 8002796:	7dbb      	ldrb	r3, [r7, #22]
 8002798:	b21b      	sxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	b21b      	sxth	r3, r3
 800279e:	873b      	strh	r3, [r7, #56]	; 0x38
					printf("TinyBMS Hardware Version: %u\n", hw_version);
 80027a0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80027a4:	4619      	mov	r1, r3
 80027a6:	4824      	ldr	r0, [pc, #144]	; (8002838 <TinyBMS_CAN_ReadVersion+0x244>)
 80027a8:	f005 f806 	bl	80077b8 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\n", hw_changes);
 80027ac:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027b0:	4619      	mov	r1, r3
 80027b2:	4822      	ldr	r0, [pc, #136]	; (800283c <TinyBMS_CAN_ReadVersion+0x248>)
 80027b4:	f005 f800 	bl	80077b8 <iprintf>
					printf("TinyBMS Firmware Public Version: %u\n", firmware_public);
 80027b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80027bc:	4619      	mov	r1, r3
 80027be:	4820      	ldr	r0, [pc, #128]	; (8002840 <TinyBMS_CAN_ReadVersion+0x24c>)
 80027c0:	f004 fffa 	bl	80077b8 <iprintf>
					printf("TinyBMS Firmware Internal Version: %u\n", firmware_internal);
 80027c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80027c6:	4619      	mov	r1, r3
 80027c8:	481e      	ldr	r0, [pc, #120]	; (8002844 <TinyBMS_CAN_ReadVersion+0x250>)
 80027ca:	f004 fff5 	bl	80077b8 <iprintf>
					break;
 80027ce:	e008      	b.n	80027e2 <TinyBMS_CAN_ReadVersion+0x1ee>
				default:
					printf("Invalid Payload Value\n");
 80027d0:	481d      	ldr	r0, [pc, #116]	; (8002848 <TinyBMS_CAN_ReadVersion+0x254>)
 80027d2:	f005 f877 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 80027d6:	23ff      	movs	r3, #255	; 0xff
 80027d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					return retval;
 80027dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027e0:	e016      	b.n	8002810 <TinyBMS_CAN_ReadVersion+0x21c>
				switch(pl) {
 80027e2:	e008      	b.n	80027f6 <TinyBMS_CAN_ReadVersion+0x202>
				}
			} else {
				printf("Data Corruption\n");
 80027e4:	4819      	ldr	r0, [pc, #100]	; (800284c <TinyBMS_CAN_ReadVersion+0x258>)
 80027e6:	f005 f86d 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 80027ea:	23ff      	movs	r3, #255	; 0xff
 80027ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80027f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027f4:	e00c      	b.n	8002810 <TinyBMS_CAN_ReadVersion+0x21c>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80027f6:	2100      	movs	r1, #0
 80027f8:	4809      	ldr	r0, [pc, #36]	; (8002820 <TinyBMS_CAN_ReadVersion+0x22c>)
 80027fa:	f001 fd0a 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f af22 	bne.w	800264a <TinyBMS_CAN_ReadVersion+0x56>
			}
		}
	}
	retval = CMD_SUCCESS;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 800280c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8002810:	4618      	mov	r0, r3
 8002812:	3740      	adds	r7, #64	; 0x40
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	0800ba58 	.word	0x0800ba58
 800281c:	0800bb30 	.word	0x0800bb30
 8002820:	20000200 	.word	0x20000200
 8002824:	20000004 	.word	0x20000004
 8002828:	0800b0ec 	.word	0x0800b0ec
 800282c:	0800b108 	.word	0x0800b108
 8002830:	08009f18 	.word	0x08009f18
 8002834:	0800ba70 	.word	0x0800ba70
 8002838:	0800ba98 	.word	0x0800ba98
 800283c:	0800bab8 	.word	0x0800bab8
 8002840:	0800bae0 	.word	0x0800bae0
 8002844:	0800bb08 	.word	0x0800bb08
 8002848:	0800ae30 	.word	0x0800ae30
 800284c:	0800b160 	.word	0x0800b160

08002850 <TinyBMS_CAN_ReadNodeID>:
 *
 * @return				-  unsigned 8-bit node ID
 *
 * @note				-  Default after firmware update is 0x01
 */
uint8_t TinyBMS_CAN_ReadNodeID(CAN_HandleTypeDef *hcan) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b08e      	sub	sp, #56	; 0x38
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadNodeID\n");
 8002858:	4853      	ldr	r0, [pc, #332]	; (80029a8 <TinyBMS_CAN_ReadNodeID+0x158>)
 800285a:	f005 f833 	bl	80078c4 <puts>
	uint8_t retval = CMD_FAILURE;
 800285e:	23ff      	movs	r3, #255	; 0xff
 8002860:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_CAN_NODEID, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <TinyBMS_CAN_ReadNodeID+0x15c>)
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800286e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8002878:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	4619      	mov	r1, r3
 8002882:	2000      	movs	r0, #0
 8002884:	f000 fc86 	bl	8003194 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002888:	e07c      	b.n	8002984 <TinyBMS_CAN_ReadNodeID+0x134>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	f107 0218 	add.w	r2, r7, #24
 8002892:	2100      	movs	r1, #0
 8002894:	4846      	ldr	r0, [pc, #280]	; (80029b0 <TinyBMS_CAN_ReadNodeID+0x160>)
 8002896:	f001 fbaa 	bl	8003fee <HAL_CAN_GetRxMessage>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <TinyBMS_CAN_ReadNodeID+0x54>
			Error_Handler();
 80028a0:	f000 fddc 	bl	800345c <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80028a4:	f240 4103 	movw	r1, #1027	; 0x403
 80028a8:	4841      	ldr	r0, [pc, #260]	; (80029b0 <TinyBMS_CAN_ReadNodeID+0x160>)
 80028aa:	f001 fcda 	bl	8004262 <HAL_CAN_ActivateNotification>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <TinyBMS_CAN_ReadNodeID+0x68>
			Error_Handler();
 80028b4:	f000 fdd2 	bl	800345c <Error_Handler>
		}

		//Data Frame from TinyBMS
		//Search for current NodeID by accepting any data frame with Response StdID of 0x241-0x27F (full range)
		if(((RxHeader.StdId >= TINYBMS_CAN_RESPONSE_STDID_MIN) && (RxHeader.StdId <= TINYBMS_CAN_RESPONSE_STDID_MAX)) && (RxHeader.RTR == 0)) {
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80028be:	d961      	bls.n	8002984 <TinyBMS_CAN_ReadNodeID+0x134>
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80028c6:	d25d      	bcs.n	8002984 <TinyBMS_CAN_ReadNodeID+0x134>
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d15a      	bne.n	8002984 <TinyBMS_CAN_ReadNodeID+0x134>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80028ce:	7c3b      	ldrb	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d117      	bne.n	8002904 <TinyBMS_CAN_ReadNodeID+0xb4>
				printf("Response from BMS [Error]\n");
 80028d4:	4837      	ldr	r0, [pc, #220]	; (80029b4 <TinyBMS_CAN_ReadNodeID+0x164>)
 80028d6:	f004 fff5 	bl	80078c4 <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80028da:	7c7b      	ldrb	r3, [r7, #17]
 80028dc:	4619      	mov	r1, r3
 80028de:	7cbb      	ldrb	r3, [r7, #18]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4835      	ldr	r0, [pc, #212]	; (80029b8 <TinyBMS_CAN_ReadNodeID+0x168>)
 80028e4:	f004 ff68 	bl	80077b8 <iprintf>
				uint8_t error = rx_msg[2];
 80028e8:	7cbb      	ldrb	r3, [r7, #18]
 80028ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				reportBMSError(error);
 80028ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f870 	bl	80029d8 <reportBMSError>
				retval = CMD_FAILURE;
 80028f8:	23ff      	movs	r3, #255	; 0xff
 80028fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 80028fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002902:	e04c      	b.n	800299e <TinyBMS_CAN_ReadNodeID+0x14e>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CAN_NODEID)) {
 8002904:	7c3b      	ldrb	r3, [r7, #16]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d133      	bne.n	8002972 <TinyBMS_CAN_ReadNodeID+0x122>
 800290a:	7c7b      	ldrb	r3, [r7, #17]
 800290c:	2b28      	cmp	r3, #40	; 0x28
 800290e:	d130      	bne.n	8002972 <TinyBMS_CAN_ReadNodeID+0x122>
				printf("Response from BMS [OK]\n");
 8002910:	482a      	ldr	r0, [pc, #168]	; (80029bc <TinyBMS_CAN_ReadNodeID+0x16c>)
 8002912:	f004 ffd7 	bl	80078c4 <puts>
				printf("CAN_TBMS_READ_CAN_NODEID | CMD: 0x%02X\n", rx_msg[1]);
 8002916:	7c7b      	ldrb	r3, [r7, #17]
 8002918:	4619      	mov	r1, r3
 800291a:	4829      	ldr	r0, [pc, #164]	; (80029c0 <TinyBMS_CAN_ReadNodeID+0x170>)
 800291c:	f004 ff4c 	bl	80077b8 <iprintf>
				uint8_t nodeID_current = rx_msg[2];
 8002920:	7cbb      	ldrb	r3, [r7, #18]
 8002922:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

				//CAN-UART converter CAN Node ID: must be between 0x01 to 0x3F
				if((nodeID_current < TINYBMS_CAN_NODEID_MIN) || (nodeID_current > TINYBMS_CAN_NODEID_MAX)) {
 8002926:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <TinyBMS_CAN_ReadNodeID+0xe6>
 800292e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002932:	2b3f      	cmp	r3, #63	; 0x3f
 8002934:	d908      	bls.n	8002948 <TinyBMS_CAN_ReadNodeID+0xf8>
					printf("TinyBMS CAN NodeID out of range\n");
 8002936:	4823      	ldr	r0, [pc, #140]	; (80029c4 <TinyBMS_CAN_ReadNodeID+0x174>)
 8002938:	f004 ffc4 	bl	80078c4 <puts>
					retval = CMD_FAILURE;
 800293c:	23ff      	movs	r3, #255	; 0xff
 800293e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					return retval;
 8002942:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002946:	e02a      	b.n	800299e <TinyBMS_CAN_ReadNodeID+0x14e>
				}
				//Update both StdID's to reflect current NodeID
				TinybmsStdID_Request = (uint32_t)(TINYBMS_CAN_REQUEST_BASE_STDID + nodeID_current);
 8002948:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800294c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002950:	461a      	mov	r2, r3
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <TinyBMS_CAN_ReadNodeID+0x178>)
 8002954:	601a      	str	r2, [r3, #0]
				TinybmsStdID_Response = (uint32_t)(TINYBMS_CAN_RESPONSE_BASE_STDID + nodeID_current);
 8002956:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800295a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800295e:	461a      	mov	r2, r3
 8002960:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <TinyBMS_CAN_ReadNodeID+0x17c>)
 8002962:	601a      	str	r2, [r3, #0]
				printf("TinyBMS Current CAN NodeID: %d\n", nodeID_current);
 8002964:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002968:	4619      	mov	r1, r3
 800296a:	4819      	ldr	r0, [pc, #100]	; (80029d0 <TinyBMS_CAN_ReadNodeID+0x180>)
 800296c:	f004 ff24 	bl	80077b8 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CAN_NODEID)) {
 8002970:	e008      	b.n	8002984 <TinyBMS_CAN_ReadNodeID+0x134>

			} else {
				printf("Data Corruption\n");
 8002972:	4818      	ldr	r0, [pc, #96]	; (80029d4 <TinyBMS_CAN_ReadNodeID+0x184>)
 8002974:	f004 ffa6 	bl	80078c4 <puts>
				retval = CMD_FAILURE;
 8002978:	23ff      	movs	r3, #255	; 0xff
 800297a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 800297e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002982:	e00c      	b.n	800299e <TinyBMS_CAN_ReadNodeID+0x14e>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002984:	2100      	movs	r1, #0
 8002986:	480a      	ldr	r0, [pc, #40]	; (80029b0 <TinyBMS_CAN_ReadNodeID+0x160>)
 8002988:	f001 fc43 	bl	8004212 <HAL_CAN_GetRxFifoFillLevel>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	f47f af7b 	bne.w	800288a <TinyBMS_CAN_ReadNodeID+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return retval;
 800299a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3738      	adds	r7, #56	; 0x38
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	0800bc20 	.word	0x0800bc20
 80029ac:	0800bca0 	.word	0x0800bca0
 80029b0:	20000200 	.word	0x20000200
 80029b4:	0800b0ec 	.word	0x0800b0ec
 80029b8:	0800b108 	.word	0x0800b108
 80029bc:	08009f18 	.word	0x08009f18
 80029c0:	0800bc38 	.word	0x0800bc38
 80029c4:	0800bc60 	.word	0x0800bc60
 80029c8:	20000000 	.word	0x20000000
 80029cc:	20000004 	.word	0x20000004
 80029d0:	0800bc80 	.word	0x0800bc80
 80029d4:	0800b160 	.word	0x0800b160

080029d8 <reportBMSError>:
	retval = CMD_SUCCESS;
	return retval;
}

/********************** Error Handling **********************/
static void reportBMSError(uint8_t err) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
	if(err == CMD_ERROR) {
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <reportBMSError+0x18>
		printf("CMD ERROR\n");
 80029e8:	4809      	ldr	r0, [pc, #36]	; (8002a10 <reportBMSError+0x38>)
 80029ea:	f004 ff6b 	bl	80078c4 <puts>
	} else if(err == CRC_ERROR) {
		printf("CRC ERROR\n");
	} else {
		printf("Error: Byte should be 0x00 or 0x01 but was 0x%02X\n", err);
	}
}
 80029ee:	e00b      	b.n	8002a08 <reportBMSError+0x30>
	} else if(err == CRC_ERROR) {
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d103      	bne.n	80029fe <reportBMSError+0x26>
		printf("CRC ERROR\n");
 80029f6:	4807      	ldr	r0, [pc, #28]	; (8002a14 <reportBMSError+0x3c>)
 80029f8:	f004 ff64 	bl	80078c4 <puts>
}
 80029fc:	e004      	b.n	8002a08 <reportBMSError+0x30>
		printf("Error: Byte should be 0x00 or 0x01 but was 0x%02X\n", err);
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	4619      	mov	r1, r3
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <reportBMSError+0x40>)
 8002a04:	f004 fed8 	bl	80077b8 <iprintf>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	0800bd0c 	.word	0x0800bd0c
 8002a14:	0800bd18 	.word	0x0800bd18
 8002a18:	0800bd24 	.word	0x0800bd24

08002a1c <NMI_Handler>:
extern TIM_HandleTypeDef htim6;

/******************************************************************************/
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void) {
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
	while(1) {}
 8002a20:	e7fe      	b.n	8002a20 <NMI_Handler+0x4>

08002a22 <HardFault_Handler>:
}

void HardFault_Handler(void) {
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
	while(1) {}
 8002a26:	e7fe      	b.n	8002a26 <HardFault_Handler+0x4>

08002a28 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
	while(1) {}
 8002a2c:	e7fe      	b.n	8002a2c <MemManage_Handler+0x4>

08002a2e <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
	while(1) {}
 8002a32:	e7fe      	b.n	8002a32 <BusFault_Handler+0x4>

08002a34 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	while(1) {}
 8002a38:	e7fe      	b.n	8002a38 <UsageFault_Handler+0x4>

08002a3a <SVC_Handler>:
}

void SVC_Handler(void) {
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <DebugMon_Handler>:

void DebugMon_Handler(void) {
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <PendSV_Handler>:

void PendSV_Handler(void) {
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <SysTick_Handler>:

void SysTick_Handler(void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002a68:	f000 ffa6 	bl	80039b8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8002a6c:	f001 ff7c 	bl	8004968 <HAL_SYSTICK_IRQHandler>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <USART2_IRQHandler>:
/* STM32F7xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/
void USART2_IRQHandler(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <USART2_IRQHandler+0x10>)
 8002a7a:	f003 fa8b 	bl	8005f94 <HAL_UART_IRQHandler>
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000228 	.word	0x20000228

08002a88 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <CAN1_TX_IRQHandler+0x10>)
 8002a8e:	f001 fc35 	bl	80042fc <HAL_CAN_IRQHandler>
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000200 	.word	0x20000200

08002a9c <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <CAN1_RX0_IRQHandler+0x10>)
 8002aa2:	f001 fc2b 	bl	80042fc <HAL_CAN_IRQHandler>
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000200 	.word	0x20000200

08002ab0 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <CAN1_RX1_IRQHandler+0x10>)
 8002ab6:	f001 fc21 	bl	80042fc <HAL_CAN_IRQHandler>
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000200 	.word	0x20000200

08002ac4 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <CAN1_SCE_IRQHandler+0x10>)
 8002aca:	f001 fc17 	bl	80042fc <HAL_CAN_IRQHandler>
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000200 	.word	0x20000200

08002ad8 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <TIM6_DAC_IRQHandler+0x10>)
 8002ade:	f002 ff72 	bl	80059c6 <HAL_TIM_IRQHandler>
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000330 	.word	0x20000330

08002aec <main>:

uint16_t maxCellVoltage = 0, minCellVoltage = 0;
uint32_t initialSOC = 0;
float initialPackVoltage = 0, initialPackCurrent = 0;

int main(void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	/* Resets all peripherals, initializes the flash interface and Systick. */
	HAL_Init();
 8002af0:	f000 ff25 	bl	800393e <HAL_Init>

	/* Configure SYSCLK to 50MHZ */
	SystemClock_Config_HSI(SYS_CLOCK_FREQ_50MHZ);
 8002af4:	2032      	movs	r0, #50	; 0x32
 8002af6:	f000 f943 	bl	8002d80 <SystemClock_Config_HSI>

	/* Initialize all configured peripherals */
	GPIO_Init();
 8002afa:	f000 f9e3 	bl	8002ec4 <GPIO_Init>
	UART_Init();
 8002afe:	f000 fa4d 	bl	8002f9c <UART_Init>
	TIM_Init();
 8002b02:	f000 faa5 	bl	8003050 <TIM_Init>
	CAN_Init(CANBITRATE_500KBIT_50MHZ);
 8002b06:	2001      	movs	r0, #1
 8002b08:	f000 fabe 	bl	8003088 <CAN_Init>
	CAN_Filter_Config();
 8002b0c:	f000 fafc 	bl	8003108 <CAN_Filter_Config>
	CAN_Begin();
 8002b10:	f000 fb28 	bl	8003164 <CAN_Begin>
	//CAN_Test_API();

	/* Application State Machine */
	//Todo:
  	while(1) {
		switch(bms_opmode) {
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <main+0x7c>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d002      	beq.n	8002b22 <main+0x36>
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d013      	beq.n	8002b48 <main+0x5c>
 8002b20:	e01f      	b.n	8002b62 <main+0x76>
		case MONITOR_CHARGING:
			//TinyBMS Init
			if(TinyBMS_Init() != CMD_SUCCESS) {
 8002b22:	f000 f8bb 	bl	8002c9c <TinyBMS_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d004      	beq.n	8002b36 <main+0x4a>
				printf("TinyBMS Init failed.\n");
 8002b2c:	480f      	ldr	r0, [pc, #60]	; (8002b6c <main+0x80>)
 8002b2e:	f004 fec9 	bl	80078c4 <puts>
				Error_Handler();
 8002b32:	f000 fc93 	bl	800345c <Error_Handler>
			}

			//Start the Timer (Interrupt mode - Non-Blocking)
			//Timer is used to send a message to the charger every 1 second
			HAL_TIM_Base_Start_IT(&htim6);
 8002b36:	480e      	ldr	r0, [pc, #56]	; (8002b70 <main+0x84>)
 8002b38:	f002 fe9e 	bl	8005878 <HAL_TIM_Base_Start_IT>

			//Begin and Monitor Charging
			TinyBMS_MonitorCharging();
 8002b3c:	f000 f81a 	bl	8002b74 <TinyBMS_MonitorCharging>

			//Stop the Timer
			HAL_TIM_Base_Stop_IT(&htim6);
 8002b40:	480b      	ldr	r0, [pc, #44]	; (8002b70 <main+0x84>)
 8002b42:	f002 ff11 	bl	8005968 <HAL_TIM_Base_Stop_IT>
			break;
 8002b46:	e00e      	b.n	8002b66 <main+0x7a>

		case MONITOR_OPERATION:
			//TinyBMS Init
			if(TinyBMS_Init() != CMD_SUCCESS) {
 8002b48:	f000 f8a8 	bl	8002c9c <TinyBMS_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <main+0x70>
				printf("TinyBMS Init failed.\n");
 8002b52:	4806      	ldr	r0, [pc, #24]	; (8002b6c <main+0x80>)
 8002b54:	f004 feb6 	bl	80078c4 <puts>
				Error_Handler();
 8002b58:	f000 fc80 	bl	800345c <Error_Handler>
			}

			TinyBMS_MonitorOperation();
 8002b5c:	f000 f87e 	bl	8002c5c <TinyBMS_MonitorOperation>
			break;
 8002b60:	e001      	b.n	8002b66 <main+0x7a>

		default:
			Error_Handler();
 8002b62:	f000 fc7b 	bl	800345c <Error_Handler>
		switch(bms_opmode) {
 8002b66:	e7d5      	b.n	8002b14 <main+0x28>
 8002b68:	2000037c 	.word	0x2000037c
 8002b6c:	0800bd58 	.word	0x0800bd58
 8002b70:	20000330 	.word	0x20000330

08002b74 <TinyBMS_MonitorCharging>:
	//while(TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft(&hcan1) != CMD_SUCCESS) {}
	//while(TinyBMS_CAN_ReadNodeID(&hcan1) != CMD_SUCCESS) {}
	//while(TinyBMS_CAN_WriteNodeID(&hcan1, nodeID) != CMD_SUCCESS) {}
}

void TinyBMS_MonitorCharging(void) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0

	//Todo:
	//Mostly Placeholder - Modify API to return their respective data
	uint16_t cellv[7] = {};
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	819a      	strh	r2, [r3, #12]
	uint16_t numDetectedCells = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	82bb      	strh	r3, [r7, #20]

	while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_CHARGING) {
 8002b8a:	e04f      	b.n	8002c2c <TinyBMS_MonitorCharging+0xb8>

		//Verify that all cells are being detected
		numDetectedCells = TinyBMS_CAN_ReadRegBlock(&hcan1, 1, NUMBER_OF_DETECTED_CELLS);
 8002b8c:	2235      	movs	r2, #53	; 0x35
 8002b8e:	2101      	movs	r1, #1
 8002b90:	482c      	ldr	r0, [pc, #176]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002b92:	f7fe fa6d 	bl	8001070 <TinyBMS_CAN_ReadRegBlock>
 8002b96:	4603      	mov	r3, r0
 8002b98:	82bb      	strh	r3, [r7, #20]
		if(numDetectedCells != NUMCELLS_SECONDARY) {
 8002b9a:	8abb      	ldrh	r3, [r7, #20]
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d002      	beq.n	8002ba6 <TinyBMS_MonitorCharging+0x32>
			printf("Some cells are not being detected!\n");
 8002ba0:	4829      	ldr	r0, [pc, #164]	; (8002c48 <TinyBMS_MonitorCharging+0xd4>)
 8002ba2:	f004 fe8f 	bl	80078c4 <puts>
		}

		//Get voltage of all cells and compare with max/min voltage thresholds
		TinyBMS_CAN_ReadBatteryPackCellVoltages(&hcan1);
 8002ba6:	4827      	ldr	r0, [pc, #156]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002ba8:	f7ff fb44 	bl	8002234 <TinyBMS_CAN_ReadBatteryPackCellVoltages>
		for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8002bac:	2300      	movs	r3, #0
 8002bae:	75fb      	strb	r3, [r7, #23]
 8002bb0:	e022      	b.n	8002bf8 <TinyBMS_MonitorCharging+0x84>
			if(cellv[i] < minCellVoltage)  {
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	3318      	adds	r3, #24
 8002bb8:	443b      	add	r3, r7
 8002bba:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002bbe:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <TinyBMS_MonitorCharging+0xd8>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d205      	bcs.n	8002bd2 <TinyBMS_MonitorCharging+0x5e>
				printf("Cell %u is below the minimum voltage threshold!\n", i+1);
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4820      	ldr	r0, [pc, #128]	; (8002c50 <TinyBMS_MonitorCharging+0xdc>)
 8002bce:	f004 fdf3 	bl	80077b8 <iprintf>
			}
			if(cellv[i] > maxCellVoltage) {
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	3318      	adds	r3, #24
 8002bd8:	443b      	add	r3, r7
 8002bda:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <TinyBMS_MonitorCharging+0xe0>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d905      	bls.n	8002bf2 <TinyBMS_MonitorCharging+0x7e>
				printf("Cell %u is above the maximum voltage threshold!\n", i+1);
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4619      	mov	r1, r3
 8002bec:	481a      	ldr	r0, [pc, #104]	; (8002c58 <TinyBMS_MonitorCharging+0xe4>)
 8002bee:	f004 fde3 	bl	80077b8 <iprintf>
		for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d9d9      	bls.n	8002bb2 <TinyBMS_MonitorCharging+0x3e>
			}
		}

		//Check if cells need balancing or are in progress of balancing
		//Regs 51 & 52: BALANCING_DECISION_BITS & REAL_BALANCING_BITS
		TinyBMS_CAN_ReadRegBlock(&hcan1, 2, BALANCING_DECISION_BITS);
 8002bfe:	2233      	movs	r2, #51	; 0x33
 8002c00:	2102      	movs	r1, #2
 8002c02:	4810      	ldr	r0, [pc, #64]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002c04:	f7fe fa34 	bl	8001070 <TinyBMS_CAN_ReadRegBlock>

		//Check Newest Events
		TinyBMS_CAN_ReadNewestEvents(&hcan1);
 8002c08:	480e      	ldr	r0, [pc, #56]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002c0a:	f7fe fb37 	bl	800127c <TinyBMS_CAN_ReadNewestEvents>

		//Check Online Status
		TinyBMS_CAN_ReadOnlineStatus(&hcan1);
 8002c0e:	480d      	ldr	r0, [pc, #52]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002c10:	f7fe ffd8 	bl	8001bc4 <TinyBMS_CAN_ReadOnlineStatus>

		//Check Temperatures
		TinyBMS_CAN_ReadDeviceTemperatures(&hcan1);
 8002c14:	480b      	ldr	r0, [pc, #44]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002c16:	f7ff fa13 	bl	8002040 <TinyBMS_CAN_ReadDeviceTemperatures>

		//Get State of Charge
		TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 8002c1a:	480a      	ldr	r0, [pc, #40]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002c1c:	f7ff f96e 	bl	8001efc <TinyBMS_CAN_ReadEstimatedSOCValue>

		//Get Pack Voltage
		TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 8002c20:	4808      	ldr	r0, [pc, #32]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002c22:	f7fe fd13 	bl	800164c <TinyBMS_CAN_ReadBatteryPackVoltage>

		//Get Pack Current
		TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002c28:	f7fe fdca 	bl	80017c0 <TinyBMS_CAN_ReadBatteryPackCurrent>
	while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_CHARGING) {
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <TinyBMS_MonitorCharging+0xd0>)
 8002c2e:	f7fe ffc9 	bl	8001bc4 <TinyBMS_CAN_ReadOnlineStatus>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b91      	cmp	r3, #145	; 0x91
 8002c36:	d0a9      	beq.n	8002b8c <TinyBMS_MonitorCharging+0x18>
	}
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000200 	.word	0x20000200
 8002c48:	0800bd70 	.word	0x0800bd70
 8002c4c:	20000380 	.word	0x20000380
 8002c50:	0800bd94 	.word	0x0800bd94
 8002c54:	2000037e 	.word	0x2000037e
 8002c58:	0800bdc8 	.word	0x0800bdc8

08002c5c <TinyBMS_MonitorOperation>:

void TinyBMS_MonitorOperation(void) {
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
	//Todo:
	//Similar to MonitorCharging
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <ElCon_SendMsg>:

void ElCon_SendMsg(void) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
	//Triggered from HAL_TIM_PeriodElapsedCallback()
	//Every 1 second, send 8-bytes of data with voltage and current requested to ExtID 0x1806E5F4
	//Todo:
	uint8_t msg[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002c72:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <ElCon_SendMsg+0x2c>)
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c7a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t len = 8;
 8002c7e:	2308      	movs	r3, #8
 8002c80:	73fb      	strb	r3, [r7, #15]
	CAN1_Tx(ELCONCHARGER2, msg, len);
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f000 fa83 	bl	8003194 <CAN1_Tx>
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	0800bdfc 	.word	0x0800bdfc

08002c9c <TinyBMS_Init>:

uint8_t TinyBMS_Init(void) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
	uint8_t retval = CMD_FAILURE;
 8002ca2:	23ff      	movs	r3, #255	; 0xff
 8002ca4:	71fb      	strb	r3, [r7, #7]
	//Todo:
	//Mostly Placeholder - Modify API to return their respective data

	//Read CAN NodeID and update to it if required
	TinyBMS_CAN_ReadNodeID(&hcan1);
 8002ca6:	4830      	ldr	r0, [pc, #192]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002ca8:	f7ff fdd2 	bl	8002850 <TinyBMS_CAN_ReadNodeID>

	//Reset BMS
	TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_RESET_BMS);
 8002cac:	2105      	movs	r1, #5
 8002cae:	482e      	ldr	r0, [pc, #184]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002cb0:	f7fe f91c 	bl	8000eec <TinyBMS_CAN_ResetClearEventsStatistics>

	//Clear Events & Statistics
	TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_EVENTS);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	482c      	ldr	r0, [pc, #176]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002cb8:	f7fe f918 	bl	8000eec <TinyBMS_CAN_ResetClearEventsStatistics>
	TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_STATS);
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	482a      	ldr	r0, [pc, #168]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002cc0:	f7fe f914 	bl	8000eec <TinyBMS_CAN_ResetClearEventsStatistics>

	//Confirm BMS Reset by reading Lifetime Counter
	TinyBMS_CAN_ReadLifetimeCounter(&hcan1);
 8002cc4:	4828      	ldr	r0, [pc, #160]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002cc6:	f7ff f877 	bl	8001db8 <TinyBMS_CAN_ReadLifetimeCounter>

	//Read Version
	TinyBMS_CAN_ReadVersion(&hcan1);
 8002cca:	4827      	ldr	r0, [pc, #156]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002ccc:	f7ff fc92 	bl	80025f4 <TinyBMS_CAN_ReadVersion>

	//Get Min/Max Cell Voltage Thresholds
	minCellVoltage = TinyBMS_CAN_ReadBatteryPackMinCellVoltage(&hcan1);
 8002cd0:	4825      	ldr	r0, [pc, #148]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002cd2:	f7fe fed3 	bl	8001a7c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <TinyBMS_Init+0xd0>)
 8002cdc:	801a      	strh	r2, [r3, #0]
	maxCellVoltage = TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(&hcan1);
 8002cde:	4822      	ldr	r0, [pc, #136]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002ce0:	f7fe fe28 	bl	8001934 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <TinyBMS_Init+0xd4>)
 8002cea:	801a      	strh	r2, [r3, #0]

	//Check for any active events
	TinyBMS_CAN_ReadAllEvents(&hcan1);
 8002cec:	481e      	ldr	r0, [pc, #120]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002cee:	f7fe fbb9 	bl	8001464 <TinyBMS_CAN_ReadAllEvents>

	//Verify Pack Voltage and Current
	initialPackVoltage = TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 8002cf2:	481d      	ldr	r0, [pc, #116]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002cf4:	f7fe fcaa 	bl	800164c <TinyBMS_CAN_ReadBatteryPackVoltage>
 8002cf8:	eef0 7a40 	vmov.f32	s15, s0
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <TinyBMS_Init+0xd8>)
 8002cfe:	edc3 7a00 	vstr	s15, [r3]
	initialPackCurrent = TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 8002d02:	4819      	ldr	r0, [pc, #100]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002d04:	f7fe fd5c 	bl	80017c0 <TinyBMS_CAN_ReadBatteryPackCurrent>
 8002d08:	eef0 7a40 	vmov.f32	s15, s0
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <TinyBMS_Init+0xdc>)
 8002d0e:	edc3 7a00 	vstr	s15, [r3]

	//Get initial State of Charge
	initialSOC = TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 8002d12:	4815      	ldr	r0, [pc, #84]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002d14:	f7ff f8f2 	bl	8001efc <TinyBMS_CAN_ReadEstimatedSOCValue>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <TinyBMS_Init+0xe0>)
 8002d1c:	6013      	str	r3, [r2, #0]

	//Check Temperatures
	TinyBMS_CAN_ReadDeviceTemperatures(&hcan1);
 8002d1e:	4812      	ldr	r0, [pc, #72]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002d20:	f7ff f98e 	bl	8002040 <TinyBMS_CAN_ReadDeviceTemperatures>

	//Verify Online Status is TINYBMS_STATUS_IDLE
	if(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_IDLE) {
 8002d24:	4810      	ldr	r0, [pc, #64]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002d26:	f7fe ff4d 	bl	8001bc4 <TinyBMS_CAN_ReadOnlineStatus>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b97      	cmp	r3, #151	; 0x97
 8002d2e:	d00e      	beq.n	8002d4e <TinyBMS_Init+0xb2>
		//do nothing
	} else if(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_FAULT) {
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002d32:	f7fe ff47 	bl	8001bc4 <TinyBMS_CAN_ReadOnlineStatus>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b9b      	cmp	r3, #155	; 0x9b
 8002d3a:	d106      	bne.n	8002d4a <TinyBMS_Init+0xae>
		//Check for any active events
		TinyBMS_CAN_ReadAllEvents(&hcan1);
 8002d3c:	480a      	ldr	r0, [pc, #40]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002d3e:	f7fe fb91 	bl	8001464 <TinyBMS_CAN_ReadAllEvents>
		retval = CMD_FAILURE;
 8002d42:	23ff      	movs	r3, #255	; 0xff
 8002d44:	71fb      	strb	r3, [r7, #7]
		return retval;
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	e009      	b.n	8002d5e <TinyBMS_Init+0xc2>
	} else {
		Error_Handler();
 8002d4a:	f000 fb87 	bl	800345c <Error_Handler>
	}

	//Settings Registers: 300-301, 303-304, 306-308, 312-320, 328, 330-343
	//					  (30 total settings) (344-399 reserved)
	// rl max is 100 (0x64) registers, but this exceeds the actual total
	TinyBMS_CAN_ReadSettingsValues(&hcan1, TINYBMS_SETTINGS_CURRENT, 30);
 8002d4e:	221e      	movs	r2, #30
 8002d50:	2104      	movs	r1, #4
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <TinyBMS_Init+0xcc>)
 8002d54:	f7ff fb3a 	bl	80023cc <TinyBMS_CAN_ReadSettingsValues>

	retval = CMD_SUCCESS;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	71fb      	strb	r3, [r7, #7]
	return retval;
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000200 	.word	0x20000200
 8002d6c:	20000380 	.word	0x20000380
 8002d70:	2000037e 	.word	0x2000037e
 8002d74:	20000388 	.word	0x20000388
 8002d78:	2000038c 	.word	0x2000038c
 8002d7c:	20000384 	.word	0x20000384

08002d80 <SystemClock_Config_HSI>:

void SystemClock_Config_HSI(uint8_t clock_freq) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b094      	sub	sp, #80	; 0x50
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init = {0};
 8002d8a:	f107 031c 	add.w	r3, r7, #28
 8002d8e:	2230      	movs	r2, #48	; 0x30
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 f89e 	bl	8006ed4 <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
	uint8_t flash_latency = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	//Using HSI to derive PLL
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dae:	2302      	movs	r3, #2
 8002db0:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 8002db2:	2301      	movs	r3, #1
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8002db6:	2302      	movs	r3, #2
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq) {
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b78      	cmp	r3, #120	; 0x78
 8002dc2:	d036      	beq.n	8002e32 <SystemClock_Config_HSI+0xb2>
 8002dc4:	2b78      	cmp	r3, #120	; 0x78
 8002dc6:	dc77      	bgt.n	8002eb8 <SystemClock_Config_HSI+0x138>
 8002dc8:	2b32      	cmp	r3, #50	; 0x32
 8002dca:	d002      	beq.n	8002dd2 <SystemClock_Config_HSI+0x52>
 8002dcc:	2b54      	cmp	r3, #84	; 0x54
 8002dce:	d018      	beq.n	8002e02 <SystemClock_Config_HSI+0x82>
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
		flash_latency = 3;
		break;
	}
	default:
		return;
 8002dd0:	e072      	b.n	8002eb8 <SystemClock_Config_HSI+0x138>
		osc_init.PLL.PLLM = 16;
 8002dd2:	2310      	movs	r3, #16
 8002dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 100;
 8002dd6:	2364      	movs	r3, #100	; 0x64
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8002dde:	2302      	movs	r3, #2
 8002de0:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8002de2:	230f      	movs	r3, #15
 8002de4:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de6:	2302      	movs	r3, #2
 8002de8:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df2:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8002df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df8:	61bb      	str	r3, [r7, #24]
		flash_latency = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8002e00:	e02f      	b.n	8002e62 <SystemClock_Config_HSI+0xe2>
		osc_init.PLL.PLLM = 16;
 8002e02:	2310      	movs	r3, #16
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 168;
 8002e06:	23a8      	movs	r3, #168	; 0xa8
 8002e08:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8002e12:	230f      	movs	r3, #15
 8002e14:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e16:	2302      	movs	r3, #2
 8002e18:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e28:	61bb      	str	r3, [r7, #24]
		flash_latency = 2;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8002e30:	e017      	b.n	8002e62 <SystemClock_Config_HSI+0xe2>
		osc_init.PLL.PLLM = 16;
 8002e32:	2310      	movs	r3, #16
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 240;
 8002e36:	23f0      	movs	r3, #240	; 0xf0
 8002e38:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8002e42:	230f      	movs	r3, #15
 8002e44:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e46:	2302      	movs	r3, #2
 8002e48:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e52:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e58:	61bb      	str	r3, [r7, #24]
		flash_latency = 3;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8002e60:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 ffe4 	bl	8004e34 <HAL_RCC_OscConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config_HSI+0xf6>
		Error_Handler();
 8002e72:	f000 faf3 	bl	800345c <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) {
 8002e76:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fa7b 	bl	800537c <HAL_RCC_ClockConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SystemClock_Config_HSI+0x110>
		Error_Handler();
 8002e8c:	f000 fae6 	bl	800345c <Error_Handler>
	}

	//Configure the SYSTICK timer interrupt frequency for every 1ms
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002e90:	f002 fc66 	bl	8005760 <HAL_RCC_GetHCLKFreq>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <SystemClock_Config_HSI+0x140>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fd39 	bl	8004916 <HAL_SYSTICK_Config>
	//Configure SYSTICK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ea4:	2004      	movs	r0, #4
 8002ea6:	f001 fd43 	bl	8004930 <HAL_SYSTICK_CLKSourceConfig>
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb2:	f001 fd06 	bl	80048c2 <HAL_NVIC_SetPriority>
 8002eb6:	e000      	b.n	8002eba <SystemClock_Config_HSI+0x13a>
		return;
 8002eb8:	bf00      	nop
}
 8002eba:	3750      	adds	r7, #80	; 0x50
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	10624dd3 	.word	0x10624dd3

08002ec4 <GPIO_Init>:

void GPIO_Init(void) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eca:	f107 0314 	add.w	r3, r7, #20
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <GPIO_Init+0xcc>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <GPIO_Init+0xcc>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <GPIO_Init+0xcc>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <GPIO_Init+0xcc>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <GPIO_Init+0xcc>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <GPIO_Init+0xcc>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <GPIO_Init+0xcc>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <GPIO_Init+0xcc>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <GPIO_Init+0xcc>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <GPIO_Init+0xcc>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <GPIO_Init+0xcc>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <GPIO_Init+0xcc>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, (LED1_Pin | LED2_Pin | LED3_Pin), GPIO_PIN_RESET);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002f40:	4814      	ldr	r0, [pc, #80]	; (8002f94 <GPIO_Init+0xd0>)
 8002f42:	f001 ff5d 	bl	8004e00 <HAL_GPIO_WritePin>

	/* Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	480e      	ldr	r0, [pc, #56]	; (8002f98 <GPIO_Init+0xd4>)
 8002f5e:	f001 fda3 	bl	8004aa8 <HAL_GPIO_Init>

	/* Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = (LED1_Pin | LED2_Pin | LED3_Pin);
 8002f62:	f244 0381 	movw	r3, #16513	; 0x4081
 8002f66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4806      	ldr	r0, [pc, #24]	; (8002f94 <GPIO_Init+0xd0>)
 8002f7c:	f001 fd94 	bl	8004aa8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f80:	2028      	movs	r0, #40	; 0x28
 8002f82:	f001 fcba 	bl	80048fa <HAL_NVIC_EnableIRQ>
}
 8002f86:	bf00      	nop
 8002f88:	3728      	adds	r7, #40	; 0x28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40020400 	.word	0x40020400
 8002f98:	40020800 	.word	0x40020800

08002f9c <UART_Init>:

void UART_Init(void) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
	//USART2: PD5 PD6 for TinyBMS communication
	huart2.Instance = USART2;
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <UART_Init+0xa4>)
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <UART_Init+0xa8>)
 8002fa4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <UART_Init+0xa4>)
 8002fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <UART_Init+0xa4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <UART_Init+0xa4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <UART_Init+0xa4>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <UART_Init+0xa4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <UART_Init+0xa4>)
 8002fc8:	220c      	movs	r2, #12
 8002fca:	615a      	str	r2, [r3, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <UART_Init+0xa4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <UART_Init+0xa4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <UART_Init+0xa4>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart2) != HAL_OK) {
 8002fde:	4818      	ldr	r0, [pc, #96]	; (8003040 <UART_Init+0xa4>)
 8002fe0:	f002 fef6 	bl	8005dd0 <HAL_UART_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <UART_Init+0x52>
		Error_Handler();
 8002fea:	f000 fa37 	bl	800345c <Error_Handler>
	}

	//USART3: PD8 PD9 for ST-LINK debugging (printf ITM)
	huart3.Instance = USART3;
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <UART_Init+0xac>)
 8002ff0:	4a16      	ldr	r2, [pc, #88]	; (800304c <UART_Init+0xb0>)
 8002ff2:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <UART_Init+0xac>)
 8002ff6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ffa:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <UART_Init+0xac>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <UART_Init+0xac>)
 8003004:	2200      	movs	r2, #0
 8003006:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <UART_Init+0xac>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <UART_Init+0xac>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <UART_Init+0xac>)
 8003016:	220c      	movs	r2, #12
 8003018:	615a      	str	r2, [r3, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <UART_Init+0xac>)
 800301c:	2200      	movs	r2, #0
 800301e:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <UART_Init+0xac>)
 8003022:	2200      	movs	r2, #0
 8003024:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <UART_Init+0xac>)
 8003028:	2200      	movs	r2, #0
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart3) != HAL_OK) {
 800302c:	4806      	ldr	r0, [pc, #24]	; (8003048 <UART_Init+0xac>)
 800302e:	f002 fecf 	bl	8005dd0 <HAL_UART_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <UART_Init+0xa0>
		Error_Handler();
 8003038:	f000 fa10 	bl	800345c <Error_Handler>
	}
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000228 	.word	0x20000228
 8003044:	40004400 	.word	0x40004400
 8003048:	200002ac 	.word	0x200002ac
 800304c:	40004800 	.word	0x40004800

08003050 <TIM_Init>:

void TIM_Init(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
	//TIM6 - Basic Timer
	//Every 1 Second or 1Hz freq
	htim6.Instance = TIM6;
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <TIM_Init+0x30>)
 8003056:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <TIM_Init+0x34>)
 8003058:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 4999;
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <TIM_Init+0x30>)
 800305c:	f241 3287 	movw	r2, #4999	; 0x1387
 8003060:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 10000-1;
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <TIM_Init+0x30>)
 8003064:	f242 720f 	movw	r2, #9999	; 0x270f
 8003068:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800306a:	4805      	ldr	r0, [pc, #20]	; (8003080 <TIM_Init+0x30>)
 800306c:	f002 fbac 	bl	80057c8 <HAL_TIM_Base_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <TIM_Init+0x2a>
		Error_Handler();
 8003076:	f000 f9f1 	bl	800345c <Error_Handler>
	}
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000330 	.word	0x20000330
 8003084:	40001000 	.word	0x40001000

08003088 <CAN_Init>:

void CAN_Init(uint8_t can_bitrate) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
	 *  	. TinyBMS CAN bitrate of 500kbit/s (cannot be changed by user)
	 *  . 3 Tx Mailboxes, 2 Rx FIFOs
	 *  . 28 Filter banks shared between CAN1 and CAN2 for dual CAN
	 *  . Max Bitrate of bxCAN is 1Mbit/s
	 * 	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	hcan1.Instance = CAN1;
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <CAN_Init+0x78>)
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <CAN_Init+0x7c>)
 8003096:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <CAN_Init+0x78>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 800309e:	4b18      	ldr	r3, [pc, #96]	; (8003100 <CAN_Init+0x78>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <CAN_Init+0x78>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <CAN_Init+0x78>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <CAN_Init+0x78>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <CAN_Init+0x78>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <CAN_Init+0x78>)
 80030be:	2200      	movs	r2, #0
 80030c0:	775a      	strb	r2, [r3, #29]

	/* Settings related to CAN bit timings (http://www.bittiming.can-wiki.info/) */
	switch(can_bitrate) {
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10d      	bne.n	80030e4 <CAN_Init+0x5c>
	*/
	/********* TinyBMS only supports 500kbit/s CAN speed *********/
	case CANBITRATE_500KBIT_50MHZ:
		/* ** 500kbit/s @ 50MHz SYSCLK ** */
		//prescaler = 5, num_TQ = 10, Seg1 = 8, Seg2 = 1, Sample point at 90.0, register CAN_BTR = 0x00070009
		hcan1.Init.Prescaler = 10;
 80030c8:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <CAN_Init+0x78>)
 80030ca:	220a      	movs	r2, #10
 80030cc:	605a      	str	r2, [r3, #4]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <CAN_Init+0x78>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <CAN_Init+0x78>)
 80030d6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80030da:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <CAN_Init+0x78>)
 80030de:	2200      	movs	r2, #0
 80030e0:	615a      	str	r2, [r3, #20]
		break;
 80030e2:	e001      	b.n	80030e8 <CAN_Init+0x60>
		hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
		hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
		break;
	*/
	default:
		Error_Handler();
 80030e4:	f000 f9ba 	bl	800345c <Error_Handler>
	}
	if(HAL_CAN_Init(&hcan1) != HAL_OK) {
 80030e8:	4805      	ldr	r0, [pc, #20]	; (8003100 <CAN_Init+0x78>)
 80030ea:	f000 fc85 	bl	80039f8 <HAL_CAN_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <CAN_Init+0x70>
		Error_Handler();
 80030f4:	f000 f9b2 	bl	800345c <Error_Handler>
	}
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000200 	.word	0x20000200
 8003104:	40006400 	.word	0x40006400

08003108 <CAN_Filter_Config>:

void CAN_Filter_Config(void) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
	 *
	 * Note: Mask Mode can also be used to check:
	 * RTR = 0 (Data Frame)				IDE = 0 (11-bit STID)
	 * RTR = 1 (Remote Frame)			IDE = 1 (29-bit EXID)
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	CAN_FilterTypeDef can1_filter_init = {0};
 800310e:	463b      	mov	r3, r7
 8003110:	2228      	movs	r2, #40	; 0x28
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f003 fedd 	bl	8006ed4 <memset>

	//TinyBMS Default Node ID: 0x01 (hard-coded)
	//ID List Mode: Allows TinyBMS Request/Response messages from bus
	can1_filter_init.FilterActivation = ENABLE;
 800311a:	2301      	movs	r3, #1
 800311c:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x4020; 	//IDLIST "Request to TinyBMS"
 8003126:	f244 0320 	movw	r3, #16416	; 0x4020
 800312a:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800312c:	2300      	movs	r3, #0
 800312e:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x4820; //IDLIST "Response from TinyBMS"
 8003130:	f644 0320 	movw	r3, #18464	; 0x4820
 8003134:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDLIST; //ID List Mode
 800313a:	2301      	movs	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800313e:	2301      	movs	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK) {
 8003142:	463b      	mov	r3, r7
 8003144:	4619      	mov	r1, r3
 8003146:	4806      	ldr	r0, [pc, #24]	; (8003160 <CAN_Filter_Config+0x58>)
 8003148:	f000 fd52 	bl	8003bf0 <HAL_CAN_ConfigFilter>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <CAN_Filter_Config+0x4e>
		Error_Handler();
 8003152:	f000 f983 	bl	800345c <Error_Handler>
	}
}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000200 	.word	0x20000200

08003164 <CAN_Begin>:

void CAN_Begin(void) {
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	//Activate Notifications (Interrupts) by setting CAN_IER bits
	if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8003168:	f240 4103 	movw	r1, #1027	; 0x403
 800316c:	4808      	ldr	r0, [pc, #32]	; (8003190 <CAN_Begin+0x2c>)
 800316e:	f001 f878 	bl	8004262 <HAL_CAN_ActivateNotification>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <CAN_Begin+0x18>
		Error_Handler();
 8003178:	f000 f970 	bl	800345c <Error_Handler>
	}

	//Start CAN
	if(HAL_CAN_Start(&hcan1) != HAL_OK) {
 800317c:	4804      	ldr	r0, [pc, #16]	; (8003190 <CAN_Begin+0x2c>)
 800317e:	f000 fe17 	bl	8003db0 <HAL_CAN_Start>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <CAN_Begin+0x28>
		Error_Handler();
 8003188:	f000 f968 	bl	800345c <Error_Handler>
	}
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000200 	.word	0x20000200

08003194 <CAN1_Tx>:

void CAN1_Tx(uint8_t device, uint8_t* message, uint8_t len) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	71fb      	strb	r3, [r7, #7]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	if(device == TINYBMS) {
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d129      	bne.n	80031fe <CAN1_Tx+0x6a>
		TxHeader.DLC = len;				//Data Length Code (in Bytes)
 80031aa:	79bb      	ldrb	r3, [r7, #6]
 80031ac:	623b      	str	r3, [r7, #32]
		if(message[0] == CAN_TBMS_WRITE_CAN_NODEID) 	//Standard ID (Write new nodeID.. Request StdID: 0x200 + user_input)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b29      	cmp	r3, #41	; 0x29
 80031b4:	d106      	bne.n	80031c4 <CAN1_Tx+0x30>
			TxHeader.StdId = (TINYBMS_CAN_REQUEST_BASE_STDID + message[1]);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e00a      	b.n	80031da <CAN1_Tx+0x46>
		else if(message[0] == CAN_TBMS_READ_CAN_NODEID) //Standard ID (Read current nodeID.. Request StdID: 0x200)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b28      	cmp	r3, #40	; 0x28
 80031ca:	d103      	bne.n	80031d4 <CAN1_Tx+0x40>
			TxHeader.StdId = TINYBMS_CAN_REQUEST_BASE_STDID;
 80031cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	e002      	b.n	80031da <CAN1_Tx+0x46>
		else 											//Standard ID (Otherwise.. Request StdID: 0x201-0x23F)
			TxHeader.StdId = TinybmsStdID_Request;
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <CAN1_Tx+0xa8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD; 		//Standard or Extended ID type
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;	//Remote Transmission Request
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	f107 0110 	add.w	r1, r7, #16
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	4814      	ldr	r0, [pc, #80]	; (8003240 <CAN1_Tx+0xac>)
 80031ee:	f000 fe23 	bl	8003e38 <HAL_CAN_AddTxMessage>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01d      	beq.n	8003234 <CAN1_Tx+0xa0>
			Error_Handler();
 80031f8:	f000 f930 	bl	800345c <Error_Handler>
			Error_Handler();
		}
	} else {
		Error_Handler();
	}
}
 80031fc:	e01a      	b.n	8003234 <CAN1_Tx+0xa0>
	} else if(device == ELCONCHARGER2) {
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d115      	bne.n	8003230 <CAN1_Tx+0x9c>
		TxHeader.DLC = 8;				//Data Length Code (in Bytes)
 8003204:	2308      	movs	r3, #8
 8003206:	623b      	str	r3, [r7, #32]
		TxHeader.ExtId = 0x1806E5F4;	//Extended ID
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <CAN1_Tx+0xb0>)
 800320a:	617b      	str	r3, [r7, #20]
		TxHeader.IDE = CAN_ID_EXT; 		//Standard or Extended ID type
 800320c:	2304      	movs	r3, #4
 800320e:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;	//Remote Transmission Request
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	f107 0110 	add.w	r1, r7, #16
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	4808      	ldr	r0, [pc, #32]	; (8003240 <CAN1_Tx+0xac>)
 8003220:	f000 fe0a 	bl	8003e38 <HAL_CAN_AddTxMessage>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d004      	beq.n	8003234 <CAN1_Tx+0xa0>
			Error_Handler();
 800322a:	f000 f917 	bl	800345c <Error_Handler>
}
 800322e:	e001      	b.n	8003234 <CAN1_Tx+0xa0>
		Error_Handler();
 8003230:	f000 f914 	bl	800345c <Error_Handler>
}
 8003234:	bf00      	nop
 8003236:	3728      	adds	r7, #40	; 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000000 	.word	0x20000000
 8003240:	20000200 	.word	0x20000200
 8003244:	1806e5f4 	.word	0x1806e5f4

08003248 <HAL_UART_TxCpltCallback>:
	default:
		break;
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_UART_TxCpltCallback+0x20>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d102      	bne.n	8003260 <HAL_UART_TxCpltCallback+0x18>
		printf("HAL_UART_TxCpltCallback USART2\r\n");
 800325a:	4804      	ldr	r0, [pc, #16]	; (800326c <HAL_UART_TxCpltCallback+0x24>)
 800325c:	f004 fb32 	bl	80078c4 <puts>
	}
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40004400 	.word	0x40004400
 800326c:	0800be04 	.word	0x0800be04

08003270 <HAL_UART_ErrorCallback>:
	if(huart->Instance == USART2) {
		printf("HAL_UART_RxCpltCallback USART2\r\n");
	}
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_UART_ErrorCallback+0x20>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d102      	bne.n	8003288 <HAL_UART_ErrorCallback+0x18>
		printf("HAL_UART_ErrorCallback USART2\r\n");
 8003282:	4804      	ldr	r0, [pc, #16]	; (8003294 <HAL_UART_ErrorCallback+0x24>)
 8003284:	f004 fb1e 	bl	80078c4 <puts>
	}
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40004400 	.word	0x40004400
 8003294:	0800be44 	.word	0x0800be44

08003298 <HAL_CAN_TxMailbox0CompleteCallback>:
	if(huart->Instance == USART2) {
		printf("HAL_UART_AbortCpltCallback USART2\r\n");
	}
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b090      	sub	sp, #64	; 0x40
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d116      	bne.n	80032d8 <HAL_CAN_TxMailbox0CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox0CompleteCallback CAN1\r\n");
 80032aa:	480e      	ldr	r0, [pc, #56]	; (80032e4 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 80032ac:	f004 fb0a 	bl	80078c4 <puts>
		sprintf(msg,"Message Transmitted:M0\r\n");
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	490c      	ldr	r1, [pc, #48]	; (80032e8 <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 fb0c 	bl	80078d4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fc ffa5 	bl	8000210 <strlen>
 80032c6:	4603      	mov	r3, r0
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	f107 010c 	add.w	r1, r7, #12
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 80032d4:	f002 fdca 	bl	8005e6c <HAL_UART_Transmit>
	}
}
 80032d8:	bf00      	nop
 80032da:	3740      	adds	r7, #64	; 0x40
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40006400 	.word	0x40006400
 80032e4:	0800bee0 	.word	0x0800bee0
 80032e8:	0800bf0c 	.word	0x0800bf0c
 80032ec:	20000228 	.word	0x20000228

080032f0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b090      	sub	sp, #64	; 0x40
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d116      	bne.n	8003330 <HAL_CAN_TxMailbox1CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox1CompleteCallback CAN1\r\n");
 8003302:	480e      	ldr	r0, [pc, #56]	; (800333c <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 8003304:	f004 fade 	bl	80078c4 <puts>
		sprintf(msg,"Message Transmitted:M1\r\n");
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	490c      	ldr	r1, [pc, #48]	; (8003340 <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 800330e:	4618      	mov	r0, r3
 8003310:	f004 fae0 	bl	80078d4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	4618      	mov	r0, r3
 800331a:	f7fc ff79 	bl	8000210 <strlen>
 800331e:	4603      	mov	r3, r0
 8003320:	b29a      	uxth	r2, r3
 8003322:	f107 010c 	add.w	r1, r7, #12
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	4806      	ldr	r0, [pc, #24]	; (8003344 <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 800332c:	f002 fd9e 	bl	8005e6c <HAL_UART_Transmit>
	}
}
 8003330:	bf00      	nop
 8003332:	3740      	adds	r7, #64	; 0x40
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40006400 	.word	0x40006400
 800333c:	0800bf28 	.word	0x0800bf28
 8003340:	0800bf54 	.word	0x0800bf54
 8003344:	20000228 	.word	0x20000228

08003348 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b090      	sub	sp, #64	; 0x40
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d116      	bne.n	8003388 <HAL_CAN_TxMailbox2CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox2CompleteCallback CAN1\r\n");
 800335a:	480e      	ldr	r0, [pc, #56]	; (8003394 <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 800335c:	f004 fab2 	bl	80078c4 <puts>
		sprintf(msg,"Message Transmitted:M2\r\n");
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	490c      	ldr	r1, [pc, #48]	; (8003398 <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 8003366:	4618      	mov	r0, r3
 8003368:	f004 fab4 	bl	80078d4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	4618      	mov	r0, r3
 8003372:	f7fc ff4d 	bl	8000210 <strlen>
 8003376:	4603      	mov	r3, r0
 8003378:	b29a      	uxth	r2, r3
 800337a:	f107 010c 	add.w	r1, r7, #12
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	4806      	ldr	r0, [pc, #24]	; (800339c <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 8003384:	f002 fd72 	bl	8005e6c <HAL_UART_Transmit>
	}
}
 8003388:	bf00      	nop
 800338a:	3740      	adds	r7, #64	; 0x40
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40006400 	.word	0x40006400
 8003394:	0800bf70 	.word	0x0800bf70
 8003398:	0800bf9c 	.word	0x0800bf9c
 800339c:	20000228 	.word	0x20000228

080033a0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10c      	bne.n	80033cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		//Deactivate Notifications before getting Rx Message
		if(HAL_CAN_DeactivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80033b2:	f240 4103 	movw	r1, #1027	; 0x403
 80033b6:	4808      	ldr	r0, [pc, #32]	; (80033d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80033b8:	f000 ff79 	bl	80042ae <HAL_CAN_DeactivateNotification>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
			Error_Handler();
 80033c2:	f000 f84b 	bl	800345c <Error_Handler>
		}

		printf("HAL_CAN_RxFifo0MsgPendingCallback CAN1\r\n");
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80033c8:	f004 fa7c 	bl	80078c4 <puts>
	}
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40006400 	.word	0x40006400
 80033d8:	20000200 	.word	0x20000200
 80033dc:	0800bfb8 	.word	0x0800bfb8

080033e0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b090      	sub	sp, #64	; 0x40
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <HAL_CAN_ErrorCallback+0x48>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d116      	bne.n	8003420 <HAL_CAN_ErrorCallback+0x40>
		char msg[50];
		printf("HAL_CAN_ErrorCallback CAN1\r\n");
 80033f2:	480e      	ldr	r0, [pc, #56]	; (800342c <HAL_CAN_ErrorCallback+0x4c>)
 80033f4:	f004 fa66 	bl	80078c4 <puts>
		sprintf(msg, "CAN Error Detected\r\n");
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <HAL_CAN_ErrorCallback+0x50>)
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fa68 	bl	80078d4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	4618      	mov	r0, r3
 800340a:	f7fc ff01 	bl	8000210 <strlen>
 800340e:	4603      	mov	r3, r0
 8003410:	b29a      	uxth	r2, r3
 8003412:	f107 010c 	add.w	r1, r7, #12
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	4806      	ldr	r0, [pc, #24]	; (8003434 <HAL_CAN_ErrorCallback+0x54>)
 800341c:	f002 fd26 	bl	8005e6c <HAL_UART_Transmit>
	}
}
 8003420:	bf00      	nop
 8003422:	3740      	adds	r7, #64	; 0x40
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40006400 	.word	0x40006400
 800342c:	0800bfe0 	.word	0x0800bfe0
 8003430:	0800bffc 	.word	0x0800bffc
 8003434:	20000228 	.word	0x20000228

08003438 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6) {
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <HAL_TIM_PeriodElapsedCallback+0x16>
		//Every 1 second during Charging, send message to ElCon charger
		ElCon_SendMsg();
 800344a:	f7ff fc0f 	bl	8002c6c <ElCon_SendMsg>
	}
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40001000 	.word	0x40001000

0800345c <Error_Handler>:

void Error_Handler(void) {
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
	while(1);
 8003460:	e7fe      	b.n	8003460 <Error_Handler+0x4>
	...

08003464 <HAL_MspInit>:
* @date 03-02-2022
***********************************************/

#include "main.h"

void HAL_MspInit(void) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0

	/* Low level processor specific inits */
	__HAL_RCC_PWR_CLK_ENABLE();
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_MspInit+0x74>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_MspInit+0x74>)
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_MspInit+0x74>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_MspInit+0x74>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <HAL_MspInit+0x74>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_MspInit+0x74>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	683b      	ldr	r3, [r7, #0]

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //default setting
 800349a:	2003      	movs	r0, #3
 800349c:	f001 fa06 	bl	80048ac <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_MspInit+0x78>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	4a0d      	ldr	r2, [pc, #52]	; (80034dc <HAL_MspInit+0x78>)
 80034a6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80034aa:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	f06f 000b 	mvn.w	r0, #11
 80034b4:	f001 fa05 	bl	80048c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	f06f 000a 	mvn.w	r0, #10
 80034c0:	f001 f9ff 	bl	80048c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2100      	movs	r1, #0
 80034c8:	f06f 0009 	mvn.w	r0, #9
 80034cc:	f001 f9f9 	bl	80048c2 <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]

	if(hcan->Instance == CAN1) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <HAL_CAN_MspInit+0xbc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d147      	bne.n	8003592 <HAL_CAN_MspInit+0xb2>
		__HAL_RCC_CAN1_CLK_ENABLE();
 8003502:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <HAL_CAN_MspInit+0xc0>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <HAL_CAN_MspInit+0xc0>)
 8003508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_CAN_MspInit+0xc0>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800351a:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <HAL_CAN_MspInit+0xc0>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <HAL_CAN_MspInit+0xc0>)
 8003520:	f043 0308 	orr.w	r3, r3, #8
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <HAL_CAN_MspInit+0xc0>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

		/** CAN1 GPIO Configuration
			PD0     ------> CAN1_RX
			PD1     ------> CAN1_TX
		*/
		GPIO_InitStruct.Pin = (CAN1_RX_PIN | CAN1_TX_PIN);
 8003532:	2303      	movs	r3, #3
 8003534:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003542:	2309      	movs	r3, #9
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(CAN1_GPIO_Port, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4815      	ldr	r0, [pc, #84]	; (80035a4 <HAL_CAN_MspInit+0xc4>)
 800354e:	f001 faab 	bl	8004aa8 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	210f      	movs	r1, #15
 8003556:	2013      	movs	r0, #19
 8003558:	f001 f9b3 	bl	80048c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 800355c:	2200      	movs	r2, #0
 800355e:	210f      	movs	r1, #15
 8003560:	2014      	movs	r0, #20
 8003562:	f001 f9ae 	bl	80048c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	210f      	movs	r1, #15
 800356a:	2015      	movs	r0, #21
 800356c:	f001 f9a9 	bl	80048c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8003570:	2200      	movs	r2, #0
 8003572:	210f      	movs	r1, #15
 8003574:	2016      	movs	r0, #22
 8003576:	f001 f9a4 	bl	80048c2 <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800357a:	2013      	movs	r0, #19
 800357c:	f001 f9bd 	bl	80048fa <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003580:	2014      	movs	r0, #20
 8003582:	f001 f9ba 	bl	80048fa <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003586:	2015      	movs	r0, #21
 8003588:	f001 f9b7 	bl	80048fa <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800358c:	2016      	movs	r0, #22
 800358e:	f001 f9b4 	bl	80048fa <HAL_NVIC_EnableIRQ>
	}
}
 8003592:	bf00      	nop
 8003594:	3728      	adds	r7, #40	; 0x28
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40006400 	.word	0x40006400
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40020c00 	.word	0x40020c00

080035a8 <HAL_UART_MspInit>:
		HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
		HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]

	if(huart->Instance == USART2) {
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a32      	ldr	r2, [pc, #200]	; (8003690 <HAL_UART_MspInit+0xe8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d130      	bne.n	800362c <HAL_UART_MspInit+0x84>
		__HAL_RCC_USART2_CLK_ENABLE();
 80035ca:	4b32      	ldr	r3, [pc, #200]	; (8003694 <HAL_UART_MspInit+0xec>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a31      	ldr	r2, [pc, #196]	; (8003694 <HAL_UART_MspInit+0xec>)
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <HAL_UART_MspInit+0xec>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80035e2:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <HAL_UART_MspInit+0xec>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <HAL_UART_MspInit+0xec>)
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <HAL_UART_MspInit+0xec>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697b      	ldr	r3, [r7, #20]
		 *  USART2 GPIO Configuration
			PD5     ------> USART2_TX
			PD6     ------> USART2_RX
		*/

		GPIO_InitStruct.Pin = (USART2_TX_Pin | USART2_RX_Pin);
 80035fa:	2360      	movs	r3, #96	; 0x60
 80035fc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003606:	2303      	movs	r3, #3
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800360a:	2307      	movs	r3, #7
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART2_GPIO_Port, &GPIO_InitStruct);
 800360e:	f107 031c 	add.w	r3, r7, #28
 8003612:	4619      	mov	r1, r3
 8003614:	4820      	ldr	r0, [pc, #128]	; (8003698 <HAL_UART_MspInit+0xf0>)
 8003616:	f001 fa47 	bl	8004aa8 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	210f      	movs	r1, #15
 800361e:	2026      	movs	r0, #38	; 0x26
 8003620:	f001 f94f 	bl	80048c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003624:	2026      	movs	r0, #38	; 0x26
 8003626:	f001 f968 	bl	80048fa <HAL_NVIC_EnableIRQ>
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
	}
}
 800362a:	e02d      	b.n	8003688 <HAL_UART_MspInit+0xe0>
	} else if(huart->Instance == USART3) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1a      	ldr	r2, [pc, #104]	; (800369c <HAL_UART_MspInit+0xf4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d128      	bne.n	8003688 <HAL_UART_MspInit+0xe0>
		__HAL_RCC_USART3_CLK_ENABLE();
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <HAL_UART_MspInit+0xec>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a16      	ldr	r2, [pc, #88]	; (8003694 <HAL_UART_MspInit+0xec>)
 800363c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_UART_MspInit+0xec>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800364e:	4b11      	ldr	r3, [pc, #68]	; (8003694 <HAL_UART_MspInit+0xec>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a10      	ldr	r2, [pc, #64]	; (8003694 <HAL_UART_MspInit+0xec>)
 8003654:	f043 0308 	orr.w	r3, r3, #8
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <HAL_UART_MspInit+0xec>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = (USART3_TX_Pin | USART3_RX_Pin);
 8003666:	f44f 7340 	mov.w	r3, #768	; 0x300
 800366a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003670:	2301      	movs	r3, #1
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003678:	2307      	movs	r3, #7
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	4619      	mov	r1, r3
 8003682:	4805      	ldr	r0, [pc, #20]	; (8003698 <HAL_UART_MspInit+0xf0>)
 8003684:	f001 fa10 	bl	8004aa8 <HAL_GPIO_Init>
}
 8003688:	bf00      	nop
 800368a:	3730      	adds	r7, #48	; 0x30
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40004400 	.word	0x40004400
 8003694:	40023800 	.word	0x40023800
 8003698:	40020c00 	.word	0x40020c00
 800369c:	40004800 	.word	0x40004800

080036a0 <HAL_TIM_Base_MspInit>:
		*/
		HAL_GPIO_DeInit(USART3_GPIO_Port, (USART3_TX_Pin | USART3_RX_Pin));
	}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0d      	ldr	r2, [pc, #52]	; (80036e4 <HAL_TIM_Base_MspInit+0x44>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <HAL_TIM_Base_MspInit+0x3a>
		//1. Enable TIM6 Clock
		__HAL_RCC_TIM6_CLK_ENABLE();
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_TIM_Base_MspInit+0x48>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_TIM_Base_MspInit+0x48>)
 80036b8:	f043 0310 	orr.w	r3, r3, #16
 80036bc:	6413      	str	r3, [r2, #64]	; 0x40
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_TIM_Base_MspInit+0x48>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]

		//2. Enable TIM6 IRQ
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036ca:	2036      	movs	r0, #54	; 0x36
 80036cc:	f001 f915 	bl	80048fa <HAL_NVIC_EnableIRQ>

		//3. Setup TIM6_DAC_IRQn priority
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	210f      	movs	r1, #15
 80036d4:	2036      	movs	r0, #54	; 0x36
 80036d6:	f001 f8f4 	bl	80048c2 <HAL_NVIC_SetPriority>
	}
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40001000 	.word	0x40001000
 80036e8:	40023800 	.word	0x40023800

080036ec <ITM_SendChar>:
#define ITM_TER         	*((volatile uint32_t*) 0xE0000E00 )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TCR            	*((volatile uint32_t*) 0xE0000E80 )

void ITM_SendChar(uint8_t ch)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
    /* Stimulus Port #N is enabled when bit STIMENA[N] is set*/
	ITM_TER |= ( 1 << 0);
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <ITM_SendChar+0x48>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <ITM_SendChar+0x48>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6013      	str	r3, [r2, #0]

	/*Enable ITM. This is the master enable and must be set to allow
	writes to all ITM registers, including the control register. */
	ITM_TCR |= ( 1 << 0);
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <ITM_SendChar+0x4c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a0c      	ldr	r2, [pc, #48]	; (8003738 <ITM_SendChar+0x4c>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800370e:	bf00      	nop
 8003710:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f8      	beq.n	8003710 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800371e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e0000e00 	.word	0xe0000e00
 8003738:	e0000e80 	.word	0xe0000e80

0800373c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
	return 1;
 8003740:	2301      	movs	r3, #1
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <_kill>:

int _kill(int pid, int sig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003756:	f003 fb93 	bl	8006e80 <__errno>
 800375a:	4603      	mov	r3, r0
 800375c:	2216      	movs	r2, #22
 800375e:	601a      	str	r2, [r3, #0]
	return -1;
 8003760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_exit>:

void _exit (int status)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003774:	f04f 31ff 	mov.w	r1, #4294967295
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ffe7 	bl	800374c <_kill>
	while (1) {}		/* Make sure we hang here */
 800377e:	e7fe      	b.n	800377e <_exit+0x12>

08003780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	e00a      	b.n	80037a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003792:	f3af 8000 	nop.w
 8003796:	4601      	mov	r1, r0
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	60ba      	str	r2, [r7, #8]
 800379e:	b2ca      	uxtb	r2, r1
 80037a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	3301      	adds	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	dbf0      	blt.n	8003792 <_read+0x12>
	}

return len;
 80037b0:	687b      	ldr	r3, [r7, #4]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e009      	b.n	80037e0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	60ba      	str	r2, [r7, #8]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff89 	bl	80036ec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3301      	adds	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	dbf1      	blt.n	80037cc <_write+0x12>
	}
	return len;
 80037e8:	687b      	ldr	r3, [r7, #4]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_close>:

int _close(int file)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
	return -1;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800381a:	605a      	str	r2, [r3, #4]
	return 0;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <_isatty>:

int _isatty(int file)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
	return 1;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
	return 0;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <_sbrk+0x5c>)
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <_sbrk+0x60>)
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <_sbrk+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <_sbrk+0x64>)
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <_sbrk+0x68>)
 800387c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <_sbrk+0x64>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	429a      	cmp	r2, r3
 800388a:	d207      	bcs.n	800389c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800388c:	f003 faf8 	bl	8006e80 <__errno>
 8003890:	4603      	mov	r3, r0
 8003892:	220c      	movs	r2, #12
 8003894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	e009      	b.n	80038b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <_sbrk+0x64>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <_sbrk+0x64>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	4a05      	ldr	r2, [pc, #20]	; (80038c0 <_sbrk+0x64>)
 80038ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ae:	68fb      	ldr	r3, [r7, #12]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20050000 	.word	0x20050000
 80038bc:	00000400 	.word	0x00000400
 80038c0:	20000390 	.word	0x20000390
 80038c4:	200003a8 	.word	0x200003a8

080038c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <SystemInit+0x20>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <SystemInit+0x20>)
 80038d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038f0:	480d      	ldr	r0, [pc, #52]	; (8003928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038f2:	490e      	ldr	r1, [pc, #56]	; (800392c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f8:	e002      	b.n	8003900 <LoopCopyDataInit>

080038fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038fe:	3304      	adds	r3, #4

08003900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003904:	d3f9      	bcc.n	80038fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003908:	4c0b      	ldr	r4, [pc, #44]	; (8003938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800390c:	e001      	b.n	8003912 <LoopFillZerobss>

0800390e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800390e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003910:	3204      	adds	r2, #4

08003912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003914:	d3fb      	bcc.n	800390e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003916:	f7ff ffd7 	bl	80038c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800391a:	f003 fab7 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391e:	f7ff f8e5 	bl	8002aec <main>
  bx  lr    
 8003922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003924:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800392c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003930:	0800c414 	.word	0x0800c414
  ldr r2, =_sbss
 8003934:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003938:	200003a8 	.word	0x200003a8

0800393c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800393c:	e7fe      	b.n	800393c <ADC_IRQHandler>

0800393e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003942:	2003      	movs	r0, #3
 8003944:	f000 ffb2 	bl	80048ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003948:	2000      	movs	r0, #0
 800394a:	f000 f805 	bl	8003958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800394e:	f7ff fd89 	bl	8003464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_InitTick+0x54>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <HAL_InitTick+0x58>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4619      	mov	r1, r3
 800396a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800396e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	4618      	mov	r0, r3
 8003978:	f000 ffcd 	bl	8004916 <HAL_SYSTICK_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e00e      	b.n	80039a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0f      	cmp	r3, #15
 800398a:	d80a      	bhi.n	80039a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800398c:	2200      	movs	r2, #0
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	f000 ff95 	bl	80048c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003998:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <HAL_InitTick+0x5c>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000008 	.word	0x20000008
 80039b0:	20000010 	.word	0x20000010
 80039b4:	2000000c 	.word	0x2000000c

080039b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_IncTick+0x20>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_IncTick+0x24>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	4a04      	ldr	r2, [pc, #16]	; (80039dc <HAL_IncTick+0x24>)
 80039ca:	6013      	str	r3, [r2, #0]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000010 	.word	0x20000010
 80039dc:	20000394 	.word	0x20000394

080039e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return uwTick;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_GetTick+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000394 	.word	0x20000394

080039f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0ed      	b.n	8003be6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fd62 	bl	80034e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a2c:	f7ff ffd8 	bl	80039e0 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a32:	e012      	b.n	8003a5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a34:	f7ff ffd4 	bl	80039e0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b0a      	cmp	r3, #10
 8003a40:	d90b      	bls.n	8003a5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2205      	movs	r2, #5
 8003a52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0c5      	b.n	8003be6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0e5      	beq.n	8003a34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0202 	bic.w	r2, r2, #2
 8003a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a78:	f7ff ffb2 	bl	80039e0 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a7e:	e012      	b.n	8003aa6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a80:	f7ff ffae 	bl	80039e0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b0a      	cmp	r3, #10
 8003a8c:	d90b      	bls.n	8003aa6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2205      	movs	r2, #5
 8003a9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e09f      	b.n	8003be6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e5      	bne.n	8003a80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7e1b      	ldrb	r3, [r3, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d108      	bne.n	8003ace <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e007      	b.n	8003ade <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	7e5b      	ldrb	r3, [r3, #25]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e007      	b.n	8003b08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7e9b      	ldrb	r3, [r3, #26]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d108      	bne.n	8003b22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0220 	orr.w	r2, r2, #32
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e007      	b.n	8003b32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0220 	bic.w	r2, r2, #32
 8003b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7edb      	ldrb	r3, [r3, #27]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d108      	bne.n	8003b4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0210 	bic.w	r2, r2, #16
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e007      	b.n	8003b5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0210 	orr.w	r2, r2, #16
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	7f1b      	ldrb	r3, [r3, #28]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d108      	bne.n	8003b76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0208 	orr.w	r2, r2, #8
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e007      	b.n	8003b86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0208 	bic.w	r2, r2, #8
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	7f5b      	ldrb	r3, [r3, #29]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d108      	bne.n	8003ba0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0204 	orr.w	r2, r2, #4
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e007      	b.n	8003bb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0204 	bic.w	r2, r2, #4
 8003bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	ea42 0103 	orr.w	r1, r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	1e5a      	subs	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d003      	beq.n	8003c16 <HAL_CAN_ConfigFilter+0x26>
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	f040 80be 	bne.w	8003d92 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c16:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_CAN_ConfigFilter+0x1bc>)
 8003c18:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	431a      	orrs	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2201      	movs	r2, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	401a      	ands	r2, r3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d123      	bne.n	8003cc0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	401a      	ands	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3248      	adds	r2, #72	; 0x48
 8003ca0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cb6:	6979      	ldr	r1, [r7, #20]
 8003cb8:	3348      	adds	r3, #72	; 0x48
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d122      	bne.n	8003d0e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ce8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3248      	adds	r2, #72	; 0x48
 8003cee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	3348      	adds	r3, #72	; 0x48
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	401a      	ands	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003d28:	e007      	b.n	8003d3a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	401a      	ands	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003d54:	e007      	b.n	8003d66 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d84:	f023 0201 	bic.w	r2, r3, #1
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e006      	b.n	8003da0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40006400 	.word	0x40006400

08003db0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d12e      	bne.n	8003e22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ddc:	f7ff fe00 	bl	80039e0 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003de2:	e012      	b.n	8003e0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003de4:	f7ff fdfc 	bl	80039e0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b0a      	cmp	r3, #10
 8003df0:	d90b      	bls.n	8003e0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2205      	movs	r2, #5
 8003e02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e012      	b.n	8003e30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e5      	bne.n	8003de4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e006      	b.n	8003e30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d003      	beq.n	8003e64 <HAL_CAN_AddTxMessage+0x2c>
 8003e5c:	7ffb      	ldrb	r3, [r7, #31]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	f040 80b8 	bne.w	8003fd4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80a0 	beq.w	8003fc4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	0e1b      	lsrs	r3, r3, #24
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d907      	bls.n	8003ea4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e09e      	b.n	8003fe2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	6809      	ldr	r1, [r1, #0]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	3318      	adds	r3, #24
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	440b      	add	r3, r1
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e00f      	b.n	8003ef2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003edc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003ee6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3318      	adds	r3, #24
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	440b      	add	r3, r1
 8003ef0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3318      	adds	r3, #24
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	440b      	add	r3, r1
 8003f02:	3304      	adds	r3, #4
 8003f04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	7d1b      	ldrb	r3, [r3, #20]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d111      	bne.n	8003f32 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	3318      	adds	r3, #24
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	4413      	add	r3, r2
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	6811      	ldr	r1, [r2, #0]
 8003f22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	3318      	adds	r3, #24
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3304      	adds	r3, #4
 8003f30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3307      	adds	r3, #7
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	061a      	lsls	r2, r3, #24
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3306      	adds	r3, #6
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3305      	adds	r3, #5
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	3204      	adds	r2, #4
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	4610      	mov	r0, r2
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	6811      	ldr	r1, [r2, #0]
 8003f5a:	ea43 0200 	orr.w	r2, r3, r0
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	440b      	add	r3, r1
 8003f64:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003f68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3303      	adds	r3, #3
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	061a      	lsls	r2, r3, #24
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3302      	adds	r3, #2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	4313      	orrs	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	6811      	ldr	r1, [r2, #0]
 8003f90:	ea43 0200 	orr.w	r2, r3, r0
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	440b      	add	r3, r1
 8003f9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003f9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	3318      	adds	r3, #24
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	4413      	add	r3, r2
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	6811      	ldr	r1, [r2, #0]
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	3318      	adds	r3, #24
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	440b      	add	r3, r1
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e00e      	b.n	8003fe2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e006      	b.n	8003fe2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b087      	sub	sp, #28
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004002:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d003      	beq.n	8004012 <HAL_CAN_GetRxMessage+0x24>
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b02      	cmp	r3, #2
 800400e:	f040 80f3 	bne.w	80041f8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10e      	bne.n	8004036 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d116      	bne.n	8004054 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0e7      	b.n	8004206 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0d8      	b.n	8004206 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	331b      	adds	r3, #27
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	4413      	add	r3, r2
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0204 	and.w	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	331b      	adds	r3, #27
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	4413      	add	r3, r2
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0d5b      	lsrs	r3, r3, #21
 8004082:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e00b      	b.n	80040a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	331b      	adds	r3, #27
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	4413      	add	r3, r2
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	08db      	lsrs	r3, r3, #3
 800409c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	331b      	adds	r3, #27
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	4413      	add	r3, r2
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0202 	and.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	331b      	adds	r3, #27
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	4413      	add	r3, r2
 80040c6:	3304      	adds	r3, #4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 020f 	and.w	r2, r3, #15
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	331b      	adds	r3, #27
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	3304      	adds	r3, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	331b      	adds	r3, #27
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	4413      	add	r3, r2
 80040f6:	3304      	adds	r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	4413      	add	r3, r2
 800410c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	0a1a      	lsrs	r2, r3, #8
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	4413      	add	r3, r2
 800413c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	0c1a      	lsrs	r2, r3, #16
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	3302      	adds	r3, #2
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4413      	add	r3, r2
 8004156:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0e1a      	lsrs	r2, r3, #24
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	3303      	adds	r3, #3
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	4413      	add	r3, r2
 8004170:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	3304      	adds	r3, #4
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0a1a      	lsrs	r2, r3, #8
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	3305      	adds	r3, #5
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0c1a      	lsrs	r2, r3, #16
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	3306      	adds	r3, #6
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	0e1a      	lsrs	r2, r3, #24
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	3307      	adds	r3, #7
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d108      	bne.n	80041e4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0220 	orr.w	r2, r2, #32
 80041e0:	60da      	str	r2, [r3, #12]
 80041e2:	e007      	b.n	80041f4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0220 	orr.w	r2, r2, #32
 80041f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e006      	b.n	8004206 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004226:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004228:	7afb      	ldrb	r3, [r7, #11]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d002      	beq.n	8004234 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800422e:	7afb      	ldrb	r3, [r7, #11]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d10f      	bne.n	8004254 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	e005      	b.n	8004254 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004254:	68fb      	ldr	r3, [r7, #12]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004272:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d002      	beq.n	8004280 <HAL_CAN_ActivateNotification+0x1e>
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d109      	bne.n	8004294 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6959      	ldr	r1, [r3, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e006      	b.n	80042a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d002      	beq.n	80042cc <HAL_CAN_DeactivateNotification+0x1e>
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d10a      	bne.n	80042e2 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6959      	ldr	r1, [r3, #20]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	400a      	ands	r2, r1
 80042dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e006      	b.n	80042f0 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
  }
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004304:	2300      	movs	r3, #0
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d07c      	beq.n	800443c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d023      	beq.n	8004394 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fe ff9a 	bl	8003298 <HAL_CAN_TxMailbox0CompleteCallback>
 8004364:	e016      	b.n	8004394 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	e00c      	b.n	8004394 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	e002      	b.n	8004394 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f96b 	bl	800466a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d024      	beq.n	80043e8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fe ff9c 	bl	80032f0 <HAL_CAN_TxMailbox1CompleteCallback>
 80043b8:	e016      	b.n	80043e8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e00c      	b.n	80043e8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	e002      	b.n	80043e8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f94b 	bl	800467e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d024      	beq.n	800443c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe ff9e 	bl	8003348 <HAL_CAN_TxMailbox2CompleteCallback>
 800440c:	e016      	b.n	800443c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	e00c      	b.n	800443c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
 8004434:	e002      	b.n	800443c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f92b 	bl	8004692 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004456:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2208      	movs	r2, #8
 800447a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f912 	bl	80046a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fe ff80 	bl	80033a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2210      	movs	r2, #16
 80044c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2208      	movs	r2, #8
 80044de:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8f4 	bl	80046ce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8db 	bl	80046ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2210      	movs	r2, #16
 800451e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8de 	bl	80046e2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2208      	movs	r2, #8
 8004540:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8d7 	bl	80046f6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d07b      	beq.n	800464a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d072      	beq.n	8004642 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f043 0302 	orr.w	r3, r3, #2
 8004592:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d043      	beq.n	8004642 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d03e      	beq.n	8004642 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045ca:	2b60      	cmp	r3, #96	; 0x60
 80045cc:	d02b      	beq.n	8004626 <HAL_CAN_IRQHandler+0x32a>
 80045ce:	2b60      	cmp	r3, #96	; 0x60
 80045d0:	d82e      	bhi.n	8004630 <HAL_CAN_IRQHandler+0x334>
 80045d2:	2b50      	cmp	r3, #80	; 0x50
 80045d4:	d022      	beq.n	800461c <HAL_CAN_IRQHandler+0x320>
 80045d6:	2b50      	cmp	r3, #80	; 0x50
 80045d8:	d82a      	bhi.n	8004630 <HAL_CAN_IRQHandler+0x334>
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d019      	beq.n	8004612 <HAL_CAN_IRQHandler+0x316>
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d826      	bhi.n	8004630 <HAL_CAN_IRQHandler+0x334>
 80045e2:	2b30      	cmp	r3, #48	; 0x30
 80045e4:	d010      	beq.n	8004608 <HAL_CAN_IRQHandler+0x30c>
 80045e6:	2b30      	cmp	r3, #48	; 0x30
 80045e8:	d822      	bhi.n	8004630 <HAL_CAN_IRQHandler+0x334>
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d002      	beq.n	80045f4 <HAL_CAN_IRQHandler+0x2f8>
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d005      	beq.n	80045fe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80045f2:	e01d      	b.n	8004630 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045fc:	e019      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004606:	e014      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	f043 0320 	orr.w	r3, r3, #32
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004610:	e00f      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800461a:	e00a      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004624:	e005      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800462e:	e000      	b.n	8004632 <HAL_CAN_IRQHandler+0x336>
            break;
 8004630:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004640:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2204      	movs	r2, #4
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fe febf 	bl	80033e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004662:	bf00      	nop
 8004664:	3728      	adds	r7, #40	; 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <__NVIC_SetPriorityGrouping+0x40>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004728:	4013      	ands	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <__NVIC_SetPriorityGrouping+0x44>)
 8004736:	4313      	orrs	r3, r2
 8004738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800473a:	4a04      	ldr	r2, [pc, #16]	; (800474c <__NVIC_SetPriorityGrouping+0x40>)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	60d3      	str	r3, [r2, #12]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000ed00 	.word	0xe000ed00
 8004750:	05fa0000 	.word	0x05fa0000

08004754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <__NVIC_GetPriorityGrouping+0x18>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	f003 0307 	and.w	r3, r3, #7
}
 8004762:	4618      	mov	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	2b00      	cmp	r3, #0
 8004780:	db0b      	blt.n	800479a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	f003 021f 	and.w	r2, r3, #31
 8004788:	4907      	ldr	r1, [pc, #28]	; (80047a8 <__NVIC_EnableIRQ+0x38>)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2001      	movs	r0, #1
 8004792:	fa00 f202 	lsl.w	r2, r0, r2
 8004796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e000e100 	.word	0xe000e100

080047ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	6039      	str	r1, [r7, #0]
 80047b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	db0a      	blt.n	80047d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	490c      	ldr	r1, [pc, #48]	; (80047f8 <__NVIC_SetPriority+0x4c>)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	0112      	lsls	r2, r2, #4
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	440b      	add	r3, r1
 80047d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d4:	e00a      	b.n	80047ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	4908      	ldr	r1, [pc, #32]	; (80047fc <__NVIC_SetPriority+0x50>)
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	3b04      	subs	r3, #4
 80047e4:	0112      	lsls	r2, r2, #4
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	440b      	add	r3, r1
 80047ea:	761a      	strb	r2, [r3, #24]
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000e100 	.word	0xe000e100
 80047fc:	e000ed00 	.word	0xe000ed00

08004800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	; 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f1c3 0307 	rsb	r3, r3, #7
 800481a:	2b04      	cmp	r3, #4
 800481c:	bf28      	it	cs
 800481e:	2304      	movcs	r3, #4
 8004820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3304      	adds	r3, #4
 8004826:	2b06      	cmp	r3, #6
 8004828:	d902      	bls.n	8004830 <NVIC_EncodePriority+0x30>
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3b03      	subs	r3, #3
 800482e:	e000      	b.n	8004832 <NVIC_EncodePriority+0x32>
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43da      	mvns	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	401a      	ands	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004848:	f04f 31ff 	mov.w	r1, #4294967295
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	43d9      	mvns	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004858:	4313      	orrs	r3, r2
         );
}
 800485a:	4618      	mov	r0, r3
 800485c:	3724      	adds	r7, #36	; 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004878:	d301      	bcc.n	800487e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800487a:	2301      	movs	r3, #1
 800487c:	e00f      	b.n	800489e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <SysTick_Config+0x40>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004886:	210f      	movs	r1, #15
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	f7ff ff8e 	bl	80047ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <SysTick_Config+0x40>)
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <SysTick_Config+0x40>)
 8004898:	2207      	movs	r2, #7
 800489a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	e000e010 	.word	0xe000e010

080048ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff29 	bl	800470c <__NVIC_SetPriorityGrouping>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	4603      	mov	r3, r0
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048d4:	f7ff ff3e 	bl	8004754 <__NVIC_GetPriorityGrouping>
 80048d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7ff ff8e 	bl	8004800 <NVIC_EncodePriority>
 80048e4:	4602      	mov	r2, r0
 80048e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff ff5d 	bl	80047ac <__NVIC_SetPriority>
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4603      	mov	r3, r0
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff31 	bl	8004770 <__NVIC_EnableIRQ>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffa2 	bl	8004868 <SysTick_Config>
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b04      	cmp	r3, #4
 800493c:	d106      	bne.n	800494c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a08      	ldr	r2, [pc, #32]	; (8004964 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800494a:	e005      	b.n	8004958 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a04      	ldr	r2, [pc, #16]	; (8004964 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004952:	f023 0304 	bic.w	r3, r3, #4
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000e010 	.word	0xe000e010

08004968 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800496c:	f000 f802 	bl	8004974 <HAL_SYSTICK_Callback>
}
 8004970:	bf00      	nop
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004990:	f7ff f826 	bl	80039e0 <HAL_GetTick>
 8004994:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d008      	beq.n	80049b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2280      	movs	r2, #128	; 0x80
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e052      	b.n	8004a5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0216 	bic.w	r2, r2, #22
 80049c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d103      	bne.n	80049e4 <HAL_DMA_Abort+0x62>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0208 	bic.w	r2, r2, #8
 80049f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a04:	e013      	b.n	8004a2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a06:	f7fe ffeb 	bl	80039e0 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d90c      	bls.n	8004a2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e015      	b.n	8004a5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e4      	bne.n	8004a06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	223f      	movs	r2, #63	; 0x3f
 8004a42:	409a      	lsls	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d004      	beq.n	8004a80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2280      	movs	r2, #128	; 0x80
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e00c      	b.n	8004a9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2205      	movs	r2, #5
 8004a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	e175      	b.n	8004db4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ac8:	2201      	movs	r2, #1
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	f040 8164 	bne.w	8004dae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d005      	beq.n	8004afe <HAL_GPIO_Init+0x56>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d130      	bne.n	8004b60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	2203      	movs	r2, #3
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b34:	2201      	movs	r2, #1
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 0201 	and.w	r2, r3, #1
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d017      	beq.n	8004b9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	2203      	movs	r2, #3
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d123      	bne.n	8004bf0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	08da      	lsrs	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3208      	adds	r2, #8
 8004bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	220f      	movs	r2, #15
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	08da      	lsrs	r2, r3, #3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3208      	adds	r2, #8
 8004bea:	69b9      	ldr	r1, [r7, #24]
 8004bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 0203 	and.w	r2, r3, #3
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80be 	beq.w	8004dae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c32:	4b66      	ldr	r3, [pc, #408]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	4a65      	ldr	r2, [pc, #404]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c3e:	4b63      	ldr	r3, [pc, #396]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c4a:	4a61      	ldr	r2, [pc, #388]	; (8004dd0 <HAL_GPIO_Init+0x328>)
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	3302      	adds	r3, #2
 8004c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	220f      	movs	r2, #15
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a58      	ldr	r2, [pc, #352]	; (8004dd4 <HAL_GPIO_Init+0x32c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d037      	beq.n	8004ce6 <HAL_GPIO_Init+0x23e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a57      	ldr	r2, [pc, #348]	; (8004dd8 <HAL_GPIO_Init+0x330>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d031      	beq.n	8004ce2 <HAL_GPIO_Init+0x23a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a56      	ldr	r2, [pc, #344]	; (8004ddc <HAL_GPIO_Init+0x334>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d02b      	beq.n	8004cde <HAL_GPIO_Init+0x236>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a55      	ldr	r2, [pc, #340]	; (8004de0 <HAL_GPIO_Init+0x338>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d025      	beq.n	8004cda <HAL_GPIO_Init+0x232>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a54      	ldr	r2, [pc, #336]	; (8004de4 <HAL_GPIO_Init+0x33c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01f      	beq.n	8004cd6 <HAL_GPIO_Init+0x22e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a53      	ldr	r2, [pc, #332]	; (8004de8 <HAL_GPIO_Init+0x340>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d019      	beq.n	8004cd2 <HAL_GPIO_Init+0x22a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a52      	ldr	r2, [pc, #328]	; (8004dec <HAL_GPIO_Init+0x344>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_GPIO_Init+0x226>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a51      	ldr	r2, [pc, #324]	; (8004df0 <HAL_GPIO_Init+0x348>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00d      	beq.n	8004cca <HAL_GPIO_Init+0x222>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a50      	ldr	r2, [pc, #320]	; (8004df4 <HAL_GPIO_Init+0x34c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <HAL_GPIO_Init+0x21e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a4f      	ldr	r2, [pc, #316]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <HAL_GPIO_Init+0x21a>
 8004cbe:	2309      	movs	r3, #9
 8004cc0:	e012      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cc2:	230a      	movs	r3, #10
 8004cc4:	e010      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	e00e      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cca:	2307      	movs	r3, #7
 8004ccc:	e00c      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cce:	2306      	movs	r3, #6
 8004cd0:	e00a      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cd2:	2305      	movs	r3, #5
 8004cd4:	e008      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	e006      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e004      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e002      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	f002 0203 	and.w	r2, r2, #3
 8004cee:	0092      	lsls	r2, r2, #2
 8004cf0:	4093      	lsls	r3, r2
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004cf8:	4935      	ldr	r1, [pc, #212]	; (8004dd0 <HAL_GPIO_Init+0x328>)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	3302      	adds	r3, #2
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d06:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <HAL_GPIO_Init+0x354>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d2a:	4a34      	ldr	r2, [pc, #208]	; (8004dfc <HAL_GPIO_Init+0x354>)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d30:	4b32      	ldr	r3, [pc, #200]	; (8004dfc <HAL_GPIO_Init+0x354>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d54:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <HAL_GPIO_Init+0x354>)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_GPIO_Init+0x354>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d7e:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <HAL_GPIO_Init+0x354>)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d84:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <HAL_GPIO_Init+0x354>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004da8:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <HAL_GPIO_Init+0x354>)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3301      	adds	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	f67f ae86 	bls.w	8004ac8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	3724      	adds	r7, #36	; 0x24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	40013800 	.word	0x40013800
 8004dd4:	40020000 	.word	0x40020000
 8004dd8:	40020400 	.word	0x40020400
 8004ddc:	40020800 	.word	0x40020800
 8004de0:	40020c00 	.word	0x40020c00
 8004de4:	40021000 	.word	0x40021000
 8004de8:	40021400 	.word	0x40021400
 8004dec:	40021800 	.word	0x40021800
 8004df0:	40021c00 	.word	0x40021c00
 8004df4:	40022000 	.word	0x40022000
 8004df8:	40022400 	.word	0x40022400
 8004dfc:	40013c00 	.word	0x40013c00

08004e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e10:	787b      	ldrb	r3, [r7, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004e1c:	e003      	b.n	8004e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	041a      	lsls	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	619a      	str	r2, [r3, #24]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e291      	b.n	800536e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 8087 	beq.w	8004f66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e58:	4b96      	ldr	r3, [pc, #600]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d00c      	beq.n	8004e7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e64:	4b93      	ldr	r3, [pc, #588]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d112      	bne.n	8004e96 <HAL_RCC_OscConfig+0x62>
 8004e70:	4b90      	ldr	r3, [pc, #576]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7c:	d10b      	bne.n	8004e96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7e:	4b8d      	ldr	r3, [pc, #564]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d06c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x130>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d168      	bne.n	8004f64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e26b      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x7a>
 8004ea0:	4b84      	ldr	r3, [pc, #528]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a83      	ldr	r2, [pc, #524]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	e02e      	b.n	8004f0c <HAL_RCC_OscConfig+0xd8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x9c>
 8004eb6:	4b7f      	ldr	r3, [pc, #508]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a7e      	ldr	r2, [pc, #504]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4b7c      	ldr	r3, [pc, #496]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a7b      	ldr	r2, [pc, #492]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e01d      	b.n	8004f0c <HAL_RCC_OscConfig+0xd8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0xc0>
 8004eda:	4b76      	ldr	r3, [pc, #472]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a75      	ldr	r2, [pc, #468]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4b73      	ldr	r3, [pc, #460]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a72      	ldr	r2, [pc, #456]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e00b      	b.n	8004f0c <HAL_RCC_OscConfig+0xd8>
 8004ef4:	4b6f      	ldr	r3, [pc, #444]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a6e      	ldr	r2, [pc, #440]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b6c      	ldr	r3, [pc, #432]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a6b      	ldr	r2, [pc, #428]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fe fd64 	bl	80039e0 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f1c:	f7fe fd60 	bl	80039e0 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b64      	cmp	r3, #100	; 0x64
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e21f      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0xe8>
 8004f3a:	e014      	b.n	8004f66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fd50 	bl	80039e0 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fe fd4c 	bl	80039e0 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	; 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e20b      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f56:	4b57      	ldr	r3, [pc, #348]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x110>
 8004f62:	e000      	b.n	8004f66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d069      	beq.n	8005046 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f72:	4b50      	ldr	r3, [pc, #320]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7e:	4b4d      	ldr	r3, [pc, #308]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d11c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x190>
 8004f8a:	4b4a      	ldr	r3, [pc, #296]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d116      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f96:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_RCC_OscConfig+0x17a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1df      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fae:	4b41      	ldr	r3, [pc, #260]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	493d      	ldr	r1, [pc, #244]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	e040      	b.n	8005046 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d023      	beq.n	8005014 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fcc:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a38      	ldr	r2, [pc, #224]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fe fd02 	bl	80039e0 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe0:	f7fe fcfe 	bl	80039e0 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e1bd      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffe:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4929      	ldr	r1, [pc, #164]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 800500e:	4313      	orrs	r3, r2
 8005010:	600b      	str	r3, [r1, #0]
 8005012:	e018      	b.n	8005046 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005014:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fe fcde 	bl	80039e0 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005028:	f7fe fcda 	bl	80039e0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e199      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503a:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d038      	beq.n	80050c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d019      	beq.n	800508e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505a:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 800505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005066:	f7fe fcbb 	bl	80039e0 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506e:	f7fe fcb7 	bl	80039e0 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e176      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005080:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8005082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0x23a>
 800508c:	e01a      	b.n	80050c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8005090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005092:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <HAL_RCC_OscConfig+0x280>)
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509a:	f7fe fca1 	bl	80039e0 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a0:	e00a      	b.n	80050b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a2:	f7fe fc9d 	bl	80039e0 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d903      	bls.n	80050b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e15c      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
 80050b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b8:	4b91      	ldr	r3, [pc, #580]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80050ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ee      	bne.n	80050a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80a4 	beq.w	800521a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d2:	4b8b      	ldr	r3, [pc, #556]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10d      	bne.n	80050fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80050de:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	4a87      	ldr	r2, [pc, #540]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ea:	4b85      	ldr	r3, [pc, #532]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f6:	2301      	movs	r3, #1
 80050f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fa:	4b82      	ldr	r3, [pc, #520]	; (8005304 <HAL_RCC_OscConfig+0x4d0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d118      	bne.n	8005138 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005106:	4b7f      	ldr	r3, [pc, #508]	; (8005304 <HAL_RCC_OscConfig+0x4d0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7e      	ldr	r2, [pc, #504]	; (8005304 <HAL_RCC_OscConfig+0x4d0>)
 800510c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005112:	f7fe fc65 	bl	80039e0 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511a:	f7fe fc61 	bl	80039e0 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b64      	cmp	r3, #100	; 0x64
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e120      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800512c:	4b75      	ldr	r3, [pc, #468]	; (8005304 <HAL_RCC_OscConfig+0x4d0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d106      	bne.n	800514e <HAL_RCC_OscConfig+0x31a>
 8005140:	4b6f      	ldr	r3, [pc, #444]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	4a6e      	ldr	r2, [pc, #440]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	6713      	str	r3, [r2, #112]	; 0x70
 800514c:	e02d      	b.n	80051aa <HAL_RCC_OscConfig+0x376>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10c      	bne.n	8005170 <HAL_RCC_OscConfig+0x33c>
 8005156:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	4a69      	ldr	r2, [pc, #420]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	6713      	str	r3, [r2, #112]	; 0x70
 8005162:	4b67      	ldr	r3, [pc, #412]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	4a66      	ldr	r2, [pc, #408]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005168:	f023 0304 	bic.w	r3, r3, #4
 800516c:	6713      	str	r3, [r2, #112]	; 0x70
 800516e:	e01c      	b.n	80051aa <HAL_RCC_OscConfig+0x376>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b05      	cmp	r3, #5
 8005176:	d10c      	bne.n	8005192 <HAL_RCC_OscConfig+0x35e>
 8005178:	4b61      	ldr	r3, [pc, #388]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	4a60      	ldr	r2, [pc, #384]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 800517e:	f043 0304 	orr.w	r3, r3, #4
 8005182:	6713      	str	r3, [r2, #112]	; 0x70
 8005184:	4b5e      	ldr	r3, [pc, #376]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a5d      	ldr	r2, [pc, #372]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
 8005190:	e00b      	b.n	80051aa <HAL_RCC_OscConfig+0x376>
 8005192:	4b5b      	ldr	r3, [pc, #364]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	4a5a      	ldr	r2, [pc, #360]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	6713      	str	r3, [r2, #112]	; 0x70
 800519e:	4b58      	ldr	r3, [pc, #352]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	4a57      	ldr	r2, [pc, #348]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d015      	beq.n	80051de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b2:	f7fe fc15 	bl	80039e0 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b8:	e00a      	b.n	80051d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ba:	f7fe fc11 	bl	80039e0 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e0ce      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	4b4b      	ldr	r3, [pc, #300]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0ee      	beq.n	80051ba <HAL_RCC_OscConfig+0x386>
 80051dc:	e014      	b.n	8005208 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051de:	f7fe fbff 	bl	80039e0 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e4:	e00a      	b.n	80051fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e6:	f7fe fbfb 	bl	80039e0 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e0b8      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fc:	4b40      	ldr	r3, [pc, #256]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1ee      	bne.n	80051e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520e:	4b3c      	ldr	r3, [pc, #240]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a3b      	ldr	r2, [pc, #236]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80a4 	beq.w	800536c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005224:	4b36      	ldr	r3, [pc, #216]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 030c 	and.w	r3, r3, #12
 800522c:	2b08      	cmp	r3, #8
 800522e:	d06b      	beq.n	8005308 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d149      	bne.n	80052cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005238:	4b31      	ldr	r3, [pc, #196]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a30      	ldr	r2, [pc, #192]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fe fbcc 	bl	80039e0 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fe fbc8 	bl	80039e0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e087      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525e:	4b28      	ldr	r3, [pc, #160]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	4313      	orrs	r3, r2
 8005290:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 8005292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005296:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 800529e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fe fb9c 	bl	80039e0 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fe fb98 	bl	80039e0 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e057      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0x478>
 80052ca:	e04f      	b.n	800536c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0b      	ldr	r2, [pc, #44]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80052d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fe fb82 	bl	80039e0 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fe fb7e 	bl	80039e0 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e03d      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	4b03      	ldr	r3, [pc, #12]	; (8005300 <HAL_RCC_OscConfig+0x4cc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4ac>
 80052fe:	e035      	b.n	800536c <HAL_RCC_OscConfig+0x538>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <HAL_RCC_OscConfig+0x544>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d028      	beq.n	8005368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d121      	bne.n	8005368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d11a      	bne.n	8005368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800533e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005340:	4293      	cmp	r3, r2
 8005342:	d111      	bne.n	8005368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	3b01      	subs	r3, #1
 8005352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d107      	bne.n	8005368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800

0800537c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0d0      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b6a      	ldr	r3, [pc, #424]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d910      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b67      	ldr	r3, [pc, #412]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 020f 	bic.w	r2, r3, #15
 80053aa:	4965      	ldr	r1, [pc, #404]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0b8      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a58      	ldr	r2, [pc, #352]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 80053e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f4:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 80053fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	494d      	ldr	r1, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d040      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b47      	ldr	r3, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d115      	bne.n	800545e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b41      	ldr	r3, [pc, #260]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e073      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e06b      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b39      	ldr	r3, [pc, #228]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4936      	ldr	r1, [pc, #216]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005470:	f7fe fab6 	bl	80039e0 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fe fab2 	bl	80039e0 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e053      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2d      	ldr	r3, [pc, #180]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d210      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 020f 	bic.w	r2, r3, #15
 80054b6:	4922      	ldr	r1, [pc, #136]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e032      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4916      	ldr	r1, [pc, #88]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800550e:	f000 f821 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8005512:	4602      	mov	r2, r0
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	490a      	ldr	r1, [pc, #40]	; (8005548 <HAL_RCC_ClockConfig+0x1cc>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1d0>)
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_ClockConfig+0x1d4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fa12 	bl	8003958 <HAL_InitTick>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023c00 	.word	0x40023c00
 8005544:	40023800 	.word	0x40023800
 8005548:	0800c014 	.word	0x0800c014
 800554c:	20000008 	.word	0x20000008
 8005550:	2000000c 	.word	0x2000000c

08005554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b094      	sub	sp, #80	; 0x50
 800555a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	647b      	str	r3, [r7, #68]	; 0x44
 8005560:	2300      	movs	r3, #0
 8005562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005564:	2300      	movs	r3, #0
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556c:	4b79      	ldr	r3, [pc, #484]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	2b08      	cmp	r3, #8
 8005576:	d00d      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0x40>
 8005578:	2b08      	cmp	r3, #8
 800557a:	f200 80e1 	bhi.w	8005740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x34>
 8005582:	2b04      	cmp	r3, #4
 8005584:	d003      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0x3a>
 8005586:	e0db      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005588:	4b73      	ldr	r3, [pc, #460]	; (8005758 <HAL_RCC_GetSysClockFreq+0x204>)
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800558c:	e0db      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800558e:	4b73      	ldr	r3, [pc, #460]	; (800575c <HAL_RCC_GetSysClockFreq+0x208>)
 8005590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005592:	e0d8      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005594:	4b6f      	ldr	r3, [pc, #444]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800559c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800559e:	4b6d      	ldr	r3, [pc, #436]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d063      	beq.n	8005672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055aa:	4b6a      	ldr	r3, [pc, #424]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	099b      	lsrs	r3, r3, #6
 80055b0:	2200      	movs	r2, #0
 80055b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
 80055be:	2300      	movs	r3, #0
 80055c0:	637b      	str	r3, [r7, #52]	; 0x34
 80055c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055c6:	4622      	mov	r2, r4
 80055c8:	462b      	mov	r3, r5
 80055ca:	f04f 0000 	mov.w	r0, #0
 80055ce:	f04f 0100 	mov.w	r1, #0
 80055d2:	0159      	lsls	r1, r3, #5
 80055d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d8:	0150      	lsls	r0, r2, #5
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4621      	mov	r1, r4
 80055e0:	1a51      	subs	r1, r2, r1
 80055e2:	6139      	str	r1, [r7, #16]
 80055e4:	4629      	mov	r1, r5
 80055e6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f8:	4659      	mov	r1, fp
 80055fa:	018b      	lsls	r3, r1, #6
 80055fc:	4651      	mov	r1, sl
 80055fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005602:	4651      	mov	r1, sl
 8005604:	018a      	lsls	r2, r1, #6
 8005606:	4651      	mov	r1, sl
 8005608:	ebb2 0801 	subs.w	r8, r2, r1
 800560c:	4659      	mov	r1, fp
 800560e:	eb63 0901 	sbc.w	r9, r3, r1
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800561e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005626:	4690      	mov	r8, r2
 8005628:	4699      	mov	r9, r3
 800562a:	4623      	mov	r3, r4
 800562c:	eb18 0303 	adds.w	r3, r8, r3
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	462b      	mov	r3, r5
 8005634:	eb49 0303 	adc.w	r3, r9, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005646:	4629      	mov	r1, r5
 8005648:	024b      	lsls	r3, r1, #9
 800564a:	4621      	mov	r1, r4
 800564c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005650:	4621      	mov	r1, r4
 8005652:	024a      	lsls	r2, r1, #9
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565a:	2200      	movs	r2, #0
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
 800565e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005664:	f7fb fac0 	bl	8000be8 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005670:	e058      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005672:	4b38      	ldr	r3, [pc, #224]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	2200      	movs	r2, #0
 800567a:	4618      	mov	r0, r3
 800567c:	4611      	mov	r1, r2
 800567e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	2300      	movs	r3, #0
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
 8005688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	f04f 0000 	mov.w	r0, #0
 8005694:	f04f 0100 	mov.w	r1, #0
 8005698:	0159      	lsls	r1, r3, #5
 800569a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800569e:	0150      	lsls	r0, r2, #5
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4641      	mov	r1, r8
 80056a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80056aa:	4649      	mov	r1, r9
 80056ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056c4:	ebb2 040a 	subs.w	r4, r2, sl
 80056c8:	eb63 050b 	sbc.w	r5, r3, fp
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	00eb      	lsls	r3, r5, #3
 80056d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056da:	00e2      	lsls	r2, r4, #3
 80056dc:	4614      	mov	r4, r2
 80056de:	461d      	mov	r5, r3
 80056e0:	4643      	mov	r3, r8
 80056e2:	18e3      	adds	r3, r4, r3
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	464b      	mov	r3, r9
 80056e8:	eb45 0303 	adc.w	r3, r5, r3
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056fa:	4629      	mov	r1, r5
 80056fc:	028b      	lsls	r3, r1, #10
 80056fe:	4621      	mov	r1, r4
 8005700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005704:	4621      	mov	r1, r4
 8005706:	028a      	lsls	r2, r1, #10
 8005708:	4610      	mov	r0, r2
 800570a:	4619      	mov	r1, r3
 800570c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570e:	2200      	movs	r2, #0
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	61fa      	str	r2, [r7, #28]
 8005714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005718:	f7fb fa66 	bl	8000be8 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4613      	mov	r3, r2
 8005722:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_GetSysClockFreq+0x200>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	3301      	adds	r3, #1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800573e:	e002      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetSysClockFreq+0x204>)
 8005742:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005748:	4618      	mov	r0, r3
 800574a:	3750      	adds	r7, #80	; 0x50
 800574c:	46bd      	mov	sp, r7
 800574e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800
 8005758:	00f42400 	.word	0x00f42400
 800575c:	007a1200 	.word	0x007a1200

08005760 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005764:	4b03      	ldr	r3, [pc, #12]	; (8005774 <HAL_RCC_GetHCLKFreq+0x14>)
 8005766:	681b      	ldr	r3, [r3, #0]
}
 8005768:	4618      	mov	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000008 	.word	0x20000008

08005778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800577c:	f7ff fff0 	bl	8005760 <HAL_RCC_GetHCLKFreq>
 8005780:	4602      	mov	r2, r0
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	0a9b      	lsrs	r3, r3, #10
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	4903      	ldr	r1, [pc, #12]	; (800579c <HAL_RCC_GetPCLK1Freq+0x24>)
 800578e:	5ccb      	ldrb	r3, [r1, r3]
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005794:	4618      	mov	r0, r3
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40023800 	.word	0x40023800
 800579c:	0800c024 	.word	0x0800c024

080057a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057a4:	f7ff ffdc 	bl	8005760 <HAL_RCC_GetHCLKFreq>
 80057a8:	4602      	mov	r2, r0
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	0b5b      	lsrs	r3, r3, #13
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	4903      	ldr	r1, [pc, #12]	; (80057c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057b6:	5ccb      	ldrb	r3, [r1, r3]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40023800 	.word	0x40023800
 80057c4:	0800c024 	.word	0x0800c024

080057c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e049      	b.n	800586e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd ff56 	bl	80036a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fa24 	bl	8005c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	d001      	beq.n	8005890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e054      	b.n	800593a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a26      	ldr	r2, [pc, #152]	; (8005948 <HAL_TIM_Base_Start_IT+0xd0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d022      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x80>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ba:	d01d      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x80>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a22      	ldr	r2, [pc, #136]	; (800594c <HAL_TIM_Base_Start_IT+0xd4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d018      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x80>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a21      	ldr	r2, [pc, #132]	; (8005950 <HAL_TIM_Base_Start_IT+0xd8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x80>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <HAL_TIM_Base_Start_IT+0xdc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00e      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x80>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1e      	ldr	r2, [pc, #120]	; (8005958 <HAL_TIM_Base_Start_IT+0xe0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x80>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1c      	ldr	r2, [pc, #112]	; (800595c <HAL_TIM_Base_Start_IT+0xe4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x80>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <HAL_TIM_Base_Start_IT+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d115      	bne.n	8005924 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	4b19      	ldr	r3, [pc, #100]	; (8005964 <HAL_TIM_Base_Start_IT+0xec>)
 8005900:	4013      	ands	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b06      	cmp	r3, #6
 8005908:	d015      	beq.n	8005936 <HAL_TIM_Base_Start_IT+0xbe>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005910:	d011      	beq.n	8005936 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005922:	e008      	b.n	8005936 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e000      	b.n	8005938 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40010400 	.word	0x40010400
 800595c:	40014000 	.word	0x40014000
 8005960:	40001800 	.word	0x40001800
 8005964:	00010007 	.word	0x00010007

08005968 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a1a      	ldr	r2, [r3, #32]
 8005986:	f241 1311 	movw	r3, #4369	; 0x1111
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10f      	bne.n	80059b0 <HAL_TIM_Base_Stop_IT+0x48>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	f240 4344 	movw	r3, #1092	; 0x444
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_Base_Stop_IT+0x48>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d122      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d11b      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0202 	mvn.w	r2, #2
 80059f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f905 	bl	8005c18 <HAL_TIM_IC_CaptureCallback>
 8005a0e:	e005      	b.n	8005a1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8f7 	bl	8005c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f908 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d122      	bne.n	8005a76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d11b      	bne.n	8005a76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f06f 0204 	mvn.w	r2, #4
 8005a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8db 	bl	8005c18 <HAL_TIM_IC_CaptureCallback>
 8005a62:	e005      	b.n	8005a70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8cd 	bl	8005c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f8de 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d122      	bne.n	8005aca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d11b      	bne.n	8005aca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f06f 0208 	mvn.w	r2, #8
 8005a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2204      	movs	r2, #4
 8005aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f8b1 	bl	8005c18 <HAL_TIM_IC_CaptureCallback>
 8005ab6:	e005      	b.n	8005ac4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8a3 	bl	8005c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8b4 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d122      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d11b      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f06f 0210 	mvn.w	r2, #16
 8005aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2208      	movs	r2, #8
 8005af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f887 	bl	8005c18 <HAL_TIM_IC_CaptureCallback>
 8005b0a:	e005      	b.n	8005b18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f879 	bl	8005c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f88a 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d10e      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d107      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f06f 0201 	mvn.w	r2, #1
 8005b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fd fc77 	bl	8003438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	d10e      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b62:	2b80      	cmp	r3, #128	; 0x80
 8005b64:	d107      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f919 	bl	8005da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b90:	2b80      	cmp	r3, #128	; 0x80
 8005b92:	d107      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f90c 	bl	8005dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b40      	cmp	r3, #64	; 0x40
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d107      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f838 	bl	8005c40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d10e      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d107      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0220 	mvn.w	r2, #32
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f8cc 	bl	8005d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a40      	ldr	r2, [pc, #256]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d00f      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a3d      	ldr	r2, [pc, #244]	; (8005d6c <TIM_Base_SetConfig+0x118>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <TIM_Base_SetConfig+0x11c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3b      	ldr	r2, [pc, #236]	; (8005d74 <TIM_Base_SetConfig+0x120>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3a      	ldr	r2, [pc, #232]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d108      	bne.n	8005ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d02b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb4:	d027      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <TIM_Base_SetConfig+0x118>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d023      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	; (8005d70 <TIM_Base_SetConfig+0x11c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01f      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <TIM_Base_SetConfig+0x120>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a29      	ldr	r2, [pc, #164]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d017      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <TIM_Base_SetConfig+0x128>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a27      	ldr	r2, [pc, #156]	; (8005d80 <TIM_Base_SetConfig+0x12c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <TIM_Base_SetConfig+0x130>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <TIM_Base_SetConfig+0x134>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a24      	ldr	r2, [pc, #144]	; (8005d8c <TIM_Base_SetConfig+0x138>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a23      	ldr	r2, [pc, #140]	; (8005d90 <TIM_Base_SetConfig+0x13c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <TIM_Base_SetConfig+0x114>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_Base_SetConfig+0xf8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <TIM_Base_SetConfig+0x124>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d103      	bne.n	8005d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	615a      	str	r2, [r3, #20]
}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40000c00 	.word	0x40000c00
 8005d78:	40010400 	.word	0x40010400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800
 8005d88:	40001800 	.word	0x40001800
 8005d8c:	40001c00 	.word	0x40001c00
 8005d90:	40002000 	.word	0x40002000

08005d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e040      	b.n	8005e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fd fbd8 	bl	80035a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	; 0x24
 8005dfc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fb96 	bl	8006540 <UART_SetConfig>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e022      	b.n	8005e64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fdee 	bl	8006a08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fe75 	bl	8006b4c <UART_CheckIdleState>
 8005e62:	4603      	mov	r3, r0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	f040 8081 	bne.w	8005f88 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_UART_Transmit+0x26>
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e079      	b.n	8005f8a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UART_Transmit+0x38>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e072      	b.n	8005f8a <HAL_UART_Transmit+0x11e>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2221      	movs	r2, #33	; 0x21
 8005eb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eba:	f7fd fd91 	bl	80039e0 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d108      	bne.n	8005eec <HAL_UART_Transmit+0x80>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e003      	b.n	8005ef4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005efc:	e02c      	b.n	8005f58 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	; 0x80
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fe52 	bl	8006bb2 <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e038      	b.n	8005f8a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	3302      	adds	r3, #2
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e007      	b.n	8005f46 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1cc      	bne.n	8005efe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2140      	movs	r1, #64	; 0x40
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fe1f 	bl	8006bb2 <UART_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e005      	b.n	8005f8a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e000      	b.n	8005f8a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
  }
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b0ba      	sub	sp, #232	; 0xe8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005fbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d115      	bne.n	8005ffc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 828f 	beq.w	8006510 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
      }
      return;
 8005ffa:	e289      	b.n	8006510 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ffc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8117 	beq.w	8006234 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006012:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006016:	4b85      	ldr	r3, [pc, #532]	; (800622c <HAL_UART_IRQHandler+0x298>)
 8006018:	4013      	ands	r3, r2
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 810a 	beq.w	8006234 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d011      	beq.n	8006050 <HAL_UART_IRQHandler+0xbc>
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00b      	beq.n	8006050 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2201      	movs	r2, #1
 800603e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006046:	f043 0201 	orr.w	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d011      	beq.n	8006080 <HAL_UART_IRQHandler+0xec>
 800605c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00b      	beq.n	8006080 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2202      	movs	r2, #2
 800606e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006076:	f043 0204 	orr.w	r2, r3, #4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d011      	beq.n	80060b0 <HAL_UART_IRQHandler+0x11c>
 800608c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2204      	movs	r2, #4
 800609e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a6:	f043 0202 	orr.w	r2, r3, #2
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d017      	beq.n	80060ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d105      	bne.n	80060d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2208      	movs	r2, #8
 80060da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e2:	f043 0208 	orr.w	r2, r3, #8
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d012      	beq.n	800611e <HAL_UART_IRQHandler+0x18a>
 80060f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800610c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 81f5 	beq.w	8006514 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00d      	beq.n	8006152 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006158:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d005      	beq.n	8006176 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800616a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800616e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006172:	2b00      	cmp	r3, #0
 8006174:	d04f      	beq.n	8006216 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fddf 	bl	8006d3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d141      	bne.n	800620e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1d9      	bne.n	800618a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d013      	beq.n	8006206 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	4a13      	ldr	r2, [pc, #76]	; (8006230 <HAL_UART_IRQHandler+0x29c>)
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fc39 	bl	8004a62 <HAL_DMA_Abort_IT>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d017      	beq.n	8006226 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006200:	4610      	mov	r0, r2
 8006202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	e00f      	b.n	8006226 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fd f832 	bl	8003270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620c:	e00b      	b.n	8006226 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fd f82e 	bl	8003270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006214:	e007      	b.n	8006226 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fd f82a 	bl	8003270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006224:	e176      	b.n	8006514 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006226:	bf00      	nop
    return;
 8006228:	e174      	b.n	8006514 <HAL_UART_IRQHandler+0x580>
 800622a:	bf00      	nop
 800622c:	04000120 	.word	0x04000120
 8006230:	08006e01 	.word	0x08006e01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006238:	2b01      	cmp	r3, #1
 800623a:	f040 8144 	bne.w	80064c6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 813d 	beq.w	80064c6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800624c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8136 	beq.w	80064c6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2210      	movs	r2, #16
 8006260:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	f040 80b2 	bne.w	80063d6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800627e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8148 	beq.w	8006518 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800628e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006292:	429a      	cmp	r2, r3
 8006294:	f080 8140 	bcs.w	8006518 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800629e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ac:	f000 8085 	beq.w	80063ba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1da      	bne.n	80062b0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3308      	adds	r3, #8
 8006300:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800630a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800630c:	f023 0301 	bic.w	r3, r3, #1
 8006310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800631e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006322:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006326:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e1      	bne.n	80062fa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3308      	adds	r3, #8
 800633c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800635a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800635c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006360:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e3      	bne.n	8006336 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638a:	f023 0310 	bic.w	r3, r3, #16
 800638e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800639c:	65bb      	str	r3, [r7, #88]	; 0x58
 800639e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e4      	bne.n	800637a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe fae4 	bl	8004982 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f8aa 	bl	8006528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063d4:	e0a0      	b.n	8006518 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 8092 	beq.w	800651c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80063f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 808d 	beq.w	800651c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
 8006426:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800642a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e4      	bne.n	8006402 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	623b      	str	r3, [r7, #32]
   return(result);
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3308      	adds	r3, #8
 8006458:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800645c:	633a      	str	r2, [r7, #48]	; 0x30
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e3      	bne.n	8006438 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0310 	bic.w	r3, r3, #16
 8006496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	69b9      	ldr	r1, [r7, #24]
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	617b      	str	r3, [r7, #20]
   return(result);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e4      	bne.n	8006482 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f832 	bl	8006528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064c4:	e02a      	b.n	800651c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01c      	beq.n	8006520 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
    }
    return;
 80064ee:	e017      	b.n	8006520 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d012      	beq.n	8006522 <HAL_UART_IRQHandler+0x58e>
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00c      	beq.n	8006522 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fc8f 	bl	8006e2c <UART_EndTransmit_IT>
    return;
 800650e:	e008      	b.n	8006522 <HAL_UART_IRQHandler+0x58e>
      return;
 8006510:	bf00      	nop
 8006512:	e006      	b.n	8006522 <HAL_UART_IRQHandler+0x58e>
    return;
 8006514:	bf00      	nop
 8006516:	e004      	b.n	8006522 <HAL_UART_IRQHandler+0x58e>
      return;
 8006518:	bf00      	nop
 800651a:	e002      	b.n	8006522 <HAL_UART_IRQHandler+0x58e>
      return;
 800651c:	bf00      	nop
 800651e:	e000      	b.n	8006522 <HAL_UART_IRQHandler+0x58e>
    return;
 8006520:	bf00      	nop
  }

}
 8006522:	37e8      	adds	r7, #232	; 0xe8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4ba6      	ldr	r3, [pc, #664]	; (8006804 <UART_SetConfig+0x2c4>)
 800656c:	4013      	ands	r3, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	6979      	ldr	r1, [r7, #20]
 8006574:	430b      	orrs	r3, r1
 8006576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a94      	ldr	r2, [pc, #592]	; (8006808 <UART_SetConfig+0x2c8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d120      	bne.n	80065fe <UART_SetConfig+0xbe>
 80065bc:	4b93      	ldr	r3, [pc, #588]	; (800680c <UART_SetConfig+0x2cc>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d816      	bhi.n	80065f8 <UART_SetConfig+0xb8>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <UART_SetConfig+0x90>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065e1 	.word	0x080065e1
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065e7 	.word	0x080065e7
 80065dc:	080065f3 	.word	0x080065f3
 80065e0:	2301      	movs	r3, #1
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e150      	b.n	8006888 <UART_SetConfig+0x348>
 80065e6:	2302      	movs	r3, #2
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e14d      	b.n	8006888 <UART_SetConfig+0x348>
 80065ec:	2304      	movs	r3, #4
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e14a      	b.n	8006888 <UART_SetConfig+0x348>
 80065f2:	2308      	movs	r3, #8
 80065f4:	77fb      	strb	r3, [r7, #31]
 80065f6:	e147      	b.n	8006888 <UART_SetConfig+0x348>
 80065f8:	2310      	movs	r3, #16
 80065fa:	77fb      	strb	r3, [r7, #31]
 80065fc:	e144      	b.n	8006888 <UART_SetConfig+0x348>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a83      	ldr	r2, [pc, #524]	; (8006810 <UART_SetConfig+0x2d0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d132      	bne.n	800666e <UART_SetConfig+0x12e>
 8006608:	4b80      	ldr	r3, [pc, #512]	; (800680c <UART_SetConfig+0x2cc>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	2b0c      	cmp	r3, #12
 8006614:	d828      	bhi.n	8006668 <UART_SetConfig+0x128>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0xdc>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006651 	.word	0x08006651
 8006620:	08006669 	.word	0x08006669
 8006624:	08006669 	.word	0x08006669
 8006628:	08006669 	.word	0x08006669
 800662c:	0800665d 	.word	0x0800665d
 8006630:	08006669 	.word	0x08006669
 8006634:	08006669 	.word	0x08006669
 8006638:	08006669 	.word	0x08006669
 800663c:	08006657 	.word	0x08006657
 8006640:	08006669 	.word	0x08006669
 8006644:	08006669 	.word	0x08006669
 8006648:	08006669 	.word	0x08006669
 800664c:	08006663 	.word	0x08006663
 8006650:	2300      	movs	r3, #0
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e118      	b.n	8006888 <UART_SetConfig+0x348>
 8006656:	2302      	movs	r3, #2
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e115      	b.n	8006888 <UART_SetConfig+0x348>
 800665c:	2304      	movs	r3, #4
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e112      	b.n	8006888 <UART_SetConfig+0x348>
 8006662:	2308      	movs	r3, #8
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e10f      	b.n	8006888 <UART_SetConfig+0x348>
 8006668:	2310      	movs	r3, #16
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e10c      	b.n	8006888 <UART_SetConfig+0x348>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a68      	ldr	r2, [pc, #416]	; (8006814 <UART_SetConfig+0x2d4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d120      	bne.n	80066ba <UART_SetConfig+0x17a>
 8006678:	4b64      	ldr	r3, [pc, #400]	; (800680c <UART_SetConfig+0x2cc>)
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006682:	2b30      	cmp	r3, #48	; 0x30
 8006684:	d013      	beq.n	80066ae <UART_SetConfig+0x16e>
 8006686:	2b30      	cmp	r3, #48	; 0x30
 8006688:	d814      	bhi.n	80066b4 <UART_SetConfig+0x174>
 800668a:	2b20      	cmp	r3, #32
 800668c:	d009      	beq.n	80066a2 <UART_SetConfig+0x162>
 800668e:	2b20      	cmp	r3, #32
 8006690:	d810      	bhi.n	80066b4 <UART_SetConfig+0x174>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <UART_SetConfig+0x15c>
 8006696:	2b10      	cmp	r3, #16
 8006698:	d006      	beq.n	80066a8 <UART_SetConfig+0x168>
 800669a:	e00b      	b.n	80066b4 <UART_SetConfig+0x174>
 800669c:	2300      	movs	r3, #0
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e0f2      	b.n	8006888 <UART_SetConfig+0x348>
 80066a2:	2302      	movs	r3, #2
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e0ef      	b.n	8006888 <UART_SetConfig+0x348>
 80066a8:	2304      	movs	r3, #4
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	e0ec      	b.n	8006888 <UART_SetConfig+0x348>
 80066ae:	2308      	movs	r3, #8
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e0e9      	b.n	8006888 <UART_SetConfig+0x348>
 80066b4:	2310      	movs	r3, #16
 80066b6:	77fb      	strb	r3, [r7, #31]
 80066b8:	e0e6      	b.n	8006888 <UART_SetConfig+0x348>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a56      	ldr	r2, [pc, #344]	; (8006818 <UART_SetConfig+0x2d8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d120      	bne.n	8006706 <UART_SetConfig+0x1c6>
 80066c4:	4b51      	ldr	r3, [pc, #324]	; (800680c <UART_SetConfig+0x2cc>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066ce:	2bc0      	cmp	r3, #192	; 0xc0
 80066d0:	d013      	beq.n	80066fa <UART_SetConfig+0x1ba>
 80066d2:	2bc0      	cmp	r3, #192	; 0xc0
 80066d4:	d814      	bhi.n	8006700 <UART_SetConfig+0x1c0>
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d009      	beq.n	80066ee <UART_SetConfig+0x1ae>
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d810      	bhi.n	8006700 <UART_SetConfig+0x1c0>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <UART_SetConfig+0x1a8>
 80066e2:	2b40      	cmp	r3, #64	; 0x40
 80066e4:	d006      	beq.n	80066f4 <UART_SetConfig+0x1b4>
 80066e6:	e00b      	b.n	8006700 <UART_SetConfig+0x1c0>
 80066e8:	2300      	movs	r3, #0
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e0cc      	b.n	8006888 <UART_SetConfig+0x348>
 80066ee:	2302      	movs	r3, #2
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e0c9      	b.n	8006888 <UART_SetConfig+0x348>
 80066f4:	2304      	movs	r3, #4
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e0c6      	b.n	8006888 <UART_SetConfig+0x348>
 80066fa:	2308      	movs	r3, #8
 80066fc:	77fb      	strb	r3, [r7, #31]
 80066fe:	e0c3      	b.n	8006888 <UART_SetConfig+0x348>
 8006700:	2310      	movs	r3, #16
 8006702:	77fb      	strb	r3, [r7, #31]
 8006704:	e0c0      	b.n	8006888 <UART_SetConfig+0x348>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a44      	ldr	r2, [pc, #272]	; (800681c <UART_SetConfig+0x2dc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d125      	bne.n	800675c <UART_SetConfig+0x21c>
 8006710:	4b3e      	ldr	r3, [pc, #248]	; (800680c <UART_SetConfig+0x2cc>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800671e:	d017      	beq.n	8006750 <UART_SetConfig+0x210>
 8006720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006724:	d817      	bhi.n	8006756 <UART_SetConfig+0x216>
 8006726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672a:	d00b      	beq.n	8006744 <UART_SetConfig+0x204>
 800672c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006730:	d811      	bhi.n	8006756 <UART_SetConfig+0x216>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <UART_SetConfig+0x1fe>
 8006736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673a:	d006      	beq.n	800674a <UART_SetConfig+0x20a>
 800673c:	e00b      	b.n	8006756 <UART_SetConfig+0x216>
 800673e:	2300      	movs	r3, #0
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e0a1      	b.n	8006888 <UART_SetConfig+0x348>
 8006744:	2302      	movs	r3, #2
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e09e      	b.n	8006888 <UART_SetConfig+0x348>
 800674a:	2304      	movs	r3, #4
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e09b      	b.n	8006888 <UART_SetConfig+0x348>
 8006750:	2308      	movs	r3, #8
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e098      	b.n	8006888 <UART_SetConfig+0x348>
 8006756:	2310      	movs	r3, #16
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e095      	b.n	8006888 <UART_SetConfig+0x348>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <UART_SetConfig+0x2e0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d125      	bne.n	80067b2 <UART_SetConfig+0x272>
 8006766:	4b29      	ldr	r3, [pc, #164]	; (800680c <UART_SetConfig+0x2cc>)
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006774:	d017      	beq.n	80067a6 <UART_SetConfig+0x266>
 8006776:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800677a:	d817      	bhi.n	80067ac <UART_SetConfig+0x26c>
 800677c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006780:	d00b      	beq.n	800679a <UART_SetConfig+0x25a>
 8006782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006786:	d811      	bhi.n	80067ac <UART_SetConfig+0x26c>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <UART_SetConfig+0x254>
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006790:	d006      	beq.n	80067a0 <UART_SetConfig+0x260>
 8006792:	e00b      	b.n	80067ac <UART_SetConfig+0x26c>
 8006794:	2301      	movs	r3, #1
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e076      	b.n	8006888 <UART_SetConfig+0x348>
 800679a:	2302      	movs	r3, #2
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e073      	b.n	8006888 <UART_SetConfig+0x348>
 80067a0:	2304      	movs	r3, #4
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e070      	b.n	8006888 <UART_SetConfig+0x348>
 80067a6:	2308      	movs	r3, #8
 80067a8:	77fb      	strb	r3, [r7, #31]
 80067aa:	e06d      	b.n	8006888 <UART_SetConfig+0x348>
 80067ac:	2310      	movs	r3, #16
 80067ae:	77fb      	strb	r3, [r7, #31]
 80067b0:	e06a      	b.n	8006888 <UART_SetConfig+0x348>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1b      	ldr	r2, [pc, #108]	; (8006824 <UART_SetConfig+0x2e4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d138      	bne.n	800682e <UART_SetConfig+0x2ee>
 80067bc:	4b13      	ldr	r3, [pc, #76]	; (800680c <UART_SetConfig+0x2cc>)
 80067be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067ca:	d017      	beq.n	80067fc <UART_SetConfig+0x2bc>
 80067cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067d0:	d82a      	bhi.n	8006828 <UART_SetConfig+0x2e8>
 80067d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d6:	d00b      	beq.n	80067f0 <UART_SetConfig+0x2b0>
 80067d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067dc:	d824      	bhi.n	8006828 <UART_SetConfig+0x2e8>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <UART_SetConfig+0x2aa>
 80067e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e6:	d006      	beq.n	80067f6 <UART_SetConfig+0x2b6>
 80067e8:	e01e      	b.n	8006828 <UART_SetConfig+0x2e8>
 80067ea:	2300      	movs	r3, #0
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	e04b      	b.n	8006888 <UART_SetConfig+0x348>
 80067f0:	2302      	movs	r3, #2
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	e048      	b.n	8006888 <UART_SetConfig+0x348>
 80067f6:	2304      	movs	r3, #4
 80067f8:	77fb      	strb	r3, [r7, #31]
 80067fa:	e045      	b.n	8006888 <UART_SetConfig+0x348>
 80067fc:	2308      	movs	r3, #8
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e042      	b.n	8006888 <UART_SetConfig+0x348>
 8006802:	bf00      	nop
 8006804:	efff69f3 	.word	0xefff69f3
 8006808:	40011000 	.word	0x40011000
 800680c:	40023800 	.word	0x40023800
 8006810:	40004400 	.word	0x40004400
 8006814:	40004800 	.word	0x40004800
 8006818:	40004c00 	.word	0x40004c00
 800681c:	40005000 	.word	0x40005000
 8006820:	40011400 	.word	0x40011400
 8006824:	40007800 	.word	0x40007800
 8006828:	2310      	movs	r3, #16
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e02c      	b.n	8006888 <UART_SetConfig+0x348>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a72      	ldr	r2, [pc, #456]	; (80069fc <UART_SetConfig+0x4bc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d125      	bne.n	8006884 <UART_SetConfig+0x344>
 8006838:	4b71      	ldr	r3, [pc, #452]	; (8006a00 <UART_SetConfig+0x4c0>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006842:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006846:	d017      	beq.n	8006878 <UART_SetConfig+0x338>
 8006848:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800684c:	d817      	bhi.n	800687e <UART_SetConfig+0x33e>
 800684e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006852:	d00b      	beq.n	800686c <UART_SetConfig+0x32c>
 8006854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006858:	d811      	bhi.n	800687e <UART_SetConfig+0x33e>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <UART_SetConfig+0x326>
 800685e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006862:	d006      	beq.n	8006872 <UART_SetConfig+0x332>
 8006864:	e00b      	b.n	800687e <UART_SetConfig+0x33e>
 8006866:	2300      	movs	r3, #0
 8006868:	77fb      	strb	r3, [r7, #31]
 800686a:	e00d      	b.n	8006888 <UART_SetConfig+0x348>
 800686c:	2302      	movs	r3, #2
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e00a      	b.n	8006888 <UART_SetConfig+0x348>
 8006872:	2304      	movs	r3, #4
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e007      	b.n	8006888 <UART_SetConfig+0x348>
 8006878:	2308      	movs	r3, #8
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e004      	b.n	8006888 <UART_SetConfig+0x348>
 800687e:	2310      	movs	r3, #16
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e001      	b.n	8006888 <UART_SetConfig+0x348>
 8006884:	2310      	movs	r3, #16
 8006886:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006890:	d15b      	bne.n	800694a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006892:	7ffb      	ldrb	r3, [r7, #31]
 8006894:	2b08      	cmp	r3, #8
 8006896:	d828      	bhi.n	80068ea <UART_SetConfig+0x3aa>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <UART_SetConfig+0x360>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	080068cd 	.word	0x080068cd
 80068a8:	080068d5 	.word	0x080068d5
 80068ac:	080068eb 	.word	0x080068eb
 80068b0:	080068db 	.word	0x080068db
 80068b4:	080068eb 	.word	0x080068eb
 80068b8:	080068eb 	.word	0x080068eb
 80068bc:	080068eb 	.word	0x080068eb
 80068c0:	080068e3 	.word	0x080068e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c4:	f7fe ff58 	bl	8005778 <HAL_RCC_GetPCLK1Freq>
 80068c8:	61b8      	str	r0, [r7, #24]
        break;
 80068ca:	e013      	b.n	80068f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068cc:	f7fe ff68 	bl	80057a0 <HAL_RCC_GetPCLK2Freq>
 80068d0:	61b8      	str	r0, [r7, #24]
        break;
 80068d2:	e00f      	b.n	80068f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d4:	4b4b      	ldr	r3, [pc, #300]	; (8006a04 <UART_SetConfig+0x4c4>)
 80068d6:	61bb      	str	r3, [r7, #24]
        break;
 80068d8:	e00c      	b.n	80068f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068da:	f7fe fe3b 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 80068de:	61b8      	str	r0, [r7, #24]
        break;
 80068e0:	e008      	b.n	80068f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e6:	61bb      	str	r3, [r7, #24]
        break;
 80068e8:	e004      	b.n	80068f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	77bb      	strb	r3, [r7, #30]
        break;
 80068f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d074      	beq.n	80069e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	005a      	lsls	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	441a      	add	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	fbb2 f3f3 	udiv	r3, r2, r3
 800690e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b0f      	cmp	r3, #15
 8006914:	d916      	bls.n	8006944 <UART_SetConfig+0x404>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691c:	d212      	bcs.n	8006944 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f023 030f 	bic.w	r3, r3, #15
 8006926:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	b29b      	uxth	r3, r3
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	b29a      	uxth	r2, r3
 8006934:	89fb      	ldrh	r3, [r7, #14]
 8006936:	4313      	orrs	r3, r2
 8006938:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	89fa      	ldrh	r2, [r7, #14]
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	e04f      	b.n	80069e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	77bb      	strb	r3, [r7, #30]
 8006948:	e04c      	b.n	80069e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800694a:	7ffb      	ldrb	r3, [r7, #31]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d828      	bhi.n	80069a2 <UART_SetConfig+0x462>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x418>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006985 	.word	0x08006985
 8006960:	0800698d 	.word	0x0800698d
 8006964:	080069a3 	.word	0x080069a3
 8006968:	08006993 	.word	0x08006993
 800696c:	080069a3 	.word	0x080069a3
 8006970:	080069a3 	.word	0x080069a3
 8006974:	080069a3 	.word	0x080069a3
 8006978:	0800699b 	.word	0x0800699b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800697c:	f7fe fefc 	bl	8005778 <HAL_RCC_GetPCLK1Freq>
 8006980:	61b8      	str	r0, [r7, #24]
        break;
 8006982:	e013      	b.n	80069ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006984:	f7fe ff0c 	bl	80057a0 <HAL_RCC_GetPCLK2Freq>
 8006988:	61b8      	str	r0, [r7, #24]
        break;
 800698a:	e00f      	b.n	80069ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800698c:	4b1d      	ldr	r3, [pc, #116]	; (8006a04 <UART_SetConfig+0x4c4>)
 800698e:	61bb      	str	r3, [r7, #24]
        break;
 8006990:	e00c      	b.n	80069ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006992:	f7fe fddf 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8006996:	61b8      	str	r0, [r7, #24]
        break;
 8006998:	e008      	b.n	80069ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800699e:	61bb      	str	r3, [r7, #24]
        break;
 80069a0:	e004      	b.n	80069ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	77bb      	strb	r3, [r7, #30]
        break;
 80069aa:	bf00      	nop
    }

    if (pclk != 0U)
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d018      	beq.n	80069e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	085a      	lsrs	r2, r3, #1
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	441a      	add	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b0f      	cmp	r3, #15
 80069ca:	d909      	bls.n	80069e0 <UART_SetConfig+0x4a0>
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d2:	d205      	bcs.n	80069e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60da      	str	r2, [r3, #12]
 80069de:	e001      	b.n	80069e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	40007c00 	.word	0x40007c00
 8006a00:	40023800 	.word	0x40023800
 8006a04:	00f42400 	.word	0x00f42400

08006a08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b06:	d10a      	bne.n	8006b1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b5c:	f7fc ff40 	bl	80039e0 <HAL_GetTick>
 8006b60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d10e      	bne.n	8006b8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f817 	bl	8006bb2 <UART_WaitOnFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e00d      	b.n	8006baa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b09c      	sub	sp, #112	; 0x70
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc2:	e0a5      	b.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	f000 80a1 	beq.w	8006d10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bce:	f7fc ff07 	bl	80039e0 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d13e      	bne.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bf8:	667b      	str	r3, [r7, #100]	; 0x64
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3308      	adds	r3, #8
 8006c34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c36:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e5      	bne.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2220      	movs	r2, #32
 8006c54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e067      	b.n	8006d32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d04f      	beq.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7e:	d147      	bne.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8006caa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e6      	bne.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cdc:	623a      	str	r2, [r7, #32]
 8006cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	69f9      	ldr	r1, [r7, #28]
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e5      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e010      	b.n	8006d32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69da      	ldr	r2, [r3, #28]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	f43f af4a 	beq.w	8006bc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3770      	adds	r7, #112	; 0x70
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b095      	sub	sp, #84	; 0x54
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d60:	643b      	str	r3, [r7, #64]	; 0x40
 8006d62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e6      	bne.n	8006d42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f023 0301 	bic.w	r3, r3, #1
 8006d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e5      	bne.n	8006d74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d118      	bne.n	8006de2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f023 0310 	bic.w	r3, r3, #16
 8006dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6979      	ldr	r1, [r7, #20]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	613b      	str	r3, [r7, #16]
   return(result);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e6      	bne.n	8006db0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006df4:	bf00      	nop
 8006df6:	3754      	adds	r7, #84	; 0x54
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7fc fa26 	bl	8003270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6979      	ldr	r1, [r7, #20]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fc f9e8 	bl	8003248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e78:	bf00      	nop
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <__errno>:
 8006e80:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <__errno+0x8>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000014 	.word	0x20000014

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1b64      	subs	r4, r4, r5
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2600      	movs	r6, #0
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4d0b      	ldr	r5, [pc, #44]	; (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f002 ff92 	bl	8009dc8 <_init>
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	0800c40c 	.word	0x0800c40c
 8006ec8:	0800c40c 	.word	0x0800c40c
 8006ecc:	0800c40c 	.word	0x0800c40c
 8006ed0:	0800c410 	.word	0x0800c410

08006ed4 <memset>:
 8006ed4:	4402      	add	r2, r0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d100      	bne.n	8006ede <memset+0xa>
 8006edc:	4770      	bx	lr
 8006ede:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee2:	e7f9      	b.n	8006ed8 <memset+0x4>

08006ee4 <__cvt>:
 8006ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	ec55 4b10 	vmov	r4, r5, d0
 8006eec:	2d00      	cmp	r5, #0
 8006eee:	460e      	mov	r6, r1
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	462b      	mov	r3, r5
 8006ef4:	bfbb      	ittet	lt
 8006ef6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006efa:	461d      	movlt	r5, r3
 8006efc:	2300      	movge	r3, #0
 8006efe:	232d      	movlt	r3, #45	; 0x2d
 8006f00:	700b      	strb	r3, [r1, #0]
 8006f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f08:	4691      	mov	r9, r2
 8006f0a:	f023 0820 	bic.w	r8, r3, #32
 8006f0e:	bfbc      	itt	lt
 8006f10:	4622      	movlt	r2, r4
 8006f12:	4614      	movlt	r4, r2
 8006f14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f18:	d005      	beq.n	8006f26 <__cvt+0x42>
 8006f1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f1e:	d100      	bne.n	8006f22 <__cvt+0x3e>
 8006f20:	3601      	adds	r6, #1
 8006f22:	2102      	movs	r1, #2
 8006f24:	e000      	b.n	8006f28 <__cvt+0x44>
 8006f26:	2103      	movs	r1, #3
 8006f28:	ab03      	add	r3, sp, #12
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	ab02      	add	r3, sp, #8
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	ec45 4b10 	vmov	d0, r4, r5
 8006f34:	4653      	mov	r3, sl
 8006f36:	4632      	mov	r2, r6
 8006f38:	f000 fe3a 	bl	8007bb0 <_dtoa_r>
 8006f3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f40:	4607      	mov	r7, r0
 8006f42:	d102      	bne.n	8006f4a <__cvt+0x66>
 8006f44:	f019 0f01 	tst.w	r9, #1
 8006f48:	d022      	beq.n	8006f90 <__cvt+0xac>
 8006f4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f4e:	eb07 0906 	add.w	r9, r7, r6
 8006f52:	d110      	bne.n	8006f76 <__cvt+0x92>
 8006f54:	783b      	ldrb	r3, [r7, #0]
 8006f56:	2b30      	cmp	r3, #48	; 0x30
 8006f58:	d10a      	bne.n	8006f70 <__cvt+0x8c>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 8006f66:	b918      	cbnz	r0, 8006f70 <__cvt+0x8c>
 8006f68:	f1c6 0601 	rsb	r6, r6, #1
 8006f6c:	f8ca 6000 	str.w	r6, [sl]
 8006f70:	f8da 3000 	ldr.w	r3, [sl]
 8006f74:	4499      	add	r9, r3
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 fdc3 	bl	8000b08 <__aeabi_dcmpeq>
 8006f82:	b108      	cbz	r0, 8006f88 <__cvt+0xa4>
 8006f84:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f88:	2230      	movs	r2, #48	; 0x30
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	454b      	cmp	r3, r9
 8006f8e:	d307      	bcc.n	8006fa0 <__cvt+0xbc>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f94:	1bdb      	subs	r3, r3, r7
 8006f96:	4638      	mov	r0, r7
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	b004      	add	sp, #16
 8006f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa0:	1c59      	adds	r1, r3, #1
 8006fa2:	9103      	str	r1, [sp, #12]
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	e7f0      	b.n	8006f8a <__cvt+0xa6>

08006fa8 <__exponent>:
 8006fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006faa:	4603      	mov	r3, r0
 8006fac:	2900      	cmp	r1, #0
 8006fae:	bfb8      	it	lt
 8006fb0:	4249      	neglt	r1, r1
 8006fb2:	f803 2b02 	strb.w	r2, [r3], #2
 8006fb6:	bfb4      	ite	lt
 8006fb8:	222d      	movlt	r2, #45	; 0x2d
 8006fba:	222b      	movge	r2, #43	; 0x2b
 8006fbc:	2909      	cmp	r1, #9
 8006fbe:	7042      	strb	r2, [r0, #1]
 8006fc0:	dd2a      	ble.n	8007018 <__exponent+0x70>
 8006fc2:	f10d 0407 	add.w	r4, sp, #7
 8006fc6:	46a4      	mov	ip, r4
 8006fc8:	270a      	movs	r7, #10
 8006fca:	46a6      	mov	lr, r4
 8006fcc:	460a      	mov	r2, r1
 8006fce:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fd2:	fb07 1516 	mls	r5, r7, r6, r1
 8006fd6:	3530      	adds	r5, #48	; 0x30
 8006fd8:	2a63      	cmp	r2, #99	; 0x63
 8006fda:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	dcf1      	bgt.n	8006fca <__exponent+0x22>
 8006fe6:	3130      	adds	r1, #48	; 0x30
 8006fe8:	f1ae 0502 	sub.w	r5, lr, #2
 8006fec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ff0:	1c44      	adds	r4, r0, #1
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4561      	cmp	r1, ip
 8006ff6:	d30a      	bcc.n	800700e <__exponent+0x66>
 8006ff8:	f10d 0209 	add.w	r2, sp, #9
 8006ffc:	eba2 020e 	sub.w	r2, r2, lr
 8007000:	4565      	cmp	r5, ip
 8007002:	bf88      	it	hi
 8007004:	2200      	movhi	r2, #0
 8007006:	4413      	add	r3, r2
 8007008:	1a18      	subs	r0, r3, r0
 800700a:	b003      	add	sp, #12
 800700c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800700e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007012:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007016:	e7ed      	b.n	8006ff4 <__exponent+0x4c>
 8007018:	2330      	movs	r3, #48	; 0x30
 800701a:	3130      	adds	r1, #48	; 0x30
 800701c:	7083      	strb	r3, [r0, #2]
 800701e:	70c1      	strb	r1, [r0, #3]
 8007020:	1d03      	adds	r3, r0, #4
 8007022:	e7f1      	b.n	8007008 <__exponent+0x60>

08007024 <_printf_float>:
 8007024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	ed2d 8b02 	vpush	{d8}
 800702c:	b08d      	sub	sp, #52	; 0x34
 800702e:	460c      	mov	r4, r1
 8007030:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007034:	4616      	mov	r6, r2
 8007036:	461f      	mov	r7, r3
 8007038:	4605      	mov	r5, r0
 800703a:	f001 fd5f 	bl	8008afc <_localeconv_r>
 800703e:	f8d0 a000 	ldr.w	sl, [r0]
 8007042:	4650      	mov	r0, sl
 8007044:	f7f9 f8e4 	bl	8000210 <strlen>
 8007048:	2300      	movs	r3, #0
 800704a:	930a      	str	r3, [sp, #40]	; 0x28
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	9305      	str	r3, [sp, #20]
 8007050:	f8d8 3000 	ldr.w	r3, [r8]
 8007054:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007058:	3307      	adds	r3, #7
 800705a:	f023 0307 	bic.w	r3, r3, #7
 800705e:	f103 0208 	add.w	r2, r3, #8
 8007062:	f8c8 2000 	str.w	r2, [r8]
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800706e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007076:	9307      	str	r3, [sp, #28]
 8007078:	f8cd 8018 	str.w	r8, [sp, #24]
 800707c:	ee08 0a10 	vmov	s16, r0
 8007080:	4b9f      	ldr	r3, [pc, #636]	; (8007300 <_printf_float+0x2dc>)
 8007082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007086:	f04f 32ff 	mov.w	r2, #4294967295
 800708a:	f7f9 fd6f 	bl	8000b6c <__aeabi_dcmpun>
 800708e:	bb88      	cbnz	r0, 80070f4 <_printf_float+0xd0>
 8007090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007094:	4b9a      	ldr	r3, [pc, #616]	; (8007300 <_printf_float+0x2dc>)
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	f7f9 fd49 	bl	8000b30 <__aeabi_dcmple>
 800709e:	bb48      	cbnz	r0, 80070f4 <_printf_float+0xd0>
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 fd38 	bl	8000b1c <__aeabi_dcmplt>
 80070ac:	b110      	cbz	r0, 80070b4 <_printf_float+0x90>
 80070ae:	232d      	movs	r3, #45	; 0x2d
 80070b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b4:	4b93      	ldr	r3, [pc, #588]	; (8007304 <_printf_float+0x2e0>)
 80070b6:	4894      	ldr	r0, [pc, #592]	; (8007308 <_printf_float+0x2e4>)
 80070b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070bc:	bf94      	ite	ls
 80070be:	4698      	movls	r8, r3
 80070c0:	4680      	movhi	r8, r0
 80070c2:	2303      	movs	r3, #3
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	9b05      	ldr	r3, [sp, #20]
 80070c8:	f023 0204 	bic.w	r2, r3, #4
 80070cc:	6022      	str	r2, [r4, #0]
 80070ce:	f04f 0900 	mov.w	r9, #0
 80070d2:	9700      	str	r7, [sp, #0]
 80070d4:	4633      	mov	r3, r6
 80070d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80070d8:	4621      	mov	r1, r4
 80070da:	4628      	mov	r0, r5
 80070dc:	f000 f9d8 	bl	8007490 <_printf_common>
 80070e0:	3001      	adds	r0, #1
 80070e2:	f040 8090 	bne.w	8007206 <_printf_float+0x1e2>
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ea:	b00d      	add	sp, #52	; 0x34
 80070ec:	ecbd 8b02 	vpop	{d8}
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	4642      	mov	r2, r8
 80070f6:	464b      	mov	r3, r9
 80070f8:	4640      	mov	r0, r8
 80070fa:	4649      	mov	r1, r9
 80070fc:	f7f9 fd36 	bl	8000b6c <__aeabi_dcmpun>
 8007100:	b140      	cbz	r0, 8007114 <_printf_float+0xf0>
 8007102:	464b      	mov	r3, r9
 8007104:	2b00      	cmp	r3, #0
 8007106:	bfbc      	itt	lt
 8007108:	232d      	movlt	r3, #45	; 0x2d
 800710a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800710e:	487f      	ldr	r0, [pc, #508]	; (800730c <_printf_float+0x2e8>)
 8007110:	4b7f      	ldr	r3, [pc, #508]	; (8007310 <_printf_float+0x2ec>)
 8007112:	e7d1      	b.n	80070b8 <_printf_float+0x94>
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800711a:	9206      	str	r2, [sp, #24]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	d13f      	bne.n	80071a0 <_printf_float+0x17c>
 8007120:	2306      	movs	r3, #6
 8007122:	6063      	str	r3, [r4, #4]
 8007124:	9b05      	ldr	r3, [sp, #20]
 8007126:	6861      	ldr	r1, [r4, #4]
 8007128:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800712c:	2300      	movs	r3, #0
 800712e:	9303      	str	r3, [sp, #12]
 8007130:	ab0a      	add	r3, sp, #40	; 0x28
 8007132:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007136:	ab09      	add	r3, sp, #36	; 0x24
 8007138:	ec49 8b10 	vmov	d0, r8, r9
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	6022      	str	r2, [r4, #0]
 8007140:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007144:	4628      	mov	r0, r5
 8007146:	f7ff fecd 	bl	8006ee4 <__cvt>
 800714a:	9b06      	ldr	r3, [sp, #24]
 800714c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800714e:	2b47      	cmp	r3, #71	; 0x47
 8007150:	4680      	mov	r8, r0
 8007152:	d108      	bne.n	8007166 <_printf_float+0x142>
 8007154:	1cc8      	adds	r0, r1, #3
 8007156:	db02      	blt.n	800715e <_printf_float+0x13a>
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	4299      	cmp	r1, r3
 800715c:	dd41      	ble.n	80071e2 <_printf_float+0x1be>
 800715e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007162:	fa5f fb8b 	uxtb.w	fp, fp
 8007166:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800716a:	d820      	bhi.n	80071ae <_printf_float+0x18a>
 800716c:	3901      	subs	r1, #1
 800716e:	465a      	mov	r2, fp
 8007170:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007174:	9109      	str	r1, [sp, #36]	; 0x24
 8007176:	f7ff ff17 	bl	8006fa8 <__exponent>
 800717a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800717c:	1813      	adds	r3, r2, r0
 800717e:	2a01      	cmp	r2, #1
 8007180:	4681      	mov	r9, r0
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	dc02      	bgt.n	800718c <_printf_float+0x168>
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	07d2      	lsls	r2, r2, #31
 800718a:	d501      	bpl.n	8007190 <_printf_float+0x16c>
 800718c:	3301      	adds	r3, #1
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007194:	2b00      	cmp	r3, #0
 8007196:	d09c      	beq.n	80070d2 <_printf_float+0xae>
 8007198:	232d      	movs	r3, #45	; 0x2d
 800719a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719e:	e798      	b.n	80070d2 <_printf_float+0xae>
 80071a0:	9a06      	ldr	r2, [sp, #24]
 80071a2:	2a47      	cmp	r2, #71	; 0x47
 80071a4:	d1be      	bne.n	8007124 <_printf_float+0x100>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1bc      	bne.n	8007124 <_printf_float+0x100>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e7b9      	b.n	8007122 <_printf_float+0xfe>
 80071ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071b2:	d118      	bne.n	80071e6 <_printf_float+0x1c2>
 80071b4:	2900      	cmp	r1, #0
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	dd0b      	ble.n	80071d2 <_printf_float+0x1ae>
 80071ba:	6121      	str	r1, [r4, #16]
 80071bc:	b913      	cbnz	r3, 80071c4 <_printf_float+0x1a0>
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	07d0      	lsls	r0, r2, #31
 80071c2:	d502      	bpl.n	80071ca <_printf_float+0x1a6>
 80071c4:	3301      	adds	r3, #1
 80071c6:	440b      	add	r3, r1
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80071cc:	f04f 0900 	mov.w	r9, #0
 80071d0:	e7de      	b.n	8007190 <_printf_float+0x16c>
 80071d2:	b913      	cbnz	r3, 80071da <_printf_float+0x1b6>
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	07d2      	lsls	r2, r2, #31
 80071d8:	d501      	bpl.n	80071de <_printf_float+0x1ba>
 80071da:	3302      	adds	r3, #2
 80071dc:	e7f4      	b.n	80071c8 <_printf_float+0x1a4>
 80071de:	2301      	movs	r3, #1
 80071e0:	e7f2      	b.n	80071c8 <_printf_float+0x1a4>
 80071e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e8:	4299      	cmp	r1, r3
 80071ea:	db05      	blt.n	80071f8 <_printf_float+0x1d4>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	6121      	str	r1, [r4, #16]
 80071f0:	07d8      	lsls	r0, r3, #31
 80071f2:	d5ea      	bpl.n	80071ca <_printf_float+0x1a6>
 80071f4:	1c4b      	adds	r3, r1, #1
 80071f6:	e7e7      	b.n	80071c8 <_printf_float+0x1a4>
 80071f8:	2900      	cmp	r1, #0
 80071fa:	bfd4      	ite	le
 80071fc:	f1c1 0202 	rsble	r2, r1, #2
 8007200:	2201      	movgt	r2, #1
 8007202:	4413      	add	r3, r2
 8007204:	e7e0      	b.n	80071c8 <_printf_float+0x1a4>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	055a      	lsls	r2, r3, #21
 800720a:	d407      	bmi.n	800721c <_printf_float+0x1f8>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	4642      	mov	r2, r8
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	d12c      	bne.n	8007274 <_printf_float+0x250>
 800721a:	e764      	b.n	80070e6 <_printf_float+0xc2>
 800721c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007220:	f240 80e0 	bls.w	80073e4 <_printf_float+0x3c0>
 8007224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007228:	2200      	movs	r2, #0
 800722a:	2300      	movs	r3, #0
 800722c:	f7f9 fc6c 	bl	8000b08 <__aeabi_dcmpeq>
 8007230:	2800      	cmp	r0, #0
 8007232:	d034      	beq.n	800729e <_printf_float+0x27a>
 8007234:	4a37      	ldr	r2, [pc, #220]	; (8007314 <_printf_float+0x2f0>)
 8007236:	2301      	movs	r3, #1
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f af51 	beq.w	80070e6 <_printf_float+0xc2>
 8007244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007248:	429a      	cmp	r2, r3
 800724a:	db02      	blt.n	8007252 <_printf_float+0x22e>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	07d8      	lsls	r0, r3, #31
 8007250:	d510      	bpl.n	8007274 <_printf_float+0x250>
 8007252:	ee18 3a10 	vmov	r3, s16
 8007256:	4652      	mov	r2, sl
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f af41 	beq.w	80070e6 <_printf_float+0xc2>
 8007264:	f04f 0800 	mov.w	r8, #0
 8007268:	f104 091a 	add.w	r9, r4, #26
 800726c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726e:	3b01      	subs	r3, #1
 8007270:	4543      	cmp	r3, r8
 8007272:	dc09      	bgt.n	8007288 <_printf_float+0x264>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	079b      	lsls	r3, r3, #30
 8007278:	f100 8105 	bmi.w	8007486 <_printf_float+0x462>
 800727c:	68e0      	ldr	r0, [r4, #12]
 800727e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007280:	4298      	cmp	r0, r3
 8007282:	bfb8      	it	lt
 8007284:	4618      	movlt	r0, r3
 8007286:	e730      	b.n	80070ea <_printf_float+0xc6>
 8007288:	2301      	movs	r3, #1
 800728a:	464a      	mov	r2, r9
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f af27 	beq.w	80070e6 <_printf_float+0xc2>
 8007298:	f108 0801 	add.w	r8, r8, #1
 800729c:	e7e6      	b.n	800726c <_printf_float+0x248>
 800729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	dc39      	bgt.n	8007318 <_printf_float+0x2f4>
 80072a4:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <_printf_float+0x2f0>)
 80072a6:	2301      	movs	r3, #1
 80072a8:	4631      	mov	r1, r6
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f af19 	beq.w	80070e6 <_printf_float+0xc2>
 80072b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b8:	4313      	orrs	r3, r2
 80072ba:	d102      	bne.n	80072c2 <_printf_float+0x29e>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	07d9      	lsls	r1, r3, #31
 80072c0:	d5d8      	bpl.n	8007274 <_printf_float+0x250>
 80072c2:	ee18 3a10 	vmov	r3, s16
 80072c6:	4652      	mov	r2, sl
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af09 	beq.w	80070e6 <_printf_float+0xc2>
 80072d4:	f04f 0900 	mov.w	r9, #0
 80072d8:	f104 0a1a 	add.w	sl, r4, #26
 80072dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072de:	425b      	negs	r3, r3
 80072e0:	454b      	cmp	r3, r9
 80072e2:	dc01      	bgt.n	80072e8 <_printf_float+0x2c4>
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	e792      	b.n	800720e <_printf_float+0x1ea>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4652      	mov	r2, sl
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b8      	blx	r7
 80072f2:	3001      	adds	r0, #1
 80072f4:	f43f aef7 	beq.w	80070e6 <_printf_float+0xc2>
 80072f8:	f109 0901 	add.w	r9, r9, #1
 80072fc:	e7ee      	b.n	80072dc <_printf_float+0x2b8>
 80072fe:	bf00      	nop
 8007300:	7fefffff 	.word	0x7fefffff
 8007304:	0800c030 	.word	0x0800c030
 8007308:	0800c034 	.word	0x0800c034
 800730c:	0800c03c 	.word	0x0800c03c
 8007310:	0800c038 	.word	0x0800c038
 8007314:	0800c040 	.word	0x0800c040
 8007318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800731a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800731c:	429a      	cmp	r2, r3
 800731e:	bfa8      	it	ge
 8007320:	461a      	movge	r2, r3
 8007322:	2a00      	cmp	r2, #0
 8007324:	4691      	mov	r9, r2
 8007326:	dc37      	bgt.n	8007398 <_printf_float+0x374>
 8007328:	f04f 0b00 	mov.w	fp, #0
 800732c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007330:	f104 021a 	add.w	r2, r4, #26
 8007334:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007336:	9305      	str	r3, [sp, #20]
 8007338:	eba3 0309 	sub.w	r3, r3, r9
 800733c:	455b      	cmp	r3, fp
 800733e:	dc33      	bgt.n	80073a8 <_printf_float+0x384>
 8007340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007344:	429a      	cmp	r2, r3
 8007346:	db3b      	blt.n	80073c0 <_printf_float+0x39c>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	07da      	lsls	r2, r3, #31
 800734c:	d438      	bmi.n	80073c0 <_printf_float+0x39c>
 800734e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007350:	9a05      	ldr	r2, [sp, #20]
 8007352:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007354:	1a9a      	subs	r2, r3, r2
 8007356:	eba3 0901 	sub.w	r9, r3, r1
 800735a:	4591      	cmp	r9, r2
 800735c:	bfa8      	it	ge
 800735e:	4691      	movge	r9, r2
 8007360:	f1b9 0f00 	cmp.w	r9, #0
 8007364:	dc35      	bgt.n	80073d2 <_printf_float+0x3ae>
 8007366:	f04f 0800 	mov.w	r8, #0
 800736a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800736e:	f104 0a1a 	add.w	sl, r4, #26
 8007372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	eba3 0309 	sub.w	r3, r3, r9
 800737c:	4543      	cmp	r3, r8
 800737e:	f77f af79 	ble.w	8007274 <_printf_float+0x250>
 8007382:	2301      	movs	r3, #1
 8007384:	4652      	mov	r2, sl
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	f43f aeaa 	beq.w	80070e6 <_printf_float+0xc2>
 8007392:	f108 0801 	add.w	r8, r8, #1
 8007396:	e7ec      	b.n	8007372 <_printf_float+0x34e>
 8007398:	4613      	mov	r3, r2
 800739a:	4631      	mov	r1, r6
 800739c:	4642      	mov	r2, r8
 800739e:	4628      	mov	r0, r5
 80073a0:	47b8      	blx	r7
 80073a2:	3001      	adds	r0, #1
 80073a4:	d1c0      	bne.n	8007328 <_printf_float+0x304>
 80073a6:	e69e      	b.n	80070e6 <_printf_float+0xc2>
 80073a8:	2301      	movs	r3, #1
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	9205      	str	r2, [sp, #20]
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f ae97 	beq.w	80070e6 <_printf_float+0xc2>
 80073b8:	9a05      	ldr	r2, [sp, #20]
 80073ba:	f10b 0b01 	add.w	fp, fp, #1
 80073be:	e7b9      	b.n	8007334 <_printf_float+0x310>
 80073c0:	ee18 3a10 	vmov	r3, s16
 80073c4:	4652      	mov	r2, sl
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1be      	bne.n	800734e <_printf_float+0x32a>
 80073d0:	e689      	b.n	80070e6 <_printf_float+0xc2>
 80073d2:	9a05      	ldr	r2, [sp, #20]
 80073d4:	464b      	mov	r3, r9
 80073d6:	4442      	add	r2, r8
 80073d8:	4631      	mov	r1, r6
 80073da:	4628      	mov	r0, r5
 80073dc:	47b8      	blx	r7
 80073de:	3001      	adds	r0, #1
 80073e0:	d1c1      	bne.n	8007366 <_printf_float+0x342>
 80073e2:	e680      	b.n	80070e6 <_printf_float+0xc2>
 80073e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e6:	2a01      	cmp	r2, #1
 80073e8:	dc01      	bgt.n	80073ee <_printf_float+0x3ca>
 80073ea:	07db      	lsls	r3, r3, #31
 80073ec:	d538      	bpl.n	8007460 <_printf_float+0x43c>
 80073ee:	2301      	movs	r3, #1
 80073f0:	4642      	mov	r2, r8
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f ae74 	beq.w	80070e6 <_printf_float+0xc2>
 80073fe:	ee18 3a10 	vmov	r3, s16
 8007402:	4652      	mov	r2, sl
 8007404:	4631      	mov	r1, r6
 8007406:	4628      	mov	r0, r5
 8007408:	47b8      	blx	r7
 800740a:	3001      	adds	r0, #1
 800740c:	f43f ae6b 	beq.w	80070e6 <_printf_float+0xc2>
 8007410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007414:	2200      	movs	r2, #0
 8007416:	2300      	movs	r3, #0
 8007418:	f7f9 fb76 	bl	8000b08 <__aeabi_dcmpeq>
 800741c:	b9d8      	cbnz	r0, 8007456 <_printf_float+0x432>
 800741e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007420:	f108 0201 	add.w	r2, r8, #1
 8007424:	3b01      	subs	r3, #1
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	d10e      	bne.n	800744e <_printf_float+0x42a>
 8007430:	e659      	b.n	80070e6 <_printf_float+0xc2>
 8007432:	2301      	movs	r3, #1
 8007434:	4652      	mov	r2, sl
 8007436:	4631      	mov	r1, r6
 8007438:	4628      	mov	r0, r5
 800743a:	47b8      	blx	r7
 800743c:	3001      	adds	r0, #1
 800743e:	f43f ae52 	beq.w	80070e6 <_printf_float+0xc2>
 8007442:	f108 0801 	add.w	r8, r8, #1
 8007446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007448:	3b01      	subs	r3, #1
 800744a:	4543      	cmp	r3, r8
 800744c:	dcf1      	bgt.n	8007432 <_printf_float+0x40e>
 800744e:	464b      	mov	r3, r9
 8007450:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007454:	e6dc      	b.n	8007210 <_printf_float+0x1ec>
 8007456:	f04f 0800 	mov.w	r8, #0
 800745a:	f104 0a1a 	add.w	sl, r4, #26
 800745e:	e7f2      	b.n	8007446 <_printf_float+0x422>
 8007460:	2301      	movs	r3, #1
 8007462:	4642      	mov	r2, r8
 8007464:	e7df      	b.n	8007426 <_printf_float+0x402>
 8007466:	2301      	movs	r3, #1
 8007468:	464a      	mov	r2, r9
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f ae38 	beq.w	80070e6 <_printf_float+0xc2>
 8007476:	f108 0801 	add.w	r8, r8, #1
 800747a:	68e3      	ldr	r3, [r4, #12]
 800747c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800747e:	1a5b      	subs	r3, r3, r1
 8007480:	4543      	cmp	r3, r8
 8007482:	dcf0      	bgt.n	8007466 <_printf_float+0x442>
 8007484:	e6fa      	b.n	800727c <_printf_float+0x258>
 8007486:	f04f 0800 	mov.w	r8, #0
 800748a:	f104 0919 	add.w	r9, r4, #25
 800748e:	e7f4      	b.n	800747a <_printf_float+0x456>

08007490 <_printf_common>:
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	4616      	mov	r6, r2
 8007496:	4699      	mov	r9, r3
 8007498:	688a      	ldr	r2, [r1, #8]
 800749a:	690b      	ldr	r3, [r1, #16]
 800749c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bfb8      	it	lt
 80074a4:	4613      	movlt	r3, r2
 80074a6:	6033      	str	r3, [r6, #0]
 80074a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074ac:	4607      	mov	r7, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	b10a      	cbz	r2, 80074b6 <_printf_common+0x26>
 80074b2:	3301      	adds	r3, #1
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	0699      	lsls	r1, r3, #26
 80074ba:	bf42      	ittt	mi
 80074bc:	6833      	ldrmi	r3, [r6, #0]
 80074be:	3302      	addmi	r3, #2
 80074c0:	6033      	strmi	r3, [r6, #0]
 80074c2:	6825      	ldr	r5, [r4, #0]
 80074c4:	f015 0506 	ands.w	r5, r5, #6
 80074c8:	d106      	bne.n	80074d8 <_printf_common+0x48>
 80074ca:	f104 0a19 	add.w	sl, r4, #25
 80074ce:	68e3      	ldr	r3, [r4, #12]
 80074d0:	6832      	ldr	r2, [r6, #0]
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	42ab      	cmp	r3, r5
 80074d6:	dc26      	bgt.n	8007526 <_printf_common+0x96>
 80074d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074dc:	1e13      	subs	r3, r2, #0
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	bf18      	it	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	0692      	lsls	r2, r2, #26
 80074e6:	d42b      	bmi.n	8007540 <_printf_common+0xb0>
 80074e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ec:	4649      	mov	r1, r9
 80074ee:	4638      	mov	r0, r7
 80074f0:	47c0      	blx	r8
 80074f2:	3001      	adds	r0, #1
 80074f4:	d01e      	beq.n	8007534 <_printf_common+0xa4>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	68e5      	ldr	r5, [r4, #12]
 80074fa:	6832      	ldr	r2, [r6, #0]
 80074fc:	f003 0306 	and.w	r3, r3, #6
 8007500:	2b04      	cmp	r3, #4
 8007502:	bf08      	it	eq
 8007504:	1aad      	subeq	r5, r5, r2
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	6922      	ldr	r2, [r4, #16]
 800750a:	bf0c      	ite	eq
 800750c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007510:	2500      	movne	r5, #0
 8007512:	4293      	cmp	r3, r2
 8007514:	bfc4      	itt	gt
 8007516:	1a9b      	subgt	r3, r3, r2
 8007518:	18ed      	addgt	r5, r5, r3
 800751a:	2600      	movs	r6, #0
 800751c:	341a      	adds	r4, #26
 800751e:	42b5      	cmp	r5, r6
 8007520:	d11a      	bne.n	8007558 <_printf_common+0xc8>
 8007522:	2000      	movs	r0, #0
 8007524:	e008      	b.n	8007538 <_printf_common+0xa8>
 8007526:	2301      	movs	r3, #1
 8007528:	4652      	mov	r2, sl
 800752a:	4649      	mov	r1, r9
 800752c:	4638      	mov	r0, r7
 800752e:	47c0      	blx	r8
 8007530:	3001      	adds	r0, #1
 8007532:	d103      	bne.n	800753c <_printf_common+0xac>
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	3501      	adds	r5, #1
 800753e:	e7c6      	b.n	80074ce <_printf_common+0x3e>
 8007540:	18e1      	adds	r1, r4, r3
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	2030      	movs	r0, #48	; 0x30
 8007546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800754a:	4422      	add	r2, r4
 800754c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007554:	3302      	adds	r3, #2
 8007556:	e7c7      	b.n	80074e8 <_printf_common+0x58>
 8007558:	2301      	movs	r3, #1
 800755a:	4622      	mov	r2, r4
 800755c:	4649      	mov	r1, r9
 800755e:	4638      	mov	r0, r7
 8007560:	47c0      	blx	r8
 8007562:	3001      	adds	r0, #1
 8007564:	d0e6      	beq.n	8007534 <_printf_common+0xa4>
 8007566:	3601      	adds	r6, #1
 8007568:	e7d9      	b.n	800751e <_printf_common+0x8e>
	...

0800756c <_printf_i>:
 800756c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	7e0f      	ldrb	r7, [r1, #24]
 8007572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007574:	2f78      	cmp	r7, #120	; 0x78
 8007576:	4691      	mov	r9, r2
 8007578:	4680      	mov	r8, r0
 800757a:	460c      	mov	r4, r1
 800757c:	469a      	mov	sl, r3
 800757e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007582:	d807      	bhi.n	8007594 <_printf_i+0x28>
 8007584:	2f62      	cmp	r7, #98	; 0x62
 8007586:	d80a      	bhi.n	800759e <_printf_i+0x32>
 8007588:	2f00      	cmp	r7, #0
 800758a:	f000 80d8 	beq.w	800773e <_printf_i+0x1d2>
 800758e:	2f58      	cmp	r7, #88	; 0x58
 8007590:	f000 80a3 	beq.w	80076da <_printf_i+0x16e>
 8007594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800759c:	e03a      	b.n	8007614 <_printf_i+0xa8>
 800759e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075a2:	2b15      	cmp	r3, #21
 80075a4:	d8f6      	bhi.n	8007594 <_printf_i+0x28>
 80075a6:	a101      	add	r1, pc, #4	; (adr r1, 80075ac <_printf_i+0x40>)
 80075a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075ac:	08007605 	.word	0x08007605
 80075b0:	08007619 	.word	0x08007619
 80075b4:	08007595 	.word	0x08007595
 80075b8:	08007595 	.word	0x08007595
 80075bc:	08007595 	.word	0x08007595
 80075c0:	08007595 	.word	0x08007595
 80075c4:	08007619 	.word	0x08007619
 80075c8:	08007595 	.word	0x08007595
 80075cc:	08007595 	.word	0x08007595
 80075d0:	08007595 	.word	0x08007595
 80075d4:	08007595 	.word	0x08007595
 80075d8:	08007725 	.word	0x08007725
 80075dc:	08007649 	.word	0x08007649
 80075e0:	08007707 	.word	0x08007707
 80075e4:	08007595 	.word	0x08007595
 80075e8:	08007595 	.word	0x08007595
 80075ec:	08007747 	.word	0x08007747
 80075f0:	08007595 	.word	0x08007595
 80075f4:	08007649 	.word	0x08007649
 80075f8:	08007595 	.word	0x08007595
 80075fc:	08007595 	.word	0x08007595
 8007600:	0800770f 	.word	0x0800770f
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	1d1a      	adds	r2, r3, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	602a      	str	r2, [r5, #0]
 800760c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007614:	2301      	movs	r3, #1
 8007616:	e0a3      	b.n	8007760 <_printf_i+0x1f4>
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	6829      	ldr	r1, [r5, #0]
 800761c:	0606      	lsls	r6, r0, #24
 800761e:	f101 0304 	add.w	r3, r1, #4
 8007622:	d50a      	bpl.n	800763a <_printf_i+0xce>
 8007624:	680e      	ldr	r6, [r1, #0]
 8007626:	602b      	str	r3, [r5, #0]
 8007628:	2e00      	cmp	r6, #0
 800762a:	da03      	bge.n	8007634 <_printf_i+0xc8>
 800762c:	232d      	movs	r3, #45	; 0x2d
 800762e:	4276      	negs	r6, r6
 8007630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007634:	485e      	ldr	r0, [pc, #376]	; (80077b0 <_printf_i+0x244>)
 8007636:	230a      	movs	r3, #10
 8007638:	e019      	b.n	800766e <_printf_i+0x102>
 800763a:	680e      	ldr	r6, [r1, #0]
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007642:	bf18      	it	ne
 8007644:	b236      	sxthne	r6, r6
 8007646:	e7ef      	b.n	8007628 <_printf_i+0xbc>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	6820      	ldr	r0, [r4, #0]
 800764c:	1d19      	adds	r1, r3, #4
 800764e:	6029      	str	r1, [r5, #0]
 8007650:	0601      	lsls	r1, r0, #24
 8007652:	d501      	bpl.n	8007658 <_printf_i+0xec>
 8007654:	681e      	ldr	r6, [r3, #0]
 8007656:	e002      	b.n	800765e <_printf_i+0xf2>
 8007658:	0646      	lsls	r6, r0, #25
 800765a:	d5fb      	bpl.n	8007654 <_printf_i+0xe8>
 800765c:	881e      	ldrh	r6, [r3, #0]
 800765e:	4854      	ldr	r0, [pc, #336]	; (80077b0 <_printf_i+0x244>)
 8007660:	2f6f      	cmp	r7, #111	; 0x6f
 8007662:	bf0c      	ite	eq
 8007664:	2308      	moveq	r3, #8
 8007666:	230a      	movne	r3, #10
 8007668:	2100      	movs	r1, #0
 800766a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800766e:	6865      	ldr	r5, [r4, #4]
 8007670:	60a5      	str	r5, [r4, #8]
 8007672:	2d00      	cmp	r5, #0
 8007674:	bfa2      	ittt	ge
 8007676:	6821      	ldrge	r1, [r4, #0]
 8007678:	f021 0104 	bicge.w	r1, r1, #4
 800767c:	6021      	strge	r1, [r4, #0]
 800767e:	b90e      	cbnz	r6, 8007684 <_printf_i+0x118>
 8007680:	2d00      	cmp	r5, #0
 8007682:	d04d      	beq.n	8007720 <_printf_i+0x1b4>
 8007684:	4615      	mov	r5, r2
 8007686:	fbb6 f1f3 	udiv	r1, r6, r3
 800768a:	fb03 6711 	mls	r7, r3, r1, r6
 800768e:	5dc7      	ldrb	r7, [r0, r7]
 8007690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007694:	4637      	mov	r7, r6
 8007696:	42bb      	cmp	r3, r7
 8007698:	460e      	mov	r6, r1
 800769a:	d9f4      	bls.n	8007686 <_printf_i+0x11a>
 800769c:	2b08      	cmp	r3, #8
 800769e:	d10b      	bne.n	80076b8 <_printf_i+0x14c>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	07de      	lsls	r6, r3, #31
 80076a4:	d508      	bpl.n	80076b8 <_printf_i+0x14c>
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	6861      	ldr	r1, [r4, #4]
 80076aa:	4299      	cmp	r1, r3
 80076ac:	bfde      	ittt	le
 80076ae:	2330      	movle	r3, #48	; 0x30
 80076b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076b8:	1b52      	subs	r2, r2, r5
 80076ba:	6122      	str	r2, [r4, #16]
 80076bc:	f8cd a000 	str.w	sl, [sp]
 80076c0:	464b      	mov	r3, r9
 80076c2:	aa03      	add	r2, sp, #12
 80076c4:	4621      	mov	r1, r4
 80076c6:	4640      	mov	r0, r8
 80076c8:	f7ff fee2 	bl	8007490 <_printf_common>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d14c      	bne.n	800776a <_printf_i+0x1fe>
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295
 80076d4:	b004      	add	sp, #16
 80076d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076da:	4835      	ldr	r0, [pc, #212]	; (80077b0 <_printf_i+0x244>)
 80076dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076e0:	6829      	ldr	r1, [r5, #0]
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80076e8:	6029      	str	r1, [r5, #0]
 80076ea:	061d      	lsls	r5, r3, #24
 80076ec:	d514      	bpl.n	8007718 <_printf_i+0x1ac>
 80076ee:	07df      	lsls	r7, r3, #31
 80076f0:	bf44      	itt	mi
 80076f2:	f043 0320 	orrmi.w	r3, r3, #32
 80076f6:	6023      	strmi	r3, [r4, #0]
 80076f8:	b91e      	cbnz	r6, 8007702 <_printf_i+0x196>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	f023 0320 	bic.w	r3, r3, #32
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	2310      	movs	r3, #16
 8007704:	e7b0      	b.n	8007668 <_printf_i+0xfc>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	f043 0320 	orr.w	r3, r3, #32
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	2378      	movs	r3, #120	; 0x78
 8007710:	4828      	ldr	r0, [pc, #160]	; (80077b4 <_printf_i+0x248>)
 8007712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007716:	e7e3      	b.n	80076e0 <_printf_i+0x174>
 8007718:	0659      	lsls	r1, r3, #25
 800771a:	bf48      	it	mi
 800771c:	b2b6      	uxthmi	r6, r6
 800771e:	e7e6      	b.n	80076ee <_printf_i+0x182>
 8007720:	4615      	mov	r5, r2
 8007722:	e7bb      	b.n	800769c <_printf_i+0x130>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	6826      	ldr	r6, [r4, #0]
 8007728:	6961      	ldr	r1, [r4, #20]
 800772a:	1d18      	adds	r0, r3, #4
 800772c:	6028      	str	r0, [r5, #0]
 800772e:	0635      	lsls	r5, r6, #24
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	d501      	bpl.n	8007738 <_printf_i+0x1cc>
 8007734:	6019      	str	r1, [r3, #0]
 8007736:	e002      	b.n	800773e <_printf_i+0x1d2>
 8007738:	0670      	lsls	r0, r6, #25
 800773a:	d5fb      	bpl.n	8007734 <_printf_i+0x1c8>
 800773c:	8019      	strh	r1, [r3, #0]
 800773e:	2300      	movs	r3, #0
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	4615      	mov	r5, r2
 8007744:	e7ba      	b.n	80076bc <_printf_i+0x150>
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	602a      	str	r2, [r5, #0]
 800774c:	681d      	ldr	r5, [r3, #0]
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	2100      	movs	r1, #0
 8007752:	4628      	mov	r0, r5
 8007754:	f7f8 fd64 	bl	8000220 <memchr>
 8007758:	b108      	cbz	r0, 800775e <_printf_i+0x1f2>
 800775a:	1b40      	subs	r0, r0, r5
 800775c:	6060      	str	r0, [r4, #4]
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	2300      	movs	r3, #0
 8007764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007768:	e7a8      	b.n	80076bc <_printf_i+0x150>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	462a      	mov	r2, r5
 800776e:	4649      	mov	r1, r9
 8007770:	4640      	mov	r0, r8
 8007772:	47d0      	blx	sl
 8007774:	3001      	adds	r0, #1
 8007776:	d0ab      	beq.n	80076d0 <_printf_i+0x164>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	079b      	lsls	r3, r3, #30
 800777c:	d413      	bmi.n	80077a6 <_printf_i+0x23a>
 800777e:	68e0      	ldr	r0, [r4, #12]
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	4298      	cmp	r0, r3
 8007784:	bfb8      	it	lt
 8007786:	4618      	movlt	r0, r3
 8007788:	e7a4      	b.n	80076d4 <_printf_i+0x168>
 800778a:	2301      	movs	r3, #1
 800778c:	4632      	mov	r2, r6
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d09b      	beq.n	80076d0 <_printf_i+0x164>
 8007798:	3501      	adds	r5, #1
 800779a:	68e3      	ldr	r3, [r4, #12]
 800779c:	9903      	ldr	r1, [sp, #12]
 800779e:	1a5b      	subs	r3, r3, r1
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	dcf2      	bgt.n	800778a <_printf_i+0x21e>
 80077a4:	e7eb      	b.n	800777e <_printf_i+0x212>
 80077a6:	2500      	movs	r5, #0
 80077a8:	f104 0619 	add.w	r6, r4, #25
 80077ac:	e7f5      	b.n	800779a <_printf_i+0x22e>
 80077ae:	bf00      	nop
 80077b0:	0800c042 	.word	0x0800c042
 80077b4:	0800c053 	.word	0x0800c053

080077b8 <iprintf>:
 80077b8:	b40f      	push	{r0, r1, r2, r3}
 80077ba:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <iprintf+0x2c>)
 80077bc:	b513      	push	{r0, r1, r4, lr}
 80077be:	681c      	ldr	r4, [r3, #0]
 80077c0:	b124      	cbz	r4, 80077cc <iprintf+0x14>
 80077c2:	69a3      	ldr	r3, [r4, #24]
 80077c4:	b913      	cbnz	r3, 80077cc <iprintf+0x14>
 80077c6:	4620      	mov	r0, r4
 80077c8:	f001 f8fa 	bl	80089c0 <__sinit>
 80077cc:	ab05      	add	r3, sp, #20
 80077ce:	9a04      	ldr	r2, [sp, #16]
 80077d0:	68a1      	ldr	r1, [r4, #8]
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	4620      	mov	r0, r4
 80077d6:	f002 f813 	bl	8009800 <_vfiprintf_r>
 80077da:	b002      	add	sp, #8
 80077dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e0:	b004      	add	sp, #16
 80077e2:	4770      	bx	lr
 80077e4:	20000014 	.word	0x20000014

080077e8 <_puts_r>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	460e      	mov	r6, r1
 80077ec:	4605      	mov	r5, r0
 80077ee:	b118      	cbz	r0, 80077f8 <_puts_r+0x10>
 80077f0:	6983      	ldr	r3, [r0, #24]
 80077f2:	b90b      	cbnz	r3, 80077f8 <_puts_r+0x10>
 80077f4:	f001 f8e4 	bl	80089c0 <__sinit>
 80077f8:	69ab      	ldr	r3, [r5, #24]
 80077fa:	68ac      	ldr	r4, [r5, #8]
 80077fc:	b913      	cbnz	r3, 8007804 <_puts_r+0x1c>
 80077fe:	4628      	mov	r0, r5
 8007800:	f001 f8de 	bl	80089c0 <__sinit>
 8007804:	4b2c      	ldr	r3, [pc, #176]	; (80078b8 <_puts_r+0xd0>)
 8007806:	429c      	cmp	r4, r3
 8007808:	d120      	bne.n	800784c <_puts_r+0x64>
 800780a:	686c      	ldr	r4, [r5, #4]
 800780c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800780e:	07db      	lsls	r3, r3, #31
 8007810:	d405      	bmi.n	800781e <_puts_r+0x36>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	0598      	lsls	r0, r3, #22
 8007816:	d402      	bmi.n	800781e <_puts_r+0x36>
 8007818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781a:	f001 f974 	bl	8008b06 <__retarget_lock_acquire_recursive>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	0719      	lsls	r1, r3, #28
 8007822:	d51d      	bpl.n	8007860 <_puts_r+0x78>
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	b1db      	cbz	r3, 8007860 <_puts_r+0x78>
 8007828:	3e01      	subs	r6, #1
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007830:	3b01      	subs	r3, #1
 8007832:	60a3      	str	r3, [r4, #8]
 8007834:	bb39      	cbnz	r1, 8007886 <_puts_r+0x9e>
 8007836:	2b00      	cmp	r3, #0
 8007838:	da38      	bge.n	80078ac <_puts_r+0xc4>
 800783a:	4622      	mov	r2, r4
 800783c:	210a      	movs	r1, #10
 800783e:	4628      	mov	r0, r5
 8007840:	f000 f868 	bl	8007914 <__swbuf_r>
 8007844:	3001      	adds	r0, #1
 8007846:	d011      	beq.n	800786c <_puts_r+0x84>
 8007848:	250a      	movs	r5, #10
 800784a:	e011      	b.n	8007870 <_puts_r+0x88>
 800784c:	4b1b      	ldr	r3, [pc, #108]	; (80078bc <_puts_r+0xd4>)
 800784e:	429c      	cmp	r4, r3
 8007850:	d101      	bne.n	8007856 <_puts_r+0x6e>
 8007852:	68ac      	ldr	r4, [r5, #8]
 8007854:	e7da      	b.n	800780c <_puts_r+0x24>
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <_puts_r+0xd8>)
 8007858:	429c      	cmp	r4, r3
 800785a:	bf08      	it	eq
 800785c:	68ec      	ldreq	r4, [r5, #12]
 800785e:	e7d5      	b.n	800780c <_puts_r+0x24>
 8007860:	4621      	mov	r1, r4
 8007862:	4628      	mov	r0, r5
 8007864:	f000 f8a8 	bl	80079b8 <__swsetup_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	d0dd      	beq.n	8007828 <_puts_r+0x40>
 800786c:	f04f 35ff 	mov.w	r5, #4294967295
 8007870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007872:	07da      	lsls	r2, r3, #31
 8007874:	d405      	bmi.n	8007882 <_puts_r+0x9a>
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	059b      	lsls	r3, r3, #22
 800787a:	d402      	bmi.n	8007882 <_puts_r+0x9a>
 800787c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800787e:	f001 f943 	bl	8008b08 <__retarget_lock_release_recursive>
 8007882:	4628      	mov	r0, r5
 8007884:	bd70      	pop	{r4, r5, r6, pc}
 8007886:	2b00      	cmp	r3, #0
 8007888:	da04      	bge.n	8007894 <_puts_r+0xac>
 800788a:	69a2      	ldr	r2, [r4, #24]
 800788c:	429a      	cmp	r2, r3
 800788e:	dc06      	bgt.n	800789e <_puts_r+0xb6>
 8007890:	290a      	cmp	r1, #10
 8007892:	d004      	beq.n	800789e <_puts_r+0xb6>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	6022      	str	r2, [r4, #0]
 800789a:	7019      	strb	r1, [r3, #0]
 800789c:	e7c5      	b.n	800782a <_puts_r+0x42>
 800789e:	4622      	mov	r2, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 f837 	bl	8007914 <__swbuf_r>
 80078a6:	3001      	adds	r0, #1
 80078a8:	d1bf      	bne.n	800782a <_puts_r+0x42>
 80078aa:	e7df      	b.n	800786c <_puts_r+0x84>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	250a      	movs	r5, #10
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	701d      	strb	r5, [r3, #0]
 80078b6:	e7db      	b.n	8007870 <_puts_r+0x88>
 80078b8:	0800c114 	.word	0x0800c114
 80078bc:	0800c134 	.word	0x0800c134
 80078c0:	0800c0f4 	.word	0x0800c0f4

080078c4 <puts>:
 80078c4:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <puts+0xc>)
 80078c6:	4601      	mov	r1, r0
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	f7ff bf8d 	b.w	80077e8 <_puts_r>
 80078ce:	bf00      	nop
 80078d0:	20000014 	.word	0x20000014

080078d4 <siprintf>:
 80078d4:	b40e      	push	{r1, r2, r3}
 80078d6:	b500      	push	{lr}
 80078d8:	b09c      	sub	sp, #112	; 0x70
 80078da:	ab1d      	add	r3, sp, #116	; 0x74
 80078dc:	9002      	str	r0, [sp, #8]
 80078de:	9006      	str	r0, [sp, #24]
 80078e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078e4:	4809      	ldr	r0, [pc, #36]	; (800790c <siprintf+0x38>)
 80078e6:	9107      	str	r1, [sp, #28]
 80078e8:	9104      	str	r1, [sp, #16]
 80078ea:	4909      	ldr	r1, [pc, #36]	; (8007910 <siprintf+0x3c>)
 80078ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f0:	9105      	str	r1, [sp, #20]
 80078f2:	6800      	ldr	r0, [r0, #0]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	a902      	add	r1, sp, #8
 80078f8:	f001 fe58 	bl	80095ac <_svfiprintf_r>
 80078fc:	9b02      	ldr	r3, [sp, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	b01c      	add	sp, #112	; 0x70
 8007904:	f85d eb04 	ldr.w	lr, [sp], #4
 8007908:	b003      	add	sp, #12
 800790a:	4770      	bx	lr
 800790c:	20000014 	.word	0x20000014
 8007910:	ffff0208 	.word	0xffff0208

08007914 <__swbuf_r>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	460e      	mov	r6, r1
 8007918:	4614      	mov	r4, r2
 800791a:	4605      	mov	r5, r0
 800791c:	b118      	cbz	r0, 8007926 <__swbuf_r+0x12>
 800791e:	6983      	ldr	r3, [r0, #24]
 8007920:	b90b      	cbnz	r3, 8007926 <__swbuf_r+0x12>
 8007922:	f001 f84d 	bl	80089c0 <__sinit>
 8007926:	4b21      	ldr	r3, [pc, #132]	; (80079ac <__swbuf_r+0x98>)
 8007928:	429c      	cmp	r4, r3
 800792a:	d12b      	bne.n	8007984 <__swbuf_r+0x70>
 800792c:	686c      	ldr	r4, [r5, #4]
 800792e:	69a3      	ldr	r3, [r4, #24]
 8007930:	60a3      	str	r3, [r4, #8]
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	071a      	lsls	r2, r3, #28
 8007936:	d52f      	bpl.n	8007998 <__swbuf_r+0x84>
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	b36b      	cbz	r3, 8007998 <__swbuf_r+0x84>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	6820      	ldr	r0, [r4, #0]
 8007940:	1ac0      	subs	r0, r0, r3
 8007942:	6963      	ldr	r3, [r4, #20]
 8007944:	b2f6      	uxtb	r6, r6
 8007946:	4283      	cmp	r3, r0
 8007948:	4637      	mov	r7, r6
 800794a:	dc04      	bgt.n	8007956 <__swbuf_r+0x42>
 800794c:	4621      	mov	r1, r4
 800794e:	4628      	mov	r0, r5
 8007950:	f000 ffa2 	bl	8008898 <_fflush_r>
 8007954:	bb30      	cbnz	r0, 80079a4 <__swbuf_r+0x90>
 8007956:	68a3      	ldr	r3, [r4, #8]
 8007958:	3b01      	subs	r3, #1
 800795a:	60a3      	str	r3, [r4, #8]
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	6022      	str	r2, [r4, #0]
 8007962:	701e      	strb	r6, [r3, #0]
 8007964:	6963      	ldr	r3, [r4, #20]
 8007966:	3001      	adds	r0, #1
 8007968:	4283      	cmp	r3, r0
 800796a:	d004      	beq.n	8007976 <__swbuf_r+0x62>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	07db      	lsls	r3, r3, #31
 8007970:	d506      	bpl.n	8007980 <__swbuf_r+0x6c>
 8007972:	2e0a      	cmp	r6, #10
 8007974:	d104      	bne.n	8007980 <__swbuf_r+0x6c>
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	f000 ff8d 	bl	8008898 <_fflush_r>
 800797e:	b988      	cbnz	r0, 80079a4 <__swbuf_r+0x90>
 8007980:	4638      	mov	r0, r7
 8007982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007984:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <__swbuf_r+0x9c>)
 8007986:	429c      	cmp	r4, r3
 8007988:	d101      	bne.n	800798e <__swbuf_r+0x7a>
 800798a:	68ac      	ldr	r4, [r5, #8]
 800798c:	e7cf      	b.n	800792e <__swbuf_r+0x1a>
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <__swbuf_r+0xa0>)
 8007990:	429c      	cmp	r4, r3
 8007992:	bf08      	it	eq
 8007994:	68ec      	ldreq	r4, [r5, #12]
 8007996:	e7ca      	b.n	800792e <__swbuf_r+0x1a>
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f000 f80c 	bl	80079b8 <__swsetup_r>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d0cb      	beq.n	800793c <__swbuf_r+0x28>
 80079a4:	f04f 37ff 	mov.w	r7, #4294967295
 80079a8:	e7ea      	b.n	8007980 <__swbuf_r+0x6c>
 80079aa:	bf00      	nop
 80079ac:	0800c114 	.word	0x0800c114
 80079b0:	0800c134 	.word	0x0800c134
 80079b4:	0800c0f4 	.word	0x0800c0f4

080079b8 <__swsetup_r>:
 80079b8:	4b32      	ldr	r3, [pc, #200]	; (8007a84 <__swsetup_r+0xcc>)
 80079ba:	b570      	push	{r4, r5, r6, lr}
 80079bc:	681d      	ldr	r5, [r3, #0]
 80079be:	4606      	mov	r6, r0
 80079c0:	460c      	mov	r4, r1
 80079c2:	b125      	cbz	r5, 80079ce <__swsetup_r+0x16>
 80079c4:	69ab      	ldr	r3, [r5, #24]
 80079c6:	b913      	cbnz	r3, 80079ce <__swsetup_r+0x16>
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 fff9 	bl	80089c0 <__sinit>
 80079ce:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <__swsetup_r+0xd0>)
 80079d0:	429c      	cmp	r4, r3
 80079d2:	d10f      	bne.n	80079f4 <__swsetup_r+0x3c>
 80079d4:	686c      	ldr	r4, [r5, #4]
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079dc:	0719      	lsls	r1, r3, #28
 80079de:	d42c      	bmi.n	8007a3a <__swsetup_r+0x82>
 80079e0:	06dd      	lsls	r5, r3, #27
 80079e2:	d411      	bmi.n	8007a08 <__swsetup_r+0x50>
 80079e4:	2309      	movs	r3, #9
 80079e6:	6033      	str	r3, [r6, #0]
 80079e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079ec:	81a3      	strh	r3, [r4, #12]
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295
 80079f2:	e03e      	b.n	8007a72 <__swsetup_r+0xba>
 80079f4:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <__swsetup_r+0xd4>)
 80079f6:	429c      	cmp	r4, r3
 80079f8:	d101      	bne.n	80079fe <__swsetup_r+0x46>
 80079fa:	68ac      	ldr	r4, [r5, #8]
 80079fc:	e7eb      	b.n	80079d6 <__swsetup_r+0x1e>
 80079fe:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <__swsetup_r+0xd8>)
 8007a00:	429c      	cmp	r4, r3
 8007a02:	bf08      	it	eq
 8007a04:	68ec      	ldreq	r4, [r5, #12]
 8007a06:	e7e6      	b.n	80079d6 <__swsetup_r+0x1e>
 8007a08:	0758      	lsls	r0, r3, #29
 8007a0a:	d512      	bpl.n	8007a32 <__swsetup_r+0x7a>
 8007a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a0e:	b141      	cbz	r1, 8007a22 <__swsetup_r+0x6a>
 8007a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a14:	4299      	cmp	r1, r3
 8007a16:	d002      	beq.n	8007a1e <__swsetup_r+0x66>
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f001 fc8b 	bl	8009334 <_free_r>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6363      	str	r3, [r4, #52]	; 0x34
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6063      	str	r3, [r4, #4]
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f043 0308 	orr.w	r3, r3, #8
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	b94b      	cbnz	r3, 8007a52 <__swsetup_r+0x9a>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a48:	d003      	beq.n	8007a52 <__swsetup_r+0x9a>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f001 f881 	bl	8008b54 <__smakebuf_r>
 8007a52:	89a0      	ldrh	r0, [r4, #12]
 8007a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a58:	f010 0301 	ands.w	r3, r0, #1
 8007a5c:	d00a      	beq.n	8007a74 <__swsetup_r+0xbc>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60a3      	str	r3, [r4, #8]
 8007a62:	6963      	ldr	r3, [r4, #20]
 8007a64:	425b      	negs	r3, r3
 8007a66:	61a3      	str	r3, [r4, #24]
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	b943      	cbnz	r3, 8007a7e <__swsetup_r+0xc6>
 8007a6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a70:	d1ba      	bne.n	80079e8 <__swsetup_r+0x30>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	0781      	lsls	r1, r0, #30
 8007a76:	bf58      	it	pl
 8007a78:	6963      	ldrpl	r3, [r4, #20]
 8007a7a:	60a3      	str	r3, [r4, #8]
 8007a7c:	e7f4      	b.n	8007a68 <__swsetup_r+0xb0>
 8007a7e:	2000      	movs	r0, #0
 8007a80:	e7f7      	b.n	8007a72 <__swsetup_r+0xba>
 8007a82:	bf00      	nop
 8007a84:	20000014 	.word	0x20000014
 8007a88:	0800c114 	.word	0x0800c114
 8007a8c:	0800c134 	.word	0x0800c134
 8007a90:	0800c0f4 	.word	0x0800c0f4

08007a94 <quorem>:
 8007a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	6903      	ldr	r3, [r0, #16]
 8007a9a:	690c      	ldr	r4, [r1, #16]
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	f2c0 8081 	blt.w	8007ba6 <quorem+0x112>
 8007aa4:	3c01      	subs	r4, #1
 8007aa6:	f101 0814 	add.w	r8, r1, #20
 8007aaa:	f100 0514 	add.w	r5, r0, #20
 8007aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007abc:	3301      	adds	r3, #1
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ac8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007acc:	d331      	bcc.n	8007b32 <quorem+0x9e>
 8007ace:	f04f 0e00 	mov.w	lr, #0
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	46ac      	mov	ip, r5
 8007ad6:	46f2      	mov	sl, lr
 8007ad8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007adc:	b293      	uxth	r3, r2
 8007ade:	fb06 e303 	mla	r3, r6, r3, lr
 8007ae2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	ebaa 0303 	sub.w	r3, sl, r3
 8007aec:	f8dc a000 	ldr.w	sl, [ip]
 8007af0:	0c12      	lsrs	r2, r2, #16
 8007af2:	fa13 f38a 	uxtah	r3, r3, sl
 8007af6:	fb06 e202 	mla	r2, r6, r2, lr
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b02:	b292      	uxth	r2, r2
 8007b04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b10:	4581      	cmp	r9, r0
 8007b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b16:	f84c 3b04 	str.w	r3, [ip], #4
 8007b1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b1e:	d2db      	bcs.n	8007ad8 <quorem+0x44>
 8007b20:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b24:	b92b      	cbnz	r3, 8007b32 <quorem+0x9e>
 8007b26:	9b01      	ldr	r3, [sp, #4]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	429d      	cmp	r5, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	d32e      	bcc.n	8007b8e <quorem+0xfa>
 8007b30:	613c      	str	r4, [r7, #16]
 8007b32:	4638      	mov	r0, r7
 8007b34:	f001 fae6 	bl	8009104 <__mcmp>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	db24      	blt.n	8007b86 <quorem+0xf2>
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f04f 0c00 	mov.w	ip, #0
 8007b44:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b48:	f8d0 e000 	ldr.w	lr, [r0]
 8007b4c:	b293      	uxth	r3, r2
 8007b4e:	ebac 0303 	sub.w	r3, ip, r3
 8007b52:	0c12      	lsrs	r2, r2, #16
 8007b54:	fa13 f38e 	uxtah	r3, r3, lr
 8007b58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b66:	45c1      	cmp	r9, r8
 8007b68:	f840 3b04 	str.w	r3, [r0], #4
 8007b6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b70:	d2e8      	bcs.n	8007b44 <quorem+0xb0>
 8007b72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b7a:	b922      	cbnz	r2, 8007b86 <quorem+0xf2>
 8007b7c:	3b04      	subs	r3, #4
 8007b7e:	429d      	cmp	r5, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	d30a      	bcc.n	8007b9a <quorem+0x106>
 8007b84:	613c      	str	r4, [r7, #16]
 8007b86:	4630      	mov	r0, r6
 8007b88:	b003      	add	sp, #12
 8007b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	3b04      	subs	r3, #4
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	d1cc      	bne.n	8007b30 <quorem+0x9c>
 8007b96:	3c01      	subs	r4, #1
 8007b98:	e7c7      	b.n	8007b2a <quorem+0x96>
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	d1f0      	bne.n	8007b84 <quorem+0xf0>
 8007ba2:	3c01      	subs	r4, #1
 8007ba4:	e7eb      	b.n	8007b7e <quorem+0xea>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e7ee      	b.n	8007b88 <quorem+0xf4>
 8007baa:	0000      	movs	r0, r0
 8007bac:	0000      	movs	r0, r0
	...

08007bb0 <_dtoa_r>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	ed2d 8b04 	vpush	{d8-d9}
 8007bb8:	ec57 6b10 	vmov	r6, r7, d0
 8007bbc:	b093      	sub	sp, #76	; 0x4c
 8007bbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bc4:	9106      	str	r1, [sp, #24]
 8007bc6:	ee10 aa10 	vmov	sl, s0
 8007bca:	4604      	mov	r4, r0
 8007bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8007bce:	930c      	str	r3, [sp, #48]	; 0x30
 8007bd0:	46bb      	mov	fp, r7
 8007bd2:	b975      	cbnz	r5, 8007bf2 <_dtoa_r+0x42>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f000 fffd 	bl	8008bd4 <malloc>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	6260      	str	r0, [r4, #36]	; 0x24
 8007bde:	b920      	cbnz	r0, 8007bea <_dtoa_r+0x3a>
 8007be0:	4ba7      	ldr	r3, [pc, #668]	; (8007e80 <_dtoa_r+0x2d0>)
 8007be2:	21ea      	movs	r1, #234	; 0xea
 8007be4:	48a7      	ldr	r0, [pc, #668]	; (8007e84 <_dtoa_r+0x2d4>)
 8007be6:	f001 ffa1 	bl	8009b2c <__assert_func>
 8007bea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bee:	6005      	str	r5, [r0, #0]
 8007bf0:	60c5      	str	r5, [r0, #12]
 8007bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf4:	6819      	ldr	r1, [r3, #0]
 8007bf6:	b151      	cbz	r1, 8007c0e <_dtoa_r+0x5e>
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	604a      	str	r2, [r1, #4]
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4093      	lsls	r3, r2
 8007c00:	608b      	str	r3, [r1, #8]
 8007c02:	4620      	mov	r0, r4
 8007c04:	f001 f83c 	bl	8008c80 <_Bfree>
 8007c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	1e3b      	subs	r3, r7, #0
 8007c10:	bfaa      	itet	ge
 8007c12:	2300      	movge	r3, #0
 8007c14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c18:	f8c8 3000 	strge.w	r3, [r8]
 8007c1c:	4b9a      	ldr	r3, [pc, #616]	; (8007e88 <_dtoa_r+0x2d8>)
 8007c1e:	bfbc      	itt	lt
 8007c20:	2201      	movlt	r2, #1
 8007c22:	f8c8 2000 	strlt.w	r2, [r8]
 8007c26:	ea33 030b 	bics.w	r3, r3, fp
 8007c2a:	d11b      	bne.n	8007c64 <_dtoa_r+0xb4>
 8007c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c38:	4333      	orrs	r3, r6
 8007c3a:	f000 8592 	beq.w	8008762 <_dtoa_r+0xbb2>
 8007c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c40:	b963      	cbnz	r3, 8007c5c <_dtoa_r+0xac>
 8007c42:	4b92      	ldr	r3, [pc, #584]	; (8007e8c <_dtoa_r+0x2dc>)
 8007c44:	e022      	b.n	8007c8c <_dtoa_r+0xdc>
 8007c46:	4b92      	ldr	r3, [pc, #584]	; (8007e90 <_dtoa_r+0x2e0>)
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	9801      	ldr	r0, [sp, #4]
 8007c52:	b013      	add	sp, #76	; 0x4c
 8007c54:	ecbd 8b04 	vpop	{d8-d9}
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	4b8b      	ldr	r3, [pc, #556]	; (8007e8c <_dtoa_r+0x2dc>)
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	3303      	adds	r3, #3
 8007c62:	e7f3      	b.n	8007c4c <_dtoa_r+0x9c>
 8007c64:	2200      	movs	r2, #0
 8007c66:	2300      	movs	r3, #0
 8007c68:	4650      	mov	r0, sl
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	f7f8 ff4c 	bl	8000b08 <__aeabi_dcmpeq>
 8007c70:	ec4b ab19 	vmov	d9, sl, fp
 8007c74:	4680      	mov	r8, r0
 8007c76:	b158      	cbz	r0, 8007c90 <_dtoa_r+0xe0>
 8007c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 856b 	beq.w	800875c <_dtoa_r+0xbac>
 8007c86:	4883      	ldr	r0, [pc, #524]	; (8007e94 <_dtoa_r+0x2e4>)
 8007c88:	6018      	str	r0, [r3, #0]
 8007c8a:	1e43      	subs	r3, r0, #1
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	e7df      	b.n	8007c50 <_dtoa_r+0xa0>
 8007c90:	ec4b ab10 	vmov	d0, sl, fp
 8007c94:	aa10      	add	r2, sp, #64	; 0x40
 8007c96:	a911      	add	r1, sp, #68	; 0x44
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f001 fad9 	bl	8009250 <__d2b>
 8007c9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007ca2:	ee08 0a10 	vmov	s16, r0
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	f000 8084 	beq.w	8007db4 <_dtoa_r+0x204>
 8007cac:	ee19 3a90 	vmov	r3, s19
 8007cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cb8:	4656      	mov	r6, sl
 8007cba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007cc6:	4b74      	ldr	r3, [pc, #464]	; (8007e98 <_dtoa_r+0x2e8>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4630      	mov	r0, r6
 8007ccc:	4639      	mov	r1, r7
 8007cce:	f7f8 fafb 	bl	80002c8 <__aeabi_dsub>
 8007cd2:	a365      	add	r3, pc, #404	; (adr r3, 8007e68 <_dtoa_r+0x2b8>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fcae 	bl	8000638 <__aeabi_dmul>
 8007cdc:	a364      	add	r3, pc, #400	; (adr r3, 8007e70 <_dtoa_r+0x2c0>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f7f8 faf3 	bl	80002cc <__adddf3>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	4628      	mov	r0, r5
 8007cea:	460f      	mov	r7, r1
 8007cec:	f7f8 fc3a 	bl	8000564 <__aeabi_i2d>
 8007cf0:	a361      	add	r3, pc, #388	; (adr r3, 8007e78 <_dtoa_r+0x2c8>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fc9f 	bl	8000638 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fae3 	bl	80002cc <__adddf3>
 8007d06:	4606      	mov	r6, r0
 8007d08:	460f      	mov	r7, r1
 8007d0a:	f7f8 ff45 	bl	8000b98 <__aeabi_d2iz>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	9000      	str	r0, [sp, #0]
 8007d12:	2300      	movs	r3, #0
 8007d14:	4630      	mov	r0, r6
 8007d16:	4639      	mov	r1, r7
 8007d18:	f7f8 ff00 	bl	8000b1c <__aeabi_dcmplt>
 8007d1c:	b150      	cbz	r0, 8007d34 <_dtoa_r+0x184>
 8007d1e:	9800      	ldr	r0, [sp, #0]
 8007d20:	f7f8 fc20 	bl	8000564 <__aeabi_i2d>
 8007d24:	4632      	mov	r2, r6
 8007d26:	463b      	mov	r3, r7
 8007d28:	f7f8 feee 	bl	8000b08 <__aeabi_dcmpeq>
 8007d2c:	b910      	cbnz	r0, 8007d34 <_dtoa_r+0x184>
 8007d2e:	9b00      	ldr	r3, [sp, #0]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	2b16      	cmp	r3, #22
 8007d38:	d85a      	bhi.n	8007df0 <_dtoa_r+0x240>
 8007d3a:	9a00      	ldr	r2, [sp, #0]
 8007d3c:	4b57      	ldr	r3, [pc, #348]	; (8007e9c <_dtoa_r+0x2ec>)
 8007d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	ec51 0b19 	vmov	r0, r1, d9
 8007d4a:	f7f8 fee7 	bl	8000b1c <__aeabi_dcmplt>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d050      	beq.n	8007df4 <_dtoa_r+0x244>
 8007d52:	9b00      	ldr	r3, [sp, #0]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d5e:	1b5d      	subs	r5, r3, r5
 8007d60:	1e6b      	subs	r3, r5, #1
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	bf45      	ittet	mi
 8007d66:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d6a:	9304      	strmi	r3, [sp, #16]
 8007d6c:	2300      	movpl	r3, #0
 8007d6e:	2300      	movmi	r3, #0
 8007d70:	bf4c      	ite	mi
 8007d72:	9305      	strmi	r3, [sp, #20]
 8007d74:	9304      	strpl	r3, [sp, #16]
 8007d76:	9b00      	ldr	r3, [sp, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	db3d      	blt.n	8007df8 <_dtoa_r+0x248>
 8007d7c:	9b05      	ldr	r3, [sp, #20]
 8007d7e:	9a00      	ldr	r2, [sp, #0]
 8007d80:	920a      	str	r2, [sp, #40]	; 0x28
 8007d82:	4413      	add	r3, r2
 8007d84:	9305      	str	r3, [sp, #20]
 8007d86:	2300      	movs	r3, #0
 8007d88:	9307      	str	r3, [sp, #28]
 8007d8a:	9b06      	ldr	r3, [sp, #24]
 8007d8c:	2b09      	cmp	r3, #9
 8007d8e:	f200 8089 	bhi.w	8007ea4 <_dtoa_r+0x2f4>
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	bfc4      	itt	gt
 8007d96:	3b04      	subgt	r3, #4
 8007d98:	9306      	strgt	r3, [sp, #24]
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8007da0:	bfcc      	ite	gt
 8007da2:	2500      	movgt	r5, #0
 8007da4:	2501      	movle	r5, #1
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	f200 8087 	bhi.w	8007eba <_dtoa_r+0x30a>
 8007dac:	e8df f003 	tbb	[pc, r3]
 8007db0:	59383a2d 	.word	0x59383a2d
 8007db4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007db8:	441d      	add	r5, r3
 8007dba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	bfc1      	itttt	gt
 8007dc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007dca:	fa0b f303 	lslgt.w	r3, fp, r3
 8007dce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007dd2:	bfda      	itte	le
 8007dd4:	f1c3 0320 	rsble	r3, r3, #32
 8007dd8:	fa06 f003 	lslle.w	r0, r6, r3
 8007ddc:	4318      	orrgt	r0, r3
 8007dde:	f7f8 fbb1 	bl	8000544 <__aeabi_ui2d>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4606      	mov	r6, r0
 8007de6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007dea:	3d01      	subs	r5, #1
 8007dec:	930e      	str	r3, [sp, #56]	; 0x38
 8007dee:	e76a      	b.n	8007cc6 <_dtoa_r+0x116>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e7b2      	b.n	8007d5a <_dtoa_r+0x1aa>
 8007df4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007df6:	e7b1      	b.n	8007d5c <_dtoa_r+0x1ac>
 8007df8:	9b04      	ldr	r3, [sp, #16]
 8007dfa:	9a00      	ldr	r2, [sp, #0]
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	4253      	negs	r3, r2
 8007e02:	9307      	str	r3, [sp, #28]
 8007e04:	2300      	movs	r3, #0
 8007e06:	930a      	str	r3, [sp, #40]	; 0x28
 8007e08:	e7bf      	b.n	8007d8a <_dtoa_r+0x1da>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9308      	str	r3, [sp, #32]
 8007e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dc55      	bgt.n	8007ec0 <_dtoa_r+0x310>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e1e:	e00c      	b.n	8007e3a <_dtoa_r+0x28a>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e7f3      	b.n	8007e0c <_dtoa_r+0x25c>
 8007e24:	2300      	movs	r3, #0
 8007e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e28:	9308      	str	r3, [sp, #32]
 8007e2a:	9b00      	ldr	r3, [sp, #0]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	3301      	adds	r3, #1
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	9303      	str	r3, [sp, #12]
 8007e36:	bfb8      	it	lt
 8007e38:	2301      	movlt	r3, #1
 8007e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	6042      	str	r2, [r0, #4]
 8007e40:	2204      	movs	r2, #4
 8007e42:	f102 0614 	add.w	r6, r2, #20
 8007e46:	429e      	cmp	r6, r3
 8007e48:	6841      	ldr	r1, [r0, #4]
 8007e4a:	d93d      	bls.n	8007ec8 <_dtoa_r+0x318>
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fed7 	bl	8008c00 <_Balloc>
 8007e52:	9001      	str	r0, [sp, #4]
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d13b      	bne.n	8007ed0 <_dtoa_r+0x320>
 8007e58:	4b11      	ldr	r3, [pc, #68]	; (8007ea0 <_dtoa_r+0x2f0>)
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e60:	e6c0      	b.n	8007be4 <_dtoa_r+0x34>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e7df      	b.n	8007e26 <_dtoa_r+0x276>
 8007e66:	bf00      	nop
 8007e68:	636f4361 	.word	0x636f4361
 8007e6c:	3fd287a7 	.word	0x3fd287a7
 8007e70:	8b60c8b3 	.word	0x8b60c8b3
 8007e74:	3fc68a28 	.word	0x3fc68a28
 8007e78:	509f79fb 	.word	0x509f79fb
 8007e7c:	3fd34413 	.word	0x3fd34413
 8007e80:	0800c071 	.word	0x0800c071
 8007e84:	0800c088 	.word	0x0800c088
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	0800c06d 	.word	0x0800c06d
 8007e90:	0800c064 	.word	0x0800c064
 8007e94:	0800c041 	.word	0x0800c041
 8007e98:	3ff80000 	.word	0x3ff80000
 8007e9c:	0800c1d8 	.word	0x0800c1d8
 8007ea0:	0800c0e3 	.word	0x0800c0e3
 8007ea4:	2501      	movs	r5, #1
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9306      	str	r3, [sp, #24]
 8007eaa:	9508      	str	r5, [sp, #32]
 8007eac:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2312      	movs	r3, #18
 8007eb8:	e7b0      	b.n	8007e1c <_dtoa_r+0x26c>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	9308      	str	r3, [sp, #32]
 8007ebe:	e7f5      	b.n	8007eac <_dtoa_r+0x2fc>
 8007ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ec6:	e7b8      	b.n	8007e3a <_dtoa_r+0x28a>
 8007ec8:	3101      	adds	r1, #1
 8007eca:	6041      	str	r1, [r0, #4]
 8007ecc:	0052      	lsls	r2, r2, #1
 8007ece:	e7b8      	b.n	8007e42 <_dtoa_r+0x292>
 8007ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed2:	9a01      	ldr	r2, [sp, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	2b0e      	cmp	r3, #14
 8007eda:	f200 809d 	bhi.w	8008018 <_dtoa_r+0x468>
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	f000 809a 	beq.w	8008018 <_dtoa_r+0x468>
 8007ee4:	9b00      	ldr	r3, [sp, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd32      	ble.n	8007f50 <_dtoa_r+0x3a0>
 8007eea:	4ab7      	ldr	r2, [pc, #732]	; (80081c8 <_dtoa_r+0x618>)
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ef8:	9b00      	ldr	r3, [sp, #0]
 8007efa:	05d8      	lsls	r0, r3, #23
 8007efc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f00:	d516      	bpl.n	8007f30 <_dtoa_r+0x380>
 8007f02:	4bb2      	ldr	r3, [pc, #712]	; (80081cc <_dtoa_r+0x61c>)
 8007f04:	ec51 0b19 	vmov	r0, r1, d9
 8007f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f0c:	f7f8 fcbe 	bl	800088c <__aeabi_ddiv>
 8007f10:	f007 070f 	and.w	r7, r7, #15
 8007f14:	4682      	mov	sl, r0
 8007f16:	468b      	mov	fp, r1
 8007f18:	2503      	movs	r5, #3
 8007f1a:	4eac      	ldr	r6, [pc, #688]	; (80081cc <_dtoa_r+0x61c>)
 8007f1c:	b957      	cbnz	r7, 8007f34 <_dtoa_r+0x384>
 8007f1e:	4642      	mov	r2, r8
 8007f20:	464b      	mov	r3, r9
 8007f22:	4650      	mov	r0, sl
 8007f24:	4659      	mov	r1, fp
 8007f26:	f7f8 fcb1 	bl	800088c <__aeabi_ddiv>
 8007f2a:	4682      	mov	sl, r0
 8007f2c:	468b      	mov	fp, r1
 8007f2e:	e028      	b.n	8007f82 <_dtoa_r+0x3d2>
 8007f30:	2502      	movs	r5, #2
 8007f32:	e7f2      	b.n	8007f1a <_dtoa_r+0x36a>
 8007f34:	07f9      	lsls	r1, r7, #31
 8007f36:	d508      	bpl.n	8007f4a <_dtoa_r+0x39a>
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f40:	f7f8 fb7a 	bl	8000638 <__aeabi_dmul>
 8007f44:	3501      	adds	r5, #1
 8007f46:	4680      	mov	r8, r0
 8007f48:	4689      	mov	r9, r1
 8007f4a:	107f      	asrs	r7, r7, #1
 8007f4c:	3608      	adds	r6, #8
 8007f4e:	e7e5      	b.n	8007f1c <_dtoa_r+0x36c>
 8007f50:	f000 809b 	beq.w	800808a <_dtoa_r+0x4da>
 8007f54:	9b00      	ldr	r3, [sp, #0]
 8007f56:	4f9d      	ldr	r7, [pc, #628]	; (80081cc <_dtoa_r+0x61c>)
 8007f58:	425e      	negs	r6, r3
 8007f5a:	4b9b      	ldr	r3, [pc, #620]	; (80081c8 <_dtoa_r+0x618>)
 8007f5c:	f006 020f 	and.w	r2, r6, #15
 8007f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	ec51 0b19 	vmov	r0, r1, d9
 8007f6c:	f7f8 fb64 	bl	8000638 <__aeabi_dmul>
 8007f70:	1136      	asrs	r6, r6, #4
 8007f72:	4682      	mov	sl, r0
 8007f74:	468b      	mov	fp, r1
 8007f76:	2300      	movs	r3, #0
 8007f78:	2502      	movs	r5, #2
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	d17a      	bne.n	8008074 <_dtoa_r+0x4c4>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1d3      	bne.n	8007f2a <_dtoa_r+0x37a>
 8007f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 8082 	beq.w	800808e <_dtoa_r+0x4de>
 8007f8a:	4b91      	ldr	r3, [pc, #580]	; (80081d0 <_dtoa_r+0x620>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4650      	mov	r0, sl
 8007f90:	4659      	mov	r1, fp
 8007f92:	f7f8 fdc3 	bl	8000b1c <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d079      	beq.n	800808e <_dtoa_r+0x4de>
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d076      	beq.n	800808e <_dtoa_r+0x4de>
 8007fa0:	9b02      	ldr	r3, [sp, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dd36      	ble.n	8008014 <_dtoa_r+0x464>
 8007fa6:	9b00      	ldr	r3, [sp, #0]
 8007fa8:	4650      	mov	r0, sl
 8007faa:	4659      	mov	r1, fp
 8007fac:	1e5f      	subs	r7, r3, #1
 8007fae:	2200      	movs	r2, #0
 8007fb0:	4b88      	ldr	r3, [pc, #544]	; (80081d4 <_dtoa_r+0x624>)
 8007fb2:	f7f8 fb41 	bl	8000638 <__aeabi_dmul>
 8007fb6:	9e02      	ldr	r6, [sp, #8]
 8007fb8:	4682      	mov	sl, r0
 8007fba:	468b      	mov	fp, r1
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f7f8 fad0 	bl	8000564 <__aeabi_i2d>
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	465b      	mov	r3, fp
 8007fc8:	f7f8 fb36 	bl	8000638 <__aeabi_dmul>
 8007fcc:	4b82      	ldr	r3, [pc, #520]	; (80081d8 <_dtoa_r+0x628>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f7f8 f97c 	bl	80002cc <__adddf3>
 8007fd4:	46d0      	mov	r8, sl
 8007fd6:	46d9      	mov	r9, fp
 8007fd8:	4682      	mov	sl, r0
 8007fda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	d158      	bne.n	8008094 <_dtoa_r+0x4e4>
 8007fe2:	4b7e      	ldr	r3, [pc, #504]	; (80081dc <_dtoa_r+0x62c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	4649      	mov	r1, r9
 8007fea:	f7f8 f96d 	bl	80002c8 <__aeabi_dsub>
 8007fee:	4652      	mov	r2, sl
 8007ff0:	465b      	mov	r3, fp
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	4689      	mov	r9, r1
 8007ff6:	f7f8 fdaf 	bl	8000b58 <__aeabi_dcmpgt>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f040 8295 	bne.w	800852a <_dtoa_r+0x97a>
 8008000:	4652      	mov	r2, sl
 8008002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008006:	4640      	mov	r0, r8
 8008008:	4649      	mov	r1, r9
 800800a:	f7f8 fd87 	bl	8000b1c <__aeabi_dcmplt>
 800800e:	2800      	cmp	r0, #0
 8008010:	f040 8289 	bne.w	8008526 <_dtoa_r+0x976>
 8008014:	ec5b ab19 	vmov	sl, fp, d9
 8008018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800801a:	2b00      	cmp	r3, #0
 800801c:	f2c0 8148 	blt.w	80082b0 <_dtoa_r+0x700>
 8008020:	9a00      	ldr	r2, [sp, #0]
 8008022:	2a0e      	cmp	r2, #14
 8008024:	f300 8144 	bgt.w	80082b0 <_dtoa_r+0x700>
 8008028:	4b67      	ldr	r3, [pc, #412]	; (80081c8 <_dtoa_r+0x618>)
 800802a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800802e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	f280 80d5 	bge.w	80081e4 <_dtoa_r+0x634>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f300 80d1 	bgt.w	80081e4 <_dtoa_r+0x634>
 8008042:	f040 826f 	bne.w	8008524 <_dtoa_r+0x974>
 8008046:	4b65      	ldr	r3, [pc, #404]	; (80081dc <_dtoa_r+0x62c>)
 8008048:	2200      	movs	r2, #0
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 faf3 	bl	8000638 <__aeabi_dmul>
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	f7f8 fd75 	bl	8000b44 <__aeabi_dcmpge>
 800805a:	9e03      	ldr	r6, [sp, #12]
 800805c:	4637      	mov	r7, r6
 800805e:	2800      	cmp	r0, #0
 8008060:	f040 8245 	bne.w	80084ee <_dtoa_r+0x93e>
 8008064:	9d01      	ldr	r5, [sp, #4]
 8008066:	2331      	movs	r3, #49	; 0x31
 8008068:	f805 3b01 	strb.w	r3, [r5], #1
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	3301      	adds	r3, #1
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	e240      	b.n	80084f6 <_dtoa_r+0x946>
 8008074:	07f2      	lsls	r2, r6, #31
 8008076:	d505      	bpl.n	8008084 <_dtoa_r+0x4d4>
 8008078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800807c:	f7f8 fadc 	bl	8000638 <__aeabi_dmul>
 8008080:	3501      	adds	r5, #1
 8008082:	2301      	movs	r3, #1
 8008084:	1076      	asrs	r6, r6, #1
 8008086:	3708      	adds	r7, #8
 8008088:	e777      	b.n	8007f7a <_dtoa_r+0x3ca>
 800808a:	2502      	movs	r5, #2
 800808c:	e779      	b.n	8007f82 <_dtoa_r+0x3d2>
 800808e:	9f00      	ldr	r7, [sp, #0]
 8008090:	9e03      	ldr	r6, [sp, #12]
 8008092:	e794      	b.n	8007fbe <_dtoa_r+0x40e>
 8008094:	9901      	ldr	r1, [sp, #4]
 8008096:	4b4c      	ldr	r3, [pc, #304]	; (80081c8 <_dtoa_r+0x618>)
 8008098:	4431      	add	r1, r6
 800809a:	910d      	str	r1, [sp, #52]	; 0x34
 800809c:	9908      	ldr	r1, [sp, #32]
 800809e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80080a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080a6:	2900      	cmp	r1, #0
 80080a8:	d043      	beq.n	8008132 <_dtoa_r+0x582>
 80080aa:	494d      	ldr	r1, [pc, #308]	; (80081e0 <_dtoa_r+0x630>)
 80080ac:	2000      	movs	r0, #0
 80080ae:	f7f8 fbed 	bl	800088c <__aeabi_ddiv>
 80080b2:	4652      	mov	r2, sl
 80080b4:	465b      	mov	r3, fp
 80080b6:	f7f8 f907 	bl	80002c8 <__aeabi_dsub>
 80080ba:	9d01      	ldr	r5, [sp, #4]
 80080bc:	4682      	mov	sl, r0
 80080be:	468b      	mov	fp, r1
 80080c0:	4649      	mov	r1, r9
 80080c2:	4640      	mov	r0, r8
 80080c4:	f7f8 fd68 	bl	8000b98 <__aeabi_d2iz>
 80080c8:	4606      	mov	r6, r0
 80080ca:	f7f8 fa4b 	bl	8000564 <__aeabi_i2d>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4640      	mov	r0, r8
 80080d4:	4649      	mov	r1, r9
 80080d6:	f7f8 f8f7 	bl	80002c8 <__aeabi_dsub>
 80080da:	3630      	adds	r6, #48	; 0x30
 80080dc:	f805 6b01 	strb.w	r6, [r5], #1
 80080e0:	4652      	mov	r2, sl
 80080e2:	465b      	mov	r3, fp
 80080e4:	4680      	mov	r8, r0
 80080e6:	4689      	mov	r9, r1
 80080e8:	f7f8 fd18 	bl	8000b1c <__aeabi_dcmplt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d163      	bne.n	80081b8 <_dtoa_r+0x608>
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	4936      	ldr	r1, [pc, #216]	; (80081d0 <_dtoa_r+0x620>)
 80080f6:	2000      	movs	r0, #0
 80080f8:	f7f8 f8e6 	bl	80002c8 <__aeabi_dsub>
 80080fc:	4652      	mov	r2, sl
 80080fe:	465b      	mov	r3, fp
 8008100:	f7f8 fd0c 	bl	8000b1c <__aeabi_dcmplt>
 8008104:	2800      	cmp	r0, #0
 8008106:	f040 80b5 	bne.w	8008274 <_dtoa_r+0x6c4>
 800810a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800810c:	429d      	cmp	r5, r3
 800810e:	d081      	beq.n	8008014 <_dtoa_r+0x464>
 8008110:	4b30      	ldr	r3, [pc, #192]	; (80081d4 <_dtoa_r+0x624>)
 8008112:	2200      	movs	r2, #0
 8008114:	4650      	mov	r0, sl
 8008116:	4659      	mov	r1, fp
 8008118:	f7f8 fa8e 	bl	8000638 <__aeabi_dmul>
 800811c:	4b2d      	ldr	r3, [pc, #180]	; (80081d4 <_dtoa_r+0x624>)
 800811e:	4682      	mov	sl, r0
 8008120:	468b      	mov	fp, r1
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	2200      	movs	r2, #0
 8008128:	f7f8 fa86 	bl	8000638 <__aeabi_dmul>
 800812c:	4680      	mov	r8, r0
 800812e:	4689      	mov	r9, r1
 8008130:	e7c6      	b.n	80080c0 <_dtoa_r+0x510>
 8008132:	4650      	mov	r0, sl
 8008134:	4659      	mov	r1, fp
 8008136:	f7f8 fa7f 	bl	8000638 <__aeabi_dmul>
 800813a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800813c:	9d01      	ldr	r5, [sp, #4]
 800813e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008140:	4682      	mov	sl, r0
 8008142:	468b      	mov	fp, r1
 8008144:	4649      	mov	r1, r9
 8008146:	4640      	mov	r0, r8
 8008148:	f7f8 fd26 	bl	8000b98 <__aeabi_d2iz>
 800814c:	4606      	mov	r6, r0
 800814e:	f7f8 fa09 	bl	8000564 <__aeabi_i2d>
 8008152:	3630      	adds	r6, #48	; 0x30
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4640      	mov	r0, r8
 800815a:	4649      	mov	r1, r9
 800815c:	f7f8 f8b4 	bl	80002c8 <__aeabi_dsub>
 8008160:	f805 6b01 	strb.w	r6, [r5], #1
 8008164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008166:	429d      	cmp	r5, r3
 8008168:	4680      	mov	r8, r0
 800816a:	4689      	mov	r9, r1
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	d124      	bne.n	80081bc <_dtoa_r+0x60c>
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <_dtoa_r+0x630>)
 8008174:	4650      	mov	r0, sl
 8008176:	4659      	mov	r1, fp
 8008178:	f7f8 f8a8 	bl	80002cc <__adddf3>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4640      	mov	r0, r8
 8008182:	4649      	mov	r1, r9
 8008184:	f7f8 fce8 	bl	8000b58 <__aeabi_dcmpgt>
 8008188:	2800      	cmp	r0, #0
 800818a:	d173      	bne.n	8008274 <_dtoa_r+0x6c4>
 800818c:	4652      	mov	r2, sl
 800818e:	465b      	mov	r3, fp
 8008190:	4913      	ldr	r1, [pc, #76]	; (80081e0 <_dtoa_r+0x630>)
 8008192:	2000      	movs	r0, #0
 8008194:	f7f8 f898 	bl	80002c8 <__aeabi_dsub>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4640      	mov	r0, r8
 800819e:	4649      	mov	r1, r9
 80081a0:	f7f8 fcbc 	bl	8000b1c <__aeabi_dcmplt>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	f43f af35 	beq.w	8008014 <_dtoa_r+0x464>
 80081aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081ac:	1e6b      	subs	r3, r5, #1
 80081ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081b4:	2b30      	cmp	r3, #48	; 0x30
 80081b6:	d0f8      	beq.n	80081aa <_dtoa_r+0x5fa>
 80081b8:	9700      	str	r7, [sp, #0]
 80081ba:	e049      	b.n	8008250 <_dtoa_r+0x6a0>
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <_dtoa_r+0x624>)
 80081be:	f7f8 fa3b 	bl	8000638 <__aeabi_dmul>
 80081c2:	4680      	mov	r8, r0
 80081c4:	4689      	mov	r9, r1
 80081c6:	e7bd      	b.n	8008144 <_dtoa_r+0x594>
 80081c8:	0800c1d8 	.word	0x0800c1d8
 80081cc:	0800c1b0 	.word	0x0800c1b0
 80081d0:	3ff00000 	.word	0x3ff00000
 80081d4:	40240000 	.word	0x40240000
 80081d8:	401c0000 	.word	0x401c0000
 80081dc:	40140000 	.word	0x40140000
 80081e0:	3fe00000 	.word	0x3fe00000
 80081e4:	9d01      	ldr	r5, [sp, #4]
 80081e6:	4656      	mov	r6, sl
 80081e8:	465f      	mov	r7, fp
 80081ea:	4642      	mov	r2, r8
 80081ec:	464b      	mov	r3, r9
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	f7f8 fb4b 	bl	800088c <__aeabi_ddiv>
 80081f6:	f7f8 fccf 	bl	8000b98 <__aeabi_d2iz>
 80081fa:	4682      	mov	sl, r0
 80081fc:	f7f8 f9b2 	bl	8000564 <__aeabi_i2d>
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	f7f8 fa18 	bl	8000638 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4630      	mov	r0, r6
 800820e:	4639      	mov	r1, r7
 8008210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008214:	f7f8 f858 	bl	80002c8 <__aeabi_dsub>
 8008218:	f805 6b01 	strb.w	r6, [r5], #1
 800821c:	9e01      	ldr	r6, [sp, #4]
 800821e:	9f03      	ldr	r7, [sp, #12]
 8008220:	1bae      	subs	r6, r5, r6
 8008222:	42b7      	cmp	r7, r6
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	d135      	bne.n	8008296 <_dtoa_r+0x6e6>
 800822a:	f7f8 f84f 	bl	80002cc <__adddf3>
 800822e:	4642      	mov	r2, r8
 8008230:	464b      	mov	r3, r9
 8008232:	4606      	mov	r6, r0
 8008234:	460f      	mov	r7, r1
 8008236:	f7f8 fc8f 	bl	8000b58 <__aeabi_dcmpgt>
 800823a:	b9d0      	cbnz	r0, 8008272 <_dtoa_r+0x6c2>
 800823c:	4642      	mov	r2, r8
 800823e:	464b      	mov	r3, r9
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f7f8 fc60 	bl	8000b08 <__aeabi_dcmpeq>
 8008248:	b110      	cbz	r0, 8008250 <_dtoa_r+0x6a0>
 800824a:	f01a 0f01 	tst.w	sl, #1
 800824e:	d110      	bne.n	8008272 <_dtoa_r+0x6c2>
 8008250:	4620      	mov	r0, r4
 8008252:	ee18 1a10 	vmov	r1, s16
 8008256:	f000 fd13 	bl	8008c80 <_Bfree>
 800825a:	2300      	movs	r3, #0
 800825c:	9800      	ldr	r0, [sp, #0]
 800825e:	702b      	strb	r3, [r5, #0]
 8008260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008262:	3001      	adds	r0, #1
 8008264:	6018      	str	r0, [r3, #0]
 8008266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008268:	2b00      	cmp	r3, #0
 800826a:	f43f acf1 	beq.w	8007c50 <_dtoa_r+0xa0>
 800826e:	601d      	str	r5, [r3, #0]
 8008270:	e4ee      	b.n	8007c50 <_dtoa_r+0xa0>
 8008272:	9f00      	ldr	r7, [sp, #0]
 8008274:	462b      	mov	r3, r5
 8008276:	461d      	mov	r5, r3
 8008278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800827c:	2a39      	cmp	r2, #57	; 0x39
 800827e:	d106      	bne.n	800828e <_dtoa_r+0x6de>
 8008280:	9a01      	ldr	r2, [sp, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d1f7      	bne.n	8008276 <_dtoa_r+0x6c6>
 8008286:	9901      	ldr	r1, [sp, #4]
 8008288:	2230      	movs	r2, #48	; 0x30
 800828a:	3701      	adds	r7, #1
 800828c:	700a      	strb	r2, [r1, #0]
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	3201      	adds	r2, #1
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e790      	b.n	80081b8 <_dtoa_r+0x608>
 8008296:	4ba6      	ldr	r3, [pc, #664]	; (8008530 <_dtoa_r+0x980>)
 8008298:	2200      	movs	r2, #0
 800829a:	f7f8 f9cd 	bl	8000638 <__aeabi_dmul>
 800829e:	2200      	movs	r2, #0
 80082a0:	2300      	movs	r3, #0
 80082a2:	4606      	mov	r6, r0
 80082a4:	460f      	mov	r7, r1
 80082a6:	f7f8 fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d09d      	beq.n	80081ea <_dtoa_r+0x63a>
 80082ae:	e7cf      	b.n	8008250 <_dtoa_r+0x6a0>
 80082b0:	9a08      	ldr	r2, [sp, #32]
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	f000 80d7 	beq.w	8008466 <_dtoa_r+0x8b6>
 80082b8:	9a06      	ldr	r2, [sp, #24]
 80082ba:	2a01      	cmp	r2, #1
 80082bc:	f300 80ba 	bgt.w	8008434 <_dtoa_r+0x884>
 80082c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	f000 80b2 	beq.w	800842c <_dtoa_r+0x87c>
 80082c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082cc:	9e07      	ldr	r6, [sp, #28]
 80082ce:	9d04      	ldr	r5, [sp, #16]
 80082d0:	9a04      	ldr	r2, [sp, #16]
 80082d2:	441a      	add	r2, r3
 80082d4:	9204      	str	r2, [sp, #16]
 80082d6:	9a05      	ldr	r2, [sp, #20]
 80082d8:	2101      	movs	r1, #1
 80082da:	441a      	add	r2, r3
 80082dc:	4620      	mov	r0, r4
 80082de:	9205      	str	r2, [sp, #20]
 80082e0:	f000 fd86 	bl	8008df0 <__i2b>
 80082e4:	4607      	mov	r7, r0
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	dd0c      	ble.n	8008304 <_dtoa_r+0x754>
 80082ea:	9b05      	ldr	r3, [sp, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd09      	ble.n	8008304 <_dtoa_r+0x754>
 80082f0:	42ab      	cmp	r3, r5
 80082f2:	9a04      	ldr	r2, [sp, #16]
 80082f4:	bfa8      	it	ge
 80082f6:	462b      	movge	r3, r5
 80082f8:	1ad2      	subs	r2, r2, r3
 80082fa:	9204      	str	r2, [sp, #16]
 80082fc:	9a05      	ldr	r2, [sp, #20]
 80082fe:	1aed      	subs	r5, r5, r3
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	9305      	str	r3, [sp, #20]
 8008304:	9b07      	ldr	r3, [sp, #28]
 8008306:	b31b      	cbz	r3, 8008350 <_dtoa_r+0x7a0>
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 80af 	beq.w	800846e <_dtoa_r+0x8be>
 8008310:	2e00      	cmp	r6, #0
 8008312:	dd13      	ble.n	800833c <_dtoa_r+0x78c>
 8008314:	4639      	mov	r1, r7
 8008316:	4632      	mov	r2, r6
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fe29 	bl	8008f70 <__pow5mult>
 800831e:	ee18 2a10 	vmov	r2, s16
 8008322:	4601      	mov	r1, r0
 8008324:	4607      	mov	r7, r0
 8008326:	4620      	mov	r0, r4
 8008328:	f000 fd78 	bl	8008e1c <__multiply>
 800832c:	ee18 1a10 	vmov	r1, s16
 8008330:	4680      	mov	r8, r0
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fca4 	bl	8008c80 <_Bfree>
 8008338:	ee08 8a10 	vmov	s16, r8
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	1b9a      	subs	r2, r3, r6
 8008340:	d006      	beq.n	8008350 <_dtoa_r+0x7a0>
 8008342:	ee18 1a10 	vmov	r1, s16
 8008346:	4620      	mov	r0, r4
 8008348:	f000 fe12 	bl	8008f70 <__pow5mult>
 800834c:	ee08 0a10 	vmov	s16, r0
 8008350:	2101      	movs	r1, #1
 8008352:	4620      	mov	r0, r4
 8008354:	f000 fd4c 	bl	8008df0 <__i2b>
 8008358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	4606      	mov	r6, r0
 800835e:	f340 8088 	ble.w	8008472 <_dtoa_r+0x8c2>
 8008362:	461a      	mov	r2, r3
 8008364:	4601      	mov	r1, r0
 8008366:	4620      	mov	r0, r4
 8008368:	f000 fe02 	bl	8008f70 <__pow5mult>
 800836c:	9b06      	ldr	r3, [sp, #24]
 800836e:	2b01      	cmp	r3, #1
 8008370:	4606      	mov	r6, r0
 8008372:	f340 8081 	ble.w	8008478 <_dtoa_r+0x8c8>
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	6933      	ldr	r3, [r6, #16]
 800837c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008380:	6918      	ldr	r0, [r3, #16]
 8008382:	f000 fce5 	bl	8008d50 <__hi0bits>
 8008386:	f1c0 0020 	rsb	r0, r0, #32
 800838a:	9b05      	ldr	r3, [sp, #20]
 800838c:	4418      	add	r0, r3
 800838e:	f010 001f 	ands.w	r0, r0, #31
 8008392:	f000 8092 	beq.w	80084ba <_dtoa_r+0x90a>
 8008396:	f1c0 0320 	rsb	r3, r0, #32
 800839a:	2b04      	cmp	r3, #4
 800839c:	f340 808a 	ble.w	80084b4 <_dtoa_r+0x904>
 80083a0:	f1c0 001c 	rsb	r0, r0, #28
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	4403      	add	r3, r0
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	9b05      	ldr	r3, [sp, #20]
 80083ac:	4403      	add	r3, r0
 80083ae:	4405      	add	r5, r0
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	9b04      	ldr	r3, [sp, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd07      	ble.n	80083c8 <_dtoa_r+0x818>
 80083b8:	ee18 1a10 	vmov	r1, s16
 80083bc:	461a      	mov	r2, r3
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 fe30 	bl	8009024 <__lshift>
 80083c4:	ee08 0a10 	vmov	s16, r0
 80083c8:	9b05      	ldr	r3, [sp, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dd05      	ble.n	80083da <_dtoa_r+0x82a>
 80083ce:	4631      	mov	r1, r6
 80083d0:	461a      	mov	r2, r3
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fe26 	bl	8009024 <__lshift>
 80083d8:	4606      	mov	r6, r0
 80083da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d06e      	beq.n	80084be <_dtoa_r+0x90e>
 80083e0:	ee18 0a10 	vmov	r0, s16
 80083e4:	4631      	mov	r1, r6
 80083e6:	f000 fe8d 	bl	8009104 <__mcmp>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	da67      	bge.n	80084be <_dtoa_r+0x90e>
 80083ee:	9b00      	ldr	r3, [sp, #0]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	ee18 1a10 	vmov	r1, s16
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	220a      	movs	r2, #10
 80083fa:	2300      	movs	r3, #0
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fc61 	bl	8008cc4 <__multadd>
 8008402:	9b08      	ldr	r3, [sp, #32]
 8008404:	ee08 0a10 	vmov	s16, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 81b1 	beq.w	8008770 <_dtoa_r+0xbc0>
 800840e:	2300      	movs	r3, #0
 8008410:	4639      	mov	r1, r7
 8008412:	220a      	movs	r2, #10
 8008414:	4620      	mov	r0, r4
 8008416:	f000 fc55 	bl	8008cc4 <__multadd>
 800841a:	9b02      	ldr	r3, [sp, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	4607      	mov	r7, r0
 8008420:	f300 808e 	bgt.w	8008540 <_dtoa_r+0x990>
 8008424:	9b06      	ldr	r3, [sp, #24]
 8008426:	2b02      	cmp	r3, #2
 8008428:	dc51      	bgt.n	80084ce <_dtoa_r+0x91e>
 800842a:	e089      	b.n	8008540 <_dtoa_r+0x990>
 800842c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800842e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008432:	e74b      	b.n	80082cc <_dtoa_r+0x71c>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	1e5e      	subs	r6, r3, #1
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	42b3      	cmp	r3, r6
 800843c:	bfbf      	itttt	lt
 800843e:	9b07      	ldrlt	r3, [sp, #28]
 8008440:	9607      	strlt	r6, [sp, #28]
 8008442:	1af2      	sublt	r2, r6, r3
 8008444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008446:	bfb6      	itet	lt
 8008448:	189b      	addlt	r3, r3, r2
 800844a:	1b9e      	subge	r6, r3, r6
 800844c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	bfb8      	it	lt
 8008452:	2600      	movlt	r6, #0
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfb7      	itett	lt
 8008458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800845c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008460:	1a9d      	sublt	r5, r3, r2
 8008462:	2300      	movlt	r3, #0
 8008464:	e734      	b.n	80082d0 <_dtoa_r+0x720>
 8008466:	9e07      	ldr	r6, [sp, #28]
 8008468:	9d04      	ldr	r5, [sp, #16]
 800846a:	9f08      	ldr	r7, [sp, #32]
 800846c:	e73b      	b.n	80082e6 <_dtoa_r+0x736>
 800846e:	9a07      	ldr	r2, [sp, #28]
 8008470:	e767      	b.n	8008342 <_dtoa_r+0x792>
 8008472:	9b06      	ldr	r3, [sp, #24]
 8008474:	2b01      	cmp	r3, #1
 8008476:	dc18      	bgt.n	80084aa <_dtoa_r+0x8fa>
 8008478:	f1ba 0f00 	cmp.w	sl, #0
 800847c:	d115      	bne.n	80084aa <_dtoa_r+0x8fa>
 800847e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008482:	b993      	cbnz	r3, 80084aa <_dtoa_r+0x8fa>
 8008484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008488:	0d1b      	lsrs	r3, r3, #20
 800848a:	051b      	lsls	r3, r3, #20
 800848c:	b183      	cbz	r3, 80084b0 <_dtoa_r+0x900>
 800848e:	9b04      	ldr	r3, [sp, #16]
 8008490:	3301      	adds	r3, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	9b05      	ldr	r3, [sp, #20]
 8008496:	3301      	adds	r3, #1
 8008498:	9305      	str	r3, [sp, #20]
 800849a:	f04f 0801 	mov.w	r8, #1
 800849e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f47f af6a 	bne.w	800837a <_dtoa_r+0x7ca>
 80084a6:	2001      	movs	r0, #1
 80084a8:	e76f      	b.n	800838a <_dtoa_r+0x7da>
 80084aa:	f04f 0800 	mov.w	r8, #0
 80084ae:	e7f6      	b.n	800849e <_dtoa_r+0x8ee>
 80084b0:	4698      	mov	r8, r3
 80084b2:	e7f4      	b.n	800849e <_dtoa_r+0x8ee>
 80084b4:	f43f af7d 	beq.w	80083b2 <_dtoa_r+0x802>
 80084b8:	4618      	mov	r0, r3
 80084ba:	301c      	adds	r0, #28
 80084bc:	e772      	b.n	80083a4 <_dtoa_r+0x7f4>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dc37      	bgt.n	8008534 <_dtoa_r+0x984>
 80084c4:	9b06      	ldr	r3, [sp, #24]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	dd34      	ble.n	8008534 <_dtoa_r+0x984>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	9302      	str	r3, [sp, #8]
 80084ce:	9b02      	ldr	r3, [sp, #8]
 80084d0:	b96b      	cbnz	r3, 80084ee <_dtoa_r+0x93e>
 80084d2:	4631      	mov	r1, r6
 80084d4:	2205      	movs	r2, #5
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fbf4 	bl	8008cc4 <__multadd>
 80084dc:	4601      	mov	r1, r0
 80084de:	4606      	mov	r6, r0
 80084e0:	ee18 0a10 	vmov	r0, s16
 80084e4:	f000 fe0e 	bl	8009104 <__mcmp>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	f73f adbb 	bgt.w	8008064 <_dtoa_r+0x4b4>
 80084ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f0:	9d01      	ldr	r5, [sp, #4]
 80084f2:	43db      	mvns	r3, r3
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	f04f 0800 	mov.w	r8, #0
 80084fa:	4631      	mov	r1, r6
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fbbf 	bl	8008c80 <_Bfree>
 8008502:	2f00      	cmp	r7, #0
 8008504:	f43f aea4 	beq.w	8008250 <_dtoa_r+0x6a0>
 8008508:	f1b8 0f00 	cmp.w	r8, #0
 800850c:	d005      	beq.n	800851a <_dtoa_r+0x96a>
 800850e:	45b8      	cmp	r8, r7
 8008510:	d003      	beq.n	800851a <_dtoa_r+0x96a>
 8008512:	4641      	mov	r1, r8
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fbb3 	bl	8008c80 <_Bfree>
 800851a:	4639      	mov	r1, r7
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fbaf 	bl	8008c80 <_Bfree>
 8008522:	e695      	b.n	8008250 <_dtoa_r+0x6a0>
 8008524:	2600      	movs	r6, #0
 8008526:	4637      	mov	r7, r6
 8008528:	e7e1      	b.n	80084ee <_dtoa_r+0x93e>
 800852a:	9700      	str	r7, [sp, #0]
 800852c:	4637      	mov	r7, r6
 800852e:	e599      	b.n	8008064 <_dtoa_r+0x4b4>
 8008530:	40240000 	.word	0x40240000
 8008534:	9b08      	ldr	r3, [sp, #32]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80ca 	beq.w	80086d0 <_dtoa_r+0xb20>
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	9302      	str	r3, [sp, #8]
 8008540:	2d00      	cmp	r5, #0
 8008542:	dd05      	ble.n	8008550 <_dtoa_r+0x9a0>
 8008544:	4639      	mov	r1, r7
 8008546:	462a      	mov	r2, r5
 8008548:	4620      	mov	r0, r4
 800854a:	f000 fd6b 	bl	8009024 <__lshift>
 800854e:	4607      	mov	r7, r0
 8008550:	f1b8 0f00 	cmp.w	r8, #0
 8008554:	d05b      	beq.n	800860e <_dtoa_r+0xa5e>
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4620      	mov	r0, r4
 800855a:	f000 fb51 	bl	8008c00 <_Balloc>
 800855e:	4605      	mov	r5, r0
 8008560:	b928      	cbnz	r0, 800856e <_dtoa_r+0x9be>
 8008562:	4b87      	ldr	r3, [pc, #540]	; (8008780 <_dtoa_r+0xbd0>)
 8008564:	4602      	mov	r2, r0
 8008566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800856a:	f7ff bb3b 	b.w	8007be4 <_dtoa_r+0x34>
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	3202      	adds	r2, #2
 8008572:	0092      	lsls	r2, r2, #2
 8008574:	f107 010c 	add.w	r1, r7, #12
 8008578:	300c      	adds	r0, #12
 800857a:	f000 fb33 	bl	8008be4 <memcpy>
 800857e:	2201      	movs	r2, #1
 8008580:	4629      	mov	r1, r5
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fd4e 	bl	8009024 <__lshift>
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	f103 0901 	add.w	r9, r3, #1
 800858e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008592:	4413      	add	r3, r2
 8008594:	9305      	str	r3, [sp, #20]
 8008596:	f00a 0301 	and.w	r3, sl, #1
 800859a:	46b8      	mov	r8, r7
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	4607      	mov	r7, r0
 80085a0:	4631      	mov	r1, r6
 80085a2:	ee18 0a10 	vmov	r0, s16
 80085a6:	f7ff fa75 	bl	8007a94 <quorem>
 80085aa:	4641      	mov	r1, r8
 80085ac:	9002      	str	r0, [sp, #8]
 80085ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085b2:	ee18 0a10 	vmov	r0, s16
 80085b6:	f000 fda5 	bl	8009104 <__mcmp>
 80085ba:	463a      	mov	r2, r7
 80085bc:	9003      	str	r0, [sp, #12]
 80085be:	4631      	mov	r1, r6
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fdbb 	bl	800913c <__mdiff>
 80085c6:	68c2      	ldr	r2, [r0, #12]
 80085c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80085cc:	4605      	mov	r5, r0
 80085ce:	bb02      	cbnz	r2, 8008612 <_dtoa_r+0xa62>
 80085d0:	4601      	mov	r1, r0
 80085d2:	ee18 0a10 	vmov	r0, s16
 80085d6:	f000 fd95 	bl	8009104 <__mcmp>
 80085da:	4602      	mov	r2, r0
 80085dc:	4629      	mov	r1, r5
 80085de:	4620      	mov	r0, r4
 80085e0:	9207      	str	r2, [sp, #28]
 80085e2:	f000 fb4d 	bl	8008c80 <_Bfree>
 80085e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80085ea:	ea43 0102 	orr.w	r1, r3, r2
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	430b      	orrs	r3, r1
 80085f2:	464d      	mov	r5, r9
 80085f4:	d10f      	bne.n	8008616 <_dtoa_r+0xa66>
 80085f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085fa:	d02a      	beq.n	8008652 <_dtoa_r+0xaa2>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dd02      	ble.n	8008608 <_dtoa_r+0xa58>
 8008602:	9b02      	ldr	r3, [sp, #8]
 8008604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008608:	f88b a000 	strb.w	sl, [fp]
 800860c:	e775      	b.n	80084fa <_dtoa_r+0x94a>
 800860e:	4638      	mov	r0, r7
 8008610:	e7ba      	b.n	8008588 <_dtoa_r+0x9d8>
 8008612:	2201      	movs	r2, #1
 8008614:	e7e2      	b.n	80085dc <_dtoa_r+0xa2c>
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	db04      	blt.n	8008626 <_dtoa_r+0xa76>
 800861c:	9906      	ldr	r1, [sp, #24]
 800861e:	430b      	orrs	r3, r1
 8008620:	9904      	ldr	r1, [sp, #16]
 8008622:	430b      	orrs	r3, r1
 8008624:	d122      	bne.n	800866c <_dtoa_r+0xabc>
 8008626:	2a00      	cmp	r2, #0
 8008628:	ddee      	ble.n	8008608 <_dtoa_r+0xa58>
 800862a:	ee18 1a10 	vmov	r1, s16
 800862e:	2201      	movs	r2, #1
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fcf7 	bl	8009024 <__lshift>
 8008636:	4631      	mov	r1, r6
 8008638:	ee08 0a10 	vmov	s16, r0
 800863c:	f000 fd62 	bl	8009104 <__mcmp>
 8008640:	2800      	cmp	r0, #0
 8008642:	dc03      	bgt.n	800864c <_dtoa_r+0xa9c>
 8008644:	d1e0      	bne.n	8008608 <_dtoa_r+0xa58>
 8008646:	f01a 0f01 	tst.w	sl, #1
 800864a:	d0dd      	beq.n	8008608 <_dtoa_r+0xa58>
 800864c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008650:	d1d7      	bne.n	8008602 <_dtoa_r+0xa52>
 8008652:	2339      	movs	r3, #57	; 0x39
 8008654:	f88b 3000 	strb.w	r3, [fp]
 8008658:	462b      	mov	r3, r5
 800865a:	461d      	mov	r5, r3
 800865c:	3b01      	subs	r3, #1
 800865e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008662:	2a39      	cmp	r2, #57	; 0x39
 8008664:	d071      	beq.n	800874a <_dtoa_r+0xb9a>
 8008666:	3201      	adds	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	e746      	b.n	80084fa <_dtoa_r+0x94a>
 800866c:	2a00      	cmp	r2, #0
 800866e:	dd07      	ble.n	8008680 <_dtoa_r+0xad0>
 8008670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008674:	d0ed      	beq.n	8008652 <_dtoa_r+0xaa2>
 8008676:	f10a 0301 	add.w	r3, sl, #1
 800867a:	f88b 3000 	strb.w	r3, [fp]
 800867e:	e73c      	b.n	80084fa <_dtoa_r+0x94a>
 8008680:	9b05      	ldr	r3, [sp, #20]
 8008682:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008686:	4599      	cmp	r9, r3
 8008688:	d047      	beq.n	800871a <_dtoa_r+0xb6a>
 800868a:	ee18 1a10 	vmov	r1, s16
 800868e:	2300      	movs	r3, #0
 8008690:	220a      	movs	r2, #10
 8008692:	4620      	mov	r0, r4
 8008694:	f000 fb16 	bl	8008cc4 <__multadd>
 8008698:	45b8      	cmp	r8, r7
 800869a:	ee08 0a10 	vmov	s16, r0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	f04f 020a 	mov.w	r2, #10
 80086a6:	4641      	mov	r1, r8
 80086a8:	4620      	mov	r0, r4
 80086aa:	d106      	bne.n	80086ba <_dtoa_r+0xb0a>
 80086ac:	f000 fb0a 	bl	8008cc4 <__multadd>
 80086b0:	4680      	mov	r8, r0
 80086b2:	4607      	mov	r7, r0
 80086b4:	f109 0901 	add.w	r9, r9, #1
 80086b8:	e772      	b.n	80085a0 <_dtoa_r+0x9f0>
 80086ba:	f000 fb03 	bl	8008cc4 <__multadd>
 80086be:	4639      	mov	r1, r7
 80086c0:	4680      	mov	r8, r0
 80086c2:	2300      	movs	r3, #0
 80086c4:	220a      	movs	r2, #10
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 fafc 	bl	8008cc4 <__multadd>
 80086cc:	4607      	mov	r7, r0
 80086ce:	e7f1      	b.n	80086b4 <_dtoa_r+0xb04>
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	9d01      	ldr	r5, [sp, #4]
 80086d6:	ee18 0a10 	vmov	r0, s16
 80086da:	4631      	mov	r1, r6
 80086dc:	f7ff f9da 	bl	8007a94 <quorem>
 80086e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	f805 ab01 	strb.w	sl, [r5], #1
 80086ea:	1aea      	subs	r2, r5, r3
 80086ec:	9b02      	ldr	r3, [sp, #8]
 80086ee:	4293      	cmp	r3, r2
 80086f0:	dd09      	ble.n	8008706 <_dtoa_r+0xb56>
 80086f2:	ee18 1a10 	vmov	r1, s16
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 fae2 	bl	8008cc4 <__multadd>
 8008700:	ee08 0a10 	vmov	s16, r0
 8008704:	e7e7      	b.n	80086d6 <_dtoa_r+0xb26>
 8008706:	9b02      	ldr	r3, [sp, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	bfc8      	it	gt
 800870c:	461d      	movgt	r5, r3
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	bfd8      	it	le
 8008712:	2501      	movle	r5, #1
 8008714:	441d      	add	r5, r3
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	ee18 1a10 	vmov	r1, s16
 800871e:	2201      	movs	r2, #1
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fc7f 	bl	8009024 <__lshift>
 8008726:	4631      	mov	r1, r6
 8008728:	ee08 0a10 	vmov	s16, r0
 800872c:	f000 fcea 	bl	8009104 <__mcmp>
 8008730:	2800      	cmp	r0, #0
 8008732:	dc91      	bgt.n	8008658 <_dtoa_r+0xaa8>
 8008734:	d102      	bne.n	800873c <_dtoa_r+0xb8c>
 8008736:	f01a 0f01 	tst.w	sl, #1
 800873a:	d18d      	bne.n	8008658 <_dtoa_r+0xaa8>
 800873c:	462b      	mov	r3, r5
 800873e:	461d      	mov	r5, r3
 8008740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008744:	2a30      	cmp	r2, #48	; 0x30
 8008746:	d0fa      	beq.n	800873e <_dtoa_r+0xb8e>
 8008748:	e6d7      	b.n	80084fa <_dtoa_r+0x94a>
 800874a:	9a01      	ldr	r2, [sp, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d184      	bne.n	800865a <_dtoa_r+0xaaa>
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	3301      	adds	r3, #1
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	2331      	movs	r3, #49	; 0x31
 8008758:	7013      	strb	r3, [r2, #0]
 800875a:	e6ce      	b.n	80084fa <_dtoa_r+0x94a>
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <_dtoa_r+0xbd4>)
 800875e:	f7ff ba95 	b.w	8007c8c <_dtoa_r+0xdc>
 8008762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008764:	2b00      	cmp	r3, #0
 8008766:	f47f aa6e 	bne.w	8007c46 <_dtoa_r+0x96>
 800876a:	4b07      	ldr	r3, [pc, #28]	; (8008788 <_dtoa_r+0xbd8>)
 800876c:	f7ff ba8e 	b.w	8007c8c <_dtoa_r+0xdc>
 8008770:	9b02      	ldr	r3, [sp, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dcae      	bgt.n	80086d4 <_dtoa_r+0xb24>
 8008776:	9b06      	ldr	r3, [sp, #24]
 8008778:	2b02      	cmp	r3, #2
 800877a:	f73f aea8 	bgt.w	80084ce <_dtoa_r+0x91e>
 800877e:	e7a9      	b.n	80086d4 <_dtoa_r+0xb24>
 8008780:	0800c0e3 	.word	0x0800c0e3
 8008784:	0800c040 	.word	0x0800c040
 8008788:	0800c064 	.word	0x0800c064

0800878c <__sflush_r>:
 800878c:	898a      	ldrh	r2, [r1, #12]
 800878e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008792:	4605      	mov	r5, r0
 8008794:	0710      	lsls	r0, r2, #28
 8008796:	460c      	mov	r4, r1
 8008798:	d458      	bmi.n	800884c <__sflush_r+0xc0>
 800879a:	684b      	ldr	r3, [r1, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	dc05      	bgt.n	80087ac <__sflush_r+0x20>
 80087a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dc02      	bgt.n	80087ac <__sflush_r+0x20>
 80087a6:	2000      	movs	r0, #0
 80087a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	d0f9      	beq.n	80087a6 <__sflush_r+0x1a>
 80087b2:	2300      	movs	r3, #0
 80087b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087b8:	682f      	ldr	r7, [r5, #0]
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	d032      	beq.n	8008824 <__sflush_r+0x98>
 80087be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	075a      	lsls	r2, r3, #29
 80087c4:	d505      	bpl.n	80087d2 <__sflush_r+0x46>
 80087c6:	6863      	ldr	r3, [r4, #4]
 80087c8:	1ac0      	subs	r0, r0, r3
 80087ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087cc:	b10b      	cbz	r3, 80087d2 <__sflush_r+0x46>
 80087ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087d0:	1ac0      	subs	r0, r0, r3
 80087d2:	2300      	movs	r3, #0
 80087d4:	4602      	mov	r2, r0
 80087d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087d8:	6a21      	ldr	r1, [r4, #32]
 80087da:	4628      	mov	r0, r5
 80087dc:	47b0      	blx	r6
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	d106      	bne.n	80087f2 <__sflush_r+0x66>
 80087e4:	6829      	ldr	r1, [r5, #0]
 80087e6:	291d      	cmp	r1, #29
 80087e8:	d82c      	bhi.n	8008844 <__sflush_r+0xb8>
 80087ea:	4a2a      	ldr	r2, [pc, #168]	; (8008894 <__sflush_r+0x108>)
 80087ec:	40ca      	lsrs	r2, r1
 80087ee:	07d6      	lsls	r6, r2, #31
 80087f0:	d528      	bpl.n	8008844 <__sflush_r+0xb8>
 80087f2:	2200      	movs	r2, #0
 80087f4:	6062      	str	r2, [r4, #4]
 80087f6:	04d9      	lsls	r1, r3, #19
 80087f8:	6922      	ldr	r2, [r4, #16]
 80087fa:	6022      	str	r2, [r4, #0]
 80087fc:	d504      	bpl.n	8008808 <__sflush_r+0x7c>
 80087fe:	1c42      	adds	r2, r0, #1
 8008800:	d101      	bne.n	8008806 <__sflush_r+0x7a>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	b903      	cbnz	r3, 8008808 <__sflush_r+0x7c>
 8008806:	6560      	str	r0, [r4, #84]	; 0x54
 8008808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800880a:	602f      	str	r7, [r5, #0]
 800880c:	2900      	cmp	r1, #0
 800880e:	d0ca      	beq.n	80087a6 <__sflush_r+0x1a>
 8008810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008814:	4299      	cmp	r1, r3
 8008816:	d002      	beq.n	800881e <__sflush_r+0x92>
 8008818:	4628      	mov	r0, r5
 800881a:	f000 fd8b 	bl	8009334 <_free_r>
 800881e:	2000      	movs	r0, #0
 8008820:	6360      	str	r0, [r4, #52]	; 0x34
 8008822:	e7c1      	b.n	80087a8 <__sflush_r+0x1c>
 8008824:	6a21      	ldr	r1, [r4, #32]
 8008826:	2301      	movs	r3, #1
 8008828:	4628      	mov	r0, r5
 800882a:	47b0      	blx	r6
 800882c:	1c41      	adds	r1, r0, #1
 800882e:	d1c7      	bne.n	80087c0 <__sflush_r+0x34>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0c4      	beq.n	80087c0 <__sflush_r+0x34>
 8008836:	2b1d      	cmp	r3, #29
 8008838:	d001      	beq.n	800883e <__sflush_r+0xb2>
 800883a:	2b16      	cmp	r3, #22
 800883c:	d101      	bne.n	8008842 <__sflush_r+0xb6>
 800883e:	602f      	str	r7, [r5, #0]
 8008840:	e7b1      	b.n	80087a6 <__sflush_r+0x1a>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008848:	81a3      	strh	r3, [r4, #12]
 800884a:	e7ad      	b.n	80087a8 <__sflush_r+0x1c>
 800884c:	690f      	ldr	r7, [r1, #16]
 800884e:	2f00      	cmp	r7, #0
 8008850:	d0a9      	beq.n	80087a6 <__sflush_r+0x1a>
 8008852:	0793      	lsls	r3, r2, #30
 8008854:	680e      	ldr	r6, [r1, #0]
 8008856:	bf08      	it	eq
 8008858:	694b      	ldreq	r3, [r1, #20]
 800885a:	600f      	str	r7, [r1, #0]
 800885c:	bf18      	it	ne
 800885e:	2300      	movne	r3, #0
 8008860:	eba6 0807 	sub.w	r8, r6, r7
 8008864:	608b      	str	r3, [r1, #8]
 8008866:	f1b8 0f00 	cmp.w	r8, #0
 800886a:	dd9c      	ble.n	80087a6 <__sflush_r+0x1a>
 800886c:	6a21      	ldr	r1, [r4, #32]
 800886e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008870:	4643      	mov	r3, r8
 8008872:	463a      	mov	r2, r7
 8008874:	4628      	mov	r0, r5
 8008876:	47b0      	blx	r6
 8008878:	2800      	cmp	r0, #0
 800887a:	dc06      	bgt.n	800888a <__sflush_r+0xfe>
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	f04f 30ff 	mov.w	r0, #4294967295
 8008888:	e78e      	b.n	80087a8 <__sflush_r+0x1c>
 800888a:	4407      	add	r7, r0
 800888c:	eba8 0800 	sub.w	r8, r8, r0
 8008890:	e7e9      	b.n	8008866 <__sflush_r+0xda>
 8008892:	bf00      	nop
 8008894:	20400001 	.word	0x20400001

08008898 <_fflush_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	690b      	ldr	r3, [r1, #16]
 800889c:	4605      	mov	r5, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	b913      	cbnz	r3, 80088a8 <_fflush_r+0x10>
 80088a2:	2500      	movs	r5, #0
 80088a4:	4628      	mov	r0, r5
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	b118      	cbz	r0, 80088b2 <_fflush_r+0x1a>
 80088aa:	6983      	ldr	r3, [r0, #24]
 80088ac:	b90b      	cbnz	r3, 80088b2 <_fflush_r+0x1a>
 80088ae:	f000 f887 	bl	80089c0 <__sinit>
 80088b2:	4b14      	ldr	r3, [pc, #80]	; (8008904 <_fflush_r+0x6c>)
 80088b4:	429c      	cmp	r4, r3
 80088b6:	d11b      	bne.n	80088f0 <_fflush_r+0x58>
 80088b8:	686c      	ldr	r4, [r5, #4]
 80088ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0ef      	beq.n	80088a2 <_fflush_r+0xa>
 80088c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088c4:	07d0      	lsls	r0, r2, #31
 80088c6:	d404      	bmi.n	80088d2 <_fflush_r+0x3a>
 80088c8:	0599      	lsls	r1, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_fflush_r+0x3a>
 80088cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ce:	f000 f91a 	bl	8008b06 <__retarget_lock_acquire_recursive>
 80088d2:	4628      	mov	r0, r5
 80088d4:	4621      	mov	r1, r4
 80088d6:	f7ff ff59 	bl	800878c <__sflush_r>
 80088da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088dc:	07da      	lsls	r2, r3, #31
 80088de:	4605      	mov	r5, r0
 80088e0:	d4e0      	bmi.n	80088a4 <_fflush_r+0xc>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	059b      	lsls	r3, r3, #22
 80088e6:	d4dd      	bmi.n	80088a4 <_fflush_r+0xc>
 80088e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ea:	f000 f90d 	bl	8008b08 <__retarget_lock_release_recursive>
 80088ee:	e7d9      	b.n	80088a4 <_fflush_r+0xc>
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <_fflush_r+0x70>)
 80088f2:	429c      	cmp	r4, r3
 80088f4:	d101      	bne.n	80088fa <_fflush_r+0x62>
 80088f6:	68ac      	ldr	r4, [r5, #8]
 80088f8:	e7df      	b.n	80088ba <_fflush_r+0x22>
 80088fa:	4b04      	ldr	r3, [pc, #16]	; (800890c <_fflush_r+0x74>)
 80088fc:	429c      	cmp	r4, r3
 80088fe:	bf08      	it	eq
 8008900:	68ec      	ldreq	r4, [r5, #12]
 8008902:	e7da      	b.n	80088ba <_fflush_r+0x22>
 8008904:	0800c114 	.word	0x0800c114
 8008908:	0800c134 	.word	0x0800c134
 800890c:	0800c0f4 	.word	0x0800c0f4

08008910 <std>:
 8008910:	2300      	movs	r3, #0
 8008912:	b510      	push	{r4, lr}
 8008914:	4604      	mov	r4, r0
 8008916:	e9c0 3300 	strd	r3, r3, [r0]
 800891a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800891e:	6083      	str	r3, [r0, #8]
 8008920:	8181      	strh	r1, [r0, #12]
 8008922:	6643      	str	r3, [r0, #100]	; 0x64
 8008924:	81c2      	strh	r2, [r0, #14]
 8008926:	6183      	str	r3, [r0, #24]
 8008928:	4619      	mov	r1, r3
 800892a:	2208      	movs	r2, #8
 800892c:	305c      	adds	r0, #92	; 0x5c
 800892e:	f7fe fad1 	bl	8006ed4 <memset>
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <std+0x38>)
 8008934:	6263      	str	r3, [r4, #36]	; 0x24
 8008936:	4b05      	ldr	r3, [pc, #20]	; (800894c <std+0x3c>)
 8008938:	62a3      	str	r3, [r4, #40]	; 0x28
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <std+0x40>)
 800893c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <std+0x44>)
 8008940:	6224      	str	r4, [r4, #32]
 8008942:	6323      	str	r3, [r4, #48]	; 0x30
 8008944:	bd10      	pop	{r4, pc}
 8008946:	bf00      	nop
 8008948:	08009a81 	.word	0x08009a81
 800894c:	08009aa3 	.word	0x08009aa3
 8008950:	08009adb 	.word	0x08009adb
 8008954:	08009aff 	.word	0x08009aff

08008958 <_cleanup_r>:
 8008958:	4901      	ldr	r1, [pc, #4]	; (8008960 <_cleanup_r+0x8>)
 800895a:	f000 b8af 	b.w	8008abc <_fwalk_reent>
 800895e:	bf00      	nop
 8008960:	08008899 	.word	0x08008899

08008964 <__sfmoreglue>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	2268      	movs	r2, #104	; 0x68
 8008968:	1e4d      	subs	r5, r1, #1
 800896a:	4355      	muls	r5, r2
 800896c:	460e      	mov	r6, r1
 800896e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008972:	f000 fd4b 	bl	800940c <_malloc_r>
 8008976:	4604      	mov	r4, r0
 8008978:	b140      	cbz	r0, 800898c <__sfmoreglue+0x28>
 800897a:	2100      	movs	r1, #0
 800897c:	e9c0 1600 	strd	r1, r6, [r0]
 8008980:	300c      	adds	r0, #12
 8008982:	60a0      	str	r0, [r4, #8]
 8008984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008988:	f7fe faa4 	bl	8006ed4 <memset>
 800898c:	4620      	mov	r0, r4
 800898e:	bd70      	pop	{r4, r5, r6, pc}

08008990 <__sfp_lock_acquire>:
 8008990:	4801      	ldr	r0, [pc, #4]	; (8008998 <__sfp_lock_acquire+0x8>)
 8008992:	f000 b8b8 	b.w	8008b06 <__retarget_lock_acquire_recursive>
 8008996:	bf00      	nop
 8008998:	20000399 	.word	0x20000399

0800899c <__sfp_lock_release>:
 800899c:	4801      	ldr	r0, [pc, #4]	; (80089a4 <__sfp_lock_release+0x8>)
 800899e:	f000 b8b3 	b.w	8008b08 <__retarget_lock_release_recursive>
 80089a2:	bf00      	nop
 80089a4:	20000399 	.word	0x20000399

080089a8 <__sinit_lock_acquire>:
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <__sinit_lock_acquire+0x8>)
 80089aa:	f000 b8ac 	b.w	8008b06 <__retarget_lock_acquire_recursive>
 80089ae:	bf00      	nop
 80089b0:	2000039a 	.word	0x2000039a

080089b4 <__sinit_lock_release>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__sinit_lock_release+0x8>)
 80089b6:	f000 b8a7 	b.w	8008b08 <__retarget_lock_release_recursive>
 80089ba:	bf00      	nop
 80089bc:	2000039a 	.word	0x2000039a

080089c0 <__sinit>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	4604      	mov	r4, r0
 80089c4:	f7ff fff0 	bl	80089a8 <__sinit_lock_acquire>
 80089c8:	69a3      	ldr	r3, [r4, #24]
 80089ca:	b11b      	cbz	r3, 80089d4 <__sinit+0x14>
 80089cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d0:	f7ff bff0 	b.w	80089b4 <__sinit_lock_release>
 80089d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089d8:	6523      	str	r3, [r4, #80]	; 0x50
 80089da:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <__sinit+0x68>)
 80089dc:	4a13      	ldr	r2, [pc, #76]	; (8008a2c <__sinit+0x6c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80089e2:	42a3      	cmp	r3, r4
 80089e4:	bf04      	itt	eq
 80089e6:	2301      	moveq	r3, #1
 80089e8:	61a3      	streq	r3, [r4, #24]
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 f820 	bl	8008a30 <__sfp>
 80089f0:	6060      	str	r0, [r4, #4]
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f81c 	bl	8008a30 <__sfp>
 80089f8:	60a0      	str	r0, [r4, #8]
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 f818 	bl	8008a30 <__sfp>
 8008a00:	2200      	movs	r2, #0
 8008a02:	60e0      	str	r0, [r4, #12]
 8008a04:	2104      	movs	r1, #4
 8008a06:	6860      	ldr	r0, [r4, #4]
 8008a08:	f7ff ff82 	bl	8008910 <std>
 8008a0c:	68a0      	ldr	r0, [r4, #8]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	2109      	movs	r1, #9
 8008a12:	f7ff ff7d 	bl	8008910 <std>
 8008a16:	68e0      	ldr	r0, [r4, #12]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	2112      	movs	r1, #18
 8008a1c:	f7ff ff78 	bl	8008910 <std>
 8008a20:	2301      	movs	r3, #1
 8008a22:	61a3      	str	r3, [r4, #24]
 8008a24:	e7d2      	b.n	80089cc <__sinit+0xc>
 8008a26:	bf00      	nop
 8008a28:	0800c02c 	.word	0x0800c02c
 8008a2c:	08008959 	.word	0x08008959

08008a30 <__sfp>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	4607      	mov	r7, r0
 8008a34:	f7ff ffac 	bl	8008990 <__sfp_lock_acquire>
 8008a38:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <__sfp+0x84>)
 8008a3a:	681e      	ldr	r6, [r3, #0]
 8008a3c:	69b3      	ldr	r3, [r6, #24]
 8008a3e:	b913      	cbnz	r3, 8008a46 <__sfp+0x16>
 8008a40:	4630      	mov	r0, r6
 8008a42:	f7ff ffbd 	bl	80089c0 <__sinit>
 8008a46:	3648      	adds	r6, #72	; 0x48
 8008a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	d503      	bpl.n	8008a58 <__sfp+0x28>
 8008a50:	6833      	ldr	r3, [r6, #0]
 8008a52:	b30b      	cbz	r3, 8008a98 <__sfp+0x68>
 8008a54:	6836      	ldr	r6, [r6, #0]
 8008a56:	e7f7      	b.n	8008a48 <__sfp+0x18>
 8008a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a5c:	b9d5      	cbnz	r5, 8008a94 <__sfp+0x64>
 8008a5e:	4b16      	ldr	r3, [pc, #88]	; (8008ab8 <__sfp+0x88>)
 8008a60:	60e3      	str	r3, [r4, #12]
 8008a62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a66:	6665      	str	r5, [r4, #100]	; 0x64
 8008a68:	f000 f84c 	bl	8008b04 <__retarget_lock_init_recursive>
 8008a6c:	f7ff ff96 	bl	800899c <__sfp_lock_release>
 8008a70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a78:	6025      	str	r5, [r4, #0]
 8008a7a:	61a5      	str	r5, [r4, #24]
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a84:	f7fe fa26 	bl	8006ed4 <memset>
 8008a88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a90:	4620      	mov	r0, r4
 8008a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a94:	3468      	adds	r4, #104	; 0x68
 8008a96:	e7d9      	b.n	8008a4c <__sfp+0x1c>
 8008a98:	2104      	movs	r1, #4
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f7ff ff62 	bl	8008964 <__sfmoreglue>
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	6030      	str	r0, [r6, #0]
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d1d5      	bne.n	8008a54 <__sfp+0x24>
 8008aa8:	f7ff ff78 	bl	800899c <__sfp_lock_release>
 8008aac:	230c      	movs	r3, #12
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	e7ee      	b.n	8008a90 <__sfp+0x60>
 8008ab2:	bf00      	nop
 8008ab4:	0800c02c 	.word	0x0800c02c
 8008ab8:	ffff0001 	.word	0xffff0001

08008abc <_fwalk_reent>:
 8008abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac0:	4606      	mov	r6, r0
 8008ac2:	4688      	mov	r8, r1
 8008ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ac8:	2700      	movs	r7, #0
 8008aca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ace:	f1b9 0901 	subs.w	r9, r9, #1
 8008ad2:	d505      	bpl.n	8008ae0 <_fwalk_reent+0x24>
 8008ad4:	6824      	ldr	r4, [r4, #0]
 8008ad6:	2c00      	cmp	r4, #0
 8008ad8:	d1f7      	bne.n	8008aca <_fwalk_reent+0xe>
 8008ada:	4638      	mov	r0, r7
 8008adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae0:	89ab      	ldrh	r3, [r5, #12]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d907      	bls.n	8008af6 <_fwalk_reent+0x3a>
 8008ae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aea:	3301      	adds	r3, #1
 8008aec:	d003      	beq.n	8008af6 <_fwalk_reent+0x3a>
 8008aee:	4629      	mov	r1, r5
 8008af0:	4630      	mov	r0, r6
 8008af2:	47c0      	blx	r8
 8008af4:	4307      	orrs	r7, r0
 8008af6:	3568      	adds	r5, #104	; 0x68
 8008af8:	e7e9      	b.n	8008ace <_fwalk_reent+0x12>
	...

08008afc <_localeconv_r>:
 8008afc:	4800      	ldr	r0, [pc, #0]	; (8008b00 <_localeconv_r+0x4>)
 8008afe:	4770      	bx	lr
 8008b00:	20000168 	.word	0x20000168

08008b04 <__retarget_lock_init_recursive>:
 8008b04:	4770      	bx	lr

08008b06 <__retarget_lock_acquire_recursive>:
 8008b06:	4770      	bx	lr

08008b08 <__retarget_lock_release_recursive>:
 8008b08:	4770      	bx	lr

08008b0a <__swhatbuf_r>:
 8008b0a:	b570      	push	{r4, r5, r6, lr}
 8008b0c:	460e      	mov	r6, r1
 8008b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b12:	2900      	cmp	r1, #0
 8008b14:	b096      	sub	sp, #88	; 0x58
 8008b16:	4614      	mov	r4, r2
 8008b18:	461d      	mov	r5, r3
 8008b1a:	da08      	bge.n	8008b2e <__swhatbuf_r+0x24>
 8008b1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	602a      	str	r2, [r5, #0]
 8008b24:	061a      	lsls	r2, r3, #24
 8008b26:	d410      	bmi.n	8008b4a <__swhatbuf_r+0x40>
 8008b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b2c:	e00e      	b.n	8008b4c <__swhatbuf_r+0x42>
 8008b2e:	466a      	mov	r2, sp
 8008b30:	f001 f83c 	bl	8009bac <_fstat_r>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	dbf1      	blt.n	8008b1c <__swhatbuf_r+0x12>
 8008b38:	9a01      	ldr	r2, [sp, #4]
 8008b3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b42:	425a      	negs	r2, r3
 8008b44:	415a      	adcs	r2, r3
 8008b46:	602a      	str	r2, [r5, #0]
 8008b48:	e7ee      	b.n	8008b28 <__swhatbuf_r+0x1e>
 8008b4a:	2340      	movs	r3, #64	; 0x40
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	b016      	add	sp, #88	; 0x58
 8008b52:	bd70      	pop	{r4, r5, r6, pc}

08008b54 <__smakebuf_r>:
 8008b54:	898b      	ldrh	r3, [r1, #12]
 8008b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b58:	079d      	lsls	r5, r3, #30
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	d507      	bpl.n	8008b70 <__smakebuf_r+0x1c>
 8008b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	6163      	str	r3, [r4, #20]
 8008b6c:	b002      	add	sp, #8
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	ab01      	add	r3, sp, #4
 8008b72:	466a      	mov	r2, sp
 8008b74:	f7ff ffc9 	bl	8008b0a <__swhatbuf_r>
 8008b78:	9900      	ldr	r1, [sp, #0]
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f000 fc45 	bl	800940c <_malloc_r>
 8008b82:	b948      	cbnz	r0, 8008b98 <__smakebuf_r+0x44>
 8008b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b88:	059a      	lsls	r2, r3, #22
 8008b8a:	d4ef      	bmi.n	8008b6c <__smakebuf_r+0x18>
 8008b8c:	f023 0303 	bic.w	r3, r3, #3
 8008b90:	f043 0302 	orr.w	r3, r3, #2
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	e7e3      	b.n	8008b60 <__smakebuf_r+0xc>
 8008b98:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <__smakebuf_r+0x7c>)
 8008b9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	6020      	str	r0, [r4, #0]
 8008ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	6163      	str	r3, [r4, #20]
 8008baa:	9b01      	ldr	r3, [sp, #4]
 8008bac:	6120      	str	r0, [r4, #16]
 8008bae:	b15b      	cbz	r3, 8008bc8 <__smakebuf_r+0x74>
 8008bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f001 f80b 	bl	8009bd0 <_isatty_r>
 8008bba:	b128      	cbz	r0, 8008bc8 <__smakebuf_r+0x74>
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	89a0      	ldrh	r0, [r4, #12]
 8008bca:	4305      	orrs	r5, r0
 8008bcc:	81a5      	strh	r5, [r4, #12]
 8008bce:	e7cd      	b.n	8008b6c <__smakebuf_r+0x18>
 8008bd0:	08008959 	.word	0x08008959

08008bd4 <malloc>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <malloc+0xc>)
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f000 bc17 	b.w	800940c <_malloc_r>
 8008bde:	bf00      	nop
 8008be0:	20000014 	.word	0x20000014

08008be4 <memcpy>:
 8008be4:	440a      	add	r2, r1
 8008be6:	4291      	cmp	r1, r2
 8008be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bec:	d100      	bne.n	8008bf0 <memcpy+0xc>
 8008bee:	4770      	bx	lr
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bfa:	4291      	cmp	r1, r2
 8008bfc:	d1f9      	bne.n	8008bf2 <memcpy+0xe>
 8008bfe:	bd10      	pop	{r4, pc}

08008c00 <_Balloc>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c04:	4604      	mov	r4, r0
 8008c06:	460d      	mov	r5, r1
 8008c08:	b976      	cbnz	r6, 8008c28 <_Balloc+0x28>
 8008c0a:	2010      	movs	r0, #16
 8008c0c:	f7ff ffe2 	bl	8008bd4 <malloc>
 8008c10:	4602      	mov	r2, r0
 8008c12:	6260      	str	r0, [r4, #36]	; 0x24
 8008c14:	b920      	cbnz	r0, 8008c20 <_Balloc+0x20>
 8008c16:	4b18      	ldr	r3, [pc, #96]	; (8008c78 <_Balloc+0x78>)
 8008c18:	4818      	ldr	r0, [pc, #96]	; (8008c7c <_Balloc+0x7c>)
 8008c1a:	2166      	movs	r1, #102	; 0x66
 8008c1c:	f000 ff86 	bl	8009b2c <__assert_func>
 8008c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c24:	6006      	str	r6, [r0, #0]
 8008c26:	60c6      	str	r6, [r0, #12]
 8008c28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c2a:	68f3      	ldr	r3, [r6, #12]
 8008c2c:	b183      	cbz	r3, 8008c50 <_Balloc+0x50>
 8008c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c36:	b9b8      	cbnz	r0, 8008c68 <_Balloc+0x68>
 8008c38:	2101      	movs	r1, #1
 8008c3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008c3e:	1d72      	adds	r2, r6, #5
 8008c40:	0092      	lsls	r2, r2, #2
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fb60 	bl	8009308 <_calloc_r>
 8008c48:	b160      	cbz	r0, 8008c64 <_Balloc+0x64>
 8008c4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c4e:	e00e      	b.n	8008c6e <_Balloc+0x6e>
 8008c50:	2221      	movs	r2, #33	; 0x21
 8008c52:	2104      	movs	r1, #4
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fb57 	bl	8009308 <_calloc_r>
 8008c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c5c:	60f0      	str	r0, [r6, #12]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e4      	bne.n	8008c2e <_Balloc+0x2e>
 8008c64:	2000      	movs	r0, #0
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	6802      	ldr	r2, [r0, #0]
 8008c6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c74:	e7f7      	b.n	8008c66 <_Balloc+0x66>
 8008c76:	bf00      	nop
 8008c78:	0800c071 	.word	0x0800c071
 8008c7c:	0800c154 	.word	0x0800c154

08008c80 <_Bfree>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c84:	4605      	mov	r5, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	b976      	cbnz	r6, 8008ca8 <_Bfree+0x28>
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	f7ff ffa2 	bl	8008bd4 <malloc>
 8008c90:	4602      	mov	r2, r0
 8008c92:	6268      	str	r0, [r5, #36]	; 0x24
 8008c94:	b920      	cbnz	r0, 8008ca0 <_Bfree+0x20>
 8008c96:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <_Bfree+0x3c>)
 8008c98:	4809      	ldr	r0, [pc, #36]	; (8008cc0 <_Bfree+0x40>)
 8008c9a:	218a      	movs	r1, #138	; 0x8a
 8008c9c:	f000 ff46 	bl	8009b2c <__assert_func>
 8008ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ca4:	6006      	str	r6, [r0, #0]
 8008ca6:	60c6      	str	r6, [r0, #12]
 8008ca8:	b13c      	cbz	r4, 8008cba <_Bfree+0x3a>
 8008caa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cac:	6862      	ldr	r2, [r4, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cb4:	6021      	str	r1, [r4, #0]
 8008cb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	0800c071 	.word	0x0800c071
 8008cc0:	0800c154 	.word	0x0800c154

08008cc4 <__multadd>:
 8008cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc8:	690d      	ldr	r5, [r1, #16]
 8008cca:	4607      	mov	r7, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	461e      	mov	r6, r3
 8008cd0:	f101 0c14 	add.w	ip, r1, #20
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	f8dc 3000 	ldr.w	r3, [ip]
 8008cda:	b299      	uxth	r1, r3
 8008cdc:	fb02 6101 	mla	r1, r2, r1, r6
 8008ce0:	0c1e      	lsrs	r6, r3, #16
 8008ce2:	0c0b      	lsrs	r3, r1, #16
 8008ce4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ce8:	b289      	uxth	r1, r1
 8008cea:	3001      	adds	r0, #1
 8008cec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cf0:	4285      	cmp	r5, r0
 8008cf2:	f84c 1b04 	str.w	r1, [ip], #4
 8008cf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cfa:	dcec      	bgt.n	8008cd6 <__multadd+0x12>
 8008cfc:	b30e      	cbz	r6, 8008d42 <__multadd+0x7e>
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dc19      	bgt.n	8008d38 <__multadd+0x74>
 8008d04:	6861      	ldr	r1, [r4, #4]
 8008d06:	4638      	mov	r0, r7
 8008d08:	3101      	adds	r1, #1
 8008d0a:	f7ff ff79 	bl	8008c00 <_Balloc>
 8008d0e:	4680      	mov	r8, r0
 8008d10:	b928      	cbnz	r0, 8008d1e <__multadd+0x5a>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <__multadd+0x84>)
 8008d16:	480d      	ldr	r0, [pc, #52]	; (8008d4c <__multadd+0x88>)
 8008d18:	21b5      	movs	r1, #181	; 0xb5
 8008d1a:	f000 ff07 	bl	8009b2c <__assert_func>
 8008d1e:	6922      	ldr	r2, [r4, #16]
 8008d20:	3202      	adds	r2, #2
 8008d22:	f104 010c 	add.w	r1, r4, #12
 8008d26:	0092      	lsls	r2, r2, #2
 8008d28:	300c      	adds	r0, #12
 8008d2a:	f7ff ff5b 	bl	8008be4 <memcpy>
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7ff ffa5 	bl	8008c80 <_Bfree>
 8008d36:	4644      	mov	r4, r8
 8008d38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d3c:	3501      	adds	r5, #1
 8008d3e:	615e      	str	r6, [r3, #20]
 8008d40:	6125      	str	r5, [r4, #16]
 8008d42:	4620      	mov	r0, r4
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	0800c0e3 	.word	0x0800c0e3
 8008d4c:	0800c154 	.word	0x0800c154

08008d50 <__hi0bits>:
 8008d50:	0c03      	lsrs	r3, r0, #16
 8008d52:	041b      	lsls	r3, r3, #16
 8008d54:	b9d3      	cbnz	r3, 8008d8c <__hi0bits+0x3c>
 8008d56:	0400      	lsls	r0, r0, #16
 8008d58:	2310      	movs	r3, #16
 8008d5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d5e:	bf04      	itt	eq
 8008d60:	0200      	lsleq	r0, r0, #8
 8008d62:	3308      	addeq	r3, #8
 8008d64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d68:	bf04      	itt	eq
 8008d6a:	0100      	lsleq	r0, r0, #4
 8008d6c:	3304      	addeq	r3, #4
 8008d6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d72:	bf04      	itt	eq
 8008d74:	0080      	lsleq	r0, r0, #2
 8008d76:	3302      	addeq	r3, #2
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	db05      	blt.n	8008d88 <__hi0bits+0x38>
 8008d7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d80:	f103 0301 	add.w	r3, r3, #1
 8008d84:	bf08      	it	eq
 8008d86:	2320      	moveq	r3, #32
 8008d88:	4618      	mov	r0, r3
 8008d8a:	4770      	bx	lr
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e7e4      	b.n	8008d5a <__hi0bits+0xa>

08008d90 <__lo0bits>:
 8008d90:	6803      	ldr	r3, [r0, #0]
 8008d92:	f013 0207 	ands.w	r2, r3, #7
 8008d96:	4601      	mov	r1, r0
 8008d98:	d00b      	beq.n	8008db2 <__lo0bits+0x22>
 8008d9a:	07da      	lsls	r2, r3, #31
 8008d9c:	d423      	bmi.n	8008de6 <__lo0bits+0x56>
 8008d9e:	0798      	lsls	r0, r3, #30
 8008da0:	bf49      	itett	mi
 8008da2:	085b      	lsrmi	r3, r3, #1
 8008da4:	089b      	lsrpl	r3, r3, #2
 8008da6:	2001      	movmi	r0, #1
 8008da8:	600b      	strmi	r3, [r1, #0]
 8008daa:	bf5c      	itt	pl
 8008dac:	600b      	strpl	r3, [r1, #0]
 8008dae:	2002      	movpl	r0, #2
 8008db0:	4770      	bx	lr
 8008db2:	b298      	uxth	r0, r3
 8008db4:	b9a8      	cbnz	r0, 8008de2 <__lo0bits+0x52>
 8008db6:	0c1b      	lsrs	r3, r3, #16
 8008db8:	2010      	movs	r0, #16
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	b90a      	cbnz	r2, 8008dc2 <__lo0bits+0x32>
 8008dbe:	3008      	adds	r0, #8
 8008dc0:	0a1b      	lsrs	r3, r3, #8
 8008dc2:	071a      	lsls	r2, r3, #28
 8008dc4:	bf04      	itt	eq
 8008dc6:	091b      	lsreq	r3, r3, #4
 8008dc8:	3004      	addeq	r0, #4
 8008dca:	079a      	lsls	r2, r3, #30
 8008dcc:	bf04      	itt	eq
 8008dce:	089b      	lsreq	r3, r3, #2
 8008dd0:	3002      	addeq	r0, #2
 8008dd2:	07da      	lsls	r2, r3, #31
 8008dd4:	d403      	bmi.n	8008dde <__lo0bits+0x4e>
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	f100 0001 	add.w	r0, r0, #1
 8008ddc:	d005      	beq.n	8008dea <__lo0bits+0x5a>
 8008dde:	600b      	str	r3, [r1, #0]
 8008de0:	4770      	bx	lr
 8008de2:	4610      	mov	r0, r2
 8008de4:	e7e9      	b.n	8008dba <__lo0bits+0x2a>
 8008de6:	2000      	movs	r0, #0
 8008de8:	4770      	bx	lr
 8008dea:	2020      	movs	r0, #32
 8008dec:	4770      	bx	lr
	...

08008df0 <__i2b>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	460c      	mov	r4, r1
 8008df4:	2101      	movs	r1, #1
 8008df6:	f7ff ff03 	bl	8008c00 <_Balloc>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	b928      	cbnz	r0, 8008e0a <__i2b+0x1a>
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <__i2b+0x24>)
 8008e00:	4805      	ldr	r0, [pc, #20]	; (8008e18 <__i2b+0x28>)
 8008e02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e06:	f000 fe91 	bl	8009b2c <__assert_func>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	6144      	str	r4, [r0, #20]
 8008e0e:	6103      	str	r3, [r0, #16]
 8008e10:	bd10      	pop	{r4, pc}
 8008e12:	bf00      	nop
 8008e14:	0800c0e3 	.word	0x0800c0e3
 8008e18:	0800c154 	.word	0x0800c154

08008e1c <__multiply>:
 8008e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e20:	4691      	mov	r9, r2
 8008e22:	690a      	ldr	r2, [r1, #16]
 8008e24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	bfb8      	it	lt
 8008e2c:	460b      	movlt	r3, r1
 8008e2e:	460c      	mov	r4, r1
 8008e30:	bfbc      	itt	lt
 8008e32:	464c      	movlt	r4, r9
 8008e34:	4699      	movlt	r9, r3
 8008e36:	6927      	ldr	r7, [r4, #16]
 8008e38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e3c:	68a3      	ldr	r3, [r4, #8]
 8008e3e:	6861      	ldr	r1, [r4, #4]
 8008e40:	eb07 060a 	add.w	r6, r7, sl
 8008e44:	42b3      	cmp	r3, r6
 8008e46:	b085      	sub	sp, #20
 8008e48:	bfb8      	it	lt
 8008e4a:	3101      	addlt	r1, #1
 8008e4c:	f7ff fed8 	bl	8008c00 <_Balloc>
 8008e50:	b930      	cbnz	r0, 8008e60 <__multiply+0x44>
 8008e52:	4602      	mov	r2, r0
 8008e54:	4b44      	ldr	r3, [pc, #272]	; (8008f68 <__multiply+0x14c>)
 8008e56:	4845      	ldr	r0, [pc, #276]	; (8008f6c <__multiply+0x150>)
 8008e58:	f240 115d 	movw	r1, #349	; 0x15d
 8008e5c:	f000 fe66 	bl	8009b2c <__assert_func>
 8008e60:	f100 0514 	add.w	r5, r0, #20
 8008e64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e68:	462b      	mov	r3, r5
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	4543      	cmp	r3, r8
 8008e6e:	d321      	bcc.n	8008eb4 <__multiply+0x98>
 8008e70:	f104 0314 	add.w	r3, r4, #20
 8008e74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e78:	f109 0314 	add.w	r3, r9, #20
 8008e7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e80:	9202      	str	r2, [sp, #8]
 8008e82:	1b3a      	subs	r2, r7, r4
 8008e84:	3a15      	subs	r2, #21
 8008e86:	f022 0203 	bic.w	r2, r2, #3
 8008e8a:	3204      	adds	r2, #4
 8008e8c:	f104 0115 	add.w	r1, r4, #21
 8008e90:	428f      	cmp	r7, r1
 8008e92:	bf38      	it	cc
 8008e94:	2204      	movcc	r2, #4
 8008e96:	9201      	str	r2, [sp, #4]
 8008e98:	9a02      	ldr	r2, [sp, #8]
 8008e9a:	9303      	str	r3, [sp, #12]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d80c      	bhi.n	8008eba <__multiply+0x9e>
 8008ea0:	2e00      	cmp	r6, #0
 8008ea2:	dd03      	ble.n	8008eac <__multiply+0x90>
 8008ea4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d05a      	beq.n	8008f62 <__multiply+0x146>
 8008eac:	6106      	str	r6, [r0, #16]
 8008eae:	b005      	add	sp, #20
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	f843 2b04 	str.w	r2, [r3], #4
 8008eb8:	e7d8      	b.n	8008e6c <__multiply+0x50>
 8008eba:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ebe:	f1ba 0f00 	cmp.w	sl, #0
 8008ec2:	d024      	beq.n	8008f0e <__multiply+0xf2>
 8008ec4:	f104 0e14 	add.w	lr, r4, #20
 8008ec8:	46a9      	mov	r9, r5
 8008eca:	f04f 0c00 	mov.w	ip, #0
 8008ece:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ed2:	f8d9 1000 	ldr.w	r1, [r9]
 8008ed6:	fa1f fb82 	uxth.w	fp, r2
 8008eda:	b289      	uxth	r1, r1
 8008edc:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ee0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ee8:	4461      	add	r1, ip
 8008eea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008eee:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ef2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ef6:	b289      	uxth	r1, r1
 8008ef8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008efc:	4577      	cmp	r7, lr
 8008efe:	f849 1b04 	str.w	r1, [r9], #4
 8008f02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f06:	d8e2      	bhi.n	8008ece <__multiply+0xb2>
 8008f08:	9a01      	ldr	r2, [sp, #4]
 8008f0a:	f845 c002 	str.w	ip, [r5, r2]
 8008f0e:	9a03      	ldr	r2, [sp, #12]
 8008f10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f14:	3304      	adds	r3, #4
 8008f16:	f1b9 0f00 	cmp.w	r9, #0
 8008f1a:	d020      	beq.n	8008f5e <__multiply+0x142>
 8008f1c:	6829      	ldr	r1, [r5, #0]
 8008f1e:	f104 0c14 	add.w	ip, r4, #20
 8008f22:	46ae      	mov	lr, r5
 8008f24:	f04f 0a00 	mov.w	sl, #0
 8008f28:	f8bc b000 	ldrh.w	fp, [ip]
 8008f2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f30:	fb09 220b 	mla	r2, r9, fp, r2
 8008f34:	4492      	add	sl, r2
 8008f36:	b289      	uxth	r1, r1
 8008f38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f3c:	f84e 1b04 	str.w	r1, [lr], #4
 8008f40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f44:	f8be 1000 	ldrh.w	r1, [lr]
 8008f48:	0c12      	lsrs	r2, r2, #16
 8008f4a:	fb09 1102 	mla	r1, r9, r2, r1
 8008f4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f52:	4567      	cmp	r7, ip
 8008f54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f58:	d8e6      	bhi.n	8008f28 <__multiply+0x10c>
 8008f5a:	9a01      	ldr	r2, [sp, #4]
 8008f5c:	50a9      	str	r1, [r5, r2]
 8008f5e:	3504      	adds	r5, #4
 8008f60:	e79a      	b.n	8008e98 <__multiply+0x7c>
 8008f62:	3e01      	subs	r6, #1
 8008f64:	e79c      	b.n	8008ea0 <__multiply+0x84>
 8008f66:	bf00      	nop
 8008f68:	0800c0e3 	.word	0x0800c0e3
 8008f6c:	0800c154 	.word	0x0800c154

08008f70 <__pow5mult>:
 8008f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f74:	4615      	mov	r5, r2
 8008f76:	f012 0203 	ands.w	r2, r2, #3
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	460f      	mov	r7, r1
 8008f7e:	d007      	beq.n	8008f90 <__pow5mult+0x20>
 8008f80:	4c25      	ldr	r4, [pc, #148]	; (8009018 <__pow5mult+0xa8>)
 8008f82:	3a01      	subs	r2, #1
 8008f84:	2300      	movs	r3, #0
 8008f86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f8a:	f7ff fe9b 	bl	8008cc4 <__multadd>
 8008f8e:	4607      	mov	r7, r0
 8008f90:	10ad      	asrs	r5, r5, #2
 8008f92:	d03d      	beq.n	8009010 <__pow5mult+0xa0>
 8008f94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f96:	b97c      	cbnz	r4, 8008fb8 <__pow5mult+0x48>
 8008f98:	2010      	movs	r0, #16
 8008f9a:	f7ff fe1b 	bl	8008bd4 <malloc>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8008fa2:	b928      	cbnz	r0, 8008fb0 <__pow5mult+0x40>
 8008fa4:	4b1d      	ldr	r3, [pc, #116]	; (800901c <__pow5mult+0xac>)
 8008fa6:	481e      	ldr	r0, [pc, #120]	; (8009020 <__pow5mult+0xb0>)
 8008fa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fac:	f000 fdbe 	bl	8009b2c <__assert_func>
 8008fb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fb4:	6004      	str	r4, [r0, #0]
 8008fb6:	60c4      	str	r4, [r0, #12]
 8008fb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fc0:	b94c      	cbnz	r4, 8008fd6 <__pow5mult+0x66>
 8008fc2:	f240 2171 	movw	r1, #625	; 0x271
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f7ff ff12 	bl	8008df0 <__i2b>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	f04f 0900 	mov.w	r9, #0
 8008fda:	07eb      	lsls	r3, r5, #31
 8008fdc:	d50a      	bpl.n	8008ff4 <__pow5mult+0x84>
 8008fde:	4639      	mov	r1, r7
 8008fe0:	4622      	mov	r2, r4
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7ff ff1a 	bl	8008e1c <__multiply>
 8008fe8:	4639      	mov	r1, r7
 8008fea:	4680      	mov	r8, r0
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7ff fe47 	bl	8008c80 <_Bfree>
 8008ff2:	4647      	mov	r7, r8
 8008ff4:	106d      	asrs	r5, r5, #1
 8008ff6:	d00b      	beq.n	8009010 <__pow5mult+0xa0>
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	b938      	cbnz	r0, 800900c <__pow5mult+0x9c>
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	4621      	mov	r1, r4
 8009000:	4630      	mov	r0, r6
 8009002:	f7ff ff0b 	bl	8008e1c <__multiply>
 8009006:	6020      	str	r0, [r4, #0]
 8009008:	f8c0 9000 	str.w	r9, [r0]
 800900c:	4604      	mov	r4, r0
 800900e:	e7e4      	b.n	8008fda <__pow5mult+0x6a>
 8009010:	4638      	mov	r0, r7
 8009012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009016:	bf00      	nop
 8009018:	0800c2a0 	.word	0x0800c2a0
 800901c:	0800c071 	.word	0x0800c071
 8009020:	0800c154 	.word	0x0800c154

08009024 <__lshift>:
 8009024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	460c      	mov	r4, r1
 800902a:	6849      	ldr	r1, [r1, #4]
 800902c:	6923      	ldr	r3, [r4, #16]
 800902e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009032:	68a3      	ldr	r3, [r4, #8]
 8009034:	4607      	mov	r7, r0
 8009036:	4691      	mov	r9, r2
 8009038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800903c:	f108 0601 	add.w	r6, r8, #1
 8009040:	42b3      	cmp	r3, r6
 8009042:	db0b      	blt.n	800905c <__lshift+0x38>
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff fddb 	bl	8008c00 <_Balloc>
 800904a:	4605      	mov	r5, r0
 800904c:	b948      	cbnz	r0, 8009062 <__lshift+0x3e>
 800904e:	4602      	mov	r2, r0
 8009050:	4b2a      	ldr	r3, [pc, #168]	; (80090fc <__lshift+0xd8>)
 8009052:	482b      	ldr	r0, [pc, #172]	; (8009100 <__lshift+0xdc>)
 8009054:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009058:	f000 fd68 	bl	8009b2c <__assert_func>
 800905c:	3101      	adds	r1, #1
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	e7ee      	b.n	8009040 <__lshift+0x1c>
 8009062:	2300      	movs	r3, #0
 8009064:	f100 0114 	add.w	r1, r0, #20
 8009068:	f100 0210 	add.w	r2, r0, #16
 800906c:	4618      	mov	r0, r3
 800906e:	4553      	cmp	r3, sl
 8009070:	db37      	blt.n	80090e2 <__lshift+0xbe>
 8009072:	6920      	ldr	r0, [r4, #16]
 8009074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009078:	f104 0314 	add.w	r3, r4, #20
 800907c:	f019 091f 	ands.w	r9, r9, #31
 8009080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009084:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009088:	d02f      	beq.n	80090ea <__lshift+0xc6>
 800908a:	f1c9 0e20 	rsb	lr, r9, #32
 800908e:	468a      	mov	sl, r1
 8009090:	f04f 0c00 	mov.w	ip, #0
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	fa02 f209 	lsl.w	r2, r2, r9
 800909a:	ea42 020c 	orr.w	r2, r2, ip
 800909e:	f84a 2b04 	str.w	r2, [sl], #4
 80090a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a6:	4298      	cmp	r0, r3
 80090a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80090ac:	d8f2      	bhi.n	8009094 <__lshift+0x70>
 80090ae:	1b03      	subs	r3, r0, r4
 80090b0:	3b15      	subs	r3, #21
 80090b2:	f023 0303 	bic.w	r3, r3, #3
 80090b6:	3304      	adds	r3, #4
 80090b8:	f104 0215 	add.w	r2, r4, #21
 80090bc:	4290      	cmp	r0, r2
 80090be:	bf38      	it	cc
 80090c0:	2304      	movcc	r3, #4
 80090c2:	f841 c003 	str.w	ip, [r1, r3]
 80090c6:	f1bc 0f00 	cmp.w	ip, #0
 80090ca:	d001      	beq.n	80090d0 <__lshift+0xac>
 80090cc:	f108 0602 	add.w	r6, r8, #2
 80090d0:	3e01      	subs	r6, #1
 80090d2:	4638      	mov	r0, r7
 80090d4:	612e      	str	r6, [r5, #16]
 80090d6:	4621      	mov	r1, r4
 80090d8:	f7ff fdd2 	bl	8008c80 <_Bfree>
 80090dc:	4628      	mov	r0, r5
 80090de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80090e6:	3301      	adds	r3, #1
 80090e8:	e7c1      	b.n	800906e <__lshift+0x4a>
 80090ea:	3904      	subs	r1, #4
 80090ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80090f4:	4298      	cmp	r0, r3
 80090f6:	d8f9      	bhi.n	80090ec <__lshift+0xc8>
 80090f8:	e7ea      	b.n	80090d0 <__lshift+0xac>
 80090fa:	bf00      	nop
 80090fc:	0800c0e3 	.word	0x0800c0e3
 8009100:	0800c154 	.word	0x0800c154

08009104 <__mcmp>:
 8009104:	b530      	push	{r4, r5, lr}
 8009106:	6902      	ldr	r2, [r0, #16]
 8009108:	690c      	ldr	r4, [r1, #16]
 800910a:	1b12      	subs	r2, r2, r4
 800910c:	d10e      	bne.n	800912c <__mcmp+0x28>
 800910e:	f100 0314 	add.w	r3, r0, #20
 8009112:	3114      	adds	r1, #20
 8009114:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009118:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800911c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009120:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009124:	42a5      	cmp	r5, r4
 8009126:	d003      	beq.n	8009130 <__mcmp+0x2c>
 8009128:	d305      	bcc.n	8009136 <__mcmp+0x32>
 800912a:	2201      	movs	r2, #1
 800912c:	4610      	mov	r0, r2
 800912e:	bd30      	pop	{r4, r5, pc}
 8009130:	4283      	cmp	r3, r0
 8009132:	d3f3      	bcc.n	800911c <__mcmp+0x18>
 8009134:	e7fa      	b.n	800912c <__mcmp+0x28>
 8009136:	f04f 32ff 	mov.w	r2, #4294967295
 800913a:	e7f7      	b.n	800912c <__mcmp+0x28>

0800913c <__mdiff>:
 800913c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009140:	460c      	mov	r4, r1
 8009142:	4606      	mov	r6, r0
 8009144:	4611      	mov	r1, r2
 8009146:	4620      	mov	r0, r4
 8009148:	4690      	mov	r8, r2
 800914a:	f7ff ffdb 	bl	8009104 <__mcmp>
 800914e:	1e05      	subs	r5, r0, #0
 8009150:	d110      	bne.n	8009174 <__mdiff+0x38>
 8009152:	4629      	mov	r1, r5
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff fd53 	bl	8008c00 <_Balloc>
 800915a:	b930      	cbnz	r0, 800916a <__mdiff+0x2e>
 800915c:	4b3a      	ldr	r3, [pc, #232]	; (8009248 <__mdiff+0x10c>)
 800915e:	4602      	mov	r2, r0
 8009160:	f240 2132 	movw	r1, #562	; 0x232
 8009164:	4839      	ldr	r0, [pc, #228]	; (800924c <__mdiff+0x110>)
 8009166:	f000 fce1 	bl	8009b2c <__assert_func>
 800916a:	2301      	movs	r3, #1
 800916c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009174:	bfa4      	itt	ge
 8009176:	4643      	movge	r3, r8
 8009178:	46a0      	movge	r8, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009180:	bfa6      	itte	ge
 8009182:	461c      	movge	r4, r3
 8009184:	2500      	movge	r5, #0
 8009186:	2501      	movlt	r5, #1
 8009188:	f7ff fd3a 	bl	8008c00 <_Balloc>
 800918c:	b920      	cbnz	r0, 8009198 <__mdiff+0x5c>
 800918e:	4b2e      	ldr	r3, [pc, #184]	; (8009248 <__mdiff+0x10c>)
 8009190:	4602      	mov	r2, r0
 8009192:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009196:	e7e5      	b.n	8009164 <__mdiff+0x28>
 8009198:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800919c:	6926      	ldr	r6, [r4, #16]
 800919e:	60c5      	str	r5, [r0, #12]
 80091a0:	f104 0914 	add.w	r9, r4, #20
 80091a4:	f108 0514 	add.w	r5, r8, #20
 80091a8:	f100 0e14 	add.w	lr, r0, #20
 80091ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091b4:	f108 0210 	add.w	r2, r8, #16
 80091b8:	46f2      	mov	sl, lr
 80091ba:	2100      	movs	r1, #0
 80091bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80091c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091c4:	fa1f f883 	uxth.w	r8, r3
 80091c8:	fa11 f18b 	uxtah	r1, r1, fp
 80091cc:	0c1b      	lsrs	r3, r3, #16
 80091ce:	eba1 0808 	sub.w	r8, r1, r8
 80091d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091da:	fa1f f888 	uxth.w	r8, r8
 80091de:	1419      	asrs	r1, r3, #16
 80091e0:	454e      	cmp	r6, r9
 80091e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091e6:	f84a 3b04 	str.w	r3, [sl], #4
 80091ea:	d8e7      	bhi.n	80091bc <__mdiff+0x80>
 80091ec:	1b33      	subs	r3, r6, r4
 80091ee:	3b15      	subs	r3, #21
 80091f0:	f023 0303 	bic.w	r3, r3, #3
 80091f4:	3304      	adds	r3, #4
 80091f6:	3415      	adds	r4, #21
 80091f8:	42a6      	cmp	r6, r4
 80091fa:	bf38      	it	cc
 80091fc:	2304      	movcc	r3, #4
 80091fe:	441d      	add	r5, r3
 8009200:	4473      	add	r3, lr
 8009202:	469e      	mov	lr, r3
 8009204:	462e      	mov	r6, r5
 8009206:	4566      	cmp	r6, ip
 8009208:	d30e      	bcc.n	8009228 <__mdiff+0xec>
 800920a:	f10c 0203 	add.w	r2, ip, #3
 800920e:	1b52      	subs	r2, r2, r5
 8009210:	f022 0203 	bic.w	r2, r2, #3
 8009214:	3d03      	subs	r5, #3
 8009216:	45ac      	cmp	ip, r5
 8009218:	bf38      	it	cc
 800921a:	2200      	movcc	r2, #0
 800921c:	441a      	add	r2, r3
 800921e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009222:	b17b      	cbz	r3, 8009244 <__mdiff+0x108>
 8009224:	6107      	str	r7, [r0, #16]
 8009226:	e7a3      	b.n	8009170 <__mdiff+0x34>
 8009228:	f856 8b04 	ldr.w	r8, [r6], #4
 800922c:	fa11 f288 	uxtah	r2, r1, r8
 8009230:	1414      	asrs	r4, r2, #16
 8009232:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009236:	b292      	uxth	r2, r2
 8009238:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800923c:	f84e 2b04 	str.w	r2, [lr], #4
 8009240:	1421      	asrs	r1, r4, #16
 8009242:	e7e0      	b.n	8009206 <__mdiff+0xca>
 8009244:	3f01      	subs	r7, #1
 8009246:	e7ea      	b.n	800921e <__mdiff+0xe2>
 8009248:	0800c0e3 	.word	0x0800c0e3
 800924c:	0800c154 	.word	0x0800c154

08009250 <__d2b>:
 8009250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009254:	4689      	mov	r9, r1
 8009256:	2101      	movs	r1, #1
 8009258:	ec57 6b10 	vmov	r6, r7, d0
 800925c:	4690      	mov	r8, r2
 800925e:	f7ff fccf 	bl	8008c00 <_Balloc>
 8009262:	4604      	mov	r4, r0
 8009264:	b930      	cbnz	r0, 8009274 <__d2b+0x24>
 8009266:	4602      	mov	r2, r0
 8009268:	4b25      	ldr	r3, [pc, #148]	; (8009300 <__d2b+0xb0>)
 800926a:	4826      	ldr	r0, [pc, #152]	; (8009304 <__d2b+0xb4>)
 800926c:	f240 310a 	movw	r1, #778	; 0x30a
 8009270:	f000 fc5c 	bl	8009b2c <__assert_func>
 8009274:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800927c:	bb35      	cbnz	r5, 80092cc <__d2b+0x7c>
 800927e:	2e00      	cmp	r6, #0
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	d028      	beq.n	80092d6 <__d2b+0x86>
 8009284:	4668      	mov	r0, sp
 8009286:	9600      	str	r6, [sp, #0]
 8009288:	f7ff fd82 	bl	8008d90 <__lo0bits>
 800928c:	9900      	ldr	r1, [sp, #0]
 800928e:	b300      	cbz	r0, 80092d2 <__d2b+0x82>
 8009290:	9a01      	ldr	r2, [sp, #4]
 8009292:	f1c0 0320 	rsb	r3, r0, #32
 8009296:	fa02 f303 	lsl.w	r3, r2, r3
 800929a:	430b      	orrs	r3, r1
 800929c:	40c2      	lsrs	r2, r0
 800929e:	6163      	str	r3, [r4, #20]
 80092a0:	9201      	str	r2, [sp, #4]
 80092a2:	9b01      	ldr	r3, [sp, #4]
 80092a4:	61a3      	str	r3, [r4, #24]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	bf14      	ite	ne
 80092aa:	2202      	movne	r2, #2
 80092ac:	2201      	moveq	r2, #1
 80092ae:	6122      	str	r2, [r4, #16]
 80092b0:	b1d5      	cbz	r5, 80092e8 <__d2b+0x98>
 80092b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092b6:	4405      	add	r5, r0
 80092b8:	f8c9 5000 	str.w	r5, [r9]
 80092bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092c0:	f8c8 0000 	str.w	r0, [r8]
 80092c4:	4620      	mov	r0, r4
 80092c6:	b003      	add	sp, #12
 80092c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092d0:	e7d5      	b.n	800927e <__d2b+0x2e>
 80092d2:	6161      	str	r1, [r4, #20]
 80092d4:	e7e5      	b.n	80092a2 <__d2b+0x52>
 80092d6:	a801      	add	r0, sp, #4
 80092d8:	f7ff fd5a 	bl	8008d90 <__lo0bits>
 80092dc:	9b01      	ldr	r3, [sp, #4]
 80092de:	6163      	str	r3, [r4, #20]
 80092e0:	2201      	movs	r2, #1
 80092e2:	6122      	str	r2, [r4, #16]
 80092e4:	3020      	adds	r0, #32
 80092e6:	e7e3      	b.n	80092b0 <__d2b+0x60>
 80092e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092f0:	f8c9 0000 	str.w	r0, [r9]
 80092f4:	6918      	ldr	r0, [r3, #16]
 80092f6:	f7ff fd2b 	bl	8008d50 <__hi0bits>
 80092fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092fe:	e7df      	b.n	80092c0 <__d2b+0x70>
 8009300:	0800c0e3 	.word	0x0800c0e3
 8009304:	0800c154 	.word	0x0800c154

08009308 <_calloc_r>:
 8009308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800930a:	fba1 2402 	umull	r2, r4, r1, r2
 800930e:	b94c      	cbnz	r4, 8009324 <_calloc_r+0x1c>
 8009310:	4611      	mov	r1, r2
 8009312:	9201      	str	r2, [sp, #4]
 8009314:	f000 f87a 	bl	800940c <_malloc_r>
 8009318:	9a01      	ldr	r2, [sp, #4]
 800931a:	4605      	mov	r5, r0
 800931c:	b930      	cbnz	r0, 800932c <_calloc_r+0x24>
 800931e:	4628      	mov	r0, r5
 8009320:	b003      	add	sp, #12
 8009322:	bd30      	pop	{r4, r5, pc}
 8009324:	220c      	movs	r2, #12
 8009326:	6002      	str	r2, [r0, #0]
 8009328:	2500      	movs	r5, #0
 800932a:	e7f8      	b.n	800931e <_calloc_r+0x16>
 800932c:	4621      	mov	r1, r4
 800932e:	f7fd fdd1 	bl	8006ed4 <memset>
 8009332:	e7f4      	b.n	800931e <_calloc_r+0x16>

08009334 <_free_r>:
 8009334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009336:	2900      	cmp	r1, #0
 8009338:	d044      	beq.n	80093c4 <_free_r+0x90>
 800933a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800933e:	9001      	str	r0, [sp, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f1a1 0404 	sub.w	r4, r1, #4
 8009346:	bfb8      	it	lt
 8009348:	18e4      	addlt	r4, r4, r3
 800934a:	f000 fc8f 	bl	8009c6c <__malloc_lock>
 800934e:	4a1e      	ldr	r2, [pc, #120]	; (80093c8 <_free_r+0x94>)
 8009350:	9801      	ldr	r0, [sp, #4]
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	b933      	cbnz	r3, 8009364 <_free_r+0x30>
 8009356:	6063      	str	r3, [r4, #4]
 8009358:	6014      	str	r4, [r2, #0]
 800935a:	b003      	add	sp, #12
 800935c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009360:	f000 bc8a 	b.w	8009c78 <__malloc_unlock>
 8009364:	42a3      	cmp	r3, r4
 8009366:	d908      	bls.n	800937a <_free_r+0x46>
 8009368:	6825      	ldr	r5, [r4, #0]
 800936a:	1961      	adds	r1, r4, r5
 800936c:	428b      	cmp	r3, r1
 800936e:	bf01      	itttt	eq
 8009370:	6819      	ldreq	r1, [r3, #0]
 8009372:	685b      	ldreq	r3, [r3, #4]
 8009374:	1949      	addeq	r1, r1, r5
 8009376:	6021      	streq	r1, [r4, #0]
 8009378:	e7ed      	b.n	8009356 <_free_r+0x22>
 800937a:	461a      	mov	r2, r3
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	b10b      	cbz	r3, 8009384 <_free_r+0x50>
 8009380:	42a3      	cmp	r3, r4
 8009382:	d9fa      	bls.n	800937a <_free_r+0x46>
 8009384:	6811      	ldr	r1, [r2, #0]
 8009386:	1855      	adds	r5, r2, r1
 8009388:	42a5      	cmp	r5, r4
 800938a:	d10b      	bne.n	80093a4 <_free_r+0x70>
 800938c:	6824      	ldr	r4, [r4, #0]
 800938e:	4421      	add	r1, r4
 8009390:	1854      	adds	r4, r2, r1
 8009392:	42a3      	cmp	r3, r4
 8009394:	6011      	str	r1, [r2, #0]
 8009396:	d1e0      	bne.n	800935a <_free_r+0x26>
 8009398:	681c      	ldr	r4, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	6053      	str	r3, [r2, #4]
 800939e:	4421      	add	r1, r4
 80093a0:	6011      	str	r1, [r2, #0]
 80093a2:	e7da      	b.n	800935a <_free_r+0x26>
 80093a4:	d902      	bls.n	80093ac <_free_r+0x78>
 80093a6:	230c      	movs	r3, #12
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	e7d6      	b.n	800935a <_free_r+0x26>
 80093ac:	6825      	ldr	r5, [r4, #0]
 80093ae:	1961      	adds	r1, r4, r5
 80093b0:	428b      	cmp	r3, r1
 80093b2:	bf04      	itt	eq
 80093b4:	6819      	ldreq	r1, [r3, #0]
 80093b6:	685b      	ldreq	r3, [r3, #4]
 80093b8:	6063      	str	r3, [r4, #4]
 80093ba:	bf04      	itt	eq
 80093bc:	1949      	addeq	r1, r1, r5
 80093be:	6021      	streq	r1, [r4, #0]
 80093c0:	6054      	str	r4, [r2, #4]
 80093c2:	e7ca      	b.n	800935a <_free_r+0x26>
 80093c4:	b003      	add	sp, #12
 80093c6:	bd30      	pop	{r4, r5, pc}
 80093c8:	2000039c 	.word	0x2000039c

080093cc <sbrk_aligned>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	4e0e      	ldr	r6, [pc, #56]	; (8009408 <sbrk_aligned+0x3c>)
 80093d0:	460c      	mov	r4, r1
 80093d2:	6831      	ldr	r1, [r6, #0]
 80093d4:	4605      	mov	r5, r0
 80093d6:	b911      	cbnz	r1, 80093de <sbrk_aligned+0x12>
 80093d8:	f000 fb42 	bl	8009a60 <_sbrk_r>
 80093dc:	6030      	str	r0, [r6, #0]
 80093de:	4621      	mov	r1, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 fb3d 	bl	8009a60 <_sbrk_r>
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	d00a      	beq.n	8009400 <sbrk_aligned+0x34>
 80093ea:	1cc4      	adds	r4, r0, #3
 80093ec:	f024 0403 	bic.w	r4, r4, #3
 80093f0:	42a0      	cmp	r0, r4
 80093f2:	d007      	beq.n	8009404 <sbrk_aligned+0x38>
 80093f4:	1a21      	subs	r1, r4, r0
 80093f6:	4628      	mov	r0, r5
 80093f8:	f000 fb32 	bl	8009a60 <_sbrk_r>
 80093fc:	3001      	adds	r0, #1
 80093fe:	d101      	bne.n	8009404 <sbrk_aligned+0x38>
 8009400:	f04f 34ff 	mov.w	r4, #4294967295
 8009404:	4620      	mov	r0, r4
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	200003a0 	.word	0x200003a0

0800940c <_malloc_r>:
 800940c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009410:	1ccd      	adds	r5, r1, #3
 8009412:	f025 0503 	bic.w	r5, r5, #3
 8009416:	3508      	adds	r5, #8
 8009418:	2d0c      	cmp	r5, #12
 800941a:	bf38      	it	cc
 800941c:	250c      	movcc	r5, #12
 800941e:	2d00      	cmp	r5, #0
 8009420:	4607      	mov	r7, r0
 8009422:	db01      	blt.n	8009428 <_malloc_r+0x1c>
 8009424:	42a9      	cmp	r1, r5
 8009426:	d905      	bls.n	8009434 <_malloc_r+0x28>
 8009428:	230c      	movs	r3, #12
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	2600      	movs	r6, #0
 800942e:	4630      	mov	r0, r6
 8009430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009434:	4e2e      	ldr	r6, [pc, #184]	; (80094f0 <_malloc_r+0xe4>)
 8009436:	f000 fc19 	bl	8009c6c <__malloc_lock>
 800943a:	6833      	ldr	r3, [r6, #0]
 800943c:	461c      	mov	r4, r3
 800943e:	bb34      	cbnz	r4, 800948e <_malloc_r+0x82>
 8009440:	4629      	mov	r1, r5
 8009442:	4638      	mov	r0, r7
 8009444:	f7ff ffc2 	bl	80093cc <sbrk_aligned>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	4604      	mov	r4, r0
 800944c:	d14d      	bne.n	80094ea <_malloc_r+0xde>
 800944e:	6834      	ldr	r4, [r6, #0]
 8009450:	4626      	mov	r6, r4
 8009452:	2e00      	cmp	r6, #0
 8009454:	d140      	bne.n	80094d8 <_malloc_r+0xcc>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	4631      	mov	r1, r6
 800945a:	4638      	mov	r0, r7
 800945c:	eb04 0803 	add.w	r8, r4, r3
 8009460:	f000 fafe 	bl	8009a60 <_sbrk_r>
 8009464:	4580      	cmp	r8, r0
 8009466:	d13a      	bne.n	80094de <_malloc_r+0xd2>
 8009468:	6821      	ldr	r1, [r4, #0]
 800946a:	3503      	adds	r5, #3
 800946c:	1a6d      	subs	r5, r5, r1
 800946e:	f025 0503 	bic.w	r5, r5, #3
 8009472:	3508      	adds	r5, #8
 8009474:	2d0c      	cmp	r5, #12
 8009476:	bf38      	it	cc
 8009478:	250c      	movcc	r5, #12
 800947a:	4629      	mov	r1, r5
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff ffa5 	bl	80093cc <sbrk_aligned>
 8009482:	3001      	adds	r0, #1
 8009484:	d02b      	beq.n	80094de <_malloc_r+0xd2>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	442b      	add	r3, r5
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	e00e      	b.n	80094ac <_malloc_r+0xa0>
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	1b52      	subs	r2, r2, r5
 8009492:	d41e      	bmi.n	80094d2 <_malloc_r+0xc6>
 8009494:	2a0b      	cmp	r2, #11
 8009496:	d916      	bls.n	80094c6 <_malloc_r+0xba>
 8009498:	1961      	adds	r1, r4, r5
 800949a:	42a3      	cmp	r3, r4
 800949c:	6025      	str	r5, [r4, #0]
 800949e:	bf18      	it	ne
 80094a0:	6059      	strne	r1, [r3, #4]
 80094a2:	6863      	ldr	r3, [r4, #4]
 80094a4:	bf08      	it	eq
 80094a6:	6031      	streq	r1, [r6, #0]
 80094a8:	5162      	str	r2, [r4, r5]
 80094aa:	604b      	str	r3, [r1, #4]
 80094ac:	4638      	mov	r0, r7
 80094ae:	f104 060b 	add.w	r6, r4, #11
 80094b2:	f000 fbe1 	bl	8009c78 <__malloc_unlock>
 80094b6:	f026 0607 	bic.w	r6, r6, #7
 80094ba:	1d23      	adds	r3, r4, #4
 80094bc:	1af2      	subs	r2, r6, r3
 80094be:	d0b6      	beq.n	800942e <_malloc_r+0x22>
 80094c0:	1b9b      	subs	r3, r3, r6
 80094c2:	50a3      	str	r3, [r4, r2]
 80094c4:	e7b3      	b.n	800942e <_malloc_r+0x22>
 80094c6:	6862      	ldr	r2, [r4, #4]
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	bf0c      	ite	eq
 80094cc:	6032      	streq	r2, [r6, #0]
 80094ce:	605a      	strne	r2, [r3, #4]
 80094d0:	e7ec      	b.n	80094ac <_malloc_r+0xa0>
 80094d2:	4623      	mov	r3, r4
 80094d4:	6864      	ldr	r4, [r4, #4]
 80094d6:	e7b2      	b.n	800943e <_malloc_r+0x32>
 80094d8:	4634      	mov	r4, r6
 80094da:	6876      	ldr	r6, [r6, #4]
 80094dc:	e7b9      	b.n	8009452 <_malloc_r+0x46>
 80094de:	230c      	movs	r3, #12
 80094e0:	603b      	str	r3, [r7, #0]
 80094e2:	4638      	mov	r0, r7
 80094e4:	f000 fbc8 	bl	8009c78 <__malloc_unlock>
 80094e8:	e7a1      	b.n	800942e <_malloc_r+0x22>
 80094ea:	6025      	str	r5, [r4, #0]
 80094ec:	e7de      	b.n	80094ac <_malloc_r+0xa0>
 80094ee:	bf00      	nop
 80094f0:	2000039c 	.word	0x2000039c

080094f4 <__ssputs_r>:
 80094f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	688e      	ldr	r6, [r1, #8]
 80094fa:	429e      	cmp	r6, r3
 80094fc:	4682      	mov	sl, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	4690      	mov	r8, r2
 8009502:	461f      	mov	r7, r3
 8009504:	d838      	bhi.n	8009578 <__ssputs_r+0x84>
 8009506:	898a      	ldrh	r2, [r1, #12]
 8009508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800950c:	d032      	beq.n	8009574 <__ssputs_r+0x80>
 800950e:	6825      	ldr	r5, [r4, #0]
 8009510:	6909      	ldr	r1, [r1, #16]
 8009512:	eba5 0901 	sub.w	r9, r5, r1
 8009516:	6965      	ldr	r5, [r4, #20]
 8009518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800951c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009520:	3301      	adds	r3, #1
 8009522:	444b      	add	r3, r9
 8009524:	106d      	asrs	r5, r5, #1
 8009526:	429d      	cmp	r5, r3
 8009528:	bf38      	it	cc
 800952a:	461d      	movcc	r5, r3
 800952c:	0553      	lsls	r3, r2, #21
 800952e:	d531      	bpl.n	8009594 <__ssputs_r+0xa0>
 8009530:	4629      	mov	r1, r5
 8009532:	f7ff ff6b 	bl	800940c <_malloc_r>
 8009536:	4606      	mov	r6, r0
 8009538:	b950      	cbnz	r0, 8009550 <__ssputs_r+0x5c>
 800953a:	230c      	movs	r3, #12
 800953c:	f8ca 3000 	str.w	r3, [sl]
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009546:	81a3      	strh	r3, [r4, #12]
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009550:	6921      	ldr	r1, [r4, #16]
 8009552:	464a      	mov	r2, r9
 8009554:	f7ff fb46 	bl	8008be4 <memcpy>
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800955e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	6126      	str	r6, [r4, #16]
 8009566:	6165      	str	r5, [r4, #20]
 8009568:	444e      	add	r6, r9
 800956a:	eba5 0509 	sub.w	r5, r5, r9
 800956e:	6026      	str	r6, [r4, #0]
 8009570:	60a5      	str	r5, [r4, #8]
 8009572:	463e      	mov	r6, r7
 8009574:	42be      	cmp	r6, r7
 8009576:	d900      	bls.n	800957a <__ssputs_r+0x86>
 8009578:	463e      	mov	r6, r7
 800957a:	6820      	ldr	r0, [r4, #0]
 800957c:	4632      	mov	r2, r6
 800957e:	4641      	mov	r1, r8
 8009580:	f000 fb5a 	bl	8009c38 <memmove>
 8009584:	68a3      	ldr	r3, [r4, #8]
 8009586:	1b9b      	subs	r3, r3, r6
 8009588:	60a3      	str	r3, [r4, #8]
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	4433      	add	r3, r6
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	2000      	movs	r0, #0
 8009592:	e7db      	b.n	800954c <__ssputs_r+0x58>
 8009594:	462a      	mov	r2, r5
 8009596:	f000 fb75 	bl	8009c84 <_realloc_r>
 800959a:	4606      	mov	r6, r0
 800959c:	2800      	cmp	r0, #0
 800959e:	d1e1      	bne.n	8009564 <__ssputs_r+0x70>
 80095a0:	6921      	ldr	r1, [r4, #16]
 80095a2:	4650      	mov	r0, sl
 80095a4:	f7ff fec6 	bl	8009334 <_free_r>
 80095a8:	e7c7      	b.n	800953a <__ssputs_r+0x46>
	...

080095ac <_svfiprintf_r>:
 80095ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b0:	4698      	mov	r8, r3
 80095b2:	898b      	ldrh	r3, [r1, #12]
 80095b4:	061b      	lsls	r3, r3, #24
 80095b6:	b09d      	sub	sp, #116	; 0x74
 80095b8:	4607      	mov	r7, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	4614      	mov	r4, r2
 80095be:	d50e      	bpl.n	80095de <_svfiprintf_r+0x32>
 80095c0:	690b      	ldr	r3, [r1, #16]
 80095c2:	b963      	cbnz	r3, 80095de <_svfiprintf_r+0x32>
 80095c4:	2140      	movs	r1, #64	; 0x40
 80095c6:	f7ff ff21 	bl	800940c <_malloc_r>
 80095ca:	6028      	str	r0, [r5, #0]
 80095cc:	6128      	str	r0, [r5, #16]
 80095ce:	b920      	cbnz	r0, 80095da <_svfiprintf_r+0x2e>
 80095d0:	230c      	movs	r3, #12
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	e0d1      	b.n	800977e <_svfiprintf_r+0x1d2>
 80095da:	2340      	movs	r3, #64	; 0x40
 80095dc:	616b      	str	r3, [r5, #20]
 80095de:	2300      	movs	r3, #0
 80095e0:	9309      	str	r3, [sp, #36]	; 0x24
 80095e2:	2320      	movs	r3, #32
 80095e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ec:	2330      	movs	r3, #48	; 0x30
 80095ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009798 <_svfiprintf_r+0x1ec>
 80095f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095f6:	f04f 0901 	mov.w	r9, #1
 80095fa:	4623      	mov	r3, r4
 80095fc:	469a      	mov	sl, r3
 80095fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009602:	b10a      	cbz	r2, 8009608 <_svfiprintf_r+0x5c>
 8009604:	2a25      	cmp	r2, #37	; 0x25
 8009606:	d1f9      	bne.n	80095fc <_svfiprintf_r+0x50>
 8009608:	ebba 0b04 	subs.w	fp, sl, r4
 800960c:	d00b      	beq.n	8009626 <_svfiprintf_r+0x7a>
 800960e:	465b      	mov	r3, fp
 8009610:	4622      	mov	r2, r4
 8009612:	4629      	mov	r1, r5
 8009614:	4638      	mov	r0, r7
 8009616:	f7ff ff6d 	bl	80094f4 <__ssputs_r>
 800961a:	3001      	adds	r0, #1
 800961c:	f000 80aa 	beq.w	8009774 <_svfiprintf_r+0x1c8>
 8009620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009622:	445a      	add	r2, fp
 8009624:	9209      	str	r2, [sp, #36]	; 0x24
 8009626:	f89a 3000 	ldrb.w	r3, [sl]
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 80a2 	beq.w	8009774 <_svfiprintf_r+0x1c8>
 8009630:	2300      	movs	r3, #0
 8009632:	f04f 32ff 	mov.w	r2, #4294967295
 8009636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800963a:	f10a 0a01 	add.w	sl, sl, #1
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	9307      	str	r3, [sp, #28]
 8009642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009646:	931a      	str	r3, [sp, #104]	; 0x68
 8009648:	4654      	mov	r4, sl
 800964a:	2205      	movs	r2, #5
 800964c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009650:	4851      	ldr	r0, [pc, #324]	; (8009798 <_svfiprintf_r+0x1ec>)
 8009652:	f7f6 fde5 	bl	8000220 <memchr>
 8009656:	9a04      	ldr	r2, [sp, #16]
 8009658:	b9d8      	cbnz	r0, 8009692 <_svfiprintf_r+0xe6>
 800965a:	06d0      	lsls	r0, r2, #27
 800965c:	bf44      	itt	mi
 800965e:	2320      	movmi	r3, #32
 8009660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009664:	0711      	lsls	r1, r2, #28
 8009666:	bf44      	itt	mi
 8009668:	232b      	movmi	r3, #43	; 0x2b
 800966a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800966e:	f89a 3000 	ldrb.w	r3, [sl]
 8009672:	2b2a      	cmp	r3, #42	; 0x2a
 8009674:	d015      	beq.n	80096a2 <_svfiprintf_r+0xf6>
 8009676:	9a07      	ldr	r2, [sp, #28]
 8009678:	4654      	mov	r4, sl
 800967a:	2000      	movs	r0, #0
 800967c:	f04f 0c0a 	mov.w	ip, #10
 8009680:	4621      	mov	r1, r4
 8009682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009686:	3b30      	subs	r3, #48	; 0x30
 8009688:	2b09      	cmp	r3, #9
 800968a:	d94e      	bls.n	800972a <_svfiprintf_r+0x17e>
 800968c:	b1b0      	cbz	r0, 80096bc <_svfiprintf_r+0x110>
 800968e:	9207      	str	r2, [sp, #28]
 8009690:	e014      	b.n	80096bc <_svfiprintf_r+0x110>
 8009692:	eba0 0308 	sub.w	r3, r0, r8
 8009696:	fa09 f303 	lsl.w	r3, r9, r3
 800969a:	4313      	orrs	r3, r2
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	46a2      	mov	sl, r4
 80096a0:	e7d2      	b.n	8009648 <_svfiprintf_r+0x9c>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	1d19      	adds	r1, r3, #4
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	9103      	str	r1, [sp, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	bfbb      	ittet	lt
 80096ae:	425b      	neglt	r3, r3
 80096b0:	f042 0202 	orrlt.w	r2, r2, #2
 80096b4:	9307      	strge	r3, [sp, #28]
 80096b6:	9307      	strlt	r3, [sp, #28]
 80096b8:	bfb8      	it	lt
 80096ba:	9204      	strlt	r2, [sp, #16]
 80096bc:	7823      	ldrb	r3, [r4, #0]
 80096be:	2b2e      	cmp	r3, #46	; 0x2e
 80096c0:	d10c      	bne.n	80096dc <_svfiprintf_r+0x130>
 80096c2:	7863      	ldrb	r3, [r4, #1]
 80096c4:	2b2a      	cmp	r3, #42	; 0x2a
 80096c6:	d135      	bne.n	8009734 <_svfiprintf_r+0x188>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	1d1a      	adds	r2, r3, #4
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	9203      	str	r2, [sp, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bfb8      	it	lt
 80096d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80096d8:	3402      	adds	r4, #2
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097a8 <_svfiprintf_r+0x1fc>
 80096e0:	7821      	ldrb	r1, [r4, #0]
 80096e2:	2203      	movs	r2, #3
 80096e4:	4650      	mov	r0, sl
 80096e6:	f7f6 fd9b 	bl	8000220 <memchr>
 80096ea:	b140      	cbz	r0, 80096fe <_svfiprintf_r+0x152>
 80096ec:	2340      	movs	r3, #64	; 0x40
 80096ee:	eba0 000a 	sub.w	r0, r0, sl
 80096f2:	fa03 f000 	lsl.w	r0, r3, r0
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	4303      	orrs	r3, r0
 80096fa:	3401      	adds	r4, #1
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009702:	4826      	ldr	r0, [pc, #152]	; (800979c <_svfiprintf_r+0x1f0>)
 8009704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009708:	2206      	movs	r2, #6
 800970a:	f7f6 fd89 	bl	8000220 <memchr>
 800970e:	2800      	cmp	r0, #0
 8009710:	d038      	beq.n	8009784 <_svfiprintf_r+0x1d8>
 8009712:	4b23      	ldr	r3, [pc, #140]	; (80097a0 <_svfiprintf_r+0x1f4>)
 8009714:	bb1b      	cbnz	r3, 800975e <_svfiprintf_r+0x1b2>
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	3307      	adds	r3, #7
 800971a:	f023 0307 	bic.w	r3, r3, #7
 800971e:	3308      	adds	r3, #8
 8009720:	9303      	str	r3, [sp, #12]
 8009722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009724:	4433      	add	r3, r6
 8009726:	9309      	str	r3, [sp, #36]	; 0x24
 8009728:	e767      	b.n	80095fa <_svfiprintf_r+0x4e>
 800972a:	fb0c 3202 	mla	r2, ip, r2, r3
 800972e:	460c      	mov	r4, r1
 8009730:	2001      	movs	r0, #1
 8009732:	e7a5      	b.n	8009680 <_svfiprintf_r+0xd4>
 8009734:	2300      	movs	r3, #0
 8009736:	3401      	adds	r4, #1
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	4619      	mov	r1, r3
 800973c:	f04f 0c0a 	mov.w	ip, #10
 8009740:	4620      	mov	r0, r4
 8009742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009746:	3a30      	subs	r2, #48	; 0x30
 8009748:	2a09      	cmp	r2, #9
 800974a:	d903      	bls.n	8009754 <_svfiprintf_r+0x1a8>
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0c5      	beq.n	80096dc <_svfiprintf_r+0x130>
 8009750:	9105      	str	r1, [sp, #20]
 8009752:	e7c3      	b.n	80096dc <_svfiprintf_r+0x130>
 8009754:	fb0c 2101 	mla	r1, ip, r1, r2
 8009758:	4604      	mov	r4, r0
 800975a:	2301      	movs	r3, #1
 800975c:	e7f0      	b.n	8009740 <_svfiprintf_r+0x194>
 800975e:	ab03      	add	r3, sp, #12
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	462a      	mov	r2, r5
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <_svfiprintf_r+0x1f8>)
 8009766:	a904      	add	r1, sp, #16
 8009768:	4638      	mov	r0, r7
 800976a:	f7fd fc5b 	bl	8007024 <_printf_float>
 800976e:	1c42      	adds	r2, r0, #1
 8009770:	4606      	mov	r6, r0
 8009772:	d1d6      	bne.n	8009722 <_svfiprintf_r+0x176>
 8009774:	89ab      	ldrh	r3, [r5, #12]
 8009776:	065b      	lsls	r3, r3, #25
 8009778:	f53f af2c 	bmi.w	80095d4 <_svfiprintf_r+0x28>
 800977c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800977e:	b01d      	add	sp, #116	; 0x74
 8009780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009784:	ab03      	add	r3, sp, #12
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	462a      	mov	r2, r5
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <_svfiprintf_r+0x1f8>)
 800978c:	a904      	add	r1, sp, #16
 800978e:	4638      	mov	r0, r7
 8009790:	f7fd feec 	bl	800756c <_printf_i>
 8009794:	e7eb      	b.n	800976e <_svfiprintf_r+0x1c2>
 8009796:	bf00      	nop
 8009798:	0800c2ac 	.word	0x0800c2ac
 800979c:	0800c2b6 	.word	0x0800c2b6
 80097a0:	08007025 	.word	0x08007025
 80097a4:	080094f5 	.word	0x080094f5
 80097a8:	0800c2b2 	.word	0x0800c2b2

080097ac <__sfputc_r>:
 80097ac:	6893      	ldr	r3, [r2, #8]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	b410      	push	{r4}
 80097b4:	6093      	str	r3, [r2, #8]
 80097b6:	da08      	bge.n	80097ca <__sfputc_r+0x1e>
 80097b8:	6994      	ldr	r4, [r2, #24]
 80097ba:	42a3      	cmp	r3, r4
 80097bc:	db01      	blt.n	80097c2 <__sfputc_r+0x16>
 80097be:	290a      	cmp	r1, #10
 80097c0:	d103      	bne.n	80097ca <__sfputc_r+0x1e>
 80097c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c6:	f7fe b8a5 	b.w	8007914 <__swbuf_r>
 80097ca:	6813      	ldr	r3, [r2, #0]
 80097cc:	1c58      	adds	r0, r3, #1
 80097ce:	6010      	str	r0, [r2, #0]
 80097d0:	7019      	strb	r1, [r3, #0]
 80097d2:	4608      	mov	r0, r1
 80097d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d8:	4770      	bx	lr

080097da <__sfputs_r>:
 80097da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097dc:	4606      	mov	r6, r0
 80097de:	460f      	mov	r7, r1
 80097e0:	4614      	mov	r4, r2
 80097e2:	18d5      	adds	r5, r2, r3
 80097e4:	42ac      	cmp	r4, r5
 80097e6:	d101      	bne.n	80097ec <__sfputs_r+0x12>
 80097e8:	2000      	movs	r0, #0
 80097ea:	e007      	b.n	80097fc <__sfputs_r+0x22>
 80097ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f0:	463a      	mov	r2, r7
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff ffda 	bl	80097ac <__sfputc_r>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d1f3      	bne.n	80097e4 <__sfputs_r+0xa>
 80097fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009800 <_vfiprintf_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	460d      	mov	r5, r1
 8009806:	b09d      	sub	sp, #116	; 0x74
 8009808:	4614      	mov	r4, r2
 800980a:	4698      	mov	r8, r3
 800980c:	4606      	mov	r6, r0
 800980e:	b118      	cbz	r0, 8009818 <_vfiprintf_r+0x18>
 8009810:	6983      	ldr	r3, [r0, #24]
 8009812:	b90b      	cbnz	r3, 8009818 <_vfiprintf_r+0x18>
 8009814:	f7ff f8d4 	bl	80089c0 <__sinit>
 8009818:	4b89      	ldr	r3, [pc, #548]	; (8009a40 <_vfiprintf_r+0x240>)
 800981a:	429d      	cmp	r5, r3
 800981c:	d11b      	bne.n	8009856 <_vfiprintf_r+0x56>
 800981e:	6875      	ldr	r5, [r6, #4]
 8009820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009822:	07d9      	lsls	r1, r3, #31
 8009824:	d405      	bmi.n	8009832 <_vfiprintf_r+0x32>
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	059a      	lsls	r2, r3, #22
 800982a:	d402      	bmi.n	8009832 <_vfiprintf_r+0x32>
 800982c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982e:	f7ff f96a 	bl	8008b06 <__retarget_lock_acquire_recursive>
 8009832:	89ab      	ldrh	r3, [r5, #12]
 8009834:	071b      	lsls	r3, r3, #28
 8009836:	d501      	bpl.n	800983c <_vfiprintf_r+0x3c>
 8009838:	692b      	ldr	r3, [r5, #16]
 800983a:	b9eb      	cbnz	r3, 8009878 <_vfiprintf_r+0x78>
 800983c:	4629      	mov	r1, r5
 800983e:	4630      	mov	r0, r6
 8009840:	f7fe f8ba 	bl	80079b8 <__swsetup_r>
 8009844:	b1c0      	cbz	r0, 8009878 <_vfiprintf_r+0x78>
 8009846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009848:	07dc      	lsls	r4, r3, #31
 800984a:	d50e      	bpl.n	800986a <_vfiprintf_r+0x6a>
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	b01d      	add	sp, #116	; 0x74
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	4b7b      	ldr	r3, [pc, #492]	; (8009a44 <_vfiprintf_r+0x244>)
 8009858:	429d      	cmp	r5, r3
 800985a:	d101      	bne.n	8009860 <_vfiprintf_r+0x60>
 800985c:	68b5      	ldr	r5, [r6, #8]
 800985e:	e7df      	b.n	8009820 <_vfiprintf_r+0x20>
 8009860:	4b79      	ldr	r3, [pc, #484]	; (8009a48 <_vfiprintf_r+0x248>)
 8009862:	429d      	cmp	r5, r3
 8009864:	bf08      	it	eq
 8009866:	68f5      	ldreq	r5, [r6, #12]
 8009868:	e7da      	b.n	8009820 <_vfiprintf_r+0x20>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	0598      	lsls	r0, r3, #22
 800986e:	d4ed      	bmi.n	800984c <_vfiprintf_r+0x4c>
 8009870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009872:	f7ff f949 	bl	8008b08 <__retarget_lock_release_recursive>
 8009876:	e7e9      	b.n	800984c <_vfiprintf_r+0x4c>
 8009878:	2300      	movs	r3, #0
 800987a:	9309      	str	r3, [sp, #36]	; 0x24
 800987c:	2320      	movs	r3, #32
 800987e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009882:	f8cd 800c 	str.w	r8, [sp, #12]
 8009886:	2330      	movs	r3, #48	; 0x30
 8009888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a4c <_vfiprintf_r+0x24c>
 800988c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009890:	f04f 0901 	mov.w	r9, #1
 8009894:	4623      	mov	r3, r4
 8009896:	469a      	mov	sl, r3
 8009898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800989c:	b10a      	cbz	r2, 80098a2 <_vfiprintf_r+0xa2>
 800989e:	2a25      	cmp	r2, #37	; 0x25
 80098a0:	d1f9      	bne.n	8009896 <_vfiprintf_r+0x96>
 80098a2:	ebba 0b04 	subs.w	fp, sl, r4
 80098a6:	d00b      	beq.n	80098c0 <_vfiprintf_r+0xc0>
 80098a8:	465b      	mov	r3, fp
 80098aa:	4622      	mov	r2, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ff93 	bl	80097da <__sfputs_r>
 80098b4:	3001      	adds	r0, #1
 80098b6:	f000 80aa 	beq.w	8009a0e <_vfiprintf_r+0x20e>
 80098ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098bc:	445a      	add	r2, fp
 80098be:	9209      	str	r2, [sp, #36]	; 0x24
 80098c0:	f89a 3000 	ldrb.w	r3, [sl]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80a2 	beq.w	8009a0e <_vfiprintf_r+0x20e>
 80098ca:	2300      	movs	r3, #0
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295
 80098d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d4:	f10a 0a01 	add.w	sl, sl, #1
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098e0:	931a      	str	r3, [sp, #104]	; 0x68
 80098e2:	4654      	mov	r4, sl
 80098e4:	2205      	movs	r2, #5
 80098e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ea:	4858      	ldr	r0, [pc, #352]	; (8009a4c <_vfiprintf_r+0x24c>)
 80098ec:	f7f6 fc98 	bl	8000220 <memchr>
 80098f0:	9a04      	ldr	r2, [sp, #16]
 80098f2:	b9d8      	cbnz	r0, 800992c <_vfiprintf_r+0x12c>
 80098f4:	06d1      	lsls	r1, r2, #27
 80098f6:	bf44      	itt	mi
 80098f8:	2320      	movmi	r3, #32
 80098fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fe:	0713      	lsls	r3, r2, #28
 8009900:	bf44      	itt	mi
 8009902:	232b      	movmi	r3, #43	; 0x2b
 8009904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009908:	f89a 3000 	ldrb.w	r3, [sl]
 800990c:	2b2a      	cmp	r3, #42	; 0x2a
 800990e:	d015      	beq.n	800993c <_vfiprintf_r+0x13c>
 8009910:	9a07      	ldr	r2, [sp, #28]
 8009912:	4654      	mov	r4, sl
 8009914:	2000      	movs	r0, #0
 8009916:	f04f 0c0a 	mov.w	ip, #10
 800991a:	4621      	mov	r1, r4
 800991c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009920:	3b30      	subs	r3, #48	; 0x30
 8009922:	2b09      	cmp	r3, #9
 8009924:	d94e      	bls.n	80099c4 <_vfiprintf_r+0x1c4>
 8009926:	b1b0      	cbz	r0, 8009956 <_vfiprintf_r+0x156>
 8009928:	9207      	str	r2, [sp, #28]
 800992a:	e014      	b.n	8009956 <_vfiprintf_r+0x156>
 800992c:	eba0 0308 	sub.w	r3, r0, r8
 8009930:	fa09 f303 	lsl.w	r3, r9, r3
 8009934:	4313      	orrs	r3, r2
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	46a2      	mov	sl, r4
 800993a:	e7d2      	b.n	80098e2 <_vfiprintf_r+0xe2>
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	1d19      	adds	r1, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	9103      	str	r1, [sp, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	bfbb      	ittet	lt
 8009948:	425b      	neglt	r3, r3
 800994a:	f042 0202 	orrlt.w	r2, r2, #2
 800994e:	9307      	strge	r3, [sp, #28]
 8009950:	9307      	strlt	r3, [sp, #28]
 8009952:	bfb8      	it	lt
 8009954:	9204      	strlt	r2, [sp, #16]
 8009956:	7823      	ldrb	r3, [r4, #0]
 8009958:	2b2e      	cmp	r3, #46	; 0x2e
 800995a:	d10c      	bne.n	8009976 <_vfiprintf_r+0x176>
 800995c:	7863      	ldrb	r3, [r4, #1]
 800995e:	2b2a      	cmp	r3, #42	; 0x2a
 8009960:	d135      	bne.n	80099ce <_vfiprintf_r+0x1ce>
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	9203      	str	r2, [sp, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	bfb8      	it	lt
 800996e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009972:	3402      	adds	r4, #2
 8009974:	9305      	str	r3, [sp, #20]
 8009976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a5c <_vfiprintf_r+0x25c>
 800997a:	7821      	ldrb	r1, [r4, #0]
 800997c:	2203      	movs	r2, #3
 800997e:	4650      	mov	r0, sl
 8009980:	f7f6 fc4e 	bl	8000220 <memchr>
 8009984:	b140      	cbz	r0, 8009998 <_vfiprintf_r+0x198>
 8009986:	2340      	movs	r3, #64	; 0x40
 8009988:	eba0 000a 	sub.w	r0, r0, sl
 800998c:	fa03 f000 	lsl.w	r0, r3, r0
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	4303      	orrs	r3, r0
 8009994:	3401      	adds	r4, #1
 8009996:	9304      	str	r3, [sp, #16]
 8009998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999c:	482c      	ldr	r0, [pc, #176]	; (8009a50 <_vfiprintf_r+0x250>)
 800999e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099a2:	2206      	movs	r2, #6
 80099a4:	f7f6 fc3c 	bl	8000220 <memchr>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d03f      	beq.n	8009a2c <_vfiprintf_r+0x22c>
 80099ac:	4b29      	ldr	r3, [pc, #164]	; (8009a54 <_vfiprintf_r+0x254>)
 80099ae:	bb1b      	cbnz	r3, 80099f8 <_vfiprintf_r+0x1f8>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	3307      	adds	r3, #7
 80099b4:	f023 0307 	bic.w	r3, r3, #7
 80099b8:	3308      	adds	r3, #8
 80099ba:	9303      	str	r3, [sp, #12]
 80099bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099be:	443b      	add	r3, r7
 80099c0:	9309      	str	r3, [sp, #36]	; 0x24
 80099c2:	e767      	b.n	8009894 <_vfiprintf_r+0x94>
 80099c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c8:	460c      	mov	r4, r1
 80099ca:	2001      	movs	r0, #1
 80099cc:	e7a5      	b.n	800991a <_vfiprintf_r+0x11a>
 80099ce:	2300      	movs	r3, #0
 80099d0:	3401      	adds	r4, #1
 80099d2:	9305      	str	r3, [sp, #20]
 80099d4:	4619      	mov	r1, r3
 80099d6:	f04f 0c0a 	mov.w	ip, #10
 80099da:	4620      	mov	r0, r4
 80099dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e0:	3a30      	subs	r2, #48	; 0x30
 80099e2:	2a09      	cmp	r2, #9
 80099e4:	d903      	bls.n	80099ee <_vfiprintf_r+0x1ee>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0c5      	beq.n	8009976 <_vfiprintf_r+0x176>
 80099ea:	9105      	str	r1, [sp, #20]
 80099ec:	e7c3      	b.n	8009976 <_vfiprintf_r+0x176>
 80099ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80099f2:	4604      	mov	r4, r0
 80099f4:	2301      	movs	r3, #1
 80099f6:	e7f0      	b.n	80099da <_vfiprintf_r+0x1da>
 80099f8:	ab03      	add	r3, sp, #12
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	462a      	mov	r2, r5
 80099fe:	4b16      	ldr	r3, [pc, #88]	; (8009a58 <_vfiprintf_r+0x258>)
 8009a00:	a904      	add	r1, sp, #16
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7fd fb0e 	bl	8007024 <_printf_float>
 8009a08:	4607      	mov	r7, r0
 8009a0a:	1c78      	adds	r0, r7, #1
 8009a0c:	d1d6      	bne.n	80099bc <_vfiprintf_r+0x1bc>
 8009a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a10:	07d9      	lsls	r1, r3, #31
 8009a12:	d405      	bmi.n	8009a20 <_vfiprintf_r+0x220>
 8009a14:	89ab      	ldrh	r3, [r5, #12]
 8009a16:	059a      	lsls	r2, r3, #22
 8009a18:	d402      	bmi.n	8009a20 <_vfiprintf_r+0x220>
 8009a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a1c:	f7ff f874 	bl	8008b08 <__retarget_lock_release_recursive>
 8009a20:	89ab      	ldrh	r3, [r5, #12]
 8009a22:	065b      	lsls	r3, r3, #25
 8009a24:	f53f af12 	bmi.w	800984c <_vfiprintf_r+0x4c>
 8009a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a2a:	e711      	b.n	8009850 <_vfiprintf_r+0x50>
 8009a2c:	ab03      	add	r3, sp, #12
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	462a      	mov	r2, r5
 8009a32:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <_vfiprintf_r+0x258>)
 8009a34:	a904      	add	r1, sp, #16
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7fd fd98 	bl	800756c <_printf_i>
 8009a3c:	e7e4      	b.n	8009a08 <_vfiprintf_r+0x208>
 8009a3e:	bf00      	nop
 8009a40:	0800c114 	.word	0x0800c114
 8009a44:	0800c134 	.word	0x0800c134
 8009a48:	0800c0f4 	.word	0x0800c0f4
 8009a4c:	0800c2ac 	.word	0x0800c2ac
 8009a50:	0800c2b6 	.word	0x0800c2b6
 8009a54:	08007025 	.word	0x08007025
 8009a58:	080097db 	.word	0x080097db
 8009a5c:	0800c2b2 	.word	0x0800c2b2

08009a60 <_sbrk_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d06      	ldr	r5, [pc, #24]	; (8009a7c <_sbrk_r+0x1c>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f7f9 fef6 	bl	800385c <_sbrk>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_sbrk_r+0x1a>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_sbrk_r+0x1a>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	200003a4 	.word	0x200003a4

08009a80 <__sread>:
 8009a80:	b510      	push	{r4, lr}
 8009a82:	460c      	mov	r4, r1
 8009a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a88:	f000 f92c 	bl	8009ce4 <_read_r>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	bfab      	itete	ge
 8009a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a92:	89a3      	ldrhlt	r3, [r4, #12]
 8009a94:	181b      	addge	r3, r3, r0
 8009a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a9a:	bfac      	ite	ge
 8009a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a9e:	81a3      	strhlt	r3, [r4, #12]
 8009aa0:	bd10      	pop	{r4, pc}

08009aa2 <__swrite>:
 8009aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa6:	461f      	mov	r7, r3
 8009aa8:	898b      	ldrh	r3, [r1, #12]
 8009aaa:	05db      	lsls	r3, r3, #23
 8009aac:	4605      	mov	r5, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	4616      	mov	r6, r2
 8009ab2:	d505      	bpl.n	8009ac0 <__swrite+0x1e>
 8009ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab8:	2302      	movs	r3, #2
 8009aba:	2200      	movs	r2, #0
 8009abc:	f000 f898 	bl	8009bf0 <_lseek_r>
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aca:	81a3      	strh	r3, [r4, #12]
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad6:	f000 b817 	b.w	8009b08 <_write_r>

08009ada <__sseek>:
 8009ada:	b510      	push	{r4, lr}
 8009adc:	460c      	mov	r4, r1
 8009ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae2:	f000 f885 	bl	8009bf0 <_lseek_r>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	bf15      	itete	ne
 8009aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009af6:	81a3      	strheq	r3, [r4, #12]
 8009af8:	bf18      	it	ne
 8009afa:	81a3      	strhne	r3, [r4, #12]
 8009afc:	bd10      	pop	{r4, pc}

08009afe <__sclose>:
 8009afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b02:	f000 b831 	b.w	8009b68 <_close_r>
	...

08009b08 <_write_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	; (8009b28 <_write_r+0x20>)
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f7f9 fe4f 	bl	80037ba <_write>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_write_r+0x1e>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_write_r+0x1e>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	200003a4 	.word	0x200003a4

08009b2c <__assert_func>:
 8009b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b2e:	4614      	mov	r4, r2
 8009b30:	461a      	mov	r2, r3
 8009b32:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <__assert_func+0x2c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4605      	mov	r5, r0
 8009b38:	68d8      	ldr	r0, [r3, #12]
 8009b3a:	b14c      	cbz	r4, 8009b50 <__assert_func+0x24>
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <__assert_func+0x30>)
 8009b3e:	9100      	str	r1, [sp, #0]
 8009b40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b44:	4906      	ldr	r1, [pc, #24]	; (8009b60 <__assert_func+0x34>)
 8009b46:	462b      	mov	r3, r5
 8009b48:	f000 f81e 	bl	8009b88 <fiprintf>
 8009b4c:	f000 f8e9 	bl	8009d22 <abort>
 8009b50:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <__assert_func+0x38>)
 8009b52:	461c      	mov	r4, r3
 8009b54:	e7f3      	b.n	8009b3e <__assert_func+0x12>
 8009b56:	bf00      	nop
 8009b58:	20000014 	.word	0x20000014
 8009b5c:	0800c2bd 	.word	0x0800c2bd
 8009b60:	0800c2ca 	.word	0x0800c2ca
 8009b64:	0800c2f8 	.word	0x0800c2f8

08009b68 <_close_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d06      	ldr	r5, [pc, #24]	; (8009b84 <_close_r+0x1c>)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4604      	mov	r4, r0
 8009b70:	4608      	mov	r0, r1
 8009b72:	602b      	str	r3, [r5, #0]
 8009b74:	f7f9 fe3d 	bl	80037f2 <_close>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_close_r+0x1a>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_close_r+0x1a>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	200003a4 	.word	0x200003a4

08009b88 <fiprintf>:
 8009b88:	b40e      	push	{r1, r2, r3}
 8009b8a:	b503      	push	{r0, r1, lr}
 8009b8c:	4601      	mov	r1, r0
 8009b8e:	ab03      	add	r3, sp, #12
 8009b90:	4805      	ldr	r0, [pc, #20]	; (8009ba8 <fiprintf+0x20>)
 8009b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b96:	6800      	ldr	r0, [r0, #0]
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	f7ff fe31 	bl	8009800 <_vfiprintf_r>
 8009b9e:	b002      	add	sp, #8
 8009ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba4:	b003      	add	sp, #12
 8009ba6:	4770      	bx	lr
 8009ba8:	20000014 	.word	0x20000014

08009bac <_fstat_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d07      	ldr	r5, [pc, #28]	; (8009bcc <_fstat_r+0x20>)
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	602b      	str	r3, [r5, #0]
 8009bba:	f7f9 fe26 	bl	800380a <_fstat>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	d102      	bne.n	8009bc8 <_fstat_r+0x1c>
 8009bc2:	682b      	ldr	r3, [r5, #0]
 8009bc4:	b103      	cbz	r3, 8009bc8 <_fstat_r+0x1c>
 8009bc6:	6023      	str	r3, [r4, #0]
 8009bc8:	bd38      	pop	{r3, r4, r5, pc}
 8009bca:	bf00      	nop
 8009bcc:	200003a4 	.word	0x200003a4

08009bd0 <_isatty_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4d06      	ldr	r5, [pc, #24]	; (8009bec <_isatty_r+0x1c>)
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	4608      	mov	r0, r1
 8009bda:	602b      	str	r3, [r5, #0]
 8009bdc:	f7f9 fe25 	bl	800382a <_isatty>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d102      	bne.n	8009bea <_isatty_r+0x1a>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	b103      	cbz	r3, 8009bea <_isatty_r+0x1a>
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	200003a4 	.word	0x200003a4

08009bf0 <_lseek_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d07      	ldr	r5, [pc, #28]	; (8009c10 <_lseek_r+0x20>)
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	602a      	str	r2, [r5, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f7f9 fe1e 	bl	8003840 <_lseek>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_lseek_r+0x1e>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_lseek_r+0x1e>
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	200003a4 	.word	0x200003a4

08009c14 <__ascii_mbtowc>:
 8009c14:	b082      	sub	sp, #8
 8009c16:	b901      	cbnz	r1, 8009c1a <__ascii_mbtowc+0x6>
 8009c18:	a901      	add	r1, sp, #4
 8009c1a:	b142      	cbz	r2, 8009c2e <__ascii_mbtowc+0x1a>
 8009c1c:	b14b      	cbz	r3, 8009c32 <__ascii_mbtowc+0x1e>
 8009c1e:	7813      	ldrb	r3, [r2, #0]
 8009c20:	600b      	str	r3, [r1, #0]
 8009c22:	7812      	ldrb	r2, [r2, #0]
 8009c24:	1e10      	subs	r0, r2, #0
 8009c26:	bf18      	it	ne
 8009c28:	2001      	movne	r0, #1
 8009c2a:	b002      	add	sp, #8
 8009c2c:	4770      	bx	lr
 8009c2e:	4610      	mov	r0, r2
 8009c30:	e7fb      	b.n	8009c2a <__ascii_mbtowc+0x16>
 8009c32:	f06f 0001 	mvn.w	r0, #1
 8009c36:	e7f8      	b.n	8009c2a <__ascii_mbtowc+0x16>

08009c38 <memmove>:
 8009c38:	4288      	cmp	r0, r1
 8009c3a:	b510      	push	{r4, lr}
 8009c3c:	eb01 0402 	add.w	r4, r1, r2
 8009c40:	d902      	bls.n	8009c48 <memmove+0x10>
 8009c42:	4284      	cmp	r4, r0
 8009c44:	4623      	mov	r3, r4
 8009c46:	d807      	bhi.n	8009c58 <memmove+0x20>
 8009c48:	1e43      	subs	r3, r0, #1
 8009c4a:	42a1      	cmp	r1, r4
 8009c4c:	d008      	beq.n	8009c60 <memmove+0x28>
 8009c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c56:	e7f8      	b.n	8009c4a <memmove+0x12>
 8009c58:	4402      	add	r2, r0
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	428a      	cmp	r2, r1
 8009c5e:	d100      	bne.n	8009c62 <memmove+0x2a>
 8009c60:	bd10      	pop	{r4, pc}
 8009c62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c6a:	e7f7      	b.n	8009c5c <memmove+0x24>

08009c6c <__malloc_lock>:
 8009c6c:	4801      	ldr	r0, [pc, #4]	; (8009c74 <__malloc_lock+0x8>)
 8009c6e:	f7fe bf4a 	b.w	8008b06 <__retarget_lock_acquire_recursive>
 8009c72:	bf00      	nop
 8009c74:	20000398 	.word	0x20000398

08009c78 <__malloc_unlock>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__malloc_unlock+0x8>)
 8009c7a:	f7fe bf45 	b.w	8008b08 <__retarget_lock_release_recursive>
 8009c7e:	bf00      	nop
 8009c80:	20000398 	.word	0x20000398

08009c84 <_realloc_r>:
 8009c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4614      	mov	r4, r2
 8009c8c:	460e      	mov	r6, r1
 8009c8e:	b921      	cbnz	r1, 8009c9a <_realloc_r+0x16>
 8009c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	4611      	mov	r1, r2
 8009c96:	f7ff bbb9 	b.w	800940c <_malloc_r>
 8009c9a:	b92a      	cbnz	r2, 8009ca8 <_realloc_r+0x24>
 8009c9c:	f7ff fb4a 	bl	8009334 <_free_r>
 8009ca0:	4625      	mov	r5, r4
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca8:	f000 f842 	bl	8009d30 <_malloc_usable_size_r>
 8009cac:	4284      	cmp	r4, r0
 8009cae:	4607      	mov	r7, r0
 8009cb0:	d802      	bhi.n	8009cb8 <_realloc_r+0x34>
 8009cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cb6:	d812      	bhi.n	8009cde <_realloc_r+0x5a>
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4640      	mov	r0, r8
 8009cbc:	f7ff fba6 	bl	800940c <_malloc_r>
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d0ed      	beq.n	8009ca2 <_realloc_r+0x1e>
 8009cc6:	42bc      	cmp	r4, r7
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4631      	mov	r1, r6
 8009ccc:	bf28      	it	cs
 8009cce:	463a      	movcs	r2, r7
 8009cd0:	f7fe ff88 	bl	8008be4 <memcpy>
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	f7ff fb2c 	bl	8009334 <_free_r>
 8009cdc:	e7e1      	b.n	8009ca2 <_realloc_r+0x1e>
 8009cde:	4635      	mov	r5, r6
 8009ce0:	e7df      	b.n	8009ca2 <_realloc_r+0x1e>
	...

08009ce4 <_read_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d07      	ldr	r5, [pc, #28]	; (8009d04 <_read_r+0x20>)
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4608      	mov	r0, r1
 8009cec:	4611      	mov	r1, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f7f9 fd44 	bl	8003780 <_read>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_read_r+0x1e>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_read_r+0x1e>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	200003a4 	.word	0x200003a4

08009d08 <__ascii_wctomb>:
 8009d08:	b149      	cbz	r1, 8009d1e <__ascii_wctomb+0x16>
 8009d0a:	2aff      	cmp	r2, #255	; 0xff
 8009d0c:	bf85      	ittet	hi
 8009d0e:	238a      	movhi	r3, #138	; 0x8a
 8009d10:	6003      	strhi	r3, [r0, #0]
 8009d12:	700a      	strbls	r2, [r1, #0]
 8009d14:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d18:	bf98      	it	ls
 8009d1a:	2001      	movls	r0, #1
 8009d1c:	4770      	bx	lr
 8009d1e:	4608      	mov	r0, r1
 8009d20:	4770      	bx	lr

08009d22 <abort>:
 8009d22:	b508      	push	{r3, lr}
 8009d24:	2006      	movs	r0, #6
 8009d26:	f000 f833 	bl	8009d90 <raise>
 8009d2a:	2001      	movs	r0, #1
 8009d2c:	f7f9 fd1e 	bl	800376c <_exit>

08009d30 <_malloc_usable_size_r>:
 8009d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d34:	1f18      	subs	r0, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfbc      	itt	lt
 8009d3a:	580b      	ldrlt	r3, [r1, r0]
 8009d3c:	18c0      	addlt	r0, r0, r3
 8009d3e:	4770      	bx	lr

08009d40 <_raise_r>:
 8009d40:	291f      	cmp	r1, #31
 8009d42:	b538      	push	{r3, r4, r5, lr}
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	d904      	bls.n	8009d54 <_raise_r+0x14>
 8009d4a:	2316      	movs	r3, #22
 8009d4c:	6003      	str	r3, [r0, #0]
 8009d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d56:	b112      	cbz	r2, 8009d5e <_raise_r+0x1e>
 8009d58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d5c:	b94b      	cbnz	r3, 8009d72 <_raise_r+0x32>
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 f830 	bl	8009dc4 <_getpid_r>
 8009d64:	462a      	mov	r2, r5
 8009d66:	4601      	mov	r1, r0
 8009d68:	4620      	mov	r0, r4
 8009d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d6e:	f000 b817 	b.w	8009da0 <_kill_r>
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d00a      	beq.n	8009d8c <_raise_r+0x4c>
 8009d76:	1c59      	adds	r1, r3, #1
 8009d78:	d103      	bne.n	8009d82 <_raise_r+0x42>
 8009d7a:	2316      	movs	r3, #22
 8009d7c:	6003      	str	r3, [r0, #0]
 8009d7e:	2001      	movs	r0, #1
 8009d80:	e7e7      	b.n	8009d52 <_raise_r+0x12>
 8009d82:	2400      	movs	r4, #0
 8009d84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d88:	4628      	mov	r0, r5
 8009d8a:	4798      	blx	r3
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	e7e0      	b.n	8009d52 <_raise_r+0x12>

08009d90 <raise>:
 8009d90:	4b02      	ldr	r3, [pc, #8]	; (8009d9c <raise+0xc>)
 8009d92:	4601      	mov	r1, r0
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f7ff bfd3 	b.w	8009d40 <_raise_r>
 8009d9a:	bf00      	nop
 8009d9c:	20000014 	.word	0x20000014

08009da0 <_kill_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d07      	ldr	r5, [pc, #28]	; (8009dc0 <_kill_r+0x20>)
 8009da4:	2300      	movs	r3, #0
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	4611      	mov	r1, r2
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	f7f9 fccd 	bl	800374c <_kill>
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	d102      	bne.n	8009dbc <_kill_r+0x1c>
 8009db6:	682b      	ldr	r3, [r5, #0]
 8009db8:	b103      	cbz	r3, 8009dbc <_kill_r+0x1c>
 8009dba:	6023      	str	r3, [r4, #0]
 8009dbc:	bd38      	pop	{r3, r4, r5, pc}
 8009dbe:	bf00      	nop
 8009dc0:	200003a4 	.word	0x200003a4

08009dc4 <_getpid_r>:
 8009dc4:	f7f9 bcba 	b.w	800373c <_getpid>

08009dc8 <_init>:
 8009dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dca:	bf00      	nop
 8009dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dce:	bc08      	pop	{r3}
 8009dd0:	469e      	mov	lr, r3
 8009dd2:	4770      	bx	lr

08009dd4 <_fini>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr
