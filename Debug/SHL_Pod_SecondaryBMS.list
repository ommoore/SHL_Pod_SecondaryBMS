
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800602c  0800602c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000070  080060a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  080060a4  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139fd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc9  00000000  00000000  00033a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00036668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00037498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fcd  00000000  00000000  00038200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe49  00000000  00000000  000601cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee059  00000000  00000000  00070016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e06f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042dc  00000000  00000000  0015e0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a88 	.word	0x08005a88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005a88 	.word	0x08005a88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <TinyBMS_ReadDeviceTemperatures>:
 * 						 	      [INT16]				   [INT16] 				  [INT16]
 * 						  	(Reg 48) DATA1 - TinyBMS Internal Temperature
 * 						  	(Reg 42) DATA2 - External Temp Sensor #1 (value of -327689 if NC)
 * 						  	(Reg 43) DATA3 - External Temp Sensor #2 (value of -327689 if NC)
 */
uint8_t TinyBMS_ReadDeviceTemperatures(UART_HandleTypeDef *huart2) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b0a2      	sub	sp, #136	; 0x88
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_ReadDeviceTemperatures\n");
 80005b0:	4881      	ldr	r0, [pc, #516]	; (80007b8 <TinyBMS_ReadDeviceTemperatures+0x210>)
 80005b2:	f004 fb23 	bl	8004bfc <puts>
	uint8_t retval = 0xFF;
 80005b6:	23ff      	movs	r3, #255	; 0xff
 80005b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint8_t tx_buffer[50], rx_buffer[50];
	uint8_t PL = 0, CRC_LSB = 0, CRC_MSB = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	int16_t DATA1 = 0, DATA2 = 0, DATA3 = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80005da:	2300      	movs	r3, #0
 80005dc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80005f2:	23aa      	movs	r3, #170	; 0xaa
 80005f4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	tx_buffer[1] = 0x1B; //command
 80005f8:	231b      	movs	r3, #27
 80005fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	//Verified!
	CRC_request = CRC16(tx_buffer, 2);		//should be 0x1B3F
 80005fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000602:	2102      	movs	r1, #2
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f8ed 	bl	80007e4 <CRC16>
 800060a:	4603      	mov	r3, r0
 800060c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	CRC_LSB = (CRC_request & 0xFF); 		//should be 0x3F
 8000610:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000614:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	CRC_MSB = ((CRC_request >> 8) & 0xFF);	//should be 0x1B
 8000618:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	b29b      	uxth	r3, r3
 8000620:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	printf("CRC_request: 0x%04X\n", CRC_request);
	printf("CRC_LSB: 0x%02X\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8000624:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000628:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	tx_buffer[3] = CRC_MSB;
 800062c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_UART_Transmit_IT(huart2, (uint8_t *)tx_buffer, 4);
 8000634:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000638:	2204      	movs	r2, #4
 800063a:	4619      	mov	r1, r3
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f002 fef5 	bl	800342c <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(huart2, (uint8_t *)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2202      	movs	r2, #2
 8000648:	4619      	mov	r1, r3
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f002 ff4a 	bl	80034e4 <HAL_UART_Receive_IT>

	//[ERROR] //If Byte 2 is equal to 0x00 instead of 0x1B
	if(rx_buffer[1] == 0x00) {
 8000650:	7a7b      	ldrb	r3, [r7, #9]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d13a      	bne.n	80006cc <TinyBMS_ReadDeviceTemperatures+0x124>
		printf("Response from BMS [ERROR]\n");
 8000656:	4859      	ldr	r0, [pc, #356]	; (80007bc <TinyBMS_ReadDeviceTemperatures+0x214>)
 8000658:	f004 fad0 	bl	8004bfc <puts>

		HAL_UART_Receive_IT(huart2, (uint8_t *)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	3302      	adds	r3, #2
 8000662:	2204      	movs	r2, #4
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f002 ff3c 	bl	80034e4 <HAL_UART_Receive_IT>

		uint8_t error = rx_buffer[3];
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

		// uint16_t word = ((uint8_t msb << 8) | uint8_t lsb)
		CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8000672:	7b7b      	ldrb	r3, [r7, #13]
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	b21a      	sxth	r2, r3
 8000678:	7b3b      	ldrb	r3, [r7, #12]
 800067a:	b21b      	sxth	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b21b      	sxth	r3, r3
 8000680:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f8aa 	bl	80007e4 <CRC16>
 8000690:	4603      	mov	r3, r0
 8000692:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

		if(CRC_calc == CRC_reply) {
 8000696:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800069a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800069e:	429a      	cmp	r2, r3
 80006a0:	d10d      	bne.n	80006be <TinyBMS_ReadDeviceTemperatures+0x116>
			printf("CRC pass\n");
 80006a2:	4847      	ldr	r0, [pc, #284]	; (80007c0 <TinyBMS_ReadDeviceTemperatures+0x218>)
 80006a4:	f004 faaa 	bl	8004bfc <puts>
			printf("ERROR Code: 0x%02X\n", error); //valid error code
 80006a8:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80006ac:	4619      	mov	r1, r3
 80006ae:	4845      	ldr	r0, [pc, #276]	; (80007c4 <TinyBMS_ReadDeviceTemperatures+0x21c>)
 80006b0:	f004 fa1e 	bl	8004af0 <iprintf>
			retval = error;
 80006b4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80006b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80006bc:	e075      	b.n	80007aa <TinyBMS_ReadDeviceTemperatures+0x202>
		} else {
			printf("CRC fail in BMS ERROR\n");
 80006be:	4842      	ldr	r0, [pc, #264]	; (80007c8 <TinyBMS_ReadDeviceTemperatures+0x220>)
 80006c0:	f004 fa9c 	bl	8004bfc <puts>
			retval = 0xFF; //failure
 80006c4:	23ff      	movs	r3, #255	; 0xff
 80006c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80006ca:	e06e      	b.n	80007aa <TinyBMS_ReadDeviceTemperatures+0x202>
		}

	//[OK]
	} else {
		printf("Response from BMS [OK]\n");
 80006cc:	483f      	ldr	r0, [pc, #252]	; (80007cc <TinyBMS_ReadDeviceTemperatures+0x224>)
 80006ce:	f004 fa95 	bl	8004bfc <puts>

		//Unsure if payload length changes
		HAL_UART_Receive_IT(huart2, (uint8_t *)&rx_buffer[2], 9); //read bytes 3-11 from OK reply
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	3302      	adds	r3, #2
 80006d8:	2209      	movs	r2, #9
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f002 ff01 	bl	80034e4 <HAL_UART_Receive_IT>

		PL = rx_buffer[2]; //payload length
 80006e2:	7abb      	ldrb	r3, [r7, #10]
 80006e4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		printf("Payload Length: 0x%02X\n", PL);
 80006e8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80006ec:	4619      	mov	r1, r3
 80006ee:	4838      	ldr	r0, [pc, #224]	; (80007d0 <TinyBMS_ReadDeviceTemperatures+0x228>)
 80006f0:	f004 f9fe 	bl	8004af0 <iprintf>

		DATA1 = ((rx_buffer[4] << 8) | rx_buffer[3]);
 80006f4:	7b3b      	ldrb	r3, [r7, #12]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		int16_t internalTemp = DATA1;  //TinyBMS internal temperature
 8000704:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000708:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

		DATA2 = ((rx_buffer[6] << 8) | rx_buffer[5]); //value of -32768 if not connected
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	7b7b      	ldrb	r3, [r7, #13]
 8000714:	b21b      	sxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		int16_t externalTemp1 = DATA2; //External Temp Sensor #1
 800071c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000720:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

		DATA3 = ((rx_buffer[8] << 8) | rx_buffer[7]); //value of -32768 if not connected
 8000724:	7c3b      	ldrb	r3, [r7, #16]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	b21b      	sxth	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		int16_t externalTemp2 = DATA3; //External Temp Sensor #2
 8000734:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000738:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

		CRC_reply = ((rx_buffer[10] << 8) | rx_buffer[9]);
 800073c:	7cbb      	ldrb	r3, [r7, #18]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	b21a      	sxth	r2, r3
 8000742:	7c7b      	ldrb	r3, [r7, #17]
 8000744:	b21b      	sxth	r3, r3
 8000746:	4313      	orrs	r3, r2
 8000748:	b21b      	sxth	r3, r3
 800074a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		CRC_calc = CRC16(rx_buffer, 9); //Calc CRC for bytes 1-9 of OK response
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2109      	movs	r1, #9
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f845 	bl	80007e4 <CRC16>
 800075a:	4603      	mov	r3, r0
 800075c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

		if(CRC_calc == CRC_reply) {
 8000760:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8000764:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000768:	429a      	cmp	r2, r3
 800076a:	d118      	bne.n	800079e <TinyBMS_ReadDeviceTemperatures+0x1f6>
			printf("CRC pass\n");
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <TinyBMS_ReadDeviceTemperatures+0x218>)
 800076e:	f004 fa45 	bl	8004bfc <puts>
			printf("TinyBMS internal temperature: 0x%04X\n", internalTemp);
 8000772:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8000776:	4619      	mov	r1, r3
 8000778:	4816      	ldr	r0, [pc, #88]	; (80007d4 <TinyBMS_ReadDeviceTemperatures+0x22c>)
 800077a:	f004 f9b9 	bl	8004af0 <iprintf>
			printf("External sensor 1 temperature: 0x%04X\n", externalTemp1);
 800077e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8000782:	4619      	mov	r1, r3
 8000784:	4814      	ldr	r0, [pc, #80]	; (80007d8 <TinyBMS_ReadDeviceTemperatures+0x230>)
 8000786:	f004 f9b3 	bl	8004af0 <iprintf>
			printf("External sensor 2 temperature: 0x%04X\n", externalTemp2);
 800078a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800078e:	4619      	mov	r1, r3
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <TinyBMS_ReadDeviceTemperatures+0x234>)
 8000792:	f004 f9ad 	bl	8004af0 <iprintf>
			retval = 0xAA; //success
 8000796:	23aa      	movs	r3, #170	; 0xaa
 8000798:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800079c:	e005      	b.n	80007aa <TinyBMS_ReadDeviceTemperatures+0x202>
		} else {
			printf("CRC fail in BMS OK\n");
 800079e:	4810      	ldr	r0, [pc, #64]	; (80007e0 <TinyBMS_ReadDeviceTemperatures+0x238>)
 80007a0:	f004 fa2c 	bl	8004bfc <puts>
			retval = 0xFF; //failure
 80007a4:	23ff      	movs	r3, #255	; 0xff
 80007a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

	}
	return retval;
 80007aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3788      	adds	r7, #136	; 0x88
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	08005aa0 	.word	0x08005aa0
 80007bc:	08005ac0 	.word	0x08005ac0
 80007c0:	08005adc 	.word	0x08005adc
 80007c4:	08005ae8 	.word	0x08005ae8
 80007c8:	08005afc 	.word	0x08005afc
 80007cc:	08005b14 	.word	0x08005b14
 80007d0:	08005b2c 	.word	0x08005b2c
 80007d4:	08005b44 	.word	0x08005b44
 80007d8:	08005b6c 	.word	0x08005b6c
 80007dc:	08005b94 	.word	0x08005b94
 80007e0:	08005bbc 	.word	0x08005bbc

080007e4 <CRC16>:
	return retval;
}


/*********** CRC Calculation ***********/
static uint16_t CRC16(const uint8_t* data, uint16_t length) {
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	807b      	strh	r3, [r7, #2]
	uint8_t tmp;
	uint16_t crcWord = 0xFFFF;
 80007f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f4:	81fb      	strh	r3, [r7, #14]

	while(length--) {
 80007f6:	e011      	b.n	800081c <CRC16+0x38>
		tmp = *data++ ^ crcWord;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4053      	eors	r3, r2
 8000806:	737b      	strb	r3, [r7, #13]
		crcWord >>= 8;
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	81fb      	strh	r3, [r7, #14]
		crcWord ^= crcTable[tmp];
 800080e:	7b7b      	ldrb	r3, [r7, #13]
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <CRC16+0x50>)
 8000812:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	4053      	eors	r3, r2
 800081a:	81fb      	strh	r3, [r7, #14]
	while(length--) {
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	1e5a      	subs	r2, r3, #1
 8000820:	807a      	strh	r2, [r7, #2]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1e8      	bne.n	80007f8 <CRC16+0x14>
	}
	return crcWord;
 8000826:	89fb      	ldrh	r3, [r7, #14]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	08005d74 	.word	0x08005d74

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f000 fed2 	bl	80015e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 f875 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000846:	f000 f9c7 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084a:	f000 f967 	bl	8000b1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800084e:	f000 f995 	bl	8000b7c <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000852:	f000 f8ff 	bl	8000a54 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000856:	f000 f931 	bl	8000abc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Init
  HAL_StatusTypeDef res;

  HAL_Delay(10);
 800085a:	200a      	movs	r0, #10
 800085c:	f000 ff20 	bl	80016a0 <HAL_Delay>

  rxCmpl = 0;
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <main+0xcc>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
  readLen = 1;
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <main+0xd0>)
 8000868:	2201      	movs	r2, #1
 800086a:	801a      	strh	r2, [r3, #0]
  wasRead = 0;
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <main+0xd4>)
 800086e:	2200      	movs	r2, #0
 8000870:	801a      	strh	r2, [r3, #0]
  rxPos1 = 0;
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <main+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	801a      	strh	r2, [r3, #0]
  rxPos2 = 0;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <main+0xdc>)
 800087a:	2200      	movs	r2, #0
 800087c:	801a      	strh	r2, [r3, #0]


  if((res = HAL_UART_Receive_IT(&huart2, (uint8_t*)rx, readLen)) == HAL_OK) {
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <main+0xd0>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	b29b      	uxth	r3, r3
 8000884:	461a      	mov	r2, r3
 8000886:	4924      	ldr	r1, [pc, #144]	; (8000918 <main+0xe0>)
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <main+0xe4>)
 800088a:	f002 fe2b 	bl	80034e4 <HAL_UART_Receive_IT>
 800088e:	4603      	mov	r3, r0
 8000890:	70fb      	strb	r3, [r7, #3]
 8000892:	78fb      	ldrb	r3, [r7, #3]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d103      	bne.n	80008a0 <main+0x68>
	  printf("HAL_OK\n");
 8000898:	4821      	ldr	r0, [pc, #132]	; (8000920 <main+0xe8>)
 800089a:	f004 f9af 	bl	8004bfc <puts>
 800089e:	e019      	b.n	80008d4 <main+0x9c>
  } else if(res == HAL_ERROR) {
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d110      	bne.n	80008c8 <main+0x90>
	  printf("< 2 HAL_ERROR %.2X state = %s\n", (uint8_t)huart2.ErrorCode, stateUART(huart2.RxState));
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <main+0xe4>)
 80008a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461c      	mov	r4, r3
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <main+0xe4>)
 80008b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fb6b 	bl	8000f90 <stateUART>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4621      	mov	r1, r4
 80008c0:	4818      	ldr	r0, [pc, #96]	; (8000924 <main+0xec>)
 80008c2:	f004 f915 	bl	8004af0 <iprintf>
 80008c6:	e005      	b.n	80008d4 <main+0x9c>
  } else if(res == HAL_BUSY) {
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d102      	bne.n	80008d4 <main+0x9c>
	  printf("< HAL_BUSY\n");
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <main+0xf0>)
 80008d0:	f004 f994 	bl	8004bfc <puts>
  }

  for(int i = 0; i < sizeof(tx); i++) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	e009      	b.n	80008ee <main+0xb6>
	  tx[i] = i;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	b2d9      	uxtb	r1, r3
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <main+0xf4>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	460a      	mov	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < sizeof(tx); i++) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b31      	cmp	r3, #49	; 0x31
 80008f2:	d9f2      	bls.n	80008da <main+0xa2>
  while(TinyBMS_ReadOnlineStatus(&huart2) != 0xAA) {}
  while(TinyBMS_ReadLifetimeCounter(&huart2) != 0xAA) {}
  while(TinyBMS_ReadEstimatedSOCValue(&huart2) != 0xAA) {}
  */

  while(TinyBMS_ReadDeviceTemperatures(&huart2) != 0xAA) {}
 80008f4:	bf00      	nop
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <main+0xe4>)
 80008f8:	f7ff fe56 	bl	80005a8 <TinyBMS_ReadDeviceTemperatures>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2baa      	cmp	r3, #170	; 0xaa
 8000900:	d1f9      	bne.n	80008f6 <main+0xbe>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	while(1) {
 8000902:	e7fe      	b.n	8000902 <main+0xca>
 8000904:	2000008d 	.word	0x2000008d
 8000908:	20000090 	.word	0x20000090
 800090c:	20000096 	.word	0x20000096
 8000910:	20000094 	.word	0x20000094
 8000914:	20000092 	.word	0x20000092
 8000918:	2000052c 	.word	0x2000052c
 800091c:	200005fc 	.word	0x200005fc
 8000920:	08005bd0 	.word	0x08005bd0
 8000924:	08005bd8 	.word	0x08005bd8
 8000928:	08005bf8 	.word	0x08005bf8
 800092c:	20000594 	.word	0x20000594

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0b4      	sub	sp, #208	; 0xd0
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800093a:	2230      	movs	r2, #48	; 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f004 f8ce 	bl	8004ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2284      	movs	r2, #132	; 0x84
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f004 f8bf 	bl	8004ae0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000962:	f001 fc6f 	bl	8002244 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <SystemClock_Config+0x118>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <SystemClock_Config+0x118>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <SystemClock_Config+0x118>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <SystemClock_Config+0x11c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000986:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <SystemClock_Config+0x11c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <SystemClock_Config+0x11c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099a:	2301      	movs	r3, #1
 800099c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	2302      	movs	r3, #2
 80009aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009bc:	2348      	movs	r3, #72	; 0x48
 80009be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fc46 	bl	8002264 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009de:	f000 fb63 	bl	80010a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fecf 	bl	80027ac <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a14:	f000 fb48 	bl	80010a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <SystemClock_Config+0x120>)
 8000a1a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 f8be 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000a3a:	f000 fb35 	bl	80010a8 <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	37d0      	adds	r7, #208	; 0xd0
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000
 8000a50:	00200180 	.word	0x00200180

08000a54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <MX_CAN1_Init+0x64>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a60:	2210      	movs	r2, #16
 8000a62:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_CAN1_Init+0x60>)
 8000aa2:	f000 fe21 	bl	80016e8 <HAL_CAN_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 fafc 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000680 	.word	0x20000680
 8000ab8:	40006400 	.word	0x40006400

08000abc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  //USART2: PA3 PD5 for TinyBMS communication
  //Verified with UART configuration stated on TinyBMS_Communication_Protocols.pdf page 4

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <MX_USART2_UART_Init+0x5c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USART2_UART_Init+0x58>)
 8000b00:	f002 fc46 	bl	8003390 <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 facd 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200005fc 	.word	0x200005fc
 8000b18:	40004400 	.word	0x40004400

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 1 */

  //USART3: PD8 PD9 for ST_LINK debugging (printf ITM)

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART3_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART3_UART_Init+0x58>)
 8000b60:	f002 fc16 	bl	8003390 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 fa9d 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000a4 	.word	0x200000a4
 8000b78:	40004800 	.word	0x40004800

08000b7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8a:	2206      	movs	r2, #6
 8000b8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	f001 f9f7 	bl	8001fb2 <HAL_PCD_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bca:	f000 fa6d 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000128 	.word	0x20000128

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b67      	ldr	r3, [pc, #412]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a66      	ldr	r2, [pc, #408]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b64      	ldr	r3, [pc, #400]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	4b61      	ldr	r3, [pc, #388]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a60      	ldr	r2, [pc, #384]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b5e      	ldr	r3, [pc, #376]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b5b      	ldr	r3, [pc, #364]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a5a      	ldr	r2, [pc, #360]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a54      	ldr	r2, [pc, #336]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a4e      	ldr	r2, [pc, #312]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b4c      	ldr	r3, [pc, #304]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	4b49      	ldr	r3, [pc, #292]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a48      	ldr	r2, [pc, #288]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <MX_GPIO_Init+0x1b4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c84:	4842      	ldr	r0, [pc, #264]	; (8000d90 <MX_GPIO_Init+0x1b8>)
 8000c86:	f001 f97b 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2140      	movs	r1, #64	; 0x40
 8000c8e:	4841      	ldr	r0, [pc, #260]	; (8000d94 <MX_GPIO_Init+0x1bc>)
 8000c90:	f001 f976 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9a:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <MX_GPIO_Init+0x1c0>)
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	483c      	ldr	r0, [pc, #240]	; (8000d9c <MX_GPIO_Init+0x1c4>)
 8000caa:	f000 ffbd 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cae:	2332      	movs	r3, #50	; 0x32
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbe:	230b      	movs	r3, #11
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4834      	ldr	r0, [pc, #208]	; (8000d9c <MX_GPIO_Init+0x1c4>)
 8000cca:	f000 ffad 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cce:	2386      	movs	r3, #134	; 0x86
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cde:	230b      	movs	r3, #11
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	482d      	ldr	r0, [pc, #180]	; (8000da0 <MX_GPIO_Init+0x1c8>)
 8000cea:	f000 ff9d 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cee:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4822      	ldr	r0, [pc, #136]	; (8000d90 <MX_GPIO_Init+0x1b8>)
 8000d08:	f000 ff8e 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4819      	ldr	r0, [pc, #100]	; (8000d90 <MX_GPIO_Init+0x1b8>)
 8000d2a:	f000 ff7d 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_GPIO_Init+0x1bc>)
 8000d46:	f000 ff6f 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_GPIO_Init+0x1bc>)
 8000d5e:	f000 ff63 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d74:	230b      	movs	r3, #11
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_GPIO_Init+0x1bc>)
 8000d80:	f000 ff52 	bl	8001c28 <HAL_GPIO_Init>

}
 8000d84:	bf00      	nop
 8000d86:	3730      	adds	r7, #48	; 0x30
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <HAL_UART_TxCpltCallback+0xac>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d147      	bne.n	8000e46 <HAL_UART_TxCpltCallback+0xa2>
		uint16_t TxXferCount = huart->TxXferCount;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000dbc:	817b      	strh	r3, [r7, #10]
		uint16_t TxXferSize = huart->TxXferSize;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000dc4:	813b      	strh	r3, [r7, #8]

		if(TxXferSize == 0) {
 8000dc6:	893b      	ldrh	r3, [r7, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <HAL_UART_TxCpltCallback+0x3c>
			//printf("HAL_UART_TxCpltCallback count = %d  size = %d \n", count, size);
			HAL_UART_Transmit_IT(huart, (uint8_t *)(tx), toTransfer);
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_UART_TxCpltCallback+0xb0>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4920      	ldr	r1, [pc, #128]	; (8000e58 <HAL_UART_TxCpltCallback+0xb4>)
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f002 fb27 	bl	800342c <HAL_UART_Transmit_IT>
			}

			//printf("USART2 HAL_UART_TxCpltCallback TxXferCount = %d  TxXferSize = %d \n", count, size);
		}
	}
}
 8000dde:	e032      	b.n	8000e46 <HAL_UART_TxCpltCallback+0xa2>
		} else if((TxXferSize > 0) && (TxXferCount < TxXferSize)) {
 8000de0:	893b      	ldrh	r3, [r7, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d02f      	beq.n	8000e46 <HAL_UART_TxCpltCallback+0xa2>
 8000de6:	897a      	ldrh	r2, [r7, #10]
 8000de8:	893b      	ldrh	r3, [r7, #8]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d22b      	bcs.n	8000e46 <HAL_UART_TxCpltCallback+0xa2>
			for(int i = 0; i < (TxXferSize - TxXferCount); i++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e011      	b.n	8000e18 <HAL_UART_TxCpltCallback+0x74>
				tx1[wasTransferred++] = tx[i];
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_UART_TxCpltCallback+0xb8>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	b2d1      	uxtb	r1, r2
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_UART_TxCpltCallback+0xb8>)
 8000e00:	7011      	strb	r1, [r2, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_TxCpltCallback+0xb4>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_UART_TxCpltCallback+0xbc>)
 8000e10:	545a      	strb	r2, [r3, r1]
			for(int i = 0; i < (TxXferSize - TxXferCount); i++) {
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	893a      	ldrh	r2, [r7, #8]
 8000e1a:	897b      	ldrh	r3, [r7, #10]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbe7      	blt.n	8000df4 <HAL_UART_TxCpltCallback+0x50>
			if(TxXferCount > 0) {
 8000e24:	897b      	ldrh	r3, [r7, #10]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00a      	beq.n	8000e40 <HAL_UART_TxCpltCallback+0x9c>
				HAL_UART_Transmit_IT(huart, (uint8_t *)(tx + TxXferSize - TxXferCount), TxXferCount);
 8000e2a:	893a      	ldrh	r2, [r7, #8]
 8000e2c:	897b      	ldrh	r3, [r7, #10]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_UART_TxCpltCallback+0xb4>)
 8000e32:	4413      	add	r3, r2
 8000e34:	897a      	ldrh	r2, [r7, #10]
 8000e36:	4619      	mov	r1, r3
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f002 faf7 	bl	800342c <HAL_UART_Transmit_IT>
}
 8000e3e:	e002      	b.n	8000e46 <HAL_UART_TxCpltCallback+0xa2>
				txCmpl = 1;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_UART_TxCpltCallback+0xc0>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40004400 	.word	0x40004400
 8000e54:	2000008e 	.word	0x2000008e
 8000e58:	20000594 	.word	0x20000594
 8000e5c:	2000008f 	.word	0x2000008f
 8000e60:	200005c8 	.word	0x200005c8
 8000e64:	2000008c 	.word	0x2000008c

08000e68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <HAL_UART_RxCpltCallback+0xc8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d156      	bne.n	8000f28 <HAL_UART_RxCpltCallback+0xc0>
		uint16_t RxXferCount = huart->RxXferCount;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000e80:	817b      	strh	r3, [r7, #10]
		uint16_t RxXferSize = huart->RxXferSize;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000e88:	813b      	strh	r3, [r7, #8]

		//printf("USART2 HAL_UART_RxCpltCallback count = %d size = %d \n", count, size);

		if(RxXferSize == 0) {
 8000e8a:	893b      	ldrh	r3, [r7, #8]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d108      	bne.n	8000ea2 <HAL_UART_RxCpltCallback+0x3a>
			HAL_UART_Receive_IT(huart, (uint8_t *)(rx), readLen);
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <HAL_UART_RxCpltCallback+0xcc>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4927      	ldr	r1, [pc, #156]	; (8000f38 <HAL_UART_RxCpltCallback+0xd0>)
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f002 fb22 	bl	80034e4 <HAL_UART_Receive_IT>
				rxCmpl = 1;
				HAL_UART_Receive_IT(huart, (uint8_t *)(rx), readLen);
			}
		}
	}
}
 8000ea0:	e042      	b.n	8000f28 <HAL_UART_RxCpltCallback+0xc0>
		} else if((RxXferSize > 0) && (RxXferCount < RxXferSize)) {
 8000ea2:	893b      	ldrh	r3, [r7, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d03f      	beq.n	8000f28 <HAL_UART_RxCpltCallback+0xc0>
 8000ea8:	897a      	ldrh	r2, [r7, #10]
 8000eaa:	893b      	ldrh	r3, [r7, #8]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d23b      	bcs.n	8000f28 <HAL_UART_RxCpltCallback+0xc0>
			for(int i = 0; i < (RxXferSize - RxXferCount); i++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e019      	b.n	8000eea <HAL_UART_RxCpltCallback+0x82>
				if(rxPos2 == sizeof(rx1)) {
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_UART_RxCpltCallback+0xd4>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	2b32      	cmp	r3, #50	; 0x32
 8000ebe:	d102      	bne.n	8000ec6 <HAL_UART_RxCpltCallback+0x5e>
					rxPos2 = 0;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_UART_RxCpltCallback+0xd4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	801a      	strh	r2, [r3, #0]
				rx1[rxPos2++] = rx[i];
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_UART_RxCpltCallback+0xd4>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	b291      	uxth	r1, r2
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <HAL_UART_RxCpltCallback+0xd4>)
 8000ed2:	8011      	strh	r1, [r2, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_UART_RxCpltCallback+0xd0>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_UART_RxCpltCallback+0xd8>)
 8000ee2:	545a      	strb	r2, [r3, r1]
			for(int i = 0; i < (RxXferSize - RxXferCount); i++) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	893a      	ldrh	r2, [r7, #8]
 8000eec:	897b      	ldrh	r3, [r7, #10]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbdf      	blt.n	8000eb6 <HAL_UART_RxCpltCallback+0x4e>
			if(RxXferCount > 0) {
 8000ef6:	897b      	ldrh	r3, [r7, #10]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00a      	beq.n	8000f12 <HAL_UART_RxCpltCallback+0xaa>
				HAL_UART_Receive_IT(huart, (uint8_t *)(rx + RxXferSize - RxXferCount), RxXferCount);
 8000efc:	893a      	ldrh	r2, [r7, #8]
 8000efe:	897b      	ldrh	r3, [r7, #10]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_UART_RxCpltCallback+0xd0>)
 8000f04:	4413      	add	r3, r2
 8000f06:	897a      	ldrh	r2, [r7, #10]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f002 faea 	bl	80034e4 <HAL_UART_Receive_IT>
}
 8000f10:	e00a      	b.n	8000f28 <HAL_UART_RxCpltCallback+0xc0>
				rxCmpl = 1;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_UART_RxCpltCallback+0xdc>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(huart, (uint8_t *)(rx), readLen);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_UART_RxCpltCallback+0xcc>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4905      	ldr	r1, [pc, #20]	; (8000f38 <HAL_UART_RxCpltCallback+0xd0>)
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f002 fade 	bl	80034e4 <HAL_UART_Receive_IT>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40004400 	.word	0x40004400
 8000f34:	20000090 	.word	0x20000090
 8000f38:	2000052c 	.word	0x2000052c
 8000f3c:	20000092 	.word	0x20000092
 8000f40:	20000560 	.word	0x20000560
 8000f44:	2000008d 	.word	0x2000008d

08000f48 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_UART_ErrorCallback+0x3c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d110      	bne.n	8000f7c <HAL_UART_ErrorCallback+0x34>
		uint16_t TxXferCount = huart->TxXferCount;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8000f60:	81fb      	strh	r3, [r7, #14]
		uint16_t TxXferSize = huart->TxXferSize;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f68:	81bb      	strh	r3, [r7, #12]
		printf("> HAL_UART_ErrorCallback USART2\n");
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <HAL_UART_ErrorCallback+0x40>)
 8000f6c:	f003 fe46 	bl	8004bfc <puts>
		printf("> TxXferCount = %d TxXferSize = %d\n", TxXferCount, TxXferSize);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	89ba      	ldrh	r2, [r7, #12]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_ErrorCallback+0x44>)
 8000f78:	f003 fdba 	bl	8004af0 <iprintf>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40004400 	.word	0x40004400
 8000f88:	08005c04 	.word	0x08005c04
 8000f8c:	08005c24 	.word	0x08005c24

08000f90 <stateUART>:
void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart) {

	printf("HAL_UART_AbortCpltCallback \n");
}

const char * stateUART(HAL_UART_StateTypeDef State) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

	switch(State) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2be0      	cmp	r3, #224	; 0xe0
 8000f9c:	d068      	beq.n	8001070 <stateUART+0xe0>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2be0      	cmp	r3, #224	; 0xe0
 8000fa2:	d867      	bhi.n	8001074 <stateUART+0xe4>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b24      	cmp	r3, #36	; 0x24
 8000fa8:	d850      	bhi.n	800104c <stateUART+0xbc>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b24      	cmp	r3, #36	; 0x24
 8000fae:	d861      	bhi.n	8001074 <stateUART+0xe4>
 8000fb0:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <stateUART+0x28>)
 8000fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb6:	bf00      	nop
 8000fb8:	08001055 	.word	0x08001055
 8000fbc:	08001075 	.word	0x08001075
 8000fc0:	08001075 	.word	0x08001075
 8000fc4:	08001075 	.word	0x08001075
 8000fc8:	08001075 	.word	0x08001075
 8000fcc:	08001075 	.word	0x08001075
 8000fd0:	08001075 	.word	0x08001075
 8000fd4:	08001075 	.word	0x08001075
 8000fd8:	08001075 	.word	0x08001075
 8000fdc:	08001075 	.word	0x08001075
 8000fe0:	08001075 	.word	0x08001075
 8000fe4:	08001075 	.word	0x08001075
 8000fe8:	08001075 	.word	0x08001075
 8000fec:	08001075 	.word	0x08001075
 8000ff0:	08001075 	.word	0x08001075
 8000ff4:	08001075 	.word	0x08001075
 8000ff8:	08001075 	.word	0x08001075
 8000ffc:	08001075 	.word	0x08001075
 8001000:	08001075 	.word	0x08001075
 8001004:	08001075 	.word	0x08001075
 8001008:	08001075 	.word	0x08001075
 800100c:	08001075 	.word	0x08001075
 8001010:	08001075 	.word	0x08001075
 8001014:	08001075 	.word	0x08001075
 8001018:	08001075 	.word	0x08001075
 800101c:	08001075 	.word	0x08001075
 8001020:	08001075 	.word	0x08001075
 8001024:	08001075 	.word	0x08001075
 8001028:	08001075 	.word	0x08001075
 800102c:	08001075 	.word	0x08001075
 8001030:	08001075 	.word	0x08001075
 8001034:	08001075 	.word	0x08001075
 8001038:	08001059 	.word	0x08001059
 800103c:	08001061 	.word	0x08001061
 8001040:	08001065 	.word	0x08001065
 8001044:	08001069 	.word	0x08001069
 8001048:	0800105d 	.word	0x0800105d
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2ba0      	cmp	r3, #160	; 0xa0
 8001050:	d00c      	beq.n	800106c <stateUART+0xdc>
 8001052:	e00f      	b.n	8001074 <stateUART+0xe4>
		case HAL_UART_STATE_RESET:
			return "HAL_UART_STATE_RESET";
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <stateUART+0xf4>)
 8001056:	e00e      	b.n	8001076 <stateUART+0xe6>
		case HAL_UART_STATE_READY:
			return "HAL_UART_STATE_READY";
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <stateUART+0xf8>)
 800105a:	e00c      	b.n	8001076 <stateUART+0xe6>
		case HAL_UART_STATE_BUSY:
			return "HAL_UART_STATE_BUSY";
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <stateUART+0xfc>)
 800105e:	e00a      	b.n	8001076 <stateUART+0xe6>
		case HAL_UART_STATE_BUSY_TX:
			return "HAL_UART_STATE_BUSY_TX";
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <stateUART+0x100>)
 8001062:	e008      	b.n	8001076 <stateUART+0xe6>
		case HAL_UART_STATE_BUSY_RX:
			return "HAL_UART_STATE_BUSY_RX";
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <stateUART+0x104>)
 8001066:	e006      	b.n	8001076 <stateUART+0xe6>
		case HAL_UART_STATE_BUSY_TX_RX:
			return "HAL_UART_STATE_BUSY_TX_RX";
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <stateUART+0x108>)
 800106a:	e004      	b.n	8001076 <stateUART+0xe6>
		case HAL_UART_STATE_TIMEOUT:
			return "HAL_UART_STATE_TIMEOUT";
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <stateUART+0x10c>)
 800106e:	e002      	b.n	8001076 <stateUART+0xe6>
		case HAL_UART_STATE_ERROR:
			return "HAL_UART_STATE_ERROR";
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <stateUART+0x110>)
 8001072:	e000      	b.n	8001076 <stateUART+0xe6>
		default:
			return "????";
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <stateUART+0x114>)
	}
	return "???";
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	08005cac 	.word	0x08005cac
 8001088:	08005cc4 	.word	0x08005cc4
 800108c:	08005cdc 	.word	0x08005cdc
 8001090:	08005cf0 	.word	0x08005cf0
 8001094:	08005d08 	.word	0x08005d08
 8001098:	08005d20 	.word	0x08005d20
 800109c:	08005d3c 	.word	0x08005d3c
 80010a0:	08005d54 	.word	0x08005d54
 80010a4:	08005d6c 	.word	0x08005d6c

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_MspInit+0x44>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_MspInit+0x44>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_MspInit+0x44>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_MspInit+0x44>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_MspInit+0x44>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_MspInit+0x44>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_CAN_MspInit+0x7c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d127      	bne.n	800116e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_CAN_MspInit+0x80>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a16      	ldr	r2, [pc, #88]	; (800117c <HAL_CAN_MspInit+0x80>)
 8001124:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_CAN_MspInit+0x80>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_CAN_MspInit+0x80>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_CAN_MspInit+0x80>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_CAN_MspInit+0x80>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800114e:	2303      	movs	r3, #3
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800115e:	2309      	movs	r3, #9
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_CAN_MspInit+0x84>)
 800116a:	f000 fd5d 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40006400 	.word	0x40006400
 800117c:	40023800 	.word	0x40023800
 8001180:	40020c00 	.word	0x40020c00

08001184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a40      	ldr	r2, [pc, #256]	; (80012a4 <HAL_UART_MspInit+0x120>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d14c      	bne.n	8001240 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011a6:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a3f      	ldr	r2, [pc, #252]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <HAL_UART_MspInit+0x124>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ee:	2308      	movs	r3, #8
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4828      	ldr	r0, [pc, #160]	; (80012ac <HAL_UART_MspInit+0x128>)
 800120a:	f000 fd0d 	bl	8001c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800120e:	2320      	movs	r3, #32
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800121e:	2307      	movs	r3, #7
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4821      	ldr	r0, [pc, #132]	; (80012b0 <HAL_UART_MspInit+0x12c>)
 800122a:	f000 fcfd 	bl	8001c28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2026      	movs	r0, #38	; 0x26
 8001234:	f000 fc2f 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001238:	2026      	movs	r0, #38	; 0x26
 800123a:	f000 fc48 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800123e:	e02d      	b.n	800129c <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_UART_MspInit+0x130>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d128      	bne.n	800129c <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0x124>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <HAL_UART_MspInit+0x124>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_UART_MspInit+0x124>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x124>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_UART_MspInit+0x124>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_UART_MspInit+0x124>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800127a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800128c:	2307      	movs	r3, #7
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <HAL_UART_MspInit+0x12c>)
 8001298:	f000 fcc6 	bl	8001c28 <HAL_GPIO_Init>
}
 800129c:	bf00      	nop
 800129e:	3730      	adds	r7, #48	; 0x30
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40004400 	.word	0x40004400
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40004800 	.word	0x40004800

080012b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d141      	bne.n	800135e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a22      	ldr	r2, [pc, #136]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001304:	230a      	movs	r3, #10
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4817      	ldr	r0, [pc, #92]	; (800136c <HAL_PCD_MspInit+0xb4>)
 8001310:	f000 fc8a 	bl	8001c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <HAL_PCD_MspInit+0xb4>)
 800132a:	f000 fc7d 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 8001330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001332:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6353      	str	r3, [r2, #52]	; 0x34
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 800133c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_PCD_MspInit+0xb0>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f950 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <USART2_IRQHandler+0x10>)
 80013ca:	f002 f8c9 	bl	8003560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200005fc 	.word	0x200005fc

080013d8 <ITM_SendChar>:
#define ITM_TER         	*((volatile uint32_t*) 0xE0000E00 )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TCR            	*((volatile uint32_t*) 0xE0000E80 )

void ITM_SendChar(uint8_t ch)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
    /* Stimulus Port #N is enabled when bit STIMENA[N] is set*/
	ITM_TER |= ( 1 << 0);
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <ITM_SendChar+0x48>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <ITM_SendChar+0x48>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6013      	str	r3, [r2, #0]

	/*Enable ITM. This is the master enable and must be set to allow
	writes to all ITM registers, including the control register. */
	ITM_TCR |= ( 1 << 0);
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <ITM_SendChar+0x4c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <ITM_SendChar+0x4c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80013fa:	bf00      	nop
 80013fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f8      	beq.n	80013fc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800140a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e0000e00 	.word	0xe0000e00
 8001424:	e0000e80 	.word	0xe0000e80

08001428 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e00a      	b.n	8001450 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800143a:	f3af 8000 	nop.w
 800143e:	4601      	mov	r1, r0
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	60ba      	str	r2, [r7, #8]
 8001446:	b2ca      	uxtb	r2, r1
 8001448:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	dbf0      	blt.n	800143a <_read+0x12>
	}

return len;
 8001458:	687b      	ldr	r3, [r7, #4]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e009      	b.n	8001488 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	60ba      	str	r2, [r7, #8]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ffab 	bl	80013d8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	dbf1      	blt.n	8001474 <_write+0x12>
	}
	return len;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_close>:

int _close(int file)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	return -1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c2:	605a      	str	r2, [r3, #4]
	return 0;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_isatty>:

int _isatty(int file)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	return 1;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800150c:	4a14      	ldr	r2, [pc, #80]	; (8001560 <_sbrk+0x5c>)
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <_sbrk+0x60>)
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <_sbrk+0x64>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <_sbrk+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	429a      	cmp	r2, r3
 8001532:	d207      	bcs.n	8001544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001534:	f003 faaa 	bl	8004a8c <__errno>
 8001538:	4603      	mov	r3, r0
 800153a:	220c      	movs	r2, #12
 800153c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e009      	b.n	8001558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <_sbrk+0x64>)
 8001554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20050000 	.word	0x20050000
 8001564:	00000400 	.word	0x00000400
 8001568:	20000098 	.word	0x20000098
 800156c:	200006c0 	.word	0x200006c0

08001570 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <SystemInit+0x20>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <SystemInit+0x20>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800159a:	490e      	ldr	r1, [pc, #56]	; (80015d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015b0:	4c0b      	ldr	r4, [pc, #44]	; (80015e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015be:	f7ff ffd7 	bl	8001570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f003 fa69 	bl	8004a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff f937 	bl	8000838 <main>
  bx  lr    
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015d8:	08006034 	.word	0x08006034
  ldr r2, =_sbss
 80015dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015e0:	200006bc 	.word	0x200006bc

080015e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC_IRQHandler>

080015e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f000 fa48 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 f805 	bl	8001600 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80015f6:	f7ff fd5d 	bl	80010b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fa63 	bl	8001aea <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 fa2b 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	20000008 	.word	0x20000008
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	200006a8 	.word	0x200006a8

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200006a8 	.word	0x200006a8

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_Delay+0x44>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0ed      	b.n	80018d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fcf8 	bl	80010fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0202 	bic.w	r2, r2, #2
 800171a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800171c:	f7ff ffb4 	bl	8001688 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001722:	e012      	b.n	800174a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001724:	f7ff ffb0 	bl	8001688 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b0a      	cmp	r3, #10
 8001730:	d90b      	bls.n	800174a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0c5      	b.n	80018d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e5      	bne.n	8001724 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001768:	f7ff ff8e 	bl	8001688 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800176e:	e012      	b.n	8001796 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001770:	f7ff ff8a 	bl	8001688 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b0a      	cmp	r3, #10
 800177c:	d90b      	bls.n	8001796 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2205      	movs	r2, #5
 800178e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e09f      	b.n	80018d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0e5      	beq.n	8001770 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7e1b      	ldrb	r3, [r3, #24]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e007      	b.n	80017ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7e5b      	ldrb	r3, [r3, #25]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e007      	b.n	80017f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7e9b      	ldrb	r3, [r3, #26]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0220 	orr.w	r2, r2, #32
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e007      	b.n	8001822 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0220 	bic.w	r2, r2, #32
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7edb      	ldrb	r3, [r3, #27]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0210 	bic.w	r2, r2, #16
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e007      	b.n	800184c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0210 	orr.w	r2, r2, #16
 800184a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7f1b      	ldrb	r3, [r3, #28]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d108      	bne.n	8001866 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0208 	orr.w	r2, r2, #8
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e007      	b.n	8001876 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0208 	bic.w	r2, r2, #8
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7f5b      	ldrb	r3, [r3, #29]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0204 	orr.w	r2, r2, #4
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e007      	b.n	80018a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0204 	bic.w	r2, r2, #4
 800189e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	ea42 0103 	orr.w	r1, r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	1e5a      	subs	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <__NVIC_SetPriorityGrouping+0x40>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	4313      	orrs	r3, r2
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x40>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	05fa0000 	.word	0x05fa0000

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff8e 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff29 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff3e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff8e 	bl	80019d4 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff31 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff fdba 	bl	8001688 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d008      	beq.n	8001b34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e052      	b.n	8001bda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0216 	bic.w	r2, r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <HAL_DMA_Abort+0x62>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0208 	bic.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b84:	e013      	b.n	8001bae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b86:	f7ff fd7f 	bl	8001688 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d90c      	bls.n	8001bae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e015      	b.n	8001bda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e4      	bne.n	8001b86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	223f      	movs	r2, #63	; 0x3f
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d004      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e00c      	b.n	8001c1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2205      	movs	r2, #5
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e175      	b.n	8001f34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8164 	bne.w	8001f2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d00b      	beq.n	8001c86 <HAL_GPIO_Init+0x5e>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7a:	2b11      	cmp	r3, #17
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d130      	bne.n	8001ce8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x100>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b12      	cmp	r3, #18
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80be 	beq.w	8001f2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	4b66      	ldr	r3, [pc, #408]	; (8001f4c <HAL_GPIO_Init+0x324>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a65      	ldr	r2, [pc, #404]	; (8001f4c <HAL_GPIO_Init+0x324>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <HAL_GPIO_Init+0x324>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dca:	4a61      	ldr	r2, [pc, #388]	; (8001f50 <HAL_GPIO_Init+0x328>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_GPIO_Init+0x32c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d037      	beq.n	8001e66 <HAL_GPIO_Init+0x23e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <HAL_GPIO_Init+0x330>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d031      	beq.n	8001e62 <HAL_GPIO_Init+0x23a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a56      	ldr	r2, [pc, #344]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <HAL_GPIO_Init+0x236>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a55      	ldr	r2, [pc, #340]	; (8001f60 <HAL_GPIO_Init+0x338>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x232>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a54      	ldr	r2, [pc, #336]	; (8001f64 <HAL_GPIO_Init+0x33c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x22e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a53      	ldr	r2, [pc, #332]	; (8001f68 <HAL_GPIO_Init+0x340>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x22a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_GPIO_Init+0x344>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <HAL_GPIO_Init+0x348>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x222>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a50      	ldr	r2, [pc, #320]	; (8001f74 <HAL_GPIO_Init+0x34c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x21e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4f      	ldr	r2, [pc, #316]	; (8001f78 <HAL_GPIO_Init+0x350>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x21a>
 8001e3e:	2309      	movs	r3, #9
 8001e40:	e012      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e42:	230a      	movs	r3, #10
 8001e44:	e010      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e46:	2308      	movs	r3, #8
 8001e48:	e00e      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	e00c      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e00a      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	; (8001f50 <HAL_GPIO_Init+0x328>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_GPIO_Init+0x354>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eaa:	4a34      	ldr	r2, [pc, #208]	; (8001f7c <HAL_GPIO_Init+0x354>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb0:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_GPIO_Init+0x354>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed4:	4a29      	ldr	r2, [pc, #164]	; (8001f7c <HAL_GPIO_Init+0x354>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eda:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_GPIO_Init+0x354>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efe:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <HAL_GPIO_Init+0x354>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_GPIO_Init+0x354>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_GPIO_Init+0x354>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f ae86 	bls.w	8001c48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40021c00 	.word	0x40021c00
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40022400 	.word	0x40022400
 8001f7c:	40013c00 	.word	0x40013c00

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f9c:	e003      	b.n	8001fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	041a      	lsls	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	619a      	str	r2, [r3, #24]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb4:	b08f      	sub	sp, #60	; 0x3c
 8001fb6:	af0a      	add	r7, sp, #40	; 0x28
 8001fb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e116      	b.n	80021f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff f96a 	bl	80012b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fae2 	bl	80045cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	687e      	ldr	r6, [r7, #4]
 8002010:	466d      	mov	r5, sp
 8002012:	f106 0410 	add.w	r4, r6, #16
 8002016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002022:	e885 0003 	stmia.w	r5, {r0, r1}
 8002026:	1d33      	adds	r3, r6, #4
 8002028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202a:	6838      	ldr	r0, [r7, #0]
 800202c:	f002 fa76 	bl	800451c <USB_CoreInit>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0d7      	b.n	80021f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fad0 	bl	80045ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e04a      	b.n	80020ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	333d      	adds	r3, #61	; 0x3d
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	333c      	adds	r3, #60	; 0x3c
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	b298      	uxth	r0, r3
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3342      	adds	r3, #66	; 0x42
 8002090:	4602      	mov	r2, r0
 8002092:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	333f      	adds	r3, #63	; 0x3f
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3344      	adds	r3, #68	; 0x44
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3348      	adds	r3, #72	; 0x48
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3350      	adds	r3, #80	; 0x50
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	3301      	adds	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3af      	bcc.n	8002054 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e044      	b.n	8002184 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	3301      	adds	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	d3b5      	bcc.n	80020fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	687e      	ldr	r6, [r7, #4]
 8002196:	466d      	mov	r5, sp
 8002198:	f106 0410 	add.w	r4, r6, #16
 800219c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ac:	1d33      	adds	r3, r6, #4
 80021ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b0:	6838      	ldr	r0, [r7, #0]
 80021b2:	f002 fa47 	bl	8004644 <USB_DevInit>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e014      	b.n	80021f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d102      	bne.n	80021e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f80b 	bl	80021fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f002 fbf9 	bl	80049e2 <USB_DevDisconnect>

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080021fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_PCDEx_ActivateLPM+0x44>)
 800222c:	4313      	orrs	r3, r2
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	10000003 	.word	0x10000003

08002244 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000

08002264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e291      	b.n	800279e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8087 	beq.w	8002396 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002288:	4b96      	ldr	r3, [pc, #600]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b04      	cmp	r3, #4
 8002292:	d00c      	beq.n	80022ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002294:	4b93      	ldr	r3, [pc, #588]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d112      	bne.n	80022c6 <HAL_RCC_OscConfig+0x62>
 80022a0:	4b90      	ldr	r3, [pc, #576]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ac:	d10b      	bne.n	80022c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ae:	4b8d      	ldr	r3, [pc, #564]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d06c      	beq.n	8002394 <HAL_RCC_OscConfig+0x130>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d168      	bne.n	8002394 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e26b      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x7a>
 80022d0:	4b84      	ldr	r3, [pc, #528]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a83      	ldr	r2, [pc, #524]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	e02e      	b.n	800233c <HAL_RCC_OscConfig+0xd8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x9c>
 80022e6:	4b7f      	ldr	r3, [pc, #508]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7e      	ldr	r2, [pc, #504]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b7c      	ldr	r3, [pc, #496]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7b      	ldr	r2, [pc, #492]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e01d      	b.n	800233c <HAL_RCC_OscConfig+0xd8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0xc0>
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a75      	ldr	r2, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a72      	ldr	r2, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0xd8>
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800232a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b6c      	ldr	r3, [pc, #432]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6b      	ldr	r2, [pc, #428]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7ff f9a0 	bl	8001688 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7ff f99c 	bl	8001688 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e21f      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0xe8>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7ff f98c 	bl	8001688 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7ff f988 	bl	8001688 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e20b      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x110>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d069      	beq.n	8002476 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a2:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d11c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x190>
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_RCC_OscConfig+0x17a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e1df      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	493d      	ldr	r1, [pc, #244]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	e040      	b.n	8002476 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d023      	beq.n	8002444 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fc:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a38      	ldr	r2, [pc, #224]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff f93e 	bl	8001688 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff f93a 	bl	8001688 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1bd      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4929      	ldr	r1, [pc, #164]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
 8002442:	e018      	b.n	8002476 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff f91a 	bl	8001688 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7ff f916 	bl	8001688 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e199      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d038      	beq.n	80024f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d019      	beq.n	80024be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7ff f8f7 	bl	8001688 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249e:	f7ff f8f3 	bl	8001688 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e176      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80024b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x23a>
 80024bc:	e01a      	b.n	80024f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_RCC_OscConfig+0x280>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7ff f8dd 	bl	8001688 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d2:	f7ff f8d9 	bl	8001688 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d903      	bls.n	80024e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e15c      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
 80024e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b91      	ldr	r3, [pc, #580]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a4 	beq.w	800264a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a87      	ldr	r2, [pc, #540]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252a:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCC_OscConfig+0x4d0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002536:	4b7f      	ldr	r3, [pc, #508]	; (8002734 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7e      	ldr	r2, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7ff f8a1 	bl	8001688 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7ff f89d 	bl	8001688 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e120      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255c:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x31a>
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	e02d      	b.n	80025da <HAL_RCC_OscConfig+0x376>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x33c>
 8002586:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a69      	ldr	r2, [pc, #420]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a66      	ldr	r2, [pc, #408]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	e01c      	b.n	80025da <HAL_RCC_OscConfig+0x376>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x35e>
 80025a8:	4b61      	ldr	r3, [pc, #388]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a60      	ldr	r2, [pc, #384]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	4b5e      	ldr	r3, [pc, #376]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a5d      	ldr	r2, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x376>
 80025c2:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a5a      	ldr	r2, [pc, #360]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7ff f851 	bl	8001688 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7ff f84d 	bl	8001688 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0ce      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCC_OscConfig+0x386>
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260e:	f7ff f83b 	bl	8001688 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7ff f837 	bl	8001688 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0b8      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80a4 	beq.w	800279c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d06b      	beq.n	8002738 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d149      	bne.n	80026fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a30      	ldr	r2, [pc, #192]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 800266e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7ff f808 	bl	8001688 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7ff f804 	bl	8001688 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e087      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4313      	orrs	r3, r2
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe ffd8 	bl	8001688 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe ffd4 	bl	8001688 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e057      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x478>
 80026fa:	e04f      	b.n	800279c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe ffbe 	bl	8001688 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe ffba 	bl	8001688 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e03d      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_RCC_OscConfig+0x4cc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x4ac>
 800272e:	e035      	b.n	800279c <HAL_RCC_OscConfig+0x538>
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x544>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d028      	beq.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d121      	bne.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d11a      	bne.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d0      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d910      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 020f 	bic.w	r2, r3, #15
 80027da:	4965      	ldr	r1, [pc, #404]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d040      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d115      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e073      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06b      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4936      	ldr	r1, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fef2 	bl	8001688 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fe feee 	bl	8001688 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e053      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d210      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 020f 	bic.w	r2, r3, #15
 80028e6:	4922      	ldr	r1, [pc, #136]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1cc>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1d0>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1d4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fe4e 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08005f74 	.word	0x08005f74
 800297c:	20000000 	.word	0x20000000
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	2300      	movs	r3, #0
 8002996:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299c:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d00d      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x40>
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	f200 80bd 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x34>
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x3a>
 80029b6:	e0b7      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029ba:	60bb      	str	r3, [r7, #8]
      break;
 80029bc:	e0b7      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029be:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029c0:	60bb      	str	r3, [r7, #8]
      break;
 80029c2:	e0b4      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029ce:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d04d      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	461a      	mov	r2, r3
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	ea02 0800 	and.w	r8, r2, r0
 80029f2:	ea03 0901 	and.w	r9, r3, r1
 80029f6:	4640      	mov	r0, r8
 80029f8:	4649      	mov	r1, r9
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	014b      	lsls	r3, r1, #5
 8002a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a08:	0142      	lsls	r2, r0, #5
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	ebb0 0008 	subs.w	r0, r0, r8
 8002a12:	eb61 0109 	sbc.w	r1, r1, r9
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a24:	0182      	lsls	r2, r0, #6
 8002a26:	1a12      	subs	r2, r2, r0
 8002a28:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	00d9      	lsls	r1, r3, #3
 8002a36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a3a:	00d0      	lsls	r0, r2, #3
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	eb12 0208 	adds.w	r2, r2, r8
 8002a44:	eb43 0309 	adc.w	r3, r3, r9
 8002a48:	f04f 0000 	mov.w	r0, #0
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	0259      	lsls	r1, r3, #9
 8002a52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a56:	0250      	lsls	r0, r2, #9
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f7fd fc22 	bl	80002b0 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e04a      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	ea02 0400 	and.w	r4, r2, r0
 8002a8e:	ea03 0501 	and.w	r5, r3, r1
 8002a92:	4620      	mov	r0, r4
 8002a94:	4629      	mov	r1, r5
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	014b      	lsls	r3, r1, #5
 8002aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aa4:	0142      	lsls	r2, r0, #5
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	1b00      	subs	r0, r0, r4
 8002aac:	eb61 0105 	sbc.w	r1, r1, r5
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	018b      	lsls	r3, r1, #6
 8002aba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002abe:	0182      	lsls	r2, r0, #6
 8002ac0:	1a12      	subs	r2, r2, r0
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	f04f 0000 	mov.w	r0, #0
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	00d9      	lsls	r1, r3, #3
 8002ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad4:	00d0      	lsls	r0, r2, #3
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	1912      	adds	r2, r2, r4
 8002adc:	eb45 0303 	adc.w	r3, r5, r3
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0299      	lsls	r1, r3, #10
 8002aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aee:	0290      	lsls	r0, r2, #10
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f7fd fbd6 	bl	80002b0 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	60bb      	str	r3, [r7, #8]
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	00f42400 	.word	0x00f42400
 8002b44:	007a1200 	.word	0x007a1200

08002b48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000000 	.word	0x20000000

08002b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b64:	f7ff fff0 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4903      	ldr	r1, [pc, #12]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	08005f84 	.word	0x08005f84

08002b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b8c:	f7ff ffdc 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0b5b      	lsrs	r3, r3, #13
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4903      	ldr	r1, [pc, #12]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	08005f84 	.word	0x08005f84

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bd8:	4b69      	ldr	r3, [pc, #420]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002be2:	6093      	str	r3, [r2, #8]
 8002be4:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	4964      	ldr	r1, [pc, #400]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d017      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	4959      	ldr	r1, [pc, #356]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c28:	d101      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d017      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c46:	4b4e      	ldr	r3, [pc, #312]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	494a      	ldr	r1, [pc, #296]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c64:	d101      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 808b 	beq.w	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	4a39      	ldr	r2, [pc, #228]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca0:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a34      	ldr	r2, [pc, #208]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fce6 	bl	8001688 <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fe fce2 	bl	8001688 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e357      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cde:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d035      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d02e      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d1e:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d114      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fcaa 	bl	8001688 <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fca6 	bl	8001688 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e319      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ee      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d66:	d111      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	4901      	ldr	r1, [pc, #4]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000
 8002d88:	0ffffcff 	.word	0x0ffffcff
 8002d8c:	4bb1      	ldr	r3, [pc, #708]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4ab0      	ldr	r2, [pc, #704]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d96:	6093      	str	r3, [r2, #8]
 8002d98:	4bae      	ldr	r3, [pc, #696]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	49ab      	ldr	r1, [pc, #684]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002db6:	4ba7      	ldr	r3, [pc, #668]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbc:	4aa5      	ldr	r2, [pc, #660]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dc6:	4ba3      	ldr	r3, [pc, #652]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	49a0      	ldr	r1, [pc, #640]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de4:	4b9b      	ldr	r3, [pc, #620]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df2:	4998      	ldr	r1, [pc, #608]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e06:	4b93      	ldr	r3, [pc, #588]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e14:	498f      	ldr	r1, [pc, #572]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e28:	4b8a      	ldr	r3, [pc, #552]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e36:	4987      	ldr	r1, [pc, #540]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e4a:	4b82      	ldr	r3, [pc, #520]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	497e      	ldr	r1, [pc, #504]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e6c:	4b79      	ldr	r3, [pc, #484]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f023 0203 	bic.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4976      	ldr	r1, [pc, #472]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e8e:	4b71      	ldr	r3, [pc, #452]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f023 020c 	bic.w	r2, r3, #12
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	496d      	ldr	r1, [pc, #436]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eb0:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	4965      	ldr	r1, [pc, #404]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee0:	495c      	ldr	r1, [pc, #368]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ef4:	4b57      	ldr	r3, [pc, #348]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	4954      	ldr	r1, [pc, #336]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f16:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	494b      	ldr	r1, [pc, #300]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f38:	4b46      	ldr	r3, [pc, #280]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	4943      	ldr	r1, [pc, #268]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	493a      	ldr	r1, [pc, #232]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8a:	4932      	ldr	r1, [pc, #200]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d011      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fac:	4929      	ldr	r1, [pc, #164]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fec:	4919      	ldr	r1, [pc, #100]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003010:	4910      	ldr	r1, [pc, #64]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d006      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80d9 	beq.w	80031de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a08      	ldr	r2, [pc, #32]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003032:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003038:	f7fe fb26 	bl	8001688 <HAL_GetTick>
 800303c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800303e:	e00b      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003040:	f7fe fb22 	bl	8001688 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d904      	bls.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e197      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003058:	4b6c      	ldr	r3, [pc, #432]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ed      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d021      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11d      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003078:	4b64      	ldr	r3, [pc, #400]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003086:	4b61      	ldr	r3, [pc, #388]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308c:	0e1b      	lsrs	r3, r3, #24
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	019a      	lsls	r2, r3, #6
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	061b      	lsls	r3, r3, #24
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	071b      	lsls	r3, r3, #28
 80030ac:	4957      	ldr	r1, [pc, #348]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d02e      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030de:	d129      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030e0:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030ee:	4b47      	ldr	r3, [pc, #284]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f4:	0f1b      	lsrs	r3, r3, #28
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	019a      	lsls	r2, r3, #6
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	041b      	lsls	r3, r3, #16
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	061b      	lsls	r3, r3, #24
 800310e:	431a      	orrs	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	071b      	lsls	r3, r3, #28
 8003114:	493d      	ldr	r1, [pc, #244]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800311c:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003122:	f023 021f 	bic.w	r2, r3, #31
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	3b01      	subs	r3, #1
 800312c:	4937      	ldr	r1, [pc, #220]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01d      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	0e1b      	lsrs	r3, r3, #24
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003154:	0f1b      	lsrs	r3, r3, #28
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	019a      	lsls	r2, r3, #6
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	431a      	orrs	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	431a      	orrs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	071b      	lsls	r3, r3, #28
 8003174:	4925      	ldr	r1, [pc, #148]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d011      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	019a      	lsls	r2, r3, #6
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	061b      	lsls	r3, r3, #24
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	071b      	lsls	r3, r3, #28
 80031a4:	4919      	ldr	r1, [pc, #100]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7fe fa66 	bl	8001688 <HAL_GetTick>
 80031bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031c0:	f7fe fa62 	bl	8001688 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0d7      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	f040 80cd 	bne.w	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f2:	f7fe fa49 	bl	8001688 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031fa:	f7fe fa45 	bl	8001688 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	; 0x64
 8003206:	d903      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0ba      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800320c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003210:	4b5e      	ldr	r3, [pc, #376]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321c:	d0ed      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02e      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d12a      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003246:	4b51      	ldr	r3, [pc, #324]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003254:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	0f1b      	lsrs	r3, r3, #28
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	019a      	lsls	r2, r3, #6
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	061b      	lsls	r3, r3, #24
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	071b      	lsls	r3, r3, #28
 800327a:	4944      	ldr	r1, [pc, #272]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003282:	4b42      	ldr	r3, [pc, #264]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003288:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	493d      	ldr	r1, [pc, #244]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d022      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b0:	d11d      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	0e1b      	lsrs	r3, r3, #24
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	0f1b      	lsrs	r3, r3, #28
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	019a      	lsls	r2, r3, #6
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	431a      	orrs	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	071b      	lsls	r3, r3, #28
 80032e6:	4929      	ldr	r1, [pc, #164]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d028      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	0e1b      	lsrs	r3, r3, #24
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	019a      	lsls	r2, r3, #6
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	071b      	lsls	r3, r3, #28
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	4911      	ldr	r1, [pc, #68]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0e      	ldr	r2, [pc, #56]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003358:	f7fe f996 	bl	8001688 <HAL_GetTick>
 800335c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003360:	f7fe f992 	bl	8001688 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e007      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800337a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800337e:	d1ef      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e040      	b.n	8003424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd fee6 	bl	8001184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	; 0x24
 80033bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fabe 	bl	8003950 <UART_SetConfig>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e022      	b.n	8003424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fd14 	bl	8003e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800340a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fd9b 	bl	8003f58 <UART_CheckIdleState>
 8003422:	4603      	mov	r3, r0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	4613      	mov	r3, r2
 8003438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343e:	2b20      	cmp	r3, #32
 8003440:	d145      	bne.n	80034ce <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_UART_Transmit_IT+0x22>
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e03e      	b.n	80034d0 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_UART_Transmit_IT+0x34>
 800345c:	2302      	movs	r3, #2
 800345e:	e037      	b.n	80034d0 <HAL_UART_Transmit_IT+0xa4>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2221      	movs	r2, #33	; 0x21
 8003490:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	d107      	bne.n	80034ac <HAL_UART_Transmit_IT+0x80>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a0d      	ldr	r2, [pc, #52]	; (80034dc <HAL_UART_Transmit_IT+0xb0>)
 80034a8:	669a      	str	r2, [r3, #104]	; 0x68
 80034aa:	e002      	b.n	80034b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <HAL_UART_Transmit_IT+0xb4>)
 80034b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034c8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	080042c5 	.word	0x080042c5
 80034e0:	08004253 	.word	0x08004253

080034e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d12c      	bne.n	8003554 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_UART_Receive_IT+0x22>
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e025      	b.n	8003556 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_UART_Receive_IT+0x34>
 8003514:	2302      	movs	r3, #2
 8003516:	e01e      	b.n	8003556 <HAL_UART_Receive_IT+0x72>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003542:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	461a      	mov	r2, r3
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fdb4 	bl	80040b8 <UART_Start_Receive_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	e000      	b.n	8003556 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	f640 030f 	movw	r3, #2063	; 0x80f
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d113      	bne.n	80035b8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00e      	beq.n	80035b8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 81b9 	beq.w	8003920 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
      }
      return;
 80035b6:	e1b3      	b.n	8003920 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80e3 	beq.w	8003786 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4ba5      	ldr	r3, [pc, #660]	; (8003864 <HAL_UART_IRQHandler+0x304>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80d8 	beq.w	8003786 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_UART_IRQHandler+0xa2>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_UART_IRQHandler+0xce>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2202      	movs	r2, #2
 800361c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_UART_IRQHandler+0xfa>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2204      	movs	r2, #4
 8003648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003650:	f043 0202 	orr.w	r2, r3, #2
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d015      	beq.n	8003690 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2208      	movs	r2, #8
 800367e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003686:	f043 0208 	orr.w	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003696:	2b00      	cmp	r3, #0
 8003698:	d011      	beq.n	80036be <HAL_UART_IRQHandler+0x15e>
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00c      	beq.n	80036be <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 812d 	beq.w	8003924 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	d004      	beq.n	800370e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800370a:	2b00      	cmp	r3, #0
 800370c:	d031      	beq.n	8003772 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fd5a 	bl	80041c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d123      	bne.n	800376a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003730:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	2b00      	cmp	r3, #0
 8003738:	d013      	beq.n	8003762 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_UART_IRQHandler+0x308>)
 8003740:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fa4b 	bl	8001be2 <HAL_DMA_Abort_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d017      	beq.n	8003782 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800375c:	4610      	mov	r0, r2
 800375e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003760:	e00f      	b.n	8003782 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd fbf0 	bl	8000f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	e00b      	b.n	8003782 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fbec 	bl	8000f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e007      	b.n	8003782 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd fbe8 	bl	8000f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003780:	e0d0      	b.n	8003924 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003782:	bf00      	nop
    return;
 8003784:	e0ce      	b.n	8003924 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378a:	2b01      	cmp	r3, #1
 800378c:	f040 80a7 	bne.w	80038de <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80a1 	beq.w	80038de <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 809b 	beq.w	80038de <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2210      	movs	r2, #16
 80037ae:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d156      	bne.n	800386c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80037c8:	893b      	ldrh	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80ac 	beq.w	8003928 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037d6:	893a      	ldrh	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	f080 80a5 	bcs.w	8003928 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	893a      	ldrh	r2, [r7, #8]
 80037e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	d02a      	beq.n	8003848 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003820:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0210 	bic.w	r2, r2, #16
 800383c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe f95d 	bl	8001b02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003854:	b29b      	uxth	r3, r3
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	b29b      	uxth	r3, r3
 800385a:	4619      	mov	r1, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f86b 	bl	8003938 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003862:	e061      	b.n	8003928 <HAL_UART_IRQHandler+0x3c8>
 8003864:	04000120 	.word	0x04000120
 8003868:	08004227 	.word	0x08004227
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003878:	b29b      	uxth	r3, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d050      	beq.n	800392c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800388a:	897b      	ldrh	r3, [r7, #10]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d04d      	beq.n	800392c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800389e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0210 	bic.w	r2, r2, #16
 80038d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f82e 	bl	8003938 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038dc:	e026      	b.n	800392c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01a      	beq.n	8003930 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4798      	blx	r3
    }
    return;
 8003902:	e015      	b.n	8003930 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d011      	beq.n	8003932 <HAL_UART_IRQHandler+0x3d2>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00c      	beq.n	8003932 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fd11 	bl	8004340 <UART_EndTransmit_IT>
    return;
 800391e:	e008      	b.n	8003932 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003920:	bf00      	nop
 8003922:	e006      	b.n	8003932 <HAL_UART_IRQHandler+0x3d2>
    return;
 8003924:	bf00      	nop
 8003926:	e004      	b.n	8003932 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003928:	bf00      	nop
 800392a:	e002      	b.n	8003932 <HAL_UART_IRQHandler+0x3d2>
      return;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <HAL_UART_IRQHandler+0x3d2>
    return;
 8003930:	bf00      	nop
  }

}
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4ba7      	ldr	r3, [pc, #668]	; (8003c18 <UART_SetConfig+0x2c8>)
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	6979      	ldr	r1, [r7, #20]
 8003984:	430b      	orrs	r3, r1
 8003986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	430a      	orrs	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a95      	ldr	r2, [pc, #596]	; (8003c1c <UART_SetConfig+0x2cc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d120      	bne.n	8003a0e <UART_SetConfig+0xbe>
 80039cc:	4b94      	ldr	r3, [pc, #592]	; (8003c20 <UART_SetConfig+0x2d0>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d816      	bhi.n	8003a08 <UART_SetConfig+0xb8>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x90>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	080039fd 	.word	0x080039fd
 80039e8:	080039f7 	.word	0x080039f7
 80039ec:	08003a03 	.word	0x08003a03
 80039f0:	2301      	movs	r3, #1
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e14f      	b.n	8003c96 <UART_SetConfig+0x346>
 80039f6:	2302      	movs	r3, #2
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e14c      	b.n	8003c96 <UART_SetConfig+0x346>
 80039fc:	2304      	movs	r3, #4
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e149      	b.n	8003c96 <UART_SetConfig+0x346>
 8003a02:	2308      	movs	r3, #8
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e146      	b.n	8003c96 <UART_SetConfig+0x346>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e143      	b.n	8003c96 <UART_SetConfig+0x346>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a84      	ldr	r2, [pc, #528]	; (8003c24 <UART_SetConfig+0x2d4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d132      	bne.n	8003a7e <UART_SetConfig+0x12e>
 8003a18:	4b81      	ldr	r3, [pc, #516]	; (8003c20 <UART_SetConfig+0x2d0>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d828      	bhi.n	8003a78 <UART_SetConfig+0x128>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <UART_SetConfig+0xdc>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a79 	.word	0x08003a79
 8003a34:	08003a79 	.word	0x08003a79
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a6d 	.word	0x08003a6d
 8003a40:	08003a79 	.word	0x08003a79
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003a79 	.word	0x08003a79
 8003a4c:	08003a67 	.word	0x08003a67
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003a79 	.word	0x08003a79
 8003a5c:	08003a73 	.word	0x08003a73
 8003a60:	2300      	movs	r3, #0
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e117      	b.n	8003c96 <UART_SetConfig+0x346>
 8003a66:	2302      	movs	r3, #2
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e114      	b.n	8003c96 <UART_SetConfig+0x346>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e111      	b.n	8003c96 <UART_SetConfig+0x346>
 8003a72:	2308      	movs	r3, #8
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e10e      	b.n	8003c96 <UART_SetConfig+0x346>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e10b      	b.n	8003c96 <UART_SetConfig+0x346>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a69      	ldr	r2, [pc, #420]	; (8003c28 <UART_SetConfig+0x2d8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d120      	bne.n	8003aca <UART_SetConfig+0x17a>
 8003a88:	4b65      	ldr	r3, [pc, #404]	; (8003c20 <UART_SetConfig+0x2d0>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a92:	2b30      	cmp	r3, #48	; 0x30
 8003a94:	d013      	beq.n	8003abe <UART_SetConfig+0x16e>
 8003a96:	2b30      	cmp	r3, #48	; 0x30
 8003a98:	d814      	bhi.n	8003ac4 <UART_SetConfig+0x174>
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d009      	beq.n	8003ab2 <UART_SetConfig+0x162>
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d810      	bhi.n	8003ac4 <UART_SetConfig+0x174>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <UART_SetConfig+0x15c>
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d006      	beq.n	8003ab8 <UART_SetConfig+0x168>
 8003aaa:	e00b      	b.n	8003ac4 <UART_SetConfig+0x174>
 8003aac:	2300      	movs	r3, #0
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e0f1      	b.n	8003c96 <UART_SetConfig+0x346>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e0ee      	b.n	8003c96 <UART_SetConfig+0x346>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e0eb      	b.n	8003c96 <UART_SetConfig+0x346>
 8003abe:	2308      	movs	r3, #8
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e0e8      	b.n	8003c96 <UART_SetConfig+0x346>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e0e5      	b.n	8003c96 <UART_SetConfig+0x346>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a57      	ldr	r2, [pc, #348]	; (8003c2c <UART_SetConfig+0x2dc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d120      	bne.n	8003b16 <UART_SetConfig+0x1c6>
 8003ad4:	4b52      	ldr	r3, [pc, #328]	; (8003c20 <UART_SetConfig+0x2d0>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ade:	2bc0      	cmp	r3, #192	; 0xc0
 8003ae0:	d013      	beq.n	8003b0a <UART_SetConfig+0x1ba>
 8003ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ae4:	d814      	bhi.n	8003b10 <UART_SetConfig+0x1c0>
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	d009      	beq.n	8003afe <UART_SetConfig+0x1ae>
 8003aea:	2b80      	cmp	r3, #128	; 0x80
 8003aec:	d810      	bhi.n	8003b10 <UART_SetConfig+0x1c0>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <UART_SetConfig+0x1a8>
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d006      	beq.n	8003b04 <UART_SetConfig+0x1b4>
 8003af6:	e00b      	b.n	8003b10 <UART_SetConfig+0x1c0>
 8003af8:	2300      	movs	r3, #0
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e0cb      	b.n	8003c96 <UART_SetConfig+0x346>
 8003afe:	2302      	movs	r3, #2
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e0c8      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b04:	2304      	movs	r3, #4
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e0c5      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e0c2      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b10:	2310      	movs	r3, #16
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e0bf      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a45      	ldr	r2, [pc, #276]	; (8003c30 <UART_SetConfig+0x2e0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d125      	bne.n	8003b6c <UART_SetConfig+0x21c>
 8003b20:	4b3f      	ldr	r3, [pc, #252]	; (8003c20 <UART_SetConfig+0x2d0>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2e:	d017      	beq.n	8003b60 <UART_SetConfig+0x210>
 8003b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b34:	d817      	bhi.n	8003b66 <UART_SetConfig+0x216>
 8003b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3a:	d00b      	beq.n	8003b54 <UART_SetConfig+0x204>
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b40:	d811      	bhi.n	8003b66 <UART_SetConfig+0x216>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <UART_SetConfig+0x1fe>
 8003b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4a:	d006      	beq.n	8003b5a <UART_SetConfig+0x20a>
 8003b4c:	e00b      	b.n	8003b66 <UART_SetConfig+0x216>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e0a0      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b54:	2302      	movs	r3, #2
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e09d      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e09a      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b60:	2308      	movs	r3, #8
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e097      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b66:	2310      	movs	r3, #16
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e094      	b.n	8003c96 <UART_SetConfig+0x346>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a30      	ldr	r2, [pc, #192]	; (8003c34 <UART_SetConfig+0x2e4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d125      	bne.n	8003bc2 <UART_SetConfig+0x272>
 8003b76:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <UART_SetConfig+0x2d0>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b84:	d017      	beq.n	8003bb6 <UART_SetConfig+0x266>
 8003b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b8a:	d817      	bhi.n	8003bbc <UART_SetConfig+0x26c>
 8003b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b90:	d00b      	beq.n	8003baa <UART_SetConfig+0x25a>
 8003b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b96:	d811      	bhi.n	8003bbc <UART_SetConfig+0x26c>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <UART_SetConfig+0x254>
 8003b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba0:	d006      	beq.n	8003bb0 <UART_SetConfig+0x260>
 8003ba2:	e00b      	b.n	8003bbc <UART_SetConfig+0x26c>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e075      	b.n	8003c96 <UART_SetConfig+0x346>
 8003baa:	2302      	movs	r3, #2
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e072      	b.n	8003c96 <UART_SetConfig+0x346>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e06f      	b.n	8003c96 <UART_SetConfig+0x346>
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e06c      	b.n	8003c96 <UART_SetConfig+0x346>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e069      	b.n	8003c96 <UART_SetConfig+0x346>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <UART_SetConfig+0x2e8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d137      	bne.n	8003c3c <UART_SetConfig+0x2ec>
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <UART_SetConfig+0x2d0>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bda:	d017      	beq.n	8003c0c <UART_SetConfig+0x2bc>
 8003bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003be0:	d817      	bhi.n	8003c12 <UART_SetConfig+0x2c2>
 8003be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be6:	d00b      	beq.n	8003c00 <UART_SetConfig+0x2b0>
 8003be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bec:	d811      	bhi.n	8003c12 <UART_SetConfig+0x2c2>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <UART_SetConfig+0x2aa>
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf6:	d006      	beq.n	8003c06 <UART_SetConfig+0x2b6>
 8003bf8:	e00b      	b.n	8003c12 <UART_SetConfig+0x2c2>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e04a      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c00:	2302      	movs	r3, #2
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e047      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c06:	2304      	movs	r3, #4
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e044      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e041      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c12:	2310      	movs	r3, #16
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e03e      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c18:	efff69f3 	.word	0xefff69f3
 8003c1c:	40011000 	.word	0x40011000
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40004400 	.word	0x40004400
 8003c28:	40004800 	.word	0x40004800
 8003c2c:	40004c00 	.word	0x40004c00
 8003c30:	40005000 	.word	0x40005000
 8003c34:	40011400 	.word	0x40011400
 8003c38:	40007800 	.word	0x40007800
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <UART_SetConfig+0x4b8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d125      	bne.n	8003c92 <UART_SetConfig+0x342>
 8003c46:	4b71      	ldr	r3, [pc, #452]	; (8003e0c <UART_SetConfig+0x4bc>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c54:	d017      	beq.n	8003c86 <UART_SetConfig+0x336>
 8003c56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c5a:	d817      	bhi.n	8003c8c <UART_SetConfig+0x33c>
 8003c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c60:	d00b      	beq.n	8003c7a <UART_SetConfig+0x32a>
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d811      	bhi.n	8003c8c <UART_SetConfig+0x33c>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <UART_SetConfig+0x324>
 8003c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c70:	d006      	beq.n	8003c80 <UART_SetConfig+0x330>
 8003c72:	e00b      	b.n	8003c8c <UART_SetConfig+0x33c>
 8003c74:	2300      	movs	r3, #0
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e00d      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e00a      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c80:	2304      	movs	r3, #4
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e007      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c86:	2308      	movs	r3, #8
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e004      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e001      	b.n	8003c96 <UART_SetConfig+0x346>
 8003c92:	2310      	movs	r3, #16
 8003c94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9e:	d15b      	bne.n	8003d58 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003ca0:	7ffb      	ldrb	r3, [r7, #31]
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d827      	bhi.n	8003cf6 <UART_SetConfig+0x3a6>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <UART_SetConfig+0x35c>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003cf7 	.word	0x08003cf7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe ff46 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61b8      	str	r0, [r7, #24]
        break;
 8003cd6:	e013      	b.n	8003d00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7fe ff56 	bl	8002b88 <HAL_RCC_GetPCLK2Freq>
 8003cdc:	61b8      	str	r0, [r7, #24]
        break;
 8003cde:	e00f      	b.n	8003d00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <UART_SetConfig+0x4c0>)
 8003ce2:	61bb      	str	r3, [r7, #24]
        break;
 8003ce4:	e00c      	b.n	8003d00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe fe4d 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8003cea:	61b8      	str	r0, [r7, #24]
        break;
 8003cec:	e008      	b.n	8003d00 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf2:	61bb      	str	r3, [r7, #24]
        break;
 8003cf4:	e004      	b.n	8003d00 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8003cfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d074      	beq.n	8003df0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	005a      	lsls	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	441a      	add	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d916      	bls.n	8003d52 <UART_SetConfig+0x402>
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d212      	bcs.n	8003d52 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f023 030f 	bic.w	r3, r3, #15
 8003d34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	89fb      	ldrh	r3, [r7, #14]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	89fa      	ldrh	r2, [r7, #14]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	e04e      	b.n	8003df0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	77bb      	strb	r3, [r7, #30]
 8003d56:	e04b      	b.n	8003df0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d58:	7ffb      	ldrb	r3, [r7, #31]
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d827      	bhi.n	8003dae <UART_SetConfig+0x45e>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <UART_SetConfig+0x414>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d9f 	.word	0x08003d9f
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7fe feea 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8003d8c:	61b8      	str	r0, [r7, #24]
        break;
 8003d8e:	e013      	b.n	8003db8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7fe fefa 	bl	8002b88 <HAL_RCC_GetPCLK2Freq>
 8003d94:	61b8      	str	r0, [r7, #24]
        break;
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <UART_SetConfig+0x4c0>)
 8003d9a:	61bb      	str	r3, [r7, #24]
        break;
 8003d9c:	e00c      	b.n	8003db8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fdf1 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8003da2:	61b8      	str	r0, [r7, #24]
        break;
 8003da4:	e008      	b.n	8003db8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	61bb      	str	r3, [r7, #24]
        break;
 8003dac:	e004      	b.n	8003db8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	77bb      	strb	r3, [r7, #30]
        break;
 8003db6:	bf00      	nop
    }

    if (pclk != 0U)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d018      	beq.n	8003df0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	085a      	lsrs	r2, r3, #1
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	441a      	add	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b0f      	cmp	r3, #15
 8003dd8:	d908      	bls.n	8003dec <UART_SetConfig+0x49c>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d204      	bcs.n	8003dec <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	e001      	b.n	8003df0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40007c00 	.word	0x40007c00
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400

08003e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01a      	beq.n	8003f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d10a      	bne.n	8003f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f68:	f7fd fb8e 	bl	8001688 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d10e      	bne.n	8003f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f817 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e00d      	b.n	8003fb6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fce:	e05e      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d05a      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd8:	f7fd fb56 	bl	8001688 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d302      	bcc.n	8003fee <UART_WaitOnFlagUntilTimeout+0x30>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11b      	bne.n	8004026 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ffc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e043      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02c      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004042:	d124      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800404c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800405c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e00f      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d091      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	d10e      	bne.n	800410a <UART_Start_Receive_IT+0x52>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <UART_Start_Receive_IT+0x48>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040fe:	e02d      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	22ff      	movs	r2, #255	; 0xff
 8004104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004108:	e028      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <UART_Start_Receive_IT+0x76>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <UART_Start_Receive_IT+0x6c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	22ff      	movs	r2, #255	; 0xff
 800411e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004122:	e01b      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	227f      	movs	r2, #127	; 0x7f
 8004128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800412c:	e016      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004136:	d10d      	bne.n	8004154 <UART_Start_Receive_IT+0x9c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <UART_Start_Receive_IT+0x92>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	227f      	movs	r2, #127	; 0x7f
 8004144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004148:	e008      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	223f      	movs	r2, #63	; 0x3f
 800414e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004152:	e003      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2222      	movs	r2, #34	; 0x22
 8004168:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d107      	bne.n	8004194 <UART_Start_Receive_IT+0xdc>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <UART_Start_Receive_IT+0x108>)
 8004190:	665a      	str	r2, [r3, #100]	; 0x64
 8004192:	e002      	b.n	800419a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a0b      	ldr	r2, [pc, #44]	; (80041c4 <UART_Start_Receive_IT+0x10c>)
 8004198:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80041b0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	08004447 	.word	0x08004447
 80041c4:	08004373 	.word	0x08004373

080041c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041de:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0210 	bic.w	r2, r2, #16
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	665a      	str	r2, [r3, #100]	; 0x64
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7fc fe7f 	bl	8000f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425e:	2b21      	cmp	r3, #33	; 0x21
 8004260:	d12a      	bne.n	80042b8 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d110      	bne.n	8004290 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800427c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800428e:	e013      	b.n	80042b8 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d0:	2b21      	cmp	r3, #33	; 0x21
 80042d2:	d12f      	bne.n	8004334 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d110      	bne.n	8004302 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ee:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042fe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004300:	e018      	b.n	8004334 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004306:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	1c9a      	adds	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004356:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7fc fd1d 	bl	8000da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004380:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004386:	2b22      	cmp	r3, #34	; 0x22
 8004388:	d151      	bne.n	800442e <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004392:	89bb      	ldrh	r3, [r7, #12]
 8004394:	b2d9      	uxtb	r1, r3
 8004396:	89fb      	ldrh	r3, [r7, #14]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	400a      	ands	r2, r1
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d138      	bne.n	800443e <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10f      	bne.n	8004420 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0210 	bic.w	r2, r2, #16
 800440e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fa8d 	bl	8003938 <HAL_UARTEx_RxEventCallback>
 800441e:	e002      	b.n	8004426 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fc fd21 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800442c:	e007      	b.n	800443e <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0208 	orr.w	r2, r2, #8
 800443c:	619a      	str	r2, [r3, #24]
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004454:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445a:	2b22      	cmp	r3, #34	; 0x22
 800445c:	d151      	bne.n	8004502 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800446c:	89ba      	ldrh	r2, [r7, #12]
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	4013      	ands	r3, r2
 8004472:	b29a      	uxth	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	1c9a      	adds	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d138      	bne.n	8004512 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044ae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d10f      	bne.n	80044f4 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0210 	bic.w	r2, r2, #16
 80044e2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff fa23 	bl	8003938 <HAL_UARTEx_RxEventCallback>
 80044f2:	e002      	b.n	80044fa <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fc fcb7 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004500:	e007      	b.n	8004512 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0208 	orr.w	r2, r2, #8
 8004510:	619a      	str	r2, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800451c:	b084      	sub	sp, #16
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	f107 001c 	add.w	r0, r7, #28
 800452a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2b01      	cmp	r3, #1
 8004532:	d120      	bne.n	8004576 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <USB_CoreInit+0xac>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa5a 	bl	8004a24 <USB_CoreReset>
 8004570:	4603      	mov	r3, r0
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e010      	b.n	8004598 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa4e 	bl	8004a24 <USB_CoreReset>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10b      	bne.n	80045b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f043 0206 	orr.w	r2, r3, #6
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045c2:	b004      	add	sp, #16
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	ffbdffbf 	.word	0xffbdffbf

080045cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 0201 	bic.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e00b      	b.n	8004632 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	e001      	b.n	8004632 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e003      	b.n	800463a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004632:	2032      	movs	r0, #50	; 0x32
 8004634:	f7fd f834 	bl	80016a0 <HAL_Delay>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004644:	b084      	sub	sp, #16
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e009      	b.n	8004678 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	3340      	adds	r3, #64	; 0x40
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	2200      	movs	r2, #0
 8004670:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3301      	adds	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b0e      	cmp	r3, #14
 800467c:	d9f2      	bls.n	8004664 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800467e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11c      	bne.n	80046be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004692:	f043 0302 	orr.w	r3, r3, #2
 8004696:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e005      	b.n	80046ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046dc:	4619      	mov	r1, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e4:	461a      	mov	r2, r3
 80046e6:	680b      	ldr	r3, [r1, #0]
 80046e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10c      	bne.n	800470a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046f6:	2100      	movs	r1, #0
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f959 	bl	80049b0 <USB_SetDevSpeed>
 80046fe:	e018      	b.n	8004732 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004700:	2101      	movs	r1, #1
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f954 	bl	80049b0 <USB_SetDevSpeed>
 8004708:	e013      	b.n	8004732 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	2b03      	cmp	r3, #3
 800470e:	d10c      	bne.n	800472a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d104      	bne.n	8004720 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004716:	2100      	movs	r1, #0
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f949 	bl	80049b0 <USB_SetDevSpeed>
 800471e:	e008      	b.n	8004732 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004720:	2101      	movs	r1, #1
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f944 	bl	80049b0 <USB_SetDevSpeed>
 8004728:	e003      	b.n	8004732 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800472a:	2103      	movs	r1, #3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f93f 	bl	80049b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004732:	2110      	movs	r1, #16
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8f3 	bl	8004920 <USB_FlushTxFifo>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f911 	bl	800496c <USB_FlushRxFifo>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	461a      	mov	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	461a      	mov	r2, r3
 8004774:	2300      	movs	r3, #0
 8004776:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	e043      	b.n	8004806 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004794:	d118      	bne.n	80047c8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	461a      	mov	r2, r3
 80047aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	e013      	b.n	80047da <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	461a      	mov	r2, r3
 80047c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e008      	b.n	80047da <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	461a      	mov	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	461a      	mov	r2, r3
 80047e8:	2300      	movs	r3, #0
 80047ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	461a      	mov	r2, r3
 80047fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3301      	adds	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3b7      	bcc.n	800477e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e043      	b.n	800489c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800482a:	d118      	bne.n	800485e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e013      	b.n	8004870 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	461a      	mov	r2, r3
 8004856:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e008      	b.n	8004870 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	2300      	movs	r3, #0
 800486e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	461a      	mov	r2, r3
 800487e:	2300      	movs	r3, #0
 8004880:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	461a      	mov	r2, r3
 8004890:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004894:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3301      	adds	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d3b7      	bcc.n	8004814 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d105      	bne.n	80048d8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f043 0210 	orr.w	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <USB_DevInit+0x2d4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f043 0208 	orr.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699a      	ldr	r2, [r3, #24]
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <USB_DevInit+0x2d8>)
 8004902:	4313      	orrs	r3, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004908:	7dfb      	ldrb	r3, [r7, #23]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004914:	b004      	add	sp, #16
 8004916:	4770      	bx	lr
 8004918:	803c3800 	.word	0x803c3800
 800491c:	40000004 	.word	0x40000004

08004920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <USB_FlushTxFifo+0x48>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e006      	b.n	800495a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b20      	cmp	r3, #32
 8004956:	d0f0      	beq.n	800493a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	00030d40 	.word	0x00030d40

0800496c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2210      	movs	r2, #16
 800497c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3301      	adds	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <USB_FlushRxFifo+0x40>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e006      	b.n	800499e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b10      	cmp	r3, #16
 800499a:	d0f0      	beq.n	800497e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	00030d40 	.word	0x00030d40

080049b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049fc:	f023 0303 	bic.w	r3, r3, #3
 8004a00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3301      	adds	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <USB_CoreReset+0x64>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e01b      	b.n	8004a7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	daf2      	bge.n	8004a30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f043 0201 	orr.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <USB_CoreReset+0x64>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e006      	b.n	8004a7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d0f0      	beq.n	8004a5a <USB_CoreReset+0x36>

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	00030d40 	.word	0x00030d40

08004a8c <__errno>:
 8004a8c:	4b01      	ldr	r3, [pc, #4]	; (8004a94 <__errno+0x8>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	2000000c 	.word	0x2000000c

08004a98 <__libc_init_array>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	4d0d      	ldr	r5, [pc, #52]	; (8004ad0 <__libc_init_array+0x38>)
 8004a9c:	4c0d      	ldr	r4, [pc, #52]	; (8004ad4 <__libc_init_array+0x3c>)
 8004a9e:	1b64      	subs	r4, r4, r5
 8004aa0:	10a4      	asrs	r4, r4, #2
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	42a6      	cmp	r6, r4
 8004aa6:	d109      	bne.n	8004abc <__libc_init_array+0x24>
 8004aa8:	4d0b      	ldr	r5, [pc, #44]	; (8004ad8 <__libc_init_array+0x40>)
 8004aaa:	4c0c      	ldr	r4, [pc, #48]	; (8004adc <__libc_init_array+0x44>)
 8004aac:	f000 ffec 	bl	8005a88 <_init>
 8004ab0:	1b64      	subs	r4, r4, r5
 8004ab2:	10a4      	asrs	r4, r4, #2
 8004ab4:	2600      	movs	r6, #0
 8004ab6:	42a6      	cmp	r6, r4
 8004ab8:	d105      	bne.n	8004ac6 <__libc_init_array+0x2e>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac0:	4798      	blx	r3
 8004ac2:	3601      	adds	r6, #1
 8004ac4:	e7ee      	b.n	8004aa4 <__libc_init_array+0xc>
 8004ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aca:	4798      	blx	r3
 8004acc:	3601      	adds	r6, #1
 8004ace:	e7f2      	b.n	8004ab6 <__libc_init_array+0x1e>
 8004ad0:	0800602c 	.word	0x0800602c
 8004ad4:	0800602c 	.word	0x0800602c
 8004ad8:	0800602c 	.word	0x0800602c
 8004adc:	08006030 	.word	0x08006030

08004ae0 <memset>:
 8004ae0:	4402      	add	r2, r0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d100      	bne.n	8004aea <memset+0xa>
 8004ae8:	4770      	bx	lr
 8004aea:	f803 1b01 	strb.w	r1, [r3], #1
 8004aee:	e7f9      	b.n	8004ae4 <memset+0x4>

08004af0 <iprintf>:
 8004af0:	b40f      	push	{r0, r1, r2, r3}
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <iprintf+0x2c>)
 8004af4:	b513      	push	{r0, r1, r4, lr}
 8004af6:	681c      	ldr	r4, [r3, #0]
 8004af8:	b124      	cbz	r4, 8004b04 <iprintf+0x14>
 8004afa:	69a3      	ldr	r3, [r4, #24]
 8004afc:	b913      	cbnz	r3, 8004b04 <iprintf+0x14>
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 fa5e 	bl	8004fc0 <__sinit>
 8004b04:	ab05      	add	r3, sp, #20
 8004b06:	9a04      	ldr	r2, [sp, #16]
 8004b08:	68a1      	ldr	r1, [r4, #8]
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 fc2f 	bl	8005370 <_vfiprintf_r>
 8004b12:	b002      	add	sp, #8
 8004b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b18:	b004      	add	sp, #16
 8004b1a:	4770      	bx	lr
 8004b1c:	2000000c 	.word	0x2000000c

08004b20 <_puts_r>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	460e      	mov	r6, r1
 8004b24:	4605      	mov	r5, r0
 8004b26:	b118      	cbz	r0, 8004b30 <_puts_r+0x10>
 8004b28:	6983      	ldr	r3, [r0, #24]
 8004b2a:	b90b      	cbnz	r3, 8004b30 <_puts_r+0x10>
 8004b2c:	f000 fa48 	bl	8004fc0 <__sinit>
 8004b30:	69ab      	ldr	r3, [r5, #24]
 8004b32:	68ac      	ldr	r4, [r5, #8]
 8004b34:	b913      	cbnz	r3, 8004b3c <_puts_r+0x1c>
 8004b36:	4628      	mov	r0, r5
 8004b38:	f000 fa42 	bl	8004fc0 <__sinit>
 8004b3c:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <_puts_r+0xd0>)
 8004b3e:	429c      	cmp	r4, r3
 8004b40:	d120      	bne.n	8004b84 <_puts_r+0x64>
 8004b42:	686c      	ldr	r4, [r5, #4]
 8004b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b46:	07db      	lsls	r3, r3, #31
 8004b48:	d405      	bmi.n	8004b56 <_puts_r+0x36>
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	0598      	lsls	r0, r3, #22
 8004b4e:	d402      	bmi.n	8004b56 <_puts_r+0x36>
 8004b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b52:	f000 fad3 	bl	80050fc <__retarget_lock_acquire_recursive>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	0719      	lsls	r1, r3, #28
 8004b5a:	d51d      	bpl.n	8004b98 <_puts_r+0x78>
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	b1db      	cbz	r3, 8004b98 <_puts_r+0x78>
 8004b60:	3e01      	subs	r6, #1
 8004b62:	68a3      	ldr	r3, [r4, #8]
 8004b64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	60a3      	str	r3, [r4, #8]
 8004b6c:	bb39      	cbnz	r1, 8004bbe <_puts_r+0x9e>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	da38      	bge.n	8004be4 <_puts_r+0xc4>
 8004b72:	4622      	mov	r2, r4
 8004b74:	210a      	movs	r1, #10
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 f848 	bl	8004c0c <__swbuf_r>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d011      	beq.n	8004ba4 <_puts_r+0x84>
 8004b80:	250a      	movs	r5, #10
 8004b82:	e011      	b.n	8004ba8 <_puts_r+0x88>
 8004b84:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <_puts_r+0xd4>)
 8004b86:	429c      	cmp	r4, r3
 8004b88:	d101      	bne.n	8004b8e <_puts_r+0x6e>
 8004b8a:	68ac      	ldr	r4, [r5, #8]
 8004b8c:	e7da      	b.n	8004b44 <_puts_r+0x24>
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <_puts_r+0xd8>)
 8004b90:	429c      	cmp	r4, r3
 8004b92:	bf08      	it	eq
 8004b94:	68ec      	ldreq	r4, [r5, #12]
 8004b96:	e7d5      	b.n	8004b44 <_puts_r+0x24>
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 f888 	bl	8004cb0 <__swsetup_r>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d0dd      	beq.n	8004b60 <_puts_r+0x40>
 8004ba4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004baa:	07da      	lsls	r2, r3, #31
 8004bac:	d405      	bmi.n	8004bba <_puts_r+0x9a>
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	059b      	lsls	r3, r3, #22
 8004bb2:	d402      	bmi.n	8004bba <_puts_r+0x9a>
 8004bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bb6:	f000 faa2 	bl	80050fe <__retarget_lock_release_recursive>
 8004bba:	4628      	mov	r0, r5
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	da04      	bge.n	8004bcc <_puts_r+0xac>
 8004bc2:	69a2      	ldr	r2, [r4, #24]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	dc06      	bgt.n	8004bd6 <_puts_r+0xb6>
 8004bc8:	290a      	cmp	r1, #10
 8004bca:	d004      	beq.n	8004bd6 <_puts_r+0xb6>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	6022      	str	r2, [r4, #0]
 8004bd2:	7019      	strb	r1, [r3, #0]
 8004bd4:	e7c5      	b.n	8004b62 <_puts_r+0x42>
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f000 f817 	bl	8004c0c <__swbuf_r>
 8004bde:	3001      	adds	r0, #1
 8004be0:	d1bf      	bne.n	8004b62 <_puts_r+0x42>
 8004be2:	e7df      	b.n	8004ba4 <_puts_r+0x84>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	250a      	movs	r5, #10
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	6022      	str	r2, [r4, #0]
 8004bec:	701d      	strb	r5, [r3, #0]
 8004bee:	e7db      	b.n	8004ba8 <_puts_r+0x88>
 8004bf0:	08005fb0 	.word	0x08005fb0
 8004bf4:	08005fd0 	.word	0x08005fd0
 8004bf8:	08005f90 	.word	0x08005f90

08004bfc <puts>:
 8004bfc:	4b02      	ldr	r3, [pc, #8]	; (8004c08 <puts+0xc>)
 8004bfe:	4601      	mov	r1, r0
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	f7ff bf8d 	b.w	8004b20 <_puts_r>
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c

08004c0c <__swbuf_r>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	460e      	mov	r6, r1
 8004c10:	4614      	mov	r4, r2
 8004c12:	4605      	mov	r5, r0
 8004c14:	b118      	cbz	r0, 8004c1e <__swbuf_r+0x12>
 8004c16:	6983      	ldr	r3, [r0, #24]
 8004c18:	b90b      	cbnz	r3, 8004c1e <__swbuf_r+0x12>
 8004c1a:	f000 f9d1 	bl	8004fc0 <__sinit>
 8004c1e:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <__swbuf_r+0x98>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	d12b      	bne.n	8004c7c <__swbuf_r+0x70>
 8004c24:	686c      	ldr	r4, [r5, #4]
 8004c26:	69a3      	ldr	r3, [r4, #24]
 8004c28:	60a3      	str	r3, [r4, #8]
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	071a      	lsls	r2, r3, #28
 8004c2e:	d52f      	bpl.n	8004c90 <__swbuf_r+0x84>
 8004c30:	6923      	ldr	r3, [r4, #16]
 8004c32:	b36b      	cbz	r3, 8004c90 <__swbuf_r+0x84>
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	6820      	ldr	r0, [r4, #0]
 8004c38:	1ac0      	subs	r0, r0, r3
 8004c3a:	6963      	ldr	r3, [r4, #20]
 8004c3c:	b2f6      	uxtb	r6, r6
 8004c3e:	4283      	cmp	r3, r0
 8004c40:	4637      	mov	r7, r6
 8004c42:	dc04      	bgt.n	8004c4e <__swbuf_r+0x42>
 8004c44:	4621      	mov	r1, r4
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 f926 	bl	8004e98 <_fflush_r>
 8004c4c:	bb30      	cbnz	r0, 8004c9c <__swbuf_r+0x90>
 8004c4e:	68a3      	ldr	r3, [r4, #8]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	60a3      	str	r3, [r4, #8]
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	701e      	strb	r6, [r3, #0]
 8004c5c:	6963      	ldr	r3, [r4, #20]
 8004c5e:	3001      	adds	r0, #1
 8004c60:	4283      	cmp	r3, r0
 8004c62:	d004      	beq.n	8004c6e <__swbuf_r+0x62>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	07db      	lsls	r3, r3, #31
 8004c68:	d506      	bpl.n	8004c78 <__swbuf_r+0x6c>
 8004c6a:	2e0a      	cmp	r6, #10
 8004c6c:	d104      	bne.n	8004c78 <__swbuf_r+0x6c>
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	f000 f911 	bl	8004e98 <_fflush_r>
 8004c76:	b988      	cbnz	r0, 8004c9c <__swbuf_r+0x90>
 8004c78:	4638      	mov	r0, r7
 8004c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <__swbuf_r+0x9c>)
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	d101      	bne.n	8004c86 <__swbuf_r+0x7a>
 8004c82:	68ac      	ldr	r4, [r5, #8]
 8004c84:	e7cf      	b.n	8004c26 <__swbuf_r+0x1a>
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <__swbuf_r+0xa0>)
 8004c88:	429c      	cmp	r4, r3
 8004c8a:	bf08      	it	eq
 8004c8c:	68ec      	ldreq	r4, [r5, #12]
 8004c8e:	e7ca      	b.n	8004c26 <__swbuf_r+0x1a>
 8004c90:	4621      	mov	r1, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f80c 	bl	8004cb0 <__swsetup_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d0cb      	beq.n	8004c34 <__swbuf_r+0x28>
 8004c9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004ca0:	e7ea      	b.n	8004c78 <__swbuf_r+0x6c>
 8004ca2:	bf00      	nop
 8004ca4:	08005fb0 	.word	0x08005fb0
 8004ca8:	08005fd0 	.word	0x08005fd0
 8004cac:	08005f90 	.word	0x08005f90

08004cb0 <__swsetup_r>:
 8004cb0:	4b32      	ldr	r3, [pc, #200]	; (8004d7c <__swsetup_r+0xcc>)
 8004cb2:	b570      	push	{r4, r5, r6, lr}
 8004cb4:	681d      	ldr	r5, [r3, #0]
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	b125      	cbz	r5, 8004cc6 <__swsetup_r+0x16>
 8004cbc:	69ab      	ldr	r3, [r5, #24]
 8004cbe:	b913      	cbnz	r3, 8004cc6 <__swsetup_r+0x16>
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f000 f97d 	bl	8004fc0 <__sinit>
 8004cc6:	4b2e      	ldr	r3, [pc, #184]	; (8004d80 <__swsetup_r+0xd0>)
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	d10f      	bne.n	8004cec <__swsetup_r+0x3c>
 8004ccc:	686c      	ldr	r4, [r5, #4]
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cd4:	0719      	lsls	r1, r3, #28
 8004cd6:	d42c      	bmi.n	8004d32 <__swsetup_r+0x82>
 8004cd8:	06dd      	lsls	r5, r3, #27
 8004cda:	d411      	bmi.n	8004d00 <__swsetup_r+0x50>
 8004cdc:	2309      	movs	r3, #9
 8004cde:	6033      	str	r3, [r6, #0]
 8004ce0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ce4:	81a3      	strh	r3, [r4, #12]
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cea:	e03e      	b.n	8004d6a <__swsetup_r+0xba>
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <__swsetup_r+0xd4>)
 8004cee:	429c      	cmp	r4, r3
 8004cf0:	d101      	bne.n	8004cf6 <__swsetup_r+0x46>
 8004cf2:	68ac      	ldr	r4, [r5, #8]
 8004cf4:	e7eb      	b.n	8004cce <__swsetup_r+0x1e>
 8004cf6:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <__swsetup_r+0xd8>)
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	bf08      	it	eq
 8004cfc:	68ec      	ldreq	r4, [r5, #12]
 8004cfe:	e7e6      	b.n	8004cce <__swsetup_r+0x1e>
 8004d00:	0758      	lsls	r0, r3, #29
 8004d02:	d512      	bpl.n	8004d2a <__swsetup_r+0x7a>
 8004d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d06:	b141      	cbz	r1, 8004d1a <__swsetup_r+0x6a>
 8004d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	d002      	beq.n	8004d16 <__swsetup_r+0x66>
 8004d10:	4630      	mov	r0, r6
 8004d12:	f000 fa59 	bl	80051c8 <_free_r>
 8004d16:	2300      	movs	r3, #0
 8004d18:	6363      	str	r3, [r4, #52]	; 0x34
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	2300      	movs	r3, #0
 8004d24:	6063      	str	r3, [r4, #4]
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f043 0308 	orr.w	r3, r3, #8
 8004d30:	81a3      	strh	r3, [r4, #12]
 8004d32:	6923      	ldr	r3, [r4, #16]
 8004d34:	b94b      	cbnz	r3, 8004d4a <__swsetup_r+0x9a>
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d40:	d003      	beq.n	8004d4a <__swsetup_r+0x9a>
 8004d42:	4621      	mov	r1, r4
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f9ff 	bl	8005148 <__smakebuf_r>
 8004d4a:	89a0      	ldrh	r0, [r4, #12]
 8004d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d50:	f010 0301 	ands.w	r3, r0, #1
 8004d54:	d00a      	beq.n	8004d6c <__swsetup_r+0xbc>
 8004d56:	2300      	movs	r3, #0
 8004d58:	60a3      	str	r3, [r4, #8]
 8004d5a:	6963      	ldr	r3, [r4, #20]
 8004d5c:	425b      	negs	r3, r3
 8004d5e:	61a3      	str	r3, [r4, #24]
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	b943      	cbnz	r3, 8004d76 <__swsetup_r+0xc6>
 8004d64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d68:	d1ba      	bne.n	8004ce0 <__swsetup_r+0x30>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	0781      	lsls	r1, r0, #30
 8004d6e:	bf58      	it	pl
 8004d70:	6963      	ldrpl	r3, [r4, #20]
 8004d72:	60a3      	str	r3, [r4, #8]
 8004d74:	e7f4      	b.n	8004d60 <__swsetup_r+0xb0>
 8004d76:	2000      	movs	r0, #0
 8004d78:	e7f7      	b.n	8004d6a <__swsetup_r+0xba>
 8004d7a:	bf00      	nop
 8004d7c:	2000000c 	.word	0x2000000c
 8004d80:	08005fb0 	.word	0x08005fb0
 8004d84:	08005fd0 	.word	0x08005fd0
 8004d88:	08005f90 	.word	0x08005f90

08004d8c <__sflush_r>:
 8004d8c:	898a      	ldrh	r2, [r1, #12]
 8004d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d92:	4605      	mov	r5, r0
 8004d94:	0710      	lsls	r0, r2, #28
 8004d96:	460c      	mov	r4, r1
 8004d98:	d458      	bmi.n	8004e4c <__sflush_r+0xc0>
 8004d9a:	684b      	ldr	r3, [r1, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	dc05      	bgt.n	8004dac <__sflush_r+0x20>
 8004da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dc02      	bgt.n	8004dac <__sflush_r+0x20>
 8004da6:	2000      	movs	r0, #0
 8004da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dae:	2e00      	cmp	r6, #0
 8004db0:	d0f9      	beq.n	8004da6 <__sflush_r+0x1a>
 8004db2:	2300      	movs	r3, #0
 8004db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004db8:	682f      	ldr	r7, [r5, #0]
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	d032      	beq.n	8004e24 <__sflush_r+0x98>
 8004dbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	075a      	lsls	r2, r3, #29
 8004dc4:	d505      	bpl.n	8004dd2 <__sflush_r+0x46>
 8004dc6:	6863      	ldr	r3, [r4, #4]
 8004dc8:	1ac0      	subs	r0, r0, r3
 8004dca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dcc:	b10b      	cbz	r3, 8004dd2 <__sflush_r+0x46>
 8004dce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dd0:	1ac0      	subs	r0, r0, r3
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dd8:	6a21      	ldr	r1, [r4, #32]
 8004dda:	4628      	mov	r0, r5
 8004ddc:	47b0      	blx	r6
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	d106      	bne.n	8004df2 <__sflush_r+0x66>
 8004de4:	6829      	ldr	r1, [r5, #0]
 8004de6:	291d      	cmp	r1, #29
 8004de8:	d82c      	bhi.n	8004e44 <__sflush_r+0xb8>
 8004dea:	4a2a      	ldr	r2, [pc, #168]	; (8004e94 <__sflush_r+0x108>)
 8004dec:	40ca      	lsrs	r2, r1
 8004dee:	07d6      	lsls	r6, r2, #31
 8004df0:	d528      	bpl.n	8004e44 <__sflush_r+0xb8>
 8004df2:	2200      	movs	r2, #0
 8004df4:	6062      	str	r2, [r4, #4]
 8004df6:	04d9      	lsls	r1, r3, #19
 8004df8:	6922      	ldr	r2, [r4, #16]
 8004dfa:	6022      	str	r2, [r4, #0]
 8004dfc:	d504      	bpl.n	8004e08 <__sflush_r+0x7c>
 8004dfe:	1c42      	adds	r2, r0, #1
 8004e00:	d101      	bne.n	8004e06 <__sflush_r+0x7a>
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	b903      	cbnz	r3, 8004e08 <__sflush_r+0x7c>
 8004e06:	6560      	str	r0, [r4, #84]	; 0x54
 8004e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e0a:	602f      	str	r7, [r5, #0]
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	d0ca      	beq.n	8004da6 <__sflush_r+0x1a>
 8004e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e14:	4299      	cmp	r1, r3
 8004e16:	d002      	beq.n	8004e1e <__sflush_r+0x92>
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f000 f9d5 	bl	80051c8 <_free_r>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	6360      	str	r0, [r4, #52]	; 0x34
 8004e22:	e7c1      	b.n	8004da8 <__sflush_r+0x1c>
 8004e24:	6a21      	ldr	r1, [r4, #32]
 8004e26:	2301      	movs	r3, #1
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b0      	blx	r6
 8004e2c:	1c41      	adds	r1, r0, #1
 8004e2e:	d1c7      	bne.n	8004dc0 <__sflush_r+0x34>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0c4      	beq.n	8004dc0 <__sflush_r+0x34>
 8004e36:	2b1d      	cmp	r3, #29
 8004e38:	d001      	beq.n	8004e3e <__sflush_r+0xb2>
 8004e3a:	2b16      	cmp	r3, #22
 8004e3c:	d101      	bne.n	8004e42 <__sflush_r+0xb6>
 8004e3e:	602f      	str	r7, [r5, #0]
 8004e40:	e7b1      	b.n	8004da6 <__sflush_r+0x1a>
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	e7ad      	b.n	8004da8 <__sflush_r+0x1c>
 8004e4c:	690f      	ldr	r7, [r1, #16]
 8004e4e:	2f00      	cmp	r7, #0
 8004e50:	d0a9      	beq.n	8004da6 <__sflush_r+0x1a>
 8004e52:	0793      	lsls	r3, r2, #30
 8004e54:	680e      	ldr	r6, [r1, #0]
 8004e56:	bf08      	it	eq
 8004e58:	694b      	ldreq	r3, [r1, #20]
 8004e5a:	600f      	str	r7, [r1, #0]
 8004e5c:	bf18      	it	ne
 8004e5e:	2300      	movne	r3, #0
 8004e60:	eba6 0807 	sub.w	r8, r6, r7
 8004e64:	608b      	str	r3, [r1, #8]
 8004e66:	f1b8 0f00 	cmp.w	r8, #0
 8004e6a:	dd9c      	ble.n	8004da6 <__sflush_r+0x1a>
 8004e6c:	6a21      	ldr	r1, [r4, #32]
 8004e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e70:	4643      	mov	r3, r8
 8004e72:	463a      	mov	r2, r7
 8004e74:	4628      	mov	r0, r5
 8004e76:	47b0      	blx	r6
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	dc06      	bgt.n	8004e8a <__sflush_r+0xfe>
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e78e      	b.n	8004da8 <__sflush_r+0x1c>
 8004e8a:	4407      	add	r7, r0
 8004e8c:	eba8 0800 	sub.w	r8, r8, r0
 8004e90:	e7e9      	b.n	8004e66 <__sflush_r+0xda>
 8004e92:	bf00      	nop
 8004e94:	20400001 	.word	0x20400001

08004e98 <_fflush_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	690b      	ldr	r3, [r1, #16]
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	b913      	cbnz	r3, 8004ea8 <_fflush_r+0x10>
 8004ea2:	2500      	movs	r5, #0
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	b118      	cbz	r0, 8004eb2 <_fflush_r+0x1a>
 8004eaa:	6983      	ldr	r3, [r0, #24]
 8004eac:	b90b      	cbnz	r3, 8004eb2 <_fflush_r+0x1a>
 8004eae:	f000 f887 	bl	8004fc0 <__sinit>
 8004eb2:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <_fflush_r+0x6c>)
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d11b      	bne.n	8004ef0 <_fflush_r+0x58>
 8004eb8:	686c      	ldr	r4, [r5, #4]
 8004eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0ef      	beq.n	8004ea2 <_fflush_r+0xa>
 8004ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ec4:	07d0      	lsls	r0, r2, #31
 8004ec6:	d404      	bmi.n	8004ed2 <_fflush_r+0x3a>
 8004ec8:	0599      	lsls	r1, r3, #22
 8004eca:	d402      	bmi.n	8004ed2 <_fflush_r+0x3a>
 8004ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ece:	f000 f915 	bl	80050fc <__retarget_lock_acquire_recursive>
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	f7ff ff59 	bl	8004d8c <__sflush_r>
 8004eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004edc:	07da      	lsls	r2, r3, #31
 8004ede:	4605      	mov	r5, r0
 8004ee0:	d4e0      	bmi.n	8004ea4 <_fflush_r+0xc>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	059b      	lsls	r3, r3, #22
 8004ee6:	d4dd      	bmi.n	8004ea4 <_fflush_r+0xc>
 8004ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eea:	f000 f908 	bl	80050fe <__retarget_lock_release_recursive>
 8004eee:	e7d9      	b.n	8004ea4 <_fflush_r+0xc>
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <_fflush_r+0x70>)
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	d101      	bne.n	8004efa <_fflush_r+0x62>
 8004ef6:	68ac      	ldr	r4, [r5, #8]
 8004ef8:	e7df      	b.n	8004eba <_fflush_r+0x22>
 8004efa:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <_fflush_r+0x74>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	bf08      	it	eq
 8004f00:	68ec      	ldreq	r4, [r5, #12]
 8004f02:	e7da      	b.n	8004eba <_fflush_r+0x22>
 8004f04:	08005fb0 	.word	0x08005fb0
 8004f08:	08005fd0 	.word	0x08005fd0
 8004f0c:	08005f90 	.word	0x08005f90

08004f10 <std>:
 8004f10:	2300      	movs	r3, #0
 8004f12:	b510      	push	{r4, lr}
 8004f14:	4604      	mov	r4, r0
 8004f16:	e9c0 3300 	strd	r3, r3, [r0]
 8004f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f1e:	6083      	str	r3, [r0, #8]
 8004f20:	8181      	strh	r1, [r0, #12]
 8004f22:	6643      	str	r3, [r0, #100]	; 0x64
 8004f24:	81c2      	strh	r2, [r0, #14]
 8004f26:	6183      	str	r3, [r0, #24]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	305c      	adds	r0, #92	; 0x5c
 8004f2e:	f7ff fdd7 	bl	8004ae0 <memset>
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <std+0x38>)
 8004f34:	6263      	str	r3, [r4, #36]	; 0x24
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <std+0x3c>)
 8004f38:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <std+0x40>)
 8004f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <std+0x44>)
 8004f40:	6224      	str	r4, [r4, #32]
 8004f42:	6323      	str	r3, [r4, #48]	; 0x30
 8004f44:	bd10      	pop	{r4, pc}
 8004f46:	bf00      	nop
 8004f48:	08005919 	.word	0x08005919
 8004f4c:	0800593b 	.word	0x0800593b
 8004f50:	08005973 	.word	0x08005973
 8004f54:	08005997 	.word	0x08005997

08004f58 <_cleanup_r>:
 8004f58:	4901      	ldr	r1, [pc, #4]	; (8004f60 <_cleanup_r+0x8>)
 8004f5a:	f000 b8af 	b.w	80050bc <_fwalk_reent>
 8004f5e:	bf00      	nop
 8004f60:	08004e99 	.word	0x08004e99

08004f64 <__sfmoreglue>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	1e4a      	subs	r2, r1, #1
 8004f68:	2568      	movs	r5, #104	; 0x68
 8004f6a:	4355      	muls	r5, r2
 8004f6c:	460e      	mov	r6, r1
 8004f6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f72:	f000 f979 	bl	8005268 <_malloc_r>
 8004f76:	4604      	mov	r4, r0
 8004f78:	b140      	cbz	r0, 8004f8c <__sfmoreglue+0x28>
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	e9c0 1600 	strd	r1, r6, [r0]
 8004f80:	300c      	adds	r0, #12
 8004f82:	60a0      	str	r0, [r4, #8]
 8004f84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f88:	f7ff fdaa 	bl	8004ae0 <memset>
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}

08004f90 <__sfp_lock_acquire>:
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__sfp_lock_acquire+0x8>)
 8004f92:	f000 b8b3 	b.w	80050fc <__retarget_lock_acquire_recursive>
 8004f96:	bf00      	nop
 8004f98:	200006b4 	.word	0x200006b4

08004f9c <__sfp_lock_release>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__sfp_lock_release+0x8>)
 8004f9e:	f000 b8ae 	b.w	80050fe <__retarget_lock_release_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	200006b4 	.word	0x200006b4

08004fa8 <__sinit_lock_acquire>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sinit_lock_acquire+0x8>)
 8004faa:	f000 b8a7 	b.w	80050fc <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	200006af 	.word	0x200006af

08004fb4 <__sinit_lock_release>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__sinit_lock_release+0x8>)
 8004fb6:	f000 b8a2 	b.w	80050fe <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	200006af 	.word	0x200006af

08004fc0 <__sinit>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	f7ff fff0 	bl	8004fa8 <__sinit_lock_acquire>
 8004fc8:	69a3      	ldr	r3, [r4, #24]
 8004fca:	b11b      	cbz	r3, 8004fd4 <__sinit+0x14>
 8004fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd0:	f7ff bff0 	b.w	8004fb4 <__sinit_lock_release>
 8004fd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fd8:	6523      	str	r3, [r4, #80]	; 0x50
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <__sinit+0x68>)
 8004fdc:	4a13      	ldr	r2, [pc, #76]	; (800502c <__sinit+0x6c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004fe2:	42a3      	cmp	r3, r4
 8004fe4:	bf04      	itt	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	61a3      	streq	r3, [r4, #24]
 8004fea:	4620      	mov	r0, r4
 8004fec:	f000 f820 	bl	8005030 <__sfp>
 8004ff0:	6060      	str	r0, [r4, #4]
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 f81c 	bl	8005030 <__sfp>
 8004ff8:	60a0      	str	r0, [r4, #8]
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 f818 	bl	8005030 <__sfp>
 8005000:	2200      	movs	r2, #0
 8005002:	60e0      	str	r0, [r4, #12]
 8005004:	2104      	movs	r1, #4
 8005006:	6860      	ldr	r0, [r4, #4]
 8005008:	f7ff ff82 	bl	8004f10 <std>
 800500c:	68a0      	ldr	r0, [r4, #8]
 800500e:	2201      	movs	r2, #1
 8005010:	2109      	movs	r1, #9
 8005012:	f7ff ff7d 	bl	8004f10 <std>
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	2202      	movs	r2, #2
 800501a:	2112      	movs	r1, #18
 800501c:	f7ff ff78 	bl	8004f10 <std>
 8005020:	2301      	movs	r3, #1
 8005022:	61a3      	str	r3, [r4, #24]
 8005024:	e7d2      	b.n	8004fcc <__sinit+0xc>
 8005026:	bf00      	nop
 8005028:	08005f8c 	.word	0x08005f8c
 800502c:	08004f59 	.word	0x08004f59

08005030 <__sfp>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	4607      	mov	r7, r0
 8005034:	f7ff ffac 	bl	8004f90 <__sfp_lock_acquire>
 8005038:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <__sfp+0x84>)
 800503a:	681e      	ldr	r6, [r3, #0]
 800503c:	69b3      	ldr	r3, [r6, #24]
 800503e:	b913      	cbnz	r3, 8005046 <__sfp+0x16>
 8005040:	4630      	mov	r0, r6
 8005042:	f7ff ffbd 	bl	8004fc0 <__sinit>
 8005046:	3648      	adds	r6, #72	; 0x48
 8005048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800504c:	3b01      	subs	r3, #1
 800504e:	d503      	bpl.n	8005058 <__sfp+0x28>
 8005050:	6833      	ldr	r3, [r6, #0]
 8005052:	b30b      	cbz	r3, 8005098 <__sfp+0x68>
 8005054:	6836      	ldr	r6, [r6, #0]
 8005056:	e7f7      	b.n	8005048 <__sfp+0x18>
 8005058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800505c:	b9d5      	cbnz	r5, 8005094 <__sfp+0x64>
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <__sfp+0x88>)
 8005060:	60e3      	str	r3, [r4, #12]
 8005062:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005066:	6665      	str	r5, [r4, #100]	; 0x64
 8005068:	f000 f847 	bl	80050fa <__retarget_lock_init_recursive>
 800506c:	f7ff ff96 	bl	8004f9c <__sfp_lock_release>
 8005070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005078:	6025      	str	r5, [r4, #0]
 800507a:	61a5      	str	r5, [r4, #24]
 800507c:	2208      	movs	r2, #8
 800507e:	4629      	mov	r1, r5
 8005080:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005084:	f7ff fd2c 	bl	8004ae0 <memset>
 8005088:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800508c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005090:	4620      	mov	r0, r4
 8005092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005094:	3468      	adds	r4, #104	; 0x68
 8005096:	e7d9      	b.n	800504c <__sfp+0x1c>
 8005098:	2104      	movs	r1, #4
 800509a:	4638      	mov	r0, r7
 800509c:	f7ff ff62 	bl	8004f64 <__sfmoreglue>
 80050a0:	4604      	mov	r4, r0
 80050a2:	6030      	str	r0, [r6, #0]
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d1d5      	bne.n	8005054 <__sfp+0x24>
 80050a8:	f7ff ff78 	bl	8004f9c <__sfp_lock_release>
 80050ac:	230c      	movs	r3, #12
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	e7ee      	b.n	8005090 <__sfp+0x60>
 80050b2:	bf00      	nop
 80050b4:	08005f8c 	.word	0x08005f8c
 80050b8:	ffff0001 	.word	0xffff0001

080050bc <_fwalk_reent>:
 80050bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c0:	4606      	mov	r6, r0
 80050c2:	4688      	mov	r8, r1
 80050c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050c8:	2700      	movs	r7, #0
 80050ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050ce:	f1b9 0901 	subs.w	r9, r9, #1
 80050d2:	d505      	bpl.n	80050e0 <_fwalk_reent+0x24>
 80050d4:	6824      	ldr	r4, [r4, #0]
 80050d6:	2c00      	cmp	r4, #0
 80050d8:	d1f7      	bne.n	80050ca <_fwalk_reent+0xe>
 80050da:	4638      	mov	r0, r7
 80050dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e0:	89ab      	ldrh	r3, [r5, #12]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d907      	bls.n	80050f6 <_fwalk_reent+0x3a>
 80050e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050ea:	3301      	adds	r3, #1
 80050ec:	d003      	beq.n	80050f6 <_fwalk_reent+0x3a>
 80050ee:	4629      	mov	r1, r5
 80050f0:	4630      	mov	r0, r6
 80050f2:	47c0      	blx	r8
 80050f4:	4307      	orrs	r7, r0
 80050f6:	3568      	adds	r5, #104	; 0x68
 80050f8:	e7e9      	b.n	80050ce <_fwalk_reent+0x12>

080050fa <__retarget_lock_init_recursive>:
 80050fa:	4770      	bx	lr

080050fc <__retarget_lock_acquire_recursive>:
 80050fc:	4770      	bx	lr

080050fe <__retarget_lock_release_recursive>:
 80050fe:	4770      	bx	lr

08005100 <__swhatbuf_r>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	460e      	mov	r6, r1
 8005104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005108:	2900      	cmp	r1, #0
 800510a:	b096      	sub	sp, #88	; 0x58
 800510c:	4614      	mov	r4, r2
 800510e:	461d      	mov	r5, r3
 8005110:	da07      	bge.n	8005122 <__swhatbuf_r+0x22>
 8005112:	2300      	movs	r3, #0
 8005114:	602b      	str	r3, [r5, #0]
 8005116:	89b3      	ldrh	r3, [r6, #12]
 8005118:	061a      	lsls	r2, r3, #24
 800511a:	d410      	bmi.n	800513e <__swhatbuf_r+0x3e>
 800511c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005120:	e00e      	b.n	8005140 <__swhatbuf_r+0x40>
 8005122:	466a      	mov	r2, sp
 8005124:	f000 fc5e 	bl	80059e4 <_fstat_r>
 8005128:	2800      	cmp	r0, #0
 800512a:	dbf2      	blt.n	8005112 <__swhatbuf_r+0x12>
 800512c:	9a01      	ldr	r2, [sp, #4]
 800512e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005132:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005136:	425a      	negs	r2, r3
 8005138:	415a      	adcs	r2, r3
 800513a:	602a      	str	r2, [r5, #0]
 800513c:	e7ee      	b.n	800511c <__swhatbuf_r+0x1c>
 800513e:	2340      	movs	r3, #64	; 0x40
 8005140:	2000      	movs	r0, #0
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	b016      	add	sp, #88	; 0x58
 8005146:	bd70      	pop	{r4, r5, r6, pc}

08005148 <__smakebuf_r>:
 8005148:	898b      	ldrh	r3, [r1, #12]
 800514a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800514c:	079d      	lsls	r5, r3, #30
 800514e:	4606      	mov	r6, r0
 8005150:	460c      	mov	r4, r1
 8005152:	d507      	bpl.n	8005164 <__smakebuf_r+0x1c>
 8005154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	2301      	movs	r3, #1
 800515e:	6163      	str	r3, [r4, #20]
 8005160:	b002      	add	sp, #8
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	ab01      	add	r3, sp, #4
 8005166:	466a      	mov	r2, sp
 8005168:	f7ff ffca 	bl	8005100 <__swhatbuf_r>
 800516c:	9900      	ldr	r1, [sp, #0]
 800516e:	4605      	mov	r5, r0
 8005170:	4630      	mov	r0, r6
 8005172:	f000 f879 	bl	8005268 <_malloc_r>
 8005176:	b948      	cbnz	r0, 800518c <__smakebuf_r+0x44>
 8005178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517c:	059a      	lsls	r2, r3, #22
 800517e:	d4ef      	bmi.n	8005160 <__smakebuf_r+0x18>
 8005180:	f023 0303 	bic.w	r3, r3, #3
 8005184:	f043 0302 	orr.w	r3, r3, #2
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	e7e3      	b.n	8005154 <__smakebuf_r+0xc>
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <__smakebuf_r+0x7c>)
 800518e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	6020      	str	r0, [r4, #0]
 8005194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	9b00      	ldr	r3, [sp, #0]
 800519c:	6163      	str	r3, [r4, #20]
 800519e:	9b01      	ldr	r3, [sp, #4]
 80051a0:	6120      	str	r0, [r4, #16]
 80051a2:	b15b      	cbz	r3, 80051bc <__smakebuf_r+0x74>
 80051a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 fc2d 	bl	8005a08 <_isatty_r>
 80051ae:	b128      	cbz	r0, 80051bc <__smakebuf_r+0x74>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	89a0      	ldrh	r0, [r4, #12]
 80051be:	4305      	orrs	r5, r0
 80051c0:	81a5      	strh	r5, [r4, #12]
 80051c2:	e7cd      	b.n	8005160 <__smakebuf_r+0x18>
 80051c4:	08004f59 	.word	0x08004f59

080051c8 <_free_r>:
 80051c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051ca:	2900      	cmp	r1, #0
 80051cc:	d048      	beq.n	8005260 <_free_r+0x98>
 80051ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d2:	9001      	str	r0, [sp, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f1a1 0404 	sub.w	r4, r1, #4
 80051da:	bfb8      	it	lt
 80051dc:	18e4      	addlt	r4, r4, r3
 80051de:	f000 fc35 	bl	8005a4c <__malloc_lock>
 80051e2:	4a20      	ldr	r2, [pc, #128]	; (8005264 <_free_r+0x9c>)
 80051e4:	9801      	ldr	r0, [sp, #4]
 80051e6:	6813      	ldr	r3, [r2, #0]
 80051e8:	4615      	mov	r5, r2
 80051ea:	b933      	cbnz	r3, 80051fa <_free_r+0x32>
 80051ec:	6063      	str	r3, [r4, #4]
 80051ee:	6014      	str	r4, [r2, #0]
 80051f0:	b003      	add	sp, #12
 80051f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051f6:	f000 bc2f 	b.w	8005a58 <__malloc_unlock>
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	d90b      	bls.n	8005216 <_free_r+0x4e>
 80051fe:	6821      	ldr	r1, [r4, #0]
 8005200:	1862      	adds	r2, r4, r1
 8005202:	4293      	cmp	r3, r2
 8005204:	bf04      	itt	eq
 8005206:	681a      	ldreq	r2, [r3, #0]
 8005208:	685b      	ldreq	r3, [r3, #4]
 800520a:	6063      	str	r3, [r4, #4]
 800520c:	bf04      	itt	eq
 800520e:	1852      	addeq	r2, r2, r1
 8005210:	6022      	streq	r2, [r4, #0]
 8005212:	602c      	str	r4, [r5, #0]
 8005214:	e7ec      	b.n	80051f0 <_free_r+0x28>
 8005216:	461a      	mov	r2, r3
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	b10b      	cbz	r3, 8005220 <_free_r+0x58>
 800521c:	42a3      	cmp	r3, r4
 800521e:	d9fa      	bls.n	8005216 <_free_r+0x4e>
 8005220:	6811      	ldr	r1, [r2, #0]
 8005222:	1855      	adds	r5, r2, r1
 8005224:	42a5      	cmp	r5, r4
 8005226:	d10b      	bne.n	8005240 <_free_r+0x78>
 8005228:	6824      	ldr	r4, [r4, #0]
 800522a:	4421      	add	r1, r4
 800522c:	1854      	adds	r4, r2, r1
 800522e:	42a3      	cmp	r3, r4
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	d1dd      	bne.n	80051f0 <_free_r+0x28>
 8005234:	681c      	ldr	r4, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	6053      	str	r3, [r2, #4]
 800523a:	4421      	add	r1, r4
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	e7d7      	b.n	80051f0 <_free_r+0x28>
 8005240:	d902      	bls.n	8005248 <_free_r+0x80>
 8005242:	230c      	movs	r3, #12
 8005244:	6003      	str	r3, [r0, #0]
 8005246:	e7d3      	b.n	80051f0 <_free_r+0x28>
 8005248:	6825      	ldr	r5, [r4, #0]
 800524a:	1961      	adds	r1, r4, r5
 800524c:	428b      	cmp	r3, r1
 800524e:	bf04      	itt	eq
 8005250:	6819      	ldreq	r1, [r3, #0]
 8005252:	685b      	ldreq	r3, [r3, #4]
 8005254:	6063      	str	r3, [r4, #4]
 8005256:	bf04      	itt	eq
 8005258:	1949      	addeq	r1, r1, r5
 800525a:	6021      	streq	r1, [r4, #0]
 800525c:	6054      	str	r4, [r2, #4]
 800525e:	e7c7      	b.n	80051f0 <_free_r+0x28>
 8005260:	b003      	add	sp, #12
 8005262:	bd30      	pop	{r4, r5, pc}
 8005264:	2000009c 	.word	0x2000009c

08005268 <_malloc_r>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	1ccd      	adds	r5, r1, #3
 800526c:	f025 0503 	bic.w	r5, r5, #3
 8005270:	3508      	adds	r5, #8
 8005272:	2d0c      	cmp	r5, #12
 8005274:	bf38      	it	cc
 8005276:	250c      	movcc	r5, #12
 8005278:	2d00      	cmp	r5, #0
 800527a:	4606      	mov	r6, r0
 800527c:	db01      	blt.n	8005282 <_malloc_r+0x1a>
 800527e:	42a9      	cmp	r1, r5
 8005280:	d903      	bls.n	800528a <_malloc_r+0x22>
 8005282:	230c      	movs	r3, #12
 8005284:	6033      	str	r3, [r6, #0]
 8005286:	2000      	movs	r0, #0
 8005288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800528a:	f000 fbdf 	bl	8005a4c <__malloc_lock>
 800528e:	4921      	ldr	r1, [pc, #132]	; (8005314 <_malloc_r+0xac>)
 8005290:	680a      	ldr	r2, [r1, #0]
 8005292:	4614      	mov	r4, r2
 8005294:	b99c      	cbnz	r4, 80052be <_malloc_r+0x56>
 8005296:	4f20      	ldr	r7, [pc, #128]	; (8005318 <_malloc_r+0xb0>)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	b923      	cbnz	r3, 80052a6 <_malloc_r+0x3e>
 800529c:	4621      	mov	r1, r4
 800529e:	4630      	mov	r0, r6
 80052a0:	f000 fb2a 	bl	80058f8 <_sbrk_r>
 80052a4:	6038      	str	r0, [r7, #0]
 80052a6:	4629      	mov	r1, r5
 80052a8:	4630      	mov	r0, r6
 80052aa:	f000 fb25 	bl	80058f8 <_sbrk_r>
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	d123      	bne.n	80052fa <_malloc_r+0x92>
 80052b2:	230c      	movs	r3, #12
 80052b4:	6033      	str	r3, [r6, #0]
 80052b6:	4630      	mov	r0, r6
 80052b8:	f000 fbce 	bl	8005a58 <__malloc_unlock>
 80052bc:	e7e3      	b.n	8005286 <_malloc_r+0x1e>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	1b5b      	subs	r3, r3, r5
 80052c2:	d417      	bmi.n	80052f4 <_malloc_r+0x8c>
 80052c4:	2b0b      	cmp	r3, #11
 80052c6:	d903      	bls.n	80052d0 <_malloc_r+0x68>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	441c      	add	r4, r3
 80052cc:	6025      	str	r5, [r4, #0]
 80052ce:	e004      	b.n	80052da <_malloc_r+0x72>
 80052d0:	6863      	ldr	r3, [r4, #4]
 80052d2:	42a2      	cmp	r2, r4
 80052d4:	bf0c      	ite	eq
 80052d6:	600b      	streq	r3, [r1, #0]
 80052d8:	6053      	strne	r3, [r2, #4]
 80052da:	4630      	mov	r0, r6
 80052dc:	f000 fbbc 	bl	8005a58 <__malloc_unlock>
 80052e0:	f104 000b 	add.w	r0, r4, #11
 80052e4:	1d23      	adds	r3, r4, #4
 80052e6:	f020 0007 	bic.w	r0, r0, #7
 80052ea:	1ac2      	subs	r2, r0, r3
 80052ec:	d0cc      	beq.n	8005288 <_malloc_r+0x20>
 80052ee:	1a1b      	subs	r3, r3, r0
 80052f0:	50a3      	str	r3, [r4, r2]
 80052f2:	e7c9      	b.n	8005288 <_malloc_r+0x20>
 80052f4:	4622      	mov	r2, r4
 80052f6:	6864      	ldr	r4, [r4, #4]
 80052f8:	e7cc      	b.n	8005294 <_malloc_r+0x2c>
 80052fa:	1cc4      	adds	r4, r0, #3
 80052fc:	f024 0403 	bic.w	r4, r4, #3
 8005300:	42a0      	cmp	r0, r4
 8005302:	d0e3      	beq.n	80052cc <_malloc_r+0x64>
 8005304:	1a21      	subs	r1, r4, r0
 8005306:	4630      	mov	r0, r6
 8005308:	f000 faf6 	bl	80058f8 <_sbrk_r>
 800530c:	3001      	adds	r0, #1
 800530e:	d1dd      	bne.n	80052cc <_malloc_r+0x64>
 8005310:	e7cf      	b.n	80052b2 <_malloc_r+0x4a>
 8005312:	bf00      	nop
 8005314:	2000009c 	.word	0x2000009c
 8005318:	200000a0 	.word	0x200000a0

0800531c <__sfputc_r>:
 800531c:	6893      	ldr	r3, [r2, #8]
 800531e:	3b01      	subs	r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	b410      	push	{r4}
 8005324:	6093      	str	r3, [r2, #8]
 8005326:	da08      	bge.n	800533a <__sfputc_r+0x1e>
 8005328:	6994      	ldr	r4, [r2, #24]
 800532a:	42a3      	cmp	r3, r4
 800532c:	db01      	blt.n	8005332 <__sfputc_r+0x16>
 800532e:	290a      	cmp	r1, #10
 8005330:	d103      	bne.n	800533a <__sfputc_r+0x1e>
 8005332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005336:	f7ff bc69 	b.w	8004c0c <__swbuf_r>
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	1c58      	adds	r0, r3, #1
 800533e:	6010      	str	r0, [r2, #0]
 8005340:	7019      	strb	r1, [r3, #0]
 8005342:	4608      	mov	r0, r1
 8005344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005348:	4770      	bx	lr

0800534a <__sfputs_r>:
 800534a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534c:	4606      	mov	r6, r0
 800534e:	460f      	mov	r7, r1
 8005350:	4614      	mov	r4, r2
 8005352:	18d5      	adds	r5, r2, r3
 8005354:	42ac      	cmp	r4, r5
 8005356:	d101      	bne.n	800535c <__sfputs_r+0x12>
 8005358:	2000      	movs	r0, #0
 800535a:	e007      	b.n	800536c <__sfputs_r+0x22>
 800535c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005360:	463a      	mov	r2, r7
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff ffda 	bl	800531c <__sfputc_r>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d1f3      	bne.n	8005354 <__sfputs_r+0xa>
 800536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005370 <_vfiprintf_r>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	460d      	mov	r5, r1
 8005376:	b09d      	sub	sp, #116	; 0x74
 8005378:	4614      	mov	r4, r2
 800537a:	4698      	mov	r8, r3
 800537c:	4606      	mov	r6, r0
 800537e:	b118      	cbz	r0, 8005388 <_vfiprintf_r+0x18>
 8005380:	6983      	ldr	r3, [r0, #24]
 8005382:	b90b      	cbnz	r3, 8005388 <_vfiprintf_r+0x18>
 8005384:	f7ff fe1c 	bl	8004fc0 <__sinit>
 8005388:	4b89      	ldr	r3, [pc, #548]	; (80055b0 <_vfiprintf_r+0x240>)
 800538a:	429d      	cmp	r5, r3
 800538c:	d11b      	bne.n	80053c6 <_vfiprintf_r+0x56>
 800538e:	6875      	ldr	r5, [r6, #4]
 8005390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005392:	07d9      	lsls	r1, r3, #31
 8005394:	d405      	bmi.n	80053a2 <_vfiprintf_r+0x32>
 8005396:	89ab      	ldrh	r3, [r5, #12]
 8005398:	059a      	lsls	r2, r3, #22
 800539a:	d402      	bmi.n	80053a2 <_vfiprintf_r+0x32>
 800539c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800539e:	f7ff fead 	bl	80050fc <__retarget_lock_acquire_recursive>
 80053a2:	89ab      	ldrh	r3, [r5, #12]
 80053a4:	071b      	lsls	r3, r3, #28
 80053a6:	d501      	bpl.n	80053ac <_vfiprintf_r+0x3c>
 80053a8:	692b      	ldr	r3, [r5, #16]
 80053aa:	b9eb      	cbnz	r3, 80053e8 <_vfiprintf_r+0x78>
 80053ac:	4629      	mov	r1, r5
 80053ae:	4630      	mov	r0, r6
 80053b0:	f7ff fc7e 	bl	8004cb0 <__swsetup_r>
 80053b4:	b1c0      	cbz	r0, 80053e8 <_vfiprintf_r+0x78>
 80053b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b8:	07dc      	lsls	r4, r3, #31
 80053ba:	d50e      	bpl.n	80053da <_vfiprintf_r+0x6a>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	b01d      	add	sp, #116	; 0x74
 80053c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c6:	4b7b      	ldr	r3, [pc, #492]	; (80055b4 <_vfiprintf_r+0x244>)
 80053c8:	429d      	cmp	r5, r3
 80053ca:	d101      	bne.n	80053d0 <_vfiprintf_r+0x60>
 80053cc:	68b5      	ldr	r5, [r6, #8]
 80053ce:	e7df      	b.n	8005390 <_vfiprintf_r+0x20>
 80053d0:	4b79      	ldr	r3, [pc, #484]	; (80055b8 <_vfiprintf_r+0x248>)
 80053d2:	429d      	cmp	r5, r3
 80053d4:	bf08      	it	eq
 80053d6:	68f5      	ldreq	r5, [r6, #12]
 80053d8:	e7da      	b.n	8005390 <_vfiprintf_r+0x20>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	0598      	lsls	r0, r3, #22
 80053de:	d4ed      	bmi.n	80053bc <_vfiprintf_r+0x4c>
 80053e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053e2:	f7ff fe8c 	bl	80050fe <__retarget_lock_release_recursive>
 80053e6:	e7e9      	b.n	80053bc <_vfiprintf_r+0x4c>
 80053e8:	2300      	movs	r3, #0
 80053ea:	9309      	str	r3, [sp, #36]	; 0x24
 80053ec:	2320      	movs	r3, #32
 80053ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80053f6:	2330      	movs	r3, #48	; 0x30
 80053f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055bc <_vfiprintf_r+0x24c>
 80053fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005400:	f04f 0901 	mov.w	r9, #1
 8005404:	4623      	mov	r3, r4
 8005406:	469a      	mov	sl, r3
 8005408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800540c:	b10a      	cbz	r2, 8005412 <_vfiprintf_r+0xa2>
 800540e:	2a25      	cmp	r2, #37	; 0x25
 8005410:	d1f9      	bne.n	8005406 <_vfiprintf_r+0x96>
 8005412:	ebba 0b04 	subs.w	fp, sl, r4
 8005416:	d00b      	beq.n	8005430 <_vfiprintf_r+0xc0>
 8005418:	465b      	mov	r3, fp
 800541a:	4622      	mov	r2, r4
 800541c:	4629      	mov	r1, r5
 800541e:	4630      	mov	r0, r6
 8005420:	f7ff ff93 	bl	800534a <__sfputs_r>
 8005424:	3001      	adds	r0, #1
 8005426:	f000 80aa 	beq.w	800557e <_vfiprintf_r+0x20e>
 800542a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800542c:	445a      	add	r2, fp
 800542e:	9209      	str	r2, [sp, #36]	; 0x24
 8005430:	f89a 3000 	ldrb.w	r3, [sl]
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80a2 	beq.w	800557e <_vfiprintf_r+0x20e>
 800543a:	2300      	movs	r3, #0
 800543c:	f04f 32ff 	mov.w	r2, #4294967295
 8005440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005444:	f10a 0a01 	add.w	sl, sl, #1
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	9307      	str	r3, [sp, #28]
 800544c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005450:	931a      	str	r3, [sp, #104]	; 0x68
 8005452:	4654      	mov	r4, sl
 8005454:	2205      	movs	r2, #5
 8005456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800545a:	4858      	ldr	r0, [pc, #352]	; (80055bc <_vfiprintf_r+0x24c>)
 800545c:	f7fa fed8 	bl	8000210 <memchr>
 8005460:	9a04      	ldr	r2, [sp, #16]
 8005462:	b9d8      	cbnz	r0, 800549c <_vfiprintf_r+0x12c>
 8005464:	06d1      	lsls	r1, r2, #27
 8005466:	bf44      	itt	mi
 8005468:	2320      	movmi	r3, #32
 800546a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800546e:	0713      	lsls	r3, r2, #28
 8005470:	bf44      	itt	mi
 8005472:	232b      	movmi	r3, #43	; 0x2b
 8005474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005478:	f89a 3000 	ldrb.w	r3, [sl]
 800547c:	2b2a      	cmp	r3, #42	; 0x2a
 800547e:	d015      	beq.n	80054ac <_vfiprintf_r+0x13c>
 8005480:	9a07      	ldr	r2, [sp, #28]
 8005482:	4654      	mov	r4, sl
 8005484:	2000      	movs	r0, #0
 8005486:	f04f 0c0a 	mov.w	ip, #10
 800548a:	4621      	mov	r1, r4
 800548c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005490:	3b30      	subs	r3, #48	; 0x30
 8005492:	2b09      	cmp	r3, #9
 8005494:	d94e      	bls.n	8005534 <_vfiprintf_r+0x1c4>
 8005496:	b1b0      	cbz	r0, 80054c6 <_vfiprintf_r+0x156>
 8005498:	9207      	str	r2, [sp, #28]
 800549a:	e014      	b.n	80054c6 <_vfiprintf_r+0x156>
 800549c:	eba0 0308 	sub.w	r3, r0, r8
 80054a0:	fa09 f303 	lsl.w	r3, r9, r3
 80054a4:	4313      	orrs	r3, r2
 80054a6:	9304      	str	r3, [sp, #16]
 80054a8:	46a2      	mov	sl, r4
 80054aa:	e7d2      	b.n	8005452 <_vfiprintf_r+0xe2>
 80054ac:	9b03      	ldr	r3, [sp, #12]
 80054ae:	1d19      	adds	r1, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9103      	str	r1, [sp, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bfbb      	ittet	lt
 80054b8:	425b      	neglt	r3, r3
 80054ba:	f042 0202 	orrlt.w	r2, r2, #2
 80054be:	9307      	strge	r3, [sp, #28]
 80054c0:	9307      	strlt	r3, [sp, #28]
 80054c2:	bfb8      	it	lt
 80054c4:	9204      	strlt	r2, [sp, #16]
 80054c6:	7823      	ldrb	r3, [r4, #0]
 80054c8:	2b2e      	cmp	r3, #46	; 0x2e
 80054ca:	d10c      	bne.n	80054e6 <_vfiprintf_r+0x176>
 80054cc:	7863      	ldrb	r3, [r4, #1]
 80054ce:	2b2a      	cmp	r3, #42	; 0x2a
 80054d0:	d135      	bne.n	800553e <_vfiprintf_r+0x1ce>
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	1d1a      	adds	r2, r3, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	9203      	str	r2, [sp, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfb8      	it	lt
 80054de:	f04f 33ff 	movlt.w	r3, #4294967295
 80054e2:	3402      	adds	r4, #2
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055cc <_vfiprintf_r+0x25c>
 80054ea:	7821      	ldrb	r1, [r4, #0]
 80054ec:	2203      	movs	r2, #3
 80054ee:	4650      	mov	r0, sl
 80054f0:	f7fa fe8e 	bl	8000210 <memchr>
 80054f4:	b140      	cbz	r0, 8005508 <_vfiprintf_r+0x198>
 80054f6:	2340      	movs	r3, #64	; 0x40
 80054f8:	eba0 000a 	sub.w	r0, r0, sl
 80054fc:	fa03 f000 	lsl.w	r0, r3, r0
 8005500:	9b04      	ldr	r3, [sp, #16]
 8005502:	4303      	orrs	r3, r0
 8005504:	3401      	adds	r4, #1
 8005506:	9304      	str	r3, [sp, #16]
 8005508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800550c:	482c      	ldr	r0, [pc, #176]	; (80055c0 <_vfiprintf_r+0x250>)
 800550e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005512:	2206      	movs	r2, #6
 8005514:	f7fa fe7c 	bl	8000210 <memchr>
 8005518:	2800      	cmp	r0, #0
 800551a:	d03f      	beq.n	800559c <_vfiprintf_r+0x22c>
 800551c:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <_vfiprintf_r+0x254>)
 800551e:	bb1b      	cbnz	r3, 8005568 <_vfiprintf_r+0x1f8>
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	3307      	adds	r3, #7
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	3308      	adds	r3, #8
 800552a:	9303      	str	r3, [sp, #12]
 800552c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552e:	443b      	add	r3, r7
 8005530:	9309      	str	r3, [sp, #36]	; 0x24
 8005532:	e767      	b.n	8005404 <_vfiprintf_r+0x94>
 8005534:	fb0c 3202 	mla	r2, ip, r2, r3
 8005538:	460c      	mov	r4, r1
 800553a:	2001      	movs	r0, #1
 800553c:	e7a5      	b.n	800548a <_vfiprintf_r+0x11a>
 800553e:	2300      	movs	r3, #0
 8005540:	3401      	adds	r4, #1
 8005542:	9305      	str	r3, [sp, #20]
 8005544:	4619      	mov	r1, r3
 8005546:	f04f 0c0a 	mov.w	ip, #10
 800554a:	4620      	mov	r0, r4
 800554c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005550:	3a30      	subs	r2, #48	; 0x30
 8005552:	2a09      	cmp	r2, #9
 8005554:	d903      	bls.n	800555e <_vfiprintf_r+0x1ee>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0c5      	beq.n	80054e6 <_vfiprintf_r+0x176>
 800555a:	9105      	str	r1, [sp, #20]
 800555c:	e7c3      	b.n	80054e6 <_vfiprintf_r+0x176>
 800555e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005562:	4604      	mov	r4, r0
 8005564:	2301      	movs	r3, #1
 8005566:	e7f0      	b.n	800554a <_vfiprintf_r+0x1da>
 8005568:	ab03      	add	r3, sp, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	462a      	mov	r2, r5
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <_vfiprintf_r+0x258>)
 8005570:	a904      	add	r1, sp, #16
 8005572:	4630      	mov	r0, r6
 8005574:	f3af 8000 	nop.w
 8005578:	4607      	mov	r7, r0
 800557a:	1c78      	adds	r0, r7, #1
 800557c:	d1d6      	bne.n	800552c <_vfiprintf_r+0x1bc>
 800557e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005580:	07d9      	lsls	r1, r3, #31
 8005582:	d405      	bmi.n	8005590 <_vfiprintf_r+0x220>
 8005584:	89ab      	ldrh	r3, [r5, #12]
 8005586:	059a      	lsls	r2, r3, #22
 8005588:	d402      	bmi.n	8005590 <_vfiprintf_r+0x220>
 800558a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800558c:	f7ff fdb7 	bl	80050fe <__retarget_lock_release_recursive>
 8005590:	89ab      	ldrh	r3, [r5, #12]
 8005592:	065b      	lsls	r3, r3, #25
 8005594:	f53f af12 	bmi.w	80053bc <_vfiprintf_r+0x4c>
 8005598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800559a:	e711      	b.n	80053c0 <_vfiprintf_r+0x50>
 800559c:	ab03      	add	r3, sp, #12
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	462a      	mov	r2, r5
 80055a2:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <_vfiprintf_r+0x258>)
 80055a4:	a904      	add	r1, sp, #16
 80055a6:	4630      	mov	r0, r6
 80055a8:	f000 f880 	bl	80056ac <_printf_i>
 80055ac:	e7e4      	b.n	8005578 <_vfiprintf_r+0x208>
 80055ae:	bf00      	nop
 80055b0:	08005fb0 	.word	0x08005fb0
 80055b4:	08005fd0 	.word	0x08005fd0
 80055b8:	08005f90 	.word	0x08005f90
 80055bc:	08005ff0 	.word	0x08005ff0
 80055c0:	08005ffa 	.word	0x08005ffa
 80055c4:	00000000 	.word	0x00000000
 80055c8:	0800534b 	.word	0x0800534b
 80055cc:	08005ff6 	.word	0x08005ff6

080055d0 <_printf_common>:
 80055d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d4:	4616      	mov	r6, r2
 80055d6:	4699      	mov	r9, r3
 80055d8:	688a      	ldr	r2, [r1, #8]
 80055da:	690b      	ldr	r3, [r1, #16]
 80055dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e0:	4293      	cmp	r3, r2
 80055e2:	bfb8      	it	lt
 80055e4:	4613      	movlt	r3, r2
 80055e6:	6033      	str	r3, [r6, #0]
 80055e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055ec:	4607      	mov	r7, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	b10a      	cbz	r2, 80055f6 <_printf_common+0x26>
 80055f2:	3301      	adds	r3, #1
 80055f4:	6033      	str	r3, [r6, #0]
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	0699      	lsls	r1, r3, #26
 80055fa:	bf42      	ittt	mi
 80055fc:	6833      	ldrmi	r3, [r6, #0]
 80055fe:	3302      	addmi	r3, #2
 8005600:	6033      	strmi	r3, [r6, #0]
 8005602:	6825      	ldr	r5, [r4, #0]
 8005604:	f015 0506 	ands.w	r5, r5, #6
 8005608:	d106      	bne.n	8005618 <_printf_common+0x48>
 800560a:	f104 0a19 	add.w	sl, r4, #25
 800560e:	68e3      	ldr	r3, [r4, #12]
 8005610:	6832      	ldr	r2, [r6, #0]
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	42ab      	cmp	r3, r5
 8005616:	dc26      	bgt.n	8005666 <_printf_common+0x96>
 8005618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800561c:	1e13      	subs	r3, r2, #0
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	bf18      	it	ne
 8005622:	2301      	movne	r3, #1
 8005624:	0692      	lsls	r2, r2, #26
 8005626:	d42b      	bmi.n	8005680 <_printf_common+0xb0>
 8005628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800562c:	4649      	mov	r1, r9
 800562e:	4638      	mov	r0, r7
 8005630:	47c0      	blx	r8
 8005632:	3001      	adds	r0, #1
 8005634:	d01e      	beq.n	8005674 <_printf_common+0xa4>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	68e5      	ldr	r5, [r4, #12]
 800563a:	6832      	ldr	r2, [r6, #0]
 800563c:	f003 0306 	and.w	r3, r3, #6
 8005640:	2b04      	cmp	r3, #4
 8005642:	bf08      	it	eq
 8005644:	1aad      	subeq	r5, r5, r2
 8005646:	68a3      	ldr	r3, [r4, #8]
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	bf0c      	ite	eq
 800564c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005650:	2500      	movne	r5, #0
 8005652:	4293      	cmp	r3, r2
 8005654:	bfc4      	itt	gt
 8005656:	1a9b      	subgt	r3, r3, r2
 8005658:	18ed      	addgt	r5, r5, r3
 800565a:	2600      	movs	r6, #0
 800565c:	341a      	adds	r4, #26
 800565e:	42b5      	cmp	r5, r6
 8005660:	d11a      	bne.n	8005698 <_printf_common+0xc8>
 8005662:	2000      	movs	r0, #0
 8005664:	e008      	b.n	8005678 <_printf_common+0xa8>
 8005666:	2301      	movs	r3, #1
 8005668:	4652      	mov	r2, sl
 800566a:	4649      	mov	r1, r9
 800566c:	4638      	mov	r0, r7
 800566e:	47c0      	blx	r8
 8005670:	3001      	adds	r0, #1
 8005672:	d103      	bne.n	800567c <_printf_common+0xac>
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567c:	3501      	adds	r5, #1
 800567e:	e7c6      	b.n	800560e <_printf_common+0x3e>
 8005680:	18e1      	adds	r1, r4, r3
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	2030      	movs	r0, #48	; 0x30
 8005686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800568a:	4422      	add	r2, r4
 800568c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005694:	3302      	adds	r3, #2
 8005696:	e7c7      	b.n	8005628 <_printf_common+0x58>
 8005698:	2301      	movs	r3, #1
 800569a:	4622      	mov	r2, r4
 800569c:	4649      	mov	r1, r9
 800569e:	4638      	mov	r0, r7
 80056a0:	47c0      	blx	r8
 80056a2:	3001      	adds	r0, #1
 80056a4:	d0e6      	beq.n	8005674 <_printf_common+0xa4>
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7d9      	b.n	800565e <_printf_common+0x8e>
	...

080056ac <_printf_i>:
 80056ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	460c      	mov	r4, r1
 80056b2:	4691      	mov	r9, r2
 80056b4:	7e27      	ldrb	r7, [r4, #24]
 80056b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056b8:	2f78      	cmp	r7, #120	; 0x78
 80056ba:	4680      	mov	r8, r0
 80056bc:	469a      	mov	sl, r3
 80056be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c2:	d807      	bhi.n	80056d4 <_printf_i+0x28>
 80056c4:	2f62      	cmp	r7, #98	; 0x62
 80056c6:	d80a      	bhi.n	80056de <_printf_i+0x32>
 80056c8:	2f00      	cmp	r7, #0
 80056ca:	f000 80d8 	beq.w	800587e <_printf_i+0x1d2>
 80056ce:	2f58      	cmp	r7, #88	; 0x58
 80056d0:	f000 80a3 	beq.w	800581a <_printf_i+0x16e>
 80056d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056dc:	e03a      	b.n	8005754 <_printf_i+0xa8>
 80056de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056e2:	2b15      	cmp	r3, #21
 80056e4:	d8f6      	bhi.n	80056d4 <_printf_i+0x28>
 80056e6:	a001      	add	r0, pc, #4	; (adr r0, 80056ec <_printf_i+0x40>)
 80056e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005759 	.word	0x08005759
 80056f4:	080056d5 	.word	0x080056d5
 80056f8:	080056d5 	.word	0x080056d5
 80056fc:	080056d5 	.word	0x080056d5
 8005700:	080056d5 	.word	0x080056d5
 8005704:	08005759 	.word	0x08005759
 8005708:	080056d5 	.word	0x080056d5
 800570c:	080056d5 	.word	0x080056d5
 8005710:	080056d5 	.word	0x080056d5
 8005714:	080056d5 	.word	0x080056d5
 8005718:	08005865 	.word	0x08005865
 800571c:	08005789 	.word	0x08005789
 8005720:	08005847 	.word	0x08005847
 8005724:	080056d5 	.word	0x080056d5
 8005728:	080056d5 	.word	0x080056d5
 800572c:	08005887 	.word	0x08005887
 8005730:	080056d5 	.word	0x080056d5
 8005734:	08005789 	.word	0x08005789
 8005738:	080056d5 	.word	0x080056d5
 800573c:	080056d5 	.word	0x080056d5
 8005740:	0800584f 	.word	0x0800584f
 8005744:	680b      	ldr	r3, [r1, #0]
 8005746:	1d1a      	adds	r2, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	600a      	str	r2, [r1, #0]
 800574c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005754:	2301      	movs	r3, #1
 8005756:	e0a3      	b.n	80058a0 <_printf_i+0x1f4>
 8005758:	6825      	ldr	r5, [r4, #0]
 800575a:	6808      	ldr	r0, [r1, #0]
 800575c:	062e      	lsls	r6, r5, #24
 800575e:	f100 0304 	add.w	r3, r0, #4
 8005762:	d50a      	bpl.n	800577a <_printf_i+0xce>
 8005764:	6805      	ldr	r5, [r0, #0]
 8005766:	600b      	str	r3, [r1, #0]
 8005768:	2d00      	cmp	r5, #0
 800576a:	da03      	bge.n	8005774 <_printf_i+0xc8>
 800576c:	232d      	movs	r3, #45	; 0x2d
 800576e:	426d      	negs	r5, r5
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005774:	485e      	ldr	r0, [pc, #376]	; (80058f0 <_printf_i+0x244>)
 8005776:	230a      	movs	r3, #10
 8005778:	e019      	b.n	80057ae <_printf_i+0x102>
 800577a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800577e:	6805      	ldr	r5, [r0, #0]
 8005780:	600b      	str	r3, [r1, #0]
 8005782:	bf18      	it	ne
 8005784:	b22d      	sxthne	r5, r5
 8005786:	e7ef      	b.n	8005768 <_printf_i+0xbc>
 8005788:	680b      	ldr	r3, [r1, #0]
 800578a:	6825      	ldr	r5, [r4, #0]
 800578c:	1d18      	adds	r0, r3, #4
 800578e:	6008      	str	r0, [r1, #0]
 8005790:	0628      	lsls	r0, r5, #24
 8005792:	d501      	bpl.n	8005798 <_printf_i+0xec>
 8005794:	681d      	ldr	r5, [r3, #0]
 8005796:	e002      	b.n	800579e <_printf_i+0xf2>
 8005798:	0669      	lsls	r1, r5, #25
 800579a:	d5fb      	bpl.n	8005794 <_printf_i+0xe8>
 800579c:	881d      	ldrh	r5, [r3, #0]
 800579e:	4854      	ldr	r0, [pc, #336]	; (80058f0 <_printf_i+0x244>)
 80057a0:	2f6f      	cmp	r7, #111	; 0x6f
 80057a2:	bf0c      	ite	eq
 80057a4:	2308      	moveq	r3, #8
 80057a6:	230a      	movne	r3, #10
 80057a8:	2100      	movs	r1, #0
 80057aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ae:	6866      	ldr	r6, [r4, #4]
 80057b0:	60a6      	str	r6, [r4, #8]
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	bfa2      	ittt	ge
 80057b6:	6821      	ldrge	r1, [r4, #0]
 80057b8:	f021 0104 	bicge.w	r1, r1, #4
 80057bc:	6021      	strge	r1, [r4, #0]
 80057be:	b90d      	cbnz	r5, 80057c4 <_printf_i+0x118>
 80057c0:	2e00      	cmp	r6, #0
 80057c2:	d04d      	beq.n	8005860 <_printf_i+0x1b4>
 80057c4:	4616      	mov	r6, r2
 80057c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80057ca:	fb03 5711 	mls	r7, r3, r1, r5
 80057ce:	5dc7      	ldrb	r7, [r0, r7]
 80057d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057d4:	462f      	mov	r7, r5
 80057d6:	42bb      	cmp	r3, r7
 80057d8:	460d      	mov	r5, r1
 80057da:	d9f4      	bls.n	80057c6 <_printf_i+0x11a>
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d10b      	bne.n	80057f8 <_printf_i+0x14c>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	07df      	lsls	r7, r3, #31
 80057e4:	d508      	bpl.n	80057f8 <_printf_i+0x14c>
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	6861      	ldr	r1, [r4, #4]
 80057ea:	4299      	cmp	r1, r3
 80057ec:	bfde      	ittt	le
 80057ee:	2330      	movle	r3, #48	; 0x30
 80057f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057f8:	1b92      	subs	r2, r2, r6
 80057fa:	6122      	str	r2, [r4, #16]
 80057fc:	f8cd a000 	str.w	sl, [sp]
 8005800:	464b      	mov	r3, r9
 8005802:	aa03      	add	r2, sp, #12
 8005804:	4621      	mov	r1, r4
 8005806:	4640      	mov	r0, r8
 8005808:	f7ff fee2 	bl	80055d0 <_printf_common>
 800580c:	3001      	adds	r0, #1
 800580e:	d14c      	bne.n	80058aa <_printf_i+0x1fe>
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	b004      	add	sp, #16
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	4835      	ldr	r0, [pc, #212]	; (80058f0 <_printf_i+0x244>)
 800581c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	680e      	ldr	r6, [r1, #0]
 8005824:	061f      	lsls	r7, r3, #24
 8005826:	f856 5b04 	ldr.w	r5, [r6], #4
 800582a:	600e      	str	r6, [r1, #0]
 800582c:	d514      	bpl.n	8005858 <_printf_i+0x1ac>
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	bf44      	itt	mi
 8005832:	f043 0320 	orrmi.w	r3, r3, #32
 8005836:	6023      	strmi	r3, [r4, #0]
 8005838:	b91d      	cbnz	r5, 8005842 <_printf_i+0x196>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	f023 0320 	bic.w	r3, r3, #32
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	2310      	movs	r3, #16
 8005844:	e7b0      	b.n	80057a8 <_printf_i+0xfc>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	f043 0320 	orr.w	r3, r3, #32
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	2378      	movs	r3, #120	; 0x78
 8005850:	4828      	ldr	r0, [pc, #160]	; (80058f4 <_printf_i+0x248>)
 8005852:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005856:	e7e3      	b.n	8005820 <_printf_i+0x174>
 8005858:	065e      	lsls	r6, r3, #25
 800585a:	bf48      	it	mi
 800585c:	b2ad      	uxthmi	r5, r5
 800585e:	e7e6      	b.n	800582e <_printf_i+0x182>
 8005860:	4616      	mov	r6, r2
 8005862:	e7bb      	b.n	80057dc <_printf_i+0x130>
 8005864:	680b      	ldr	r3, [r1, #0]
 8005866:	6826      	ldr	r6, [r4, #0]
 8005868:	6960      	ldr	r0, [r4, #20]
 800586a:	1d1d      	adds	r5, r3, #4
 800586c:	600d      	str	r5, [r1, #0]
 800586e:	0635      	lsls	r5, r6, #24
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	d501      	bpl.n	8005878 <_printf_i+0x1cc>
 8005874:	6018      	str	r0, [r3, #0]
 8005876:	e002      	b.n	800587e <_printf_i+0x1d2>
 8005878:	0671      	lsls	r1, r6, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0x1c8>
 800587c:	8018      	strh	r0, [r3, #0]
 800587e:	2300      	movs	r3, #0
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	4616      	mov	r6, r2
 8005884:	e7ba      	b.n	80057fc <_printf_i+0x150>
 8005886:	680b      	ldr	r3, [r1, #0]
 8005888:	1d1a      	adds	r2, r3, #4
 800588a:	600a      	str	r2, [r1, #0]
 800588c:	681e      	ldr	r6, [r3, #0]
 800588e:	6862      	ldr	r2, [r4, #4]
 8005890:	2100      	movs	r1, #0
 8005892:	4630      	mov	r0, r6
 8005894:	f7fa fcbc 	bl	8000210 <memchr>
 8005898:	b108      	cbz	r0, 800589e <_printf_i+0x1f2>
 800589a:	1b80      	subs	r0, r0, r6
 800589c:	6060      	str	r0, [r4, #4]
 800589e:	6863      	ldr	r3, [r4, #4]
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	2300      	movs	r3, #0
 80058a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a8:	e7a8      	b.n	80057fc <_printf_i+0x150>
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	4632      	mov	r2, r6
 80058ae:	4649      	mov	r1, r9
 80058b0:	4640      	mov	r0, r8
 80058b2:	47d0      	blx	sl
 80058b4:	3001      	adds	r0, #1
 80058b6:	d0ab      	beq.n	8005810 <_printf_i+0x164>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	079b      	lsls	r3, r3, #30
 80058bc:	d413      	bmi.n	80058e6 <_printf_i+0x23a>
 80058be:	68e0      	ldr	r0, [r4, #12]
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	4298      	cmp	r0, r3
 80058c4:	bfb8      	it	lt
 80058c6:	4618      	movlt	r0, r3
 80058c8:	e7a4      	b.n	8005814 <_printf_i+0x168>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4632      	mov	r2, r6
 80058ce:	4649      	mov	r1, r9
 80058d0:	4640      	mov	r0, r8
 80058d2:	47d0      	blx	sl
 80058d4:	3001      	adds	r0, #1
 80058d6:	d09b      	beq.n	8005810 <_printf_i+0x164>
 80058d8:	3501      	adds	r5, #1
 80058da:	68e3      	ldr	r3, [r4, #12]
 80058dc:	9903      	ldr	r1, [sp, #12]
 80058de:	1a5b      	subs	r3, r3, r1
 80058e0:	42ab      	cmp	r3, r5
 80058e2:	dcf2      	bgt.n	80058ca <_printf_i+0x21e>
 80058e4:	e7eb      	b.n	80058be <_printf_i+0x212>
 80058e6:	2500      	movs	r5, #0
 80058e8:	f104 0619 	add.w	r6, r4, #25
 80058ec:	e7f5      	b.n	80058da <_printf_i+0x22e>
 80058ee:	bf00      	nop
 80058f0:	08006001 	.word	0x08006001
 80058f4:	08006012 	.word	0x08006012

080058f8 <_sbrk_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4d06      	ldr	r5, [pc, #24]	; (8005914 <_sbrk_r+0x1c>)
 80058fc:	2300      	movs	r3, #0
 80058fe:	4604      	mov	r4, r0
 8005900:	4608      	mov	r0, r1
 8005902:	602b      	str	r3, [r5, #0]
 8005904:	f7fb fdfe 	bl	8001504 <_sbrk>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_sbrk_r+0x1a>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	b103      	cbz	r3, 8005912 <_sbrk_r+0x1a>
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	200006b8 	.word	0x200006b8

08005918 <__sread>:
 8005918:	b510      	push	{r4, lr}
 800591a:	460c      	mov	r4, r1
 800591c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005920:	f000 f8a0 	bl	8005a64 <_read_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	bfab      	itete	ge
 8005928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800592a:	89a3      	ldrhlt	r3, [r4, #12]
 800592c:	181b      	addge	r3, r3, r0
 800592e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005932:	bfac      	ite	ge
 8005934:	6563      	strge	r3, [r4, #84]	; 0x54
 8005936:	81a3      	strhlt	r3, [r4, #12]
 8005938:	bd10      	pop	{r4, pc}

0800593a <__swrite>:
 800593a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593e:	461f      	mov	r7, r3
 8005940:	898b      	ldrh	r3, [r1, #12]
 8005942:	05db      	lsls	r3, r3, #23
 8005944:	4605      	mov	r5, r0
 8005946:	460c      	mov	r4, r1
 8005948:	4616      	mov	r6, r2
 800594a:	d505      	bpl.n	8005958 <__swrite+0x1e>
 800594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005950:	2302      	movs	r3, #2
 8005952:	2200      	movs	r2, #0
 8005954:	f000 f868 	bl	8005a28 <_lseek_r>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800595e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	4632      	mov	r2, r6
 8005966:	463b      	mov	r3, r7
 8005968:	4628      	mov	r0, r5
 800596a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800596e:	f000 b817 	b.w	80059a0 <_write_r>

08005972 <__sseek>:
 8005972:	b510      	push	{r4, lr}
 8005974:	460c      	mov	r4, r1
 8005976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597a:	f000 f855 	bl	8005a28 <_lseek_r>
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	89a3      	ldrh	r3, [r4, #12]
 8005982:	bf15      	itete	ne
 8005984:	6560      	strne	r0, [r4, #84]	; 0x54
 8005986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800598a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800598e:	81a3      	strheq	r3, [r4, #12]
 8005990:	bf18      	it	ne
 8005992:	81a3      	strhne	r3, [r4, #12]
 8005994:	bd10      	pop	{r4, pc}

08005996 <__sclose>:
 8005996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599a:	f000 b813 	b.w	80059c4 <_close_r>
	...

080059a0 <_write_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d07      	ldr	r5, [pc, #28]	; (80059c0 <_write_r+0x20>)
 80059a4:	4604      	mov	r4, r0
 80059a6:	4608      	mov	r0, r1
 80059a8:	4611      	mov	r1, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	602a      	str	r2, [r5, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f7fb fd57 	bl	8001462 <_write>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_write_r+0x1e>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_write_r+0x1e>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	200006b8 	.word	0x200006b8

080059c4 <_close_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d06      	ldr	r5, [pc, #24]	; (80059e0 <_close_r+0x1c>)
 80059c8:	2300      	movs	r3, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	f7fb fd63 	bl	800149a <_close>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_close_r+0x1a>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_close_r+0x1a>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	200006b8 	.word	0x200006b8

080059e4 <_fstat_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4d07      	ldr	r5, [pc, #28]	; (8005a04 <_fstat_r+0x20>)
 80059e8:	2300      	movs	r3, #0
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	f7fb fd5e 	bl	80014b2 <_fstat>
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	d102      	bne.n	8005a00 <_fstat_r+0x1c>
 80059fa:	682b      	ldr	r3, [r5, #0]
 80059fc:	b103      	cbz	r3, 8005a00 <_fstat_r+0x1c>
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	bd38      	pop	{r3, r4, r5, pc}
 8005a02:	bf00      	nop
 8005a04:	200006b8 	.word	0x200006b8

08005a08 <_isatty_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4d06      	ldr	r5, [pc, #24]	; (8005a24 <_isatty_r+0x1c>)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4608      	mov	r0, r1
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	f7fb fd5d 	bl	80014d2 <_isatty>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d102      	bne.n	8005a22 <_isatty_r+0x1a>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	b103      	cbz	r3, 8005a22 <_isatty_r+0x1a>
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	200006b8 	.word	0x200006b8

08005a28 <_lseek_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4d07      	ldr	r5, [pc, #28]	; (8005a48 <_lseek_r+0x20>)
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	4608      	mov	r0, r1
 8005a30:	4611      	mov	r1, r2
 8005a32:	2200      	movs	r2, #0
 8005a34:	602a      	str	r2, [r5, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f7fb fd56 	bl	80014e8 <_lseek>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_lseek_r+0x1e>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_lseek_r+0x1e>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	200006b8 	.word	0x200006b8

08005a4c <__malloc_lock>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <__malloc_lock+0x8>)
 8005a4e:	f7ff bb55 	b.w	80050fc <__retarget_lock_acquire_recursive>
 8005a52:	bf00      	nop
 8005a54:	200006b0 	.word	0x200006b0

08005a58 <__malloc_unlock>:
 8005a58:	4801      	ldr	r0, [pc, #4]	; (8005a60 <__malloc_unlock+0x8>)
 8005a5a:	f7ff bb50 	b.w	80050fe <__retarget_lock_release_recursive>
 8005a5e:	bf00      	nop
 8005a60:	200006b0 	.word	0x200006b0

08005a64 <_read_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d07      	ldr	r5, [pc, #28]	; (8005a84 <_read_r+0x20>)
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4608      	mov	r0, r1
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	602a      	str	r2, [r5, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	f7fb fcd8 	bl	8001428 <_read>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_read_r+0x1e>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_read_r+0x1e>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	200006b8 	.word	0x200006b8

08005a88 <_init>:
 8005a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8a:	bf00      	nop
 8005a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8e:	bc08      	pop	{r3}
 8005a90:	469e      	mov	lr, r3
 8005a92:	4770      	bx	lr

08005a94 <_fini>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr
