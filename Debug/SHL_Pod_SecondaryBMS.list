
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002644  08009bf0  08009bf0  00019bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c234  0800c234  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c234  0800c234  0001c234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c23c  0800c23c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c23c  0800c23c  0001c23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c240  0800c240  0001c240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001e4  0800c428  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800c428  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f8b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c4  00000000  00000000  0003919f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281fa  00000000  00000000  0003d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bc0  00000000  00000000  00065b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7378  00000000  00000000  0007a6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171a3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005990  00000000  00000000  00171a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009bd4 	.word	0x08009bd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08009bd4 	.word	0x08009bd4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <TinyBMS_CAN_ResetClearEventsStatistics>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE, (uint8_t) error code
 *
 * @note				-  Options: 0x01 - Clear Events , 0x02 - Clear Statistics , 0x05 - Reset BMS
 *
 */
uint8_t TinyBMS_CAN_ResetClearEventsStatistics(CAN_HandleTypeDef *hcan, uint8_t option) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
	printf("TinyBMS_CAN_ResetClearEventsStatistics\n");
 8000eec:	484f      	ldr	r0, [pc, #316]	; (800102c <TinyBMS_CAN_ResetClearEventsStatistics+0x14c>)
 8000eee:	f006 fc3d 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8000ef2:	23ff      	movs	r3, #255	; 0xff
 8000ef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	switch(option) {
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	2b05      	cmp	r3, #5
 8000efc:	d00e      	beq.n	8000f1c <TinyBMS_CAN_ResetClearEventsStatistics+0x3c>
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	dc10      	bgt.n	8000f24 <TinyBMS_CAN_ResetClearEventsStatistics+0x44>
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d002      	beq.n	8000f0c <TinyBMS_CAN_ResetClearEventsStatistics+0x2c>
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d004      	beq.n	8000f14 <TinyBMS_CAN_ResetClearEventsStatistics+0x34>
 8000f0a:	e00b      	b.n	8000f24 <TinyBMS_CAN_ResetClearEventsStatistics+0x44>
	case TINYBMS_CLEAR_EVENTS:
		printf("0x01 Clear Events\n");
 8000f0c:	4848      	ldr	r0, [pc, #288]	; (8001030 <TinyBMS_CAN_ResetClearEventsStatistics+0x150>)
 8000f0e:	f006 fc2d 	bl	800776c <puts>
		break;
 8000f12:	e010      	b.n	8000f36 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	case TINYBMS_CLEAR_STATS:
		printf("0x02 Clear Statistics\n");
 8000f14:	4847      	ldr	r0, [pc, #284]	; (8001034 <TinyBMS_CAN_ResetClearEventsStatistics+0x154>)
 8000f16:	f006 fc29 	bl	800776c <puts>
		break;
 8000f1a:	e00c      	b.n	8000f36 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	case TINYBMS_RESET_BMS:
		printf("0x05 Reset BMS\n");
 8000f1c:	4846      	ldr	r0, [pc, #280]	; (8001038 <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8000f1e:	f006 fc25 	bl	800776c <puts>
		break;
 8000f22:	e008      	b.n	8000f36 <TinyBMS_CAN_ResetClearEventsStatistics+0x56>
	default:
		printf("Invalid option\n");
 8000f24:	4845      	ldr	r0, [pc, #276]	; (800103c <TinyBMS_CAN_ResetClearEventsStatistics+0x15c>)
 8000f26:	f006 fc21 	bl	800776c <puts>
		retval = CMD_FAILURE;
 8000f2a:	23ff      	movs	r3, #255	; 0xff
 8000f2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return retval;
 8000f30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f34:	e075      	b.n	8001022 <TinyBMS_CAN_ResetClearEventsStatistics+0x142>
	}

	uint8_t tx_msg[8] = {0x02, option, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f36:	2302      	movs	r3, #2
 8000f38:	723b      	strb	r3, [r7, #8]
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	727b      	strb	r3, [r7, #9]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	72bb      	strb	r3, [r7, #10]
 8000f42:	2300      	movs	r3, #0
 8000f44:	72fb      	strb	r3, [r7, #11]
 8000f46:	2300      	movs	r3, #0
 8000f48:	733b      	strb	r3, [r7, #12]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	737b      	strb	r3, [r7, #13]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8000f5c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4619      	mov	r1, r3
 8000f66:	2000      	movs	r0, #0
 8000f68:	f002 f88e 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8000f6c:	e04d      	b.n	800100a <TinyBMS_CAN_ResetClearEventsStatistics+0x12a>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	f107 0218 	add.w	r2, r7, #24
 8000f76:	2100      	movs	r1, #0
 8000f78:	4831      	ldr	r0, [pc, #196]	; (8001040 <TinyBMS_CAN_ResetClearEventsStatistics+0x160>)
 8000f7a:	f002 ffb2 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <TinyBMS_CAN_ResetClearEventsStatistics+0xa8>
			Error_Handler();
 8000f84:	f002 f9e4 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8000f88:	f240 4103 	movw	r1, #1027	; 0x403
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <TinyBMS_CAN_ResetClearEventsStatistics+0x160>)
 8000f8e:	f003 f8e2 	bl	8004156 <HAL_CAN_ActivateNotification>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <TinyBMS_CAN_ResetClearEventsStatistics+0xbc>
			Error_Handler();
 8000f98:	f002 f9da 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <TinyBMS_CAN_ResetClearEventsStatistics+0x164>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d131      	bne.n	800100a <TinyBMS_CAN_ResetClearEventsStatistics+0x12a>
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d12e      	bne.n	800100a <TinyBMS_CAN_ResetClearEventsStatistics+0x12a>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8000fac:	7c3b      	ldrb	r3, [r7, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d113      	bne.n	8000fda <TinyBMS_CAN_ResetClearEventsStatistics+0xfa>
				printf("Response from BMS [Error]\n");
 8000fb2:	4825      	ldr	r0, [pc, #148]	; (8001048 <TinyBMS_CAN_ResetClearEventsStatistics+0x168>)
 8000fb4:	f006 fbda 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8000fb8:	7c7b      	ldrb	r3, [r7, #17]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	7cbb      	ldrb	r3, [r7, #18]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4822      	ldr	r0, [pc, #136]	; (800104c <TinyBMS_CAN_ResetClearEventsStatistics+0x16c>)
 8000fc2:	f006 fb4d 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8000fc6:	7cbb      	ldrb	r3, [r7, #18]
 8000fc8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				retval = error;
 8000fcc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 8000fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fd8:	e023      	b.n	8001022 <TinyBMS_CAN_ResetClearEventsStatistics+0x142>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_RESET_CLEAR_EVENTS_STATS)) {
 8000fda:	7c3b      	ldrb	r3, [r7, #16]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d10b      	bne.n	8000ff8 <TinyBMS_CAN_ResetClearEventsStatistics+0x118>
 8000fe0:	7c7b      	ldrb	r3, [r7, #17]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d108      	bne.n	8000ff8 <TinyBMS_CAN_ResetClearEventsStatistics+0x118>
				printf("Response from BMS [OK]\n");
 8000fe6:	481a      	ldr	r0, [pc, #104]	; (8001050 <TinyBMS_CAN_ResetClearEventsStatistics+0x170>)
 8000fe8:	f006 fbc0 	bl	800776c <puts>
				printf("CAN_TBMS_RESET_CLEAR_EVENTS_STATS | CMD: 0x%02X\n", rx_msg[1]);
 8000fec:	7c7b      	ldrb	r3, [r7, #17]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <TinyBMS_CAN_ResetClearEventsStatistics+0x174>)
 8000ff2:	f006 fb35 	bl	8007660 <iprintf>
 8000ff6:	e008      	b.n	800100a <TinyBMS_CAN_ResetClearEventsStatistics+0x12a>

			} else {
				printf("Data Corruption\n");
 8000ff8:	4817      	ldr	r0, [pc, #92]	; (8001058 <TinyBMS_CAN_ResetClearEventsStatistics+0x178>)
 8000ffa:	f006 fbb7 	bl	800776c <puts>
				retval = CMD_FAILURE;
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 8001004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001008:	e00b      	b.n	8001022 <TinyBMS_CAN_ResetClearEventsStatistics+0x142>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800100a:	2100      	movs	r1, #0
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <TinyBMS_CAN_ResetClearEventsStatistics+0x160>)
 800100e:	f003 f87a 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1aa      	bne.n	8000f6e <TinyBMS_CAN_ResetClearEventsStatistics+0x8e>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001018:	23aa      	movs	r3, #170	; 0xaa
 800101a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return retval;
 800101e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001022:	4618      	mov	r0, r3
 8001024:	3738      	adds	r7, #56	; 0x38
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	0800aeec 	.word	0x0800aeec
 8001030:	0800af14 	.word	0x0800af14
 8001034:	0800af28 	.word	0x0800af28
 8001038:	0800af40 	.word	0x0800af40
 800103c:	0800af50 	.word	0x0800af50
 8001040:	20000374 	.word	0x20000374
 8001044:	20000004 	.word	0x20000004
 8001048:	0800af60 	.word	0x0800af60
 800104c:	0800af7c 	.word	0x0800af7c
 8001050:	08009d8c 	.word	0x08009d8c
 8001054:	0800afa0 	.word	0x0800afa0
 8001058:	0800afd4 	.word	0x0800afd4

0800105c <TinyBMS_CAN_ReadRegBlock>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE, (uint8_t) error code
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated
 * 						   by malloc(size_t size).
 */
uint8_t TinyBMS_CAN_ReadRegBlock(CAN_HandleTypeDef *hcan, uint8_t rl, uint16_t addr) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	; 0x40
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
 8001068:	4613      	mov	r3, r2
 800106a:	803b      	strh	r3, [r7, #0]
	printf("TinyBMS_CAN_ReadRegBlock\n");
 800106c:	4871      	ldr	r0, [pc, #452]	; (8001234 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 800106e:	f006 fb7d 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t addr_MSB = 0, addr_LSB = 0, msg_count = 1, pl = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800107e:	2300      	movs	r3, #0
 8001080:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001084:	2301      	movs	r3, #1
 8001086:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800108a:	2300      	movs	r3, #0
 800108c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t data = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Request to BMS */
	//Check if number of registers to write is within bounds
	if((rl <= 0) || (rl > 0x7F)) {
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <TinyBMS_CAN_ReadRegBlock+0x46>
 800109a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da05      	bge.n	80010ae <TinyBMS_CAN_ReadRegBlock+0x52>
		retval = CMD_FAILURE;
 80010a2:	23ff      	movs	r3, #255	; 0xff
 80010a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 80010a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010ac:	e0bd      	b.n	800122a <TinyBMS_CAN_ReadRegBlock+0x1ce>
	}

	//Starting address of Register Block
	addr_MSB = ((addr >> 8) & 0xFF);
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	addr_LSB = (addr & 0xFF);
 80010b8:	883b      	ldrh	r3, [r7, #0]
 80010ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	uint8_t tx_msg[8] = {CAN_TBMS_READ_REG_BLOCK, addr_MSB, addr_LSB, 0x00, rl, 0x00, 0x00, 0x00};
 80010be:	2303      	movs	r3, #3
 80010c0:	723b      	strb	r3, [r7, #8]
 80010c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80010c6:	727b      	strb	r3, [r7, #9]
 80010c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010cc:	72bb      	strb	r3, [r7, #10]
 80010ce:	2300      	movs	r3, #0
 80010d0:	72fb      	strb	r3, [r7, #11]
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	733b      	strb	r3, [r7, #12]
 80010d6:	2300      	movs	r3, #0
 80010d8:	737b      	strb	r3, [r7, #13]
 80010da:	2300      	movs	r3, #0
 80010dc:	73bb      	strb	r3, [r7, #14]
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 5;
 80010e2:	2305      	movs	r3, #5
 80010e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80010e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4619      	mov	r1, r3
 80010f2:	2000      	movs	r0, #0
 80010f4:	f001 ffc8 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80010f8:	e08a      	b.n	8001210 <TinyBMS_CAN_ReadRegBlock+0x1b4>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	f107 0218 	add.w	r2, r7, #24
 8001102:	2100      	movs	r1, #0
 8001104:	484c      	ldr	r0, [pc, #304]	; (8001238 <TinyBMS_CAN_ReadRegBlock+0x1dc>)
 8001106:	f002 feec 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <TinyBMS_CAN_ReadRegBlock+0xb8>
			Error_Handler();
 8001110:	f002 f91e 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001114:	f240 4103 	movw	r1, #1027	; 0x403
 8001118:	4847      	ldr	r0, [pc, #284]	; (8001238 <TinyBMS_CAN_ReadRegBlock+0x1dc>)
 800111a:	f003 f81c 	bl	8004156 <HAL_CAN_ActivateNotification>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <TinyBMS_CAN_ReadRegBlock+0xcc>
			Error_Handler();
 8001124:	f002 f914 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4b44      	ldr	r3, [pc, #272]	; (800123c <TinyBMS_CAN_ReadRegBlock+0x1e0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d16e      	bne.n	8001210 <TinyBMS_CAN_ReadRegBlock+0x1b4>
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	2b00      	cmp	r3, #0
 8001136:	d16b      	bne.n	8001210 <TinyBMS_CAN_ReadRegBlock+0x1b4>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001138:	7c3b      	ldrb	r3, [r7, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d113      	bne.n	8001166 <TinyBMS_CAN_ReadRegBlock+0x10a>
				printf("Response from BMS [Error]\n");
 800113e:	4840      	ldr	r0, [pc, #256]	; (8001240 <TinyBMS_CAN_ReadRegBlock+0x1e4>)
 8001140:	f006 fb14 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001144:	7c7b      	ldrb	r3, [r7, #17]
 8001146:	4619      	mov	r1, r3
 8001148:	7cbb      	ldrb	r3, [r7, #18]
 800114a:	461a      	mov	r2, r3
 800114c:	483d      	ldr	r0, [pc, #244]	; (8001244 <TinyBMS_CAN_ReadRegBlock+0x1e8>)
 800114e:	f006 fa87 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8001152:	7cbb      	ldrb	r3, [r7, #18]
 8001154:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				retval = error;
 8001158:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800115c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8001160:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001164:	e061      	b.n	800122a <TinyBMS_CAN_ReadRegBlock+0x1ce>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_REG_BLOCK)) {
 8001166:	7c3b      	ldrb	r3, [r7, #16]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d148      	bne.n	80011fe <TinyBMS_CAN_ReadRegBlock+0x1a2>
 800116c:	7c7b      	ldrb	r3, [r7, #17]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d145      	bne.n	80011fe <TinyBMS_CAN_ReadRegBlock+0x1a2>
				if(msg_count == 1) {
 8001172:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001176:	2b01      	cmp	r3, #1
 8001178:	d107      	bne.n	800118a <TinyBMS_CAN_ReadRegBlock+0x12e>
					printf("Response from BMS [OK]\n");
 800117a:	4833      	ldr	r0, [pc, #204]	; (8001248 <TinyBMS_CAN_ReadRegBlock+0x1ec>)
 800117c:	f006 faf6 	bl	800776c <puts>
					printf("CAN_TBMS_READ_REG_BLOCK | CMD: 0x%02X\n", rx_msg[1]);
 8001180:	7c7b      	ldrb	r3, [r7, #17]
 8001182:	4619      	mov	r1, r3
 8001184:	4831      	ldr	r0, [pc, #196]	; (800124c <TinyBMS_CAN_ReadRegBlock+0x1f0>)
 8001186:	f006 fa6b 	bl	8007660 <iprintf>
				}
				pl = rx_msg[2];
 800118a:	7cbb      	ldrb	r3, [r7, #18]
 800118c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 8001190:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001194:	2b02      	cmp	r3, #2
 8001196:	d129      	bne.n	80011ec <TinyBMS_CAN_ReadRegBlock+0x190>
 8001198:	7d7b      	ldrb	r3, [r7, #21]
 800119a:	461a      	mov	r2, r3
 800119c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011a0:	3b01      	subs	r3, #1
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d122      	bne.n	80011ec <TinyBMS_CAN_ReadRegBlock+0x190>
					data = ((rx_msg[3] << 8) | rx_msg[4]);
 80011a6:	7cfb      	ldrb	r3, [r7, #19]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	7d3b      	ldrb	r3, [r7, #20]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	873b      	strh	r3, [r7, #56]	; 0x38

					// MSG1 - Addr: 0xABCD - Data: 0x1234
					// MSG2 - Addr: 0xABDD - Data: 0x5678
					printf("MSG%u - ", msg_count);
 80011b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011ba:	4619      	mov	r1, r3
 80011bc:	4824      	ldr	r0, [pc, #144]	; (8001250 <TinyBMS_CAN_ReadRegBlock+0x1f4>)
 80011be:	f006 fa4f 	bl	8007660 <iprintf>
					printf("Addr: 0x%04X - ", (addr+(sizeof(addr)*(msg_count-1))) );
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011c8:	3b01      	subs	r3, #1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <TinyBMS_CAN_ReadRegBlock+0x1f8>)
 80011d2:	f006 fa45 	bl	8007660 <iprintf>
					printf("Data: 0x%04X\n", data);
 80011d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011d8:	4619      	mov	r1, r3
 80011da:	481f      	ldr	r0, [pc, #124]	; (8001258 <TinyBMS_CAN_ReadRegBlock+0x1fc>)
 80011dc:	f006 fa40 	bl	8007660 <iprintf>
					msg_count++;
 80011e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011e4:	3301      	adds	r3, #1
 80011e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 80011ea:	e011      	b.n	8001210 <TinyBMS_CAN_ReadRegBlock+0x1b4>
				} else {
					printf("Data Corruption\n");
 80011ec:	481b      	ldr	r0, [pc, #108]	; (800125c <TinyBMS_CAN_ReadRegBlock+0x200>)
 80011ee:	f006 fabd 	bl	800776c <puts>
					retval = CMD_FAILURE;
 80011f2:	23ff      	movs	r3, #255	; 0xff
 80011f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 80011f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80011fc:	e015      	b.n	800122a <TinyBMS_CAN_ReadRegBlock+0x1ce>
				}

			} else {
				printf("Data Corruption\n");
 80011fe:	4817      	ldr	r0, [pc, #92]	; (800125c <TinyBMS_CAN_ReadRegBlock+0x200>)
 8001200:	f006 fab4 	bl	800776c <puts>
				retval = CMD_FAILURE;
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 800120a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800120e:	e00c      	b.n	800122a <TinyBMS_CAN_ReadRegBlock+0x1ce>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001210:	2100      	movs	r1, #0
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <TinyBMS_CAN_ReadRegBlock+0x1dc>)
 8001214:	f002 ff77 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	f47f af6d 	bne.w	80010fa <TinyBMS_CAN_ReadRegBlock+0x9e>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001220:	23aa      	movs	r3, #170	; 0xaa
 8001222:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 8001226:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 800122a:	4618      	mov	r0, r3
 800122c:	3740      	adds	r7, #64	; 0x40
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	0800afe4 	.word	0x0800afe4
 8001238:	20000374 	.word	0x20000374
 800123c:	20000004 	.word	0x20000004
 8001240:	0800af60 	.word	0x0800af60
 8001244:	0800af7c 	.word	0x0800af7c
 8001248:	08009d8c 	.word	0x08009d8c
 800124c:	0800b000 	.word	0x0800b000
 8001250:	0800b028 	.word	0x0800b028
 8001254:	0800b034 	.word	0x0800b034
 8001258:	0800b044 	.word	0x0800b044
 800125c:	0800afd4 	.word	0x0800afd4

08001260 <TinyBMS_CAN_ReadNewestEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE, (uint8_t) error code
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_CAN_ReadNewestEvents(CAN_HandleTypeDef *hcan) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b092      	sub	sp, #72	; 0x48
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadNewestEvents\n");
 8001268:	486a      	ldr	r0, [pc, #424]	; (8001414 <TinyBMS_CAN_ReadNewestEvents+0x1b4>)
 800126a:	f006 fa7f 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 800126e:	23ff      	movs	r3, #255	; 0xff
 8001270:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0, msg_count = 1, IDn = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800127a:	2301      	movs	r3, #1
 800127c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001280:	2300      	movs	r3, #0
 8001282:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint32_t BTSP = 0, TSP = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
 800128a:	2300      	movs	r3, #0
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_NEWEST_EVENTS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800128e:	4a62      	ldr	r2, [pc, #392]	; (8001418 <TinyBMS_CAN_ReadNewestEvents+0x1b8>)
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001298:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80012a2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	4619      	mov	r1, r3
 80012ac:	2000      	movs	r0, #0
 80012ae:	f001 feeb 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80012b2:	e09d      	b.n	80013f0 <TinyBMS_CAN_ReadNewestEvents+0x190>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	f107 021c 	add.w	r2, r7, #28
 80012bc:	2100      	movs	r1, #0
 80012be:	4857      	ldr	r0, [pc, #348]	; (800141c <TinyBMS_CAN_ReadNewestEvents+0x1bc>)
 80012c0:	f002 fe0f 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <TinyBMS_CAN_ReadNewestEvents+0x6e>
			Error_Handler();
 80012ca:	f002 f841 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80012ce:	f240 4103 	movw	r1, #1027	; 0x403
 80012d2:	4852      	ldr	r0, [pc, #328]	; (800141c <TinyBMS_CAN_ReadNewestEvents+0x1bc>)
 80012d4:	f002 ff3f 	bl	8004156 <HAL_CAN_ActivateNotification>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <TinyBMS_CAN_ReadNewestEvents+0x82>
			Error_Handler();
 80012de:	f002 f837 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <TinyBMS_CAN_ReadNewestEvents+0x1c0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	f040 8081 	bne.w	80013f0 <TinyBMS_CAN_ReadNewestEvents+0x190>
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d17d      	bne.n	80013f0 <TinyBMS_CAN_ReadNewestEvents+0x190>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80012f4:	7d3b      	ldrb	r3, [r7, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d113      	bne.n	8001322 <TinyBMS_CAN_ReadNewestEvents+0xc2>
				printf("Response from BMS [Error]\n");
 80012fa:	484a      	ldr	r0, [pc, #296]	; (8001424 <TinyBMS_CAN_ReadNewestEvents+0x1c4>)
 80012fc:	f006 fa36 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001300:	7d7b      	ldrb	r3, [r7, #21]
 8001302:	4619      	mov	r1, r3
 8001304:	7dbb      	ldrb	r3, [r7, #22]
 8001306:	461a      	mov	r2, r3
 8001308:	4847      	ldr	r0, [pc, #284]	; (8001428 <TinyBMS_CAN_ReadNewestEvents+0x1c8>)
 800130a:	f006 f9a9 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 800130e:	7dbb      	ldrb	r3, [r7, #22]
 8001310:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				retval = error;
 8001314:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001318:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 800131c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001320:	e073      	b.n	800140a <TinyBMS_CAN_ReadNewestEvents+0x1aa>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_NEWEST_EVENTS)) {
 8001322:	7d3b      	ldrb	r3, [r7, #20]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d15a      	bne.n	80013de <TinyBMS_CAN_ReadNewestEvents+0x17e>
 8001328:	7d7b      	ldrb	r3, [r7, #21]
 800132a:	2b11      	cmp	r3, #17
 800132c:	d157      	bne.n	80013de <TinyBMS_CAN_ReadNewestEvents+0x17e>
				if(msg_count == 1) {
 800132e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001332:	2b01      	cmp	r3, #1
 8001334:	d107      	bne.n	8001346 <TinyBMS_CAN_ReadNewestEvents+0xe6>
					printf("Response from BMS [OK]\n");
 8001336:	483d      	ldr	r0, [pc, #244]	; (800142c <TinyBMS_CAN_ReadNewestEvents+0x1cc>)
 8001338:	f006 fa18 	bl	800776c <puts>
					printf("CAN_TBMS_READ_NEWEST_EVENTS | CMD: 0x%02X\n", rx_msg[1]);
 800133c:	7d7b      	ldrb	r3, [r7, #21]
 800133e:	4619      	mov	r1, r3
 8001340:	483b      	ldr	r0, [pc, #236]	; (8001430 <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8001342:	f006 f98d 	bl	8007660 <iprintf>
				}
				pl = rx_msg[2];
 8001346:	7dbb      	ldrb	r3, [r7, #22]
 8001348:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				//MSG1 - TinyBMS Timestamp
				//If payload is 4 Bytes and Byte 8 is 0x00
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 800134c:	7efb      	ldrb	r3, [r7, #27]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d118      	bne.n	8001384 <TinyBMS_CAN_ReadNewestEvents+0x124>
 8001352:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001356:	2b04      	cmp	r3, #4
 8001358:	d114      	bne.n	8001384 <TinyBMS_CAN_ReadNewestEvents+0x124>
					BTSP = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 800135a:	7ebb      	ldrb	r3, [r7, #26]
 800135c:	061a      	lsls	r2, r3, #24
 800135e:	7e7b      	ldrb	r3, [r7, #25]
 8001360:	041b      	lsls	r3, r3, #16
 8001362:	431a      	orrs	r2, r3
 8001364:	7e3b      	ldrb	r3, [r7, #24]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4313      	orrs	r3, r2
 800136a:	7dfa      	ldrb	r2, [r7, #23]
 800136c:	4313      	orrs	r3, r2
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
					printf("TinyBMS Timestamp (s): [%lu]\n", BTSP);
 8001370:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001372:	4830      	ldr	r0, [pc, #192]	; (8001434 <TinyBMS_CAN_ReadNewestEvents+0x1d4>)
 8001374:	f006 f974 	bl	8007660 <iprintf>
					msg_count++;
 8001378:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800137c:	3301      	adds	r3, #1
 800137e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001382:	e02b      	b.n	80013dc <TinyBMS_CAN_ReadNewestEvents+0x17c>
				//MSG2..n - Newest Event ID + Timestamp
				//If payload is 4 Bytes and Byte 8 is 1..n-1
				} else if((rx_msg[7] == (msg_count-1)) && (pl == 4)) {
 8001384:	7efb      	ldrb	r3, [r7, #27]
 8001386:	461a      	mov	r2, r3
 8001388:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800138c:	3b01      	subs	r3, #1
 800138e:	429a      	cmp	r2, r3
 8001390:	d11b      	bne.n	80013ca <TinyBMS_CAN_ReadNewestEvents+0x16a>
 8001392:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001396:	2b04      	cmp	r3, #4
 8001398:	d117      	bne.n	80013ca <TinyBMS_CAN_ReadNewestEvents+0x16a>
					TSP = ((0x00 << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 800139a:	7e7b      	ldrb	r3, [r7, #25]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	7e3b      	ldrb	r3, [r7, #24]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	4313      	orrs	r3, r2
 80013a4:	7dfa      	ldrb	r2, [r7, #23]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
					IDn = rx_msg[6];
 80013aa:	7ebb      	ldrb	r3, [r7, #26]
 80013ac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					printf("Event - ID: 0x%02X | Timestamp (s): [%lu]\n", IDn, TSP);
 80013b0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80013b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013b6:	4619      	mov	r1, r3
 80013b8:	481f      	ldr	r0, [pc, #124]	; (8001438 <TinyBMS_CAN_ReadNewestEvents+0x1d8>)
 80013ba:	f006 f951 	bl	8007660 <iprintf>
					msg_count++;
 80013be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013c2:	3301      	adds	r3, #1
 80013c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013c8:	e008      	b.n	80013dc <TinyBMS_CAN_ReadNewestEvents+0x17c>
				} else {
					printf("Data Corruption\n");
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <TinyBMS_CAN_ReadNewestEvents+0x1dc>)
 80013cc:	f006 f9ce 	bl	800776c <puts>
					retval = CMD_FAILURE;
 80013d0:	23ff      	movs	r3, #255	; 0xff
 80013d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					return retval;
 80013d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013da:	e016      	b.n	800140a <TinyBMS_CAN_ReadNewestEvents+0x1aa>
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 80013dc:	e008      	b.n	80013f0 <TinyBMS_CAN_ReadNewestEvents+0x190>
				}

			} else {
				printf("Data Corruption\n");
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <TinyBMS_CAN_ReadNewestEvents+0x1dc>)
 80013e0:	f006 f9c4 	bl	800776c <puts>
				retval = CMD_FAILURE;
 80013e4:	23ff      	movs	r3, #255	; 0xff
 80013e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 80013ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013ee:	e00c      	b.n	800140a <TinyBMS_CAN_ReadNewestEvents+0x1aa>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80013f0:	2100      	movs	r1, #0
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <TinyBMS_CAN_ReadNewestEvents+0x1bc>)
 80013f4:	f002 fe87 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f47f af5a 	bne.w	80012b4 <TinyBMS_CAN_ReadNewestEvents+0x54>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001400:	23aa      	movs	r3, #170	; 0xaa
 8001402:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	return retval;
 8001406:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
}
 800140a:	4618      	mov	r0, r3
 800140c:	3748      	adds	r7, #72	; 0x48
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	0800b0dc 	.word	0x0800b0dc
 8001418:	0800b174 	.word	0x0800b174
 800141c:	20000374 	.word	0x20000374
 8001420:	20000004 	.word	0x20000004
 8001424:	0800af60 	.word	0x0800af60
 8001428:	0800af7c 	.word	0x0800af7c
 800142c:	08009d8c 	.word	0x08009d8c
 8001430:	0800b0fc 	.word	0x0800b0fc
 8001434:	0800b128 	.word	0x0800b128
 8001438:	0800b148 	.word	0x0800b148
 800143c:	0800afd4 	.word	0x0800afd4

08001440 <TinyBMS_CAN_ReadAllEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE, (uint8_t) error code
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_CAN_ReadAllEvents(CAN_HandleTypeDef *hcan) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b092      	sub	sp, #72	; 0x48
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadAllEvents\n");
 8001448:	486a      	ldr	r0, [pc, #424]	; (80015f4 <TinyBMS_CAN_ReadAllEvents+0x1b4>)
 800144a:	f006 f98f 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 800144e:	23ff      	movs	r3, #255	; 0xff
 8001450:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0, msg_count = 1, IDn = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800145a:	2301      	movs	r3, #1
 800145c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint32_t BTSP = 0, TSP = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	643b      	str	r3, [r7, #64]	; 0x40
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_ALL_EVENTS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800146e:	4a62      	ldr	r2, [pc, #392]	; (80015f8 <TinyBMS_CAN_ReadAllEvents+0x1b8>)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001478:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001482:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	4619      	mov	r1, r3
 800148c:	2000      	movs	r0, #0
 800148e:	f001 fdfb 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001492:	e09d      	b.n	80015d0 <TinyBMS_CAN_ReadAllEvents+0x190>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	f107 021c 	add.w	r2, r7, #28
 800149c:	2100      	movs	r1, #0
 800149e:	4857      	ldr	r0, [pc, #348]	; (80015fc <TinyBMS_CAN_ReadAllEvents+0x1bc>)
 80014a0:	f002 fd1f 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <TinyBMS_CAN_ReadAllEvents+0x6e>
			Error_Handler();
 80014aa:	f001 ff51 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80014ae:	f240 4103 	movw	r1, #1027	; 0x403
 80014b2:	4852      	ldr	r0, [pc, #328]	; (80015fc <TinyBMS_CAN_ReadAllEvents+0x1bc>)
 80014b4:	f002 fe4f 	bl	8004156 <HAL_CAN_ActivateNotification>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <TinyBMS_CAN_ReadAllEvents+0x82>
			Error_Handler();
 80014be:	f001 ff47 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <TinyBMS_CAN_ReadAllEvents+0x1c0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8081 	bne.w	80015d0 <TinyBMS_CAN_ReadAllEvents+0x190>
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d17d      	bne.n	80015d0 <TinyBMS_CAN_ReadAllEvents+0x190>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80014d4:	7d3b      	ldrb	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d113      	bne.n	8001502 <TinyBMS_CAN_ReadAllEvents+0xc2>
				printf("Response from BMS [Error]\n");
 80014da:	484a      	ldr	r0, [pc, #296]	; (8001604 <TinyBMS_CAN_ReadAllEvents+0x1c4>)
 80014dc:	f006 f946 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80014e0:	7d7b      	ldrb	r3, [r7, #21]
 80014e2:	4619      	mov	r1, r3
 80014e4:	7dbb      	ldrb	r3, [r7, #22]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4847      	ldr	r0, [pc, #284]	; (8001608 <TinyBMS_CAN_ReadAllEvents+0x1c8>)
 80014ea:	f006 f8b9 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				retval = error;
 80014f4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80014f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 80014fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001500:	e073      	b.n	80015ea <TinyBMS_CAN_ReadAllEvents+0x1aa>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ALL_EVENTS)) {
 8001502:	7d3b      	ldrb	r3, [r7, #20]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d15a      	bne.n	80015be <TinyBMS_CAN_ReadAllEvents+0x17e>
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	2b12      	cmp	r3, #18
 800150c:	d157      	bne.n	80015be <TinyBMS_CAN_ReadAllEvents+0x17e>
				if(msg_count == 1) {
 800150e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <TinyBMS_CAN_ReadAllEvents+0xe6>
					printf("Response from BMS [OK]\n");
 8001516:	483d      	ldr	r0, [pc, #244]	; (800160c <TinyBMS_CAN_ReadAllEvents+0x1cc>)
 8001518:	f006 f928 	bl	800776c <puts>
					printf("CAN_TBMS_READ_ALL_EVENTS | CMD: 0x%02X\n", rx_msg[1]);
 800151c:	7d7b      	ldrb	r3, [r7, #21]
 800151e:	4619      	mov	r1, r3
 8001520:	483b      	ldr	r0, [pc, #236]	; (8001610 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8001522:	f006 f89d 	bl	8007660 <iprintf>
				}
				pl = rx_msg[2];
 8001526:	7dbb      	ldrb	r3, [r7, #22]
 8001528:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

				//MSG1 - TinyBMS Timestamp
				//If payload is 4 Bytes and Byte 8 is 0x00
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 800152c:	7efb      	ldrb	r3, [r7, #27]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <TinyBMS_CAN_ReadAllEvents+0x124>
 8001532:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001536:	2b04      	cmp	r3, #4
 8001538:	d114      	bne.n	8001564 <TinyBMS_CAN_ReadAllEvents+0x124>
					BTSP = ((rx_msg[6] << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 800153a:	7ebb      	ldrb	r3, [r7, #26]
 800153c:	061a      	lsls	r2, r3, #24
 800153e:	7e7b      	ldrb	r3, [r7, #25]
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	431a      	orrs	r2, r3
 8001544:	7e3b      	ldrb	r3, [r7, #24]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	4313      	orrs	r3, r2
 800154a:	7dfa      	ldrb	r2, [r7, #23]
 800154c:	4313      	orrs	r3, r2
 800154e:	643b      	str	r3, [r7, #64]	; 0x40
					printf("TinyBMS Timestamp (s): [%lu]\n", BTSP);
 8001550:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001552:	4830      	ldr	r0, [pc, #192]	; (8001614 <TinyBMS_CAN_ReadAllEvents+0x1d4>)
 8001554:	f006 f884 	bl	8007660 <iprintf>
					msg_count++;
 8001558:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800155c:	3301      	adds	r3, #1
 800155e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001562:	e02b      	b.n	80015bc <TinyBMS_CAN_ReadAllEvents+0x17c>
				//MSG2..n - Event ID + Timestamp
				//If payload is 4 Bytes and Byte 8 is 1..n-1
				} else if((rx_msg[7] == (msg_count-1)) && (pl == 4)) {
 8001564:	7efb      	ldrb	r3, [r7, #27]
 8001566:	461a      	mov	r2, r3
 8001568:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800156c:	3b01      	subs	r3, #1
 800156e:	429a      	cmp	r2, r3
 8001570:	d11b      	bne.n	80015aa <TinyBMS_CAN_ReadAllEvents+0x16a>
 8001572:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001576:	2b04      	cmp	r3, #4
 8001578:	d117      	bne.n	80015aa <TinyBMS_CAN_ReadAllEvents+0x16a>
					TSP = ((0x00 << 24) | (rx_msg[5] << 16) | (rx_msg[4] << 8) | (rx_msg[3]));
 800157a:	7e7b      	ldrb	r3, [r7, #25]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	7e3b      	ldrb	r3, [r7, #24]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	4313      	orrs	r3, r2
 8001584:	7dfa      	ldrb	r2, [r7, #23]
 8001586:	4313      	orrs	r3, r2
 8001588:	63fb      	str	r3, [r7, #60]	; 0x3c
					IDn = rx_msg[6];
 800158a:	7ebb      	ldrb	r3, [r7, #26]
 800158c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					printf("Event - ID: 0x%02X | Timestamp (s): [%lu]\n", IDn, TSP);
 8001590:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001596:	4619      	mov	r1, r3
 8001598:	481f      	ldr	r0, [pc, #124]	; (8001618 <TinyBMS_CAN_ReadAllEvents+0x1d8>)
 800159a:	f006 f861 	bl	8007660 <iprintf>
					msg_count++;
 800159e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015a2:	3301      	adds	r3, #1
 80015a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80015a8:	e008      	b.n	80015bc <TinyBMS_CAN_ReadAllEvents+0x17c>
				} else {
					printf("Data Corruption\n");
 80015aa:	481c      	ldr	r0, [pc, #112]	; (800161c <TinyBMS_CAN_ReadAllEvents+0x1dc>)
 80015ac:	f006 f8de 	bl	800776c <puts>
					retval = CMD_FAILURE;
 80015b0:	23ff      	movs	r3, #255	; 0xff
 80015b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					return retval;
 80015b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015ba:	e016      	b.n	80015ea <TinyBMS_CAN_ReadAllEvents+0x1aa>
				if((rx_msg[7] == 0x00) && (pl == 4)) {
 80015bc:	e008      	b.n	80015d0 <TinyBMS_CAN_ReadAllEvents+0x190>
				}

			} else {
				printf("Data Corruption\n");
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <TinyBMS_CAN_ReadAllEvents+0x1dc>)
 80015c0:	f006 f8d4 	bl	800776c <puts>
				retval = CMD_FAILURE;
 80015c4:	23ff      	movs	r3, #255	; 0xff
 80015c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				return retval;
 80015ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015ce:	e00c      	b.n	80015ea <TinyBMS_CAN_ReadAllEvents+0x1aa>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80015d0:	2100      	movs	r1, #0
 80015d2:	480a      	ldr	r0, [pc, #40]	; (80015fc <TinyBMS_CAN_ReadAllEvents+0x1bc>)
 80015d4:	f002 fd97 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f47f af5a 	bne.w	8001494 <TinyBMS_CAN_ReadAllEvents+0x54>
			}
		}
	}
	retval = CMD_SUCCESS;
 80015e0:	23aa      	movs	r3, #170	; 0xaa
 80015e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	return retval;
 80015e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3748      	adds	r7, #72	; 0x48
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	0800b17c 	.word	0x0800b17c
 80015f8:	0800b1c0 	.word	0x0800b1c0
 80015fc:	20000374 	.word	0x20000374
 8001600:	20000004 	.word	0x20000004
 8001604:	0800af60 	.word	0x0800af60
 8001608:	0800af7c 	.word	0x0800af7c
 800160c:	08009d8c 	.word	0x08009d8c
 8001610:	0800b198 	.word	0x0800b198
 8001614:	0800b128 	.word	0x0800b128
 8001618:	0800b148 	.word	0x0800b148
 800161c:	0800afd4 	.word	0x0800afd4

08001620 <TinyBMS_CAN_ReadBatteryPackVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
uint8_t TinyBMS_CAN_ReadBatteryPackVoltage(CAN_HandleTypeDef *hcan) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b092      	sub	sp, #72	; 0x48
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackVoltage\n");
 8001628:	4848      	ldr	r0, [pc, #288]	; (800174c <TinyBMS_CAN_ReadBatteryPackVoltage+0x12c>)
 800162a:	f006 f89f 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 800162e:	23ff      	movs	r3, #255	; 0xff
 8001630:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_PACK_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001634:	4a46      	ldr	r2, [pc, #280]	; (8001750 <TinyBMS_CAN_ReadBatteryPackVoltage+0x130>)
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800163e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001648:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	2000      	movs	r0, #0
 8001654:	f001 fd18 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001658:	e067      	b.n	800172a <TinyBMS_CAN_ReadBatteryPackVoltage+0x10a>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	f107 021c 	add.w	r2, r7, #28
 8001662:	2100      	movs	r1, #0
 8001664:	483b      	ldr	r0, [pc, #236]	; (8001754 <TinyBMS_CAN_ReadBatteryPackVoltage+0x134>)
 8001666:	f002 fc3c 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <TinyBMS_CAN_ReadBatteryPackVoltage+0x54>
			Error_Handler();
 8001670:	f001 fe6e 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001674:	f240 4103 	movw	r1, #1027	; 0x403
 8001678:	4836      	ldr	r0, [pc, #216]	; (8001754 <TinyBMS_CAN_ReadBatteryPackVoltage+0x134>)
 800167a:	f002 fd6c 	bl	8004156 <HAL_CAN_ActivateNotification>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <TinyBMS_CAN_ReadBatteryPackVoltage+0x68>
			Error_Handler();
 8001684:	f001 fe64 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <TinyBMS_CAN_ReadBatteryPackVoltage+0x138>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d14b      	bne.n	800172a <TinyBMS_CAN_ReadBatteryPackVoltage+0x10a>
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	2b00      	cmp	r3, #0
 8001696:	d148      	bne.n	800172a <TinyBMS_CAN_ReadBatteryPackVoltage+0x10a>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001698:	7d3b      	ldrb	r3, [r7, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d113      	bne.n	80016c6 <TinyBMS_CAN_ReadBatteryPackVoltage+0xa6>
				printf("Response from BMS [Error]\n");
 800169e:	482f      	ldr	r0, [pc, #188]	; (800175c <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 80016a0:	f006 f864 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80016a4:	7d7b      	ldrb	r3, [r7, #21]
 80016a6:	4619      	mov	r1, r3
 80016a8:	7dbb      	ldrb	r3, [r7, #22]
 80016aa:	461a      	mov	r2, r3
 80016ac:	482c      	ldr	r0, [pc, #176]	; (8001760 <TinyBMS_CAN_ReadBatteryPackVoltage+0x140>)
 80016ae:	f005 ffd7 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 80016b2:	7dbb      	ldrb	r3, [r7, #22]
 80016b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				retval = error;
 80016b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80016bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 80016c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016c4:	e03d      	b.n	8001742 <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_VOLTAGE)) {
 80016c6:	7d3b      	ldrb	r3, [r7, #20]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d125      	bne.n	8001718 <TinyBMS_CAN_ReadBatteryPackVoltage+0xf8>
 80016cc:	7d7b      	ldrb	r3, [r7, #21]
 80016ce:	2b14      	cmp	r3, #20
 80016d0:	d122      	bne.n	8001718 <TinyBMS_CAN_ReadBatteryPackVoltage+0xf8>
				printf("Response from BMS [OK]\n");
 80016d2:	4824      	ldr	r0, [pc, #144]	; (8001764 <TinyBMS_CAN_ReadBatteryPackVoltage+0x144>)
 80016d4:	f006 f84a 	bl	800776c <puts>
				printf("CAN_TBMS_READ_PACK_VOLTAGE | CMD: 0x%02X\n", rx_msg[1]);
 80016d8:	7d7b      	ldrb	r3, [r7, #21]
 80016da:	4619      	mov	r1, r3
 80016dc:	4822      	ldr	r0, [pc, #136]	; (8001768 <TinyBMS_CAN_ReadBatteryPackVoltage+0x148>)
 80016de:	f005 ffbf 	bl	8007660 <iprintf>
				uint32_t data = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 80016e2:	7e7b      	ldrb	r3, [r7, #25]
 80016e4:	061a      	lsls	r2, r3, #24
 80016e6:	7e3b      	ldrb	r3, [r7, #24]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	4313      	orrs	r3, r2
 80016f2:	7dba      	ldrb	r2, [r7, #22]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
				float packVoltage = data;
 80016f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001702:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Voltage: %f (V)\n", packVoltage);
 8001706:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001708:	f7fe ff3e 	bl	8000588 <__aeabi_f2d>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4816      	ldr	r0, [pc, #88]	; (800176c <TinyBMS_CAN_ReadBatteryPackVoltage+0x14c>)
 8001712:	f005 ffa5 	bl	8007660 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_VOLTAGE)) {
 8001716:	e008      	b.n	800172a <TinyBMS_CAN_ReadBatteryPackVoltage+0x10a>

			} else {
				printf("Data Corruption\n");
 8001718:	4815      	ldr	r0, [pc, #84]	; (8001770 <TinyBMS_CAN_ReadBatteryPackVoltage+0x150>)
 800171a:	f006 f827 	bl	800776c <puts>
				retval = CMD_FAILURE;
 800171e:	23ff      	movs	r3, #255	; 0xff
 8001720:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8001724:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001728:	e00b      	b.n	8001742 <TinyBMS_CAN_ReadBatteryPackVoltage+0x122>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800172a:	2100      	movs	r1, #0
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <TinyBMS_CAN_ReadBatteryPackVoltage+0x134>)
 800172e:	f002 fcea 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d190      	bne.n	800165a <TinyBMS_CAN_ReadBatteryPackVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001738:	23aa      	movs	r3, #170	; 0xaa
 800173a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return retval;
 800173e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001742:	4618      	mov	r0, r3
 8001744:	3748      	adds	r7, #72	; 0x48
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	0800b1c8 	.word	0x0800b1c8
 8001750:	0800b240 	.word	0x0800b240
 8001754:	20000374 	.word	0x20000374
 8001758:	20000004 	.word	0x20000004
 800175c:	0800af60 	.word	0x0800af60
 8001760:	0800af7c 	.word	0x0800af7c
 8001764:	08009d8c 	.word	0x08009d8c
 8001768:	0800b1ec 	.word	0x0800b1ec
 800176c:	0800b218 	.word	0x0800b218
 8001770:	0800afd4 	.word	0x0800afd4

08001774 <TinyBMS_CAN_ReadBatteryPackCurrent>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
uint8_t TinyBMS_CAN_ReadBatteryPackCurrent(CAN_HandleTypeDef *hcan) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b092      	sub	sp, #72	; 0x48
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackCurrent\n");
 800177c:	4848      	ldr	r0, [pc, #288]	; (80018a0 <TinyBMS_CAN_ReadBatteryPackCurrent+0x12c>)
 800177e:	f005 fff5 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8001782:	23ff      	movs	r3, #255	; 0xff
 8001784:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_PACK_CURRENT, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001788:	4a46      	ldr	r2, [pc, #280]	; (80018a4 <TinyBMS_CAN_ReadBatteryPackCurrent+0x130>)
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001792:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 800179c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	2000      	movs	r0, #0
 80017a8:	f001 fc6e 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80017ac:	e067      	b.n	800187e <TinyBMS_CAN_ReadBatteryPackCurrent+0x10a>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	f107 021c 	add.w	r2, r7, #28
 80017b6:	2100      	movs	r1, #0
 80017b8:	483b      	ldr	r0, [pc, #236]	; (80018a8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x134>)
 80017ba:	f002 fb92 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x54>
			Error_Handler();
 80017c4:	f001 fdc4 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80017c8:	f240 4103 	movw	r1, #1027	; 0x403
 80017cc:	4836      	ldr	r0, [pc, #216]	; (80018a8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x134>)
 80017ce:	f002 fcc2 	bl	8004156 <HAL_CAN_ActivateNotification>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <TinyBMS_CAN_ReadBatteryPackCurrent+0x68>
			Error_Handler();
 80017d8:	f001 fdba 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	4b33      	ldr	r3, [pc, #204]	; (80018ac <TinyBMS_CAN_ReadBatteryPackCurrent+0x138>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d14b      	bne.n	800187e <TinyBMS_CAN_ReadBatteryPackCurrent+0x10a>
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d148      	bne.n	800187e <TinyBMS_CAN_ReadBatteryPackCurrent+0x10a>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80017ec:	7d3b      	ldrb	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d113      	bne.n	800181a <TinyBMS_CAN_ReadBatteryPackCurrent+0xa6>
				printf("Response from BMS [Error]\n");
 80017f2:	482f      	ldr	r0, [pc, #188]	; (80018b0 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 80017f4:	f005 ffba 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80017f8:	7d7b      	ldrb	r3, [r7, #21]
 80017fa:	4619      	mov	r1, r3
 80017fc:	7dbb      	ldrb	r3, [r7, #22]
 80017fe:	461a      	mov	r2, r3
 8001800:	482c      	ldr	r0, [pc, #176]	; (80018b4 <TinyBMS_CAN_ReadBatteryPackCurrent+0x140>)
 8001802:	f005 ff2d 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8001806:	7dbb      	ldrb	r3, [r7, #22]
 8001808:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				retval = error;
 800180c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001810:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8001814:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001818:	e03d      	b.n	8001896 <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_CURRENT)) {
 800181a:	7d3b      	ldrb	r3, [r7, #20]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d125      	bne.n	800186c <TinyBMS_CAN_ReadBatteryPackCurrent+0xf8>
 8001820:	7d7b      	ldrb	r3, [r7, #21]
 8001822:	2b15      	cmp	r3, #21
 8001824:	d122      	bne.n	800186c <TinyBMS_CAN_ReadBatteryPackCurrent+0xf8>
				printf("Response from BMS [OK]\n");
 8001826:	4824      	ldr	r0, [pc, #144]	; (80018b8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x144>)
 8001828:	f005 ffa0 	bl	800776c <puts>
				printf("CAN_TBMS_READ_PACK_CURRENT | CMD: 0x%02X\n", rx_msg[1]);
 800182c:	7d7b      	ldrb	r3, [r7, #21]
 800182e:	4619      	mov	r1, r3
 8001830:	4822      	ldr	r0, [pc, #136]	; (80018bc <TinyBMS_CAN_ReadBatteryPackCurrent+0x148>)
 8001832:	f005 ff15 	bl	8007660 <iprintf>
				uint32_t data = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 8001836:	7e7b      	ldrb	r3, [r7, #25]
 8001838:	061a      	lsls	r2, r3, #24
 800183a:	7e3b      	ldrb	r3, [r7, #24]
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	4313      	orrs	r3, r2
 8001846:	7dba      	ldrb	r2, [r7, #22]
 8001848:	4313      	orrs	r3, r2
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
				float packCurrent = data;
 800184c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001856:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Current: %f (A)\n", packCurrent);
 800185a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800185c:	f7fe fe94 	bl	8000588 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <TinyBMS_CAN_ReadBatteryPackCurrent+0x14c>)
 8001866:	f005 fefb 	bl	8007660 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_PACK_CURRENT)) {
 800186a:	e008      	b.n	800187e <TinyBMS_CAN_ReadBatteryPackCurrent+0x10a>

			} else {
				printf("Data Corruption\n");
 800186c:	4815      	ldr	r0, [pc, #84]	; (80018c4 <TinyBMS_CAN_ReadBatteryPackCurrent+0x150>)
 800186e:	f005 ff7d 	bl	800776c <puts>
				retval = CMD_FAILURE;
 8001872:	23ff      	movs	r3, #255	; 0xff
 8001874:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8001878:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800187c:	e00b      	b.n	8001896 <TinyBMS_CAN_ReadBatteryPackCurrent+0x122>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800187e:	2100      	movs	r1, #0
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x134>)
 8001882:	f002 fc40 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d190      	bne.n	80017ae <TinyBMS_CAN_ReadBatteryPackCurrent+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 800188c:	23aa      	movs	r3, #170	; 0xaa
 800188e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return retval;
 8001892:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001896:	4618      	mov	r0, r3
 8001898:	3748      	adds	r7, #72	; 0x48
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	0800b248 	.word	0x0800b248
 80018a4:	0800b2c0 	.word	0x0800b2c0
 80018a8:	20000374 	.word	0x20000374
 80018ac:	20000004 	.word	0x20000004
 80018b0:	0800af60 	.word	0x0800af60
 80018b4:	0800af7c 	.word	0x0800af7c
 80018b8:	08009d8c 	.word	0x08009d8c
 80018bc:	0800b26c 	.word	0x0800b26c
 80018c0:	0800b298 	.word	0x0800b298
 80018c4:	0800afd4 	.word	0x0800afd4

080018c8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint8_t TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(CAN_HandleTypeDef *hcan) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b090      	sub	sp, #64	; 0x40
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackMaxCellVoltage\n");
 80018d0:	4841      	ldr	r0, [pc, #260]	; (80019d8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x110>)
 80018d2:	f005 ff4b 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 80018d6:	23ff      	movs	r3, #255	; 0xff
 80018d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_MAX_CELL_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80018dc:	4a3f      	ldr	r2, [pc, #252]	; (80019dc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x114>)
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80018f0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	2000      	movs	r0, #0
 80018fc:	f001 fbc4 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001900:	e05a      	b.n	80019b8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf0>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	f107 021c 	add.w	r2, r7, #28
 800190a:	2100      	movs	r1, #0
 800190c:	4834      	ldr	r0, [pc, #208]	; (80019e0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 800190e:	f002 fae8 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x54>
			Error_Handler();
 8001918:	f001 fd1a 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800191c:	f240 4103 	movw	r1, #1027	; 0x403
 8001920:	482f      	ldr	r0, [pc, #188]	; (80019e0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8001922:	f002 fc18 	bl	8004156 <HAL_CAN_ActivateNotification>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x68>
			Error_Handler();
 800192c:	f001 fd10 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x11c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d13e      	bne.n	80019b8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf0>
 800193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	d13b      	bne.n	80019b8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf0>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001940:	7d3b      	ldrb	r3, [r7, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d113      	bne.n	800196e <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xa6>
				printf("Response from BMS [Error]\n");
 8001946:	4828      	ldr	r0, [pc, #160]	; (80019e8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x120>)
 8001948:	f005 ff10 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 800194c:	7d7b      	ldrb	r3, [r7, #21]
 800194e:	4619      	mov	r1, r3
 8001950:	7dbb      	ldrb	r3, [r7, #22]
 8001952:	461a      	mov	r2, r3
 8001954:	4825      	ldr	r0, [pc, #148]	; (80019ec <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x124>)
 8001956:	f005 fe83 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 800195a:	7dbb      	ldrb	r3, [r7, #22]
 800195c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				retval = error;
 8001960:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001964:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001968:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800196c:	e030      	b.n	80019d0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x108>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MAX_CELL_VOLTAGE)) {
 800196e:	7d3b      	ldrb	r3, [r7, #20]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d118      	bne.n	80019a6 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xde>
 8001974:	7d7b      	ldrb	r3, [r7, #21]
 8001976:	2b16      	cmp	r3, #22
 8001978:	d115      	bne.n	80019a6 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xde>
				printf("Response from BMS [OK]\n");
 800197a:	481d      	ldr	r0, [pc, #116]	; (80019f0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x128>)
 800197c:	f005 fef6 	bl	800776c <puts>
				printf("CAN_TBMS_READ_MAX_CELL_VOLTAGE | CMD: 0x%02X\n", rx_msg[1]);
 8001980:	7d7b      	ldrb	r3, [r7, #21]
 8001982:	4619      	mov	r1, r3
 8001984:	481b      	ldr	r0, [pc, #108]	; (80019f4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x12c>)
 8001986:	f005 fe6b 	bl	8007660 <iprintf>
				uint16_t maxCellVoltage = ((rx_msg[3] << 8) | (rx_msg[2]));
 800198a:	7dfb      	ldrb	r3, [r7, #23]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21a      	sxth	r2, r3
 8001990:	7dbb      	ldrb	r3, [r7, #22]
 8001992:	b21b      	sxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b21b      	sxth	r3, r3
 8001998:	87bb      	strh	r3, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Maximum Cell Voltage: %u (mV)\n", maxCellVoltage);
 800199a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800199c:	4619      	mov	r1, r3
 800199e:	4816      	ldr	r0, [pc, #88]	; (80019f8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x130>)
 80019a0:	f005 fe5e 	bl	8007660 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MAX_CELL_VOLTAGE)) {
 80019a4:	e008      	b.n	80019b8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf0>

			} else {
				printf("Data Corruption\n");
 80019a6:	4815      	ldr	r0, [pc, #84]	; (80019fc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x134>)
 80019a8:	f005 fee0 	bl	800776c <puts>
				retval = CMD_FAILURE;
 80019ac:	23ff      	movs	r3, #255	; 0xff
 80019ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80019b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019b6:	e00b      	b.n	80019d0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x108>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80019b8:	2100      	movs	r1, #0
 80019ba:	4809      	ldr	r0, [pc, #36]	; (80019e0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 80019bc:	f002 fba3 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d19d      	bne.n	8001902 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 80019c6:	23aa      	movs	r3, #170	; 0xaa
 80019c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 80019cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3740      	adds	r7, #64	; 0x40
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	0800b2c8 	.word	0x0800b2c8
 80019dc:	0800b35c 	.word	0x0800b35c
 80019e0:	20000374 	.word	0x20000374
 80019e4:	20000004 	.word	0x20000004
 80019e8:	0800af60 	.word	0x0800af60
 80019ec:	0800af7c 	.word	0x0800af7c
 80019f0:	08009d8c 	.word	0x08009d8c
 80019f4:	0800b2f4 	.word	0x0800b2f4
 80019f8:	0800b324 	.word	0x0800b324
 80019fc:	0800afd4 	.word	0x0800afd4

08001a00 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint8_t TinyBMS_CAN_ReadBatteryPackMinCellVoltage(CAN_HandleTypeDef *hcan) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b090      	sub	sp, #64	; 0x40
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackMinCellVoltage\n");
 8001a08:	4841      	ldr	r0, [pc, #260]	; (8001b10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x110>)
 8001a0a:	f005 feaf 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8001a0e:	23ff      	movs	r3, #255	; 0xff
 8001a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_MIN_CELL_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001a14:	4a3f      	ldr	r2, [pc, #252]	; (8001b14 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x114>)
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a1e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001a28:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	2000      	movs	r0, #0
 8001a34:	f001 fb28 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001a38:	e05a      	b.n	8001af0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf0>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	f107 021c 	add.w	r2, r7, #28
 8001a42:	2100      	movs	r1, #0
 8001a44:	4834      	ldr	r0, [pc, #208]	; (8001b18 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8001a46:	f002 fa4c 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x54>
			Error_Handler();
 8001a50:	f001 fc7e 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001a54:	f240 4103 	movw	r1, #1027	; 0x403
 8001a58:	482f      	ldr	r0, [pc, #188]	; (8001b18 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8001a5a:	f002 fb7c 	bl	8004156 <HAL_CAN_ActivateNotification>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x68>
			Error_Handler();
 8001a64:	f001 fc74 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x11c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d13e      	bne.n	8001af0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf0>
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13b      	bne.n	8001af0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf0>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001a78:	7d3b      	ldrb	r3, [r7, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d113      	bne.n	8001aa6 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xa6>
				printf("Response from BMS [Error]\n");
 8001a7e:	4828      	ldr	r0, [pc, #160]	; (8001b20 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x120>)
 8001a80:	f005 fe74 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001a84:	7d7b      	ldrb	r3, [r7, #21]
 8001a86:	4619      	mov	r1, r3
 8001a88:	7dbb      	ldrb	r3, [r7, #22]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4825      	ldr	r0, [pc, #148]	; (8001b24 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x124>)
 8001a8e:	f005 fde7 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8001a92:	7dbb      	ldrb	r3, [r7, #22]
 8001a94:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				retval = error;
 8001a98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001a9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001aa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001aa4:	e030      	b.n	8001b08 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x108>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MIN_CELL_VOLTAGE)) {
 8001aa6:	7d3b      	ldrb	r3, [r7, #20]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d118      	bne.n	8001ade <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xde>
 8001aac:	7d7b      	ldrb	r3, [r7, #21]
 8001aae:	2b17      	cmp	r3, #23
 8001ab0:	d115      	bne.n	8001ade <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xde>
				printf("Response from BMS [OK]\n");
 8001ab2:	481d      	ldr	r0, [pc, #116]	; (8001b28 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x128>)
 8001ab4:	f005 fe5a 	bl	800776c <puts>
				printf("CAN_TBMS_READ_MIN_CELL_VOLTAGE | CMD: 0x%02X\n", rx_msg[1]);
 8001ab8:	7d7b      	ldrb	r3, [r7, #21]
 8001aba:	4619      	mov	r1, r3
 8001abc:	481b      	ldr	r0, [pc, #108]	; (8001b2c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x12c>)
 8001abe:	f005 fdcf 	bl	8007660 <iprintf>
				uint16_t minCellVoltage = ((rx_msg[3] << 8) | (rx_msg[2]));
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	b21a      	sxth	r2, r3
 8001ac8:	7dbb      	ldrb	r3, [r7, #22]
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	87bb      	strh	r3, [r7, #60]	; 0x3c
				printf("Secondary Battery Pack Minimum Cell Voltage: %u (mV)\n", minCellVoltage);
 8001ad2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4816      	ldr	r0, [pc, #88]	; (8001b30 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x130>)
 8001ad8:	f005 fdc2 	bl	8007660 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_MIN_CELL_VOLTAGE)) {
 8001adc:	e008      	b.n	8001af0 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf0>

			} else {
				printf("Data Corruption\n");
 8001ade:	4815      	ldr	r0, [pc, #84]	; (8001b34 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x134>)
 8001ae0:	f005 fe44 	bl	800776c <puts>
				retval = CMD_FAILURE;
 8001ae4:	23ff      	movs	r3, #255	; 0xff
 8001ae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001aea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001aee:	e00b      	b.n	8001b08 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x108>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001af0:	2100      	movs	r1, #0
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8001af4:	f002 fb07 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d19d      	bne.n	8001a3a <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001afe:	23aa      	movs	r3, #170	; 0xaa
 8001b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8001b04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3740      	adds	r7, #64	; 0x40
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	0800b364 	.word	0x0800b364
 8001b14:	0800b3f8 	.word	0x0800b3f8
 8001b18:	20000374 	.word	0x20000374
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	0800af60 	.word	0x0800af60
 8001b24:	0800af7c 	.word	0x0800af7c
 8001b28:	08009d8c 	.word	0x08009d8c
 8001b2c:	0800b390 	.word	0x0800b390
 8001b30:	0800b3c0 	.word	0x0800b3c0
 8001b34:	0800afd4 	.word	0x0800afd4

08001b38 <TinyBMS_CAN_ReadOnlineStatus>:
 * 						 	        [UINT16]
 * 						   0x91 - Charging [INFO], 0x92 - Fully Charged [INFO]
 * 						   0x93 - Discharging [INFO], 0x94 - Regeneration [INFO]
 * 						   0x97 - Idle [INFO], 0x9B - Fault [ERROR]
 */
uint8_t TinyBMS_CAN_ReadOnlineStatus(CAN_HandleTypeDef *hcan) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b090      	sub	sp, #64	; 0x40
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadOnlineStatus\n");
 8001b40:	4865      	ldr	r0, [pc, #404]	; (8001cd8 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8001b42:	f005 fe13 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8001b46:	23ff      	movs	r3, #255	; 0xff
 8001b48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_ONLINE_STATUS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001b4c:	4a63      	ldr	r2, [pc, #396]	; (8001cdc <TinyBMS_CAN_ReadOnlineStatus+0x1a4>)
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b56:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001b60:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f001 fa8c 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001b70:	e0a1      	b.n	8001cb6 <TinyBMS_CAN_ReadOnlineStatus+0x17e>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	f107 021c 	add.w	r2, r7, #28
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4858      	ldr	r0, [pc, #352]	; (8001ce0 <TinyBMS_CAN_ReadOnlineStatus+0x1a8>)
 8001b7e:	f002 f9b0 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <TinyBMS_CAN_ReadOnlineStatus+0x54>
			Error_Handler();
 8001b88:	f001 fbe2 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001b8c:	f240 4103 	movw	r1, #1027	; 0x403
 8001b90:	4853      	ldr	r0, [pc, #332]	; (8001ce0 <TinyBMS_CAN_ReadOnlineStatus+0x1a8>)
 8001b92:	f002 fae0 	bl	8004156 <HAL_CAN_ActivateNotification>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <TinyBMS_CAN_ReadOnlineStatus+0x68>
			Error_Handler();
 8001b9c:	f001 fbd8 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <TinyBMS_CAN_ReadOnlineStatus+0x1ac>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	f040 8085 	bne.w	8001cb6 <TinyBMS_CAN_ReadOnlineStatus+0x17e>
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8081 	bne.w	8001cb6 <TinyBMS_CAN_ReadOnlineStatus+0x17e>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001bb4:	7d3b      	ldrb	r3, [r7, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d113      	bne.n	8001be2 <TinyBMS_CAN_ReadOnlineStatus+0xaa>
				printf("Response from BMS [Error]\n");
 8001bba:	484b      	ldr	r0, [pc, #300]	; (8001ce8 <TinyBMS_CAN_ReadOnlineStatus+0x1b0>)
 8001bbc:	f005 fdd6 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001bc0:	7d7b      	ldrb	r3, [r7, #21]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	7dbb      	ldrb	r3, [r7, #22]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4848      	ldr	r0, [pc, #288]	; (8001cec <TinyBMS_CAN_ReadOnlineStatus+0x1b4>)
 8001bca:	f005 fd49 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8001bce:	7dbb      	ldrb	r3, [r7, #22]
 8001bd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				retval = error;
 8001bd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001be0:	e076      	b.n	8001cd0 <TinyBMS_CAN_ReadOnlineStatus+0x198>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ONLINE_STATUS)) {
 8001be2:	7d3b      	ldrb	r3, [r7, #20]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d15d      	bne.n	8001ca4 <TinyBMS_CAN_ReadOnlineStatus+0x16c>
 8001be8:	7d7b      	ldrb	r3, [r7, #21]
 8001bea:	2b18      	cmp	r3, #24
 8001bec:	d15a      	bne.n	8001ca4 <TinyBMS_CAN_ReadOnlineStatus+0x16c>
				printf("Response from BMS [OK]\n");
 8001bee:	4840      	ldr	r0, [pc, #256]	; (8001cf0 <TinyBMS_CAN_ReadOnlineStatus+0x1b8>)
 8001bf0:	f005 fdbc 	bl	800776c <puts>
				printf("CAN_TBMS_READ_ONLINE_STATUS | CMD: 0x%02X\n", rx_msg[1]);
 8001bf4:	7d7b      	ldrb	r3, [r7, #21]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	483e      	ldr	r0, [pc, #248]	; (8001cf4 <TinyBMS_CAN_ReadOnlineStatus+0x1bc>)
 8001bfa:	f005 fd31 	bl	8007660 <iprintf>
				uint16_t onlineStatus = ((rx_msg[3] << 8) | (rx_msg[2]));
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	7dbb      	ldrb	r3, [r7, #22]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	87bb      	strh	r3, [r7, #60]	; 0x3c

				switch(onlineStatus) {
 8001c0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c10:	3b91      	subs	r3, #145	; 0x91
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	d83c      	bhi.n	8001c90 <TinyBMS_CAN_ReadOnlineStatus+0x158>
 8001c16:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <TinyBMS_CAN_ReadOnlineStatus+0xe4>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c49 	.word	0x08001c49
 8001c20:	08001c55 	.word	0x08001c55
 8001c24:	08001c61 	.word	0x08001c61
 8001c28:	08001c91 	.word	0x08001c91
 8001c2c:	08001c91 	.word	0x08001c91
 8001c30:	08001c6d 	.word	0x08001c6d
 8001c34:	08001c79 	.word	0x08001c79
 8001c38:	08001c91 	.word	0x08001c91
 8001c3c:	08001c91 	.word	0x08001c91
 8001c40:	08001c91 	.word	0x08001c91
 8001c44:	08001c85 	.word	0x08001c85
				case TINYBMS_STATUS_CHARGING:
					printf("TinyBMS Online Status: 0x%02X - Charging [INFO]\n", onlineStatus);
 8001c48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	482a      	ldr	r0, [pc, #168]	; (8001cf8 <TinyBMS_CAN_ReadOnlineStatus+0x1c0>)
 8001c4e:	f005 fd07 	bl	8007660 <iprintf>
					break;
 8001c52:	e026      	b.n	8001ca2 <TinyBMS_CAN_ReadOnlineStatus+0x16a>
				case TINYBMS_STATUS_FULLYCHARGED:
					printf("TinyBMS Online Status: 0x%02X - Fully Charged [INFO]\n", onlineStatus);
 8001c54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4828      	ldr	r0, [pc, #160]	; (8001cfc <TinyBMS_CAN_ReadOnlineStatus+0x1c4>)
 8001c5a:	f005 fd01 	bl	8007660 <iprintf>
					break;
 8001c5e:	e020      	b.n	8001ca2 <TinyBMS_CAN_ReadOnlineStatus+0x16a>
				case TINYBMS_STATUS_DISCHARGING:
					printf("TinyBMS Online Status: 0x%02X - Discharging [INFO]\n", onlineStatus);
 8001c60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c62:	4619      	mov	r1, r3
 8001c64:	4826      	ldr	r0, [pc, #152]	; (8001d00 <TinyBMS_CAN_ReadOnlineStatus+0x1c8>)
 8001c66:	f005 fcfb 	bl	8007660 <iprintf>
					break;
 8001c6a:	e01a      	b.n	8001ca2 <TinyBMS_CAN_ReadOnlineStatus+0x16a>
				case TINYBMS_STATUS_REGENERATION:
					printf("TinyBMS Online Status: 0x%02X - Regeneration [INFO]\n", onlineStatus);
 8001c6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4824      	ldr	r0, [pc, #144]	; (8001d04 <TinyBMS_CAN_ReadOnlineStatus+0x1cc>)
 8001c72:	f005 fcf5 	bl	8007660 <iprintf>
					break;
 8001c76:	e014      	b.n	8001ca2 <TinyBMS_CAN_ReadOnlineStatus+0x16a>
				case TINYBMS_STATUS_IDLE:
					printf("TinyBMS Online Status: 0x%02X - Idle [INFO]\n", onlineStatus);
 8001c78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4822      	ldr	r0, [pc, #136]	; (8001d08 <TinyBMS_CAN_ReadOnlineStatus+0x1d0>)
 8001c7e:	f005 fcef 	bl	8007660 <iprintf>
					break;
 8001c82:	e00e      	b.n	8001ca2 <TinyBMS_CAN_ReadOnlineStatus+0x16a>
				case TINYBMS_STATUS_FAULT:
					printf("TinyBMS Online Status: 0x%02X - Fault [Error]\n", onlineStatus);
 8001c84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c86:	4619      	mov	r1, r3
 8001c88:	4820      	ldr	r0, [pc, #128]	; (8001d0c <TinyBMS_CAN_ReadOnlineStatus+0x1d4>)
 8001c8a:	f005 fce9 	bl	8007660 <iprintf>
					break;
 8001c8e:	e008      	b.n	8001ca2 <TinyBMS_CAN_ReadOnlineStatus+0x16a>
				default:
					printf("Invalid TinyBMS OnlineStatus received\n");
 8001c90:	481f      	ldr	r0, [pc, #124]	; (8001d10 <TinyBMS_CAN_ReadOnlineStatus+0x1d8>)
 8001c92:	f005 fd6b 	bl	800776c <puts>
					retval = CMD_FAILURE;
 8001c96:	23ff      	movs	r3, #255	; 0xff
 8001c98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					return retval;
 8001c9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ca0:	e016      	b.n	8001cd0 <TinyBMS_CAN_ReadOnlineStatus+0x198>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_ONLINE_STATUS)) {
 8001ca2:	e008      	b.n	8001cb6 <TinyBMS_CAN_ReadOnlineStatus+0x17e>
				}

			} else {
				printf("Data Corruption\n");
 8001ca4:	481b      	ldr	r0, [pc, #108]	; (8001d14 <TinyBMS_CAN_ReadOnlineStatus+0x1dc>)
 8001ca6:	f005 fd61 	bl	800776c <puts>
				retval = CMD_FAILURE;
 8001caa:	23ff      	movs	r3, #255	; 0xff
 8001cac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cb4:	e00c      	b.n	8001cd0 <TinyBMS_CAN_ReadOnlineStatus+0x198>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <TinyBMS_CAN_ReadOnlineStatus+0x1a8>)
 8001cba:	f002 fa24 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f af56 	bne.w	8001b72 <TinyBMS_CAN_ReadOnlineStatus+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001cc6:	23aa      	movs	r3, #170	; 0xaa
 8001cc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8001ccc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3740      	adds	r7, #64	; 0x40
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0800b400 	.word	0x0800b400
 8001cdc:	0800b5ac 	.word	0x0800b5ac
 8001ce0:	20000374 	.word	0x20000374
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	0800af60 	.word	0x0800af60
 8001cec:	0800af7c 	.word	0x0800af7c
 8001cf0:	08009d8c 	.word	0x08009d8c
 8001cf4:	0800b420 	.word	0x0800b420
 8001cf8:	0800b44c 	.word	0x0800b44c
 8001cfc:	0800b480 	.word	0x0800b480
 8001d00:	0800b4b8 	.word	0x0800b4b8
 8001d04:	0800b4ec 	.word	0x0800b4ec
 8001d08:	0800b524 	.word	0x0800b524
 8001d0c:	0800b554 	.word	0x0800b554
 8001d10:	0800b584 	.word	0x0800b584
 8001d14:	0800afd4 	.word	0x0800afd4

08001d18 <TinyBMS_CAN_ReadLifetimeCounter>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint8_t TinyBMS_CAN_ReadLifetimeCounter(CAN_HandleTypeDef *hcan) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b090      	sub	sp, #64	; 0x40
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadLifetimeCounter\n");
 8001d20:	4842      	ldr	r0, [pc, #264]	; (8001e2c <TinyBMS_CAN_ReadLifetimeCounter+0x114>)
 8001d22:	f005 fd23 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8001d26:	23ff      	movs	r3, #255	; 0xff
 8001d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_LIFETIME_COUNTER, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001d2c:	4a40      	ldr	r2, [pc, #256]	; (8001e30 <TinyBMS_CAN_ReadLifetimeCounter+0x118>)
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d36:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001d40:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4619      	mov	r1, r3
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f001 f99c 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001d50:	e05c      	b.n	8001e0c <TinyBMS_CAN_ReadLifetimeCounter+0xf4>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	f107 0218 	add.w	r2, r7, #24
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4835      	ldr	r0, [pc, #212]	; (8001e34 <TinyBMS_CAN_ReadLifetimeCounter+0x11c>)
 8001d5e:	f002 f8c0 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <TinyBMS_CAN_ReadLifetimeCounter+0x54>
			Error_Handler();
 8001d68:	f001 faf2 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001d6c:	f240 4103 	movw	r1, #1027	; 0x403
 8001d70:	4830      	ldr	r0, [pc, #192]	; (8001e34 <TinyBMS_CAN_ReadLifetimeCounter+0x11c>)
 8001d72:	f002 f9f0 	bl	8004156 <HAL_CAN_ActivateNotification>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <TinyBMS_CAN_ReadLifetimeCounter+0x68>
			Error_Handler();
 8001d7c:	f001 fae8 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d140      	bne.n	8001e0c <TinyBMS_CAN_ReadLifetimeCounter+0xf4>
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d13d      	bne.n	8001e0c <TinyBMS_CAN_ReadLifetimeCounter+0xf4>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001d90:	7c3b      	ldrb	r3, [r7, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d113      	bne.n	8001dbe <TinyBMS_CAN_ReadLifetimeCounter+0xa6>
				printf("Response from BMS [Error]\n");
 8001d96:	4829      	ldr	r0, [pc, #164]	; (8001e3c <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 8001d98:	f005 fce8 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001d9c:	7c7b      	ldrb	r3, [r7, #17]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	7cbb      	ldrb	r3, [r7, #18]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4826      	ldr	r0, [pc, #152]	; (8001e40 <TinyBMS_CAN_ReadLifetimeCounter+0x128>)
 8001da6:	f005 fc5b 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8001daa:	7cbb      	ldrb	r3, [r7, #18]
 8001dac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				retval = error;
 8001db0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001db4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dbc:	e032      	b.n	8001e24 <TinyBMS_CAN_ReadLifetimeCounter+0x10c>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_LIFETIME_COUNTER)) {
 8001dbe:	7c3b      	ldrb	r3, [r7, #16]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d11a      	bne.n	8001dfa <TinyBMS_CAN_ReadLifetimeCounter+0xe2>
 8001dc4:	7c7b      	ldrb	r3, [r7, #17]
 8001dc6:	2b19      	cmp	r3, #25
 8001dc8:	d117      	bne.n	8001dfa <TinyBMS_CAN_ReadLifetimeCounter+0xe2>
				printf("Response from BMS [OK]\n");
 8001dca:	481e      	ldr	r0, [pc, #120]	; (8001e44 <TinyBMS_CAN_ReadLifetimeCounter+0x12c>)
 8001dcc:	f005 fcce 	bl	800776c <puts>
				printf("CAN_TBMS_READ_LIFETIME_COUNTER | CMD: 0x%02X\n", rx_msg[1]);
 8001dd0:	7c7b      	ldrb	r3, [r7, #17]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <TinyBMS_CAN_ReadLifetimeCounter+0x130>)
 8001dd6:	f005 fc43 	bl	8007660 <iprintf>
				uint32_t bms_lifetime = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 8001dda:	7d7b      	ldrb	r3, [r7, #21]
 8001ddc:	061a      	lsls	r2, r3, #24
 8001dde:	7d3b      	ldrb	r3, [r7, #20]
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	4313      	orrs	r3, r2
 8001dea:	7cba      	ldrb	r2, [r7, #18]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
				printf("TinyBMS Lifetime Counter: %lu (s)\n", bms_lifetime);
 8001df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001df2:	4816      	ldr	r0, [pc, #88]	; (8001e4c <TinyBMS_CAN_ReadLifetimeCounter+0x134>)
 8001df4:	f005 fc34 	bl	8007660 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_LIFETIME_COUNTER)) {
 8001df8:	e008      	b.n	8001e0c <TinyBMS_CAN_ReadLifetimeCounter+0xf4>

			} else {
				printf("Data Corruption\n");
 8001dfa:	4815      	ldr	r0, [pc, #84]	; (8001e50 <TinyBMS_CAN_ReadLifetimeCounter+0x138>)
 8001dfc:	f005 fcb6 	bl	800776c <puts>
				retval = CMD_FAILURE;
 8001e00:	23ff      	movs	r3, #255	; 0xff
 8001e02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001e06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e0a:	e00b      	b.n	8001e24 <TinyBMS_CAN_ReadLifetimeCounter+0x10c>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <TinyBMS_CAN_ReadLifetimeCounter+0x11c>)
 8001e10:	f002 f979 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d19b      	bne.n	8001d52 <TinyBMS_CAN_ReadLifetimeCounter+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001e1a:	23aa      	movs	r3, #170	; 0xaa
 8001e1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8001e20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3740      	adds	r7, #64	; 0x40
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	0800b5b4 	.word	0x0800b5b4
 8001e30:	0800b604 	.word	0x0800b604
 8001e34:	20000374 	.word	0x20000374
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	0800af60 	.word	0x0800af60
 8001e40:	0800af7c 	.word	0x0800af7c
 8001e44:	08009d8c 	.word	0x08009d8c
 8001e48:	0800b5d4 	.word	0x0800b5d4
 8001e4c:	0800a7d4 	.word	0x0800a7d4
 8001e50:	0800afd4 	.word	0x0800afd4

08001e54 <TinyBMS_CAN_ReadEstimatedSOCValue>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint8_t TinyBMS_CAN_ReadEstimatedSOCValue(CAN_HandleTypeDef *hcan) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b090      	sub	sp, #64	; 0x40
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadEstimatedSOCValue\n");
 8001e5c:	4842      	ldr	r0, [pc, #264]	; (8001f68 <TinyBMS_CAN_ReadEstimatedSOCValue+0x114>)
 8001e5e:	f005 fc85 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8001e62:	23ff      	movs	r3, #255	; 0xff
 8001e64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_EST_SOC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001e68:	4a40      	ldr	r2, [pc, #256]	; (8001f6c <TinyBMS_CAN_ReadEstimatedSOCValue+0x118>)
 8001e6a:	f107 0308 	add.w	r3, r7, #8
 8001e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e72:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001e7c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001e80:	f107 0308 	add.w	r3, r7, #8
 8001e84:	4619      	mov	r1, r3
 8001e86:	2000      	movs	r0, #0
 8001e88:	f001 f8fe 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001e8c:	e05c      	b.n	8001f48 <TinyBMS_CAN_ReadEstimatedSOCValue+0xf4>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	f107 0218 	add.w	r2, r7, #24
 8001e96:	2100      	movs	r1, #0
 8001e98:	4835      	ldr	r0, [pc, #212]	; (8001f70 <TinyBMS_CAN_ReadEstimatedSOCValue+0x11c>)
 8001e9a:	f002 f822 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <TinyBMS_CAN_ReadEstimatedSOCValue+0x54>
			Error_Handler();
 8001ea4:	f001 fa54 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001ea8:	f240 4103 	movw	r1, #1027	; 0x403
 8001eac:	4830      	ldr	r0, [pc, #192]	; (8001f70 <TinyBMS_CAN_ReadEstimatedSOCValue+0x11c>)
 8001eae:	f002 f952 	bl	8004156 <HAL_CAN_ActivateNotification>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <TinyBMS_CAN_ReadEstimatedSOCValue+0x68>
			Error_Handler();
 8001eb8:	f001 fa4a 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d140      	bne.n	8001f48 <TinyBMS_CAN_ReadEstimatedSOCValue+0xf4>
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d13d      	bne.n	8001f48 <TinyBMS_CAN_ReadEstimatedSOCValue+0xf4>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8001ecc:	7c3b      	ldrb	r3, [r7, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d113      	bne.n	8001efa <TinyBMS_CAN_ReadEstimatedSOCValue+0xa6>
				printf("Response from BMS [Error]\n");
 8001ed2:	4829      	ldr	r0, [pc, #164]	; (8001f78 <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8001ed4:	f005 fc4a 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8001ed8:	7c7b      	ldrb	r3, [r7, #17]
 8001eda:	4619      	mov	r1, r3
 8001edc:	7cbb      	ldrb	r3, [r7, #18]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4826      	ldr	r0, [pc, #152]	; (8001f7c <TinyBMS_CAN_ReadEstimatedSOCValue+0x128>)
 8001ee2:	f005 fbbd 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8001ee6:	7cbb      	ldrb	r3, [r7, #18]
 8001ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				retval = error;
 8001eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ef0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001ef4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ef8:	e032      	b.n	8001f60 <TinyBMS_CAN_ReadEstimatedSOCValue+0x10c>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_EST_SOC)) {
 8001efa:	7c3b      	ldrb	r3, [r7, #16]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d11a      	bne.n	8001f36 <TinyBMS_CAN_ReadEstimatedSOCValue+0xe2>
 8001f00:	7c7b      	ldrb	r3, [r7, #17]
 8001f02:	2b1a      	cmp	r3, #26
 8001f04:	d117      	bne.n	8001f36 <TinyBMS_CAN_ReadEstimatedSOCValue+0xe2>
				printf("Response from BMS [OK]\n");
 8001f06:	481e      	ldr	r0, [pc, #120]	; (8001f80 <TinyBMS_CAN_ReadEstimatedSOCValue+0x12c>)
 8001f08:	f005 fc30 	bl	800776c <puts>
				printf("CAN_TBMS_READ_EST_SOC | CMD: 0x%02X\n", rx_msg[1]);
 8001f0c:	7c7b      	ldrb	r3, [r7, #17]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481c      	ldr	r0, [pc, #112]	; (8001f84 <TinyBMS_CAN_ReadEstimatedSOCValue+0x130>)
 8001f12:	f005 fba5 	bl	8007660 <iprintf>
				uint32_t est_soc = ((rx_msg[5] << 24) | (rx_msg[4] << 16) | (rx_msg[3] << 8) | (rx_msg[2]));
 8001f16:	7d7b      	ldrb	r3, [r7, #21]
 8001f18:	061a      	lsls	r2, r3, #24
 8001f1a:	7d3b      	ldrb	r3, [r7, #20]
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	4313      	orrs	r3, r2
 8001f26:	7cba      	ldrb	r2, [r7, #18]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
				printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\n", est_soc);
 8001f2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f2e:	4816      	ldr	r0, [pc, #88]	; (8001f88 <TinyBMS_CAN_ReadEstimatedSOCValue+0x134>)
 8001f30:	f005 fb96 	bl	8007660 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_EST_SOC)) {
 8001f34:	e008      	b.n	8001f48 <TinyBMS_CAN_ReadEstimatedSOCValue+0xf4>

			} else {
				printf("Data Corruption\n");
 8001f36:	4815      	ldr	r0, [pc, #84]	; (8001f8c <TinyBMS_CAN_ReadEstimatedSOCValue+0x138>)
 8001f38:	f005 fc18 	bl	800776c <puts>
				retval = CMD_FAILURE;
 8001f3c:	23ff      	movs	r3, #255	; 0xff
 8001f3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8001f42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f46:	e00b      	b.n	8001f60 <TinyBMS_CAN_ReadEstimatedSOCValue+0x10c>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4809      	ldr	r0, [pc, #36]	; (8001f70 <TinyBMS_CAN_ReadEstimatedSOCValue+0x11c>)
 8001f4c:	f002 f8db 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d19b      	bne.n	8001e8e <TinyBMS_CAN_ReadEstimatedSOCValue+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 8001f56:	23aa      	movs	r3, #170	; 0xaa
 8001f58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 8001f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3740      	adds	r7, #64	; 0x40
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	0800b60c 	.word	0x0800b60c
 8001f6c:	0800b698 	.word	0x0800b698
 8001f70:	20000374 	.word	0x20000374
 8001f74:	20000004 	.word	0x20000004
 8001f78:	0800af60 	.word	0x0800af60
 8001f7c:	0800af7c 	.word	0x0800af7c
 8001f80:	08009d8c 	.word	0x08009d8c
 8001f84:	0800b630 	.word	0x0800b630
 8001f88:	0800b658 	.word	0x0800b658
 8001f8c:	0800afd4 	.word	0x0800afd4

08001f90 <TinyBMS_CAN_ReadDeviceTemperatures>:
 * 						 	      [INT16]				   [INT16] 				  [INT16]
 * 						  	(Reg 48) DATA1 - TinyBMS Internal Temperature
 * 						  	(Reg 42) DATA2 - External Temp Sensor #1 (value of -327689 if NC)
 * 						  	(Reg 43) DATA3 - External Temp Sensor #2 (value of -327689 if NC)
 */
uint8_t TinyBMS_CAN_ReadDeviceTemperatures(CAN_HandleTypeDef *hcan) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b090      	sub	sp, #64	; 0x40
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadDeviceTemperatures\n");
 8001f98:	486c      	ldr	r0, [pc, #432]	; (800214c <TinyBMS_CAN_ReadDeviceTemperatures+0x1bc>)
 8001f9a:	f005 fbe7 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8001f9e:	23ff      	movs	r3, #255	; 0xff
 8001fa0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_TEMPS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001fb0:	4a67      	ldr	r2, [pc, #412]	; (8002150 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c0>)
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8001fc4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	4619      	mov	r1, r3
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f001 f85a 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8001fd4:	e0a8      	b.n	8002128 <TinyBMS_CAN_ReadDeviceTemperatures+0x198>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	f107 0218 	add.w	r2, r7, #24
 8001fde:	2100      	movs	r1, #0
 8001fe0:	485c      	ldr	r0, [pc, #368]	; (8002154 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c4>)
 8001fe2:	f001 ff7e 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <TinyBMS_CAN_ReadDeviceTemperatures+0x60>
			Error_Handler();
 8001fec:	f001 f9b0 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8001ff0:	f240 4103 	movw	r1, #1027	; 0x403
 8001ff4:	4857      	ldr	r0, [pc, #348]	; (8002154 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c4>)
 8001ff6:	f002 f8ae 	bl	8004156 <HAL_CAN_ActivateNotification>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <TinyBMS_CAN_ReadDeviceTemperatures+0x74>
			Error_Handler();
 8002000:	f001 f9a6 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4b54      	ldr	r3, [pc, #336]	; (8002158 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	f040 808c 	bne.w	8002128 <TinyBMS_CAN_ReadDeviceTemperatures+0x198>
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	f040 8088 	bne.w	8002128 <TinyBMS_CAN_ReadDeviceTemperatures+0x198>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8002018:	7c3b      	ldrb	r3, [r7, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d113      	bne.n	8002046 <TinyBMS_CAN_ReadDeviceTemperatures+0xb6>
				printf("Response from BMS [Error]\n");
 800201e:	484f      	ldr	r0, [pc, #316]	; (800215c <TinyBMS_CAN_ReadDeviceTemperatures+0x1cc>)
 8002020:	f005 fba4 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8002024:	7c7b      	ldrb	r3, [r7, #17]
 8002026:	4619      	mov	r1, r3
 8002028:	7cbb      	ldrb	r3, [r7, #18]
 800202a:	461a      	mov	r2, r3
 800202c:	484c      	ldr	r0, [pc, #304]	; (8002160 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d0>)
 800202e:	f005 fb17 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8002032:	7cbb      	ldrb	r3, [r7, #18]
 8002034:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				retval = error;
 8002038:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800203c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8002040:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002044:	e07d      	b.n	8002142 <TinyBMS_CAN_ReadDeviceTemperatures+0x1b2>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_TEMPS)) {
 8002046:	7c3b      	ldrb	r3, [r7, #16]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d164      	bne.n	8002116 <TinyBMS_CAN_ReadDeviceTemperatures+0x186>
 800204c:	7c7b      	ldrb	r3, [r7, #17]
 800204e:	2b1b      	cmp	r3, #27
 8002050:	d161      	bne.n	8002116 <TinyBMS_CAN_ReadDeviceTemperatures+0x186>
				if(msg_count == 1) {
 8002052:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <TinyBMS_CAN_ReadDeviceTemperatures+0xda>
					printf("Response from BMS [OK]\n");
 800205a:	4842      	ldr	r0, [pc, #264]	; (8002164 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 800205c:	f005 fb86 	bl	800776c <puts>
					printf("CAN_TBMS_READ_TEMPS | CMD: 0x%02X\n", rx_msg[1]);
 8002060:	7c7b      	ldrb	r3, [r7, #17]
 8002062:	4619      	mov	r1, r3
 8002064:	4840      	ldr	r0, [pc, #256]	; (8002168 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d8>)
 8002066:	f005 fafb 	bl	8007660 <iprintf>
				}
				pl = rx_msg[2];
 800206a:	7cbb      	ldrb	r3, [r7, #18]
 800206c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//MSG1
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 8002070:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002074:	2b02      	cmp	r3, #2
 8002076:	d115      	bne.n	80020a4 <TinyBMS_CAN_ReadDeviceTemperatures+0x114>
 8002078:	7d7b      	ldrb	r3, [r7, #21]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d112      	bne.n	80020a4 <TinyBMS_CAN_ReadDeviceTemperatures+0x114>
					int16_t temp1 = ((rx_msg[4] << 8) | (rx_msg[3]));
 800207e:	7d3b      	ldrb	r3, [r7, #20]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21a      	sxth	r2, r3
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("TinyBMS   Internal Temp: %d (°C)\n", temp1);
 800208c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8002090:	4619      	mov	r1, r3
 8002092:	4836      	ldr	r0, [pc, #216]	; (800216c <TinyBMS_CAN_ReadDeviceTemperatures+0x1dc>)
 8002094:	f005 fae4 	bl	8007660 <iprintf>
					msg_count++;
 8002098:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800209c:	3301      	adds	r3, #1
 800209e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 80020a2:	e037      	b.n	8002114 <TinyBMS_CAN_ReadDeviceTemperatures+0x184>
				//MSG2
				} else if((pl == 2) && (rx_msg[5] == 0x01)) {
 80020a4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d115      	bne.n	80020d8 <TinyBMS_CAN_ReadDeviceTemperatures+0x148>
 80020ac:	7d7b      	ldrb	r3, [r7, #21]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d112      	bne.n	80020d8 <TinyBMS_CAN_ReadDeviceTemperatures+0x148>
					int16_t temp2 = ((rx_msg[4] << 8) | (rx_msg[3]));
 80020b2:	7d3b      	ldrb	r3, [r7, #20]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	873b      	strh	r3, [r7, #56]	; 0x38
					printf("TinyBMS External Temp 1: %d (°C)\n", temp2);
 80020c0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80020c4:	4619      	mov	r1, r3
 80020c6:	482a      	ldr	r0, [pc, #168]	; (8002170 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e0>)
 80020c8:	f005 faca 	bl	8007660 <iprintf>
					msg_count++;
 80020cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020d0:	3301      	adds	r3, #1
 80020d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				} else if((pl == 2) && (rx_msg[5] == 0x01)) {
 80020d6:	e01d      	b.n	8002114 <TinyBMS_CAN_ReadDeviceTemperatures+0x184>
				//MSG3
				} else if((pl == 2) && (rx_msg[5] == 0x02)) {
 80020d8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d110      	bne.n	8002102 <TinyBMS_CAN_ReadDeviceTemperatures+0x172>
 80020e0:	7d7b      	ldrb	r3, [r7, #21]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d10d      	bne.n	8002102 <TinyBMS_CAN_ReadDeviceTemperatures+0x172>
					int16_t temp3 = ((rx_msg[4] << 8) | (rx_msg[3]));
 80020e6:	7d3b      	ldrb	r3, [r7, #20]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	4313      	orrs	r3, r2
 80020f2:	86fb      	strh	r3, [r7, #54]	; 0x36
					printf("TinyBMS External Temp 2: %d (°C)\n", temp3);
 80020f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80020f8:	4619      	mov	r1, r3
 80020fa:	481e      	ldr	r0, [pc, #120]	; (8002174 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e4>)
 80020fc:	f005 fab0 	bl	8007660 <iprintf>
				} else if((pl == 2) && (rx_msg[5] == 0x02)) {
 8002100:	e008      	b.n	8002114 <TinyBMS_CAN_ReadDeviceTemperatures+0x184>
				} else {
					printf("Data Corruption\n");
 8002102:	481d      	ldr	r0, [pc, #116]	; (8002178 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e8>)
 8002104:	f005 fb32 	bl	800776c <puts>
					retval = CMD_FAILURE;
 8002108:	23ff      	movs	r3, #255	; 0xff
 800210a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 800210e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002112:	e016      	b.n	8002142 <TinyBMS_CAN_ReadDeviceTemperatures+0x1b2>
				if((pl == 2) && (rx_msg[5] == 0x00)) {
 8002114:	e008      	b.n	8002128 <TinyBMS_CAN_ReadDeviceTemperatures+0x198>
				}

			} else {
				printf("Data Corruption\n");
 8002116:	4818      	ldr	r0, [pc, #96]	; (8002178 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e8>)
 8002118:	f005 fb28 	bl	800776c <puts>
				retval = CMD_FAILURE;
 800211c:	23ff      	movs	r3, #255	; 0xff
 800211e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 8002122:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002126:	e00c      	b.n	8002142 <TinyBMS_CAN_ReadDeviceTemperatures+0x1b2>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002128:	2100      	movs	r1, #0
 800212a:	480a      	ldr	r0, [pc, #40]	; (8002154 <TinyBMS_CAN_ReadDeviceTemperatures+0x1c4>)
 800212c:	f001 ffeb 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f47f af4f 	bne.w	8001fd6 <TinyBMS_CAN_ReadDeviceTemperatures+0x46>
			}
		}
	}
	retval = CMD_SUCCESS;
 8002138:	23aa      	movs	r3, #170	; 0xaa
 800213a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 800213e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8002142:	4618      	mov	r0, r3
 8002144:	3740      	adds	r7, #64	; 0x40
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	0800b6a0 	.word	0x0800b6a0
 8002150:	0800b754 	.word	0x0800b754
 8002154:	20000374 	.word	0x20000374
 8002158:	20000004 	.word	0x20000004
 800215c:	0800af60 	.word	0x0800af60
 8002160:	0800af7c 	.word	0x0800af7c
 8002164:	08009d8c 	.word	0x08009d8c
 8002168:	0800b6c4 	.word	0x0800b6c4
 800216c:	0800b6e8 	.word	0x0800b6e8
 8002170:	0800b70c 	.word	0x0800b70c
 8002174:	0800b730 	.word	0x0800b730
 8002178:	0800afd4 	.word	0x0800afd4

0800217c <TinyBMS_CAN_ReadBatteryPackCellVoltages>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte n*2+2    Byte n*2+3 		Byte n*2+4 	Byte n*2+5
 * 						 	  DATAn:LSB   	DATAn:MSB   	CRC:LSB 	CRC:MSB
 * 						 	       	 [UINT16]
 */
uint8_t TinyBMS_CAN_ReadBatteryPackCellVoltages(CAN_HandleTypeDef *hcan) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b090      	sub	sp, #64	; 0x40
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackCellVoltages\n");
 8002184:	4857      	ldr	r0, [pc, #348]	; (80022e4 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x168>)
 8002186:	f005 faf1 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 800218a:	23ff      	movs	r3, #255	; 0xff
 800218c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002196:	2300      	movs	r3, #0
 8002198:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t cellVoltage = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	877b      	strh	r3, [r7, #58]	; 0x3a

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_CELL_VOLTAGES, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80021a0:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x16c>)
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021aa:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80021b4:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	4619      	mov	r1, r3
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 ff62 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80021c4:	e07c      	b.n	80022c0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x144>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	f107 021c 	add.w	r2, r7, #28
 80021ce:	2100      	movs	r1, #0
 80021d0:	4846      	ldr	r0, [pc, #280]	; (80022ec <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x170>)
 80021d2:	f001 fe86 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x64>
			Error_Handler();
 80021dc:	f001 f8b8 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80021e0:	f240 4103 	movw	r1, #1027	; 0x403
 80021e4:	4841      	ldr	r0, [pc, #260]	; (80022ec <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x170>)
 80021e6:	f001 ffb6 	bl	8004156 <HAL_CAN_ActivateNotification>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x78>
			Error_Handler();
 80021f0:	f001 f8ae 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d160      	bne.n	80022c0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x144>
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d15d      	bne.n	80022c0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x144>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8002204:	7d3b      	ldrb	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0xb6>
				printf("Response from BMS [Error]\n");
 800220a:	483a      	ldr	r0, [pc, #232]	; (80022f4 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 800220c:	f005 faae 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8002210:	7d7b      	ldrb	r3, [r7, #21]
 8002212:	4619      	mov	r1, r3
 8002214:	7dbb      	ldrb	r3, [r7, #22]
 8002216:	461a      	mov	r2, r3
 8002218:	4837      	ldr	r0, [pc, #220]	; (80022f8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x17c>)
 800221a:	f005 fa21 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 800221e:	7dbb      	ldrb	r3, [r7, #22]
 8002220:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				retval = error;
 8002224:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002228:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 800222c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002230:	e053      	b.n	80022da <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x15e>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CELL_VOLTAGES)) {
 8002232:	7d3b      	ldrb	r3, [r7, #20]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d13a      	bne.n	80022ae <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x132>
 8002238:	7d7b      	ldrb	r3, [r7, #21]
 800223a:	2b1c      	cmp	r3, #28
 800223c:	d137      	bne.n	80022ae <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x132>
				if(msg_count == 1) {
 800223e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0xda>
					printf("Response from BMS [OK]\n");
 8002246:	482d      	ldr	r0, [pc, #180]	; (80022fc <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x180>)
 8002248:	f005 fa90 	bl	800776c <puts>
					printf("CAN_TBMS_READ_CELL_VOLTAGES | CMD: 0x%02X\n", rx_msg[1]);
 800224c:	7d7b      	ldrb	r3, [r7, #21]
 800224e:	4619      	mov	r1, r3
 8002250:	482b      	ldr	r0, [pc, #172]	; (8002300 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x184>)
 8002252:	f005 fa05 	bl	8007660 <iprintf>
				}
				pl = rx_msg[2];
 8002256:	7dbb      	ldrb	r3, [r7, #22]
 8002258:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				//msg_count is equal to the cell_count
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 800225c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002260:	2b02      	cmp	r3, #2
 8002262:	d11b      	bne.n	800229c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x120>
 8002264:	7e7b      	ldrb	r3, [r7, #25]
 8002266:	461a      	mov	r2, r3
 8002268:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800226c:	3b01      	subs	r3, #1
 800226e:	429a      	cmp	r2, r3
 8002270:	d114      	bne.n	800229c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x120>
					cellVoltage = ((rx_msg[4] << 8) | rx_msg[3]);
 8002272:	7e3b      	ldrb	r3, [r7, #24]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	b21a      	sxth	r2, r3
 8002278:	7dfb      	ldrb	r3, [r7, #23]
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21b      	sxth	r3, r3
 8002280:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("Secondary Battery Pack - Cell#: %u | Voltage: %u (0.1mV Resolution)\n", msg_count, cellVoltage);
 8002282:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002286:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002288:	4619      	mov	r1, r3
 800228a:	481e      	ldr	r0, [pc, #120]	; (8002304 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x188>)
 800228c:	f005 f9e8 	bl	8007660 <iprintf>
					msg_count++;
 8002290:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002294:	3301      	adds	r3, #1
 8002296:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 800229a:	e011      	b.n	80022c0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x144>
				} else {
					printf("Data Corruption\n");
 800229c:	481a      	ldr	r0, [pc, #104]	; (8002308 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x18c>)
 800229e:	f005 fa65 	bl	800776c <puts>
					retval = CMD_FAILURE;
 80022a2:	23ff      	movs	r3, #255	; 0xff
 80022a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 80022a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80022ac:	e015      	b.n	80022da <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x15e>
				}

			} else {
				printf("Data Corruption\n");
 80022ae:	4816      	ldr	r0, [pc, #88]	; (8002308 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x18c>)
 80022b0:	f005 fa5c 	bl	800776c <puts>
				retval = CMD_FAILURE;
 80022b4:	23ff      	movs	r3, #255	; 0xff
 80022b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 80022ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80022be:	e00c      	b.n	80022da <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x15e>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80022c0:	2100      	movs	r1, #0
 80022c2:	480a      	ldr	r0, [pc, #40]	; (80022ec <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x170>)
 80022c4:	f001 ff1f 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f47f af7b 	bne.w	80021c6 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x4a>
			}
		}
	}
	retval = CMD_SUCCESS;
 80022d0:	23aa      	movs	r3, #170	; 0xaa
 80022d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 80022d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3740      	adds	r7, #64	; 0x40
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800b75c 	.word	0x0800b75c
 80022e8:	0800b7f8 	.word	0x0800b7f8
 80022ec:	20000374 	.word	0x20000374
 80022f0:	20000004 	.word	0x20000004
 80022f4:	0800af60 	.word	0x0800af60
 80022f8:	0800af7c 	.word	0x0800af7c
 80022fc:	08009d8c 	.word	0x08009d8c
 8002300:	0800b784 	.word	0x0800b784
 8002304:	0800b7b0 	.word	0x0800b7b0
 8002308:	0800afd4 	.word	0x0800afd4

0800230c <TinyBMS_CAN_ReadSettingsValues>:
 * 						   0x01 - Min. settings     0x02 - Max. settings,
 * 						   0x03 - Default settings  0x04 - Current settings
 *
 * 						   RL - Registers to read. Max. 100 (0x64) registers
 */
uint8_t TinyBMS_CAN_ReadSettingsValues(CAN_HandleTypeDef *hcan, uint8_t option, uint8_t rl) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b090      	sub	sp, #64	; 0x40
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
 8002318:	4613      	mov	r3, r2
 800231a:	70bb      	strb	r3, [r7, #2]
	printf("TinyBMS_CAN_ReadSettingsValues\n");
 800231c:	4875      	ldr	r0, [pc, #468]	; (80024f4 <TinyBMS_CAN_ReadSettingsValues+0x1e8>)
 800231e:	f005 fa25 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 8002322:	23ff      	movs	r3, #255	; 0xff
 8002324:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t msg_count = 1, pl = 0;
 8002328:	2301      	movs	r3, #1
 800232a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800232e:	2300      	movs	r3, #0
 8002330:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t data = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	877b      	strh	r3, [r7, #58]	; 0x3a

	switch(option) {
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	3b01      	subs	r3, #1
 800233c:	2b03      	cmp	r3, #3
 800233e:	d81a      	bhi.n	8002376 <TinyBMS_CAN_ReadSettingsValues+0x6a>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <TinyBMS_CAN_ReadSettingsValues+0x3c>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002359 	.word	0x08002359
 800234c:	08002361 	.word	0x08002361
 8002350:	08002369 	.word	0x08002369
 8002354:	08002371 	.word	0x08002371
	case 0x01:
		printf("0x01 Min Settings\n");
 8002358:	4867      	ldr	r0, [pc, #412]	; (80024f8 <TinyBMS_CAN_ReadSettingsValues+0x1ec>)
 800235a:	f005 fa07 	bl	800776c <puts>
		break;
 800235e:	e013      	b.n	8002388 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x02:
		printf("0x02 Max Settings\n");
 8002360:	4866      	ldr	r0, [pc, #408]	; (80024fc <TinyBMS_CAN_ReadSettingsValues+0x1f0>)
 8002362:	f005 fa03 	bl	800776c <puts>
		break;
 8002366:	e00f      	b.n	8002388 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x03:
		printf("0x03 Default Settings\n");
 8002368:	4865      	ldr	r0, [pc, #404]	; (8002500 <TinyBMS_CAN_ReadSettingsValues+0x1f4>)
 800236a:	f005 f9ff 	bl	800776c <puts>
		break;
 800236e:	e00b      	b.n	8002388 <TinyBMS_CAN_ReadSettingsValues+0x7c>
	case 0x04:
		printf("0x04 Current Settings\n");
 8002370:	4864      	ldr	r0, [pc, #400]	; (8002504 <TinyBMS_CAN_ReadSettingsValues+0x1f8>)
 8002372:	f005 f9fb 	bl	800776c <puts>
	default:
		printf("Invalid option\n");
 8002376:	4864      	ldr	r0, [pc, #400]	; (8002508 <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 8002378:	f005 f9f8 	bl	800776c <puts>
		retval = CMD_FAILURE;
 800237c:	23ff      	movs	r3, #255	; 0xff
 800237e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 8002382:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002386:	e0b1      	b.n	80024ec <TinyBMS_CAN_ReadSettingsValues+0x1e0>
	}

	//Check if number of registers to read is within bounds
	if((rl <= 0) || (rl > 0x64)) {
 8002388:	78bb      	ldrb	r3, [r7, #2]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <TinyBMS_CAN_ReadSettingsValues+0x88>
 800238e:	78bb      	ldrb	r3, [r7, #2]
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d905      	bls.n	80023a0 <TinyBMS_CAN_ReadSettingsValues+0x94>
		retval = CMD_FAILURE;
 8002394:	23ff      	movs	r3, #255	; 0xff
 8002396:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		return retval;
 800239a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800239e:	e0a5      	b.n	80024ec <TinyBMS_CAN_ReadSettingsValues+0x1e0>
	}

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_SETTINGS_VALUES, option, 0x00, rl, 0x00, 0x00, 0x00, 0x00};
 80023a0:	231d      	movs	r3, #29
 80023a2:	733b      	strb	r3, [r7, #12]
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	737b      	strb	r3, [r7, #13]
 80023a8:	2300      	movs	r3, #0
 80023aa:	73bb      	strb	r3, [r7, #14]
 80023ac:	78bb      	ldrb	r3, [r7, #2]
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	2300      	movs	r3, #0
 80023b2:	743b      	strb	r3, [r7, #16]
 80023b4:	2300      	movs	r3, #0
 80023b6:	747b      	strb	r3, [r7, #17]
 80023b8:	2300      	movs	r3, #0
 80023ba:	74bb      	strb	r3, [r7, #18]
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
	uint8_t tx_len = 4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80023c6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	4619      	mov	r1, r3
 80023d0:	2000      	movs	r0, #0
 80023d2:	f000 fe59 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80023d6:	e07c      	b.n	80024d2 <TinyBMS_CAN_ReadSettingsValues+0x1c6>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	f107 021c 	add.w	r2, r7, #28
 80023e0:	2100      	movs	r1, #0
 80023e2:	484a      	ldr	r0, [pc, #296]	; (800250c <TinyBMS_CAN_ReadSettingsValues+0x200>)
 80023e4:	f001 fd7d 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <TinyBMS_CAN_ReadSettingsValues+0xe6>
			Error_Handler();
 80023ee:	f000 ffaf 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80023f2:	f240 4103 	movw	r1, #1027	; 0x403
 80023f6:	4845      	ldr	r0, [pc, #276]	; (800250c <TinyBMS_CAN_ReadSettingsValues+0x200>)
 80023f8:	f001 fead 	bl	8004156 <HAL_CAN_ActivateNotification>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <TinyBMS_CAN_ReadSettingsValues+0xfa>
			Error_Handler();
 8002402:	f000 ffa5 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	4b41      	ldr	r3, [pc, #260]	; (8002510 <TinyBMS_CAN_ReadSettingsValues+0x204>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d160      	bne.n	80024d2 <TinyBMS_CAN_ReadSettingsValues+0x1c6>
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	2b00      	cmp	r3, #0
 8002414:	d15d      	bne.n	80024d2 <TinyBMS_CAN_ReadSettingsValues+0x1c6>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 8002416:	7d3b      	ldrb	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d113      	bne.n	8002444 <TinyBMS_CAN_ReadSettingsValues+0x138>
				printf("Response from BMS [Error]\n");
 800241c:	483d      	ldr	r0, [pc, #244]	; (8002514 <TinyBMS_CAN_ReadSettingsValues+0x208>)
 800241e:	f005 f9a5 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 8002422:	7d7b      	ldrb	r3, [r7, #21]
 8002424:	4619      	mov	r1, r3
 8002426:	7dbb      	ldrb	r3, [r7, #22]
 8002428:	461a      	mov	r2, r3
 800242a:	483b      	ldr	r0, [pc, #236]	; (8002518 <TinyBMS_CAN_ReadSettingsValues+0x20c>)
 800242c:	f005 f918 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8002430:	7dbb      	ldrb	r3, [r7, #22]
 8002432:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				retval = error;
 8002436:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800243a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 800243e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002442:	e053      	b.n	80024ec <TinyBMS_CAN_ReadSettingsValues+0x1e0>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_SETTINGS_VALUES)) {
 8002444:	7d3b      	ldrb	r3, [r7, #20]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d13a      	bne.n	80024c0 <TinyBMS_CAN_ReadSettingsValues+0x1b4>
 800244a:	7d7b      	ldrb	r3, [r7, #21]
 800244c:	2b1d      	cmp	r3, #29
 800244e:	d137      	bne.n	80024c0 <TinyBMS_CAN_ReadSettingsValues+0x1b4>
				if(msg_count == 1) {
 8002450:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <TinyBMS_CAN_ReadSettingsValues+0x15c>
					printf("Response from BMS [OK]\n");
 8002458:	4830      	ldr	r0, [pc, #192]	; (800251c <TinyBMS_CAN_ReadSettingsValues+0x210>)
 800245a:	f005 f987 	bl	800776c <puts>
					printf("CAN_TBMS_READ_SETTINGS_VALUES | CMD: 0x%02X\n", rx_msg[1]);
 800245e:	7d7b      	ldrb	r3, [r7, #21]
 8002460:	4619      	mov	r1, r3
 8002462:	482f      	ldr	r0, [pc, #188]	; (8002520 <TinyBMS_CAN_ReadSettingsValues+0x214>)
 8002464:	f005 f8fc 	bl	8007660 <iprintf>
				}
				pl = rx_msg[2];
 8002468:	7dbb      	ldrb	r3, [r7, #22]
 800246a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				//msg_count is equal to the settings_count
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 800246e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002472:	2b02      	cmp	r3, #2
 8002474:	d11b      	bne.n	80024ae <TinyBMS_CAN_ReadSettingsValues+0x1a2>
 8002476:	7e7b      	ldrb	r3, [r7, #25]
 8002478:	461a      	mov	r2, r3
 800247a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800247e:	3b01      	subs	r3, #1
 8002480:	429a      	cmp	r2, r3
 8002482:	d114      	bne.n	80024ae <TinyBMS_CAN_ReadSettingsValues+0x1a2>
					data = ((rx_msg[4] << 8) | rx_msg[3]);
 8002484:	7e3b      	ldrb	r3, [r7, #24]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	b21a      	sxth	r2, r3
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	b21b      	sxth	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b21b      	sxth	r3, r3
 8002492:	877b      	strh	r3, [r7, #58]	; 0x3a
					printf("TinyBMS Setting#: %u | Value: %u\n", msg_count, data);
 8002494:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002498:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800249a:	4619      	mov	r1, r3
 800249c:	4821      	ldr	r0, [pc, #132]	; (8002524 <TinyBMS_CAN_ReadSettingsValues+0x218>)
 800249e:	f005 f8df 	bl	8007660 <iprintf>
					msg_count++;
 80024a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024a6:	3301      	adds	r3, #1
 80024a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((pl == 2) && (rx_msg[5] == (msg_count-1))) {
 80024ac:	e011      	b.n	80024d2 <TinyBMS_CAN_ReadSettingsValues+0x1c6>
				} else {
					printf("Data Corruption\n");
 80024ae:	481e      	ldr	r0, [pc, #120]	; (8002528 <TinyBMS_CAN_ReadSettingsValues+0x21c>)
 80024b0:	f005 f95c 	bl	800776c <puts>
					retval = CMD_FAILURE;
 80024b4:	23ff      	movs	r3, #255	; 0xff
 80024b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					return retval;
 80024ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80024be:	e015      	b.n	80024ec <TinyBMS_CAN_ReadSettingsValues+0x1e0>
				}

			} else {
				printf("Data Corruption\n");
 80024c0:	4819      	ldr	r0, [pc, #100]	; (8002528 <TinyBMS_CAN_ReadSettingsValues+0x21c>)
 80024c2:	f005 f953 	bl	800776c <puts>
				retval = CMD_FAILURE;
 80024c6:	23ff      	movs	r3, #255	; 0xff
 80024c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				return retval;
 80024cc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80024d0:	e00c      	b.n	80024ec <TinyBMS_CAN_ReadSettingsValues+0x1e0>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80024d2:	2100      	movs	r1, #0
 80024d4:	480d      	ldr	r0, [pc, #52]	; (800250c <TinyBMS_CAN_ReadSettingsValues+0x200>)
 80024d6:	f001 fe16 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f af7b 	bne.w	80023d8 <TinyBMS_CAN_ReadSettingsValues+0xcc>
			}
		}
	}
	retval = CMD_SUCCESS;
 80024e2:	23aa      	movs	r3, #170	; 0xaa
 80024e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	return retval;
 80024e8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3740      	adds	r7, #64	; 0x40
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	0800b800 	.word	0x0800b800
 80024f8:	0800b820 	.word	0x0800b820
 80024fc:	0800b834 	.word	0x0800b834
 8002500:	0800b848 	.word	0x0800b848
 8002504:	0800b860 	.word	0x0800b860
 8002508:	0800af50 	.word	0x0800af50
 800250c:	20000374 	.word	0x20000374
 8002510:	20000004 	.word	0x20000004
 8002514:	0800af60 	.word	0x0800af60
 8002518:	0800af7c 	.word	0x0800af7c
 800251c:	08009d8c 	.word	0x08009d8c
 8002520:	0800b878 	.word	0x0800b878
 8002524:	0800b8a8 	.word	0x0800b8a8
 8002528:	0800afd4 	.word	0x0800afd4

0800252c <TinyBMS_CAN_ReadVersion>:
 * 						 	 DATA1 - Hardware version
 * 						 	 DATA2 - Hardware changes version
 * 						 	 DATA3 - Firmware public version
 * 						 	 DATA4 - Firmware internal version
 */
uint8_t TinyBMS_CAN_ReadVersion(CAN_HandleTypeDef *hcan) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b090      	sub	sp, #64	; 0x40
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadVersion\n");
 8002534:	4884      	ldr	r0, [pc, #528]	; (8002748 <TinyBMS_CAN_ReadVersion+0x21c>)
 8002536:	f005 f919 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 800253a:	23ff      	movs	r3, #255	; 0xff
 800253c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];
	uint8_t pl = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t hw_version = 0, hw_changes = 0, firmware_public = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800254c:	2300      	movs	r3, #0
 800254e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002552:	2300      	movs	r3, #0
 8002554:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t firmware_internal = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_VERSION, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800255c:	4a7b      	ldr	r2, [pc, #492]	; (800274c <TinyBMS_CAN_ReadVersion+0x220>)
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002566:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8002570:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	4619      	mov	r1, r3
 800257a:	2000      	movs	r0, #0
 800257c:	f000 fd84 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002580:	e0d1      	b.n	8002726 <TinyBMS_CAN_ReadVersion+0x1fa>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	f107 0218 	add.w	r2, r7, #24
 800258a:	2100      	movs	r1, #0
 800258c:	4870      	ldr	r0, [pc, #448]	; (8002750 <TinyBMS_CAN_ReadVersion+0x224>)
 800258e:	f001 fca8 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <TinyBMS_CAN_ReadVersion+0x70>
			Error_Handler();
 8002598:	f000 feda 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800259c:	f240 4103 	movw	r1, #1027	; 0x403
 80025a0:	486b      	ldr	r0, [pc, #428]	; (8002750 <TinyBMS_CAN_ReadVersion+0x224>)
 80025a2:	f001 fdd8 	bl	8004156 <HAL_CAN_ActivateNotification>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <TinyBMS_CAN_ReadVersion+0x84>
			Error_Handler();
 80025ac:	f000 fed0 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4b68      	ldr	r3, [pc, #416]	; (8002754 <TinyBMS_CAN_ReadVersion+0x228>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	f040 80b5 	bne.w	8002726 <TinyBMS_CAN_ReadVersion+0x1fa>
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 80b1 	bne.w	8002726 <TinyBMS_CAN_ReadVersion+0x1fa>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80025c4:	7c3b      	ldrb	r3, [r7, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d113      	bne.n	80025f2 <TinyBMS_CAN_ReadVersion+0xc6>
				printf("Response from BMS [Error]\n");
 80025ca:	4863      	ldr	r0, [pc, #396]	; (8002758 <TinyBMS_CAN_ReadVersion+0x22c>)
 80025cc:	f005 f8ce 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 80025d0:	7c7b      	ldrb	r3, [r7, #17]
 80025d2:	4619      	mov	r1, r3
 80025d4:	7cbb      	ldrb	r3, [r7, #18]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4860      	ldr	r0, [pc, #384]	; (800275c <TinyBMS_CAN_ReadVersion+0x230>)
 80025da:	f005 f841 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 80025de:	7cbb      	ldrb	r3, [r7, #18]
 80025e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				retval = error;
 80025e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 80025ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025f0:	e0a6      	b.n	8002740 <TinyBMS_CAN_ReadVersion+0x214>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_VERSION)) {
 80025f2:	7c3b      	ldrb	r3, [r7, #16]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	f040 808d 	bne.w	8002714 <TinyBMS_CAN_ReadVersion+0x1e8>
 80025fa:	7c7b      	ldrb	r3, [r7, #17]
 80025fc:	2b1e      	cmp	r3, #30
 80025fe:	f040 8089 	bne.w	8002714 <TinyBMS_CAN_ReadVersion+0x1e8>
				printf("Response from BMS [OK]\n");
 8002602:	4857      	ldr	r0, [pc, #348]	; (8002760 <TinyBMS_CAN_ReadVersion+0x234>)
 8002604:	f005 f8b2 	bl	800776c <puts>
				printf("CAN_TBMS_READ_VERSION | CMD: 0x%02X\n", rx_msg[1]);
 8002608:	7c7b      	ldrb	r3, [r7, #17]
 800260a:	4619      	mov	r1, r3
 800260c:	4855      	ldr	r0, [pc, #340]	; (8002764 <TinyBMS_CAN_ReadVersion+0x238>)
 800260e:	f005 f827 	bl	8007660 <iprintf>
				pl = rx_msg[2];
 8002612:	7cbb      	ldrb	r3, [r7, #18]
 8002614:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				switch(pl) {
 8002618:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800261c:	3b01      	subs	r3, #1
 800261e:	2b04      	cmp	r3, #4
 8002620:	d86e      	bhi.n	8002700 <TinyBMS_CAN_ReadVersion+0x1d4>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <TinyBMS_CAN_ReadVersion+0xfc>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	0800263d 	.word	0x0800263d
 800262c:	08002651 	.word	0x08002651
 8002630:	08002677 	.word	0x08002677
 8002634:	08002701 	.word	0x08002701
 8002638:	080026af 	.word	0x080026af
				case 1: //DATA1
					hw_version = rx_msg[3];
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					printf("TinyBMS Hardware Version: %u\n", hw_version);
 8002642:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002646:	4619      	mov	r1, r3
 8002648:	4847      	ldr	r0, [pc, #284]	; (8002768 <TinyBMS_CAN_ReadVersion+0x23c>)
 800264a:	f005 f809 	bl	8007660 <iprintf>
					break;
 800264e:	e060      	b.n	8002712 <TinyBMS_CAN_ReadVersion+0x1e6>
				case 2: //DATA1 + DATA2
					hw_version = rx_msg[3];
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 8002656:	7d3b      	ldrb	r3, [r7, #20]
 8002658:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					printf("TinyBMS Hardware Version: %u\n", hw_version);
 800265c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002660:	4619      	mov	r1, r3
 8002662:	4841      	ldr	r0, [pc, #260]	; (8002768 <TinyBMS_CAN_ReadVersion+0x23c>)
 8002664:	f004 fffc 	bl	8007660 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\n", hw_changes);
 8002668:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800266c:	4619      	mov	r1, r3
 800266e:	483f      	ldr	r0, [pc, #252]	; (800276c <TinyBMS_CAN_ReadVersion+0x240>)
 8002670:	f004 fff6 	bl	8007660 <iprintf>
					break;
 8002674:	e04d      	b.n	8002712 <TinyBMS_CAN_ReadVersion+0x1e6>
				case 3: //DATA1 + DATA2 + DATA3
					hw_version = rx_msg[3];
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 800267c:	7d3b      	ldrb	r3, [r7, #20]
 800267e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					firmware_public = rx_msg[5];
 8002682:	7d7b      	ldrb	r3, [r7, #21]
 8002684:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					printf("TinyBMS Hardware Version: %u\n", hw_version);
 8002688:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800268c:	4619      	mov	r1, r3
 800268e:	4836      	ldr	r0, [pc, #216]	; (8002768 <TinyBMS_CAN_ReadVersion+0x23c>)
 8002690:	f004 ffe6 	bl	8007660 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\n", hw_changes);
 8002694:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002698:	4619      	mov	r1, r3
 800269a:	4834      	ldr	r0, [pc, #208]	; (800276c <TinyBMS_CAN_ReadVersion+0x240>)
 800269c:	f004 ffe0 	bl	8007660 <iprintf>
					printf("TinyBMS Firmware Public Version: %u\n", firmware_public);
 80026a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80026a4:	4619      	mov	r1, r3
 80026a6:	4832      	ldr	r0, [pc, #200]	; (8002770 <TinyBMS_CAN_ReadVersion+0x244>)
 80026a8:	f004 ffda 	bl	8007660 <iprintf>
					break;
 80026ac:	e031      	b.n	8002712 <TinyBMS_CAN_ReadVersion+0x1e6>
				case 5: //DATA1 + DATA2 + DATA3 + DATA4
					hw_version = rx_msg[3];
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					hw_changes = rx_msg[4];
 80026b4:	7d3b      	ldrb	r3, [r7, #20]
 80026b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					firmware_public = rx_msg[5];
 80026ba:	7d7b      	ldrb	r3, [r7, #21]
 80026bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					firmware_internal = ((rx_msg[7] << 8) | rx_msg[6]);
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	7dbb      	ldrb	r3, [r7, #22]
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	873b      	strh	r3, [r7, #56]	; 0x38
					printf("TinyBMS Hardware Version: %u\n", hw_version);
 80026d0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80026d4:	4619      	mov	r1, r3
 80026d6:	4824      	ldr	r0, [pc, #144]	; (8002768 <TinyBMS_CAN_ReadVersion+0x23c>)
 80026d8:	f004 ffc2 	bl	8007660 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\n", hw_changes);
 80026dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80026e0:	4619      	mov	r1, r3
 80026e2:	4822      	ldr	r0, [pc, #136]	; (800276c <TinyBMS_CAN_ReadVersion+0x240>)
 80026e4:	f004 ffbc 	bl	8007660 <iprintf>
					printf("TinyBMS Firmware Public Version: %u\n", firmware_public);
 80026e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80026ec:	4619      	mov	r1, r3
 80026ee:	4820      	ldr	r0, [pc, #128]	; (8002770 <TinyBMS_CAN_ReadVersion+0x244>)
 80026f0:	f004 ffb6 	bl	8007660 <iprintf>
					printf("TinyBMS Firmware Internal Version: %u\n", firmware_internal);
 80026f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026f6:	4619      	mov	r1, r3
 80026f8:	481e      	ldr	r0, [pc, #120]	; (8002774 <TinyBMS_CAN_ReadVersion+0x248>)
 80026fa:	f004 ffb1 	bl	8007660 <iprintf>
					break;
 80026fe:	e008      	b.n	8002712 <TinyBMS_CAN_ReadVersion+0x1e6>
				default:
					printf("Invalid Payload Value\n");
 8002700:	481d      	ldr	r0, [pc, #116]	; (8002778 <TinyBMS_CAN_ReadVersion+0x24c>)
 8002702:	f005 f833 	bl	800776c <puts>
					retval = CMD_FAILURE;
 8002706:	23ff      	movs	r3, #255	; 0xff
 8002708:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					return retval;
 800270c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002710:	e016      	b.n	8002740 <TinyBMS_CAN_ReadVersion+0x214>
				switch(pl) {
 8002712:	e008      	b.n	8002726 <TinyBMS_CAN_ReadVersion+0x1fa>
				}
			} else {
				printf("Data Corruption\n");
 8002714:	4819      	ldr	r0, [pc, #100]	; (800277c <TinyBMS_CAN_ReadVersion+0x250>)
 8002716:	f005 f829 	bl	800776c <puts>
				retval = CMD_FAILURE;
 800271a:	23ff      	movs	r3, #255	; 0xff
 800271c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				return retval;
 8002720:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002724:	e00c      	b.n	8002740 <TinyBMS_CAN_ReadVersion+0x214>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8002726:	2100      	movs	r1, #0
 8002728:	4809      	ldr	r0, [pc, #36]	; (8002750 <TinyBMS_CAN_ReadVersion+0x224>)
 800272a:	f001 fcec 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f af26 	bne.w	8002582 <TinyBMS_CAN_ReadVersion+0x56>
			}
		}
	}
	retval = CMD_SUCCESS;
 8002736:	23aa      	movs	r3, #170	; 0xaa
 8002738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	return retval;
 800273c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8002740:	4618      	mov	r0, r3
 8002742:	3740      	adds	r7, #64	; 0x40
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	0800b8cc 	.word	0x0800b8cc
 800274c:	0800b9a4 	.word	0x0800b9a4
 8002750:	20000374 	.word	0x20000374
 8002754:	20000004 	.word	0x20000004
 8002758:	0800af60 	.word	0x0800af60
 800275c:	0800af7c 	.word	0x0800af7c
 8002760:	08009d8c 	.word	0x08009d8c
 8002764:	0800b8e4 	.word	0x0800b8e4
 8002768:	0800b90c 	.word	0x0800b90c
 800276c:	0800b92c 	.word	0x0800b92c
 8002770:	0800b954 	.word	0x0800b954
 8002774:	0800b97c 	.word	0x0800b97c
 8002778:	0800aca4 	.word	0x0800aca4
 800277c:	0800afd4 	.word	0x0800afd4

08002780 <TinyBMS_CAN_ReadNodeID>:
 *
 * @return				-  CMD_SUCCESS, CMD_FAILURE, (uint8_t) error code
 *
 * @note				-  Default after firmware update is 0x01
 */
uint8_t TinyBMS_CAN_ReadNodeID(CAN_HandleTypeDef *hcan) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b08e      	sub	sp, #56	; 0x38
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadNodeID\n");
 8002788:	4851      	ldr	r0, [pc, #324]	; (80028d0 <TinyBMS_CAN_ReadNodeID+0x150>)
 800278a:	f004 ffef 	bl	800776c <puts>
	uint8_t retval = CMD_FAILURE;
 800278e:	23ff      	movs	r3, #255	; 0xff
 8002790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rx_msg[8];

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_CAN_NODEID, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002794:	4a4f      	ldr	r2, [pc, #316]	; (80028d4 <TinyBMS_CAN_ReadNodeID+0x154>)
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800279e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80027a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80027ac:	f107 0308 	add.w	r3, r7, #8
 80027b0:	4619      	mov	r1, r3
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 fc68 	bl	8003088 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80027b8:	e078      	b.n	80028ac <TinyBMS_CAN_ReadNodeID+0x12c>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_msg) != HAL_OK) {
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	f107 0218 	add.w	r2, r7, #24
 80027c2:	2100      	movs	r1, #0
 80027c4:	4844      	ldr	r0, [pc, #272]	; (80028d8 <TinyBMS_CAN_ReadNodeID+0x158>)
 80027c6:	f001 fb8c 	bl	8003ee2 <HAL_CAN_GetRxMessage>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <TinyBMS_CAN_ReadNodeID+0x54>
			Error_Handler();
 80027d0:	f000 fdbe 	bl	8003350 <Error_Handler>
		}
		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80027d4:	f240 4103 	movw	r1, #1027	; 0x403
 80027d8:	483f      	ldr	r0, [pc, #252]	; (80028d8 <TinyBMS_CAN_ReadNodeID+0x158>)
 80027da:	f001 fcbc 	bl	8004156 <HAL_CAN_ActivateNotification>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <TinyBMS_CAN_ReadNodeID+0x68>
			Error_Handler();
 80027e4:	f000 fdb4 	bl	8003350 <Error_Handler>
		}

		//Data Frame from TinyBMS
		//Search for current NodeID by accepting any data frame with Response StdID of 0x241-0x27F (full range)
		if(((RxHeader.StdId >= TINYBMS_CAN_RESPONSE_STDID_MIN) && (RxHeader.StdId <= TINYBMS_CAN_RESPONSE_STDID_MAX)) && (RxHeader.RTR == 0)) {
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80027ee:	d95d      	bls.n	80028ac <TinyBMS_CAN_ReadNodeID+0x12c>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80027f6:	d259      	bcs.n	80028ac <TinyBMS_CAN_ReadNodeID+0x12c>
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d156      	bne.n	80028ac <TinyBMS_CAN_ReadNodeID+0x12c>
			//[ERROR]
			if(rx_msg[0] == NACK) {
 80027fe:	7c3b      	ldrb	r3, [r7, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d113      	bne.n	800282c <TinyBMS_CAN_ReadNodeID+0xac>
				printf("Response from BMS [Error]\n");
 8002804:	4835      	ldr	r0, [pc, #212]	; (80028dc <TinyBMS_CAN_ReadNodeID+0x15c>)
 8002806:	f004 ffb1 	bl	800776c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\n", rx_msg[1], rx_msg[2]);
 800280a:	7c7b      	ldrb	r3, [r7, #17]
 800280c:	4619      	mov	r1, r3
 800280e:	7cbb      	ldrb	r3, [r7, #18]
 8002810:	461a      	mov	r2, r3
 8002812:	4833      	ldr	r0, [pc, #204]	; (80028e0 <TinyBMS_CAN_ReadNodeID+0x160>)
 8002814:	f004 ff24 	bl	8007660 <iprintf>
				uint8_t error = rx_msg[2];
 8002818:	7cbb      	ldrb	r3, [r7, #18]
 800281a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				retval = error;
 800281e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 8002826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800282a:	e04c      	b.n	80028c6 <TinyBMS_CAN_ReadNodeID+0x146>

			//[OK]
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CAN_NODEID)) {
 800282c:	7c3b      	ldrb	r3, [r7, #16]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d133      	bne.n	800289a <TinyBMS_CAN_ReadNodeID+0x11a>
 8002832:	7c7b      	ldrb	r3, [r7, #17]
 8002834:	2b28      	cmp	r3, #40	; 0x28
 8002836:	d130      	bne.n	800289a <TinyBMS_CAN_ReadNodeID+0x11a>
				printf("Response from BMS [OK]\n");
 8002838:	482a      	ldr	r0, [pc, #168]	; (80028e4 <TinyBMS_CAN_ReadNodeID+0x164>)
 800283a:	f004 ff97 	bl	800776c <puts>
				printf("CAN_TBMS_READ_CAN_NODEID | CMD: 0x%02X\n", rx_msg[1]);
 800283e:	7c7b      	ldrb	r3, [r7, #17]
 8002840:	4619      	mov	r1, r3
 8002842:	4829      	ldr	r0, [pc, #164]	; (80028e8 <TinyBMS_CAN_ReadNodeID+0x168>)
 8002844:	f004 ff0c 	bl	8007660 <iprintf>
				uint8_t nodeID_current = rx_msg[2];
 8002848:	7cbb      	ldrb	r3, [r7, #18]
 800284a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

				//CAN-UART converter CAN Node ID: must be between 0x01 to 0x3F
				if((nodeID_current < TINYBMS_CAN_NODEID_MIN) || (nodeID_current > TINYBMS_CAN_NODEID_MAX)) {
 800284e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <TinyBMS_CAN_ReadNodeID+0xde>
 8002856:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800285a:	2b3f      	cmp	r3, #63	; 0x3f
 800285c:	d908      	bls.n	8002870 <TinyBMS_CAN_ReadNodeID+0xf0>
					printf("TinyBMS CAN NodeID out of range\n");
 800285e:	4823      	ldr	r0, [pc, #140]	; (80028ec <TinyBMS_CAN_ReadNodeID+0x16c>)
 8002860:	f004 ff84 	bl	800776c <puts>
					retval = CMD_FAILURE;
 8002864:	23ff      	movs	r3, #255	; 0xff
 8002866:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					return retval;
 800286a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800286e:	e02a      	b.n	80028c6 <TinyBMS_CAN_ReadNodeID+0x146>
				}
				//Update both StdID's to reflect current NodeID
				TinybmsStdID_Request = (uint32_t)(TINYBMS_CAN_REQUEST_BASE_STDID + nodeID_current);
 8002870:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002874:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002878:	461a      	mov	r2, r3
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <TinyBMS_CAN_ReadNodeID+0x170>)
 800287c:	601a      	str	r2, [r3, #0]
				TinybmsStdID_Response = (uint32_t)(TINYBMS_CAN_RESPONSE_BASE_STDID + nodeID_current);
 800287e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002882:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002886:	461a      	mov	r2, r3
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <TinyBMS_CAN_ReadNodeID+0x174>)
 800288a:	601a      	str	r2, [r3, #0]
				printf("TinyBMS Current CAN NodeID: %d\n", nodeID_current);
 800288c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002890:	4619      	mov	r1, r3
 8002892:	4819      	ldr	r0, [pc, #100]	; (80028f8 <TinyBMS_CAN_ReadNodeID+0x178>)
 8002894:	f004 fee4 	bl	8007660 <iprintf>
			} else if((rx_msg[0] == ACK) && (rx_msg[1] == CAN_TBMS_READ_CAN_NODEID)) {
 8002898:	e008      	b.n	80028ac <TinyBMS_CAN_ReadNodeID+0x12c>

			} else {
				printf("Data Corruption\n");
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <TinyBMS_CAN_ReadNodeID+0x17c>)
 800289c:	f004 ff66 	bl	800776c <puts>
				retval = CMD_FAILURE;
 80028a0:	23ff      	movs	r3, #255	; 0xff
 80028a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return retval;
 80028a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80028aa:	e00c      	b.n	80028c6 <TinyBMS_CAN_ReadNodeID+0x146>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80028ac:	2100      	movs	r1, #0
 80028ae:	480a      	ldr	r0, [pc, #40]	; (80028d8 <TinyBMS_CAN_ReadNodeID+0x158>)
 80028b0:	f001 fc29 	bl	8004106 <HAL_CAN_GetRxFifoFillLevel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f47f af7f 	bne.w	80027ba <TinyBMS_CAN_ReadNodeID+0x3a>
			}
		}
	}
	retval = CMD_SUCCESS;
 80028bc:	23aa      	movs	r3, #170	; 0xaa
 80028be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return retval;
 80028c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3738      	adds	r7, #56	; 0x38
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	0800ba94 	.word	0x0800ba94
 80028d4:	0800bb14 	.word	0x0800bb14
 80028d8:	20000374 	.word	0x20000374
 80028dc:	0800af60 	.word	0x0800af60
 80028e0:	0800af7c 	.word	0x0800af7c
 80028e4:	08009d8c 	.word	0x08009d8c
 80028e8:	0800baac 	.word	0x0800baac
 80028ec:	0800bad4 	.word	0x0800bad4
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000004 	.word	0x20000004
 80028f8:	0800baf4 	.word	0x0800baf4
 80028fc:	0800afd4 	.word	0x0800afd4

08002900 <NMI_Handler>:
extern TIM_HandleTypeDef htim6;

/******************************************************************************/
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void) {
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
	while(1) {}
 8002904:	e7fe      	b.n	8002904 <NMI_Handler+0x4>

08002906 <HardFault_Handler>:
}

void HardFault_Handler(void) {
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
	while(1) {}
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:
}

void MemManage_Handler(void) {
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
	while(1) {}
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler+0x4>

08002912 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
	while(1) {}
 8002916:	e7fe      	b.n	8002916 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
	while(1) {}
 800291c:	e7fe      	b.n	800291c <UsageFault_Handler+0x4>

0800291e <SVC_Handler>:
}

void SVC_Handler(void) {
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DebugMon_Handler>:

void DebugMon_Handler(void) {
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <PendSV_Handler>:

void PendSV_Handler(void) {
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <SysTick_Handler>:

void SysTick_Handler(void) {
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800294c:	f000 ffae 	bl	80038ac <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8002950:	f001 ff84 	bl	800485c <HAL_SYSTICK_IRQHandler>
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <USART2_IRQHandler>:
/* STM32F7xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/
void USART2_IRQHandler(void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <USART2_IRQHandler+0x10>)
 800295e:	f003 fa6f 	bl	8005e40 <HAL_UART_IRQHandler>
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200002f0 	.word	0x200002f0

0800296c <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void) {
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <CAN1_TX_IRQHandler+0x10>)
 8002972:	f001 fc3d 	bl	80041f0 <HAL_CAN_IRQHandler>
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000374 	.word	0x20000374

08002980 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <CAN1_RX0_IRQHandler+0x10>)
 8002986:	f001 fc33 	bl	80041f0 <HAL_CAN_IRQHandler>
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000374 	.word	0x20000374

08002994 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void) {
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <CAN1_RX1_IRQHandler+0x10>)
 800299a:	f001 fc29 	bl	80041f0 <HAL_CAN_IRQHandler>
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000374 	.word	0x20000374

080029a8 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <CAN1_SCE_IRQHandler+0x10>)
 80029ae:	f001 fc1f 	bl	80041f0 <HAL_CAN_IRQHandler>
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000374 	.word	0x20000374

080029bc <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM6_DAC_IRQHandler+0x10>)
 80029c2:	f002 ff56 	bl	8005872 <HAL_TIM_IRQHandler>
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200002a4 	.word	0x200002a4

080029d0 <main>:

uint16_t maxCellVoltage = 0, minCellVoltage = 0;
uint32_t initialSOC = 0;
float initialPackVoltage = 0, initialPackCurrent = 0;

int main(void) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	/* Resets all peripherals, initializes the flash interface and Systick. */
	HAL_Init();
 80029d4:	f000 ff2d 	bl	8003832 <HAL_Init>

	/* Configure SYSCLK to 50MHZ */
	SystemClock_Config_HSI(SYS_CLOCK_FREQ_50MHZ);
 80029d8:	2032      	movs	r0, #50	; 0x32
 80029da:	f000 f94b 	bl	8002c74 <SystemClock_Config_HSI>

	/* Initialize all configured peripherals */
	GPIO_Init();
 80029de:	f000 f9eb 	bl	8002db8 <GPIO_Init>
	UART_Init();
 80029e2:	f000 fa55 	bl	8002e90 <UART_Init>
	TIM_Init();
 80029e6:	f000 faad 	bl	8002f44 <TIM_Init>
	CAN_Init(CANBITRATE_500KBIT_50MHZ);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f000 fac6 	bl	8002f7c <CAN_Init>
	CAN_Filter_Config();
 80029f0:	f000 fb04 	bl	8002ffc <CAN_Filter_Config>

	CAN_Begin();
 80029f4:	f000 fb30 	bl	8003058 <CAN_Begin>
	//CAN_Test_API();

	/* Application State Machine */
	//Todo:
  	while(1) {
		switch(bms_opmode) {
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <main+0x7c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d002      	beq.n	8002a06 <main+0x36>
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d013      	beq.n	8002a2c <main+0x5c>
 8002a04:	e01f      	b.n	8002a46 <main+0x76>
		case MONITOR_CHARGING:
			//TinyBMS Init
			if(TinyBMS_Init() != CMD_SUCCESS) {
 8002a06:	f000 f8bd 	bl	8002b84 <TinyBMS_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2baa      	cmp	r3, #170	; 0xaa
 8002a0e:	d004      	beq.n	8002a1a <main+0x4a>
				printf("TinyBMS Init failed.\n");
 8002a10:	480f      	ldr	r0, [pc, #60]	; (8002a50 <main+0x80>)
 8002a12:	f004 feab 	bl	800776c <puts>
				Error_Handler();
 8002a16:	f000 fc9b 	bl	8003350 <Error_Handler>
			}

			//Start the Timer (Interrupt mode - Non-Blocking)
			//Timer is used to send a message to the charger every 1 second
			HAL_TIM_Base_Start_IT(&htim6);
 8002a1a:	480e      	ldr	r0, [pc, #56]	; (8002a54 <main+0x84>)
 8002a1c:	f002 fe82 	bl	8005724 <HAL_TIM_Base_Start_IT>

			//Begin and Monitor Charging
			TinyBMS_MonitorCharging();
 8002a20:	f000 f81a 	bl	8002a58 <TinyBMS_MonitorCharging>

			//Stop the Timer
			HAL_TIM_Base_Stop_IT(&htim6);
 8002a24:	480b      	ldr	r0, [pc, #44]	; (8002a54 <main+0x84>)
 8002a26:	f002 fef5 	bl	8005814 <HAL_TIM_Base_Stop_IT>
			break;
 8002a2a:	e00e      	b.n	8002a4a <main+0x7a>

		case MONITOR_OPERATION:
			//TinyBMS Init
			if(TinyBMS_Init() != CMD_SUCCESS) {
 8002a2c:	f000 f8aa 	bl	8002b84 <TinyBMS_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2baa      	cmp	r3, #170	; 0xaa
 8002a34:	d004      	beq.n	8002a40 <main+0x70>
				printf("TinyBMS Init failed.\n");
 8002a36:	4806      	ldr	r0, [pc, #24]	; (8002a50 <main+0x80>)
 8002a38:	f004 fe98 	bl	800776c <puts>
				Error_Handler();
 8002a3c:	f000 fc88 	bl	8003350 <Error_Handler>
			}

			TinyBMS_MonitorOperation();
 8002a40:	f000 f880 	bl	8002b44 <TinyBMS_MonitorOperation>
			break;
 8002a44:	e001      	b.n	8002a4a <main+0x7a>

		default:
			Error_Handler();
 8002a46:	f000 fc83 	bl	8003350 <Error_Handler>
		switch(bms_opmode) {
 8002a4a:	e7d5      	b.n	80029f8 <main+0x28>
 8002a4c:	20000200 	.word	0x20000200
 8002a50:	0800bb80 	.word	0x0800bb80
 8002a54:	200002a4 	.word	0x200002a4

08002a58 <TinyBMS_MonitorCharging>:
	//while(TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft(&hcan1) != CMD_SUCCESS) {}
	//while(TinyBMS_CAN_ReadNodeID(&hcan1) != CMD_SUCCESS) {}
	//while(TinyBMS_CAN_WriteNodeID(&hcan1, nodeID) != CMD_SUCCESS) {}
}

void TinyBMS_MonitorCharging(void) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0

	//Todo:
	//Mostly Placeholder - Modify API to return their respective data
	uint16_t cellv[7] = {};
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	819a      	strh	r2, [r3, #12]
	uint16_t numDetectedCells = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	82bb      	strh	r3, [r7, #20]

	while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_CHARGING) {
 8002a6e:	e051      	b.n	8002b14 <TinyBMS_MonitorCharging+0xbc>

		//Verify that all cells are being detected
		numDetectedCells = TinyBMS_CAN_ReadRegBlock(&hcan1, 1, NUMBER_OF_DETECTED_CELLS);
 8002a70:	2235      	movs	r2, #53	; 0x35
 8002a72:	2101      	movs	r1, #1
 8002a74:	482d      	ldr	r0, [pc, #180]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002a76:	f7fe faf1 	bl	800105c <TinyBMS_CAN_ReadRegBlock>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	82bb      	strh	r3, [r7, #20]
		if(numDetectedCells != NUMCELLS_SECONDARY) {
 8002a7e:	8abb      	ldrh	r3, [r7, #20]
 8002a80:	2b07      	cmp	r3, #7
 8002a82:	d002      	beq.n	8002a8a <TinyBMS_MonitorCharging+0x32>
			printf("Some cells are not being detected!\n");
 8002a84:	482a      	ldr	r0, [pc, #168]	; (8002b30 <TinyBMS_MonitorCharging+0xd8>)
 8002a86:	f004 fe71 	bl	800776c <puts>
		}

		//Get voltage of all cells and compare with max/min voltage thresholds
		TinyBMS_CAN_ReadBatteryPackCellVoltages(&hcan1);
 8002a8a:	4828      	ldr	r0, [pc, #160]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002a8c:	f7ff fb76 	bl	800217c <TinyBMS_CAN_ReadBatteryPackCellVoltages>
		for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8002a90:	2300      	movs	r3, #0
 8002a92:	75fb      	strb	r3, [r7, #23]
 8002a94:	e024      	b.n	8002ae0 <TinyBMS_MonitorCharging+0x88>
			if(cellv[i] < minCellVoltage)  {
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	f107 0218 	add.w	r2, r7, #24
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002aa4:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <TinyBMS_MonitorCharging+0xdc>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d205      	bcs.n	8002ab8 <TinyBMS_MonitorCharging+0x60>
				printf("Cell %u is below the minimum voltage threshold!\n", i+1);
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4821      	ldr	r0, [pc, #132]	; (8002b38 <TinyBMS_MonitorCharging+0xe0>)
 8002ab4:	f004 fdd4 	bl	8007660 <iprintf>
			}
			if(cellv[i] > maxCellVoltage) {
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	f107 0218 	add.w	r2, r7, #24
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <TinyBMS_MonitorCharging+0xe4>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d905      	bls.n	8002ada <TinyBMS_MonitorCharging+0x82>
				printf("Cell %u is above the maximum voltage threshold!\n", i+1);
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	481a      	ldr	r0, [pc, #104]	; (8002b40 <TinyBMS_MonitorCharging+0xe8>)
 8002ad6:	f004 fdc3 	bl	8007660 <iprintf>
		for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	3301      	adds	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d9d7      	bls.n	8002a96 <TinyBMS_MonitorCharging+0x3e>
			}
		}

		//Check if cells need balancing or are in progress of balancing
		//Regs 51 & 52: BALANCING_DECISION_BITS & REAL_BALANCING_BITS
		TinyBMS_CAN_ReadRegBlock(&hcan1, 2, BALANCING_DECISION_BITS);
 8002ae6:	2233      	movs	r2, #51	; 0x33
 8002ae8:	2102      	movs	r1, #2
 8002aea:	4810      	ldr	r0, [pc, #64]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002aec:	f7fe fab6 	bl	800105c <TinyBMS_CAN_ReadRegBlock>

		//Check Newest Events
		TinyBMS_CAN_ReadNewestEvents(&hcan1);
 8002af0:	480e      	ldr	r0, [pc, #56]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002af2:	f7fe fbb5 	bl	8001260 <TinyBMS_CAN_ReadNewestEvents>

		//Check Online Status
		TinyBMS_CAN_ReadOnlineStatus(&hcan1);
 8002af6:	480d      	ldr	r0, [pc, #52]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002af8:	f7ff f81e 	bl	8001b38 <TinyBMS_CAN_ReadOnlineStatus>

		//Check Temperatures
		TinyBMS_CAN_ReadDeviceTemperatures(&hcan1);
 8002afc:	480b      	ldr	r0, [pc, #44]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002afe:	f7ff fa47 	bl	8001f90 <TinyBMS_CAN_ReadDeviceTemperatures>

		//Get State of Charge
		TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 8002b02:	480a      	ldr	r0, [pc, #40]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002b04:	f7ff f9a6 	bl	8001e54 <TinyBMS_CAN_ReadEstimatedSOCValue>

		//Get Pack Voltage
		TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 8002b08:	4808      	ldr	r0, [pc, #32]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002b0a:	f7fe fd89 	bl	8001620 <TinyBMS_CAN_ReadBatteryPackVoltage>

		//Get Pack Current
		TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 8002b0e:	4807      	ldr	r0, [pc, #28]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002b10:	f7fe fe30 	bl	8001774 <TinyBMS_CAN_ReadBatteryPackCurrent>
	while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_CHARGING) {
 8002b14:	4805      	ldr	r0, [pc, #20]	; (8002b2c <TinyBMS_MonitorCharging+0xd4>)
 8002b16:	f7ff f80f 	bl	8001b38 <TinyBMS_CAN_ReadOnlineStatus>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b91      	cmp	r3, #145	; 0x91
 8002b1e:	d0a7      	beq.n	8002a70 <TinyBMS_MonitorCharging+0x18>
	}
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000374 	.word	0x20000374
 8002b30:	0800bb98 	.word	0x0800bb98
 8002b34:	20000204 	.word	0x20000204
 8002b38:	0800bbbc 	.word	0x0800bbbc
 8002b3c:	20000202 	.word	0x20000202
 8002b40:	0800bbf0 	.word	0x0800bbf0

08002b44 <TinyBMS_MonitorOperation>:

void TinyBMS_MonitorOperation(void) {
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
	//Todo:
	//Similar to MonitorCharging
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <ElCon_SendMsg>:

void ElCon_SendMsg(void) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
	//Triggered from HAL_TIM_PeriodElapsedCallback()
	//Every 1 second, send 8-bytes of data with voltage and current requested to ExtID 0x1806E5F4
	//Todo:
	uint8_t msg[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <ElCon_SendMsg+0x2c>)
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b62:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t len = 8;
 8002b66:	2308      	movs	r3, #8
 8002b68:	73fb      	strb	r3, [r7, #15]
	CAN1_Tx(ELCONCHARGER2, msg, len);
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	2002      	movs	r0, #2
 8002b72:	f000 fa89 	bl	8003088 <CAN1_Tx>
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	0800bc24 	.word	0x0800bc24

08002b84 <TinyBMS_Init>:

uint8_t TinyBMS_Init(void) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
	uint8_t retval = CMD_FAILURE;
 8002b8a:	23ff      	movs	r3, #255	; 0xff
 8002b8c:	71fb      	strb	r3, [r7, #7]
	//Todo:
	//Mostly Placeholder - Modify API to return their respective data

	//Read CAN NodeID and update to it if required
	TinyBMS_CAN_ReadNodeID(&hcan1);
 8002b8e:	4833      	ldr	r0, [pc, #204]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002b90:	f7ff fdf6 	bl	8002780 <TinyBMS_CAN_ReadNodeID>

	//Reset BMS
	TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_RESET_BMS);
 8002b94:	2105      	movs	r1, #5
 8002b96:	4831      	ldr	r0, [pc, #196]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002b98:	f7fe f9a2 	bl	8000ee0 <TinyBMS_CAN_ResetClearEventsStatistics>

	//Clear Events & Statistics
	TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_EVENTS);
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	482f      	ldr	r0, [pc, #188]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002ba0:	f7fe f99e 	bl	8000ee0 <TinyBMS_CAN_ResetClearEventsStatistics>
	TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_STATS);
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	482d      	ldr	r0, [pc, #180]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002ba8:	f7fe f99a 	bl	8000ee0 <TinyBMS_CAN_ResetClearEventsStatistics>

	//Confirm BMS Reset by reading Lifetime Counter
	TinyBMS_CAN_ReadLifetimeCounter(&hcan1);
 8002bac:	482b      	ldr	r0, [pc, #172]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002bae:	f7ff f8b3 	bl	8001d18 <TinyBMS_CAN_ReadLifetimeCounter>

	//Read Version
	TinyBMS_CAN_ReadVersion(&hcan1);
 8002bb2:	482a      	ldr	r0, [pc, #168]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002bb4:	f7ff fcba 	bl	800252c <TinyBMS_CAN_ReadVersion>

	//Get Min/Max Cell Voltage Thresholds
	minCellVoltage = TinyBMS_CAN_ReadBatteryPackMinCellVoltage(&hcan1);
 8002bb8:	4828      	ldr	r0, [pc, #160]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002bba:	f7fe ff21 	bl	8001a00 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <TinyBMS_Init+0xdc>)
 8002bc4:	801a      	strh	r2, [r3, #0]
	maxCellVoltage = TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(&hcan1);
 8002bc6:	4825      	ldr	r0, [pc, #148]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002bc8:	f7fe fe7e 	bl	80018c8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <TinyBMS_Init+0xe0>)
 8002bd2:	801a      	strh	r2, [r3, #0]

	//Check for any active events
	TinyBMS_CAN_ReadAllEvents(&hcan1);
 8002bd4:	4821      	ldr	r0, [pc, #132]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002bd6:	f7fe fc33 	bl	8001440 <TinyBMS_CAN_ReadAllEvents>

	//Verify Pack Voltage and Current
	initialPackVoltage = TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 8002bda:	4820      	ldr	r0, [pc, #128]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002bdc:	f7fe fd20 	bl	8001620 <TinyBMS_CAN_ReadBatteryPackVoltage>
 8002be0:	4603      	mov	r3, r0
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bea:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <TinyBMS_Init+0xe4>)
 8002bec:	edc3 7a00 	vstr	s15, [r3]
	initialPackCurrent = TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 8002bf0:	481a      	ldr	r0, [pc, #104]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002bf2:	f7fe fdbf 	bl	8001774 <TinyBMS_CAN_ReadBatteryPackCurrent>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <TinyBMS_Init+0xe8>)
 8002c02:	edc3 7a00 	vstr	s15, [r3]

	//Get initial State of Charge
	initialSOC = TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 8002c06:	4815      	ldr	r0, [pc, #84]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002c08:	f7ff f924 	bl	8001e54 <TinyBMS_CAN_ReadEstimatedSOCValue>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <TinyBMS_Init+0xec>)
 8002c12:	601a      	str	r2, [r3, #0]

	//Check Temperatures
	TinyBMS_CAN_ReadDeviceTemperatures(&hcan1);
 8002c14:	4811      	ldr	r0, [pc, #68]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002c16:	f7ff f9bb 	bl	8001f90 <TinyBMS_CAN_ReadDeviceTemperatures>

	//Verify Online Status is TINYBMS_STATUS_IDLE
	if(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_IDLE) {
 8002c1a:	4810      	ldr	r0, [pc, #64]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002c1c:	f7fe ff8c 	bl	8001b38 <TinyBMS_CAN_ReadOnlineStatus>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b97      	cmp	r3, #151	; 0x97
 8002c24:	d00e      	beq.n	8002c44 <TinyBMS_Init+0xc0>
		//do nothing
	} else if(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_FAULT) {
 8002c26:	480d      	ldr	r0, [pc, #52]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002c28:	f7fe ff86 	bl	8001b38 <TinyBMS_CAN_ReadOnlineStatus>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b9b      	cmp	r3, #155	; 0x9b
 8002c30:	d106      	bne.n	8002c40 <TinyBMS_Init+0xbc>
		//Check for any active events
		TinyBMS_CAN_ReadAllEvents(&hcan1);
 8002c32:	480a      	ldr	r0, [pc, #40]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002c34:	f7fe fc04 	bl	8001440 <TinyBMS_CAN_ReadAllEvents>
		retval = CMD_FAILURE;
 8002c38:	23ff      	movs	r3, #255	; 0xff
 8002c3a:	71fb      	strb	r3, [r7, #7]
		return retval;
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	e009      	b.n	8002c54 <TinyBMS_Init+0xd0>
	} else {
		Error_Handler();
 8002c40:	f000 fb86 	bl	8003350 <Error_Handler>
	}

	//Settings Registers: 300-301, 303-304, 306-308, 312-320, 328, 330-343
	//					  (30 total settings) (344-399 reserved)
	// rl max is 100 (0x64) registers, but this exceeds the actual total
	TinyBMS_CAN_ReadSettingsValues(&hcan1, TINYBMS_SETTINGS_CURRENT, 30);
 8002c44:	221e      	movs	r2, #30
 8002c46:	2104      	movs	r1, #4
 8002c48:	4804      	ldr	r0, [pc, #16]	; (8002c5c <TinyBMS_Init+0xd8>)
 8002c4a:	f7ff fb5f 	bl	800230c <TinyBMS_CAN_ReadSettingsValues>

	retval = CMD_SUCCESS;
 8002c4e:	23aa      	movs	r3, #170	; 0xaa
 8002c50:	71fb      	strb	r3, [r7, #7]
	return retval;
 8002c52:	79fb      	ldrb	r3, [r7, #7]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000374 	.word	0x20000374
 8002c60:	20000204 	.word	0x20000204
 8002c64:	20000202 	.word	0x20000202
 8002c68:	2000020c 	.word	0x2000020c
 8002c6c:	20000210 	.word	0x20000210
 8002c70:	20000208 	.word	0x20000208

08002c74 <SystemClock_Config_HSI>:

void SystemClock_Config_HSI(uint8_t clock_freq) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b094      	sub	sp, #80	; 0x50
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init = {0};
 8002c7e:	f107 031c 	add.w	r3, r7, #28
 8002c82:	2230      	movs	r2, #48	; 0x30
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 f878 	bl	8006d7c <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 8002c8c:	f107 0308 	add.w	r3, r7, #8
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
	uint8_t flash_latency = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	//Using HSI to derive PLL
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8002caa:	2302      	movs	r3, #2
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq) {
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2b78      	cmp	r3, #120	; 0x78
 8002cb6:	d036      	beq.n	8002d26 <SystemClock_Config_HSI+0xb2>
 8002cb8:	2b78      	cmp	r3, #120	; 0x78
 8002cba:	dc77      	bgt.n	8002dac <SystemClock_Config_HSI+0x138>
 8002cbc:	2b32      	cmp	r3, #50	; 0x32
 8002cbe:	d002      	beq.n	8002cc6 <SystemClock_Config_HSI+0x52>
 8002cc0:	2b54      	cmp	r3, #84	; 0x54
 8002cc2:	d018      	beq.n	8002cf6 <SystemClock_Config_HSI+0x82>
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
		flash_latency = 3;
		break;
	}
	default:
		return;
 8002cc4:	e072      	b.n	8002dac <SystemClock_Config_HSI+0x138>
		osc_init.PLL.PLLM = 16;
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 100;
 8002cca:	2364      	movs	r3, #100	; 0x64
 8002ccc:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8002cd6:	230f      	movs	r3, #15
 8002cd8:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce6:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cec:	61bb      	str	r3, [r7, #24]
		flash_latency = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8002cf4:	e02f      	b.n	8002d56 <SystemClock_Config_HSI+0xe2>
		osc_init.PLL.PLLM = 16;
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 168;
 8002cfa:	23a8      	movs	r3, #168	; 0xa8
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8002d02:	2302      	movs	r3, #2
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8002d06:	230f      	movs	r3, #15
 8002d08:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d16:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1c:	61bb      	str	r3, [r7, #24]
		flash_latency = 2;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8002d24:	e017      	b.n	8002d56 <SystemClock_Config_HSI+0xe2>
		osc_init.PLL.PLLM = 16;
 8002d26:	2310      	movs	r3, #16
 8002d28:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 240;
 8002d2a:	23f0      	movs	r3, #240	; 0xf0
 8002d2c:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8002d32:	2302      	movs	r3, #2
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8002d36:	230f      	movs	r3, #15
 8002d38:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d46:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	61bb      	str	r3, [r7, #24]
		flash_latency = 3;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8002d54:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 8002d56:	f107 031c 	add.w	r3, r7, #28
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 ffe4 	bl	8004d28 <HAL_RCC_OscConfig>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <SystemClock_Config_HSI+0xf6>
		Error_Handler();
 8002d66:	f000 faf3 	bl	8003350 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) {
 8002d6a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f002 fa7b 	bl	8005270 <HAL_RCC_ClockConfig>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <SystemClock_Config_HSI+0x110>
		Error_Handler();
 8002d80:	f000 fae6 	bl	8003350 <Error_Handler>
	}

	//Configure the SYSTICK timer interrupt frequency for every 1ms
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002d84:	f002 fc42 	bl	800560c <HAL_RCC_GetHCLKFreq>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <SystemClock_Config_HSI+0x140>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 fd39 	bl	800480a <HAL_SYSTICK_Config>
	//Configure SYSTICK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002d98:	2004      	movs	r0, #4
 8002d9a:	f001 fd43 	bl	8004824 <HAL_SYSTICK_CLKSourceConfig>
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	f04f 30ff 	mov.w	r0, #4294967295
 8002da6:	f001 fd06 	bl	80047b6 <HAL_NVIC_SetPriority>
 8002daa:	e000      	b.n	8002dae <SystemClock_Config_HSI+0x13a>
		return;
 8002dac:	bf00      	nop
}
 8002dae:	3750      	adds	r7, #80	; 0x50
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	10624dd3 	.word	0x10624dd3

08002db8 <GPIO_Init>:

void GPIO_Init(void) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <GPIO_Init+0xcc>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a2c      	ldr	r2, [pc, #176]	; (8002e84 <GPIO_Init+0xcc>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <GPIO_Init+0xcc>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <GPIO_Init+0xcc>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <GPIO_Init+0xcc>)
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <GPIO_Init+0xcc>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <GPIO_Init+0xcc>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <GPIO_Init+0xcc>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <GPIO_Init+0xcc>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <GPIO_Init+0xcc>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	; (8002e84 <GPIO_Init+0xcc>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <GPIO_Init+0xcc>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, (LED1_Pin | LED2_Pin | LED3_Pin), GPIO_PIN_RESET);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f244 0181 	movw	r1, #16513	; 0x4081
 8002e34:	4814      	ldr	r0, [pc, #80]	; (8002e88 <GPIO_Init+0xd0>)
 8002e36:	f001 ff5d 	bl	8004cf4 <HAL_GPIO_WritePin>

	/* Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	4619      	mov	r1, r3
 8002e50:	480e      	ldr	r0, [pc, #56]	; (8002e8c <GPIO_Init+0xd4>)
 8002e52:	f001 fda3 	bl	800499c <HAL_GPIO_Init>

	/* Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = (LED1_Pin | LED2_Pin | LED3_Pin);
 8002e56:	f244 0381 	movw	r3, #16513	; 0x4081
 8002e5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4806      	ldr	r0, [pc, #24]	; (8002e88 <GPIO_Init+0xd0>)
 8002e70:	f001 fd94 	bl	800499c <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e74:	2028      	movs	r0, #40	; 0x28
 8002e76:	f001 fcba 	bl	80047ee <HAL_NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3728      	adds	r7, #40	; 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020400 	.word	0x40020400
 8002e8c:	40020800 	.word	0x40020800

08002e90 <UART_Init>:

void UART_Init(void) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	//USART2: PD5 PD6 for TinyBMS communication
	huart2.Instance = USART2;
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <UART_Init+0xa4>)
 8002e96:	4a28      	ldr	r2, [pc, #160]	; (8002f38 <UART_Init+0xa8>)
 8002e98:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <UART_Init+0xa4>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <UART_Init+0xa4>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <UART_Init+0xa4>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <UART_Init+0xa4>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <UART_Init+0xa4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002eba:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <UART_Init+0xa4>)
 8002ebc:	220c      	movs	r2, #12
 8002ebe:	615a      	str	r2, [r3, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <UART_Init+0xa4>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <UART_Init+0xa4>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <UART_Init+0xa4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart2) != HAL_OK) {
 8002ed2:	4818      	ldr	r0, [pc, #96]	; (8002f34 <UART_Init+0xa4>)
 8002ed4:	f002 fed2 	bl	8005c7c <HAL_UART_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <UART_Init+0x52>
		Error_Handler();
 8002ede:	f000 fa37 	bl	8003350 <Error_Handler>
	}

	//USART3: PD8 PD9 for ST-LINK debugging (printf ITM)
	huart3.Instance = USART3;
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <UART_Init+0xac>)
 8002ee4:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <UART_Init+0xb0>)
 8002ee6:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <UART_Init+0xac>)
 8002eea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eee:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <UART_Init+0xac>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002ef6:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <UART_Init+0xac>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <UART_Init+0xac>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <UART_Init+0xac>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <UART_Init+0xac>)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	615a      	str	r2, [r3, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <UART_Init+0xac>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <UART_Init+0xac>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <UART_Init+0xac>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart3) != HAL_OK) {
 8002f20:	4806      	ldr	r0, [pc, #24]	; (8002f3c <UART_Init+0xac>)
 8002f22:	f002 feab 	bl	8005c7c <HAL_UART_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <UART_Init+0xa0>
		Error_Handler();
 8002f2c:	f000 fa10 	bl	8003350 <Error_Handler>
	}
}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200002f0 	.word	0x200002f0
 8002f38:	40004400 	.word	0x40004400
 8002f3c:	20000220 	.word	0x20000220
 8002f40:	40004800 	.word	0x40004800

08002f44 <TIM_Init>:

void TIM_Init(void) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	//TIM6 - Basic Timer
	//Every 1 Second or 1Hz freq
	htim6.Instance = TIM6;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <TIM_Init+0x30>)
 8002f4a:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <TIM_Init+0x34>)
 8002f4c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 4999;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <TIM_Init+0x30>)
 8002f50:	f241 3287 	movw	r2, #4999	; 0x1387
 8002f54:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 10000-1;
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <TIM_Init+0x30>)
 8002f58:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f5c:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8002f5e:	4805      	ldr	r0, [pc, #20]	; (8002f74 <TIM_Init+0x30>)
 8002f60:	f002 fb88 	bl	8005674 <HAL_TIM_Base_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <TIM_Init+0x2a>
		Error_Handler();
 8002f6a:	f000 f9f1 	bl	8003350 <Error_Handler>
	}
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200002a4 	.word	0x200002a4
 8002f78:	40001000 	.word	0x40001000

08002f7c <CAN_Init>:

void CAN_Init(uint8_t can_bitrate) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	 *  	. TinyBMS CAN bitrate of 500kbit/s (cannot be changed by user)
	 *  . 3 Tx Mailboxes, 2 Rx FIFOs
	 *  . 28 Filter banks shared between CAN1 and CAN2 for dual CAN
	 *  . Max Bitrate of bxCAN is 1Mbit/s
	 * 	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	hcan1.Instance = CAN1;
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <CAN_Init+0x78>)
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <CAN_Init+0x7c>)
 8002f8a:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <CAN_Init+0x78>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 8002f92:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <CAN_Init+0x78>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <CAN_Init+0x78>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <CAN_Init+0x78>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <CAN_Init+0x78>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <CAN_Init+0x78>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <CAN_Init+0x78>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	775a      	strb	r2, [r3, #29]

	/* Settings related to CAN bit timings (http://www.bittiming.can-wiki.info/) */
	switch(can_bitrate) {
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10d      	bne.n	8002fd8 <CAN_Init+0x5c>
	*/
	/********* TinyBMS only supports 500kbit/s CAN speed *********/
	case CANBITRATE_500KBIT_50MHZ:
		/* ** 500kbit/s @ 50MHz SYSCLK ** */
		//prescaler = 5, num_TQ = 10, Seg1 = 8, Seg2 = 1, Sample point at 90.0, register CAN_BTR = 0x00070009
		hcan1.Init.Prescaler = 10;
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <CAN_Init+0x78>)
 8002fbe:	220a      	movs	r2, #10
 8002fc0:	605a      	str	r2, [r3, #4]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <CAN_Init+0x78>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <CAN_Init+0x78>)
 8002fca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002fce:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <CAN_Init+0x78>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
		break;
 8002fd6:	e001      	b.n	8002fdc <CAN_Init+0x60>
		hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
		hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
		break;
	*/
	default:
		Error_Handler();
 8002fd8:	f000 f9ba 	bl	8003350 <Error_Handler>
	}
	if(HAL_CAN_Init(&hcan1) != HAL_OK) {
 8002fdc:	4805      	ldr	r0, [pc, #20]	; (8002ff4 <CAN_Init+0x78>)
 8002fde:	f000 fc85 	bl	80038ec <HAL_CAN_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <CAN_Init+0x70>
		Error_Handler();
 8002fe8:	f000 f9b2 	bl	8003350 <Error_Handler>
	}
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000374 	.word	0x20000374
 8002ff8:	40006400 	.word	0x40006400

08002ffc <CAN_Filter_Config>:

void CAN_Filter_Config(void) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
	 *
	 * Note: Mask Mode can also be used to check:
	 * RTR = 0 (Data Frame)				IDE = 0 (11-bit STID)
	 * RTR = 1 (Remote Frame)			IDE = 1 (29-bit EXID)
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	CAN_FilterTypeDef can1_filter_init = {0};
 8003002:	463b      	mov	r3, r7
 8003004:	2228      	movs	r2, #40	; 0x28
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f003 feb7 	bl	8006d7c <memset>

	//TinyBMS Default Node ID: 0x01 (hard-coded)
	//ID List Mode: Allows TinyBMS Request/Response messages from bus
	can1_filter_init.FilterActivation = ENABLE;
 800300e:	2301      	movs	r3, #1
 8003010:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x4020; 	//IDLIST "Request to TinyBMS"
 800301a:	f244 0320 	movw	r3, #16416	; 0x4020
 800301e:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8003020:	2300      	movs	r3, #0
 8003022:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x4820; //IDLIST "Response from TinyBMS"
 8003024:	f644 0320 	movw	r3, #18464	; 0x4820
 8003028:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDLIST; //ID List Mode
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8003032:	2301      	movs	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK) {
 8003036:	463b      	mov	r3, r7
 8003038:	4619      	mov	r1, r3
 800303a:	4806      	ldr	r0, [pc, #24]	; (8003054 <CAN_Filter_Config+0x58>)
 800303c:	f000 fd52 	bl	8003ae4 <HAL_CAN_ConfigFilter>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <CAN_Filter_Config+0x4e>
		Error_Handler();
 8003046:	f000 f983 	bl	8003350 <Error_Handler>
	}
}
 800304a:	bf00      	nop
 800304c:	3728      	adds	r7, #40	; 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000374 	.word	0x20000374

08003058 <CAN_Begin>:

void CAN_Begin(void) {
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
	//Activate Notifications (Interrupts) by setting CAN_IER bits
	if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800305c:	f240 4103 	movw	r1, #1027	; 0x403
 8003060:	4808      	ldr	r0, [pc, #32]	; (8003084 <CAN_Begin+0x2c>)
 8003062:	f001 f878 	bl	8004156 <HAL_CAN_ActivateNotification>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <CAN_Begin+0x18>
		Error_Handler();
 800306c:	f000 f970 	bl	8003350 <Error_Handler>
	}

	//Start CAN
	if(HAL_CAN_Start(&hcan1) != HAL_OK) {
 8003070:	4804      	ldr	r0, [pc, #16]	; (8003084 <CAN_Begin+0x2c>)
 8003072:	f000 fe17 	bl	8003ca4 <HAL_CAN_Start>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <CAN_Begin+0x28>
		Error_Handler();
 800307c:	f000 f968 	bl	8003350 <Error_Handler>
	}
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000374 	.word	0x20000374

08003088 <CAN1_Tx>:

void CAN1_Tx(uint8_t device, uint8_t* message, uint8_t len) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
 8003094:	4613      	mov	r3, r2
 8003096:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	if(device == TINYBMS) {
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d129      	bne.n	80030f2 <CAN1_Tx+0x6a>
		TxHeader.DLC = len;				//Data Length Code (in Bytes)
 800309e:	79bb      	ldrb	r3, [r7, #6]
 80030a0:	623b      	str	r3, [r7, #32]
		if(message[0] == CAN_TBMS_WRITE_CAN_NODEID) 	//Standard ID (Write new nodeID.. Request StdID: 0x200 + user_input)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b29      	cmp	r3, #41	; 0x29
 80030a8:	d106      	bne.n	80030b8 <CAN1_Tx+0x30>
			TxHeader.StdId = (TINYBMS_CAN_REQUEST_BASE_STDID + message[1]);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	e00a      	b.n	80030ce <CAN1_Tx+0x46>
		else if(message[0] == CAN_TBMS_READ_CAN_NODEID) //Standard ID (Read current nodeID.. Request StdID: 0x200)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b28      	cmp	r3, #40	; 0x28
 80030be:	d103      	bne.n	80030c8 <CAN1_Tx+0x40>
			TxHeader.StdId = TINYBMS_CAN_REQUEST_BASE_STDID;
 80030c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e002      	b.n	80030ce <CAN1_Tx+0x46>
		else 											//Standard ID (Otherwise.. Request StdID: 0x201-0x23F)
			TxHeader.StdId = TinybmsStdID_Request;
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <CAN1_Tx+0xa8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD; 		//Standard or Extended ID type
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;	//Remote Transmission Request
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 80030d6:	f107 030c 	add.w	r3, r7, #12
 80030da:	f107 0110 	add.w	r1, r7, #16
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4814      	ldr	r0, [pc, #80]	; (8003134 <CAN1_Tx+0xac>)
 80030e2:	f000 fe23 	bl	8003d2c <HAL_CAN_AddTxMessage>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01d      	beq.n	8003128 <CAN1_Tx+0xa0>
			Error_Handler();
 80030ec:	f000 f930 	bl	8003350 <Error_Handler>
			Error_Handler();
		}
	} else {
		Error_Handler();
	}
}
 80030f0:	e01a      	b.n	8003128 <CAN1_Tx+0xa0>
	} else if(device == ELCONCHARGER2) {
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d115      	bne.n	8003124 <CAN1_Tx+0x9c>
		TxHeader.DLC = 8;				//Data Length Code (in Bytes)
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
		TxHeader.ExtId = 0x1806E5F4;	//Extended ID
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <CAN1_Tx+0xb0>)
 80030fe:	617b      	str	r3, [r7, #20]
		TxHeader.IDE = CAN_ID_EXT; 		//Standard or Extended ID type
 8003100:	2304      	movs	r3, #4
 8003102:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;	//Remote Transmission Request
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	f107 0110 	add.w	r1, r7, #16
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	4808      	ldr	r0, [pc, #32]	; (8003134 <CAN1_Tx+0xac>)
 8003114:	f000 fe0a 	bl	8003d2c <HAL_CAN_AddTxMessage>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <CAN1_Tx+0xa0>
			Error_Handler();
 800311e:	f000 f917 	bl	8003350 <Error_Handler>
}
 8003122:	e001      	b.n	8003128 <CAN1_Tx+0xa0>
		Error_Handler();
 8003124:	f000 f914 	bl	8003350 <Error_Handler>
}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000000 	.word	0x20000000
 8003134:	20000374 	.word	0x20000374
 8003138:	1806e5f4 	.word	0x1806e5f4

0800313c <HAL_UART_TxCpltCallback>:
	default:
		break;
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a04      	ldr	r2, [pc, #16]	; (800315c <HAL_UART_TxCpltCallback+0x20>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d102      	bne.n	8003154 <HAL_UART_TxCpltCallback+0x18>
		printf("HAL_UART_TxCpltCallback USART2\r\n");
 800314e:	4804      	ldr	r0, [pc, #16]	; (8003160 <HAL_UART_TxCpltCallback+0x24>)
 8003150:	f004 fb0c 	bl	800776c <puts>
	}
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40004400 	.word	0x40004400
 8003160:	0800bc2c 	.word	0x0800bc2c

08003164 <HAL_UART_ErrorCallback>:
	if(huart->Instance == USART2) {
		printf("HAL_UART_RxCpltCallback USART2\r\n");
	}
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_UART_ErrorCallback+0x20>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d102      	bne.n	800317c <HAL_UART_ErrorCallback+0x18>
		printf("HAL_UART_ErrorCallback USART2\r\n");
 8003176:	4804      	ldr	r0, [pc, #16]	; (8003188 <HAL_UART_ErrorCallback+0x24>)
 8003178:	f004 faf8 	bl	800776c <puts>
	}
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40004400 	.word	0x40004400
 8003188:	0800bc6c 	.word	0x0800bc6c

0800318c <HAL_CAN_TxMailbox0CompleteCallback>:
	if(huart->Instance == USART2) {
		printf("HAL_UART_AbortCpltCallback USART2\r\n");
	}
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b090      	sub	sp, #64	; 0x40
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d116      	bne.n	80031cc <HAL_CAN_TxMailbox0CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox0CompleteCallback CAN1\r\n");
 800319e:	480e      	ldr	r0, [pc, #56]	; (80031d8 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 80031a0:	f004 fae4 	bl	800776c <puts>
		sprintf(msg,"Message Transmitted:M0\r\n");
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	490c      	ldr	r1, [pc, #48]	; (80031dc <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 80031aa:	4618      	mov	r0, r3
 80031ac:	f004 fae6 	bl	800777c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f82b 	bl	8000210 <strlen>
 80031ba:	4603      	mov	r3, r0
 80031bc:	b29a      	uxth	r2, r3
 80031be:	f107 010c 	add.w	r1, r7, #12
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	4806      	ldr	r0, [pc, #24]	; (80031e0 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 80031c8:	f002 fda6 	bl	8005d18 <HAL_UART_Transmit>
	}
}
 80031cc:	bf00      	nop
 80031ce:	3740      	adds	r7, #64	; 0x40
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40006400 	.word	0x40006400
 80031d8:	0800bd08 	.word	0x0800bd08
 80031dc:	0800bd34 	.word	0x0800bd34
 80031e0:	200002f0 	.word	0x200002f0

080031e4 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b090      	sub	sp, #64	; 0x40
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d116      	bne.n	8003224 <HAL_CAN_TxMailbox1CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox1CompleteCallback CAN1\r\n");
 80031f6:	480e      	ldr	r0, [pc, #56]	; (8003230 <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 80031f8:	f004 fab8 	bl	800776c <puts>
		sprintf(msg,"Message Transmitted:M1\r\n");
 80031fc:	f107 030c 	add.w	r3, r7, #12
 8003200:	490c      	ldr	r1, [pc, #48]	; (8003234 <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 8003202:	4618      	mov	r0, r3
 8003204:	f004 faba 	bl	800777c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4618      	mov	r0, r3
 800320e:	f7fc ffff 	bl	8000210 <strlen>
 8003212:	4603      	mov	r3, r0
 8003214:	b29a      	uxth	r2, r3
 8003216:	f107 010c 	add.w	r1, r7, #12
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	4806      	ldr	r0, [pc, #24]	; (8003238 <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 8003220:	f002 fd7a 	bl	8005d18 <HAL_UART_Transmit>
	}
}
 8003224:	bf00      	nop
 8003226:	3740      	adds	r7, #64	; 0x40
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40006400 	.word	0x40006400
 8003230:	0800bd50 	.word	0x0800bd50
 8003234:	0800bd7c 	.word	0x0800bd7c
 8003238:	200002f0 	.word	0x200002f0

0800323c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b090      	sub	sp, #64	; 0x40
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d116      	bne.n	800327c <HAL_CAN_TxMailbox2CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox2CompleteCallback CAN1\r\n");
 800324e:	480e      	ldr	r0, [pc, #56]	; (8003288 <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 8003250:	f004 fa8c 	bl	800776c <puts>
		sprintf(msg,"Message Transmitted:M2\r\n");
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fa8e 	bl	800777c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	4618      	mov	r0, r3
 8003266:	f7fc ffd3 	bl	8000210 <strlen>
 800326a:	4603      	mov	r3, r0
 800326c:	b29a      	uxth	r2, r3
 800326e:	f107 010c 	add.w	r1, r7, #12
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	4806      	ldr	r0, [pc, #24]	; (8003290 <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 8003278:	f002 fd4e 	bl	8005d18 <HAL_UART_Transmit>
	}
}
 800327c:	bf00      	nop
 800327e:	3740      	adds	r7, #64	; 0x40
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40006400 	.word	0x40006400
 8003288:	0800bd98 	.word	0x0800bd98
 800328c:	0800bdc4 	.word	0x0800bdc4
 8003290:	200002f0 	.word	0x200002f0

08003294 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10c      	bne.n	80032c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		//Deactivate Notifications before getting Rx Message
		if(HAL_CAN_DeactivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80032a6:	f240 4103 	movw	r1, #1027	; 0x403
 80032aa:	4808      	ldr	r0, [pc, #32]	; (80032cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80032ac:	f000 ff79 	bl	80041a2 <HAL_CAN_DeactivateNotification>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
			Error_Handler();
 80032b6:	f000 f84b 	bl	8003350 <Error_Handler>
		}

		printf("HAL_CAN_RxFifo0MsgPendingCallback CAN1\r\n");
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80032bc:	f004 fa56 	bl	800776c <puts>
	}
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40006400 	.word	0x40006400
 80032cc:	20000374 	.word	0x20000374
 80032d0:	0800bde0 	.word	0x0800bde0

080032d4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b090      	sub	sp, #64	; 0x40
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0e      	ldr	r2, [pc, #56]	; (800331c <HAL_CAN_ErrorCallback+0x48>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d116      	bne.n	8003314 <HAL_CAN_ErrorCallback+0x40>
		char msg[50];
		printf("HAL_CAN_ErrorCallback CAN1\r\n");
 80032e6:	480e      	ldr	r0, [pc, #56]	; (8003320 <HAL_CAN_ErrorCallback+0x4c>)
 80032e8:	f004 fa40 	bl	800776c <puts>
		sprintf(msg, "CAN Error Detected\r\n");
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	490c      	ldr	r1, [pc, #48]	; (8003324 <HAL_CAN_ErrorCallback+0x50>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 fa42 	bl	800777c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80032f8:	f107 030c 	add.w	r3, r7, #12
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fc ff87 	bl	8000210 <strlen>
 8003302:	4603      	mov	r3, r0
 8003304:	b29a      	uxth	r2, r3
 8003306:	f107 010c 	add.w	r1, r7, #12
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	4806      	ldr	r0, [pc, #24]	; (8003328 <HAL_CAN_ErrorCallback+0x54>)
 8003310:	f002 fd02 	bl	8005d18 <HAL_UART_Transmit>
	}
}
 8003314:	bf00      	nop
 8003316:	3740      	adds	r7, #64	; 0x40
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40006400 	.word	0x40006400
 8003320:	0800be08 	.word	0x0800be08
 8003324:	0800be24 	.word	0x0800be24
 8003328:	200002f0 	.word	0x200002f0

0800332c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_TIM_PeriodElapsedCallback+0x16>
		//Every 1 second during Charging, send message to ElCon charger
		ElCon_SendMsg();
 800333e:	f7ff fc09 	bl	8002b54 <ElCon_SendMsg>
	}
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40001000 	.word	0x40001000

08003350 <Error_Handler>:

void Error_Handler(void) {
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
	while(1);
 8003354:	e7fe      	b.n	8003354 <Error_Handler+0x4>
	...

08003358 <HAL_MspInit>:
* @date 03-02-2022
***********************************************/

#include "main.h"

void HAL_MspInit(void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0

	/* Low level processor specific inits */
	__HAL_RCC_PWR_CLK_ENABLE();
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_MspInit+0x74>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <HAL_MspInit+0x74>)
 8003364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
 800336a:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_MspInit+0x74>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_MspInit+0x74>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_MspInit+0x74>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003380:	6453      	str	r3, [r2, #68]	; 0x44
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_MspInit+0x74>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	683b      	ldr	r3, [r7, #0]

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //default setting
 800338e:	2003      	movs	r0, #3
 8003390:	f001 fa06 	bl	80047a0 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 8003394:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_MspInit+0x78>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <HAL_MspInit+0x78>)
 800339a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800339e:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80033a0:	2200      	movs	r2, #0
 80033a2:	2100      	movs	r1, #0
 80033a4:	f06f 000b 	mvn.w	r0, #11
 80033a8:	f001 fa05 	bl	80047b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	f06f 000a 	mvn.w	r0, #10
 80033b4:	f001 f9ff 	bl	80047b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2100      	movs	r1, #0
 80033bc:	f06f 0009 	mvn.w	r0, #9
 80033c0:	f001 f9f9 	bl	80047b6 <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]

	if(hcan->Instance == CAN1) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <HAL_CAN_MspInit+0xbc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d147      	bne.n	8003486 <HAL_CAN_MspInit+0xb2>
		__HAL_RCC_CAN1_CLK_ENABLE();
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_CAN_MspInit+0xc0>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a26      	ldr	r2, [pc, #152]	; (8003494 <HAL_CAN_MspInit+0xc0>)
 80033fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_CAN_MspInit+0xc0>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800340e:	4b21      	ldr	r3, [pc, #132]	; (8003494 <HAL_CAN_MspInit+0xc0>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a20      	ldr	r2, [pc, #128]	; (8003494 <HAL_CAN_MspInit+0xc0>)
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_CAN_MspInit+0xc0>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

		/** CAN1 GPIO Configuration
			PD0     ------> CAN1_RX
			PD1     ------> CAN1_TX
		*/
		GPIO_InitStruct.Pin = (CAN1_RX_PIN | CAN1_TX_PIN);
 8003426:	2303      	movs	r3, #3
 8003428:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003432:	2303      	movs	r3, #3
 8003434:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003436:	2309      	movs	r3, #9
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(CAN1_GPIO_Port, &GPIO_InitStruct);
 800343a:	f107 0314 	add.w	r3, r7, #20
 800343e:	4619      	mov	r1, r3
 8003440:	4815      	ldr	r0, [pc, #84]	; (8003498 <HAL_CAN_MspInit+0xc4>)
 8003442:	f001 faab 	bl	800499c <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	210f      	movs	r1, #15
 800344a:	2013      	movs	r0, #19
 800344c:	f001 f9b3 	bl	80047b6 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	210f      	movs	r1, #15
 8003454:	2014      	movs	r0, #20
 8003456:	f001 f9ae 	bl	80047b6 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	210f      	movs	r1, #15
 800345e:	2015      	movs	r0, #21
 8003460:	f001 f9a9 	bl	80047b6 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	210f      	movs	r1, #15
 8003468:	2016      	movs	r0, #22
 800346a:	f001 f9a4 	bl	80047b6 <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800346e:	2013      	movs	r0, #19
 8003470:	f001 f9bd 	bl	80047ee <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003474:	2014      	movs	r0, #20
 8003476:	f001 f9ba 	bl	80047ee <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800347a:	2015      	movs	r0, #21
 800347c:	f001 f9b7 	bl	80047ee <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003480:	2016      	movs	r0, #22
 8003482:	f001 f9b4 	bl	80047ee <HAL_NVIC_EnableIRQ>
	}
}
 8003486:	bf00      	nop
 8003488:	3728      	adds	r7, #40	; 0x28
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40006400 	.word	0x40006400
 8003494:	40023800 	.word	0x40023800
 8003498:	40020c00 	.word	0x40020c00

0800349c <HAL_UART_MspInit>:
		HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
		HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 031c 	add.w	r3, r7, #28
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]

	if(huart->Instance == USART2) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a32      	ldr	r2, [pc, #200]	; (8003584 <HAL_UART_MspInit+0xe8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d130      	bne.n	8003520 <HAL_UART_MspInit+0x84>
		__HAL_RCC_USART2_CLK_ENABLE();
 80034be:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_UART_MspInit+0xec>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <HAL_UART_MspInit+0xec>)
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_UART_MspInit+0xec>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_UART_MspInit+0xec>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_UART_MspInit+0xec>)
 80034dc:	f043 0308 	orr.w	r3, r3, #8
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_UART_MspInit+0xec>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
		 *  USART2 GPIO Configuration
			PD5     ------> USART2_TX
			PD6     ------> USART2_RX
		*/

		GPIO_InitStruct.Pin = (USART2_TX_Pin | USART2_RX_Pin);
 80034ee:	2360      	movs	r3, #96	; 0x60
 80034f0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fa:	2303      	movs	r3, #3
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034fe:	2307      	movs	r3, #7
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART2_GPIO_Port, &GPIO_InitStruct);
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	4619      	mov	r1, r3
 8003508:	4820      	ldr	r0, [pc, #128]	; (800358c <HAL_UART_MspInit+0xf0>)
 800350a:	f001 fa47 	bl	800499c <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	210f      	movs	r1, #15
 8003512:	2026      	movs	r0, #38	; 0x26
 8003514:	f001 f94f 	bl	80047b6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003518:	2026      	movs	r0, #38	; 0x26
 800351a:	f001 f968 	bl	80047ee <HAL_NVIC_EnableIRQ>
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
	}
}
 800351e:	e02d      	b.n	800357c <HAL_UART_MspInit+0xe0>
	} else if(huart->Instance == USART3) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1a      	ldr	r2, [pc, #104]	; (8003590 <HAL_UART_MspInit+0xf4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d128      	bne.n	800357c <HAL_UART_MspInit+0xe0>
		__HAL_RCC_USART3_CLK_ENABLE();
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_UART_MspInit+0xec>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a16      	ldr	r2, [pc, #88]	; (8003588 <HAL_UART_MspInit+0xec>)
 8003530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_UART_MspInit+0xec>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_UART_MspInit+0xec>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <HAL_UART_MspInit+0xec>)
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_UART_MspInit+0xec>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = (USART3_TX_Pin | USART3_RX_Pin);
 800355a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800355e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003564:	2301      	movs	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003568:	2303      	movs	r3, #3
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800356c:	2307      	movs	r3, #7
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
 8003570:	f107 031c 	add.w	r3, r7, #28
 8003574:	4619      	mov	r1, r3
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <HAL_UART_MspInit+0xf0>)
 8003578:	f001 fa10 	bl	800499c <HAL_GPIO_Init>
}
 800357c:	bf00      	nop
 800357e:	3730      	adds	r7, #48	; 0x30
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40004400 	.word	0x40004400
 8003588:	40023800 	.word	0x40023800
 800358c:	40020c00 	.word	0x40020c00
 8003590:	40004800 	.word	0x40004800

08003594 <HAL_TIM_Base_MspInit>:
		*/
		HAL_GPIO_DeInit(USART3_GPIO_Port, (USART3_TX_Pin | USART3_RX_Pin));
	}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <HAL_TIM_Base_MspInit+0x44>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <HAL_TIM_Base_MspInit+0x3a>
		//1. Enable TIM6 Clock
		__HAL_RCC_TIM6_CLK_ENABLE();
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_TIM_Base_MspInit+0x48>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <HAL_TIM_Base_MspInit+0x48>)
 80035ac:	f043 0310 	orr.w	r3, r3, #16
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_TIM_Base_MspInit+0x48>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

		//2. Enable TIM6 IRQ
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035be:	2036      	movs	r0, #54	; 0x36
 80035c0:	f001 f915 	bl	80047ee <HAL_NVIC_EnableIRQ>

		//3. Setup TIM6_DAC_IRQn priority
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	210f      	movs	r1, #15
 80035c8:	2036      	movs	r0, #54	; 0x36
 80035ca:	f001 f8f4 	bl	80047b6 <HAL_NVIC_SetPriority>
	}
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40001000 	.word	0x40001000
 80035dc:	40023800 	.word	0x40023800

080035e0 <ITM_SendChar>:
#define ITM_TER         	*((volatile uint32_t*) 0xE0000E00 )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TCR            	*((volatile uint32_t*) 0xE0000E80 )

void ITM_SendChar(uint8_t ch)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
    /* Stimulus Port #N is enabled when bit STIMENA[N] is set*/
	ITM_TER |= ( 1 << 0);
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <ITM_SendChar+0x48>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <ITM_SendChar+0x48>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6013      	str	r3, [r2, #0]

	/*Enable ITM. This is the master enable and must be set to allow
	writes to all ITM registers, including the control register. */
	ITM_TCR |= ( 1 << 0);
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <ITM_SendChar+0x4c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <ITM_SendChar+0x4c>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8003602:	bf00      	nop
 8003604:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f8      	beq.n	8003604 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8003612:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	6013      	str	r3, [r2, #0]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e0000e00 	.word	0xe0000e00
 800362c:	e0000e80 	.word	0xe0000e80

08003630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
	return 1;
 8003634:	2301      	movs	r3, #1
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <_kill>:

int _kill(int pid, int sig)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800364a:	f003 fb6d 	bl	8006d28 <__errno>
 800364e:	4603      	mov	r3, r0
 8003650:	2216      	movs	r2, #22
 8003652:	601a      	str	r2, [r3, #0]
	return -1;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <_exit>:

void _exit (int status)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003668:	f04f 31ff 	mov.w	r1, #4294967295
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ffe7 	bl	8003640 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003672:	e7fe      	b.n	8003672 <_exit+0x12>

08003674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e00a      	b.n	800369c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003686:	f3af 8000 	nop.w
 800368a:	4601      	mov	r1, r0
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	60ba      	str	r2, [r7, #8]
 8003692:	b2ca      	uxtb	r2, r1
 8003694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3301      	adds	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	dbf0      	blt.n	8003686 <_read+0x12>
	}

return len;
 80036a4:	687b      	ldr	r3, [r7, #4]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	e009      	b.n	80036d4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	60ba      	str	r2, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff89 	bl	80035e0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	3301      	adds	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	dbf1      	blt.n	80036c0 <_write+0x12>
	}
	return len;
 80036dc:	687b      	ldr	r3, [r7, #4]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_close>:

int _close(int file)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
	return -1;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800370e:	605a      	str	r2, [r3, #4]
	return 0;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <_isatty>:

int _isatty(int file)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
	return 1;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
	return 0;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <_sbrk+0x5c>)
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <_sbrk+0x60>)
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <_sbrk+0x64>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800376c:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <_sbrk+0x64>)
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <_sbrk+0x68>)
 8003770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <_sbrk+0x64>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d207      	bcs.n	8003790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003780:	f003 fad2 	bl	8006d28 <__errno>
 8003784:	4603      	mov	r3, r0
 8003786:	220c      	movs	r2, #12
 8003788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800378a:	f04f 33ff 	mov.w	r3, #4294967295
 800378e:	e009      	b.n	80037a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <_sbrk+0x64>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <_sbrk+0x64>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	4a05      	ldr	r2, [pc, #20]	; (80037b4 <_sbrk+0x64>)
 80037a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20050000 	.word	0x20050000
 80037b0:	00000400 	.word	0x00000400
 80037b4:	20000214 	.word	0x20000214
 80037b8:	200003d0 	.word	0x200003d0

080037bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <SystemInit+0x20>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	4a05      	ldr	r2, [pc, #20]	; (80037dc <SystemInit+0x20>)
 80037c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037e4:	480d      	ldr	r0, [pc, #52]	; (800381c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037e6:	490e      	ldr	r1, [pc, #56]	; (8003820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037e8:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037ec:	e002      	b.n	80037f4 <LoopCopyDataInit>

080037ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037f2:	3304      	adds	r3, #4

080037f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037f8:	d3f9      	bcc.n	80037ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037fa:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037fc:	4c0b      	ldr	r4, [pc, #44]	; (800382c <LoopFillZerobss+0x26>)
  movs r3, #0
 80037fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003800:	e001      	b.n	8003806 <LoopFillZerobss>

08003802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003804:	3204      	adds	r2, #4

08003806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003808:	d3fb      	bcc.n	8003802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800380a:	f7ff ffd7 	bl	80037bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800380e:	f003 fa91 	bl	8006d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003812:	f7ff f8dd 	bl	80029d0 <main>
  bx  lr    
 8003816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003818:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800381c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003820:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003824:	0800c244 	.word	0x0800c244
  ldr r2, =_sbss
 8003828:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800382c:	200003cc 	.word	0x200003cc

08003830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003830:	e7fe      	b.n	8003830 <ADC_IRQHandler>

08003832 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003836:	2003      	movs	r0, #3
 8003838:	f000 ffb2 	bl	80047a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800383c:	2000      	movs	r0, #0
 800383e:	f000 f805 	bl	800384c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003842:	f7ff fd89 	bl	8003358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_InitTick+0x54>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_InitTick+0x58>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	4619      	mov	r1, r3
 800385e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003862:	fbb3 f3f1 	udiv	r3, r3, r1
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	4618      	mov	r0, r3
 800386c:	f000 ffcd 	bl	800480a <HAL_SYSTICK_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e00e      	b.n	8003898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b0f      	cmp	r3, #15
 800387e:	d80a      	bhi.n	8003896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003880:	2200      	movs	r2, #0
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	f000 ff95 	bl	80047b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800388c:	4a06      	ldr	r2, [pc, #24]	; (80038a8 <HAL_InitTick+0x5c>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000008 	.word	0x20000008
 80038a4:	20000010 	.word	0x20000010
 80038a8:	2000000c 	.word	0x2000000c

080038ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_IncTick+0x20>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_IncTick+0x24>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4413      	add	r3, r2
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_IncTick+0x24>)
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000010 	.word	0x20000010
 80038d0:	200003b8 	.word	0x200003b8

080038d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return uwTick;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_GetTick+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	200003b8 	.word	0x200003b8

080038ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0ed      	b.n	8003ada <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fd62 	bl	80033d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003920:	f7ff ffd8 	bl	80038d4 <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003926:	e012      	b.n	800394e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003928:	f7ff ffd4 	bl	80038d4 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b0a      	cmp	r3, #10
 8003934:	d90b      	bls.n	800394e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2205      	movs	r2, #5
 8003946:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0c5      	b.n	8003ada <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0e5      	beq.n	8003928 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0202 	bic.w	r2, r2, #2
 800396a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800396c:	f7ff ffb2 	bl	80038d4 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003972:	e012      	b.n	800399a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003974:	f7ff ffae 	bl	80038d4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b0a      	cmp	r3, #10
 8003980:	d90b      	bls.n	800399a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2205      	movs	r2, #5
 8003992:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e09f      	b.n	8003ada <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7e1b      	ldrb	r3, [r3, #24]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d108      	bne.n	80039c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e007      	b.n	80039d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7e5b      	ldrb	r3, [r3, #25]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d108      	bne.n	80039ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e007      	b.n	80039fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7e9b      	ldrb	r3, [r3, #26]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d108      	bne.n	8003a16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e007      	b.n	8003a26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0220 	bic.w	r2, r2, #32
 8003a24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7edb      	ldrb	r3, [r3, #27]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0210 	bic.w	r2, r2, #16
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e007      	b.n	8003a50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0210 	orr.w	r2, r2, #16
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7f1b      	ldrb	r3, [r3, #28]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d108      	bne.n	8003a6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0208 	orr.w	r2, r2, #8
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e007      	b.n	8003a7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0208 	bic.w	r2, r2, #8
 8003a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7f5b      	ldrb	r3, [r3, #29]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d108      	bne.n	8003a94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0204 	orr.w	r2, r2, #4
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e007      	b.n	8003aa4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	ea42 0103 	orr.w	r1, r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	1e5a      	subs	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003afa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d003      	beq.n	8003b0a <HAL_CAN_ConfigFilter+0x26>
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	f040 80be 	bne.w	8003c86 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_CAN_ConfigFilter+0x1bc>)
 8003b0c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b14:	f043 0201 	orr.w	r2, r3, #1
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d123      	bne.n	8003bb4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3248      	adds	r2, #72	; 0x48
 8003b94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ba8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	3348      	adds	r3, #72	; 0x48
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d122      	bne.n	8003c02 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bdc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3248      	adds	r2, #72	; 0x48
 8003be2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bf6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bf8:	6979      	ldr	r1, [r7, #20]
 8003bfa:	3348      	adds	r3, #72	; 0x48
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	440b      	add	r3, r1
 8003c00:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	401a      	ands	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c1c:	e007      	b.n	8003c2e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	401a      	ands	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c48:	e007      	b.n	8003c5a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c78:	f023 0201 	bic.w	r2, r3, #1
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e006      	b.n	8003c94 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40006400 	.word	0x40006400

08003ca4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d12e      	bne.n	8003d16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd0:	f7ff fe00 	bl	80038d4 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cd6:	e012      	b.n	8003cfe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cd8:	f7ff fdfc 	bl	80038d4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b0a      	cmp	r3, #10
 8003ce4:	d90b      	bls.n	8003cfe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2205      	movs	r2, #5
 8003cf6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e012      	b.n	8003d24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e006      	b.n	8003d24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b089      	sub	sp, #36	; 0x24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d40:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d003      	beq.n	8003d58 <HAL_CAN_AddTxMessage+0x2c>
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	f040 80b8 	bne.w	8003ec8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a0 	beq.w	8003eb8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	0e1b      	lsrs	r3, r3, #24
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d907      	bls.n	8003d98 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e09e      	b.n	8003ed6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	6809      	ldr	r1, [r1, #0]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3318      	adds	r3, #24
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	440b      	add	r3, r1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e00f      	b.n	8003de6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003dd0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003dda:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3318      	adds	r3, #24
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	440b      	add	r3, r1
 8003de4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3318      	adds	r3, #24
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	440b      	add	r3, r1
 8003df6:	3304      	adds	r3, #4
 8003df8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	7d1b      	ldrb	r3, [r3, #20]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d111      	bne.n	8003e26 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	3318      	adds	r3, #24
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3304      	adds	r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	6811      	ldr	r1, [r2, #0]
 8003e16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3318      	adds	r3, #24
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	440b      	add	r3, r1
 8003e22:	3304      	adds	r3, #4
 8003e24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3307      	adds	r3, #7
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	061a      	lsls	r2, r3, #24
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3306      	adds	r3, #6
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3305      	adds	r3, #5
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	4313      	orrs	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	3204      	adds	r2, #4
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	4610      	mov	r0, r2
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	6811      	ldr	r1, [r2, #0]
 8003e4e:	ea43 0200 	orr.w	r2, r3, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	440b      	add	r3, r1
 8003e58:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003e5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3303      	adds	r3, #3
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	061a      	lsls	r2, r3, #24
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3302      	adds	r3, #2
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3301      	adds	r3, #1
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	7812      	ldrb	r2, [r2, #0]
 8003e7e:	4610      	mov	r0, r2
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	6811      	ldr	r1, [r2, #0]
 8003e84:	ea43 0200 	orr.w	r2, r3, r0
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	440b      	add	r3, r1
 8003e8e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003e92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	4413      	add	r3, r2
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	6811      	ldr	r1, [r2, #0]
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3318      	adds	r3, #24
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	440b      	add	r3, r1
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e00e      	b.n	8003ed6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e006      	b.n	8003ed6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3724      	adds	r7, #36	; 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b087      	sub	sp, #28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ef6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d003      	beq.n	8003f06 <HAL_CAN_GetRxMessage+0x24>
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	f040 80f3 	bne.w	80040ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10e      	bne.n	8003f2a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0e7      	b.n	80040fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0d8      	b.n	80040fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	331b      	adds	r3, #27
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	4413      	add	r3, r2
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0204 	and.w	r2, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10c      	bne.n	8003f80 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	331b      	adds	r3, #27
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	4413      	add	r3, r2
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0d5b      	lsrs	r3, r3, #21
 8003f76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e00b      	b.n	8003f98 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	331b      	adds	r3, #27
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	4413      	add	r3, r2
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	08db      	lsrs	r3, r3, #3
 8003f90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	331b      	adds	r3, #27
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	4413      	add	r3, r2
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0202 	and.w	r2, r3, #2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	331b      	adds	r3, #27
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	3304      	adds	r3, #4
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 020f 	and.w	r2, r3, #15
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	331b      	adds	r3, #27
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	331b      	adds	r3, #27
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	4413      	add	r3, r2
 8003fea:	3304      	adds	r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	4413      	add	r3, r2
 8004016:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0a1a      	lsrs	r2, r3, #8
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	4413      	add	r3, r2
 8004030:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	0c1a      	lsrs	r2, r3, #16
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	3302      	adds	r3, #2
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	4413      	add	r3, r2
 800404a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	0e1a      	lsrs	r2, r3, #24
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	3303      	adds	r3, #3
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	4413      	add	r3, r2
 8004064:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	3304      	adds	r3, #4
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	4413      	add	r3, r2
 800407c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	0a1a      	lsrs	r2, r3, #8
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	3305      	adds	r3, #5
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	4413      	add	r3, r2
 8004096:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	0c1a      	lsrs	r2, r3, #16
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	3306      	adds	r3, #6
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0e1a      	lsrs	r2, r3, #24
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	3307      	adds	r3, #7
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d108      	bne.n	80040d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0220 	orr.w	r2, r2, #32
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	e007      	b.n	80040e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0220 	orr.w	r2, r2, #32
 80040e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e006      	b.n	80040fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800411c:	7afb      	ldrb	r3, [r7, #11]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d002      	beq.n	8004128 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d10f      	bne.n	8004148 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e005      	b.n	8004148 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004148:	68fb      	ldr	r3, [r7, #12]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004166:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d002      	beq.n	8004174 <HAL_CAN_ActivateNotification+0x1e>
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d109      	bne.n	8004188 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6959      	ldr	r1, [r3, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e006      	b.n	8004196 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d002      	beq.n	80041c0 <HAL_CAN_DeactivateNotification+0x1e>
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d10a      	bne.n	80041d6 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6959      	ldr	r1, [r3, #20]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	43da      	mvns	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	400a      	ands	r2, r1
 80041d0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e006      	b.n	80041e4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d07c      	beq.n	8004330 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2201      	movs	r2, #1
 8004246:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fe ff9a 	bl	800318c <HAL_CAN_TxMailbox0CompleteCallback>
 8004258:	e016      	b.n	8004288 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d004      	beq.n	800426e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
 800426c:	e00c      	b.n	8004288 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
 8004280:	e002      	b.n	8004288 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f96b 	bl	800455e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d024      	beq.n	80042dc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800429a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fe ff9c 	bl	80031e4 <HAL_CAN_TxMailbox1CompleteCallback>
 80042ac:	e016      	b.n	80042dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d004      	beq.n	80042c2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
 80042c0:	e00c      	b.n	80042dc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	e002      	b.n	80042dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f94b 	bl	8004572 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d024      	beq.n	8004330 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fe ff9e 	bl	800323c <HAL_CAN_TxMailbox2CompleteCallback>
 8004300:	e016      	b.n	8004330 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	e00c      	b.n	8004330 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
 8004328:	e002      	b.n	8004330 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f92b 	bl	8004586 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2210      	movs	r2, #16
 8004352:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d006      	beq.n	8004376 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2208      	movs	r2, #8
 800436e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f912 	bl	800459a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe ff80 	bl	8003294 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00c      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2210      	movs	r2, #16
 80043b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2208      	movs	r2, #8
 80043d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f8f4 	bl	80045c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f8db 	bl	80045ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d006      	beq.n	800441a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2210      	movs	r2, #16
 8004412:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f8de 	bl	80045d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2208      	movs	r2, #8
 8004434:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8d7 	bl	80045ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d07b      	beq.n	800453e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d072      	beq.n	8004536 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	f043 0302 	orr.w	r3, r3, #2
 8004486:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	f043 0304 	orr.w	r3, r3, #4
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d043      	beq.n	8004536 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d03e      	beq.n	8004536 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044be:	2b60      	cmp	r3, #96	; 0x60
 80044c0:	d02b      	beq.n	800451a <HAL_CAN_IRQHandler+0x32a>
 80044c2:	2b60      	cmp	r3, #96	; 0x60
 80044c4:	d82e      	bhi.n	8004524 <HAL_CAN_IRQHandler+0x334>
 80044c6:	2b50      	cmp	r3, #80	; 0x50
 80044c8:	d022      	beq.n	8004510 <HAL_CAN_IRQHandler+0x320>
 80044ca:	2b50      	cmp	r3, #80	; 0x50
 80044cc:	d82a      	bhi.n	8004524 <HAL_CAN_IRQHandler+0x334>
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d019      	beq.n	8004506 <HAL_CAN_IRQHandler+0x316>
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d826      	bhi.n	8004524 <HAL_CAN_IRQHandler+0x334>
 80044d6:	2b30      	cmp	r3, #48	; 0x30
 80044d8:	d010      	beq.n	80044fc <HAL_CAN_IRQHandler+0x30c>
 80044da:	2b30      	cmp	r3, #48	; 0x30
 80044dc:	d822      	bhi.n	8004524 <HAL_CAN_IRQHandler+0x334>
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d002      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x2f8>
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d005      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80044e6:	e01d      	b.n	8004524 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	f043 0308 	orr.w	r3, r3, #8
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044f0:	e019      	b.n	8004526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	f043 0310 	orr.w	r3, r3, #16
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044fa:	e014      	b.n	8004526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f043 0320 	orr.w	r3, r3, #32
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004504:	e00f      	b.n	8004526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800450e:	e00a      	b.n	8004526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004518:	e005      	b.n	8004526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004522:	e000      	b.n	8004526 <HAL_CAN_IRQHandler+0x336>
            break;
 8004524:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699a      	ldr	r2, [r3, #24]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004534:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2204      	movs	r2, #4
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7fe febf 	bl	80032d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004556:	bf00      	nop
 8004558:	3728      	adds	r7, #40	; 0x28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <__NVIC_SetPriorityGrouping+0x40>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800461c:	4013      	ands	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 800462a:	4313      	orrs	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800462e:	4a04      	ldr	r2, [pc, #16]	; (8004640 <__NVIC_SetPriorityGrouping+0x40>)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	60d3      	str	r3, [r2, #12]
}
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	e000ed00 	.word	0xe000ed00
 8004644:	05fa0000 	.word	0x05fa0000

08004648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <__NVIC_GetPriorityGrouping+0x18>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	f003 0307 	and.w	r3, r3, #7
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db0b      	blt.n	800468e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	4907      	ldr	r1, [pc, #28]	; (800469c <__NVIC_EnableIRQ+0x38>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2001      	movs	r0, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db0a      	blt.n	80046ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	490c      	ldr	r1, [pc, #48]	; (80046ec <__NVIC_SetPriority+0x4c>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	440b      	add	r3, r1
 80046c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c8:	e00a      	b.n	80046e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4908      	ldr	r1, [pc, #32]	; (80046f0 <__NVIC_SetPriority+0x50>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3b04      	subs	r3, #4
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	440b      	add	r3, r1
 80046de:	761a      	strb	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000e100 	.word	0xe000e100
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf28      	it	cs
 8004712:	2304      	movcs	r3, #4
 8004714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3304      	adds	r3, #4
 800471a:	2b06      	cmp	r3, #6
 800471c:	d902      	bls.n	8004724 <NVIC_EncodePriority+0x30>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3b03      	subs	r3, #3
 8004722:	e000      	b.n	8004726 <NVIC_EncodePriority+0x32>
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	f04f 32ff 	mov.w	r2, #4294967295
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	401a      	ands	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473c:	f04f 31ff 	mov.w	r1, #4294967295
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43d9      	mvns	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	4313      	orrs	r3, r2
         );
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800476c:	d301      	bcc.n	8004772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800476e:	2301      	movs	r3, #1
 8004770:	e00f      	b.n	8004792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <SysTick_Config+0x40>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800477a:	210f      	movs	r1, #15
 800477c:	f04f 30ff 	mov.w	r0, #4294967295
 8004780:	f7ff ff8e 	bl	80046a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <SysTick_Config+0x40>)
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800478a:	4b04      	ldr	r3, [pc, #16]	; (800479c <SysTick_Config+0x40>)
 800478c:	2207      	movs	r2, #7
 800478e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	e000e010 	.word	0xe000e010

080047a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff29 	bl	8004600 <__NVIC_SetPriorityGrouping>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	4603      	mov	r3, r0
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047c8:	f7ff ff3e 	bl	8004648 <__NVIC_GetPriorityGrouping>
 80047cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	6978      	ldr	r0, [r7, #20]
 80047d4:	f7ff ff8e 	bl	80046f4 <NVIC_EncodePriority>
 80047d8:	4602      	mov	r2, r0
 80047da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff5d 	bl	80046a0 <__NVIC_SetPriority>
}
 80047e6:	bf00      	nop
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	4603      	mov	r3, r0
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff31 	bl	8004664 <__NVIC_EnableIRQ>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ffa2 	bl	800475c <SysTick_Config>
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d106      	bne.n	8004840 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a08      	ldr	r2, [pc, #32]	; (8004858 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800483e:	e005      	b.n	800484c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a04      	ldr	r2, [pc, #16]	; (8004858 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004846:	f023 0304 	bic.w	r3, r3, #4
 800484a:	6013      	str	r3, [r2, #0]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000e010 	.word	0xe000e010

0800485c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004860:	f000 f802 	bl	8004868 <HAL_SYSTICK_Callback>
}
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004884:	f7ff f826 	bl	80038d4 <HAL_GetTick>
 8004888:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d008      	beq.n	80048a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2280      	movs	r2, #128	; 0x80
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e052      	b.n	800494e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0216 	bic.w	r2, r2, #22
 80048b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <HAL_DMA_Abort+0x62>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0208 	bic.w	r2, r2, #8
 80048e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048f8:	e013      	b.n	8004922 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048fa:	f7fe ffeb 	bl	80038d4 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b05      	cmp	r3, #5
 8004906:	d90c      	bls.n	8004922 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2203      	movs	r2, #3
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e015      	b.n	800494e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e4      	bne.n	80048fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	223f      	movs	r2, #63	; 0x3f
 8004936:	409a      	lsls	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d004      	beq.n	8004974 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e00c      	b.n	800498e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2205      	movs	r2, #5
 8004978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	; 0x24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e175      	b.n	8004ca8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049bc:	2201      	movs	r2, #1
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4013      	ands	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	f040 8164 	bne.w	8004ca2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d005      	beq.n	80049f2 <HAL_GPIO_Init+0x56>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d130      	bne.n	8004a54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	2203      	movs	r2, #3
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a28:	2201      	movs	r2, #1
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	43db      	mvns	r3, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4013      	ands	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 0201 	and.w	r2, r3, #1
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d017      	beq.n	8004a90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d123      	bne.n	8004ae4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	08da      	lsrs	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3208      	adds	r2, #8
 8004aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	220f      	movs	r2, #15
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	08da      	lsrs	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3208      	adds	r2, #8
 8004ade:	69b9      	ldr	r1, [r7, #24]
 8004ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	2203      	movs	r2, #3
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 0203 	and.w	r2, r3, #3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80be 	beq.w	8004ca2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b26:	4b66      	ldr	r3, [pc, #408]	; (8004cc0 <HAL_GPIO_Init+0x324>)
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	4a65      	ldr	r2, [pc, #404]	; (8004cc0 <HAL_GPIO_Init+0x324>)
 8004b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b30:	6453      	str	r3, [r2, #68]	; 0x44
 8004b32:	4b63      	ldr	r3, [pc, #396]	; (8004cc0 <HAL_GPIO_Init+0x324>)
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b3e:	4a61      	ldr	r2, [pc, #388]	; (8004cc4 <HAL_GPIO_Init+0x328>)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	3302      	adds	r3, #2
 8004b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	220f      	movs	r2, #15
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a58      	ldr	r2, [pc, #352]	; (8004cc8 <HAL_GPIO_Init+0x32c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d037      	beq.n	8004bda <HAL_GPIO_Init+0x23e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a57      	ldr	r2, [pc, #348]	; (8004ccc <HAL_GPIO_Init+0x330>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <HAL_GPIO_Init+0x23a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a56      	ldr	r2, [pc, #344]	; (8004cd0 <HAL_GPIO_Init+0x334>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d02b      	beq.n	8004bd2 <HAL_GPIO_Init+0x236>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a55      	ldr	r2, [pc, #340]	; (8004cd4 <HAL_GPIO_Init+0x338>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d025      	beq.n	8004bce <HAL_GPIO_Init+0x232>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a54      	ldr	r2, [pc, #336]	; (8004cd8 <HAL_GPIO_Init+0x33c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01f      	beq.n	8004bca <HAL_GPIO_Init+0x22e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a53      	ldr	r2, [pc, #332]	; (8004cdc <HAL_GPIO_Init+0x340>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d019      	beq.n	8004bc6 <HAL_GPIO_Init+0x22a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a52      	ldr	r2, [pc, #328]	; (8004ce0 <HAL_GPIO_Init+0x344>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <HAL_GPIO_Init+0x226>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a51      	ldr	r2, [pc, #324]	; (8004ce4 <HAL_GPIO_Init+0x348>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00d      	beq.n	8004bbe <HAL_GPIO_Init+0x222>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a50      	ldr	r2, [pc, #320]	; (8004ce8 <HAL_GPIO_Init+0x34c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d007      	beq.n	8004bba <HAL_GPIO_Init+0x21e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a4f      	ldr	r2, [pc, #316]	; (8004cec <HAL_GPIO_Init+0x350>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d101      	bne.n	8004bb6 <HAL_GPIO_Init+0x21a>
 8004bb2:	2309      	movs	r3, #9
 8004bb4:	e012      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bb6:	230a      	movs	r3, #10
 8004bb8:	e010      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bba:	2308      	movs	r3, #8
 8004bbc:	e00e      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bbe:	2307      	movs	r3, #7
 8004bc0:	e00c      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	e00a      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bc6:	2305      	movs	r3, #5
 8004bc8:	e008      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	e006      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e004      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e002      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_GPIO_Init+0x240>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	f002 0203 	and.w	r2, r2, #3
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	4093      	lsls	r3, r2
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004bec:	4935      	ldr	r1, [pc, #212]	; (8004cc4 <HAL_GPIO_Init+0x328>)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bfa:	4b3d      	ldr	r3, [pc, #244]	; (8004cf0 <HAL_GPIO_Init+0x354>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c1e:	4a34      	ldr	r2, [pc, #208]	; (8004cf0 <HAL_GPIO_Init+0x354>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c24:	4b32      	ldr	r3, [pc, #200]	; (8004cf0 <HAL_GPIO_Init+0x354>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c48:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <HAL_GPIO_Init+0x354>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_GPIO_Init+0x354>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c72:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_GPIO_Init+0x354>)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c78:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <HAL_GPIO_Init+0x354>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c9c:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <HAL_GPIO_Init+0x354>)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	f67f ae86 	bls.w	80049bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	; 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	40020400 	.word	0x40020400
 8004cd0:	40020800 	.word	0x40020800
 8004cd4:	40020c00 	.word	0x40020c00
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40021400 	.word	0x40021400
 8004ce0:	40021800 	.word	0x40021800
 8004ce4:	40021c00 	.word	0x40021c00
 8004ce8:	40022000 	.word	0x40022000
 8004cec:	40022400 	.word	0x40022400
 8004cf0:	40013c00 	.word	0x40013c00

08004cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
 8004d00:	4613      	mov	r3, r2
 8004d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d04:	787b      	ldrb	r3, [r7, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d0a:	887a      	ldrh	r2, [r7, #2]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d10:	e003      	b.n	8004d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	041a      	lsls	r2, r3, #16
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	619a      	str	r2, [r3, #24]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d30:	2300      	movs	r3, #0
 8004d32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e291      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8087 	beq.w	8004e5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d4c:	4b96      	ldr	r3, [pc, #600]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d00c      	beq.n	8004d72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d58:	4b93      	ldr	r3, [pc, #588]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 030c 	and.w	r3, r3, #12
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d112      	bne.n	8004d8a <HAL_RCC_OscConfig+0x62>
 8004d64:	4b90      	ldr	r3, [pc, #576]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d70:	d10b      	bne.n	8004d8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d72:	4b8d      	ldr	r3, [pc, #564]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d06c      	beq.n	8004e58 <HAL_RCC_OscConfig+0x130>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d168      	bne.n	8004e58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e26b      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x7a>
 8004d94:	4b84      	ldr	r3, [pc, #528]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a83      	ldr	r2, [pc, #524]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	e02e      	b.n	8004e00 <HAL_RCC_OscConfig+0xd8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x9c>
 8004daa:	4b7f      	ldr	r3, [pc, #508]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a7e      	ldr	r2, [pc, #504]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b7c      	ldr	r3, [pc, #496]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7b      	ldr	r2, [pc, #492]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e01d      	b.n	8004e00 <HAL_RCC_OscConfig+0xd8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0xc0>
 8004dce:	4b76      	ldr	r3, [pc, #472]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a75      	ldr	r2, [pc, #468]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	4b73      	ldr	r3, [pc, #460]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a72      	ldr	r2, [pc, #456]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e00b      	b.n	8004e00 <HAL_RCC_OscConfig+0xd8>
 8004de8:	4b6f      	ldr	r3, [pc, #444]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a6e      	ldr	r2, [pc, #440]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	4b6c      	ldr	r3, [pc, #432]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a6b      	ldr	r2, [pc, #428]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d013      	beq.n	8004e30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fe fd64 	bl	80038d4 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e10:	f7fe fd60 	bl	80038d4 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	; 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e21f      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e22:	4b61      	ldr	r3, [pc, #388]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0xe8>
 8004e2e:	e014      	b.n	8004e5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fe fd50 	bl	80038d4 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e38:	f7fe fd4c 	bl	80038d4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e20b      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4a:	4b57      	ldr	r3, [pc, #348]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x110>
 8004e56:	e000      	b.n	8004e5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d069      	beq.n	8004f3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e66:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00b      	beq.n	8004e8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e72:	4b4d      	ldr	r3, [pc, #308]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d11c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x190>
 8004e7e:	4b4a      	ldr	r3, [pc, #296]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d116      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x17a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d001      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e1df      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea2:	4b41      	ldr	r3, [pc, #260]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	493d      	ldr	r1, [pc, #244]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb6:	e040      	b.n	8004f3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d023      	beq.n	8004f08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec0:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a38      	ldr	r2, [pc, #224]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fe fd02 	bl	80038d4 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed4:	f7fe fcfe 	bl	80038d4 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e1bd      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef2:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4929      	ldr	r1, [pc, #164]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]
 8004f06:	e018      	b.n	8004f3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f08:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fe fcde 	bl	80038d4 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1c:	f7fe fcda 	bl	80038d4 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e199      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d038      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d019      	beq.n	8004f82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4e:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f52:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fe fcbb 	bl	80038d4 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f62:	f7fe fcb7 	bl	80038d4 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e176      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x23a>
 8004f80:	e01a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f86:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8e:	f7fe fca1 	bl	80038d4 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f96:	f7fe fc9d 	bl	80038d4 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d903      	bls.n	8004fac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e15c      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
 8004fa8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fac:	4b91      	ldr	r3, [pc, #580]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8004fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ee      	bne.n	8004f96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80a4 	beq.w	800510e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b8b      	ldr	r3, [pc, #556]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10d      	bne.n	8004fee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	4b88      	ldr	r3, [pc, #544]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	4a87      	ldr	r2, [pc, #540]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8004fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fde:	4b85      	ldr	r3, [pc, #532]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fee:	4b82      	ldr	r3, [pc, #520]	; (80051f8 <HAL_RCC_OscConfig+0x4d0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d118      	bne.n	800502c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	; (80051f8 <HAL_RCC_OscConfig+0x4d0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7e      	ldr	r2, [pc, #504]	; (80051f8 <HAL_RCC_OscConfig+0x4d0>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005006:	f7fe fc65 	bl	80038d4 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500e:	f7fe fc61 	bl	80038d4 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b64      	cmp	r3, #100	; 0x64
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e120      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005020:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <HAL_RCC_OscConfig+0x4d0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0x31a>
 8005034:	4b6f      	ldr	r3, [pc, #444]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	4a6e      	ldr	r2, [pc, #440]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6713      	str	r3, [r2, #112]	; 0x70
 8005040:	e02d      	b.n	800509e <HAL_RCC_OscConfig+0x376>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x33c>
 800504a:	4b6a      	ldr	r3, [pc, #424]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	4a69      	ldr	r2, [pc, #420]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6713      	str	r3, [r2, #112]	; 0x70
 8005056:	4b67      	ldr	r3, [pc, #412]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	4a66      	ldr	r2, [pc, #408]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	6713      	str	r3, [r2, #112]	; 0x70
 8005062:	e01c      	b.n	800509e <HAL_RCC_OscConfig+0x376>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b05      	cmp	r3, #5
 800506a:	d10c      	bne.n	8005086 <HAL_RCC_OscConfig+0x35e>
 800506c:	4b61      	ldr	r3, [pc, #388]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	4a60      	ldr	r2, [pc, #384]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005072:	f043 0304 	orr.w	r3, r3, #4
 8005076:	6713      	str	r3, [r2, #112]	; 0x70
 8005078:	4b5e      	ldr	r3, [pc, #376]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	4a5d      	ldr	r2, [pc, #372]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	6713      	str	r3, [r2, #112]	; 0x70
 8005084:	e00b      	b.n	800509e <HAL_RCC_OscConfig+0x376>
 8005086:	4b5b      	ldr	r3, [pc, #364]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	4a5a      	ldr	r2, [pc, #360]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	6713      	str	r3, [r2, #112]	; 0x70
 8005092:	4b58      	ldr	r3, [pc, #352]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	4a57      	ldr	r2, [pc, #348]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d015      	beq.n	80050d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a6:	f7fe fc15 	bl	80038d4 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ae:	f7fe fc11 	bl	80038d4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050bc:	4293      	cmp	r3, r2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e0ce      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	4b4b      	ldr	r3, [pc, #300]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ee      	beq.n	80050ae <HAL_RCC_OscConfig+0x386>
 80050d0:	e014      	b.n	80050fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d2:	f7fe fbff 	bl	80038d4 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d8:	e00a      	b.n	80050f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7fe fbfb 	bl	80038d4 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e0b8      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f0:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ee      	bne.n	80050da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005102:	4b3c      	ldr	r3, [pc, #240]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a3b      	ldr	r2, [pc, #236]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80a4 	beq.w	8005260 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005118:	4b36      	ldr	r3, [pc, #216]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d06b      	beq.n	80051fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d149      	bne.n	80051c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512c:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a30      	ldr	r2, [pc, #192]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fe fbcc 	bl	80038d4 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005140:	f7fe fbc8 	bl	80038d4 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e087      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69da      	ldr	r2, [r3, #28]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	3b01      	subs	r3, #1
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	4313      	orrs	r3, r2
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005186:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800518a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800518c:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 8005192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fe fb9c 	bl	80038d4 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fe fb98 	bl	80038d4 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e057      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x478>
 80051be:	e04f      	b.n	8005260 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0b      	ldr	r2, [pc, #44]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 80051c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fe fb82 	bl	80038d4 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fe fb7e 	bl	80038d4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e03d      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <HAL_RCC_OscConfig+0x4cc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x4ac>
 80051f2:	e035      	b.n	8005260 <HAL_RCC_OscConfig+0x538>
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <HAL_RCC_OscConfig+0x544>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d028      	beq.n	800525c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d121      	bne.n	800525c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	429a      	cmp	r2, r3
 8005224:	d11a      	bne.n	800525c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005232:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005234:	4293      	cmp	r3, r2
 8005236:	d111      	bne.n	800525c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	085b      	lsrs	r3, r3, #1
 8005244:	3b01      	subs	r3, #1
 8005246:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d107      	bne.n	800525c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40023800 	.word	0x40023800

08005270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0d0      	b.n	800542a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005288:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d910      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005296:	4b67      	ldr	r3, [pc, #412]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 020f 	bic.w	r2, r3, #15
 800529e:	4965      	ldr	r1, [pc, #404]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b63      	ldr	r3, [pc, #396]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0b8      	b.n	800542a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d0:	4b59      	ldr	r3, [pc, #356]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4a58      	ldr	r2, [pc, #352]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80052d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e8:	4b53      	ldr	r3, [pc, #332]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4a52      	ldr	r2, [pc, #328]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80052ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f4:	4b50      	ldr	r3, [pc, #320]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	494d      	ldr	r1, [pc, #308]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d040      	beq.n	8005394 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	4b47      	ldr	r3, [pc, #284]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d115      	bne.n	8005352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e07f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d107      	bne.n	8005342 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005332:	4b41      	ldr	r3, [pc, #260]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e073      	b.n	800542a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005342:	4b3d      	ldr	r3, [pc, #244]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e06b      	b.n	800542a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005352:	4b39      	ldr	r3, [pc, #228]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f023 0203 	bic.w	r2, r3, #3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	4936      	ldr	r1, [pc, #216]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 8005360:	4313      	orrs	r3, r2
 8005362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005364:	f7fe fab6 	bl	80038d4 <HAL_GetTick>
 8005368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	e00a      	b.n	8005382 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536c:	f7fe fab2 	bl	80038d4 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	; 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e053      	b.n	800542a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005382:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 020c 	and.w	r2, r3, #12
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	429a      	cmp	r2, r3
 8005392:	d1eb      	bne.n	800536c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005394:	4b27      	ldr	r3, [pc, #156]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d210      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 020f 	bic.w	r2, r3, #15
 80053aa:	4922      	ldr	r1, [pc, #136]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b20      	ldr	r3, [pc, #128]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e032      	b.n	800542a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4916      	ldr	r1, [pc, #88]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	490e      	ldr	r1, [pc, #56]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005402:	f000 f821 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8005406:	4602      	mov	r2, r0
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	490a      	ldr	r1, [pc, #40]	; (800543c <HAL_RCC_ClockConfig+0x1cc>)
 8005414:	5ccb      	ldrb	r3, [r1, r3]
 8005416:	fa22 f303 	lsr.w	r3, r2, r3
 800541a:	4a09      	ldr	r2, [pc, #36]	; (8005440 <HAL_RCC_ClockConfig+0x1d0>)
 800541c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_RCC_ClockConfig+0x1d4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fa12 	bl	800384c <HAL_InitTick>

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40023c00 	.word	0x40023c00
 8005438:	40023800 	.word	0x40023800
 800543c:	0800be3c 	.word	0x0800be3c
 8005440:	20000008 	.word	0x20000008
 8005444:	2000000c 	.word	0x2000000c

08005448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	2300      	movs	r3, #0
 800545a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005460:	4b67      	ldr	r3, [pc, #412]	; (8005600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	2b08      	cmp	r3, #8
 800546a:	d00d      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x40>
 800546c:	2b08      	cmp	r3, #8
 800546e:	f200 80bd 	bhi.w	80055ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_RCC_GetSysClockFreq+0x34>
 8005476:	2b04      	cmp	r3, #4
 8005478:	d003      	beq.n	8005482 <HAL_RCC_GetSysClockFreq+0x3a>
 800547a:	e0b7      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800547c:	4b61      	ldr	r3, [pc, #388]	; (8005604 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800547e:	60bb      	str	r3, [r7, #8]
      break;
 8005480:	e0b7      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005482:	4b61      	ldr	r3, [pc, #388]	; (8005608 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005484:	60bb      	str	r3, [r7, #8]
      break;
 8005486:	e0b4      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005488:	4b5d      	ldr	r3, [pc, #372]	; (8005600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005490:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005492:	4b5b      	ldr	r3, [pc, #364]	; (8005600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d04d      	beq.n	800553a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549e:	4b58      	ldr	r3, [pc, #352]	; (8005600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	461a      	mov	r2, r3
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	ea02 0800 	and.w	r8, r2, r0
 80054b6:	ea03 0901 	and.w	r9, r3, r1
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	014b      	lsls	r3, r1, #5
 80054c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054cc:	0142      	lsls	r2, r0, #5
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	ebb0 0008 	subs.w	r0, r0, r8
 80054d6:	eb61 0109 	sbc.w	r1, r1, r9
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	018b      	lsls	r3, r1, #6
 80054e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054e8:	0182      	lsls	r2, r0, #6
 80054ea:	1a12      	subs	r2, r2, r0
 80054ec:	eb63 0301 	sbc.w	r3, r3, r1
 80054f0:	f04f 0000 	mov.w	r0, #0
 80054f4:	f04f 0100 	mov.w	r1, #0
 80054f8:	00d9      	lsls	r1, r3, #3
 80054fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054fe:	00d0      	lsls	r0, r2, #3
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	eb12 0208 	adds.w	r2, r2, r8
 8005508:	eb43 0309 	adc.w	r3, r3, r9
 800550c:	f04f 0000 	mov.w	r0, #0
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	0259      	lsls	r1, r3, #9
 8005516:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800551a:	0250      	lsls	r0, r2, #9
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4610      	mov	r0, r2
 8005522:	4619      	mov	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	461a      	mov	r2, r3
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	f7fb fb5c 	bl	8000be8 <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4613      	mov	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e04a      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553a:	4b31      	ldr	r3, [pc, #196]	; (8005600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	461a      	mov	r2, r3
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	ea02 0400 	and.w	r4, r2, r0
 8005552:	ea03 0501 	and.w	r5, r3, r1
 8005556:	4620      	mov	r0, r4
 8005558:	4629      	mov	r1, r5
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	014b      	lsls	r3, r1, #5
 8005564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005568:	0142      	lsls	r2, r0, #5
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	1b00      	subs	r0, r0, r4
 8005570:	eb61 0105 	sbc.w	r1, r1, r5
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	018b      	lsls	r3, r1, #6
 800557e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005582:	0182      	lsls	r2, r0, #6
 8005584:	1a12      	subs	r2, r2, r0
 8005586:	eb63 0301 	sbc.w	r3, r3, r1
 800558a:	f04f 0000 	mov.w	r0, #0
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	00d9      	lsls	r1, r3, #3
 8005594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005598:	00d0      	lsls	r0, r2, #3
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	1912      	adds	r2, r2, r4
 80055a0:	eb45 0303 	adc.w	r3, r5, r3
 80055a4:	f04f 0000 	mov.w	r0, #0
 80055a8:	f04f 0100 	mov.w	r1, #0
 80055ac:	0299      	lsls	r1, r3, #10
 80055ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055b2:	0290      	lsls	r0, r2, #10
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4610      	mov	r0, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	461a      	mov	r2, r3
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	f7fb fb10 	bl	8000be8 <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4613      	mov	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	3301      	adds	r3, #1
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	60bb      	str	r3, [r7, #8]
      break;
 80055ea:	e002      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80055ee:	60bb      	str	r3, [r7, #8]
      break;
 80055f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055f2:	68bb      	ldr	r3, [r7, #8]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800
 8005604:	00f42400 	.word	0x00f42400
 8005608:	007a1200 	.word	0x007a1200

0800560c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <HAL_RCC_GetHCLKFreq+0x14>)
 8005612:	681b      	ldr	r3, [r3, #0]
}
 8005614:	4618      	mov	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000008 	.word	0x20000008

08005624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005628:	f7ff fff0 	bl	800560c <HAL_RCC_GetHCLKFreq>
 800562c:	4602      	mov	r2, r0
 800562e:	4b05      	ldr	r3, [pc, #20]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	0a9b      	lsrs	r3, r3, #10
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	4903      	ldr	r1, [pc, #12]	; (8005648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800563a:	5ccb      	ldrb	r3, [r1, r3]
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40023800 	.word	0x40023800
 8005648:	0800be4c 	.word	0x0800be4c

0800564c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005650:	f7ff ffdc 	bl	800560c <HAL_RCC_GetHCLKFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	0b5b      	lsrs	r3, r3, #13
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	4903      	ldr	r1, [pc, #12]	; (8005670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40023800 	.word	0x40023800
 8005670:	0800be4c 	.word	0x0800be4c

08005674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e049      	b.n	800571a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fd ff7a 	bl	8003594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f000 fa24 	bl	8005b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e054      	b.n	80057e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d022      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d01d      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a22      	ldr	r2, [pc, #136]	; (80057f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a21      	ldr	r2, [pc, #132]	; (80057fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <HAL_TIM_Base_Start_IT+0xdc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <HAL_TIM_Base_Start_IT+0xe0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_TIM_Base_Start_IT+0xe4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x80>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_TIM_Base_Start_IT+0xe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d115      	bne.n	80057d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	4b19      	ldr	r3, [pc, #100]	; (8005810 <HAL_TIM_Base_Start_IT+0xec>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d015      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d011      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	e008      	b.n	80057e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e000      	b.n	80057e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40010400 	.word	0x40010400
 8005808:	40014000 	.word	0x40014000
 800580c:	40001800 	.word	0x40001800
 8005810:	00010007 	.word	0x00010007

08005814 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	f241 1311 	movw	r3, #4369	; 0x1111
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10f      	bne.n	800585c <HAL_TIM_Base_Stop_IT+0x48>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	f240 4344 	movw	r3, #1092	; 0x444
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <HAL_TIM_Base_Stop_IT+0x48>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b02      	cmp	r3, #2
 8005886:	d122      	bne.n	80058ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b02      	cmp	r3, #2
 8005894:	d11b      	bne.n	80058ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f06f 0202 	mvn.w	r2, #2
 800589e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f905 	bl	8005ac4 <HAL_TIM_IC_CaptureCallback>
 80058ba:	e005      	b.n	80058c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f8f7 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f908 	bl	8005ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d122      	bne.n	8005922 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d11b      	bne.n	8005922 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f06f 0204 	mvn.w	r2, #4
 80058f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8db 	bl	8005ac4 <HAL_TIM_IC_CaptureCallback>
 800590e:	e005      	b.n	800591c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f8cd 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8de 	bl	8005ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b08      	cmp	r3, #8
 800592e:	d122      	bne.n	8005976 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b08      	cmp	r3, #8
 800593c:	d11b      	bne.n	8005976 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f06f 0208 	mvn.w	r2, #8
 8005946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2204      	movs	r2, #4
 800594c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8b1 	bl	8005ac4 <HAL_TIM_IC_CaptureCallback>
 8005962:	e005      	b.n	8005970 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8a3 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8b4 	bl	8005ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b10      	cmp	r3, #16
 8005982:	d122      	bne.n	80059ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b10      	cmp	r3, #16
 8005990:	d11b      	bne.n	80059ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f06f 0210 	mvn.w	r2, #16
 800599a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2208      	movs	r2, #8
 80059a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f887 	bl	8005ac4 <HAL_TIM_IC_CaptureCallback>
 80059b6:	e005      	b.n	80059c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f879 	bl	8005ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f88a 	bl	8005ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d10e      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f06f 0201 	mvn.w	r2, #1
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7fd fc9b 	bl	800332c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d10e      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b80      	cmp	r3, #128	; 0x80
 8005a10:	d107      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f919 	bl	8005c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a30:	d10e      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f90c 	bl	8005c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b40      	cmp	r3, #64	; 0x40
 8005a5c:	d10e      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d107      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f838 	bl	8005aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d10e      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d107      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0220 	mvn.w	r2, #32
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8cc 	bl	8005c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a40      	ldr	r2, [pc, #256]	; (8005c14 <TIM_Base_SetConfig+0x114>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d013      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1e:	d00f      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a3d      	ldr	r2, [pc, #244]	; (8005c18 <TIM_Base_SetConfig+0x118>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3c      	ldr	r2, [pc, #240]	; (8005c1c <TIM_Base_SetConfig+0x11c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3b      	ldr	r2, [pc, #236]	; (8005c20 <TIM_Base_SetConfig+0x120>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3a      	ldr	r2, [pc, #232]	; (8005c24 <TIM_Base_SetConfig+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d108      	bne.n	8005b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2f      	ldr	r2, [pc, #188]	; (8005c14 <TIM_Base_SetConfig+0x114>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b60:	d027      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <TIM_Base_SetConfig+0x118>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d023      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2b      	ldr	r2, [pc, #172]	; (8005c1c <TIM_Base_SetConfig+0x11c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <TIM_Base_SetConfig+0x120>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <TIM_Base_SetConfig+0x124>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d017      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a28      	ldr	r2, [pc, #160]	; (8005c28 <TIM_Base_SetConfig+0x128>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a27      	ldr	r2, [pc, #156]	; (8005c2c <TIM_Base_SetConfig+0x12c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a26      	ldr	r2, [pc, #152]	; (8005c30 <TIM_Base_SetConfig+0x130>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a25      	ldr	r2, [pc, #148]	; (8005c34 <TIM_Base_SetConfig+0x134>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a24      	ldr	r2, [pc, #144]	; (8005c38 <TIM_Base_SetConfig+0x138>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a23      	ldr	r2, [pc, #140]	; (8005c3c <TIM_Base_SetConfig+0x13c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d108      	bne.n	8005bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <TIM_Base_SetConfig+0x114>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <TIM_Base_SetConfig+0x124>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d103      	bne.n	8005c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	615a      	str	r2, [r3, #20]
}
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	40010400 	.word	0x40010400
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40014400 	.word	0x40014400
 8005c30:	40014800 	.word	0x40014800
 8005c34:	40001800 	.word	0x40001800
 8005c38:	40001c00 	.word	0x40001c00
 8005c3c:	40002000 	.word	0x40002000

08005c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e040      	b.n	8005d10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fd fbfc 	bl	800349c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0201 	bic.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fb96 	bl	80063ec <UART_SetConfig>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e022      	b.n	8005d10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fdec 	bl	80068b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fe73 	bl	80069f4 <UART_CheckIdleState>
 8005d0e:	4603      	mov	r3, r0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	; 0x28
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	f040 8081 	bne.w	8005e34 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_UART_Transmit+0x26>
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e079      	b.n	8005e36 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_UART_Transmit+0x38>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e072      	b.n	8005e36 <HAL_UART_Transmit+0x11e>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2221      	movs	r2, #33	; 0x21
 8005d64:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d66:	f7fd fdb5 	bl	80038d4 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d84:	d108      	bne.n	8005d98 <HAL_UART_Transmit+0x80>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e003      	b.n	8005da0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005da8:	e02c      	b.n	8005e04 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fe50 	bl	8006a5a <UART_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e038      	b.n	8005e36 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	3302      	adds	r3, #2
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e007      	b.n	8005df2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1cc      	bne.n	8005daa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2140      	movs	r1, #64	; 0x40
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fe1d 	bl	8006a5a <UART_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e005      	b.n	8005e36 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	e000      	b.n	8005e36 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005e34:	2302      	movs	r3, #2
  }
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3720      	adds	r7, #32
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b0ba      	sub	sp, #232	; 0xe8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e6e:	4013      	ands	r3, r2
 8005e70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d115      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00f      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d009      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 828f 	beq.w	80063bc <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
      }
      return;
 8005ea6:	e289      	b.n	80063bc <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8117 	beq.w	80060e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ebe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ec2:	4b85      	ldr	r3, [pc, #532]	; (80060d8 <HAL_UART_IRQHandler+0x298>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 810a 	beq.w	80060e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d011      	beq.n	8005efc <HAL_UART_IRQHandler+0xbc>
 8005ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef2:	f043 0201 	orr.w	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d011      	beq.n	8005f2c <HAL_UART_IRQHandler+0xec>
 8005f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f22:	f043 0204 	orr.w	r2, r3, #4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d011      	beq.n	8005f5c <HAL_UART_IRQHandler+0x11c>
 8005f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f52:	f043 0202 	orr.w	r2, r3, #2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d017      	beq.n	8005f98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d105      	bne.n	8005f80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2208      	movs	r2, #8
 8005f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f8e:	f043 0208 	orr.w	r2, r3, #8
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d012      	beq.n	8005fca <HAL_UART_IRQHandler+0x18a>
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 81f5 	beq.w	80063c0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00d      	beq.n	8005ffe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d005      	beq.n	8006022 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800601e:	2b00      	cmp	r3, #0
 8006020:	d04f      	beq.n	80060c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fddd 	bl	8006be2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d141      	bne.n	80060ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3308      	adds	r3, #8
 800603c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800604c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006062:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800606e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800607a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1d9      	bne.n	8006036 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	2b00      	cmp	r3, #0
 8006088:	d013      	beq.n	80060b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	4a13      	ldr	r2, [pc, #76]	; (80060dc <HAL_UART_IRQHandler+0x29c>)
 8006090:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe fc5d 	bl	8004956 <HAL_DMA_Abort_IT>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d017      	beq.n	80060d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80060ac:	4610      	mov	r0, r2
 80060ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b0:	e00f      	b.n	80060d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fd f856 	bl	8003164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b8:	e00b      	b.n	80060d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fd f852 	bl	8003164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c0:	e007      	b.n	80060d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fd f84e 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80060d0:	e176      	b.n	80063c0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d2:	bf00      	nop
    return;
 80060d4:	e174      	b.n	80063c0 <HAL_UART_IRQHandler+0x580>
 80060d6:	bf00      	nop
 80060d8:	04000120 	.word	0x04000120
 80060dc:	08006ca9 	.word	0x08006ca9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	f040 8144 	bne.w	8006372 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 813d 	beq.w	8006372 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8136 	beq.w	8006372 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2210      	movs	r2, #16
 800610c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	f040 80b2 	bne.w	8006282 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800612a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8148 	beq.w	80063c4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800613a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800613e:	429a      	cmp	r2, r3
 8006140:	f080 8140 	bcs.w	80063c4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800614a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006158:	f000 8085 	beq.w	8006266 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800618a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800619e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1da      	bne.n	800615c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e1      	bne.n	80061a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3308      	adds	r3, #8
 8006202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006206:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800620c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e3      	bne.n	80061e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006236:	f023 0310 	bic.w	r3, r3, #16
 800623a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006248:	65bb      	str	r3, [r7, #88]	; 0x58
 800624a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800624e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e4      	bne.n	8006226 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fb08 	bl	8004876 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006272:	b29b      	uxth	r3, r3
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	b29b      	uxth	r3, r3
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8aa 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006280:	e0a0      	b.n	80063c4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800628e:	b29b      	uxth	r3, r3
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8092 	beq.w	80063c8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80062a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 808d 	beq.w	80063c8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062d0:	647b      	str	r3, [r7, #68]	; 0x44
 80062d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e4      	bne.n	80062ae <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3308      	adds	r3, #8
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	623b      	str	r3, [r7, #32]
   return(result);
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006308:	633a      	str	r2, [r7, #48]	; 0x30
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800630e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e3      	bne.n	80062e4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	60fb      	str	r3, [r7, #12]
   return(result);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0310 	bic.w	r3, r3, #16
 8006342:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	69b9      	ldr	r1, [r7, #24]
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	617b      	str	r3, [r7, #20]
   return(result);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e4      	bne.n	800632e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f832 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006370:	e02a      	b.n	80063c8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00e      	beq.n	800639c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800637e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01c      	beq.n	80063cc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
    }
    return;
 800639a:	e017      	b.n	80063cc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800639c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <HAL_UART_IRQHandler+0x58e>
 80063a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fc8d 	bl	8006cd4 <UART_EndTransmit_IT>
    return;
 80063ba:	e008      	b.n	80063ce <HAL_UART_IRQHandler+0x58e>
      return;
 80063bc:	bf00      	nop
 80063be:	e006      	b.n	80063ce <HAL_UART_IRQHandler+0x58e>
    return;
 80063c0:	bf00      	nop
 80063c2:	e004      	b.n	80063ce <HAL_UART_IRQHandler+0x58e>
      return;
 80063c4:	bf00      	nop
 80063c6:	e002      	b.n	80063ce <HAL_UART_IRQHandler+0x58e>
      return;
 80063c8:	bf00      	nop
 80063ca:	e000      	b.n	80063ce <HAL_UART_IRQHandler+0x58e>
    return;
 80063cc:	bf00      	nop
  }

}
 80063ce:	37e8      	adds	r7, #232	; 0xe8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4ba7      	ldr	r3, [pc, #668]	; (80066b4 <UART_SetConfig+0x2c8>)
 8006418:	4013      	ands	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	6979      	ldr	r1, [r7, #20]
 8006420:	430b      	orrs	r3, r1
 8006422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	430a      	orrs	r2, r1
 800645c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a95      	ldr	r2, [pc, #596]	; (80066b8 <UART_SetConfig+0x2cc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d120      	bne.n	80064aa <UART_SetConfig+0xbe>
 8006468:	4b94      	ldr	r3, [pc, #592]	; (80066bc <UART_SetConfig+0x2d0>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	2b03      	cmp	r3, #3
 8006474:	d816      	bhi.n	80064a4 <UART_SetConfig+0xb8>
 8006476:	a201      	add	r2, pc, #4	; (adr r2, 800647c <UART_SetConfig+0x90>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	0800648d 	.word	0x0800648d
 8006480:	08006499 	.word	0x08006499
 8006484:	08006493 	.word	0x08006493
 8006488:	0800649f 	.word	0x0800649f
 800648c:	2301      	movs	r3, #1
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e14f      	b.n	8006732 <UART_SetConfig+0x346>
 8006492:	2302      	movs	r3, #2
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e14c      	b.n	8006732 <UART_SetConfig+0x346>
 8006498:	2304      	movs	r3, #4
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e149      	b.n	8006732 <UART_SetConfig+0x346>
 800649e:	2308      	movs	r3, #8
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e146      	b.n	8006732 <UART_SetConfig+0x346>
 80064a4:	2310      	movs	r3, #16
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e143      	b.n	8006732 <UART_SetConfig+0x346>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a84      	ldr	r2, [pc, #528]	; (80066c0 <UART_SetConfig+0x2d4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d132      	bne.n	800651a <UART_SetConfig+0x12e>
 80064b4:	4b81      	ldr	r3, [pc, #516]	; (80066bc <UART_SetConfig+0x2d0>)
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b0c      	cmp	r3, #12
 80064c0:	d828      	bhi.n	8006514 <UART_SetConfig+0x128>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <UART_SetConfig+0xdc>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	08006515 	.word	0x08006515
 80064d0:	08006515 	.word	0x08006515
 80064d4:	08006515 	.word	0x08006515
 80064d8:	08006509 	.word	0x08006509
 80064dc:	08006515 	.word	0x08006515
 80064e0:	08006515 	.word	0x08006515
 80064e4:	08006515 	.word	0x08006515
 80064e8:	08006503 	.word	0x08006503
 80064ec:	08006515 	.word	0x08006515
 80064f0:	08006515 	.word	0x08006515
 80064f4:	08006515 	.word	0x08006515
 80064f8:	0800650f 	.word	0x0800650f
 80064fc:	2300      	movs	r3, #0
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e117      	b.n	8006732 <UART_SetConfig+0x346>
 8006502:	2302      	movs	r3, #2
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e114      	b.n	8006732 <UART_SetConfig+0x346>
 8006508:	2304      	movs	r3, #4
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e111      	b.n	8006732 <UART_SetConfig+0x346>
 800650e:	2308      	movs	r3, #8
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e10e      	b.n	8006732 <UART_SetConfig+0x346>
 8006514:	2310      	movs	r3, #16
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e10b      	b.n	8006732 <UART_SetConfig+0x346>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a69      	ldr	r2, [pc, #420]	; (80066c4 <UART_SetConfig+0x2d8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d120      	bne.n	8006566 <UART_SetConfig+0x17a>
 8006524:	4b65      	ldr	r3, [pc, #404]	; (80066bc <UART_SetConfig+0x2d0>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800652e:	2b30      	cmp	r3, #48	; 0x30
 8006530:	d013      	beq.n	800655a <UART_SetConfig+0x16e>
 8006532:	2b30      	cmp	r3, #48	; 0x30
 8006534:	d814      	bhi.n	8006560 <UART_SetConfig+0x174>
 8006536:	2b20      	cmp	r3, #32
 8006538:	d009      	beq.n	800654e <UART_SetConfig+0x162>
 800653a:	2b20      	cmp	r3, #32
 800653c:	d810      	bhi.n	8006560 <UART_SetConfig+0x174>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <UART_SetConfig+0x15c>
 8006542:	2b10      	cmp	r3, #16
 8006544:	d006      	beq.n	8006554 <UART_SetConfig+0x168>
 8006546:	e00b      	b.n	8006560 <UART_SetConfig+0x174>
 8006548:	2300      	movs	r3, #0
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e0f1      	b.n	8006732 <UART_SetConfig+0x346>
 800654e:	2302      	movs	r3, #2
 8006550:	77fb      	strb	r3, [r7, #31]
 8006552:	e0ee      	b.n	8006732 <UART_SetConfig+0x346>
 8006554:	2304      	movs	r3, #4
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	e0eb      	b.n	8006732 <UART_SetConfig+0x346>
 800655a:	2308      	movs	r3, #8
 800655c:	77fb      	strb	r3, [r7, #31]
 800655e:	e0e8      	b.n	8006732 <UART_SetConfig+0x346>
 8006560:	2310      	movs	r3, #16
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e0e5      	b.n	8006732 <UART_SetConfig+0x346>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a57      	ldr	r2, [pc, #348]	; (80066c8 <UART_SetConfig+0x2dc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d120      	bne.n	80065b2 <UART_SetConfig+0x1c6>
 8006570:	4b52      	ldr	r3, [pc, #328]	; (80066bc <UART_SetConfig+0x2d0>)
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006576:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800657a:	2bc0      	cmp	r3, #192	; 0xc0
 800657c:	d013      	beq.n	80065a6 <UART_SetConfig+0x1ba>
 800657e:	2bc0      	cmp	r3, #192	; 0xc0
 8006580:	d814      	bhi.n	80065ac <UART_SetConfig+0x1c0>
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d009      	beq.n	800659a <UART_SetConfig+0x1ae>
 8006586:	2b80      	cmp	r3, #128	; 0x80
 8006588:	d810      	bhi.n	80065ac <UART_SetConfig+0x1c0>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <UART_SetConfig+0x1a8>
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d006      	beq.n	80065a0 <UART_SetConfig+0x1b4>
 8006592:	e00b      	b.n	80065ac <UART_SetConfig+0x1c0>
 8006594:	2300      	movs	r3, #0
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e0cb      	b.n	8006732 <UART_SetConfig+0x346>
 800659a:	2302      	movs	r3, #2
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e0c8      	b.n	8006732 <UART_SetConfig+0x346>
 80065a0:	2304      	movs	r3, #4
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e0c5      	b.n	8006732 <UART_SetConfig+0x346>
 80065a6:	2308      	movs	r3, #8
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e0c2      	b.n	8006732 <UART_SetConfig+0x346>
 80065ac:	2310      	movs	r3, #16
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e0bf      	b.n	8006732 <UART_SetConfig+0x346>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a45      	ldr	r2, [pc, #276]	; (80066cc <UART_SetConfig+0x2e0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d125      	bne.n	8006608 <UART_SetConfig+0x21c>
 80065bc:	4b3f      	ldr	r3, [pc, #252]	; (80066bc <UART_SetConfig+0x2d0>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ca:	d017      	beq.n	80065fc <UART_SetConfig+0x210>
 80065cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065d0:	d817      	bhi.n	8006602 <UART_SetConfig+0x216>
 80065d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d6:	d00b      	beq.n	80065f0 <UART_SetConfig+0x204>
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065dc:	d811      	bhi.n	8006602 <UART_SetConfig+0x216>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <UART_SetConfig+0x1fe>
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d006      	beq.n	80065f6 <UART_SetConfig+0x20a>
 80065e8:	e00b      	b.n	8006602 <UART_SetConfig+0x216>
 80065ea:	2300      	movs	r3, #0
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e0a0      	b.n	8006732 <UART_SetConfig+0x346>
 80065f0:	2302      	movs	r3, #2
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e09d      	b.n	8006732 <UART_SetConfig+0x346>
 80065f6:	2304      	movs	r3, #4
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e09a      	b.n	8006732 <UART_SetConfig+0x346>
 80065fc:	2308      	movs	r3, #8
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e097      	b.n	8006732 <UART_SetConfig+0x346>
 8006602:	2310      	movs	r3, #16
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e094      	b.n	8006732 <UART_SetConfig+0x346>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a30      	ldr	r2, [pc, #192]	; (80066d0 <UART_SetConfig+0x2e4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d125      	bne.n	800665e <UART_SetConfig+0x272>
 8006612:	4b2a      	ldr	r3, [pc, #168]	; (80066bc <UART_SetConfig+0x2d0>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006618:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800661c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006620:	d017      	beq.n	8006652 <UART_SetConfig+0x266>
 8006622:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006626:	d817      	bhi.n	8006658 <UART_SetConfig+0x26c>
 8006628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800662c:	d00b      	beq.n	8006646 <UART_SetConfig+0x25a>
 800662e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006632:	d811      	bhi.n	8006658 <UART_SetConfig+0x26c>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <UART_SetConfig+0x254>
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d006      	beq.n	800664c <UART_SetConfig+0x260>
 800663e:	e00b      	b.n	8006658 <UART_SetConfig+0x26c>
 8006640:	2301      	movs	r3, #1
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e075      	b.n	8006732 <UART_SetConfig+0x346>
 8006646:	2302      	movs	r3, #2
 8006648:	77fb      	strb	r3, [r7, #31]
 800664a:	e072      	b.n	8006732 <UART_SetConfig+0x346>
 800664c:	2304      	movs	r3, #4
 800664e:	77fb      	strb	r3, [r7, #31]
 8006650:	e06f      	b.n	8006732 <UART_SetConfig+0x346>
 8006652:	2308      	movs	r3, #8
 8006654:	77fb      	strb	r3, [r7, #31]
 8006656:	e06c      	b.n	8006732 <UART_SetConfig+0x346>
 8006658:	2310      	movs	r3, #16
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e069      	b.n	8006732 <UART_SetConfig+0x346>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1c      	ldr	r2, [pc, #112]	; (80066d4 <UART_SetConfig+0x2e8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d137      	bne.n	80066d8 <UART_SetConfig+0x2ec>
 8006668:	4b14      	ldr	r3, [pc, #80]	; (80066bc <UART_SetConfig+0x2d0>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006676:	d017      	beq.n	80066a8 <UART_SetConfig+0x2bc>
 8006678:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800667c:	d817      	bhi.n	80066ae <UART_SetConfig+0x2c2>
 800667e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006682:	d00b      	beq.n	800669c <UART_SetConfig+0x2b0>
 8006684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006688:	d811      	bhi.n	80066ae <UART_SetConfig+0x2c2>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <UART_SetConfig+0x2aa>
 800668e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006692:	d006      	beq.n	80066a2 <UART_SetConfig+0x2b6>
 8006694:	e00b      	b.n	80066ae <UART_SetConfig+0x2c2>
 8006696:	2300      	movs	r3, #0
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e04a      	b.n	8006732 <UART_SetConfig+0x346>
 800669c:	2302      	movs	r3, #2
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e047      	b.n	8006732 <UART_SetConfig+0x346>
 80066a2:	2304      	movs	r3, #4
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e044      	b.n	8006732 <UART_SetConfig+0x346>
 80066a8:	2308      	movs	r3, #8
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	e041      	b.n	8006732 <UART_SetConfig+0x346>
 80066ae:	2310      	movs	r3, #16
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e03e      	b.n	8006732 <UART_SetConfig+0x346>
 80066b4:	efff69f3 	.word	0xefff69f3
 80066b8:	40011000 	.word	0x40011000
 80066bc:	40023800 	.word	0x40023800
 80066c0:	40004400 	.word	0x40004400
 80066c4:	40004800 	.word	0x40004800
 80066c8:	40004c00 	.word	0x40004c00
 80066cc:	40005000 	.word	0x40005000
 80066d0:	40011400 	.word	0x40011400
 80066d4:	40007800 	.word	0x40007800
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a71      	ldr	r2, [pc, #452]	; (80068a4 <UART_SetConfig+0x4b8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d125      	bne.n	800672e <UART_SetConfig+0x342>
 80066e2:	4b71      	ldr	r3, [pc, #452]	; (80068a8 <UART_SetConfig+0x4bc>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066f0:	d017      	beq.n	8006722 <UART_SetConfig+0x336>
 80066f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066f6:	d817      	bhi.n	8006728 <UART_SetConfig+0x33c>
 80066f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fc:	d00b      	beq.n	8006716 <UART_SetConfig+0x32a>
 80066fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006702:	d811      	bhi.n	8006728 <UART_SetConfig+0x33c>
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <UART_SetConfig+0x324>
 8006708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800670c:	d006      	beq.n	800671c <UART_SetConfig+0x330>
 800670e:	e00b      	b.n	8006728 <UART_SetConfig+0x33c>
 8006710:	2300      	movs	r3, #0
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e00d      	b.n	8006732 <UART_SetConfig+0x346>
 8006716:	2302      	movs	r3, #2
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e00a      	b.n	8006732 <UART_SetConfig+0x346>
 800671c:	2304      	movs	r3, #4
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e007      	b.n	8006732 <UART_SetConfig+0x346>
 8006722:	2308      	movs	r3, #8
 8006724:	77fb      	strb	r3, [r7, #31]
 8006726:	e004      	b.n	8006732 <UART_SetConfig+0x346>
 8006728:	2310      	movs	r3, #16
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e001      	b.n	8006732 <UART_SetConfig+0x346>
 800672e:	2310      	movs	r3, #16
 8006730:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673a:	d15a      	bne.n	80067f2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800673c:	7ffb      	ldrb	r3, [r7, #31]
 800673e:	2b08      	cmp	r3, #8
 8006740:	d827      	bhi.n	8006792 <UART_SetConfig+0x3a6>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <UART_SetConfig+0x35c>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	0800676d 	.word	0x0800676d
 800674c:	08006775 	.word	0x08006775
 8006750:	0800677d 	.word	0x0800677d
 8006754:	08006793 	.word	0x08006793
 8006758:	08006783 	.word	0x08006783
 800675c:	08006793 	.word	0x08006793
 8006760:	08006793 	.word	0x08006793
 8006764:	08006793 	.word	0x08006793
 8006768:	0800678b 	.word	0x0800678b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800676c:	f7fe ff5a 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8006770:	61b8      	str	r0, [r7, #24]
        break;
 8006772:	e013      	b.n	800679c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006774:	f7fe ff6a 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 8006778:	61b8      	str	r0, [r7, #24]
        break;
 800677a:	e00f      	b.n	800679c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800677c:	4b4b      	ldr	r3, [pc, #300]	; (80068ac <UART_SetConfig+0x4c0>)
 800677e:	61bb      	str	r3, [r7, #24]
        break;
 8006780:	e00c      	b.n	800679c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006782:	f7fe fe61 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8006786:	61b8      	str	r0, [r7, #24]
        break;
 8006788:	e008      	b.n	800679c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800678a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678e:	61bb      	str	r3, [r7, #24]
        break;
 8006790:	e004      	b.n	800679c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	77bb      	strb	r3, [r7, #30]
        break;
 800679a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d074      	beq.n	800688c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	005a      	lsls	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b0f      	cmp	r3, #15
 80067bc:	d916      	bls.n	80067ec <UART_SetConfig+0x400>
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c4:	d212      	bcs.n	80067ec <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f023 030f 	bic.w	r3, r3, #15
 80067ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	b29a      	uxth	r2, r3
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	4313      	orrs	r3, r2
 80067e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	89fa      	ldrh	r2, [r7, #14]
 80067e8:	60da      	str	r2, [r3, #12]
 80067ea:	e04f      	b.n	800688c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	77bb      	strb	r3, [r7, #30]
 80067f0:	e04c      	b.n	800688c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067f2:	7ffb      	ldrb	r3, [r7, #31]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d828      	bhi.n	800684a <UART_SetConfig+0x45e>
 80067f8:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x414>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	08006825 	.word	0x08006825
 8006804:	0800682d 	.word	0x0800682d
 8006808:	08006835 	.word	0x08006835
 800680c:	0800684b 	.word	0x0800684b
 8006810:	0800683b 	.word	0x0800683b
 8006814:	0800684b 	.word	0x0800684b
 8006818:	0800684b 	.word	0x0800684b
 800681c:	0800684b 	.word	0x0800684b
 8006820:	08006843 	.word	0x08006843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006824:	f7fe fefe 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8006828:	61b8      	str	r0, [r7, #24]
        break;
 800682a:	e013      	b.n	8006854 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800682c:	f7fe ff0e 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 8006830:	61b8      	str	r0, [r7, #24]
        break;
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <UART_SetConfig+0x4c0>)
 8006836:	61bb      	str	r3, [r7, #24]
        break;
 8006838:	e00c      	b.n	8006854 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800683a:	f7fe fe05 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 800683e:	61b8      	str	r0, [r7, #24]
        break;
 8006840:	e008      	b.n	8006854 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006846:	61bb      	str	r3, [r7, #24]
        break;
 8006848:	e004      	b.n	8006854 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	77bb      	strb	r3, [r7, #30]
        break;
 8006852:	bf00      	nop
    }

    if (pclk != 0U)
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d018      	beq.n	800688c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	085a      	lsrs	r2, r3, #1
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	441a      	add	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b0f      	cmp	r3, #15
 8006872:	d909      	bls.n	8006888 <UART_SetConfig+0x49c>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687a:	d205      	bcs.n	8006888 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	b29a      	uxth	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	e001      	b.n	800688c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006898:	7fbb      	ldrb	r3, [r7, #30]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3720      	adds	r7, #32
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40007c00 	.word	0x40007c00
 80068a8:	40023800 	.word	0x40023800
 80068ac:	00f42400 	.word	0x00f42400

080068b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01a      	beq.n	80069c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ae:	d10a      	bne.n	80069c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	605a      	str	r2, [r3, #4]
  }
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a04:	f7fc ff66 	bl	80038d4 <HAL_GetTick>
 8006a08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0308 	and.w	r3, r3, #8
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d10e      	bne.n	8006a36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f817 	bl	8006a5a <UART_WaitOnFlagUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e00d      	b.n	8006a52 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b09c      	sub	sp, #112	; 0x70
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6a:	e0a5      	b.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	f000 80a1 	beq.w	8006bb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a76:	f7fc ff2d 	bl	80038d4 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d302      	bcc.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d13e      	bne.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e6      	bne.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3308      	adds	r3, #8
 8006adc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ade:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e5      	bne.n	8006abe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e067      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d04f      	beq.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b26:	d147      	bne.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
 8006b52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3308      	adds	r3, #8
 8006b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	613b      	str	r3, [r7, #16]
   return(result);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b84:	623a      	str	r2, [r7, #32]
 8006b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	69f9      	ldr	r1, [r7, #28]
 8006b8a:	6a3a      	ldr	r2, [r7, #32]
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e5      	bne.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e010      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	69da      	ldr	r2, [r3, #28]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	bf0c      	ite	eq
 8006bc8:	2301      	moveq	r3, #1
 8006bca:	2300      	movne	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	f43f af4a 	beq.w	8006a6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3770      	adds	r7, #112	; 0x70
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b095      	sub	sp, #84	; 0x54
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c08:	643b      	str	r3, [r7, #64]	; 0x40
 8006c0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e5      	bne.n	8006c1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d118      	bne.n	8006c8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f023 0310 	bic.w	r3, r3, #16
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6979      	ldr	r1, [r7, #20]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	613b      	str	r3, [r7, #16]
   return(result);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e6      	bne.n	8006c58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c9c:	bf00      	nop
 8006c9e:	3754      	adds	r7, #84	; 0x54
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7fc fa4c 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6979      	ldr	r1, [r7, #20]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	613b      	str	r3, [r7, #16]
   return(result);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e6      	bne.n	8006cdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fc fa0e 	bl	800313c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d20:	bf00      	nop
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <__errno>:
 8006d28:	4b01      	ldr	r3, [pc, #4]	; (8006d30 <__errno+0x8>)
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000014 	.word	0x20000014

08006d34 <__libc_init_array>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4d0d      	ldr	r5, [pc, #52]	; (8006d6c <__libc_init_array+0x38>)
 8006d38:	4c0d      	ldr	r4, [pc, #52]	; (8006d70 <__libc_init_array+0x3c>)
 8006d3a:	1b64      	subs	r4, r4, r5
 8006d3c:	10a4      	asrs	r4, r4, #2
 8006d3e:	2600      	movs	r6, #0
 8006d40:	42a6      	cmp	r6, r4
 8006d42:	d109      	bne.n	8006d58 <__libc_init_array+0x24>
 8006d44:	4d0b      	ldr	r5, [pc, #44]	; (8006d74 <__libc_init_array+0x40>)
 8006d46:	4c0c      	ldr	r4, [pc, #48]	; (8006d78 <__libc_init_array+0x44>)
 8006d48:	f002 ff44 	bl	8009bd4 <_init>
 8006d4c:	1b64      	subs	r4, r4, r5
 8006d4e:	10a4      	asrs	r4, r4, #2
 8006d50:	2600      	movs	r6, #0
 8006d52:	42a6      	cmp	r6, r4
 8006d54:	d105      	bne.n	8006d62 <__libc_init_array+0x2e>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5c:	4798      	blx	r3
 8006d5e:	3601      	adds	r6, #1
 8006d60:	e7ee      	b.n	8006d40 <__libc_init_array+0xc>
 8006d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d66:	4798      	blx	r3
 8006d68:	3601      	adds	r6, #1
 8006d6a:	e7f2      	b.n	8006d52 <__libc_init_array+0x1e>
 8006d6c:	0800c23c 	.word	0x0800c23c
 8006d70:	0800c23c 	.word	0x0800c23c
 8006d74:	0800c23c 	.word	0x0800c23c
 8006d78:	0800c240 	.word	0x0800c240

08006d7c <memset>:
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d100      	bne.n	8006d86 <memset+0xa>
 8006d84:	4770      	bx	lr
 8006d86:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8a:	e7f9      	b.n	8006d80 <memset+0x4>

08006d8c <__cvt>:
 8006d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	ec55 4b10 	vmov	r4, r5, d0
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	460e      	mov	r6, r1
 8006d98:	4619      	mov	r1, r3
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	bfbb      	ittet	lt
 8006d9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006da2:	461d      	movlt	r5, r3
 8006da4:	2300      	movge	r3, #0
 8006da6:	232d      	movlt	r3, #45	; 0x2d
 8006da8:	700b      	strb	r3, [r1, #0]
 8006daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006db0:	4691      	mov	r9, r2
 8006db2:	f023 0820 	bic.w	r8, r3, #32
 8006db6:	bfbc      	itt	lt
 8006db8:	4622      	movlt	r2, r4
 8006dba:	4614      	movlt	r4, r2
 8006dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dc0:	d005      	beq.n	8006dce <__cvt+0x42>
 8006dc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dc6:	d100      	bne.n	8006dca <__cvt+0x3e>
 8006dc8:	3601      	adds	r6, #1
 8006dca:	2102      	movs	r1, #2
 8006dcc:	e000      	b.n	8006dd0 <__cvt+0x44>
 8006dce:	2103      	movs	r1, #3
 8006dd0:	ab03      	add	r3, sp, #12
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	ab02      	add	r3, sp, #8
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	ec45 4b10 	vmov	d0, r4, r5
 8006ddc:	4653      	mov	r3, sl
 8006dde:	4632      	mov	r2, r6
 8006de0:	f000 fe3a 	bl	8007a58 <_dtoa_r>
 8006de4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006de8:	4607      	mov	r7, r0
 8006dea:	d102      	bne.n	8006df2 <__cvt+0x66>
 8006dec:	f019 0f01 	tst.w	r9, #1
 8006df0:	d022      	beq.n	8006e38 <__cvt+0xac>
 8006df2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006df6:	eb07 0906 	add.w	r9, r7, r6
 8006dfa:	d110      	bne.n	8006e1e <__cvt+0x92>
 8006dfc:	783b      	ldrb	r3, [r7, #0]
 8006dfe:	2b30      	cmp	r3, #48	; 0x30
 8006e00:	d10a      	bne.n	8006e18 <__cvt+0x8c>
 8006e02:	2200      	movs	r2, #0
 8006e04:	2300      	movs	r3, #0
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 8006e0e:	b918      	cbnz	r0, 8006e18 <__cvt+0x8c>
 8006e10:	f1c6 0601 	rsb	r6, r6, #1
 8006e14:	f8ca 6000 	str.w	r6, [sl]
 8006e18:	f8da 3000 	ldr.w	r3, [sl]
 8006e1c:	4499      	add	r9, r3
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2300      	movs	r3, #0
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7f9 fe6f 	bl	8000b08 <__aeabi_dcmpeq>
 8006e2a:	b108      	cbz	r0, 8006e30 <__cvt+0xa4>
 8006e2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e30:	2230      	movs	r2, #48	; 0x30
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	454b      	cmp	r3, r9
 8006e36:	d307      	bcc.n	8006e48 <__cvt+0xbc>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e3c:	1bdb      	subs	r3, r3, r7
 8006e3e:	4638      	mov	r0, r7
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	b004      	add	sp, #16
 8006e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	9103      	str	r1, [sp, #12]
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e7f0      	b.n	8006e32 <__cvt+0xa6>

08006e50 <__exponent>:
 8006e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e52:	4603      	mov	r3, r0
 8006e54:	2900      	cmp	r1, #0
 8006e56:	bfb8      	it	lt
 8006e58:	4249      	neglt	r1, r1
 8006e5a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e5e:	bfb4      	ite	lt
 8006e60:	222d      	movlt	r2, #45	; 0x2d
 8006e62:	222b      	movge	r2, #43	; 0x2b
 8006e64:	2909      	cmp	r1, #9
 8006e66:	7042      	strb	r2, [r0, #1]
 8006e68:	dd2a      	ble.n	8006ec0 <__exponent+0x70>
 8006e6a:	f10d 0407 	add.w	r4, sp, #7
 8006e6e:	46a4      	mov	ip, r4
 8006e70:	270a      	movs	r7, #10
 8006e72:	46a6      	mov	lr, r4
 8006e74:	460a      	mov	r2, r1
 8006e76:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e7a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e7e:	3530      	adds	r5, #48	; 0x30
 8006e80:	2a63      	cmp	r2, #99	; 0x63
 8006e82:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	dcf1      	bgt.n	8006e72 <__exponent+0x22>
 8006e8e:	3130      	adds	r1, #48	; 0x30
 8006e90:	f1ae 0502 	sub.w	r5, lr, #2
 8006e94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e98:	1c44      	adds	r4, r0, #1
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4561      	cmp	r1, ip
 8006e9e:	d30a      	bcc.n	8006eb6 <__exponent+0x66>
 8006ea0:	f10d 0209 	add.w	r2, sp, #9
 8006ea4:	eba2 020e 	sub.w	r2, r2, lr
 8006ea8:	4565      	cmp	r5, ip
 8006eaa:	bf88      	it	hi
 8006eac:	2200      	movhi	r2, #0
 8006eae:	4413      	add	r3, r2
 8006eb0:	1a18      	subs	r0, r3, r0
 8006eb2:	b003      	add	sp, #12
 8006eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ebe:	e7ed      	b.n	8006e9c <__exponent+0x4c>
 8006ec0:	2330      	movs	r3, #48	; 0x30
 8006ec2:	3130      	adds	r1, #48	; 0x30
 8006ec4:	7083      	strb	r3, [r0, #2]
 8006ec6:	70c1      	strb	r1, [r0, #3]
 8006ec8:	1d03      	adds	r3, r0, #4
 8006eca:	e7f1      	b.n	8006eb0 <__exponent+0x60>

08006ecc <_printf_float>:
 8006ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	ed2d 8b02 	vpush	{d8}
 8006ed4:	b08d      	sub	sp, #52	; 0x34
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006edc:	4616      	mov	r6, r2
 8006ede:	461f      	mov	r7, r3
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	f001 fd5d 	bl	80089a0 <_localeconv_r>
 8006ee6:	f8d0 a000 	ldr.w	sl, [r0]
 8006eea:	4650      	mov	r0, sl
 8006eec:	f7f9 f990 	bl	8000210 <strlen>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	9305      	str	r3, [sp, #20]
 8006ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8006efc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f00:	3307      	adds	r3, #7
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	f103 0208 	add.w	r2, r3, #8
 8006f0a:	f8c8 2000 	str.w	r2, [r8]
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f1e:	9307      	str	r3, [sp, #28]
 8006f20:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f24:	ee08 0a10 	vmov	s16, r0
 8006f28:	4b9f      	ldr	r3, [pc, #636]	; (80071a8 <_printf_float+0x2dc>)
 8006f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f32:	f7f9 fe1b 	bl	8000b6c <__aeabi_dcmpun>
 8006f36:	bb88      	cbnz	r0, 8006f9c <_printf_float+0xd0>
 8006f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f3c:	4b9a      	ldr	r3, [pc, #616]	; (80071a8 <_printf_float+0x2dc>)
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	f7f9 fdf5 	bl	8000b30 <__aeabi_dcmple>
 8006f46:	bb48      	cbnz	r0, 8006f9c <_printf_float+0xd0>
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 fde4 	bl	8000b1c <__aeabi_dcmplt>
 8006f54:	b110      	cbz	r0, 8006f5c <_printf_float+0x90>
 8006f56:	232d      	movs	r3, #45	; 0x2d
 8006f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5c:	4b93      	ldr	r3, [pc, #588]	; (80071ac <_printf_float+0x2e0>)
 8006f5e:	4894      	ldr	r0, [pc, #592]	; (80071b0 <_printf_float+0x2e4>)
 8006f60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f64:	bf94      	ite	ls
 8006f66:	4698      	movls	r8, r3
 8006f68:	4680      	movhi	r8, r0
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	9b05      	ldr	r3, [sp, #20]
 8006f70:	f023 0204 	bic.w	r2, r3, #4
 8006f74:	6022      	str	r2, [r4, #0]
 8006f76:	f04f 0900 	mov.w	r9, #0
 8006f7a:	9700      	str	r7, [sp, #0]
 8006f7c:	4633      	mov	r3, r6
 8006f7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f9d8 	bl	8007338 <_printf_common>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f040 8090 	bne.w	80070ae <_printf_float+0x1e2>
 8006f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f92:	b00d      	add	sp, #52	; 0x34
 8006f94:	ecbd 8b02 	vpop	{d8}
 8006f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	f7f9 fde2 	bl	8000b6c <__aeabi_dcmpun>
 8006fa8:	b140      	cbz	r0, 8006fbc <_printf_float+0xf0>
 8006faa:	464b      	mov	r3, r9
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bfbc      	itt	lt
 8006fb0:	232d      	movlt	r3, #45	; 0x2d
 8006fb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fb6:	487f      	ldr	r0, [pc, #508]	; (80071b4 <_printf_float+0x2e8>)
 8006fb8:	4b7f      	ldr	r3, [pc, #508]	; (80071b8 <_printf_float+0x2ec>)
 8006fba:	e7d1      	b.n	8006f60 <_printf_float+0x94>
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fc2:	9206      	str	r2, [sp, #24]
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	d13f      	bne.n	8007048 <_printf_float+0x17c>
 8006fc8:	2306      	movs	r3, #6
 8006fca:	6063      	str	r3, [r4, #4]
 8006fcc:	9b05      	ldr	r3, [sp, #20]
 8006fce:	6861      	ldr	r1, [r4, #4]
 8006fd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	ab0a      	add	r3, sp, #40	; 0x28
 8006fda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fde:	ab09      	add	r3, sp, #36	; 0x24
 8006fe0:	ec49 8b10 	vmov	d0, r8, r9
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	6022      	str	r2, [r4, #0]
 8006fe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fec:	4628      	mov	r0, r5
 8006fee:	f7ff fecd 	bl	8006d8c <__cvt>
 8006ff2:	9b06      	ldr	r3, [sp, #24]
 8006ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff6:	2b47      	cmp	r3, #71	; 0x47
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	d108      	bne.n	800700e <_printf_float+0x142>
 8006ffc:	1cc8      	adds	r0, r1, #3
 8006ffe:	db02      	blt.n	8007006 <_printf_float+0x13a>
 8007000:	6863      	ldr	r3, [r4, #4]
 8007002:	4299      	cmp	r1, r3
 8007004:	dd41      	ble.n	800708a <_printf_float+0x1be>
 8007006:	f1ab 0b02 	sub.w	fp, fp, #2
 800700a:	fa5f fb8b 	uxtb.w	fp, fp
 800700e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007012:	d820      	bhi.n	8007056 <_printf_float+0x18a>
 8007014:	3901      	subs	r1, #1
 8007016:	465a      	mov	r2, fp
 8007018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800701c:	9109      	str	r1, [sp, #36]	; 0x24
 800701e:	f7ff ff17 	bl	8006e50 <__exponent>
 8007022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007024:	1813      	adds	r3, r2, r0
 8007026:	2a01      	cmp	r2, #1
 8007028:	4681      	mov	r9, r0
 800702a:	6123      	str	r3, [r4, #16]
 800702c:	dc02      	bgt.n	8007034 <_printf_float+0x168>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	07d2      	lsls	r2, r2, #31
 8007032:	d501      	bpl.n	8007038 <_printf_float+0x16c>
 8007034:	3301      	adds	r3, #1
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800703c:	2b00      	cmp	r3, #0
 800703e:	d09c      	beq.n	8006f7a <_printf_float+0xae>
 8007040:	232d      	movs	r3, #45	; 0x2d
 8007042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007046:	e798      	b.n	8006f7a <_printf_float+0xae>
 8007048:	9a06      	ldr	r2, [sp, #24]
 800704a:	2a47      	cmp	r2, #71	; 0x47
 800704c:	d1be      	bne.n	8006fcc <_printf_float+0x100>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1bc      	bne.n	8006fcc <_printf_float+0x100>
 8007052:	2301      	movs	r3, #1
 8007054:	e7b9      	b.n	8006fca <_printf_float+0xfe>
 8007056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800705a:	d118      	bne.n	800708e <_printf_float+0x1c2>
 800705c:	2900      	cmp	r1, #0
 800705e:	6863      	ldr	r3, [r4, #4]
 8007060:	dd0b      	ble.n	800707a <_printf_float+0x1ae>
 8007062:	6121      	str	r1, [r4, #16]
 8007064:	b913      	cbnz	r3, 800706c <_printf_float+0x1a0>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	07d0      	lsls	r0, r2, #31
 800706a:	d502      	bpl.n	8007072 <_printf_float+0x1a6>
 800706c:	3301      	adds	r3, #1
 800706e:	440b      	add	r3, r1
 8007070:	6123      	str	r3, [r4, #16]
 8007072:	65a1      	str	r1, [r4, #88]	; 0x58
 8007074:	f04f 0900 	mov.w	r9, #0
 8007078:	e7de      	b.n	8007038 <_printf_float+0x16c>
 800707a:	b913      	cbnz	r3, 8007082 <_printf_float+0x1b6>
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	07d2      	lsls	r2, r2, #31
 8007080:	d501      	bpl.n	8007086 <_printf_float+0x1ba>
 8007082:	3302      	adds	r3, #2
 8007084:	e7f4      	b.n	8007070 <_printf_float+0x1a4>
 8007086:	2301      	movs	r3, #1
 8007088:	e7f2      	b.n	8007070 <_printf_float+0x1a4>
 800708a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800708e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007090:	4299      	cmp	r1, r3
 8007092:	db05      	blt.n	80070a0 <_printf_float+0x1d4>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	6121      	str	r1, [r4, #16]
 8007098:	07d8      	lsls	r0, r3, #31
 800709a:	d5ea      	bpl.n	8007072 <_printf_float+0x1a6>
 800709c:	1c4b      	adds	r3, r1, #1
 800709e:	e7e7      	b.n	8007070 <_printf_float+0x1a4>
 80070a0:	2900      	cmp	r1, #0
 80070a2:	bfd4      	ite	le
 80070a4:	f1c1 0202 	rsble	r2, r1, #2
 80070a8:	2201      	movgt	r2, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	e7e0      	b.n	8007070 <_printf_float+0x1a4>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	055a      	lsls	r2, r3, #21
 80070b2:	d407      	bmi.n	80070c4 <_printf_float+0x1f8>
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	4642      	mov	r2, r8
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	d12c      	bne.n	800711c <_printf_float+0x250>
 80070c2:	e764      	b.n	8006f8e <_printf_float+0xc2>
 80070c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070c8:	f240 80e0 	bls.w	800728c <_printf_float+0x3c0>
 80070cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070d0:	2200      	movs	r2, #0
 80070d2:	2300      	movs	r3, #0
 80070d4:	f7f9 fd18 	bl	8000b08 <__aeabi_dcmpeq>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d034      	beq.n	8007146 <_printf_float+0x27a>
 80070dc:	4a37      	ldr	r2, [pc, #220]	; (80071bc <_printf_float+0x2f0>)
 80070de:	2301      	movs	r3, #1
 80070e0:	4631      	mov	r1, r6
 80070e2:	4628      	mov	r0, r5
 80070e4:	47b8      	blx	r7
 80070e6:	3001      	adds	r0, #1
 80070e8:	f43f af51 	beq.w	8006f8e <_printf_float+0xc2>
 80070ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f0:	429a      	cmp	r2, r3
 80070f2:	db02      	blt.n	80070fa <_printf_float+0x22e>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	07d8      	lsls	r0, r3, #31
 80070f8:	d510      	bpl.n	800711c <_printf_float+0x250>
 80070fa:	ee18 3a10 	vmov	r3, s16
 80070fe:	4652      	mov	r2, sl
 8007100:	4631      	mov	r1, r6
 8007102:	4628      	mov	r0, r5
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	f43f af41 	beq.w	8006f8e <_printf_float+0xc2>
 800710c:	f04f 0800 	mov.w	r8, #0
 8007110:	f104 091a 	add.w	r9, r4, #26
 8007114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007116:	3b01      	subs	r3, #1
 8007118:	4543      	cmp	r3, r8
 800711a:	dc09      	bgt.n	8007130 <_printf_float+0x264>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	079b      	lsls	r3, r3, #30
 8007120:	f100 8105 	bmi.w	800732e <_printf_float+0x462>
 8007124:	68e0      	ldr	r0, [r4, #12]
 8007126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007128:	4298      	cmp	r0, r3
 800712a:	bfb8      	it	lt
 800712c:	4618      	movlt	r0, r3
 800712e:	e730      	b.n	8006f92 <_printf_float+0xc6>
 8007130:	2301      	movs	r3, #1
 8007132:	464a      	mov	r2, r9
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f af27 	beq.w	8006f8e <_printf_float+0xc2>
 8007140:	f108 0801 	add.w	r8, r8, #1
 8007144:	e7e6      	b.n	8007114 <_printf_float+0x248>
 8007146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	dc39      	bgt.n	80071c0 <_printf_float+0x2f4>
 800714c:	4a1b      	ldr	r2, [pc, #108]	; (80071bc <_printf_float+0x2f0>)
 800714e:	2301      	movs	r3, #1
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af19 	beq.w	8006f8e <_printf_float+0xc2>
 800715c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007160:	4313      	orrs	r3, r2
 8007162:	d102      	bne.n	800716a <_printf_float+0x29e>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	07d9      	lsls	r1, r3, #31
 8007168:	d5d8      	bpl.n	800711c <_printf_float+0x250>
 800716a:	ee18 3a10 	vmov	r3, s16
 800716e:	4652      	mov	r2, sl
 8007170:	4631      	mov	r1, r6
 8007172:	4628      	mov	r0, r5
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	f43f af09 	beq.w	8006f8e <_printf_float+0xc2>
 800717c:	f04f 0900 	mov.w	r9, #0
 8007180:	f104 0a1a 	add.w	sl, r4, #26
 8007184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007186:	425b      	negs	r3, r3
 8007188:	454b      	cmp	r3, r9
 800718a:	dc01      	bgt.n	8007190 <_printf_float+0x2c4>
 800718c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718e:	e792      	b.n	80070b6 <_printf_float+0x1ea>
 8007190:	2301      	movs	r3, #1
 8007192:	4652      	mov	r2, sl
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	f43f aef7 	beq.w	8006f8e <_printf_float+0xc2>
 80071a0:	f109 0901 	add.w	r9, r9, #1
 80071a4:	e7ee      	b.n	8007184 <_printf_float+0x2b8>
 80071a6:	bf00      	nop
 80071a8:	7fefffff 	.word	0x7fefffff
 80071ac:	0800be58 	.word	0x0800be58
 80071b0:	0800be5c 	.word	0x0800be5c
 80071b4:	0800be64 	.word	0x0800be64
 80071b8:	0800be60 	.word	0x0800be60
 80071bc:	0800be68 	.word	0x0800be68
 80071c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071c4:	429a      	cmp	r2, r3
 80071c6:	bfa8      	it	ge
 80071c8:	461a      	movge	r2, r3
 80071ca:	2a00      	cmp	r2, #0
 80071cc:	4691      	mov	r9, r2
 80071ce:	dc37      	bgt.n	8007240 <_printf_float+0x374>
 80071d0:	f04f 0b00 	mov.w	fp, #0
 80071d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d8:	f104 021a 	add.w	r2, r4, #26
 80071dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	eba3 0309 	sub.w	r3, r3, r9
 80071e4:	455b      	cmp	r3, fp
 80071e6:	dc33      	bgt.n	8007250 <_printf_float+0x384>
 80071e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071ec:	429a      	cmp	r2, r3
 80071ee:	db3b      	blt.n	8007268 <_printf_float+0x39c>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	07da      	lsls	r2, r3, #31
 80071f4:	d438      	bmi.n	8007268 <_printf_float+0x39c>
 80071f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f8:	9b05      	ldr	r3, [sp, #20]
 80071fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	eba2 0901 	sub.w	r9, r2, r1
 8007202:	4599      	cmp	r9, r3
 8007204:	bfa8      	it	ge
 8007206:	4699      	movge	r9, r3
 8007208:	f1b9 0f00 	cmp.w	r9, #0
 800720c:	dc35      	bgt.n	800727a <_printf_float+0x3ae>
 800720e:	f04f 0800 	mov.w	r8, #0
 8007212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007216:	f104 0a1a 	add.w	sl, r4, #26
 800721a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	eba3 0309 	sub.w	r3, r3, r9
 8007224:	4543      	cmp	r3, r8
 8007226:	f77f af79 	ble.w	800711c <_printf_float+0x250>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	47b8      	blx	r7
 8007234:	3001      	adds	r0, #1
 8007236:	f43f aeaa 	beq.w	8006f8e <_printf_float+0xc2>
 800723a:	f108 0801 	add.w	r8, r8, #1
 800723e:	e7ec      	b.n	800721a <_printf_float+0x34e>
 8007240:	4613      	mov	r3, r2
 8007242:	4631      	mov	r1, r6
 8007244:	4642      	mov	r2, r8
 8007246:	4628      	mov	r0, r5
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	d1c0      	bne.n	80071d0 <_printf_float+0x304>
 800724e:	e69e      	b.n	8006f8e <_printf_float+0xc2>
 8007250:	2301      	movs	r3, #1
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	9205      	str	r2, [sp, #20]
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f ae97 	beq.w	8006f8e <_printf_float+0xc2>
 8007260:	9a05      	ldr	r2, [sp, #20]
 8007262:	f10b 0b01 	add.w	fp, fp, #1
 8007266:	e7b9      	b.n	80071dc <_printf_float+0x310>
 8007268:	ee18 3a10 	vmov	r3, s16
 800726c:	4652      	mov	r2, sl
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	d1be      	bne.n	80071f6 <_printf_float+0x32a>
 8007278:	e689      	b.n	8006f8e <_printf_float+0xc2>
 800727a:	9a05      	ldr	r2, [sp, #20]
 800727c:	464b      	mov	r3, r9
 800727e:	4442      	add	r2, r8
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	d1c1      	bne.n	800720e <_printf_float+0x342>
 800728a:	e680      	b.n	8006f8e <_printf_float+0xc2>
 800728c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800728e:	2a01      	cmp	r2, #1
 8007290:	dc01      	bgt.n	8007296 <_printf_float+0x3ca>
 8007292:	07db      	lsls	r3, r3, #31
 8007294:	d538      	bpl.n	8007308 <_printf_float+0x43c>
 8007296:	2301      	movs	r3, #1
 8007298:	4642      	mov	r2, r8
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	f43f ae74 	beq.w	8006f8e <_printf_float+0xc2>
 80072a6:	ee18 3a10 	vmov	r3, s16
 80072aa:	4652      	mov	r2, sl
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f ae6b 	beq.w	8006f8e <_printf_float+0xc2>
 80072b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	f7f9 fc22 	bl	8000b08 <__aeabi_dcmpeq>
 80072c4:	b9d8      	cbnz	r0, 80072fe <_printf_float+0x432>
 80072c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c8:	f108 0201 	add.w	r2, r8, #1
 80072cc:	3b01      	subs	r3, #1
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b8      	blx	r7
 80072d4:	3001      	adds	r0, #1
 80072d6:	d10e      	bne.n	80072f6 <_printf_float+0x42a>
 80072d8:	e659      	b.n	8006f8e <_printf_float+0xc2>
 80072da:	2301      	movs	r3, #1
 80072dc:	4652      	mov	r2, sl
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f ae52 	beq.w	8006f8e <_printf_float+0xc2>
 80072ea:	f108 0801 	add.w	r8, r8, #1
 80072ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f0:	3b01      	subs	r3, #1
 80072f2:	4543      	cmp	r3, r8
 80072f4:	dcf1      	bgt.n	80072da <_printf_float+0x40e>
 80072f6:	464b      	mov	r3, r9
 80072f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072fc:	e6dc      	b.n	80070b8 <_printf_float+0x1ec>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	f104 0a1a 	add.w	sl, r4, #26
 8007306:	e7f2      	b.n	80072ee <_printf_float+0x422>
 8007308:	2301      	movs	r3, #1
 800730a:	4642      	mov	r2, r8
 800730c:	e7df      	b.n	80072ce <_printf_float+0x402>
 800730e:	2301      	movs	r3, #1
 8007310:	464a      	mov	r2, r9
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f ae38 	beq.w	8006f8e <_printf_float+0xc2>
 800731e:	f108 0801 	add.w	r8, r8, #1
 8007322:	68e3      	ldr	r3, [r4, #12]
 8007324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007326:	1a5b      	subs	r3, r3, r1
 8007328:	4543      	cmp	r3, r8
 800732a:	dcf0      	bgt.n	800730e <_printf_float+0x442>
 800732c:	e6fa      	b.n	8007124 <_printf_float+0x258>
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	f104 0919 	add.w	r9, r4, #25
 8007336:	e7f4      	b.n	8007322 <_printf_float+0x456>

08007338 <_printf_common>:
 8007338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	4616      	mov	r6, r2
 800733e:	4699      	mov	r9, r3
 8007340:	688a      	ldr	r2, [r1, #8]
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007348:	4293      	cmp	r3, r2
 800734a:	bfb8      	it	lt
 800734c:	4613      	movlt	r3, r2
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007354:	4607      	mov	r7, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b10a      	cbz	r2, 800735e <_printf_common+0x26>
 800735a:	3301      	adds	r3, #1
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	0699      	lsls	r1, r3, #26
 8007362:	bf42      	ittt	mi
 8007364:	6833      	ldrmi	r3, [r6, #0]
 8007366:	3302      	addmi	r3, #2
 8007368:	6033      	strmi	r3, [r6, #0]
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	f015 0506 	ands.w	r5, r5, #6
 8007370:	d106      	bne.n	8007380 <_printf_common+0x48>
 8007372:	f104 0a19 	add.w	sl, r4, #25
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	6832      	ldr	r2, [r6, #0]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	42ab      	cmp	r3, r5
 800737e:	dc26      	bgt.n	80073ce <_printf_common+0x96>
 8007380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007384:	1e13      	subs	r3, r2, #0
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	bf18      	it	ne
 800738a:	2301      	movne	r3, #1
 800738c:	0692      	lsls	r2, r2, #26
 800738e:	d42b      	bmi.n	80073e8 <_printf_common+0xb0>
 8007390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007394:	4649      	mov	r1, r9
 8007396:	4638      	mov	r0, r7
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d01e      	beq.n	80073dc <_printf_common+0xa4>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	68e5      	ldr	r5, [r4, #12]
 80073a2:	6832      	ldr	r2, [r6, #0]
 80073a4:	f003 0306 	and.w	r3, r3, #6
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	bf08      	it	eq
 80073ac:	1aad      	subeq	r5, r5, r2
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	6922      	ldr	r2, [r4, #16]
 80073b2:	bf0c      	ite	eq
 80073b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b8:	2500      	movne	r5, #0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	bfc4      	itt	gt
 80073be:	1a9b      	subgt	r3, r3, r2
 80073c0:	18ed      	addgt	r5, r5, r3
 80073c2:	2600      	movs	r6, #0
 80073c4:	341a      	adds	r4, #26
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d11a      	bne.n	8007400 <_printf_common+0xc8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e008      	b.n	80073e0 <_printf_common+0xa8>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4652      	mov	r2, sl
 80073d2:	4649      	mov	r1, r9
 80073d4:	4638      	mov	r0, r7
 80073d6:	47c0      	blx	r8
 80073d8:	3001      	adds	r0, #1
 80073da:	d103      	bne.n	80073e4 <_printf_common+0xac>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	3501      	adds	r5, #1
 80073e6:	e7c6      	b.n	8007376 <_printf_common+0x3e>
 80073e8:	18e1      	adds	r1, r4, r3
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	2030      	movs	r0, #48	; 0x30
 80073ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f2:	4422      	add	r2, r4
 80073f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073fc:	3302      	adds	r3, #2
 80073fe:	e7c7      	b.n	8007390 <_printf_common+0x58>
 8007400:	2301      	movs	r3, #1
 8007402:	4622      	mov	r2, r4
 8007404:	4649      	mov	r1, r9
 8007406:	4638      	mov	r0, r7
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d0e6      	beq.n	80073dc <_printf_common+0xa4>
 800740e:	3601      	adds	r6, #1
 8007410:	e7d9      	b.n	80073c6 <_printf_common+0x8e>
	...

08007414 <_printf_i>:
 8007414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	4691      	mov	r9, r2
 800741c:	7e27      	ldrb	r7, [r4, #24]
 800741e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007420:	2f78      	cmp	r7, #120	; 0x78
 8007422:	4680      	mov	r8, r0
 8007424:	469a      	mov	sl, r3
 8007426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800742a:	d807      	bhi.n	800743c <_printf_i+0x28>
 800742c:	2f62      	cmp	r7, #98	; 0x62
 800742e:	d80a      	bhi.n	8007446 <_printf_i+0x32>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f000 80d8 	beq.w	80075e6 <_printf_i+0x1d2>
 8007436:	2f58      	cmp	r7, #88	; 0x58
 8007438:	f000 80a3 	beq.w	8007582 <_printf_i+0x16e>
 800743c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007444:	e03a      	b.n	80074bc <_printf_i+0xa8>
 8007446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800744a:	2b15      	cmp	r3, #21
 800744c:	d8f6      	bhi.n	800743c <_printf_i+0x28>
 800744e:	a001      	add	r0, pc, #4	; (adr r0, 8007454 <_printf_i+0x40>)
 8007450:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074c1 	.word	0x080074c1
 800745c:	0800743d 	.word	0x0800743d
 8007460:	0800743d 	.word	0x0800743d
 8007464:	0800743d 	.word	0x0800743d
 8007468:	0800743d 	.word	0x0800743d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800743d 	.word	0x0800743d
 8007474:	0800743d 	.word	0x0800743d
 8007478:	0800743d 	.word	0x0800743d
 800747c:	0800743d 	.word	0x0800743d
 8007480:	080075cd 	.word	0x080075cd
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080075af 	.word	0x080075af
 800748c:	0800743d 	.word	0x0800743d
 8007490:	0800743d 	.word	0x0800743d
 8007494:	080075ef 	.word	0x080075ef
 8007498:	0800743d 	.word	0x0800743d
 800749c:	080074f1 	.word	0x080074f1
 80074a0:	0800743d 	.word	0x0800743d
 80074a4:	0800743d 	.word	0x0800743d
 80074a8:	080075b7 	.word	0x080075b7
 80074ac:	680b      	ldr	r3, [r1, #0]
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	600a      	str	r2, [r1, #0]
 80074b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074bc:	2301      	movs	r3, #1
 80074be:	e0a3      	b.n	8007608 <_printf_i+0x1f4>
 80074c0:	6825      	ldr	r5, [r4, #0]
 80074c2:	6808      	ldr	r0, [r1, #0]
 80074c4:	062e      	lsls	r6, r5, #24
 80074c6:	f100 0304 	add.w	r3, r0, #4
 80074ca:	d50a      	bpl.n	80074e2 <_printf_i+0xce>
 80074cc:	6805      	ldr	r5, [r0, #0]
 80074ce:	600b      	str	r3, [r1, #0]
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	da03      	bge.n	80074dc <_printf_i+0xc8>
 80074d4:	232d      	movs	r3, #45	; 0x2d
 80074d6:	426d      	negs	r5, r5
 80074d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074dc:	485e      	ldr	r0, [pc, #376]	; (8007658 <_printf_i+0x244>)
 80074de:	230a      	movs	r3, #10
 80074e0:	e019      	b.n	8007516 <_printf_i+0x102>
 80074e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074e6:	6805      	ldr	r5, [r0, #0]
 80074e8:	600b      	str	r3, [r1, #0]
 80074ea:	bf18      	it	ne
 80074ec:	b22d      	sxthne	r5, r5
 80074ee:	e7ef      	b.n	80074d0 <_printf_i+0xbc>
 80074f0:	680b      	ldr	r3, [r1, #0]
 80074f2:	6825      	ldr	r5, [r4, #0]
 80074f4:	1d18      	adds	r0, r3, #4
 80074f6:	6008      	str	r0, [r1, #0]
 80074f8:	0628      	lsls	r0, r5, #24
 80074fa:	d501      	bpl.n	8007500 <_printf_i+0xec>
 80074fc:	681d      	ldr	r5, [r3, #0]
 80074fe:	e002      	b.n	8007506 <_printf_i+0xf2>
 8007500:	0669      	lsls	r1, r5, #25
 8007502:	d5fb      	bpl.n	80074fc <_printf_i+0xe8>
 8007504:	881d      	ldrh	r5, [r3, #0]
 8007506:	4854      	ldr	r0, [pc, #336]	; (8007658 <_printf_i+0x244>)
 8007508:	2f6f      	cmp	r7, #111	; 0x6f
 800750a:	bf0c      	ite	eq
 800750c:	2308      	moveq	r3, #8
 800750e:	230a      	movne	r3, #10
 8007510:	2100      	movs	r1, #0
 8007512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007516:	6866      	ldr	r6, [r4, #4]
 8007518:	60a6      	str	r6, [r4, #8]
 800751a:	2e00      	cmp	r6, #0
 800751c:	bfa2      	ittt	ge
 800751e:	6821      	ldrge	r1, [r4, #0]
 8007520:	f021 0104 	bicge.w	r1, r1, #4
 8007524:	6021      	strge	r1, [r4, #0]
 8007526:	b90d      	cbnz	r5, 800752c <_printf_i+0x118>
 8007528:	2e00      	cmp	r6, #0
 800752a:	d04d      	beq.n	80075c8 <_printf_i+0x1b4>
 800752c:	4616      	mov	r6, r2
 800752e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007532:	fb03 5711 	mls	r7, r3, r1, r5
 8007536:	5dc7      	ldrb	r7, [r0, r7]
 8007538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800753c:	462f      	mov	r7, r5
 800753e:	42bb      	cmp	r3, r7
 8007540:	460d      	mov	r5, r1
 8007542:	d9f4      	bls.n	800752e <_printf_i+0x11a>
 8007544:	2b08      	cmp	r3, #8
 8007546:	d10b      	bne.n	8007560 <_printf_i+0x14c>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	07df      	lsls	r7, r3, #31
 800754c:	d508      	bpl.n	8007560 <_printf_i+0x14c>
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	6861      	ldr	r1, [r4, #4]
 8007552:	4299      	cmp	r1, r3
 8007554:	bfde      	ittt	le
 8007556:	2330      	movle	r3, #48	; 0x30
 8007558:	f806 3c01 	strble.w	r3, [r6, #-1]
 800755c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007560:	1b92      	subs	r2, r2, r6
 8007562:	6122      	str	r2, [r4, #16]
 8007564:	f8cd a000 	str.w	sl, [sp]
 8007568:	464b      	mov	r3, r9
 800756a:	aa03      	add	r2, sp, #12
 800756c:	4621      	mov	r1, r4
 800756e:	4640      	mov	r0, r8
 8007570:	f7ff fee2 	bl	8007338 <_printf_common>
 8007574:	3001      	adds	r0, #1
 8007576:	d14c      	bne.n	8007612 <_printf_i+0x1fe>
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	b004      	add	sp, #16
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	4835      	ldr	r0, [pc, #212]	; (8007658 <_printf_i+0x244>)
 8007584:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	680e      	ldr	r6, [r1, #0]
 800758c:	061f      	lsls	r7, r3, #24
 800758e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007592:	600e      	str	r6, [r1, #0]
 8007594:	d514      	bpl.n	80075c0 <_printf_i+0x1ac>
 8007596:	07d9      	lsls	r1, r3, #31
 8007598:	bf44      	itt	mi
 800759a:	f043 0320 	orrmi.w	r3, r3, #32
 800759e:	6023      	strmi	r3, [r4, #0]
 80075a0:	b91d      	cbnz	r5, 80075aa <_printf_i+0x196>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f023 0320 	bic.w	r3, r3, #32
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	2310      	movs	r3, #16
 80075ac:	e7b0      	b.n	8007510 <_printf_i+0xfc>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	f043 0320 	orr.w	r3, r3, #32
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	2378      	movs	r3, #120	; 0x78
 80075b8:	4828      	ldr	r0, [pc, #160]	; (800765c <_printf_i+0x248>)
 80075ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075be:	e7e3      	b.n	8007588 <_printf_i+0x174>
 80075c0:	065e      	lsls	r6, r3, #25
 80075c2:	bf48      	it	mi
 80075c4:	b2ad      	uxthmi	r5, r5
 80075c6:	e7e6      	b.n	8007596 <_printf_i+0x182>
 80075c8:	4616      	mov	r6, r2
 80075ca:	e7bb      	b.n	8007544 <_printf_i+0x130>
 80075cc:	680b      	ldr	r3, [r1, #0]
 80075ce:	6826      	ldr	r6, [r4, #0]
 80075d0:	6960      	ldr	r0, [r4, #20]
 80075d2:	1d1d      	adds	r5, r3, #4
 80075d4:	600d      	str	r5, [r1, #0]
 80075d6:	0635      	lsls	r5, r6, #24
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	d501      	bpl.n	80075e0 <_printf_i+0x1cc>
 80075dc:	6018      	str	r0, [r3, #0]
 80075de:	e002      	b.n	80075e6 <_printf_i+0x1d2>
 80075e0:	0671      	lsls	r1, r6, #25
 80075e2:	d5fb      	bpl.n	80075dc <_printf_i+0x1c8>
 80075e4:	8018      	strh	r0, [r3, #0]
 80075e6:	2300      	movs	r3, #0
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	4616      	mov	r6, r2
 80075ec:	e7ba      	b.n	8007564 <_printf_i+0x150>
 80075ee:	680b      	ldr	r3, [r1, #0]
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	600a      	str	r2, [r1, #0]
 80075f4:	681e      	ldr	r6, [r3, #0]
 80075f6:	6862      	ldr	r2, [r4, #4]
 80075f8:	2100      	movs	r1, #0
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7f8 fe10 	bl	8000220 <memchr>
 8007600:	b108      	cbz	r0, 8007606 <_printf_i+0x1f2>
 8007602:	1b80      	subs	r0, r0, r6
 8007604:	6060      	str	r0, [r4, #4]
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	2300      	movs	r3, #0
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007610:	e7a8      	b.n	8007564 <_printf_i+0x150>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	4632      	mov	r2, r6
 8007616:	4649      	mov	r1, r9
 8007618:	4640      	mov	r0, r8
 800761a:	47d0      	blx	sl
 800761c:	3001      	adds	r0, #1
 800761e:	d0ab      	beq.n	8007578 <_printf_i+0x164>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	079b      	lsls	r3, r3, #30
 8007624:	d413      	bmi.n	800764e <_printf_i+0x23a>
 8007626:	68e0      	ldr	r0, [r4, #12]
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	4298      	cmp	r0, r3
 800762c:	bfb8      	it	lt
 800762e:	4618      	movlt	r0, r3
 8007630:	e7a4      	b.n	800757c <_printf_i+0x168>
 8007632:	2301      	movs	r3, #1
 8007634:	4632      	mov	r2, r6
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	47d0      	blx	sl
 800763c:	3001      	adds	r0, #1
 800763e:	d09b      	beq.n	8007578 <_printf_i+0x164>
 8007640:	3501      	adds	r5, #1
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	9903      	ldr	r1, [sp, #12]
 8007646:	1a5b      	subs	r3, r3, r1
 8007648:	42ab      	cmp	r3, r5
 800764a:	dcf2      	bgt.n	8007632 <_printf_i+0x21e>
 800764c:	e7eb      	b.n	8007626 <_printf_i+0x212>
 800764e:	2500      	movs	r5, #0
 8007650:	f104 0619 	add.w	r6, r4, #25
 8007654:	e7f5      	b.n	8007642 <_printf_i+0x22e>
 8007656:	bf00      	nop
 8007658:	0800be6a 	.word	0x0800be6a
 800765c:	0800be7b 	.word	0x0800be7b

08007660 <iprintf>:
 8007660:	b40f      	push	{r0, r1, r2, r3}
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <iprintf+0x2c>)
 8007664:	b513      	push	{r0, r1, r4, lr}
 8007666:	681c      	ldr	r4, [r3, #0]
 8007668:	b124      	cbz	r4, 8007674 <iprintf+0x14>
 800766a:	69a3      	ldr	r3, [r4, #24]
 800766c:	b913      	cbnz	r3, 8007674 <iprintf+0x14>
 800766e:	4620      	mov	r0, r4
 8007670:	f001 f8f8 	bl	8008864 <__sinit>
 8007674:	ab05      	add	r3, sp, #20
 8007676:	9a04      	ldr	r2, [sp, #16]
 8007678:	68a1      	ldr	r1, [r4, #8]
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	4620      	mov	r0, r4
 800767e:	f001 ffcf 	bl	8009620 <_vfiprintf_r>
 8007682:	b002      	add	sp, #8
 8007684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007688:	b004      	add	sp, #16
 800768a:	4770      	bx	lr
 800768c:	20000014 	.word	0x20000014

08007690 <_puts_r>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	460e      	mov	r6, r1
 8007694:	4605      	mov	r5, r0
 8007696:	b118      	cbz	r0, 80076a0 <_puts_r+0x10>
 8007698:	6983      	ldr	r3, [r0, #24]
 800769a:	b90b      	cbnz	r3, 80076a0 <_puts_r+0x10>
 800769c:	f001 f8e2 	bl	8008864 <__sinit>
 80076a0:	69ab      	ldr	r3, [r5, #24]
 80076a2:	68ac      	ldr	r4, [r5, #8]
 80076a4:	b913      	cbnz	r3, 80076ac <_puts_r+0x1c>
 80076a6:	4628      	mov	r0, r5
 80076a8:	f001 f8dc 	bl	8008864 <__sinit>
 80076ac:	4b2c      	ldr	r3, [pc, #176]	; (8007760 <_puts_r+0xd0>)
 80076ae:	429c      	cmp	r4, r3
 80076b0:	d120      	bne.n	80076f4 <_puts_r+0x64>
 80076b2:	686c      	ldr	r4, [r5, #4]
 80076b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076b6:	07db      	lsls	r3, r3, #31
 80076b8:	d405      	bmi.n	80076c6 <_puts_r+0x36>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	0598      	lsls	r0, r3, #22
 80076be:	d402      	bmi.n	80076c6 <_puts_r+0x36>
 80076c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c2:	f001 f972 	bl	80089aa <__retarget_lock_acquire_recursive>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	0719      	lsls	r1, r3, #28
 80076ca:	d51d      	bpl.n	8007708 <_puts_r+0x78>
 80076cc:	6923      	ldr	r3, [r4, #16]
 80076ce:	b1db      	cbz	r3, 8007708 <_puts_r+0x78>
 80076d0:	3e01      	subs	r6, #1
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076d8:	3b01      	subs	r3, #1
 80076da:	60a3      	str	r3, [r4, #8]
 80076dc:	bb39      	cbnz	r1, 800772e <_puts_r+0x9e>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da38      	bge.n	8007754 <_puts_r+0xc4>
 80076e2:	4622      	mov	r2, r4
 80076e4:	210a      	movs	r1, #10
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 f868 	bl	80077bc <__swbuf_r>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d011      	beq.n	8007714 <_puts_r+0x84>
 80076f0:	250a      	movs	r5, #10
 80076f2:	e011      	b.n	8007718 <_puts_r+0x88>
 80076f4:	4b1b      	ldr	r3, [pc, #108]	; (8007764 <_puts_r+0xd4>)
 80076f6:	429c      	cmp	r4, r3
 80076f8:	d101      	bne.n	80076fe <_puts_r+0x6e>
 80076fa:	68ac      	ldr	r4, [r5, #8]
 80076fc:	e7da      	b.n	80076b4 <_puts_r+0x24>
 80076fe:	4b1a      	ldr	r3, [pc, #104]	; (8007768 <_puts_r+0xd8>)
 8007700:	429c      	cmp	r4, r3
 8007702:	bf08      	it	eq
 8007704:	68ec      	ldreq	r4, [r5, #12]
 8007706:	e7d5      	b.n	80076b4 <_puts_r+0x24>
 8007708:	4621      	mov	r1, r4
 800770a:	4628      	mov	r0, r5
 800770c:	f000 f8a8 	bl	8007860 <__swsetup_r>
 8007710:	2800      	cmp	r0, #0
 8007712:	d0dd      	beq.n	80076d0 <_puts_r+0x40>
 8007714:	f04f 35ff 	mov.w	r5, #4294967295
 8007718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771a:	07da      	lsls	r2, r3, #31
 800771c:	d405      	bmi.n	800772a <_puts_r+0x9a>
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	059b      	lsls	r3, r3, #22
 8007722:	d402      	bmi.n	800772a <_puts_r+0x9a>
 8007724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007726:	f001 f941 	bl	80089ac <__retarget_lock_release_recursive>
 800772a:	4628      	mov	r0, r5
 800772c:	bd70      	pop	{r4, r5, r6, pc}
 800772e:	2b00      	cmp	r3, #0
 8007730:	da04      	bge.n	800773c <_puts_r+0xac>
 8007732:	69a2      	ldr	r2, [r4, #24]
 8007734:	429a      	cmp	r2, r3
 8007736:	dc06      	bgt.n	8007746 <_puts_r+0xb6>
 8007738:	290a      	cmp	r1, #10
 800773a:	d004      	beq.n	8007746 <_puts_r+0xb6>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	6022      	str	r2, [r4, #0]
 8007742:	7019      	strb	r1, [r3, #0]
 8007744:	e7c5      	b.n	80076d2 <_puts_r+0x42>
 8007746:	4622      	mov	r2, r4
 8007748:	4628      	mov	r0, r5
 800774a:	f000 f837 	bl	80077bc <__swbuf_r>
 800774e:	3001      	adds	r0, #1
 8007750:	d1bf      	bne.n	80076d2 <_puts_r+0x42>
 8007752:	e7df      	b.n	8007714 <_puts_r+0x84>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	250a      	movs	r5, #10
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	6022      	str	r2, [r4, #0]
 800775c:	701d      	strb	r5, [r3, #0]
 800775e:	e7db      	b.n	8007718 <_puts_r+0x88>
 8007760:	0800bf40 	.word	0x0800bf40
 8007764:	0800bf60 	.word	0x0800bf60
 8007768:	0800bf20 	.word	0x0800bf20

0800776c <puts>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <puts+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f7ff bf8d 	b.w	8007690 <_puts_r>
 8007776:	bf00      	nop
 8007778:	20000014 	.word	0x20000014

0800777c <siprintf>:
 800777c:	b40e      	push	{r1, r2, r3}
 800777e:	b500      	push	{lr}
 8007780:	b09c      	sub	sp, #112	; 0x70
 8007782:	ab1d      	add	r3, sp, #116	; 0x74
 8007784:	9002      	str	r0, [sp, #8]
 8007786:	9006      	str	r0, [sp, #24]
 8007788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800778c:	4809      	ldr	r0, [pc, #36]	; (80077b4 <siprintf+0x38>)
 800778e:	9107      	str	r1, [sp, #28]
 8007790:	9104      	str	r1, [sp, #16]
 8007792:	4909      	ldr	r1, [pc, #36]	; (80077b8 <siprintf+0x3c>)
 8007794:	f853 2b04 	ldr.w	r2, [r3], #4
 8007798:	9105      	str	r1, [sp, #20]
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	a902      	add	r1, sp, #8
 80077a0:	f001 fe14 	bl	80093cc <_svfiprintf_r>
 80077a4:	9b02      	ldr	r3, [sp, #8]
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	b01c      	add	sp, #112	; 0x70
 80077ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b0:	b003      	add	sp, #12
 80077b2:	4770      	bx	lr
 80077b4:	20000014 	.word	0x20000014
 80077b8:	ffff0208 	.word	0xffff0208

080077bc <__swbuf_r>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	460e      	mov	r6, r1
 80077c0:	4614      	mov	r4, r2
 80077c2:	4605      	mov	r5, r0
 80077c4:	b118      	cbz	r0, 80077ce <__swbuf_r+0x12>
 80077c6:	6983      	ldr	r3, [r0, #24]
 80077c8:	b90b      	cbnz	r3, 80077ce <__swbuf_r+0x12>
 80077ca:	f001 f84b 	bl	8008864 <__sinit>
 80077ce:	4b21      	ldr	r3, [pc, #132]	; (8007854 <__swbuf_r+0x98>)
 80077d0:	429c      	cmp	r4, r3
 80077d2:	d12b      	bne.n	800782c <__swbuf_r+0x70>
 80077d4:	686c      	ldr	r4, [r5, #4]
 80077d6:	69a3      	ldr	r3, [r4, #24]
 80077d8:	60a3      	str	r3, [r4, #8]
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	071a      	lsls	r2, r3, #28
 80077de:	d52f      	bpl.n	8007840 <__swbuf_r+0x84>
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	b36b      	cbz	r3, 8007840 <__swbuf_r+0x84>
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	6820      	ldr	r0, [r4, #0]
 80077e8:	1ac0      	subs	r0, r0, r3
 80077ea:	6963      	ldr	r3, [r4, #20]
 80077ec:	b2f6      	uxtb	r6, r6
 80077ee:	4283      	cmp	r3, r0
 80077f0:	4637      	mov	r7, r6
 80077f2:	dc04      	bgt.n	80077fe <__swbuf_r+0x42>
 80077f4:	4621      	mov	r1, r4
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 ffa0 	bl	800873c <_fflush_r>
 80077fc:	bb30      	cbnz	r0, 800784c <__swbuf_r+0x90>
 80077fe:	68a3      	ldr	r3, [r4, #8]
 8007800:	3b01      	subs	r3, #1
 8007802:	60a3      	str	r3, [r4, #8]
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	6022      	str	r2, [r4, #0]
 800780a:	701e      	strb	r6, [r3, #0]
 800780c:	6963      	ldr	r3, [r4, #20]
 800780e:	3001      	adds	r0, #1
 8007810:	4283      	cmp	r3, r0
 8007812:	d004      	beq.n	800781e <__swbuf_r+0x62>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	07db      	lsls	r3, r3, #31
 8007818:	d506      	bpl.n	8007828 <__swbuf_r+0x6c>
 800781a:	2e0a      	cmp	r6, #10
 800781c:	d104      	bne.n	8007828 <__swbuf_r+0x6c>
 800781e:	4621      	mov	r1, r4
 8007820:	4628      	mov	r0, r5
 8007822:	f000 ff8b 	bl	800873c <_fflush_r>
 8007826:	b988      	cbnz	r0, 800784c <__swbuf_r+0x90>
 8007828:	4638      	mov	r0, r7
 800782a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <__swbuf_r+0x9c>)
 800782e:	429c      	cmp	r4, r3
 8007830:	d101      	bne.n	8007836 <__swbuf_r+0x7a>
 8007832:	68ac      	ldr	r4, [r5, #8]
 8007834:	e7cf      	b.n	80077d6 <__swbuf_r+0x1a>
 8007836:	4b09      	ldr	r3, [pc, #36]	; (800785c <__swbuf_r+0xa0>)
 8007838:	429c      	cmp	r4, r3
 800783a:	bf08      	it	eq
 800783c:	68ec      	ldreq	r4, [r5, #12]
 800783e:	e7ca      	b.n	80077d6 <__swbuf_r+0x1a>
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 f80c 	bl	8007860 <__swsetup_r>
 8007848:	2800      	cmp	r0, #0
 800784a:	d0cb      	beq.n	80077e4 <__swbuf_r+0x28>
 800784c:	f04f 37ff 	mov.w	r7, #4294967295
 8007850:	e7ea      	b.n	8007828 <__swbuf_r+0x6c>
 8007852:	bf00      	nop
 8007854:	0800bf40 	.word	0x0800bf40
 8007858:	0800bf60 	.word	0x0800bf60
 800785c:	0800bf20 	.word	0x0800bf20

08007860 <__swsetup_r>:
 8007860:	4b32      	ldr	r3, [pc, #200]	; (800792c <__swsetup_r+0xcc>)
 8007862:	b570      	push	{r4, r5, r6, lr}
 8007864:	681d      	ldr	r5, [r3, #0]
 8007866:	4606      	mov	r6, r0
 8007868:	460c      	mov	r4, r1
 800786a:	b125      	cbz	r5, 8007876 <__swsetup_r+0x16>
 800786c:	69ab      	ldr	r3, [r5, #24]
 800786e:	b913      	cbnz	r3, 8007876 <__swsetup_r+0x16>
 8007870:	4628      	mov	r0, r5
 8007872:	f000 fff7 	bl	8008864 <__sinit>
 8007876:	4b2e      	ldr	r3, [pc, #184]	; (8007930 <__swsetup_r+0xd0>)
 8007878:	429c      	cmp	r4, r3
 800787a:	d10f      	bne.n	800789c <__swsetup_r+0x3c>
 800787c:	686c      	ldr	r4, [r5, #4]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007884:	0719      	lsls	r1, r3, #28
 8007886:	d42c      	bmi.n	80078e2 <__swsetup_r+0x82>
 8007888:	06dd      	lsls	r5, r3, #27
 800788a:	d411      	bmi.n	80078b0 <__swsetup_r+0x50>
 800788c:	2309      	movs	r3, #9
 800788e:	6033      	str	r3, [r6, #0]
 8007890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	f04f 30ff 	mov.w	r0, #4294967295
 800789a:	e03e      	b.n	800791a <__swsetup_r+0xba>
 800789c:	4b25      	ldr	r3, [pc, #148]	; (8007934 <__swsetup_r+0xd4>)
 800789e:	429c      	cmp	r4, r3
 80078a0:	d101      	bne.n	80078a6 <__swsetup_r+0x46>
 80078a2:	68ac      	ldr	r4, [r5, #8]
 80078a4:	e7eb      	b.n	800787e <__swsetup_r+0x1e>
 80078a6:	4b24      	ldr	r3, [pc, #144]	; (8007938 <__swsetup_r+0xd8>)
 80078a8:	429c      	cmp	r4, r3
 80078aa:	bf08      	it	eq
 80078ac:	68ec      	ldreq	r4, [r5, #12]
 80078ae:	e7e6      	b.n	800787e <__swsetup_r+0x1e>
 80078b0:	0758      	lsls	r0, r3, #29
 80078b2:	d512      	bpl.n	80078da <__swsetup_r+0x7a>
 80078b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078b6:	b141      	cbz	r1, 80078ca <__swsetup_r+0x6a>
 80078b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078bc:	4299      	cmp	r1, r3
 80078be:	d002      	beq.n	80078c6 <__swsetup_r+0x66>
 80078c0:	4630      	mov	r0, r6
 80078c2:	f001 fc7d 	bl	80091c0 <_free_r>
 80078c6:	2300      	movs	r3, #0
 80078c8:	6363      	str	r3, [r4, #52]	; 0x34
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	2300      	movs	r3, #0
 80078d4:	6063      	str	r3, [r4, #4]
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	f043 0308 	orr.w	r3, r3, #8
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	b94b      	cbnz	r3, 80078fa <__swsetup_r+0x9a>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	d003      	beq.n	80078fa <__swsetup_r+0x9a>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4630      	mov	r0, r6
 80078f6:	f001 f87f 	bl	80089f8 <__smakebuf_r>
 80078fa:	89a0      	ldrh	r0, [r4, #12]
 80078fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007900:	f010 0301 	ands.w	r3, r0, #1
 8007904:	d00a      	beq.n	800791c <__swsetup_r+0xbc>
 8007906:	2300      	movs	r3, #0
 8007908:	60a3      	str	r3, [r4, #8]
 800790a:	6963      	ldr	r3, [r4, #20]
 800790c:	425b      	negs	r3, r3
 800790e:	61a3      	str	r3, [r4, #24]
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	b943      	cbnz	r3, 8007926 <__swsetup_r+0xc6>
 8007914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007918:	d1ba      	bne.n	8007890 <__swsetup_r+0x30>
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	0781      	lsls	r1, r0, #30
 800791e:	bf58      	it	pl
 8007920:	6963      	ldrpl	r3, [r4, #20]
 8007922:	60a3      	str	r3, [r4, #8]
 8007924:	e7f4      	b.n	8007910 <__swsetup_r+0xb0>
 8007926:	2000      	movs	r0, #0
 8007928:	e7f7      	b.n	800791a <__swsetup_r+0xba>
 800792a:	bf00      	nop
 800792c:	20000014 	.word	0x20000014
 8007930:	0800bf40 	.word	0x0800bf40
 8007934:	0800bf60 	.word	0x0800bf60
 8007938:	0800bf20 	.word	0x0800bf20

0800793c <quorem>:
 800793c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	6903      	ldr	r3, [r0, #16]
 8007942:	690c      	ldr	r4, [r1, #16]
 8007944:	42a3      	cmp	r3, r4
 8007946:	4607      	mov	r7, r0
 8007948:	f2c0 8081 	blt.w	8007a4e <quorem+0x112>
 800794c:	3c01      	subs	r4, #1
 800794e:	f101 0814 	add.w	r8, r1, #20
 8007952:	f100 0514 	add.w	r5, r0, #20
 8007956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007964:	3301      	adds	r3, #1
 8007966:	429a      	cmp	r2, r3
 8007968:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800796c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007970:	fbb2 f6f3 	udiv	r6, r2, r3
 8007974:	d331      	bcc.n	80079da <quorem+0x9e>
 8007976:	f04f 0e00 	mov.w	lr, #0
 800797a:	4640      	mov	r0, r8
 800797c:	46ac      	mov	ip, r5
 800797e:	46f2      	mov	sl, lr
 8007980:	f850 2b04 	ldr.w	r2, [r0], #4
 8007984:	b293      	uxth	r3, r2
 8007986:	fb06 e303 	mla	r3, r6, r3, lr
 800798a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800798e:	b29b      	uxth	r3, r3
 8007990:	ebaa 0303 	sub.w	r3, sl, r3
 8007994:	0c12      	lsrs	r2, r2, #16
 8007996:	f8dc a000 	ldr.w	sl, [ip]
 800799a:	fb06 e202 	mla	r2, r6, r2, lr
 800799e:	fa13 f38a 	uxtah	r3, r3, sl
 80079a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079a6:	fa1f fa82 	uxth.w	sl, r2
 80079aa:	f8dc 2000 	ldr.w	r2, [ip]
 80079ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80079b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079bc:	4581      	cmp	r9, r0
 80079be:	f84c 3b04 	str.w	r3, [ip], #4
 80079c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079c6:	d2db      	bcs.n	8007980 <quorem+0x44>
 80079c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80079cc:	b92b      	cbnz	r3, 80079da <quorem+0x9e>
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	3b04      	subs	r3, #4
 80079d2:	429d      	cmp	r5, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	d32e      	bcc.n	8007a36 <quorem+0xfa>
 80079d8:	613c      	str	r4, [r7, #16]
 80079da:	4638      	mov	r0, r7
 80079dc:	f001 fae0 	bl	8008fa0 <__mcmp>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	db24      	blt.n	8007a2e <quorem+0xf2>
 80079e4:	3601      	adds	r6, #1
 80079e6:	4628      	mov	r0, r5
 80079e8:	f04f 0c00 	mov.w	ip, #0
 80079ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80079f0:	f8d0 e000 	ldr.w	lr, [r0]
 80079f4:	b293      	uxth	r3, r2
 80079f6:	ebac 0303 	sub.w	r3, ip, r3
 80079fa:	0c12      	lsrs	r2, r2, #16
 80079fc:	fa13 f38e 	uxtah	r3, r3, lr
 8007a00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0e:	45c1      	cmp	r9, r8
 8007a10:	f840 3b04 	str.w	r3, [r0], #4
 8007a14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a18:	d2e8      	bcs.n	80079ec <quorem+0xb0>
 8007a1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a22:	b922      	cbnz	r2, 8007a2e <quorem+0xf2>
 8007a24:	3b04      	subs	r3, #4
 8007a26:	429d      	cmp	r5, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	d30a      	bcc.n	8007a42 <quorem+0x106>
 8007a2c:	613c      	str	r4, [r7, #16]
 8007a2e:	4630      	mov	r0, r6
 8007a30:	b003      	add	sp, #12
 8007a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	3b04      	subs	r3, #4
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	d1cc      	bne.n	80079d8 <quorem+0x9c>
 8007a3e:	3c01      	subs	r4, #1
 8007a40:	e7c7      	b.n	80079d2 <quorem+0x96>
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	3b04      	subs	r3, #4
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	d1f0      	bne.n	8007a2c <quorem+0xf0>
 8007a4a:	3c01      	subs	r4, #1
 8007a4c:	e7eb      	b.n	8007a26 <quorem+0xea>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e7ee      	b.n	8007a30 <quorem+0xf4>
 8007a52:	0000      	movs	r0, r0
 8007a54:	0000      	movs	r0, r0
	...

08007a58 <_dtoa_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	ed2d 8b02 	vpush	{d8}
 8007a60:	ec57 6b10 	vmov	r6, r7, d0
 8007a64:	b095      	sub	sp, #84	; 0x54
 8007a66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a6c:	9105      	str	r1, [sp, #20]
 8007a6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007a72:	4604      	mov	r4, r0
 8007a74:	9209      	str	r2, [sp, #36]	; 0x24
 8007a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a78:	b975      	cbnz	r5, 8007a98 <_dtoa_r+0x40>
 8007a7a:	2010      	movs	r0, #16
 8007a7c:	f000 fffc 	bl	8008a78 <malloc>
 8007a80:	4602      	mov	r2, r0
 8007a82:	6260      	str	r0, [r4, #36]	; 0x24
 8007a84:	b920      	cbnz	r0, 8007a90 <_dtoa_r+0x38>
 8007a86:	4bb2      	ldr	r3, [pc, #712]	; (8007d50 <_dtoa_r+0x2f8>)
 8007a88:	21ea      	movs	r1, #234	; 0xea
 8007a8a:	48b2      	ldr	r0, [pc, #712]	; (8007d54 <_dtoa_r+0x2fc>)
 8007a8c:	f001 ff5e 	bl	800994c <__assert_func>
 8007a90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a94:	6005      	str	r5, [r0, #0]
 8007a96:	60c5      	str	r5, [r0, #12]
 8007a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9a:	6819      	ldr	r1, [r3, #0]
 8007a9c:	b151      	cbz	r1, 8007ab4 <_dtoa_r+0x5c>
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	604a      	str	r2, [r1, #4]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4093      	lsls	r3, r2
 8007aa6:	608b      	str	r3, [r1, #8]
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f001 f83b 	bl	8008b24 <_Bfree>
 8007aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	1e3b      	subs	r3, r7, #0
 8007ab6:	bfb9      	ittee	lt
 8007ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007abc:	9303      	strlt	r3, [sp, #12]
 8007abe:	2300      	movge	r3, #0
 8007ac0:	f8c8 3000 	strge.w	r3, [r8]
 8007ac4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ac8:	4ba3      	ldr	r3, [pc, #652]	; (8007d58 <_dtoa_r+0x300>)
 8007aca:	bfbc      	itt	lt
 8007acc:	2201      	movlt	r2, #1
 8007ace:	f8c8 2000 	strlt.w	r2, [r8]
 8007ad2:	ea33 0309 	bics.w	r3, r3, r9
 8007ad6:	d11b      	bne.n	8007b10 <_dtoa_r+0xb8>
 8007ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ada:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ae4:	4333      	orrs	r3, r6
 8007ae6:	f000 857a 	beq.w	80085de <_dtoa_r+0xb86>
 8007aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aec:	b963      	cbnz	r3, 8007b08 <_dtoa_r+0xb0>
 8007aee:	4b9b      	ldr	r3, [pc, #620]	; (8007d5c <_dtoa_r+0x304>)
 8007af0:	e024      	b.n	8007b3c <_dtoa_r+0xe4>
 8007af2:	4b9b      	ldr	r3, [pc, #620]	; (8007d60 <_dtoa_r+0x308>)
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	9800      	ldr	r0, [sp, #0]
 8007afe:	b015      	add	sp, #84	; 0x54
 8007b00:	ecbd 8b02 	vpop	{d8}
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	4b94      	ldr	r3, [pc, #592]	; (8007d5c <_dtoa_r+0x304>)
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	3303      	adds	r3, #3
 8007b0e:	e7f3      	b.n	8007af8 <_dtoa_r+0xa0>
 8007b10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b14:	2200      	movs	r2, #0
 8007b16:	ec51 0b17 	vmov	r0, r1, d7
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007b20:	f7f8 fff2 	bl	8000b08 <__aeabi_dcmpeq>
 8007b24:	4680      	mov	r8, r0
 8007b26:	b158      	cbz	r0, 8007b40 <_dtoa_r+0xe8>
 8007b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 8551 	beq.w	80085d8 <_dtoa_r+0xb80>
 8007b36:	488b      	ldr	r0, [pc, #556]	; (8007d64 <_dtoa_r+0x30c>)
 8007b38:	6018      	str	r0, [r3, #0]
 8007b3a:	1e43      	subs	r3, r0, #1
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	e7dd      	b.n	8007afc <_dtoa_r+0xa4>
 8007b40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007b44:	aa12      	add	r2, sp, #72	; 0x48
 8007b46:	a913      	add	r1, sp, #76	; 0x4c
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f001 facd 	bl	80090e8 <__d2b>
 8007b4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b52:	4683      	mov	fp, r0
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	d07c      	beq.n	8007c52 <_dtoa_r+0x1fa>
 8007b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007b66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b72:	4b7d      	ldr	r3, [pc, #500]	; (8007d68 <_dtoa_r+0x310>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	4630      	mov	r0, r6
 8007b78:	4639      	mov	r1, r7
 8007b7a:	f7f8 fba5 	bl	80002c8 <__aeabi_dsub>
 8007b7e:	a36e      	add	r3, pc, #440	; (adr r3, 8007d38 <_dtoa_r+0x2e0>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fd58 	bl	8000638 <__aeabi_dmul>
 8007b88:	a36d      	add	r3, pc, #436	; (adr r3, 8007d40 <_dtoa_r+0x2e8>)
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f7f8 fb9d 	bl	80002cc <__adddf3>
 8007b92:	4606      	mov	r6, r0
 8007b94:	4628      	mov	r0, r5
 8007b96:	460f      	mov	r7, r1
 8007b98:	f7f8 fce4 	bl	8000564 <__aeabi_i2d>
 8007b9c:	a36a      	add	r3, pc, #424	; (adr r3, 8007d48 <_dtoa_r+0x2f0>)
 8007b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba2:	f7f8 fd49 	bl	8000638 <__aeabi_dmul>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4630      	mov	r0, r6
 8007bac:	4639      	mov	r1, r7
 8007bae:	f7f8 fb8d 	bl	80002cc <__adddf3>
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	f7f8 ffef 	bl	8000b98 <__aeabi_d2iz>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4682      	mov	sl, r0
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	f7f8 ffaa 	bl	8000b1c <__aeabi_dcmplt>
 8007bc8:	b148      	cbz	r0, 8007bde <_dtoa_r+0x186>
 8007bca:	4650      	mov	r0, sl
 8007bcc:	f7f8 fcca 	bl	8000564 <__aeabi_i2d>
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	463b      	mov	r3, r7
 8007bd4:	f7f8 ff98 	bl	8000b08 <__aeabi_dcmpeq>
 8007bd8:	b908      	cbnz	r0, 8007bde <_dtoa_r+0x186>
 8007bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bde:	f1ba 0f16 	cmp.w	sl, #22
 8007be2:	d854      	bhi.n	8007c8e <_dtoa_r+0x236>
 8007be4:	4b61      	ldr	r3, [pc, #388]	; (8007d6c <_dtoa_r+0x314>)
 8007be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bf2:	f7f8 ff93 	bl	8000b1c <__aeabi_dcmplt>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d04b      	beq.n	8007c92 <_dtoa_r+0x23a>
 8007bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bfe:	2300      	movs	r3, #0
 8007c00:	930e      	str	r3, [sp, #56]	; 0x38
 8007c02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c04:	1b5d      	subs	r5, r3, r5
 8007c06:	1e6b      	subs	r3, r5, #1
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	bf43      	ittte	mi
 8007c0c:	2300      	movmi	r3, #0
 8007c0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007c12:	9304      	strmi	r3, [sp, #16]
 8007c14:	f04f 0800 	movpl.w	r8, #0
 8007c18:	f1ba 0f00 	cmp.w	sl, #0
 8007c1c:	db3b      	blt.n	8007c96 <_dtoa_r+0x23e>
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007c24:	4453      	add	r3, sl
 8007c26:	9304      	str	r3, [sp, #16]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9306      	str	r3, [sp, #24]
 8007c2c:	9b05      	ldr	r3, [sp, #20]
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d869      	bhi.n	8007d06 <_dtoa_r+0x2ae>
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	bfc4      	itt	gt
 8007c36:	3b04      	subgt	r3, #4
 8007c38:	9305      	strgt	r3, [sp, #20]
 8007c3a:	9b05      	ldr	r3, [sp, #20]
 8007c3c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c40:	bfcc      	ite	gt
 8007c42:	2500      	movgt	r5, #0
 8007c44:	2501      	movle	r5, #1
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d869      	bhi.n	8007d1e <_dtoa_r+0x2c6>
 8007c4a:	e8df f003 	tbb	[pc, r3]
 8007c4e:	4e2c      	.short	0x4e2c
 8007c50:	5a4c      	.short	0x5a4c
 8007c52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007c56:	441d      	add	r5, r3
 8007c58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	bfc1      	itttt	gt
 8007c60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c68:	fa09 f303 	lslgt.w	r3, r9, r3
 8007c6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c70:	bfda      	itte	le
 8007c72:	f1c3 0320 	rsble	r3, r3, #32
 8007c76:	fa06 f003 	lslle.w	r0, r6, r3
 8007c7a:	4318      	orrgt	r0, r3
 8007c7c:	f7f8 fc62 	bl	8000544 <__aeabi_ui2d>
 8007c80:	2301      	movs	r3, #1
 8007c82:	4606      	mov	r6, r0
 8007c84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c88:	3d01      	subs	r5, #1
 8007c8a:	9310      	str	r3, [sp, #64]	; 0x40
 8007c8c:	e771      	b.n	8007b72 <_dtoa_r+0x11a>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e7b6      	b.n	8007c00 <_dtoa_r+0x1a8>
 8007c92:	900e      	str	r0, [sp, #56]	; 0x38
 8007c94:	e7b5      	b.n	8007c02 <_dtoa_r+0x1aa>
 8007c96:	f1ca 0300 	rsb	r3, sl, #0
 8007c9a:	9306      	str	r3, [sp, #24]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	eba8 080a 	sub.w	r8, r8, sl
 8007ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ca4:	e7c2      	b.n	8007c2c <_dtoa_r+0x1d4>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9308      	str	r3, [sp, #32]
 8007caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dc39      	bgt.n	8007d24 <_dtoa_r+0x2cc>
 8007cb0:	f04f 0901 	mov.w	r9, #1
 8007cb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cb8:	464b      	mov	r3, r9
 8007cba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007cbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	6042      	str	r2, [r0, #4]
 8007cc4:	2204      	movs	r2, #4
 8007cc6:	f102 0614 	add.w	r6, r2, #20
 8007cca:	429e      	cmp	r6, r3
 8007ccc:	6841      	ldr	r1, [r0, #4]
 8007cce:	d92f      	bls.n	8007d30 <_dtoa_r+0x2d8>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fee7 	bl	8008aa4 <_Balloc>
 8007cd6:	9000      	str	r0, [sp, #0]
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d14b      	bne.n	8007d74 <_dtoa_r+0x31c>
 8007cdc:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <_dtoa_r+0x318>)
 8007cde:	4602      	mov	r2, r0
 8007ce0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ce4:	e6d1      	b.n	8007a8a <_dtoa_r+0x32>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e7de      	b.n	8007ca8 <_dtoa_r+0x250>
 8007cea:	2300      	movs	r3, #0
 8007cec:	9308      	str	r3, [sp, #32]
 8007cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf0:	eb0a 0903 	add.w	r9, sl, r3
 8007cf4:	f109 0301 	add.w	r3, r9, #1
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	bfb8      	it	lt
 8007cfe:	2301      	movlt	r3, #1
 8007d00:	e7dd      	b.n	8007cbe <_dtoa_r+0x266>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e7f2      	b.n	8007cec <_dtoa_r+0x294>
 8007d06:	2501      	movs	r5, #1
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	9508      	str	r5, [sp, #32]
 8007d0e:	f04f 39ff 	mov.w	r9, #4294967295
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d18:	2312      	movs	r3, #18
 8007d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d1c:	e7cf      	b.n	8007cbe <_dtoa_r+0x266>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	9308      	str	r3, [sp, #32]
 8007d22:	e7f4      	b.n	8007d0e <_dtoa_r+0x2b6>
 8007d24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007d28:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	e7c6      	b.n	8007cbe <_dtoa_r+0x266>
 8007d30:	3101      	adds	r1, #1
 8007d32:	6041      	str	r1, [r0, #4]
 8007d34:	0052      	lsls	r2, r2, #1
 8007d36:	e7c6      	b.n	8007cc6 <_dtoa_r+0x26e>
 8007d38:	636f4361 	.word	0x636f4361
 8007d3c:	3fd287a7 	.word	0x3fd287a7
 8007d40:	8b60c8b3 	.word	0x8b60c8b3
 8007d44:	3fc68a28 	.word	0x3fc68a28
 8007d48:	509f79fb 	.word	0x509f79fb
 8007d4c:	3fd34413 	.word	0x3fd34413
 8007d50:	0800be99 	.word	0x0800be99
 8007d54:	0800beb0 	.word	0x0800beb0
 8007d58:	7ff00000 	.word	0x7ff00000
 8007d5c:	0800be95 	.word	0x0800be95
 8007d60:	0800be8c 	.word	0x0800be8c
 8007d64:	0800be69 	.word	0x0800be69
 8007d68:	3ff80000 	.word	0x3ff80000
 8007d6c:	0800c008 	.word	0x0800c008
 8007d70:	0800bf0f 	.word	0x0800bf0f
 8007d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d76:	9a00      	ldr	r2, [sp, #0]
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	2b0e      	cmp	r3, #14
 8007d7e:	f200 80ad 	bhi.w	8007edc <_dtoa_r+0x484>
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	f000 80aa 	beq.w	8007edc <_dtoa_r+0x484>
 8007d88:	f1ba 0f00 	cmp.w	sl, #0
 8007d8c:	dd36      	ble.n	8007dfc <_dtoa_r+0x3a4>
 8007d8e:	4ac3      	ldr	r2, [pc, #780]	; (800809c <_dtoa_r+0x644>)
 8007d90:	f00a 030f 	and.w	r3, sl, #15
 8007d94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d98:	ed93 7b00 	vldr	d7, [r3]
 8007d9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007da0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007da4:	eeb0 8a47 	vmov.f32	s16, s14
 8007da8:	eef0 8a67 	vmov.f32	s17, s15
 8007dac:	d016      	beq.n	8007ddc <_dtoa_r+0x384>
 8007dae:	4bbc      	ldr	r3, [pc, #752]	; (80080a0 <_dtoa_r+0x648>)
 8007db0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007db4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007db8:	f7f8 fd68 	bl	800088c <__aeabi_ddiv>
 8007dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc0:	f007 070f 	and.w	r7, r7, #15
 8007dc4:	2503      	movs	r5, #3
 8007dc6:	4eb6      	ldr	r6, [pc, #728]	; (80080a0 <_dtoa_r+0x648>)
 8007dc8:	b957      	cbnz	r7, 8007de0 <_dtoa_r+0x388>
 8007dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dce:	ec53 2b18 	vmov	r2, r3, d8
 8007dd2:	f7f8 fd5b 	bl	800088c <__aeabi_ddiv>
 8007dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dda:	e029      	b.n	8007e30 <_dtoa_r+0x3d8>
 8007ddc:	2502      	movs	r5, #2
 8007dde:	e7f2      	b.n	8007dc6 <_dtoa_r+0x36e>
 8007de0:	07f9      	lsls	r1, r7, #31
 8007de2:	d508      	bpl.n	8007df6 <_dtoa_r+0x39e>
 8007de4:	ec51 0b18 	vmov	r0, r1, d8
 8007de8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dec:	f7f8 fc24 	bl	8000638 <__aeabi_dmul>
 8007df0:	ec41 0b18 	vmov	d8, r0, r1
 8007df4:	3501      	adds	r5, #1
 8007df6:	107f      	asrs	r7, r7, #1
 8007df8:	3608      	adds	r6, #8
 8007dfa:	e7e5      	b.n	8007dc8 <_dtoa_r+0x370>
 8007dfc:	f000 80a6 	beq.w	8007f4c <_dtoa_r+0x4f4>
 8007e00:	f1ca 0600 	rsb	r6, sl, #0
 8007e04:	4ba5      	ldr	r3, [pc, #660]	; (800809c <_dtoa_r+0x644>)
 8007e06:	4fa6      	ldr	r7, [pc, #664]	; (80080a0 <_dtoa_r+0x648>)
 8007e08:	f006 020f 	and.w	r2, r6, #15
 8007e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e18:	f7f8 fc0e 	bl	8000638 <__aeabi_dmul>
 8007e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e20:	1136      	asrs	r6, r6, #4
 8007e22:	2300      	movs	r3, #0
 8007e24:	2502      	movs	r5, #2
 8007e26:	2e00      	cmp	r6, #0
 8007e28:	f040 8085 	bne.w	8007f36 <_dtoa_r+0x4de>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1d2      	bne.n	8007dd6 <_dtoa_r+0x37e>
 8007e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 808c 	beq.w	8007f50 <_dtoa_r+0x4f8>
 8007e38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e3c:	4b99      	ldr	r3, [pc, #612]	; (80080a4 <_dtoa_r+0x64c>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4630      	mov	r0, r6
 8007e42:	4639      	mov	r1, r7
 8007e44:	f7f8 fe6a 	bl	8000b1c <__aeabi_dcmplt>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f000 8081 	beq.w	8007f50 <_dtoa_r+0x4f8>
 8007e4e:	9b01      	ldr	r3, [sp, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d07d      	beq.n	8007f50 <_dtoa_r+0x4f8>
 8007e54:	f1b9 0f00 	cmp.w	r9, #0
 8007e58:	dd3c      	ble.n	8007ed4 <_dtoa_r+0x47c>
 8007e5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	2200      	movs	r2, #0
 8007e62:	4b91      	ldr	r3, [pc, #580]	; (80080a8 <_dtoa_r+0x650>)
 8007e64:	4630      	mov	r0, r6
 8007e66:	4639      	mov	r1, r7
 8007e68:	f7f8 fbe6 	bl	8000638 <__aeabi_dmul>
 8007e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e70:	3501      	adds	r5, #1
 8007e72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007e76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f7f8 fb72 	bl	8000564 <__aeabi_i2d>
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	f7f8 fbd8 	bl	8000638 <__aeabi_dmul>
 8007e88:	4b88      	ldr	r3, [pc, #544]	; (80080ac <_dtoa_r+0x654>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7f8 fa1e 	bl	80002cc <__adddf3>
 8007e90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e98:	9303      	str	r3, [sp, #12]
 8007e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d15c      	bne.n	8007f5a <_dtoa_r+0x502>
 8007ea0:	4b83      	ldr	r3, [pc, #524]	; (80080b0 <_dtoa_r+0x658>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	f7f8 fa0e 	bl	80002c8 <__aeabi_dsub>
 8007eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	460f      	mov	r7, r1
 8007eb4:	f7f8 fe50 	bl	8000b58 <__aeabi_dcmpgt>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f040 8296 	bne.w	80083ea <_dtoa_r+0x992>
 8007ebe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 fe27 	bl	8000b1c <__aeabi_dcmplt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f040 8288 	bne.w	80083e4 <_dtoa_r+0x98c>
 8007ed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ed8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f2c0 8158 	blt.w	8008194 <_dtoa_r+0x73c>
 8007ee4:	f1ba 0f0e 	cmp.w	sl, #14
 8007ee8:	f300 8154 	bgt.w	8008194 <_dtoa_r+0x73c>
 8007eec:	4b6b      	ldr	r3, [pc, #428]	; (800809c <_dtoa_r+0x644>)
 8007eee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ef2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f280 80e3 	bge.w	80080c4 <_dtoa_r+0x66c>
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f300 80df 	bgt.w	80080c4 <_dtoa_r+0x66c>
 8007f06:	f040 826d 	bne.w	80083e4 <_dtoa_r+0x98c>
 8007f0a:	4b69      	ldr	r3, [pc, #420]	; (80080b0 <_dtoa_r+0x658>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 fb91 	bl	8000638 <__aeabi_dmul>
 8007f16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f1a:	f7f8 fe13 	bl	8000b44 <__aeabi_dcmpge>
 8007f1e:	9e01      	ldr	r6, [sp, #4]
 8007f20:	4637      	mov	r7, r6
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f040 8243 	bne.w	80083ae <_dtoa_r+0x956>
 8007f28:	9d00      	ldr	r5, [sp, #0]
 8007f2a:	2331      	movs	r3, #49	; 0x31
 8007f2c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f30:	f10a 0a01 	add.w	sl, sl, #1
 8007f34:	e23f      	b.n	80083b6 <_dtoa_r+0x95e>
 8007f36:	07f2      	lsls	r2, r6, #31
 8007f38:	d505      	bpl.n	8007f46 <_dtoa_r+0x4ee>
 8007f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f3e:	f7f8 fb7b 	bl	8000638 <__aeabi_dmul>
 8007f42:	3501      	adds	r5, #1
 8007f44:	2301      	movs	r3, #1
 8007f46:	1076      	asrs	r6, r6, #1
 8007f48:	3708      	adds	r7, #8
 8007f4a:	e76c      	b.n	8007e26 <_dtoa_r+0x3ce>
 8007f4c:	2502      	movs	r5, #2
 8007f4e:	e76f      	b.n	8007e30 <_dtoa_r+0x3d8>
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f56:	930c      	str	r3, [sp, #48]	; 0x30
 8007f58:	e78d      	b.n	8007e76 <_dtoa_r+0x41e>
 8007f5a:	9900      	ldr	r1, [sp, #0]
 8007f5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f60:	4b4e      	ldr	r3, [pc, #312]	; (800809c <_dtoa_r+0x644>)
 8007f62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f66:	4401      	add	r1, r0
 8007f68:	9102      	str	r1, [sp, #8]
 8007f6a:	9908      	ldr	r1, [sp, #32]
 8007f6c:	eeb0 8a47 	vmov.f32	s16, s14
 8007f70:	eef0 8a67 	vmov.f32	s17, s15
 8007f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	d045      	beq.n	800800c <_dtoa_r+0x5b4>
 8007f80:	494c      	ldr	r1, [pc, #304]	; (80080b4 <_dtoa_r+0x65c>)
 8007f82:	2000      	movs	r0, #0
 8007f84:	f7f8 fc82 	bl	800088c <__aeabi_ddiv>
 8007f88:	ec53 2b18 	vmov	r2, r3, d8
 8007f8c:	f7f8 f99c 	bl	80002c8 <__aeabi_dsub>
 8007f90:	9d00      	ldr	r5, [sp, #0]
 8007f92:	ec41 0b18 	vmov	d8, r0, r1
 8007f96:	4639      	mov	r1, r7
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7f8 fdfd 	bl	8000b98 <__aeabi_d2iz>
 8007f9e:	900c      	str	r0, [sp, #48]	; 0x30
 8007fa0:	f7f8 fae0 	bl	8000564 <__aeabi_i2d>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 f98c 	bl	80002c8 <__aeabi_dsub>
 8007fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fb2:	3330      	adds	r3, #48	; 0x30
 8007fb4:	f805 3b01 	strb.w	r3, [r5], #1
 8007fb8:	ec53 2b18 	vmov	r2, r3, d8
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460f      	mov	r7, r1
 8007fc0:	f7f8 fdac 	bl	8000b1c <__aeabi_dcmplt>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d165      	bne.n	8008094 <_dtoa_r+0x63c>
 8007fc8:	4632      	mov	r2, r6
 8007fca:	463b      	mov	r3, r7
 8007fcc:	4935      	ldr	r1, [pc, #212]	; (80080a4 <_dtoa_r+0x64c>)
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f7f8 f97a 	bl	80002c8 <__aeabi_dsub>
 8007fd4:	ec53 2b18 	vmov	r2, r3, d8
 8007fd8:	f7f8 fda0 	bl	8000b1c <__aeabi_dcmplt>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	f040 80b9 	bne.w	8008154 <_dtoa_r+0x6fc>
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	429d      	cmp	r5, r3
 8007fe6:	f43f af75 	beq.w	8007ed4 <_dtoa_r+0x47c>
 8007fea:	4b2f      	ldr	r3, [pc, #188]	; (80080a8 <_dtoa_r+0x650>)
 8007fec:	ec51 0b18 	vmov	r0, r1, d8
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f7f8 fb21 	bl	8000638 <__aeabi_dmul>
 8007ff6:	4b2c      	ldr	r3, [pc, #176]	; (80080a8 <_dtoa_r+0x650>)
 8007ff8:	ec41 0b18 	vmov	d8, r0, r1
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4630      	mov	r0, r6
 8008000:	4639      	mov	r1, r7
 8008002:	f7f8 fb19 	bl	8000638 <__aeabi_dmul>
 8008006:	4606      	mov	r6, r0
 8008008:	460f      	mov	r7, r1
 800800a:	e7c4      	b.n	8007f96 <_dtoa_r+0x53e>
 800800c:	ec51 0b17 	vmov	r0, r1, d7
 8008010:	f7f8 fb12 	bl	8000638 <__aeabi_dmul>
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	9d00      	ldr	r5, [sp, #0]
 8008018:	930c      	str	r3, [sp, #48]	; 0x30
 800801a:	ec41 0b18 	vmov	d8, r0, r1
 800801e:	4639      	mov	r1, r7
 8008020:	4630      	mov	r0, r6
 8008022:	f7f8 fdb9 	bl	8000b98 <__aeabi_d2iz>
 8008026:	9011      	str	r0, [sp, #68]	; 0x44
 8008028:	f7f8 fa9c 	bl	8000564 <__aeabi_i2d>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4630      	mov	r0, r6
 8008032:	4639      	mov	r1, r7
 8008034:	f7f8 f948 	bl	80002c8 <__aeabi_dsub>
 8008038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800803a:	3330      	adds	r3, #48	; 0x30
 800803c:	f805 3b01 	strb.w	r3, [r5], #1
 8008040:	9b02      	ldr	r3, [sp, #8]
 8008042:	429d      	cmp	r5, r3
 8008044:	4606      	mov	r6, r0
 8008046:	460f      	mov	r7, r1
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	d134      	bne.n	80080b8 <_dtoa_r+0x660>
 800804e:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <_dtoa_r+0x65c>)
 8008050:	ec51 0b18 	vmov	r0, r1, d8
 8008054:	f7f8 f93a 	bl	80002cc <__adddf3>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4630      	mov	r0, r6
 800805e:	4639      	mov	r1, r7
 8008060:	f7f8 fd7a 	bl	8000b58 <__aeabi_dcmpgt>
 8008064:	2800      	cmp	r0, #0
 8008066:	d175      	bne.n	8008154 <_dtoa_r+0x6fc>
 8008068:	ec53 2b18 	vmov	r2, r3, d8
 800806c:	4911      	ldr	r1, [pc, #68]	; (80080b4 <_dtoa_r+0x65c>)
 800806e:	2000      	movs	r0, #0
 8008070:	f7f8 f92a 	bl	80002c8 <__aeabi_dsub>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 fd4e 	bl	8000b1c <__aeabi_dcmplt>
 8008080:	2800      	cmp	r0, #0
 8008082:	f43f af27 	beq.w	8007ed4 <_dtoa_r+0x47c>
 8008086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008088:	1e6b      	subs	r3, r5, #1
 800808a:	930c      	str	r3, [sp, #48]	; 0x30
 800808c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008090:	2b30      	cmp	r3, #48	; 0x30
 8008092:	d0f8      	beq.n	8008086 <_dtoa_r+0x62e>
 8008094:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008098:	e04a      	b.n	8008130 <_dtoa_r+0x6d8>
 800809a:	bf00      	nop
 800809c:	0800c008 	.word	0x0800c008
 80080a0:	0800bfe0 	.word	0x0800bfe0
 80080a4:	3ff00000 	.word	0x3ff00000
 80080a8:	40240000 	.word	0x40240000
 80080ac:	401c0000 	.word	0x401c0000
 80080b0:	40140000 	.word	0x40140000
 80080b4:	3fe00000 	.word	0x3fe00000
 80080b8:	4baf      	ldr	r3, [pc, #700]	; (8008378 <_dtoa_r+0x920>)
 80080ba:	f7f8 fabd 	bl	8000638 <__aeabi_dmul>
 80080be:	4606      	mov	r6, r0
 80080c0:	460f      	mov	r7, r1
 80080c2:	e7ac      	b.n	800801e <_dtoa_r+0x5c6>
 80080c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080c8:	9d00      	ldr	r5, [sp, #0]
 80080ca:	4642      	mov	r2, r8
 80080cc:	464b      	mov	r3, r9
 80080ce:	4630      	mov	r0, r6
 80080d0:	4639      	mov	r1, r7
 80080d2:	f7f8 fbdb 	bl	800088c <__aeabi_ddiv>
 80080d6:	f7f8 fd5f 	bl	8000b98 <__aeabi_d2iz>
 80080da:	9002      	str	r0, [sp, #8]
 80080dc:	f7f8 fa42 	bl	8000564 <__aeabi_i2d>
 80080e0:	4642      	mov	r2, r8
 80080e2:	464b      	mov	r3, r9
 80080e4:	f7f8 faa8 	bl	8000638 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 f8ea 	bl	80002c8 <__aeabi_dsub>
 80080f4:	9e02      	ldr	r6, [sp, #8]
 80080f6:	9f01      	ldr	r7, [sp, #4]
 80080f8:	3630      	adds	r6, #48	; 0x30
 80080fa:	f805 6b01 	strb.w	r6, [r5], #1
 80080fe:	9e00      	ldr	r6, [sp, #0]
 8008100:	1bae      	subs	r6, r5, r6
 8008102:	42b7      	cmp	r7, r6
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	d137      	bne.n	800817a <_dtoa_r+0x722>
 800810a:	f7f8 f8df 	bl	80002cc <__adddf3>
 800810e:	4642      	mov	r2, r8
 8008110:	464b      	mov	r3, r9
 8008112:	4606      	mov	r6, r0
 8008114:	460f      	mov	r7, r1
 8008116:	f7f8 fd1f 	bl	8000b58 <__aeabi_dcmpgt>
 800811a:	b9c8      	cbnz	r0, 8008150 <_dtoa_r+0x6f8>
 800811c:	4642      	mov	r2, r8
 800811e:	464b      	mov	r3, r9
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 8008128:	b110      	cbz	r0, 8008130 <_dtoa_r+0x6d8>
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	07d9      	lsls	r1, r3, #31
 800812e:	d40f      	bmi.n	8008150 <_dtoa_r+0x6f8>
 8008130:	4620      	mov	r0, r4
 8008132:	4659      	mov	r1, fp
 8008134:	f000 fcf6 	bl	8008b24 <_Bfree>
 8008138:	2300      	movs	r3, #0
 800813a:	702b      	strb	r3, [r5, #0]
 800813c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800813e:	f10a 0001 	add.w	r0, sl, #1
 8008142:	6018      	str	r0, [r3, #0]
 8008144:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008146:	2b00      	cmp	r3, #0
 8008148:	f43f acd8 	beq.w	8007afc <_dtoa_r+0xa4>
 800814c:	601d      	str	r5, [r3, #0]
 800814e:	e4d5      	b.n	8007afc <_dtoa_r+0xa4>
 8008150:	f8cd a01c 	str.w	sl, [sp, #28]
 8008154:	462b      	mov	r3, r5
 8008156:	461d      	mov	r5, r3
 8008158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800815c:	2a39      	cmp	r2, #57	; 0x39
 800815e:	d108      	bne.n	8008172 <_dtoa_r+0x71a>
 8008160:	9a00      	ldr	r2, [sp, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d1f7      	bne.n	8008156 <_dtoa_r+0x6fe>
 8008166:	9a07      	ldr	r2, [sp, #28]
 8008168:	9900      	ldr	r1, [sp, #0]
 800816a:	3201      	adds	r2, #1
 800816c:	9207      	str	r2, [sp, #28]
 800816e:	2230      	movs	r2, #48	; 0x30
 8008170:	700a      	strb	r2, [r1, #0]
 8008172:	781a      	ldrb	r2, [r3, #0]
 8008174:	3201      	adds	r2, #1
 8008176:	701a      	strb	r2, [r3, #0]
 8008178:	e78c      	b.n	8008094 <_dtoa_r+0x63c>
 800817a:	4b7f      	ldr	r3, [pc, #508]	; (8008378 <_dtoa_r+0x920>)
 800817c:	2200      	movs	r2, #0
 800817e:	f7f8 fa5b 	bl	8000638 <__aeabi_dmul>
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	4606      	mov	r6, r0
 8008188:	460f      	mov	r7, r1
 800818a:	f7f8 fcbd 	bl	8000b08 <__aeabi_dcmpeq>
 800818e:	2800      	cmp	r0, #0
 8008190:	d09b      	beq.n	80080ca <_dtoa_r+0x672>
 8008192:	e7cd      	b.n	8008130 <_dtoa_r+0x6d8>
 8008194:	9a08      	ldr	r2, [sp, #32]
 8008196:	2a00      	cmp	r2, #0
 8008198:	f000 80c4 	beq.w	8008324 <_dtoa_r+0x8cc>
 800819c:	9a05      	ldr	r2, [sp, #20]
 800819e:	2a01      	cmp	r2, #1
 80081a0:	f300 80a8 	bgt.w	80082f4 <_dtoa_r+0x89c>
 80081a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081a6:	2a00      	cmp	r2, #0
 80081a8:	f000 80a0 	beq.w	80082ec <_dtoa_r+0x894>
 80081ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081b0:	9e06      	ldr	r6, [sp, #24]
 80081b2:	4645      	mov	r5, r8
 80081b4:	9a04      	ldr	r2, [sp, #16]
 80081b6:	2101      	movs	r1, #1
 80081b8:	441a      	add	r2, r3
 80081ba:	4620      	mov	r0, r4
 80081bc:	4498      	add	r8, r3
 80081be:	9204      	str	r2, [sp, #16]
 80081c0:	f000 fd6c 	bl	8008c9c <__i2b>
 80081c4:	4607      	mov	r7, r0
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	dd0b      	ble.n	80081e2 <_dtoa_r+0x78a>
 80081ca:	9b04      	ldr	r3, [sp, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dd08      	ble.n	80081e2 <_dtoa_r+0x78a>
 80081d0:	42ab      	cmp	r3, r5
 80081d2:	9a04      	ldr	r2, [sp, #16]
 80081d4:	bfa8      	it	ge
 80081d6:	462b      	movge	r3, r5
 80081d8:	eba8 0803 	sub.w	r8, r8, r3
 80081dc:	1aed      	subs	r5, r5, r3
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	9b06      	ldr	r3, [sp, #24]
 80081e4:	b1fb      	cbz	r3, 8008226 <_dtoa_r+0x7ce>
 80081e6:	9b08      	ldr	r3, [sp, #32]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 809f 	beq.w	800832c <_dtoa_r+0x8d4>
 80081ee:	2e00      	cmp	r6, #0
 80081f0:	dd11      	ble.n	8008216 <_dtoa_r+0x7be>
 80081f2:	4639      	mov	r1, r7
 80081f4:	4632      	mov	r2, r6
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 fe0c 	bl	8008e14 <__pow5mult>
 80081fc:	465a      	mov	r2, fp
 80081fe:	4601      	mov	r1, r0
 8008200:	4607      	mov	r7, r0
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fd60 	bl	8008cc8 <__multiply>
 8008208:	4659      	mov	r1, fp
 800820a:	9007      	str	r0, [sp, #28]
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fc89 	bl	8008b24 <_Bfree>
 8008212:	9b07      	ldr	r3, [sp, #28]
 8008214:	469b      	mov	fp, r3
 8008216:	9b06      	ldr	r3, [sp, #24]
 8008218:	1b9a      	subs	r2, r3, r6
 800821a:	d004      	beq.n	8008226 <_dtoa_r+0x7ce>
 800821c:	4659      	mov	r1, fp
 800821e:	4620      	mov	r0, r4
 8008220:	f000 fdf8 	bl	8008e14 <__pow5mult>
 8008224:	4683      	mov	fp, r0
 8008226:	2101      	movs	r1, #1
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fd37 	bl	8008c9c <__i2b>
 800822e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008230:	2b00      	cmp	r3, #0
 8008232:	4606      	mov	r6, r0
 8008234:	dd7c      	ble.n	8008330 <_dtoa_r+0x8d8>
 8008236:	461a      	mov	r2, r3
 8008238:	4601      	mov	r1, r0
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fdea 	bl	8008e14 <__pow5mult>
 8008240:	9b05      	ldr	r3, [sp, #20]
 8008242:	2b01      	cmp	r3, #1
 8008244:	4606      	mov	r6, r0
 8008246:	dd76      	ble.n	8008336 <_dtoa_r+0x8de>
 8008248:	2300      	movs	r3, #0
 800824a:	9306      	str	r3, [sp, #24]
 800824c:	6933      	ldr	r3, [r6, #16]
 800824e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008252:	6918      	ldr	r0, [r3, #16]
 8008254:	f000 fcd2 	bl	8008bfc <__hi0bits>
 8008258:	f1c0 0020 	rsb	r0, r0, #32
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	4418      	add	r0, r3
 8008260:	f010 001f 	ands.w	r0, r0, #31
 8008264:	f000 8086 	beq.w	8008374 <_dtoa_r+0x91c>
 8008268:	f1c0 0320 	rsb	r3, r0, #32
 800826c:	2b04      	cmp	r3, #4
 800826e:	dd7f      	ble.n	8008370 <_dtoa_r+0x918>
 8008270:	f1c0 001c 	rsb	r0, r0, #28
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	4403      	add	r3, r0
 8008278:	4480      	add	r8, r0
 800827a:	4405      	add	r5, r0
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	f1b8 0f00 	cmp.w	r8, #0
 8008282:	dd05      	ble.n	8008290 <_dtoa_r+0x838>
 8008284:	4659      	mov	r1, fp
 8008286:	4642      	mov	r2, r8
 8008288:	4620      	mov	r0, r4
 800828a:	f000 fe1d 	bl	8008ec8 <__lshift>
 800828e:	4683      	mov	fp, r0
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	dd05      	ble.n	80082a2 <_dtoa_r+0x84a>
 8008296:	4631      	mov	r1, r6
 8008298:	461a      	mov	r2, r3
 800829a:	4620      	mov	r0, r4
 800829c:	f000 fe14 	bl	8008ec8 <__lshift>
 80082a0:	4606      	mov	r6, r0
 80082a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d069      	beq.n	800837c <_dtoa_r+0x924>
 80082a8:	4631      	mov	r1, r6
 80082aa:	4658      	mov	r0, fp
 80082ac:	f000 fe78 	bl	8008fa0 <__mcmp>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	da63      	bge.n	800837c <_dtoa_r+0x924>
 80082b4:	2300      	movs	r3, #0
 80082b6:	4659      	mov	r1, fp
 80082b8:	220a      	movs	r2, #10
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fc54 	bl	8008b68 <__multadd>
 80082c0:	9b08      	ldr	r3, [sp, #32]
 80082c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082c6:	4683      	mov	fp, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 818f 	beq.w	80085ec <_dtoa_r+0xb94>
 80082ce:	4639      	mov	r1, r7
 80082d0:	2300      	movs	r3, #0
 80082d2:	220a      	movs	r2, #10
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 fc47 	bl	8008b68 <__multadd>
 80082da:	f1b9 0f00 	cmp.w	r9, #0
 80082de:	4607      	mov	r7, r0
 80082e0:	f300 808e 	bgt.w	8008400 <_dtoa_r+0x9a8>
 80082e4:	9b05      	ldr	r3, [sp, #20]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	dc50      	bgt.n	800838c <_dtoa_r+0x934>
 80082ea:	e089      	b.n	8008400 <_dtoa_r+0x9a8>
 80082ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082f2:	e75d      	b.n	80081b0 <_dtoa_r+0x758>
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	1e5e      	subs	r6, r3, #1
 80082f8:	9b06      	ldr	r3, [sp, #24]
 80082fa:	42b3      	cmp	r3, r6
 80082fc:	bfbf      	itttt	lt
 80082fe:	9b06      	ldrlt	r3, [sp, #24]
 8008300:	9606      	strlt	r6, [sp, #24]
 8008302:	1af2      	sublt	r2, r6, r3
 8008304:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008306:	bfb6      	itet	lt
 8008308:	189b      	addlt	r3, r3, r2
 800830a:	1b9e      	subge	r6, r3, r6
 800830c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800830e:	9b01      	ldr	r3, [sp, #4]
 8008310:	bfb8      	it	lt
 8008312:	2600      	movlt	r6, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfb5      	itete	lt
 8008318:	eba8 0503 	sublt.w	r5, r8, r3
 800831c:	9b01      	ldrge	r3, [sp, #4]
 800831e:	2300      	movlt	r3, #0
 8008320:	4645      	movge	r5, r8
 8008322:	e747      	b.n	80081b4 <_dtoa_r+0x75c>
 8008324:	9e06      	ldr	r6, [sp, #24]
 8008326:	9f08      	ldr	r7, [sp, #32]
 8008328:	4645      	mov	r5, r8
 800832a:	e74c      	b.n	80081c6 <_dtoa_r+0x76e>
 800832c:	9a06      	ldr	r2, [sp, #24]
 800832e:	e775      	b.n	800821c <_dtoa_r+0x7c4>
 8008330:	9b05      	ldr	r3, [sp, #20]
 8008332:	2b01      	cmp	r3, #1
 8008334:	dc18      	bgt.n	8008368 <_dtoa_r+0x910>
 8008336:	9b02      	ldr	r3, [sp, #8]
 8008338:	b9b3      	cbnz	r3, 8008368 <_dtoa_r+0x910>
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008340:	b9a3      	cbnz	r3, 800836c <_dtoa_r+0x914>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008348:	0d1b      	lsrs	r3, r3, #20
 800834a:	051b      	lsls	r3, r3, #20
 800834c:	b12b      	cbz	r3, 800835a <_dtoa_r+0x902>
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	3301      	adds	r3, #1
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	f108 0801 	add.w	r8, r8, #1
 8008358:	2301      	movs	r3, #1
 800835a:	9306      	str	r3, [sp, #24]
 800835c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835e:	2b00      	cmp	r3, #0
 8008360:	f47f af74 	bne.w	800824c <_dtoa_r+0x7f4>
 8008364:	2001      	movs	r0, #1
 8008366:	e779      	b.n	800825c <_dtoa_r+0x804>
 8008368:	2300      	movs	r3, #0
 800836a:	e7f6      	b.n	800835a <_dtoa_r+0x902>
 800836c:	9b02      	ldr	r3, [sp, #8]
 800836e:	e7f4      	b.n	800835a <_dtoa_r+0x902>
 8008370:	d085      	beq.n	800827e <_dtoa_r+0x826>
 8008372:	4618      	mov	r0, r3
 8008374:	301c      	adds	r0, #28
 8008376:	e77d      	b.n	8008274 <_dtoa_r+0x81c>
 8008378:	40240000 	.word	0x40240000
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	dc38      	bgt.n	80083f4 <_dtoa_r+0x99c>
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	2b02      	cmp	r3, #2
 8008386:	dd35      	ble.n	80083f4 <_dtoa_r+0x99c>
 8008388:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800838c:	f1b9 0f00 	cmp.w	r9, #0
 8008390:	d10d      	bne.n	80083ae <_dtoa_r+0x956>
 8008392:	4631      	mov	r1, r6
 8008394:	464b      	mov	r3, r9
 8008396:	2205      	movs	r2, #5
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fbe5 	bl	8008b68 <__multadd>
 800839e:	4601      	mov	r1, r0
 80083a0:	4606      	mov	r6, r0
 80083a2:	4658      	mov	r0, fp
 80083a4:	f000 fdfc 	bl	8008fa0 <__mcmp>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	f73f adbd 	bgt.w	8007f28 <_dtoa_r+0x4d0>
 80083ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b0:	9d00      	ldr	r5, [sp, #0]
 80083b2:	ea6f 0a03 	mvn.w	sl, r3
 80083b6:	f04f 0800 	mov.w	r8, #0
 80083ba:	4631      	mov	r1, r6
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 fbb1 	bl	8008b24 <_Bfree>
 80083c2:	2f00      	cmp	r7, #0
 80083c4:	f43f aeb4 	beq.w	8008130 <_dtoa_r+0x6d8>
 80083c8:	f1b8 0f00 	cmp.w	r8, #0
 80083cc:	d005      	beq.n	80083da <_dtoa_r+0x982>
 80083ce:	45b8      	cmp	r8, r7
 80083d0:	d003      	beq.n	80083da <_dtoa_r+0x982>
 80083d2:	4641      	mov	r1, r8
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 fba5 	bl	8008b24 <_Bfree>
 80083da:	4639      	mov	r1, r7
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 fba1 	bl	8008b24 <_Bfree>
 80083e2:	e6a5      	b.n	8008130 <_dtoa_r+0x6d8>
 80083e4:	2600      	movs	r6, #0
 80083e6:	4637      	mov	r7, r6
 80083e8:	e7e1      	b.n	80083ae <_dtoa_r+0x956>
 80083ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80083ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80083f0:	4637      	mov	r7, r6
 80083f2:	e599      	b.n	8007f28 <_dtoa_r+0x4d0>
 80083f4:	9b08      	ldr	r3, [sp, #32]
 80083f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80fd 	beq.w	80085fa <_dtoa_r+0xba2>
 8008400:	2d00      	cmp	r5, #0
 8008402:	dd05      	ble.n	8008410 <_dtoa_r+0x9b8>
 8008404:	4639      	mov	r1, r7
 8008406:	462a      	mov	r2, r5
 8008408:	4620      	mov	r0, r4
 800840a:	f000 fd5d 	bl	8008ec8 <__lshift>
 800840e:	4607      	mov	r7, r0
 8008410:	9b06      	ldr	r3, [sp, #24]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d05c      	beq.n	80084d0 <_dtoa_r+0xa78>
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fb43 	bl	8008aa4 <_Balloc>
 800841e:	4605      	mov	r5, r0
 8008420:	b928      	cbnz	r0, 800842e <_dtoa_r+0x9d6>
 8008422:	4b80      	ldr	r3, [pc, #512]	; (8008624 <_dtoa_r+0xbcc>)
 8008424:	4602      	mov	r2, r0
 8008426:	f240 21ea 	movw	r1, #746	; 0x2ea
 800842a:	f7ff bb2e 	b.w	8007a8a <_dtoa_r+0x32>
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	3202      	adds	r2, #2
 8008432:	0092      	lsls	r2, r2, #2
 8008434:	f107 010c 	add.w	r1, r7, #12
 8008438:	300c      	adds	r0, #12
 800843a:	f000 fb25 	bl	8008a88 <memcpy>
 800843e:	2201      	movs	r2, #1
 8008440:	4629      	mov	r1, r5
 8008442:	4620      	mov	r0, r4
 8008444:	f000 fd40 	bl	8008ec8 <__lshift>
 8008448:	9b00      	ldr	r3, [sp, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	444b      	add	r3, r9
 8008452:	9307      	str	r3, [sp, #28]
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	46b8      	mov	r8, r7
 800845c:	9306      	str	r3, [sp, #24]
 800845e:	4607      	mov	r7, r0
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	4631      	mov	r1, r6
 8008464:	3b01      	subs	r3, #1
 8008466:	4658      	mov	r0, fp
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	f7ff fa67 	bl	800793c <quorem>
 800846e:	4603      	mov	r3, r0
 8008470:	3330      	adds	r3, #48	; 0x30
 8008472:	9004      	str	r0, [sp, #16]
 8008474:	4641      	mov	r1, r8
 8008476:	4658      	mov	r0, fp
 8008478:	9308      	str	r3, [sp, #32]
 800847a:	f000 fd91 	bl	8008fa0 <__mcmp>
 800847e:	463a      	mov	r2, r7
 8008480:	4681      	mov	r9, r0
 8008482:	4631      	mov	r1, r6
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fda7 	bl	8008fd8 <__mdiff>
 800848a:	68c2      	ldr	r2, [r0, #12]
 800848c:	9b08      	ldr	r3, [sp, #32]
 800848e:	4605      	mov	r5, r0
 8008490:	bb02      	cbnz	r2, 80084d4 <_dtoa_r+0xa7c>
 8008492:	4601      	mov	r1, r0
 8008494:	4658      	mov	r0, fp
 8008496:	f000 fd83 	bl	8008fa0 <__mcmp>
 800849a:	9b08      	ldr	r3, [sp, #32]
 800849c:	4602      	mov	r2, r0
 800849e:	4629      	mov	r1, r5
 80084a0:	4620      	mov	r0, r4
 80084a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80084a6:	f000 fb3d 	bl	8008b24 <_Bfree>
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ae:	9d01      	ldr	r5, [sp, #4]
 80084b0:	ea43 0102 	orr.w	r1, r3, r2
 80084b4:	9b06      	ldr	r3, [sp, #24]
 80084b6:	430b      	orrs	r3, r1
 80084b8:	9b08      	ldr	r3, [sp, #32]
 80084ba:	d10d      	bne.n	80084d8 <_dtoa_r+0xa80>
 80084bc:	2b39      	cmp	r3, #57	; 0x39
 80084be:	d029      	beq.n	8008514 <_dtoa_r+0xabc>
 80084c0:	f1b9 0f00 	cmp.w	r9, #0
 80084c4:	dd01      	ble.n	80084ca <_dtoa_r+0xa72>
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	3331      	adds	r3, #49	; 0x31
 80084ca:	9a02      	ldr	r2, [sp, #8]
 80084cc:	7013      	strb	r3, [r2, #0]
 80084ce:	e774      	b.n	80083ba <_dtoa_r+0x962>
 80084d0:	4638      	mov	r0, r7
 80084d2:	e7b9      	b.n	8008448 <_dtoa_r+0x9f0>
 80084d4:	2201      	movs	r2, #1
 80084d6:	e7e2      	b.n	800849e <_dtoa_r+0xa46>
 80084d8:	f1b9 0f00 	cmp.w	r9, #0
 80084dc:	db06      	blt.n	80084ec <_dtoa_r+0xa94>
 80084de:	9905      	ldr	r1, [sp, #20]
 80084e0:	ea41 0909 	orr.w	r9, r1, r9
 80084e4:	9906      	ldr	r1, [sp, #24]
 80084e6:	ea59 0101 	orrs.w	r1, r9, r1
 80084ea:	d120      	bne.n	800852e <_dtoa_r+0xad6>
 80084ec:	2a00      	cmp	r2, #0
 80084ee:	ddec      	ble.n	80084ca <_dtoa_r+0xa72>
 80084f0:	4659      	mov	r1, fp
 80084f2:	2201      	movs	r2, #1
 80084f4:	4620      	mov	r0, r4
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	f000 fce6 	bl	8008ec8 <__lshift>
 80084fc:	4631      	mov	r1, r6
 80084fe:	4683      	mov	fp, r0
 8008500:	f000 fd4e 	bl	8008fa0 <__mcmp>
 8008504:	2800      	cmp	r0, #0
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	dc02      	bgt.n	8008510 <_dtoa_r+0xab8>
 800850a:	d1de      	bne.n	80084ca <_dtoa_r+0xa72>
 800850c:	07da      	lsls	r2, r3, #31
 800850e:	d5dc      	bpl.n	80084ca <_dtoa_r+0xa72>
 8008510:	2b39      	cmp	r3, #57	; 0x39
 8008512:	d1d8      	bne.n	80084c6 <_dtoa_r+0xa6e>
 8008514:	9a02      	ldr	r2, [sp, #8]
 8008516:	2339      	movs	r3, #57	; 0x39
 8008518:	7013      	strb	r3, [r2, #0]
 800851a:	462b      	mov	r3, r5
 800851c:	461d      	mov	r5, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008524:	2a39      	cmp	r2, #57	; 0x39
 8008526:	d050      	beq.n	80085ca <_dtoa_r+0xb72>
 8008528:	3201      	adds	r2, #1
 800852a:	701a      	strb	r2, [r3, #0]
 800852c:	e745      	b.n	80083ba <_dtoa_r+0x962>
 800852e:	2a00      	cmp	r2, #0
 8008530:	dd03      	ble.n	800853a <_dtoa_r+0xae2>
 8008532:	2b39      	cmp	r3, #57	; 0x39
 8008534:	d0ee      	beq.n	8008514 <_dtoa_r+0xabc>
 8008536:	3301      	adds	r3, #1
 8008538:	e7c7      	b.n	80084ca <_dtoa_r+0xa72>
 800853a:	9a01      	ldr	r2, [sp, #4]
 800853c:	9907      	ldr	r1, [sp, #28]
 800853e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008542:	428a      	cmp	r2, r1
 8008544:	d02a      	beq.n	800859c <_dtoa_r+0xb44>
 8008546:	4659      	mov	r1, fp
 8008548:	2300      	movs	r3, #0
 800854a:	220a      	movs	r2, #10
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fb0b 	bl	8008b68 <__multadd>
 8008552:	45b8      	cmp	r8, r7
 8008554:	4683      	mov	fp, r0
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	f04f 020a 	mov.w	r2, #10
 800855e:	4641      	mov	r1, r8
 8008560:	4620      	mov	r0, r4
 8008562:	d107      	bne.n	8008574 <_dtoa_r+0xb1c>
 8008564:	f000 fb00 	bl	8008b68 <__multadd>
 8008568:	4680      	mov	r8, r0
 800856a:	4607      	mov	r7, r0
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	3301      	adds	r3, #1
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	e775      	b.n	8008460 <_dtoa_r+0xa08>
 8008574:	f000 faf8 	bl	8008b68 <__multadd>
 8008578:	4639      	mov	r1, r7
 800857a:	4680      	mov	r8, r0
 800857c:	2300      	movs	r3, #0
 800857e:	220a      	movs	r2, #10
 8008580:	4620      	mov	r0, r4
 8008582:	f000 faf1 	bl	8008b68 <__multadd>
 8008586:	4607      	mov	r7, r0
 8008588:	e7f0      	b.n	800856c <_dtoa_r+0xb14>
 800858a:	f1b9 0f00 	cmp.w	r9, #0
 800858e:	9a00      	ldr	r2, [sp, #0]
 8008590:	bfcc      	ite	gt
 8008592:	464d      	movgt	r5, r9
 8008594:	2501      	movle	r5, #1
 8008596:	4415      	add	r5, r2
 8008598:	f04f 0800 	mov.w	r8, #0
 800859c:	4659      	mov	r1, fp
 800859e:	2201      	movs	r2, #1
 80085a0:	4620      	mov	r0, r4
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	f000 fc90 	bl	8008ec8 <__lshift>
 80085a8:	4631      	mov	r1, r6
 80085aa:	4683      	mov	fp, r0
 80085ac:	f000 fcf8 	bl	8008fa0 <__mcmp>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	dcb2      	bgt.n	800851a <_dtoa_r+0xac2>
 80085b4:	d102      	bne.n	80085bc <_dtoa_r+0xb64>
 80085b6:	9b01      	ldr	r3, [sp, #4]
 80085b8:	07db      	lsls	r3, r3, #31
 80085ba:	d4ae      	bmi.n	800851a <_dtoa_r+0xac2>
 80085bc:	462b      	mov	r3, r5
 80085be:	461d      	mov	r5, r3
 80085c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085c4:	2a30      	cmp	r2, #48	; 0x30
 80085c6:	d0fa      	beq.n	80085be <_dtoa_r+0xb66>
 80085c8:	e6f7      	b.n	80083ba <_dtoa_r+0x962>
 80085ca:	9a00      	ldr	r2, [sp, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d1a5      	bne.n	800851c <_dtoa_r+0xac4>
 80085d0:	f10a 0a01 	add.w	sl, sl, #1
 80085d4:	2331      	movs	r3, #49	; 0x31
 80085d6:	e779      	b.n	80084cc <_dtoa_r+0xa74>
 80085d8:	4b13      	ldr	r3, [pc, #76]	; (8008628 <_dtoa_r+0xbd0>)
 80085da:	f7ff baaf 	b.w	8007b3c <_dtoa_r+0xe4>
 80085de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f47f aa86 	bne.w	8007af2 <_dtoa_r+0x9a>
 80085e6:	4b11      	ldr	r3, [pc, #68]	; (800862c <_dtoa_r+0xbd4>)
 80085e8:	f7ff baa8 	b.w	8007b3c <_dtoa_r+0xe4>
 80085ec:	f1b9 0f00 	cmp.w	r9, #0
 80085f0:	dc03      	bgt.n	80085fa <_dtoa_r+0xba2>
 80085f2:	9b05      	ldr	r3, [sp, #20]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	f73f aec9 	bgt.w	800838c <_dtoa_r+0x934>
 80085fa:	9d00      	ldr	r5, [sp, #0]
 80085fc:	4631      	mov	r1, r6
 80085fe:	4658      	mov	r0, fp
 8008600:	f7ff f99c 	bl	800793c <quorem>
 8008604:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008608:	f805 3b01 	strb.w	r3, [r5], #1
 800860c:	9a00      	ldr	r2, [sp, #0]
 800860e:	1aaa      	subs	r2, r5, r2
 8008610:	4591      	cmp	r9, r2
 8008612:	ddba      	ble.n	800858a <_dtoa_r+0xb32>
 8008614:	4659      	mov	r1, fp
 8008616:	2300      	movs	r3, #0
 8008618:	220a      	movs	r2, #10
 800861a:	4620      	mov	r0, r4
 800861c:	f000 faa4 	bl	8008b68 <__multadd>
 8008620:	4683      	mov	fp, r0
 8008622:	e7eb      	b.n	80085fc <_dtoa_r+0xba4>
 8008624:	0800bf0f 	.word	0x0800bf0f
 8008628:	0800be68 	.word	0x0800be68
 800862c:	0800be8c 	.word	0x0800be8c

08008630 <__sflush_r>:
 8008630:	898a      	ldrh	r2, [r1, #12]
 8008632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008636:	4605      	mov	r5, r0
 8008638:	0710      	lsls	r0, r2, #28
 800863a:	460c      	mov	r4, r1
 800863c:	d458      	bmi.n	80086f0 <__sflush_r+0xc0>
 800863e:	684b      	ldr	r3, [r1, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	dc05      	bgt.n	8008650 <__sflush_r+0x20>
 8008644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	dc02      	bgt.n	8008650 <__sflush_r+0x20>
 800864a:	2000      	movs	r0, #0
 800864c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008652:	2e00      	cmp	r6, #0
 8008654:	d0f9      	beq.n	800864a <__sflush_r+0x1a>
 8008656:	2300      	movs	r3, #0
 8008658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800865c:	682f      	ldr	r7, [r5, #0]
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	d032      	beq.n	80086c8 <__sflush_r+0x98>
 8008662:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	075a      	lsls	r2, r3, #29
 8008668:	d505      	bpl.n	8008676 <__sflush_r+0x46>
 800866a:	6863      	ldr	r3, [r4, #4]
 800866c:	1ac0      	subs	r0, r0, r3
 800866e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008670:	b10b      	cbz	r3, 8008676 <__sflush_r+0x46>
 8008672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008674:	1ac0      	subs	r0, r0, r3
 8008676:	2300      	movs	r3, #0
 8008678:	4602      	mov	r2, r0
 800867a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800867c:	6a21      	ldr	r1, [r4, #32]
 800867e:	4628      	mov	r0, r5
 8008680:	47b0      	blx	r6
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	d106      	bne.n	8008696 <__sflush_r+0x66>
 8008688:	6829      	ldr	r1, [r5, #0]
 800868a:	291d      	cmp	r1, #29
 800868c:	d82c      	bhi.n	80086e8 <__sflush_r+0xb8>
 800868e:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <__sflush_r+0x108>)
 8008690:	40ca      	lsrs	r2, r1
 8008692:	07d6      	lsls	r6, r2, #31
 8008694:	d528      	bpl.n	80086e8 <__sflush_r+0xb8>
 8008696:	2200      	movs	r2, #0
 8008698:	6062      	str	r2, [r4, #4]
 800869a:	04d9      	lsls	r1, r3, #19
 800869c:	6922      	ldr	r2, [r4, #16]
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	d504      	bpl.n	80086ac <__sflush_r+0x7c>
 80086a2:	1c42      	adds	r2, r0, #1
 80086a4:	d101      	bne.n	80086aa <__sflush_r+0x7a>
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	b903      	cbnz	r3, 80086ac <__sflush_r+0x7c>
 80086aa:	6560      	str	r0, [r4, #84]	; 0x54
 80086ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ae:	602f      	str	r7, [r5, #0]
 80086b0:	2900      	cmp	r1, #0
 80086b2:	d0ca      	beq.n	800864a <__sflush_r+0x1a>
 80086b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086b8:	4299      	cmp	r1, r3
 80086ba:	d002      	beq.n	80086c2 <__sflush_r+0x92>
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 fd7f 	bl	80091c0 <_free_r>
 80086c2:	2000      	movs	r0, #0
 80086c4:	6360      	str	r0, [r4, #52]	; 0x34
 80086c6:	e7c1      	b.n	800864c <__sflush_r+0x1c>
 80086c8:	6a21      	ldr	r1, [r4, #32]
 80086ca:	2301      	movs	r3, #1
 80086cc:	4628      	mov	r0, r5
 80086ce:	47b0      	blx	r6
 80086d0:	1c41      	adds	r1, r0, #1
 80086d2:	d1c7      	bne.n	8008664 <__sflush_r+0x34>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0c4      	beq.n	8008664 <__sflush_r+0x34>
 80086da:	2b1d      	cmp	r3, #29
 80086dc:	d001      	beq.n	80086e2 <__sflush_r+0xb2>
 80086de:	2b16      	cmp	r3, #22
 80086e0:	d101      	bne.n	80086e6 <__sflush_r+0xb6>
 80086e2:	602f      	str	r7, [r5, #0]
 80086e4:	e7b1      	b.n	800864a <__sflush_r+0x1a>
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ec:	81a3      	strh	r3, [r4, #12]
 80086ee:	e7ad      	b.n	800864c <__sflush_r+0x1c>
 80086f0:	690f      	ldr	r7, [r1, #16]
 80086f2:	2f00      	cmp	r7, #0
 80086f4:	d0a9      	beq.n	800864a <__sflush_r+0x1a>
 80086f6:	0793      	lsls	r3, r2, #30
 80086f8:	680e      	ldr	r6, [r1, #0]
 80086fa:	bf08      	it	eq
 80086fc:	694b      	ldreq	r3, [r1, #20]
 80086fe:	600f      	str	r7, [r1, #0]
 8008700:	bf18      	it	ne
 8008702:	2300      	movne	r3, #0
 8008704:	eba6 0807 	sub.w	r8, r6, r7
 8008708:	608b      	str	r3, [r1, #8]
 800870a:	f1b8 0f00 	cmp.w	r8, #0
 800870e:	dd9c      	ble.n	800864a <__sflush_r+0x1a>
 8008710:	6a21      	ldr	r1, [r4, #32]
 8008712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008714:	4643      	mov	r3, r8
 8008716:	463a      	mov	r2, r7
 8008718:	4628      	mov	r0, r5
 800871a:	47b0      	blx	r6
 800871c:	2800      	cmp	r0, #0
 800871e:	dc06      	bgt.n	800872e <__sflush_r+0xfe>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	f04f 30ff 	mov.w	r0, #4294967295
 800872c:	e78e      	b.n	800864c <__sflush_r+0x1c>
 800872e:	4407      	add	r7, r0
 8008730:	eba8 0800 	sub.w	r8, r8, r0
 8008734:	e7e9      	b.n	800870a <__sflush_r+0xda>
 8008736:	bf00      	nop
 8008738:	20400001 	.word	0x20400001

0800873c <_fflush_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	690b      	ldr	r3, [r1, #16]
 8008740:	4605      	mov	r5, r0
 8008742:	460c      	mov	r4, r1
 8008744:	b913      	cbnz	r3, 800874c <_fflush_r+0x10>
 8008746:	2500      	movs	r5, #0
 8008748:	4628      	mov	r0, r5
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	b118      	cbz	r0, 8008756 <_fflush_r+0x1a>
 800874e:	6983      	ldr	r3, [r0, #24]
 8008750:	b90b      	cbnz	r3, 8008756 <_fflush_r+0x1a>
 8008752:	f000 f887 	bl	8008864 <__sinit>
 8008756:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <_fflush_r+0x6c>)
 8008758:	429c      	cmp	r4, r3
 800875a:	d11b      	bne.n	8008794 <_fflush_r+0x58>
 800875c:	686c      	ldr	r4, [r5, #4]
 800875e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0ef      	beq.n	8008746 <_fflush_r+0xa>
 8008766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008768:	07d0      	lsls	r0, r2, #31
 800876a:	d404      	bmi.n	8008776 <_fflush_r+0x3a>
 800876c:	0599      	lsls	r1, r3, #22
 800876e:	d402      	bmi.n	8008776 <_fflush_r+0x3a>
 8008770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008772:	f000 f91a 	bl	80089aa <__retarget_lock_acquire_recursive>
 8008776:	4628      	mov	r0, r5
 8008778:	4621      	mov	r1, r4
 800877a:	f7ff ff59 	bl	8008630 <__sflush_r>
 800877e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008780:	07da      	lsls	r2, r3, #31
 8008782:	4605      	mov	r5, r0
 8008784:	d4e0      	bmi.n	8008748 <_fflush_r+0xc>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	059b      	lsls	r3, r3, #22
 800878a:	d4dd      	bmi.n	8008748 <_fflush_r+0xc>
 800878c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800878e:	f000 f90d 	bl	80089ac <__retarget_lock_release_recursive>
 8008792:	e7d9      	b.n	8008748 <_fflush_r+0xc>
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <_fflush_r+0x70>)
 8008796:	429c      	cmp	r4, r3
 8008798:	d101      	bne.n	800879e <_fflush_r+0x62>
 800879a:	68ac      	ldr	r4, [r5, #8]
 800879c:	e7df      	b.n	800875e <_fflush_r+0x22>
 800879e:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <_fflush_r+0x74>)
 80087a0:	429c      	cmp	r4, r3
 80087a2:	bf08      	it	eq
 80087a4:	68ec      	ldreq	r4, [r5, #12]
 80087a6:	e7da      	b.n	800875e <_fflush_r+0x22>
 80087a8:	0800bf40 	.word	0x0800bf40
 80087ac:	0800bf60 	.word	0x0800bf60
 80087b0:	0800bf20 	.word	0x0800bf20

080087b4 <std>:
 80087b4:	2300      	movs	r3, #0
 80087b6:	b510      	push	{r4, lr}
 80087b8:	4604      	mov	r4, r0
 80087ba:	e9c0 3300 	strd	r3, r3, [r0]
 80087be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087c2:	6083      	str	r3, [r0, #8]
 80087c4:	8181      	strh	r1, [r0, #12]
 80087c6:	6643      	str	r3, [r0, #100]	; 0x64
 80087c8:	81c2      	strh	r2, [r0, #14]
 80087ca:	6183      	str	r3, [r0, #24]
 80087cc:	4619      	mov	r1, r3
 80087ce:	2208      	movs	r2, #8
 80087d0:	305c      	adds	r0, #92	; 0x5c
 80087d2:	f7fe fad3 	bl	8006d7c <memset>
 80087d6:	4b05      	ldr	r3, [pc, #20]	; (80087ec <std+0x38>)
 80087d8:	6263      	str	r3, [r4, #36]	; 0x24
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <std+0x3c>)
 80087dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <std+0x40>)
 80087e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <std+0x44>)
 80087e4:	6224      	str	r4, [r4, #32]
 80087e6:	6323      	str	r3, [r4, #48]	; 0x30
 80087e8:	bd10      	pop	{r4, pc}
 80087ea:	bf00      	nop
 80087ec:	080098a1 	.word	0x080098a1
 80087f0:	080098c3 	.word	0x080098c3
 80087f4:	080098fb 	.word	0x080098fb
 80087f8:	0800991f 	.word	0x0800991f

080087fc <_cleanup_r>:
 80087fc:	4901      	ldr	r1, [pc, #4]	; (8008804 <_cleanup_r+0x8>)
 80087fe:	f000 b8af 	b.w	8008960 <_fwalk_reent>
 8008802:	bf00      	nop
 8008804:	0800873d 	.word	0x0800873d

08008808 <__sfmoreglue>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	1e4a      	subs	r2, r1, #1
 800880c:	2568      	movs	r5, #104	; 0x68
 800880e:	4355      	muls	r5, r2
 8008810:	460e      	mov	r6, r1
 8008812:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008816:	f000 fd23 	bl	8009260 <_malloc_r>
 800881a:	4604      	mov	r4, r0
 800881c:	b140      	cbz	r0, 8008830 <__sfmoreglue+0x28>
 800881e:	2100      	movs	r1, #0
 8008820:	e9c0 1600 	strd	r1, r6, [r0]
 8008824:	300c      	adds	r0, #12
 8008826:	60a0      	str	r0, [r4, #8]
 8008828:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800882c:	f7fe faa6 	bl	8006d7c <memset>
 8008830:	4620      	mov	r0, r4
 8008832:	bd70      	pop	{r4, r5, r6, pc}

08008834 <__sfp_lock_acquire>:
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <__sfp_lock_acquire+0x8>)
 8008836:	f000 b8b8 	b.w	80089aa <__retarget_lock_acquire_recursive>
 800883a:	bf00      	nop
 800883c:	200003c4 	.word	0x200003c4

08008840 <__sfp_lock_release>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__sfp_lock_release+0x8>)
 8008842:	f000 b8b3 	b.w	80089ac <__retarget_lock_release_recursive>
 8008846:	bf00      	nop
 8008848:	200003c4 	.word	0x200003c4

0800884c <__sinit_lock_acquire>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__sinit_lock_acquire+0x8>)
 800884e:	f000 b8ac 	b.w	80089aa <__retarget_lock_acquire_recursive>
 8008852:	bf00      	nop
 8008854:	200003bf 	.word	0x200003bf

08008858 <__sinit_lock_release>:
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <__sinit_lock_release+0x8>)
 800885a:	f000 b8a7 	b.w	80089ac <__retarget_lock_release_recursive>
 800885e:	bf00      	nop
 8008860:	200003bf 	.word	0x200003bf

08008864 <__sinit>:
 8008864:	b510      	push	{r4, lr}
 8008866:	4604      	mov	r4, r0
 8008868:	f7ff fff0 	bl	800884c <__sinit_lock_acquire>
 800886c:	69a3      	ldr	r3, [r4, #24]
 800886e:	b11b      	cbz	r3, 8008878 <__sinit+0x14>
 8008870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008874:	f7ff bff0 	b.w	8008858 <__sinit_lock_release>
 8008878:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800887c:	6523      	str	r3, [r4, #80]	; 0x50
 800887e:	4b13      	ldr	r3, [pc, #76]	; (80088cc <__sinit+0x68>)
 8008880:	4a13      	ldr	r2, [pc, #76]	; (80088d0 <__sinit+0x6c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	62a2      	str	r2, [r4, #40]	; 0x28
 8008886:	42a3      	cmp	r3, r4
 8008888:	bf04      	itt	eq
 800888a:	2301      	moveq	r3, #1
 800888c:	61a3      	streq	r3, [r4, #24]
 800888e:	4620      	mov	r0, r4
 8008890:	f000 f820 	bl	80088d4 <__sfp>
 8008894:	6060      	str	r0, [r4, #4]
 8008896:	4620      	mov	r0, r4
 8008898:	f000 f81c 	bl	80088d4 <__sfp>
 800889c:	60a0      	str	r0, [r4, #8]
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f818 	bl	80088d4 <__sfp>
 80088a4:	2200      	movs	r2, #0
 80088a6:	60e0      	str	r0, [r4, #12]
 80088a8:	2104      	movs	r1, #4
 80088aa:	6860      	ldr	r0, [r4, #4]
 80088ac:	f7ff ff82 	bl	80087b4 <std>
 80088b0:	68a0      	ldr	r0, [r4, #8]
 80088b2:	2201      	movs	r2, #1
 80088b4:	2109      	movs	r1, #9
 80088b6:	f7ff ff7d 	bl	80087b4 <std>
 80088ba:	68e0      	ldr	r0, [r4, #12]
 80088bc:	2202      	movs	r2, #2
 80088be:	2112      	movs	r1, #18
 80088c0:	f7ff ff78 	bl	80087b4 <std>
 80088c4:	2301      	movs	r3, #1
 80088c6:	61a3      	str	r3, [r4, #24]
 80088c8:	e7d2      	b.n	8008870 <__sinit+0xc>
 80088ca:	bf00      	nop
 80088cc:	0800be54 	.word	0x0800be54
 80088d0:	080087fd 	.word	0x080087fd

080088d4 <__sfp>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	4607      	mov	r7, r0
 80088d8:	f7ff ffac 	bl	8008834 <__sfp_lock_acquire>
 80088dc:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <__sfp+0x84>)
 80088de:	681e      	ldr	r6, [r3, #0]
 80088e0:	69b3      	ldr	r3, [r6, #24]
 80088e2:	b913      	cbnz	r3, 80088ea <__sfp+0x16>
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ffbd 	bl	8008864 <__sinit>
 80088ea:	3648      	adds	r6, #72	; 0x48
 80088ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	d503      	bpl.n	80088fc <__sfp+0x28>
 80088f4:	6833      	ldr	r3, [r6, #0]
 80088f6:	b30b      	cbz	r3, 800893c <__sfp+0x68>
 80088f8:	6836      	ldr	r6, [r6, #0]
 80088fa:	e7f7      	b.n	80088ec <__sfp+0x18>
 80088fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008900:	b9d5      	cbnz	r5, 8008938 <__sfp+0x64>
 8008902:	4b16      	ldr	r3, [pc, #88]	; (800895c <__sfp+0x88>)
 8008904:	60e3      	str	r3, [r4, #12]
 8008906:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800890a:	6665      	str	r5, [r4, #100]	; 0x64
 800890c:	f000 f84c 	bl	80089a8 <__retarget_lock_init_recursive>
 8008910:	f7ff ff96 	bl	8008840 <__sfp_lock_release>
 8008914:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008918:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800891c:	6025      	str	r5, [r4, #0]
 800891e:	61a5      	str	r5, [r4, #24]
 8008920:	2208      	movs	r2, #8
 8008922:	4629      	mov	r1, r5
 8008924:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008928:	f7fe fa28 	bl	8006d7c <memset>
 800892c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008930:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008934:	4620      	mov	r0, r4
 8008936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008938:	3468      	adds	r4, #104	; 0x68
 800893a:	e7d9      	b.n	80088f0 <__sfp+0x1c>
 800893c:	2104      	movs	r1, #4
 800893e:	4638      	mov	r0, r7
 8008940:	f7ff ff62 	bl	8008808 <__sfmoreglue>
 8008944:	4604      	mov	r4, r0
 8008946:	6030      	str	r0, [r6, #0]
 8008948:	2800      	cmp	r0, #0
 800894a:	d1d5      	bne.n	80088f8 <__sfp+0x24>
 800894c:	f7ff ff78 	bl	8008840 <__sfp_lock_release>
 8008950:	230c      	movs	r3, #12
 8008952:	603b      	str	r3, [r7, #0]
 8008954:	e7ee      	b.n	8008934 <__sfp+0x60>
 8008956:	bf00      	nop
 8008958:	0800be54 	.word	0x0800be54
 800895c:	ffff0001 	.word	0xffff0001

08008960 <_fwalk_reent>:
 8008960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008964:	4606      	mov	r6, r0
 8008966:	4688      	mov	r8, r1
 8008968:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800896c:	2700      	movs	r7, #0
 800896e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008972:	f1b9 0901 	subs.w	r9, r9, #1
 8008976:	d505      	bpl.n	8008984 <_fwalk_reent+0x24>
 8008978:	6824      	ldr	r4, [r4, #0]
 800897a:	2c00      	cmp	r4, #0
 800897c:	d1f7      	bne.n	800896e <_fwalk_reent+0xe>
 800897e:	4638      	mov	r0, r7
 8008980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008984:	89ab      	ldrh	r3, [r5, #12]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d907      	bls.n	800899a <_fwalk_reent+0x3a>
 800898a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800898e:	3301      	adds	r3, #1
 8008990:	d003      	beq.n	800899a <_fwalk_reent+0x3a>
 8008992:	4629      	mov	r1, r5
 8008994:	4630      	mov	r0, r6
 8008996:	47c0      	blx	r8
 8008998:	4307      	orrs	r7, r0
 800899a:	3568      	adds	r5, #104	; 0x68
 800899c:	e7e9      	b.n	8008972 <_fwalk_reent+0x12>
	...

080089a0 <_localeconv_r>:
 80089a0:	4800      	ldr	r0, [pc, #0]	; (80089a4 <_localeconv_r+0x4>)
 80089a2:	4770      	bx	lr
 80089a4:	20000168 	.word	0x20000168

080089a8 <__retarget_lock_init_recursive>:
 80089a8:	4770      	bx	lr

080089aa <__retarget_lock_acquire_recursive>:
 80089aa:	4770      	bx	lr

080089ac <__retarget_lock_release_recursive>:
 80089ac:	4770      	bx	lr

080089ae <__swhatbuf_r>:
 80089ae:	b570      	push	{r4, r5, r6, lr}
 80089b0:	460e      	mov	r6, r1
 80089b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b6:	2900      	cmp	r1, #0
 80089b8:	b096      	sub	sp, #88	; 0x58
 80089ba:	4614      	mov	r4, r2
 80089bc:	461d      	mov	r5, r3
 80089be:	da07      	bge.n	80089d0 <__swhatbuf_r+0x22>
 80089c0:	2300      	movs	r3, #0
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	89b3      	ldrh	r3, [r6, #12]
 80089c6:	061a      	lsls	r2, r3, #24
 80089c8:	d410      	bmi.n	80089ec <__swhatbuf_r+0x3e>
 80089ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ce:	e00e      	b.n	80089ee <__swhatbuf_r+0x40>
 80089d0:	466a      	mov	r2, sp
 80089d2:	f000 fffb 	bl	80099cc <_fstat_r>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	dbf2      	blt.n	80089c0 <__swhatbuf_r+0x12>
 80089da:	9a01      	ldr	r2, [sp, #4]
 80089dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089e4:	425a      	negs	r2, r3
 80089e6:	415a      	adcs	r2, r3
 80089e8:	602a      	str	r2, [r5, #0]
 80089ea:	e7ee      	b.n	80089ca <__swhatbuf_r+0x1c>
 80089ec:	2340      	movs	r3, #64	; 0x40
 80089ee:	2000      	movs	r0, #0
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	b016      	add	sp, #88	; 0x58
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080089f8 <__smakebuf_r>:
 80089f8:	898b      	ldrh	r3, [r1, #12]
 80089fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089fc:	079d      	lsls	r5, r3, #30
 80089fe:	4606      	mov	r6, r0
 8008a00:	460c      	mov	r4, r1
 8008a02:	d507      	bpl.n	8008a14 <__smakebuf_r+0x1c>
 8008a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	6163      	str	r3, [r4, #20]
 8008a10:	b002      	add	sp, #8
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	ab01      	add	r3, sp, #4
 8008a16:	466a      	mov	r2, sp
 8008a18:	f7ff ffc9 	bl	80089ae <__swhatbuf_r>
 8008a1c:	9900      	ldr	r1, [sp, #0]
 8008a1e:	4605      	mov	r5, r0
 8008a20:	4630      	mov	r0, r6
 8008a22:	f000 fc1d 	bl	8009260 <_malloc_r>
 8008a26:	b948      	cbnz	r0, 8008a3c <__smakebuf_r+0x44>
 8008a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2c:	059a      	lsls	r2, r3, #22
 8008a2e:	d4ef      	bmi.n	8008a10 <__smakebuf_r+0x18>
 8008a30:	f023 0303 	bic.w	r3, r3, #3
 8008a34:	f043 0302 	orr.w	r3, r3, #2
 8008a38:	81a3      	strh	r3, [r4, #12]
 8008a3a:	e7e3      	b.n	8008a04 <__smakebuf_r+0xc>
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <__smakebuf_r+0x7c>)
 8008a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	6020      	str	r0, [r4, #0]
 8008a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a48:	81a3      	strh	r3, [r4, #12]
 8008a4a:	9b00      	ldr	r3, [sp, #0]
 8008a4c:	6163      	str	r3, [r4, #20]
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	6120      	str	r0, [r4, #16]
 8008a52:	b15b      	cbz	r3, 8008a6c <__smakebuf_r+0x74>
 8008a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f000 ffc9 	bl	80099f0 <_isatty_r>
 8008a5e:	b128      	cbz	r0, 8008a6c <__smakebuf_r+0x74>
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	f043 0301 	orr.w	r3, r3, #1
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	89a0      	ldrh	r0, [r4, #12]
 8008a6e:	4305      	orrs	r5, r0
 8008a70:	81a5      	strh	r5, [r4, #12]
 8008a72:	e7cd      	b.n	8008a10 <__smakebuf_r+0x18>
 8008a74:	080087fd 	.word	0x080087fd

08008a78 <malloc>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	; (8008a84 <malloc+0xc>)
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f000 bbef 	b.w	8009260 <_malloc_r>
 8008a82:	bf00      	nop
 8008a84:	20000014 	.word	0x20000014

08008a88 <memcpy>:
 8008a88:	440a      	add	r2, r1
 8008a8a:	4291      	cmp	r1, r2
 8008a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a90:	d100      	bne.n	8008a94 <memcpy+0xc>
 8008a92:	4770      	bx	lr
 8008a94:	b510      	push	{r4, lr}
 8008a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a9e:	4291      	cmp	r1, r2
 8008aa0:	d1f9      	bne.n	8008a96 <memcpy+0xe>
 8008aa2:	bd10      	pop	{r4, pc}

08008aa4 <_Balloc>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	b976      	cbnz	r6, 8008acc <_Balloc+0x28>
 8008aae:	2010      	movs	r0, #16
 8008ab0:	f7ff ffe2 	bl	8008a78 <malloc>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6260      	str	r0, [r4, #36]	; 0x24
 8008ab8:	b920      	cbnz	r0, 8008ac4 <_Balloc+0x20>
 8008aba:	4b18      	ldr	r3, [pc, #96]	; (8008b1c <_Balloc+0x78>)
 8008abc:	4818      	ldr	r0, [pc, #96]	; (8008b20 <_Balloc+0x7c>)
 8008abe:	2166      	movs	r1, #102	; 0x66
 8008ac0:	f000 ff44 	bl	800994c <__assert_func>
 8008ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ac8:	6006      	str	r6, [r0, #0]
 8008aca:	60c6      	str	r6, [r0, #12]
 8008acc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ace:	68f3      	ldr	r3, [r6, #12]
 8008ad0:	b183      	cbz	r3, 8008af4 <_Balloc+0x50>
 8008ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ada:	b9b8      	cbnz	r0, 8008b0c <_Balloc+0x68>
 8008adc:	2101      	movs	r1, #1
 8008ade:	fa01 f605 	lsl.w	r6, r1, r5
 8008ae2:	1d72      	adds	r2, r6, #5
 8008ae4:	0092      	lsls	r2, r2, #2
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 fb5a 	bl	80091a0 <_calloc_r>
 8008aec:	b160      	cbz	r0, 8008b08 <_Balloc+0x64>
 8008aee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008af2:	e00e      	b.n	8008b12 <_Balloc+0x6e>
 8008af4:	2221      	movs	r2, #33	; 0x21
 8008af6:	2104      	movs	r1, #4
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fb51 	bl	80091a0 <_calloc_r>
 8008afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b00:	60f0      	str	r0, [r6, #12]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e4      	bne.n	8008ad2 <_Balloc+0x2e>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	6802      	ldr	r2, [r0, #0]
 8008b0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b12:	2300      	movs	r3, #0
 8008b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b18:	e7f7      	b.n	8008b0a <_Balloc+0x66>
 8008b1a:	bf00      	nop
 8008b1c:	0800be99 	.word	0x0800be99
 8008b20:	0800bf80 	.word	0x0800bf80

08008b24 <_Bfree>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b28:	4605      	mov	r5, r0
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	b976      	cbnz	r6, 8008b4c <_Bfree+0x28>
 8008b2e:	2010      	movs	r0, #16
 8008b30:	f7ff ffa2 	bl	8008a78 <malloc>
 8008b34:	4602      	mov	r2, r0
 8008b36:	6268      	str	r0, [r5, #36]	; 0x24
 8008b38:	b920      	cbnz	r0, 8008b44 <_Bfree+0x20>
 8008b3a:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <_Bfree+0x3c>)
 8008b3c:	4809      	ldr	r0, [pc, #36]	; (8008b64 <_Bfree+0x40>)
 8008b3e:	218a      	movs	r1, #138	; 0x8a
 8008b40:	f000 ff04 	bl	800994c <__assert_func>
 8008b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b48:	6006      	str	r6, [r0, #0]
 8008b4a:	60c6      	str	r6, [r0, #12]
 8008b4c:	b13c      	cbz	r4, 8008b5e <_Bfree+0x3a>
 8008b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b50:	6862      	ldr	r2, [r4, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b58:	6021      	str	r1, [r4, #0]
 8008b5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	0800be99 	.word	0x0800be99
 8008b64:	0800bf80 	.word	0x0800bf80

08008b68 <__multadd>:
 8008b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	690e      	ldr	r6, [r1, #16]
 8008b6e:	4607      	mov	r7, r0
 8008b70:	4698      	mov	r8, r3
 8008b72:	460c      	mov	r4, r1
 8008b74:	f101 0014 	add.w	r0, r1, #20
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6805      	ldr	r5, [r0, #0]
 8008b7c:	b2a9      	uxth	r1, r5
 8008b7e:	fb02 8101 	mla	r1, r2, r1, r8
 8008b82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008b86:	0c2d      	lsrs	r5, r5, #16
 8008b88:	fb02 c505 	mla	r5, r2, r5, ip
 8008b8c:	b289      	uxth	r1, r1
 8008b8e:	3301      	adds	r3, #1
 8008b90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008b94:	429e      	cmp	r6, r3
 8008b96:	f840 1b04 	str.w	r1, [r0], #4
 8008b9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008b9e:	dcec      	bgt.n	8008b7a <__multadd+0x12>
 8008ba0:	f1b8 0f00 	cmp.w	r8, #0
 8008ba4:	d022      	beq.n	8008bec <__multadd+0x84>
 8008ba6:	68a3      	ldr	r3, [r4, #8]
 8008ba8:	42b3      	cmp	r3, r6
 8008baa:	dc19      	bgt.n	8008be0 <__multadd+0x78>
 8008bac:	6861      	ldr	r1, [r4, #4]
 8008bae:	4638      	mov	r0, r7
 8008bb0:	3101      	adds	r1, #1
 8008bb2:	f7ff ff77 	bl	8008aa4 <_Balloc>
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	b928      	cbnz	r0, 8008bc6 <__multadd+0x5e>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <__multadd+0x8c>)
 8008bbe:	480e      	ldr	r0, [pc, #56]	; (8008bf8 <__multadd+0x90>)
 8008bc0:	21b5      	movs	r1, #181	; 0xb5
 8008bc2:	f000 fec3 	bl	800994c <__assert_func>
 8008bc6:	6922      	ldr	r2, [r4, #16]
 8008bc8:	3202      	adds	r2, #2
 8008bca:	f104 010c 	add.w	r1, r4, #12
 8008bce:	0092      	lsls	r2, r2, #2
 8008bd0:	300c      	adds	r0, #12
 8008bd2:	f7ff ff59 	bl	8008a88 <memcpy>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f7ff ffa3 	bl	8008b24 <_Bfree>
 8008bde:	462c      	mov	r4, r5
 8008be0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008be4:	3601      	adds	r6, #1
 8008be6:	f8c3 8014 	str.w	r8, [r3, #20]
 8008bea:	6126      	str	r6, [r4, #16]
 8008bec:	4620      	mov	r0, r4
 8008bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf2:	bf00      	nop
 8008bf4:	0800bf0f 	.word	0x0800bf0f
 8008bf8:	0800bf80 	.word	0x0800bf80

08008bfc <__hi0bits>:
 8008bfc:	0c03      	lsrs	r3, r0, #16
 8008bfe:	041b      	lsls	r3, r3, #16
 8008c00:	b9d3      	cbnz	r3, 8008c38 <__hi0bits+0x3c>
 8008c02:	0400      	lsls	r0, r0, #16
 8008c04:	2310      	movs	r3, #16
 8008c06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c0a:	bf04      	itt	eq
 8008c0c:	0200      	lsleq	r0, r0, #8
 8008c0e:	3308      	addeq	r3, #8
 8008c10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c14:	bf04      	itt	eq
 8008c16:	0100      	lsleq	r0, r0, #4
 8008c18:	3304      	addeq	r3, #4
 8008c1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c1e:	bf04      	itt	eq
 8008c20:	0080      	lsleq	r0, r0, #2
 8008c22:	3302      	addeq	r3, #2
 8008c24:	2800      	cmp	r0, #0
 8008c26:	db05      	blt.n	8008c34 <__hi0bits+0x38>
 8008c28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c2c:	f103 0301 	add.w	r3, r3, #1
 8008c30:	bf08      	it	eq
 8008c32:	2320      	moveq	r3, #32
 8008c34:	4618      	mov	r0, r3
 8008c36:	4770      	bx	lr
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e7e4      	b.n	8008c06 <__hi0bits+0xa>

08008c3c <__lo0bits>:
 8008c3c:	6803      	ldr	r3, [r0, #0]
 8008c3e:	f013 0207 	ands.w	r2, r3, #7
 8008c42:	4601      	mov	r1, r0
 8008c44:	d00b      	beq.n	8008c5e <__lo0bits+0x22>
 8008c46:	07da      	lsls	r2, r3, #31
 8008c48:	d424      	bmi.n	8008c94 <__lo0bits+0x58>
 8008c4a:	0798      	lsls	r0, r3, #30
 8008c4c:	bf49      	itett	mi
 8008c4e:	085b      	lsrmi	r3, r3, #1
 8008c50:	089b      	lsrpl	r3, r3, #2
 8008c52:	2001      	movmi	r0, #1
 8008c54:	600b      	strmi	r3, [r1, #0]
 8008c56:	bf5c      	itt	pl
 8008c58:	600b      	strpl	r3, [r1, #0]
 8008c5a:	2002      	movpl	r0, #2
 8008c5c:	4770      	bx	lr
 8008c5e:	b298      	uxth	r0, r3
 8008c60:	b9b0      	cbnz	r0, 8008c90 <__lo0bits+0x54>
 8008c62:	0c1b      	lsrs	r3, r3, #16
 8008c64:	2010      	movs	r0, #16
 8008c66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c6a:	bf04      	itt	eq
 8008c6c:	0a1b      	lsreq	r3, r3, #8
 8008c6e:	3008      	addeq	r0, #8
 8008c70:	071a      	lsls	r2, r3, #28
 8008c72:	bf04      	itt	eq
 8008c74:	091b      	lsreq	r3, r3, #4
 8008c76:	3004      	addeq	r0, #4
 8008c78:	079a      	lsls	r2, r3, #30
 8008c7a:	bf04      	itt	eq
 8008c7c:	089b      	lsreq	r3, r3, #2
 8008c7e:	3002      	addeq	r0, #2
 8008c80:	07da      	lsls	r2, r3, #31
 8008c82:	d403      	bmi.n	8008c8c <__lo0bits+0x50>
 8008c84:	085b      	lsrs	r3, r3, #1
 8008c86:	f100 0001 	add.w	r0, r0, #1
 8008c8a:	d005      	beq.n	8008c98 <__lo0bits+0x5c>
 8008c8c:	600b      	str	r3, [r1, #0]
 8008c8e:	4770      	bx	lr
 8008c90:	4610      	mov	r0, r2
 8008c92:	e7e8      	b.n	8008c66 <__lo0bits+0x2a>
 8008c94:	2000      	movs	r0, #0
 8008c96:	4770      	bx	lr
 8008c98:	2020      	movs	r0, #32
 8008c9a:	4770      	bx	lr

08008c9c <__i2b>:
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	f7ff feff 	bl	8008aa4 <_Balloc>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	b928      	cbnz	r0, 8008cb6 <__i2b+0x1a>
 8008caa:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <__i2b+0x24>)
 8008cac:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <__i2b+0x28>)
 8008cae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cb2:	f000 fe4b 	bl	800994c <__assert_func>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	6144      	str	r4, [r0, #20]
 8008cba:	6103      	str	r3, [r0, #16]
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	bf00      	nop
 8008cc0:	0800bf0f 	.word	0x0800bf0f
 8008cc4:	0800bf80 	.word	0x0800bf80

08008cc8 <__multiply>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	4614      	mov	r4, r2
 8008cce:	690a      	ldr	r2, [r1, #16]
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	bfb8      	it	lt
 8008cd6:	460b      	movlt	r3, r1
 8008cd8:	460d      	mov	r5, r1
 8008cda:	bfbc      	itt	lt
 8008cdc:	4625      	movlt	r5, r4
 8008cde:	461c      	movlt	r4, r3
 8008ce0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ce4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ce8:	68ab      	ldr	r3, [r5, #8]
 8008cea:	6869      	ldr	r1, [r5, #4]
 8008cec:	eb0a 0709 	add.w	r7, sl, r9
 8008cf0:	42bb      	cmp	r3, r7
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	bfb8      	it	lt
 8008cf6:	3101      	addlt	r1, #1
 8008cf8:	f7ff fed4 	bl	8008aa4 <_Balloc>
 8008cfc:	b930      	cbnz	r0, 8008d0c <__multiply+0x44>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	4b42      	ldr	r3, [pc, #264]	; (8008e0c <__multiply+0x144>)
 8008d02:	4843      	ldr	r0, [pc, #268]	; (8008e10 <__multiply+0x148>)
 8008d04:	f240 115d 	movw	r1, #349	; 0x15d
 8008d08:	f000 fe20 	bl	800994c <__assert_func>
 8008d0c:	f100 0614 	add.w	r6, r0, #20
 8008d10:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008d14:	4633      	mov	r3, r6
 8008d16:	2200      	movs	r2, #0
 8008d18:	4543      	cmp	r3, r8
 8008d1a:	d31e      	bcc.n	8008d5a <__multiply+0x92>
 8008d1c:	f105 0c14 	add.w	ip, r5, #20
 8008d20:	f104 0314 	add.w	r3, r4, #20
 8008d24:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d28:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d2c:	9202      	str	r2, [sp, #8]
 8008d2e:	ebac 0205 	sub.w	r2, ip, r5
 8008d32:	3a15      	subs	r2, #21
 8008d34:	f022 0203 	bic.w	r2, r2, #3
 8008d38:	3204      	adds	r2, #4
 8008d3a:	f105 0115 	add.w	r1, r5, #21
 8008d3e:	458c      	cmp	ip, r1
 8008d40:	bf38      	it	cc
 8008d42:	2204      	movcc	r2, #4
 8008d44:	9201      	str	r2, [sp, #4]
 8008d46:	9a02      	ldr	r2, [sp, #8]
 8008d48:	9303      	str	r3, [sp, #12]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d808      	bhi.n	8008d60 <__multiply+0x98>
 8008d4e:	2f00      	cmp	r7, #0
 8008d50:	dc55      	bgt.n	8008dfe <__multiply+0x136>
 8008d52:	6107      	str	r7, [r0, #16]
 8008d54:	b005      	add	sp, #20
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	f843 2b04 	str.w	r2, [r3], #4
 8008d5e:	e7db      	b.n	8008d18 <__multiply+0x50>
 8008d60:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d64:	f1ba 0f00 	cmp.w	sl, #0
 8008d68:	d020      	beq.n	8008dac <__multiply+0xe4>
 8008d6a:	f105 0e14 	add.w	lr, r5, #20
 8008d6e:	46b1      	mov	r9, r6
 8008d70:	2200      	movs	r2, #0
 8008d72:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008d76:	f8d9 b000 	ldr.w	fp, [r9]
 8008d7a:	b2a1      	uxth	r1, r4
 8008d7c:	fa1f fb8b 	uxth.w	fp, fp
 8008d80:	fb0a b101 	mla	r1, sl, r1, fp
 8008d84:	4411      	add	r1, r2
 8008d86:	f8d9 2000 	ldr.w	r2, [r9]
 8008d8a:	0c24      	lsrs	r4, r4, #16
 8008d8c:	0c12      	lsrs	r2, r2, #16
 8008d8e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008d92:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008d96:	b289      	uxth	r1, r1
 8008d98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d9c:	45f4      	cmp	ip, lr
 8008d9e:	f849 1b04 	str.w	r1, [r9], #4
 8008da2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008da6:	d8e4      	bhi.n	8008d72 <__multiply+0xaa>
 8008da8:	9901      	ldr	r1, [sp, #4]
 8008daa:	5072      	str	r2, [r6, r1]
 8008dac:	9a03      	ldr	r2, [sp, #12]
 8008dae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008db2:	3304      	adds	r3, #4
 8008db4:	f1b9 0f00 	cmp.w	r9, #0
 8008db8:	d01f      	beq.n	8008dfa <__multiply+0x132>
 8008dba:	6834      	ldr	r4, [r6, #0]
 8008dbc:	f105 0114 	add.w	r1, r5, #20
 8008dc0:	46b6      	mov	lr, r6
 8008dc2:	f04f 0a00 	mov.w	sl, #0
 8008dc6:	880a      	ldrh	r2, [r1, #0]
 8008dc8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008dcc:	fb09 b202 	mla	r2, r9, r2, fp
 8008dd0:	4492      	add	sl, r2
 8008dd2:	b2a4      	uxth	r4, r4
 8008dd4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008dd8:	f84e 4b04 	str.w	r4, [lr], #4
 8008ddc:	f851 4b04 	ldr.w	r4, [r1], #4
 8008de0:	f8be 2000 	ldrh.w	r2, [lr]
 8008de4:	0c24      	lsrs	r4, r4, #16
 8008de6:	fb09 2404 	mla	r4, r9, r4, r2
 8008dea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008dee:	458c      	cmp	ip, r1
 8008df0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008df4:	d8e7      	bhi.n	8008dc6 <__multiply+0xfe>
 8008df6:	9a01      	ldr	r2, [sp, #4]
 8008df8:	50b4      	str	r4, [r6, r2]
 8008dfa:	3604      	adds	r6, #4
 8008dfc:	e7a3      	b.n	8008d46 <__multiply+0x7e>
 8008dfe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1a5      	bne.n	8008d52 <__multiply+0x8a>
 8008e06:	3f01      	subs	r7, #1
 8008e08:	e7a1      	b.n	8008d4e <__multiply+0x86>
 8008e0a:	bf00      	nop
 8008e0c:	0800bf0f 	.word	0x0800bf0f
 8008e10:	0800bf80 	.word	0x0800bf80

08008e14 <__pow5mult>:
 8008e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e18:	4615      	mov	r5, r2
 8008e1a:	f012 0203 	ands.w	r2, r2, #3
 8008e1e:	4606      	mov	r6, r0
 8008e20:	460f      	mov	r7, r1
 8008e22:	d007      	beq.n	8008e34 <__pow5mult+0x20>
 8008e24:	4c25      	ldr	r4, [pc, #148]	; (8008ebc <__pow5mult+0xa8>)
 8008e26:	3a01      	subs	r2, #1
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e2e:	f7ff fe9b 	bl	8008b68 <__multadd>
 8008e32:	4607      	mov	r7, r0
 8008e34:	10ad      	asrs	r5, r5, #2
 8008e36:	d03d      	beq.n	8008eb4 <__pow5mult+0xa0>
 8008e38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e3a:	b97c      	cbnz	r4, 8008e5c <__pow5mult+0x48>
 8008e3c:	2010      	movs	r0, #16
 8008e3e:	f7ff fe1b 	bl	8008a78 <malloc>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6270      	str	r0, [r6, #36]	; 0x24
 8008e46:	b928      	cbnz	r0, 8008e54 <__pow5mult+0x40>
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <__pow5mult+0xac>)
 8008e4a:	481e      	ldr	r0, [pc, #120]	; (8008ec4 <__pow5mult+0xb0>)
 8008e4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e50:	f000 fd7c 	bl	800994c <__assert_func>
 8008e54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e58:	6004      	str	r4, [r0, #0]
 8008e5a:	60c4      	str	r4, [r0, #12]
 8008e5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e64:	b94c      	cbnz	r4, 8008e7a <__pow5mult+0x66>
 8008e66:	f240 2171 	movw	r1, #625	; 0x271
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ff16 	bl	8008c9c <__i2b>
 8008e70:	2300      	movs	r3, #0
 8008e72:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e76:	4604      	mov	r4, r0
 8008e78:	6003      	str	r3, [r0, #0]
 8008e7a:	f04f 0900 	mov.w	r9, #0
 8008e7e:	07eb      	lsls	r3, r5, #31
 8008e80:	d50a      	bpl.n	8008e98 <__pow5mult+0x84>
 8008e82:	4639      	mov	r1, r7
 8008e84:	4622      	mov	r2, r4
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ff1e 	bl	8008cc8 <__multiply>
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	4680      	mov	r8, r0
 8008e90:	4630      	mov	r0, r6
 8008e92:	f7ff fe47 	bl	8008b24 <_Bfree>
 8008e96:	4647      	mov	r7, r8
 8008e98:	106d      	asrs	r5, r5, #1
 8008e9a:	d00b      	beq.n	8008eb4 <__pow5mult+0xa0>
 8008e9c:	6820      	ldr	r0, [r4, #0]
 8008e9e:	b938      	cbnz	r0, 8008eb0 <__pow5mult+0x9c>
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff ff0f 	bl	8008cc8 <__multiply>
 8008eaa:	6020      	str	r0, [r4, #0]
 8008eac:	f8c0 9000 	str.w	r9, [r0]
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	e7e4      	b.n	8008e7e <__pow5mult+0x6a>
 8008eb4:	4638      	mov	r0, r7
 8008eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eba:	bf00      	nop
 8008ebc:	0800c0d0 	.word	0x0800c0d0
 8008ec0:	0800be99 	.word	0x0800be99
 8008ec4:	0800bf80 	.word	0x0800bf80

08008ec8 <__lshift>:
 8008ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ecc:	460c      	mov	r4, r1
 8008ece:	6849      	ldr	r1, [r1, #4]
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ed6:	68a3      	ldr	r3, [r4, #8]
 8008ed8:	4607      	mov	r7, r0
 8008eda:	4691      	mov	r9, r2
 8008edc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ee0:	f108 0601 	add.w	r6, r8, #1
 8008ee4:	42b3      	cmp	r3, r6
 8008ee6:	db0b      	blt.n	8008f00 <__lshift+0x38>
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f7ff fddb 	bl	8008aa4 <_Balloc>
 8008eee:	4605      	mov	r5, r0
 8008ef0:	b948      	cbnz	r0, 8008f06 <__lshift+0x3e>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b28      	ldr	r3, [pc, #160]	; (8008f98 <__lshift+0xd0>)
 8008ef6:	4829      	ldr	r0, [pc, #164]	; (8008f9c <__lshift+0xd4>)
 8008ef8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008efc:	f000 fd26 	bl	800994c <__assert_func>
 8008f00:	3101      	adds	r1, #1
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	e7ee      	b.n	8008ee4 <__lshift+0x1c>
 8008f06:	2300      	movs	r3, #0
 8008f08:	f100 0114 	add.w	r1, r0, #20
 8008f0c:	f100 0210 	add.w	r2, r0, #16
 8008f10:	4618      	mov	r0, r3
 8008f12:	4553      	cmp	r3, sl
 8008f14:	db33      	blt.n	8008f7e <__lshift+0xb6>
 8008f16:	6920      	ldr	r0, [r4, #16]
 8008f18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f1c:	f104 0314 	add.w	r3, r4, #20
 8008f20:	f019 091f 	ands.w	r9, r9, #31
 8008f24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f2c:	d02b      	beq.n	8008f86 <__lshift+0xbe>
 8008f2e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f32:	468a      	mov	sl, r1
 8008f34:	2200      	movs	r2, #0
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	fa00 f009 	lsl.w	r0, r0, r9
 8008f3c:	4302      	orrs	r2, r0
 8008f3e:	f84a 2b04 	str.w	r2, [sl], #4
 8008f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f46:	459c      	cmp	ip, r3
 8008f48:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f4c:	d8f3      	bhi.n	8008f36 <__lshift+0x6e>
 8008f4e:	ebac 0304 	sub.w	r3, ip, r4
 8008f52:	3b15      	subs	r3, #21
 8008f54:	f023 0303 	bic.w	r3, r3, #3
 8008f58:	3304      	adds	r3, #4
 8008f5a:	f104 0015 	add.w	r0, r4, #21
 8008f5e:	4584      	cmp	ip, r0
 8008f60:	bf38      	it	cc
 8008f62:	2304      	movcc	r3, #4
 8008f64:	50ca      	str	r2, [r1, r3]
 8008f66:	b10a      	cbz	r2, 8008f6c <__lshift+0xa4>
 8008f68:	f108 0602 	add.w	r6, r8, #2
 8008f6c:	3e01      	subs	r6, #1
 8008f6e:	4638      	mov	r0, r7
 8008f70:	612e      	str	r6, [r5, #16]
 8008f72:	4621      	mov	r1, r4
 8008f74:	f7ff fdd6 	bl	8008b24 <_Bfree>
 8008f78:	4628      	mov	r0, r5
 8008f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f82:	3301      	adds	r3, #1
 8008f84:	e7c5      	b.n	8008f12 <__lshift+0x4a>
 8008f86:	3904      	subs	r1, #4
 8008f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f90:	459c      	cmp	ip, r3
 8008f92:	d8f9      	bhi.n	8008f88 <__lshift+0xc0>
 8008f94:	e7ea      	b.n	8008f6c <__lshift+0xa4>
 8008f96:	bf00      	nop
 8008f98:	0800bf0f 	.word	0x0800bf0f
 8008f9c:	0800bf80 	.word	0x0800bf80

08008fa0 <__mcmp>:
 8008fa0:	b530      	push	{r4, r5, lr}
 8008fa2:	6902      	ldr	r2, [r0, #16]
 8008fa4:	690c      	ldr	r4, [r1, #16]
 8008fa6:	1b12      	subs	r2, r2, r4
 8008fa8:	d10e      	bne.n	8008fc8 <__mcmp+0x28>
 8008faa:	f100 0314 	add.w	r3, r0, #20
 8008fae:	3114      	adds	r1, #20
 8008fb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008fb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008fbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008fc0:	42a5      	cmp	r5, r4
 8008fc2:	d003      	beq.n	8008fcc <__mcmp+0x2c>
 8008fc4:	d305      	bcc.n	8008fd2 <__mcmp+0x32>
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4610      	mov	r0, r2
 8008fca:	bd30      	pop	{r4, r5, pc}
 8008fcc:	4283      	cmp	r3, r0
 8008fce:	d3f3      	bcc.n	8008fb8 <__mcmp+0x18>
 8008fd0:	e7fa      	b.n	8008fc8 <__mcmp+0x28>
 8008fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd6:	e7f7      	b.n	8008fc8 <__mcmp+0x28>

08008fd8 <__mdiff>:
 8008fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	460c      	mov	r4, r1
 8008fde:	4606      	mov	r6, r0
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	4617      	mov	r7, r2
 8008fe6:	f7ff ffdb 	bl	8008fa0 <__mcmp>
 8008fea:	1e05      	subs	r5, r0, #0
 8008fec:	d110      	bne.n	8009010 <__mdiff+0x38>
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7ff fd57 	bl	8008aa4 <_Balloc>
 8008ff6:	b930      	cbnz	r0, 8009006 <__mdiff+0x2e>
 8008ff8:	4b39      	ldr	r3, [pc, #228]	; (80090e0 <__mdiff+0x108>)
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	f240 2132 	movw	r1, #562	; 0x232
 8009000:	4838      	ldr	r0, [pc, #224]	; (80090e4 <__mdiff+0x10c>)
 8009002:	f000 fca3 	bl	800994c <__assert_func>
 8009006:	2301      	movs	r3, #1
 8009008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800900c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009010:	bfa4      	itt	ge
 8009012:	463b      	movge	r3, r7
 8009014:	4627      	movge	r7, r4
 8009016:	4630      	mov	r0, r6
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	bfa6      	itte	ge
 800901c:	461c      	movge	r4, r3
 800901e:	2500      	movge	r5, #0
 8009020:	2501      	movlt	r5, #1
 8009022:	f7ff fd3f 	bl	8008aa4 <_Balloc>
 8009026:	b920      	cbnz	r0, 8009032 <__mdiff+0x5a>
 8009028:	4b2d      	ldr	r3, [pc, #180]	; (80090e0 <__mdiff+0x108>)
 800902a:	4602      	mov	r2, r0
 800902c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009030:	e7e6      	b.n	8009000 <__mdiff+0x28>
 8009032:	693e      	ldr	r6, [r7, #16]
 8009034:	60c5      	str	r5, [r0, #12]
 8009036:	6925      	ldr	r5, [r4, #16]
 8009038:	f107 0114 	add.w	r1, r7, #20
 800903c:	f104 0914 	add.w	r9, r4, #20
 8009040:	f100 0e14 	add.w	lr, r0, #20
 8009044:	f107 0210 	add.w	r2, r7, #16
 8009048:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800904c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009050:	46f2      	mov	sl, lr
 8009052:	2700      	movs	r7, #0
 8009054:	f859 3b04 	ldr.w	r3, [r9], #4
 8009058:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800905c:	fa1f f883 	uxth.w	r8, r3
 8009060:	fa17 f78b 	uxtah	r7, r7, fp
 8009064:	0c1b      	lsrs	r3, r3, #16
 8009066:	eba7 0808 	sub.w	r8, r7, r8
 800906a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800906e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009072:	fa1f f888 	uxth.w	r8, r8
 8009076:	141f      	asrs	r7, r3, #16
 8009078:	454d      	cmp	r5, r9
 800907a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800907e:	f84a 3b04 	str.w	r3, [sl], #4
 8009082:	d8e7      	bhi.n	8009054 <__mdiff+0x7c>
 8009084:	1b2b      	subs	r3, r5, r4
 8009086:	3b15      	subs	r3, #21
 8009088:	f023 0303 	bic.w	r3, r3, #3
 800908c:	3304      	adds	r3, #4
 800908e:	3415      	adds	r4, #21
 8009090:	42a5      	cmp	r5, r4
 8009092:	bf38      	it	cc
 8009094:	2304      	movcc	r3, #4
 8009096:	4419      	add	r1, r3
 8009098:	4473      	add	r3, lr
 800909a:	469e      	mov	lr, r3
 800909c:	460d      	mov	r5, r1
 800909e:	4565      	cmp	r5, ip
 80090a0:	d30e      	bcc.n	80090c0 <__mdiff+0xe8>
 80090a2:	f10c 0203 	add.w	r2, ip, #3
 80090a6:	1a52      	subs	r2, r2, r1
 80090a8:	f022 0203 	bic.w	r2, r2, #3
 80090ac:	3903      	subs	r1, #3
 80090ae:	458c      	cmp	ip, r1
 80090b0:	bf38      	it	cc
 80090b2:	2200      	movcc	r2, #0
 80090b4:	441a      	add	r2, r3
 80090b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80090ba:	b17b      	cbz	r3, 80090dc <__mdiff+0x104>
 80090bc:	6106      	str	r6, [r0, #16]
 80090be:	e7a5      	b.n	800900c <__mdiff+0x34>
 80090c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80090c4:	fa17 f488 	uxtah	r4, r7, r8
 80090c8:	1422      	asrs	r2, r4, #16
 80090ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80090ce:	b2a4      	uxth	r4, r4
 80090d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80090d4:	f84e 4b04 	str.w	r4, [lr], #4
 80090d8:	1417      	asrs	r7, r2, #16
 80090da:	e7e0      	b.n	800909e <__mdiff+0xc6>
 80090dc:	3e01      	subs	r6, #1
 80090de:	e7ea      	b.n	80090b6 <__mdiff+0xde>
 80090e0:	0800bf0f 	.word	0x0800bf0f
 80090e4:	0800bf80 	.word	0x0800bf80

080090e8 <__d2b>:
 80090e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090ec:	4689      	mov	r9, r1
 80090ee:	2101      	movs	r1, #1
 80090f0:	ec57 6b10 	vmov	r6, r7, d0
 80090f4:	4690      	mov	r8, r2
 80090f6:	f7ff fcd5 	bl	8008aa4 <_Balloc>
 80090fa:	4604      	mov	r4, r0
 80090fc:	b930      	cbnz	r0, 800910c <__d2b+0x24>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b25      	ldr	r3, [pc, #148]	; (8009198 <__d2b+0xb0>)
 8009102:	4826      	ldr	r0, [pc, #152]	; (800919c <__d2b+0xb4>)
 8009104:	f240 310a 	movw	r1, #778	; 0x30a
 8009108:	f000 fc20 	bl	800994c <__assert_func>
 800910c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009114:	bb35      	cbnz	r5, 8009164 <__d2b+0x7c>
 8009116:	2e00      	cmp	r6, #0
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	d028      	beq.n	800916e <__d2b+0x86>
 800911c:	4668      	mov	r0, sp
 800911e:	9600      	str	r6, [sp, #0]
 8009120:	f7ff fd8c 	bl	8008c3c <__lo0bits>
 8009124:	9900      	ldr	r1, [sp, #0]
 8009126:	b300      	cbz	r0, 800916a <__d2b+0x82>
 8009128:	9a01      	ldr	r2, [sp, #4]
 800912a:	f1c0 0320 	rsb	r3, r0, #32
 800912e:	fa02 f303 	lsl.w	r3, r2, r3
 8009132:	430b      	orrs	r3, r1
 8009134:	40c2      	lsrs	r2, r0
 8009136:	6163      	str	r3, [r4, #20]
 8009138:	9201      	str	r2, [sp, #4]
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	61a3      	str	r3, [r4, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bf14      	ite	ne
 8009142:	2202      	movne	r2, #2
 8009144:	2201      	moveq	r2, #1
 8009146:	6122      	str	r2, [r4, #16]
 8009148:	b1d5      	cbz	r5, 8009180 <__d2b+0x98>
 800914a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800914e:	4405      	add	r5, r0
 8009150:	f8c9 5000 	str.w	r5, [r9]
 8009154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009158:	f8c8 0000 	str.w	r0, [r8]
 800915c:	4620      	mov	r0, r4
 800915e:	b003      	add	sp, #12
 8009160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009168:	e7d5      	b.n	8009116 <__d2b+0x2e>
 800916a:	6161      	str	r1, [r4, #20]
 800916c:	e7e5      	b.n	800913a <__d2b+0x52>
 800916e:	a801      	add	r0, sp, #4
 8009170:	f7ff fd64 	bl	8008c3c <__lo0bits>
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	6163      	str	r3, [r4, #20]
 8009178:	2201      	movs	r2, #1
 800917a:	6122      	str	r2, [r4, #16]
 800917c:	3020      	adds	r0, #32
 800917e:	e7e3      	b.n	8009148 <__d2b+0x60>
 8009180:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009184:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009188:	f8c9 0000 	str.w	r0, [r9]
 800918c:	6918      	ldr	r0, [r3, #16]
 800918e:	f7ff fd35 	bl	8008bfc <__hi0bits>
 8009192:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009196:	e7df      	b.n	8009158 <__d2b+0x70>
 8009198:	0800bf0f 	.word	0x0800bf0f
 800919c:	0800bf80 	.word	0x0800bf80

080091a0 <_calloc_r>:
 80091a0:	b513      	push	{r0, r1, r4, lr}
 80091a2:	434a      	muls	r2, r1
 80091a4:	4611      	mov	r1, r2
 80091a6:	9201      	str	r2, [sp, #4]
 80091a8:	f000 f85a 	bl	8009260 <_malloc_r>
 80091ac:	4604      	mov	r4, r0
 80091ae:	b118      	cbz	r0, 80091b8 <_calloc_r+0x18>
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	2100      	movs	r1, #0
 80091b4:	f7fd fde2 	bl	8006d7c <memset>
 80091b8:	4620      	mov	r0, r4
 80091ba:	b002      	add	sp, #8
 80091bc:	bd10      	pop	{r4, pc}
	...

080091c0 <_free_r>:
 80091c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091c2:	2900      	cmp	r1, #0
 80091c4:	d048      	beq.n	8009258 <_free_r+0x98>
 80091c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ca:	9001      	str	r0, [sp, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f1a1 0404 	sub.w	r4, r1, #4
 80091d2:	bfb8      	it	lt
 80091d4:	18e4      	addlt	r4, r4, r3
 80091d6:	f000 fc59 	bl	8009a8c <__malloc_lock>
 80091da:	4a20      	ldr	r2, [pc, #128]	; (800925c <_free_r+0x9c>)
 80091dc:	9801      	ldr	r0, [sp, #4]
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	4615      	mov	r5, r2
 80091e2:	b933      	cbnz	r3, 80091f2 <_free_r+0x32>
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6014      	str	r4, [r2, #0]
 80091e8:	b003      	add	sp, #12
 80091ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091ee:	f000 bc53 	b.w	8009a98 <__malloc_unlock>
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	d90b      	bls.n	800920e <_free_r+0x4e>
 80091f6:	6821      	ldr	r1, [r4, #0]
 80091f8:	1862      	adds	r2, r4, r1
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bf04      	itt	eq
 80091fe:	681a      	ldreq	r2, [r3, #0]
 8009200:	685b      	ldreq	r3, [r3, #4]
 8009202:	6063      	str	r3, [r4, #4]
 8009204:	bf04      	itt	eq
 8009206:	1852      	addeq	r2, r2, r1
 8009208:	6022      	streq	r2, [r4, #0]
 800920a:	602c      	str	r4, [r5, #0]
 800920c:	e7ec      	b.n	80091e8 <_free_r+0x28>
 800920e:	461a      	mov	r2, r3
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	b10b      	cbz	r3, 8009218 <_free_r+0x58>
 8009214:	42a3      	cmp	r3, r4
 8009216:	d9fa      	bls.n	800920e <_free_r+0x4e>
 8009218:	6811      	ldr	r1, [r2, #0]
 800921a:	1855      	adds	r5, r2, r1
 800921c:	42a5      	cmp	r5, r4
 800921e:	d10b      	bne.n	8009238 <_free_r+0x78>
 8009220:	6824      	ldr	r4, [r4, #0]
 8009222:	4421      	add	r1, r4
 8009224:	1854      	adds	r4, r2, r1
 8009226:	42a3      	cmp	r3, r4
 8009228:	6011      	str	r1, [r2, #0]
 800922a:	d1dd      	bne.n	80091e8 <_free_r+0x28>
 800922c:	681c      	ldr	r4, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	6053      	str	r3, [r2, #4]
 8009232:	4421      	add	r1, r4
 8009234:	6011      	str	r1, [r2, #0]
 8009236:	e7d7      	b.n	80091e8 <_free_r+0x28>
 8009238:	d902      	bls.n	8009240 <_free_r+0x80>
 800923a:	230c      	movs	r3, #12
 800923c:	6003      	str	r3, [r0, #0]
 800923e:	e7d3      	b.n	80091e8 <_free_r+0x28>
 8009240:	6825      	ldr	r5, [r4, #0]
 8009242:	1961      	adds	r1, r4, r5
 8009244:	428b      	cmp	r3, r1
 8009246:	bf04      	itt	eq
 8009248:	6819      	ldreq	r1, [r3, #0]
 800924a:	685b      	ldreq	r3, [r3, #4]
 800924c:	6063      	str	r3, [r4, #4]
 800924e:	bf04      	itt	eq
 8009250:	1949      	addeq	r1, r1, r5
 8009252:	6021      	streq	r1, [r4, #0]
 8009254:	6054      	str	r4, [r2, #4]
 8009256:	e7c7      	b.n	80091e8 <_free_r+0x28>
 8009258:	b003      	add	sp, #12
 800925a:	bd30      	pop	{r4, r5, pc}
 800925c:	20000218 	.word	0x20000218

08009260 <_malloc_r>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	1ccd      	adds	r5, r1, #3
 8009264:	f025 0503 	bic.w	r5, r5, #3
 8009268:	3508      	adds	r5, #8
 800926a:	2d0c      	cmp	r5, #12
 800926c:	bf38      	it	cc
 800926e:	250c      	movcc	r5, #12
 8009270:	2d00      	cmp	r5, #0
 8009272:	4606      	mov	r6, r0
 8009274:	db01      	blt.n	800927a <_malloc_r+0x1a>
 8009276:	42a9      	cmp	r1, r5
 8009278:	d903      	bls.n	8009282 <_malloc_r+0x22>
 800927a:	230c      	movs	r3, #12
 800927c:	6033      	str	r3, [r6, #0]
 800927e:	2000      	movs	r0, #0
 8009280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009282:	f000 fc03 	bl	8009a8c <__malloc_lock>
 8009286:	4921      	ldr	r1, [pc, #132]	; (800930c <_malloc_r+0xac>)
 8009288:	680a      	ldr	r2, [r1, #0]
 800928a:	4614      	mov	r4, r2
 800928c:	b99c      	cbnz	r4, 80092b6 <_malloc_r+0x56>
 800928e:	4f20      	ldr	r7, [pc, #128]	; (8009310 <_malloc_r+0xb0>)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	b923      	cbnz	r3, 800929e <_malloc_r+0x3e>
 8009294:	4621      	mov	r1, r4
 8009296:	4630      	mov	r0, r6
 8009298:	f000 faf2 	bl	8009880 <_sbrk_r>
 800929c:	6038      	str	r0, [r7, #0]
 800929e:	4629      	mov	r1, r5
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 faed 	bl	8009880 <_sbrk_r>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	d123      	bne.n	80092f2 <_malloc_r+0x92>
 80092aa:	230c      	movs	r3, #12
 80092ac:	6033      	str	r3, [r6, #0]
 80092ae:	4630      	mov	r0, r6
 80092b0:	f000 fbf2 	bl	8009a98 <__malloc_unlock>
 80092b4:	e7e3      	b.n	800927e <_malloc_r+0x1e>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	1b5b      	subs	r3, r3, r5
 80092ba:	d417      	bmi.n	80092ec <_malloc_r+0x8c>
 80092bc:	2b0b      	cmp	r3, #11
 80092be:	d903      	bls.n	80092c8 <_malloc_r+0x68>
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	441c      	add	r4, r3
 80092c4:	6025      	str	r5, [r4, #0]
 80092c6:	e004      	b.n	80092d2 <_malloc_r+0x72>
 80092c8:	6863      	ldr	r3, [r4, #4]
 80092ca:	42a2      	cmp	r2, r4
 80092cc:	bf0c      	ite	eq
 80092ce:	600b      	streq	r3, [r1, #0]
 80092d0:	6053      	strne	r3, [r2, #4]
 80092d2:	4630      	mov	r0, r6
 80092d4:	f000 fbe0 	bl	8009a98 <__malloc_unlock>
 80092d8:	f104 000b 	add.w	r0, r4, #11
 80092dc:	1d23      	adds	r3, r4, #4
 80092de:	f020 0007 	bic.w	r0, r0, #7
 80092e2:	1ac2      	subs	r2, r0, r3
 80092e4:	d0cc      	beq.n	8009280 <_malloc_r+0x20>
 80092e6:	1a1b      	subs	r3, r3, r0
 80092e8:	50a3      	str	r3, [r4, r2]
 80092ea:	e7c9      	b.n	8009280 <_malloc_r+0x20>
 80092ec:	4622      	mov	r2, r4
 80092ee:	6864      	ldr	r4, [r4, #4]
 80092f0:	e7cc      	b.n	800928c <_malloc_r+0x2c>
 80092f2:	1cc4      	adds	r4, r0, #3
 80092f4:	f024 0403 	bic.w	r4, r4, #3
 80092f8:	42a0      	cmp	r0, r4
 80092fa:	d0e3      	beq.n	80092c4 <_malloc_r+0x64>
 80092fc:	1a21      	subs	r1, r4, r0
 80092fe:	4630      	mov	r0, r6
 8009300:	f000 fabe 	bl	8009880 <_sbrk_r>
 8009304:	3001      	adds	r0, #1
 8009306:	d1dd      	bne.n	80092c4 <_malloc_r+0x64>
 8009308:	e7cf      	b.n	80092aa <_malloc_r+0x4a>
 800930a:	bf00      	nop
 800930c:	20000218 	.word	0x20000218
 8009310:	2000021c 	.word	0x2000021c

08009314 <__ssputs_r>:
 8009314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	688e      	ldr	r6, [r1, #8]
 800931a:	429e      	cmp	r6, r3
 800931c:	4682      	mov	sl, r0
 800931e:	460c      	mov	r4, r1
 8009320:	4690      	mov	r8, r2
 8009322:	461f      	mov	r7, r3
 8009324:	d838      	bhi.n	8009398 <__ssputs_r+0x84>
 8009326:	898a      	ldrh	r2, [r1, #12]
 8009328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800932c:	d032      	beq.n	8009394 <__ssputs_r+0x80>
 800932e:	6825      	ldr	r5, [r4, #0]
 8009330:	6909      	ldr	r1, [r1, #16]
 8009332:	eba5 0901 	sub.w	r9, r5, r1
 8009336:	6965      	ldr	r5, [r4, #20]
 8009338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800933c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009340:	3301      	adds	r3, #1
 8009342:	444b      	add	r3, r9
 8009344:	106d      	asrs	r5, r5, #1
 8009346:	429d      	cmp	r5, r3
 8009348:	bf38      	it	cc
 800934a:	461d      	movcc	r5, r3
 800934c:	0553      	lsls	r3, r2, #21
 800934e:	d531      	bpl.n	80093b4 <__ssputs_r+0xa0>
 8009350:	4629      	mov	r1, r5
 8009352:	f7ff ff85 	bl	8009260 <_malloc_r>
 8009356:	4606      	mov	r6, r0
 8009358:	b950      	cbnz	r0, 8009370 <__ssputs_r+0x5c>
 800935a:	230c      	movs	r3, #12
 800935c:	f8ca 3000 	str.w	r3, [sl]
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009370:	6921      	ldr	r1, [r4, #16]
 8009372:	464a      	mov	r2, r9
 8009374:	f7ff fb88 	bl	8008a88 <memcpy>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800937e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	6126      	str	r6, [r4, #16]
 8009386:	6165      	str	r5, [r4, #20]
 8009388:	444e      	add	r6, r9
 800938a:	eba5 0509 	sub.w	r5, r5, r9
 800938e:	6026      	str	r6, [r4, #0]
 8009390:	60a5      	str	r5, [r4, #8]
 8009392:	463e      	mov	r6, r7
 8009394:	42be      	cmp	r6, r7
 8009396:	d900      	bls.n	800939a <__ssputs_r+0x86>
 8009398:	463e      	mov	r6, r7
 800939a:	4632      	mov	r2, r6
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	4641      	mov	r1, r8
 80093a0:	f000 fb5a 	bl	8009a58 <memmove>
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	6822      	ldr	r2, [r4, #0]
 80093a8:	1b9b      	subs	r3, r3, r6
 80093aa:	4432      	add	r2, r6
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	6022      	str	r2, [r4, #0]
 80093b0:	2000      	movs	r0, #0
 80093b2:	e7db      	b.n	800936c <__ssputs_r+0x58>
 80093b4:	462a      	mov	r2, r5
 80093b6:	f000 fb75 	bl	8009aa4 <_realloc_r>
 80093ba:	4606      	mov	r6, r0
 80093bc:	2800      	cmp	r0, #0
 80093be:	d1e1      	bne.n	8009384 <__ssputs_r+0x70>
 80093c0:	6921      	ldr	r1, [r4, #16]
 80093c2:	4650      	mov	r0, sl
 80093c4:	f7ff fefc 	bl	80091c0 <_free_r>
 80093c8:	e7c7      	b.n	800935a <__ssputs_r+0x46>
	...

080093cc <_svfiprintf_r>:
 80093cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	4698      	mov	r8, r3
 80093d2:	898b      	ldrh	r3, [r1, #12]
 80093d4:	061b      	lsls	r3, r3, #24
 80093d6:	b09d      	sub	sp, #116	; 0x74
 80093d8:	4607      	mov	r7, r0
 80093da:	460d      	mov	r5, r1
 80093dc:	4614      	mov	r4, r2
 80093de:	d50e      	bpl.n	80093fe <_svfiprintf_r+0x32>
 80093e0:	690b      	ldr	r3, [r1, #16]
 80093e2:	b963      	cbnz	r3, 80093fe <_svfiprintf_r+0x32>
 80093e4:	2140      	movs	r1, #64	; 0x40
 80093e6:	f7ff ff3b 	bl	8009260 <_malloc_r>
 80093ea:	6028      	str	r0, [r5, #0]
 80093ec:	6128      	str	r0, [r5, #16]
 80093ee:	b920      	cbnz	r0, 80093fa <_svfiprintf_r+0x2e>
 80093f0:	230c      	movs	r3, #12
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	e0d1      	b.n	800959e <_svfiprintf_r+0x1d2>
 80093fa:	2340      	movs	r3, #64	; 0x40
 80093fc:	616b      	str	r3, [r5, #20]
 80093fe:	2300      	movs	r3, #0
 8009400:	9309      	str	r3, [sp, #36]	; 0x24
 8009402:	2320      	movs	r3, #32
 8009404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009408:	f8cd 800c 	str.w	r8, [sp, #12]
 800940c:	2330      	movs	r3, #48	; 0x30
 800940e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095b8 <_svfiprintf_r+0x1ec>
 8009412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009416:	f04f 0901 	mov.w	r9, #1
 800941a:	4623      	mov	r3, r4
 800941c:	469a      	mov	sl, r3
 800941e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009422:	b10a      	cbz	r2, 8009428 <_svfiprintf_r+0x5c>
 8009424:	2a25      	cmp	r2, #37	; 0x25
 8009426:	d1f9      	bne.n	800941c <_svfiprintf_r+0x50>
 8009428:	ebba 0b04 	subs.w	fp, sl, r4
 800942c:	d00b      	beq.n	8009446 <_svfiprintf_r+0x7a>
 800942e:	465b      	mov	r3, fp
 8009430:	4622      	mov	r2, r4
 8009432:	4629      	mov	r1, r5
 8009434:	4638      	mov	r0, r7
 8009436:	f7ff ff6d 	bl	8009314 <__ssputs_r>
 800943a:	3001      	adds	r0, #1
 800943c:	f000 80aa 	beq.w	8009594 <_svfiprintf_r+0x1c8>
 8009440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009442:	445a      	add	r2, fp
 8009444:	9209      	str	r2, [sp, #36]	; 0x24
 8009446:	f89a 3000 	ldrb.w	r3, [sl]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80a2 	beq.w	8009594 <_svfiprintf_r+0x1c8>
 8009450:	2300      	movs	r3, #0
 8009452:	f04f 32ff 	mov.w	r2, #4294967295
 8009456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800945a:	f10a 0a01 	add.w	sl, sl, #1
 800945e:	9304      	str	r3, [sp, #16]
 8009460:	9307      	str	r3, [sp, #28]
 8009462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009466:	931a      	str	r3, [sp, #104]	; 0x68
 8009468:	4654      	mov	r4, sl
 800946a:	2205      	movs	r2, #5
 800946c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009470:	4851      	ldr	r0, [pc, #324]	; (80095b8 <_svfiprintf_r+0x1ec>)
 8009472:	f7f6 fed5 	bl	8000220 <memchr>
 8009476:	9a04      	ldr	r2, [sp, #16]
 8009478:	b9d8      	cbnz	r0, 80094b2 <_svfiprintf_r+0xe6>
 800947a:	06d0      	lsls	r0, r2, #27
 800947c:	bf44      	itt	mi
 800947e:	2320      	movmi	r3, #32
 8009480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009484:	0711      	lsls	r1, r2, #28
 8009486:	bf44      	itt	mi
 8009488:	232b      	movmi	r3, #43	; 0x2b
 800948a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800948e:	f89a 3000 	ldrb.w	r3, [sl]
 8009492:	2b2a      	cmp	r3, #42	; 0x2a
 8009494:	d015      	beq.n	80094c2 <_svfiprintf_r+0xf6>
 8009496:	9a07      	ldr	r2, [sp, #28]
 8009498:	4654      	mov	r4, sl
 800949a:	2000      	movs	r0, #0
 800949c:	f04f 0c0a 	mov.w	ip, #10
 80094a0:	4621      	mov	r1, r4
 80094a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094a6:	3b30      	subs	r3, #48	; 0x30
 80094a8:	2b09      	cmp	r3, #9
 80094aa:	d94e      	bls.n	800954a <_svfiprintf_r+0x17e>
 80094ac:	b1b0      	cbz	r0, 80094dc <_svfiprintf_r+0x110>
 80094ae:	9207      	str	r2, [sp, #28]
 80094b0:	e014      	b.n	80094dc <_svfiprintf_r+0x110>
 80094b2:	eba0 0308 	sub.w	r3, r0, r8
 80094b6:	fa09 f303 	lsl.w	r3, r9, r3
 80094ba:	4313      	orrs	r3, r2
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	46a2      	mov	sl, r4
 80094c0:	e7d2      	b.n	8009468 <_svfiprintf_r+0x9c>
 80094c2:	9b03      	ldr	r3, [sp, #12]
 80094c4:	1d19      	adds	r1, r3, #4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	9103      	str	r1, [sp, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	bfbb      	ittet	lt
 80094ce:	425b      	neglt	r3, r3
 80094d0:	f042 0202 	orrlt.w	r2, r2, #2
 80094d4:	9307      	strge	r3, [sp, #28]
 80094d6:	9307      	strlt	r3, [sp, #28]
 80094d8:	bfb8      	it	lt
 80094da:	9204      	strlt	r2, [sp, #16]
 80094dc:	7823      	ldrb	r3, [r4, #0]
 80094de:	2b2e      	cmp	r3, #46	; 0x2e
 80094e0:	d10c      	bne.n	80094fc <_svfiprintf_r+0x130>
 80094e2:	7863      	ldrb	r3, [r4, #1]
 80094e4:	2b2a      	cmp	r3, #42	; 0x2a
 80094e6:	d135      	bne.n	8009554 <_svfiprintf_r+0x188>
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	1d1a      	adds	r2, r3, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	9203      	str	r2, [sp, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bfb8      	it	lt
 80094f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094f8:	3402      	adds	r4, #2
 80094fa:	9305      	str	r3, [sp, #20]
 80094fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095c8 <_svfiprintf_r+0x1fc>
 8009500:	7821      	ldrb	r1, [r4, #0]
 8009502:	2203      	movs	r2, #3
 8009504:	4650      	mov	r0, sl
 8009506:	f7f6 fe8b 	bl	8000220 <memchr>
 800950a:	b140      	cbz	r0, 800951e <_svfiprintf_r+0x152>
 800950c:	2340      	movs	r3, #64	; 0x40
 800950e:	eba0 000a 	sub.w	r0, r0, sl
 8009512:	fa03 f000 	lsl.w	r0, r3, r0
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	4303      	orrs	r3, r0
 800951a:	3401      	adds	r4, #1
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009522:	4826      	ldr	r0, [pc, #152]	; (80095bc <_svfiprintf_r+0x1f0>)
 8009524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009528:	2206      	movs	r2, #6
 800952a:	f7f6 fe79 	bl	8000220 <memchr>
 800952e:	2800      	cmp	r0, #0
 8009530:	d038      	beq.n	80095a4 <_svfiprintf_r+0x1d8>
 8009532:	4b23      	ldr	r3, [pc, #140]	; (80095c0 <_svfiprintf_r+0x1f4>)
 8009534:	bb1b      	cbnz	r3, 800957e <_svfiprintf_r+0x1b2>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	3307      	adds	r3, #7
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	3308      	adds	r3, #8
 8009540:	9303      	str	r3, [sp, #12]
 8009542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009544:	4433      	add	r3, r6
 8009546:	9309      	str	r3, [sp, #36]	; 0x24
 8009548:	e767      	b.n	800941a <_svfiprintf_r+0x4e>
 800954a:	fb0c 3202 	mla	r2, ip, r2, r3
 800954e:	460c      	mov	r4, r1
 8009550:	2001      	movs	r0, #1
 8009552:	e7a5      	b.n	80094a0 <_svfiprintf_r+0xd4>
 8009554:	2300      	movs	r3, #0
 8009556:	3401      	adds	r4, #1
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	4619      	mov	r1, r3
 800955c:	f04f 0c0a 	mov.w	ip, #10
 8009560:	4620      	mov	r0, r4
 8009562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009566:	3a30      	subs	r2, #48	; 0x30
 8009568:	2a09      	cmp	r2, #9
 800956a:	d903      	bls.n	8009574 <_svfiprintf_r+0x1a8>
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0c5      	beq.n	80094fc <_svfiprintf_r+0x130>
 8009570:	9105      	str	r1, [sp, #20]
 8009572:	e7c3      	b.n	80094fc <_svfiprintf_r+0x130>
 8009574:	fb0c 2101 	mla	r1, ip, r1, r2
 8009578:	4604      	mov	r4, r0
 800957a:	2301      	movs	r3, #1
 800957c:	e7f0      	b.n	8009560 <_svfiprintf_r+0x194>
 800957e:	ab03      	add	r3, sp, #12
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	462a      	mov	r2, r5
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <_svfiprintf_r+0x1f8>)
 8009586:	a904      	add	r1, sp, #16
 8009588:	4638      	mov	r0, r7
 800958a:	f7fd fc9f 	bl	8006ecc <_printf_float>
 800958e:	1c42      	adds	r2, r0, #1
 8009590:	4606      	mov	r6, r0
 8009592:	d1d6      	bne.n	8009542 <_svfiprintf_r+0x176>
 8009594:	89ab      	ldrh	r3, [r5, #12]
 8009596:	065b      	lsls	r3, r3, #25
 8009598:	f53f af2c 	bmi.w	80093f4 <_svfiprintf_r+0x28>
 800959c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959e:	b01d      	add	sp, #116	; 0x74
 80095a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a4:	ab03      	add	r3, sp, #12
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	462a      	mov	r2, r5
 80095aa:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <_svfiprintf_r+0x1f8>)
 80095ac:	a904      	add	r1, sp, #16
 80095ae:	4638      	mov	r0, r7
 80095b0:	f7fd ff30 	bl	8007414 <_printf_i>
 80095b4:	e7eb      	b.n	800958e <_svfiprintf_r+0x1c2>
 80095b6:	bf00      	nop
 80095b8:	0800c0dc 	.word	0x0800c0dc
 80095bc:	0800c0e6 	.word	0x0800c0e6
 80095c0:	08006ecd 	.word	0x08006ecd
 80095c4:	08009315 	.word	0x08009315
 80095c8:	0800c0e2 	.word	0x0800c0e2

080095cc <__sfputc_r>:
 80095cc:	6893      	ldr	r3, [r2, #8]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	b410      	push	{r4}
 80095d4:	6093      	str	r3, [r2, #8]
 80095d6:	da08      	bge.n	80095ea <__sfputc_r+0x1e>
 80095d8:	6994      	ldr	r4, [r2, #24]
 80095da:	42a3      	cmp	r3, r4
 80095dc:	db01      	blt.n	80095e2 <__sfputc_r+0x16>
 80095de:	290a      	cmp	r1, #10
 80095e0:	d103      	bne.n	80095ea <__sfputc_r+0x1e>
 80095e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e6:	f7fe b8e9 	b.w	80077bc <__swbuf_r>
 80095ea:	6813      	ldr	r3, [r2, #0]
 80095ec:	1c58      	adds	r0, r3, #1
 80095ee:	6010      	str	r0, [r2, #0]
 80095f0:	7019      	strb	r1, [r3, #0]
 80095f2:	4608      	mov	r0, r1
 80095f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <__sfputs_r>:
 80095fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fc:	4606      	mov	r6, r0
 80095fe:	460f      	mov	r7, r1
 8009600:	4614      	mov	r4, r2
 8009602:	18d5      	adds	r5, r2, r3
 8009604:	42ac      	cmp	r4, r5
 8009606:	d101      	bne.n	800960c <__sfputs_r+0x12>
 8009608:	2000      	movs	r0, #0
 800960a:	e007      	b.n	800961c <__sfputs_r+0x22>
 800960c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009610:	463a      	mov	r2, r7
 8009612:	4630      	mov	r0, r6
 8009614:	f7ff ffda 	bl	80095cc <__sfputc_r>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d1f3      	bne.n	8009604 <__sfputs_r+0xa>
 800961c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009620 <_vfiprintf_r>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	460d      	mov	r5, r1
 8009626:	b09d      	sub	sp, #116	; 0x74
 8009628:	4614      	mov	r4, r2
 800962a:	4698      	mov	r8, r3
 800962c:	4606      	mov	r6, r0
 800962e:	b118      	cbz	r0, 8009638 <_vfiprintf_r+0x18>
 8009630:	6983      	ldr	r3, [r0, #24]
 8009632:	b90b      	cbnz	r3, 8009638 <_vfiprintf_r+0x18>
 8009634:	f7ff f916 	bl	8008864 <__sinit>
 8009638:	4b89      	ldr	r3, [pc, #548]	; (8009860 <_vfiprintf_r+0x240>)
 800963a:	429d      	cmp	r5, r3
 800963c:	d11b      	bne.n	8009676 <_vfiprintf_r+0x56>
 800963e:	6875      	ldr	r5, [r6, #4]
 8009640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009642:	07d9      	lsls	r1, r3, #31
 8009644:	d405      	bmi.n	8009652 <_vfiprintf_r+0x32>
 8009646:	89ab      	ldrh	r3, [r5, #12]
 8009648:	059a      	lsls	r2, r3, #22
 800964a:	d402      	bmi.n	8009652 <_vfiprintf_r+0x32>
 800964c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800964e:	f7ff f9ac 	bl	80089aa <__retarget_lock_acquire_recursive>
 8009652:	89ab      	ldrh	r3, [r5, #12]
 8009654:	071b      	lsls	r3, r3, #28
 8009656:	d501      	bpl.n	800965c <_vfiprintf_r+0x3c>
 8009658:	692b      	ldr	r3, [r5, #16]
 800965a:	b9eb      	cbnz	r3, 8009698 <_vfiprintf_r+0x78>
 800965c:	4629      	mov	r1, r5
 800965e:	4630      	mov	r0, r6
 8009660:	f7fe f8fe 	bl	8007860 <__swsetup_r>
 8009664:	b1c0      	cbz	r0, 8009698 <_vfiprintf_r+0x78>
 8009666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009668:	07dc      	lsls	r4, r3, #31
 800966a:	d50e      	bpl.n	800968a <_vfiprintf_r+0x6a>
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	b01d      	add	sp, #116	; 0x74
 8009672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009676:	4b7b      	ldr	r3, [pc, #492]	; (8009864 <_vfiprintf_r+0x244>)
 8009678:	429d      	cmp	r5, r3
 800967a:	d101      	bne.n	8009680 <_vfiprintf_r+0x60>
 800967c:	68b5      	ldr	r5, [r6, #8]
 800967e:	e7df      	b.n	8009640 <_vfiprintf_r+0x20>
 8009680:	4b79      	ldr	r3, [pc, #484]	; (8009868 <_vfiprintf_r+0x248>)
 8009682:	429d      	cmp	r5, r3
 8009684:	bf08      	it	eq
 8009686:	68f5      	ldreq	r5, [r6, #12]
 8009688:	e7da      	b.n	8009640 <_vfiprintf_r+0x20>
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	0598      	lsls	r0, r3, #22
 800968e:	d4ed      	bmi.n	800966c <_vfiprintf_r+0x4c>
 8009690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009692:	f7ff f98b 	bl	80089ac <__retarget_lock_release_recursive>
 8009696:	e7e9      	b.n	800966c <_vfiprintf_r+0x4c>
 8009698:	2300      	movs	r3, #0
 800969a:	9309      	str	r3, [sp, #36]	; 0x24
 800969c:	2320      	movs	r3, #32
 800969e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096a6:	2330      	movs	r3, #48	; 0x30
 80096a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800986c <_vfiprintf_r+0x24c>
 80096ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096b0:	f04f 0901 	mov.w	r9, #1
 80096b4:	4623      	mov	r3, r4
 80096b6:	469a      	mov	sl, r3
 80096b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096bc:	b10a      	cbz	r2, 80096c2 <_vfiprintf_r+0xa2>
 80096be:	2a25      	cmp	r2, #37	; 0x25
 80096c0:	d1f9      	bne.n	80096b6 <_vfiprintf_r+0x96>
 80096c2:	ebba 0b04 	subs.w	fp, sl, r4
 80096c6:	d00b      	beq.n	80096e0 <_vfiprintf_r+0xc0>
 80096c8:	465b      	mov	r3, fp
 80096ca:	4622      	mov	r2, r4
 80096cc:	4629      	mov	r1, r5
 80096ce:	4630      	mov	r0, r6
 80096d0:	f7ff ff93 	bl	80095fa <__sfputs_r>
 80096d4:	3001      	adds	r0, #1
 80096d6:	f000 80aa 	beq.w	800982e <_vfiprintf_r+0x20e>
 80096da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096dc:	445a      	add	r2, fp
 80096de:	9209      	str	r2, [sp, #36]	; 0x24
 80096e0:	f89a 3000 	ldrb.w	r3, [sl]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80a2 	beq.w	800982e <_vfiprintf_r+0x20e>
 80096ea:	2300      	movs	r3, #0
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f4:	f10a 0a01 	add.w	sl, sl, #1
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	9307      	str	r3, [sp, #28]
 80096fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009700:	931a      	str	r3, [sp, #104]	; 0x68
 8009702:	4654      	mov	r4, sl
 8009704:	2205      	movs	r2, #5
 8009706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970a:	4858      	ldr	r0, [pc, #352]	; (800986c <_vfiprintf_r+0x24c>)
 800970c:	f7f6 fd88 	bl	8000220 <memchr>
 8009710:	9a04      	ldr	r2, [sp, #16]
 8009712:	b9d8      	cbnz	r0, 800974c <_vfiprintf_r+0x12c>
 8009714:	06d1      	lsls	r1, r2, #27
 8009716:	bf44      	itt	mi
 8009718:	2320      	movmi	r3, #32
 800971a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800971e:	0713      	lsls	r3, r2, #28
 8009720:	bf44      	itt	mi
 8009722:	232b      	movmi	r3, #43	; 0x2b
 8009724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009728:	f89a 3000 	ldrb.w	r3, [sl]
 800972c:	2b2a      	cmp	r3, #42	; 0x2a
 800972e:	d015      	beq.n	800975c <_vfiprintf_r+0x13c>
 8009730:	9a07      	ldr	r2, [sp, #28]
 8009732:	4654      	mov	r4, sl
 8009734:	2000      	movs	r0, #0
 8009736:	f04f 0c0a 	mov.w	ip, #10
 800973a:	4621      	mov	r1, r4
 800973c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009740:	3b30      	subs	r3, #48	; 0x30
 8009742:	2b09      	cmp	r3, #9
 8009744:	d94e      	bls.n	80097e4 <_vfiprintf_r+0x1c4>
 8009746:	b1b0      	cbz	r0, 8009776 <_vfiprintf_r+0x156>
 8009748:	9207      	str	r2, [sp, #28]
 800974a:	e014      	b.n	8009776 <_vfiprintf_r+0x156>
 800974c:	eba0 0308 	sub.w	r3, r0, r8
 8009750:	fa09 f303 	lsl.w	r3, r9, r3
 8009754:	4313      	orrs	r3, r2
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	46a2      	mov	sl, r4
 800975a:	e7d2      	b.n	8009702 <_vfiprintf_r+0xe2>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	1d19      	adds	r1, r3, #4
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	9103      	str	r1, [sp, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	bfbb      	ittet	lt
 8009768:	425b      	neglt	r3, r3
 800976a:	f042 0202 	orrlt.w	r2, r2, #2
 800976e:	9307      	strge	r3, [sp, #28]
 8009770:	9307      	strlt	r3, [sp, #28]
 8009772:	bfb8      	it	lt
 8009774:	9204      	strlt	r2, [sp, #16]
 8009776:	7823      	ldrb	r3, [r4, #0]
 8009778:	2b2e      	cmp	r3, #46	; 0x2e
 800977a:	d10c      	bne.n	8009796 <_vfiprintf_r+0x176>
 800977c:	7863      	ldrb	r3, [r4, #1]
 800977e:	2b2a      	cmp	r3, #42	; 0x2a
 8009780:	d135      	bne.n	80097ee <_vfiprintf_r+0x1ce>
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	1d1a      	adds	r2, r3, #4
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	9203      	str	r2, [sp, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	bfb8      	it	lt
 800978e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009792:	3402      	adds	r4, #2
 8009794:	9305      	str	r3, [sp, #20]
 8009796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800987c <_vfiprintf_r+0x25c>
 800979a:	7821      	ldrb	r1, [r4, #0]
 800979c:	2203      	movs	r2, #3
 800979e:	4650      	mov	r0, sl
 80097a0:	f7f6 fd3e 	bl	8000220 <memchr>
 80097a4:	b140      	cbz	r0, 80097b8 <_vfiprintf_r+0x198>
 80097a6:	2340      	movs	r3, #64	; 0x40
 80097a8:	eba0 000a 	sub.w	r0, r0, sl
 80097ac:	fa03 f000 	lsl.w	r0, r3, r0
 80097b0:	9b04      	ldr	r3, [sp, #16]
 80097b2:	4303      	orrs	r3, r0
 80097b4:	3401      	adds	r4, #1
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097bc:	482c      	ldr	r0, [pc, #176]	; (8009870 <_vfiprintf_r+0x250>)
 80097be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c2:	2206      	movs	r2, #6
 80097c4:	f7f6 fd2c 	bl	8000220 <memchr>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d03f      	beq.n	800984c <_vfiprintf_r+0x22c>
 80097cc:	4b29      	ldr	r3, [pc, #164]	; (8009874 <_vfiprintf_r+0x254>)
 80097ce:	bb1b      	cbnz	r3, 8009818 <_vfiprintf_r+0x1f8>
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	3307      	adds	r3, #7
 80097d4:	f023 0307 	bic.w	r3, r3, #7
 80097d8:	3308      	adds	r3, #8
 80097da:	9303      	str	r3, [sp, #12]
 80097dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097de:	443b      	add	r3, r7
 80097e0:	9309      	str	r3, [sp, #36]	; 0x24
 80097e2:	e767      	b.n	80096b4 <_vfiprintf_r+0x94>
 80097e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097e8:	460c      	mov	r4, r1
 80097ea:	2001      	movs	r0, #1
 80097ec:	e7a5      	b.n	800973a <_vfiprintf_r+0x11a>
 80097ee:	2300      	movs	r3, #0
 80097f0:	3401      	adds	r4, #1
 80097f2:	9305      	str	r3, [sp, #20]
 80097f4:	4619      	mov	r1, r3
 80097f6:	f04f 0c0a 	mov.w	ip, #10
 80097fa:	4620      	mov	r0, r4
 80097fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009800:	3a30      	subs	r2, #48	; 0x30
 8009802:	2a09      	cmp	r2, #9
 8009804:	d903      	bls.n	800980e <_vfiprintf_r+0x1ee>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0c5      	beq.n	8009796 <_vfiprintf_r+0x176>
 800980a:	9105      	str	r1, [sp, #20]
 800980c:	e7c3      	b.n	8009796 <_vfiprintf_r+0x176>
 800980e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009812:	4604      	mov	r4, r0
 8009814:	2301      	movs	r3, #1
 8009816:	e7f0      	b.n	80097fa <_vfiprintf_r+0x1da>
 8009818:	ab03      	add	r3, sp, #12
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	462a      	mov	r2, r5
 800981e:	4b16      	ldr	r3, [pc, #88]	; (8009878 <_vfiprintf_r+0x258>)
 8009820:	a904      	add	r1, sp, #16
 8009822:	4630      	mov	r0, r6
 8009824:	f7fd fb52 	bl	8006ecc <_printf_float>
 8009828:	4607      	mov	r7, r0
 800982a:	1c78      	adds	r0, r7, #1
 800982c:	d1d6      	bne.n	80097dc <_vfiprintf_r+0x1bc>
 800982e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009830:	07d9      	lsls	r1, r3, #31
 8009832:	d405      	bmi.n	8009840 <_vfiprintf_r+0x220>
 8009834:	89ab      	ldrh	r3, [r5, #12]
 8009836:	059a      	lsls	r2, r3, #22
 8009838:	d402      	bmi.n	8009840 <_vfiprintf_r+0x220>
 800983a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800983c:	f7ff f8b6 	bl	80089ac <__retarget_lock_release_recursive>
 8009840:	89ab      	ldrh	r3, [r5, #12]
 8009842:	065b      	lsls	r3, r3, #25
 8009844:	f53f af12 	bmi.w	800966c <_vfiprintf_r+0x4c>
 8009848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800984a:	e711      	b.n	8009670 <_vfiprintf_r+0x50>
 800984c:	ab03      	add	r3, sp, #12
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	462a      	mov	r2, r5
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <_vfiprintf_r+0x258>)
 8009854:	a904      	add	r1, sp, #16
 8009856:	4630      	mov	r0, r6
 8009858:	f7fd fddc 	bl	8007414 <_printf_i>
 800985c:	e7e4      	b.n	8009828 <_vfiprintf_r+0x208>
 800985e:	bf00      	nop
 8009860:	0800bf40 	.word	0x0800bf40
 8009864:	0800bf60 	.word	0x0800bf60
 8009868:	0800bf20 	.word	0x0800bf20
 800986c:	0800c0dc 	.word	0x0800c0dc
 8009870:	0800c0e6 	.word	0x0800c0e6
 8009874:	08006ecd 	.word	0x08006ecd
 8009878:	080095fb 	.word	0x080095fb
 800987c:	0800c0e2 	.word	0x0800c0e2

08009880 <_sbrk_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d06      	ldr	r5, [pc, #24]	; (800989c <_sbrk_r+0x1c>)
 8009884:	2300      	movs	r3, #0
 8009886:	4604      	mov	r4, r0
 8009888:	4608      	mov	r0, r1
 800988a:	602b      	str	r3, [r5, #0]
 800988c:	f7f9 ff60 	bl	8003750 <_sbrk>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_sbrk_r+0x1a>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_sbrk_r+0x1a>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	200003c8 	.word	0x200003c8

080098a0 <__sread>:
 80098a0:	b510      	push	{r4, lr}
 80098a2:	460c      	mov	r4, r1
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	f000 f922 	bl	8009af0 <_read_r>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	bfab      	itete	ge
 80098b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098b2:	89a3      	ldrhlt	r3, [r4, #12]
 80098b4:	181b      	addge	r3, r3, r0
 80098b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098ba:	bfac      	ite	ge
 80098bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80098be:	81a3      	strhlt	r3, [r4, #12]
 80098c0:	bd10      	pop	{r4, pc}

080098c2 <__swrite>:
 80098c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c6:	461f      	mov	r7, r3
 80098c8:	898b      	ldrh	r3, [r1, #12]
 80098ca:	05db      	lsls	r3, r3, #23
 80098cc:	4605      	mov	r5, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	4616      	mov	r6, r2
 80098d2:	d505      	bpl.n	80098e0 <__swrite+0x1e>
 80098d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d8:	2302      	movs	r3, #2
 80098da:	2200      	movs	r2, #0
 80098dc:	f000 f898 	bl	8009a10 <_lseek_r>
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ea:	81a3      	strh	r3, [r4, #12]
 80098ec:	4632      	mov	r2, r6
 80098ee:	463b      	mov	r3, r7
 80098f0:	4628      	mov	r0, r5
 80098f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098f6:	f000 b817 	b.w	8009928 <_write_r>

080098fa <__sseek>:
 80098fa:	b510      	push	{r4, lr}
 80098fc:	460c      	mov	r4, r1
 80098fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009902:	f000 f885 	bl	8009a10 <_lseek_r>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	bf15      	itete	ne
 800990c:	6560      	strne	r0, [r4, #84]	; 0x54
 800990e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009916:	81a3      	strheq	r3, [r4, #12]
 8009918:	bf18      	it	ne
 800991a:	81a3      	strhne	r3, [r4, #12]
 800991c:	bd10      	pop	{r4, pc}

0800991e <__sclose>:
 800991e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009922:	f000 b831 	b.w	8009988 <_close_r>
	...

08009928 <_write_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d07      	ldr	r5, [pc, #28]	; (8009948 <_write_r+0x20>)
 800992c:	4604      	mov	r4, r0
 800992e:	4608      	mov	r0, r1
 8009930:	4611      	mov	r1, r2
 8009932:	2200      	movs	r2, #0
 8009934:	602a      	str	r2, [r5, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	f7f9 feb9 	bl	80036ae <_write>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d102      	bne.n	8009946 <_write_r+0x1e>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	b103      	cbz	r3, 8009946 <_write_r+0x1e>
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	200003c8 	.word	0x200003c8

0800994c <__assert_func>:
 800994c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800994e:	4614      	mov	r4, r2
 8009950:	461a      	mov	r2, r3
 8009952:	4b09      	ldr	r3, [pc, #36]	; (8009978 <__assert_func+0x2c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4605      	mov	r5, r0
 8009958:	68d8      	ldr	r0, [r3, #12]
 800995a:	b14c      	cbz	r4, 8009970 <__assert_func+0x24>
 800995c:	4b07      	ldr	r3, [pc, #28]	; (800997c <__assert_func+0x30>)
 800995e:	9100      	str	r1, [sp, #0]
 8009960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009964:	4906      	ldr	r1, [pc, #24]	; (8009980 <__assert_func+0x34>)
 8009966:	462b      	mov	r3, r5
 8009968:	f000 f81e 	bl	80099a8 <fiprintf>
 800996c:	f000 f8df 	bl	8009b2e <abort>
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <__assert_func+0x38>)
 8009972:	461c      	mov	r4, r3
 8009974:	e7f3      	b.n	800995e <__assert_func+0x12>
 8009976:	bf00      	nop
 8009978:	20000014 	.word	0x20000014
 800997c:	0800c0ed 	.word	0x0800c0ed
 8009980:	0800c0fa 	.word	0x0800c0fa
 8009984:	0800c128 	.word	0x0800c128

08009988 <_close_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d06      	ldr	r5, [pc, #24]	; (80099a4 <_close_r+0x1c>)
 800998c:	2300      	movs	r3, #0
 800998e:	4604      	mov	r4, r0
 8009990:	4608      	mov	r0, r1
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	f7f9 fea7 	bl	80036e6 <_close>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_close_r+0x1a>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_close_r+0x1a>
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	200003c8 	.word	0x200003c8

080099a8 <fiprintf>:
 80099a8:	b40e      	push	{r1, r2, r3}
 80099aa:	b503      	push	{r0, r1, lr}
 80099ac:	4601      	mov	r1, r0
 80099ae:	ab03      	add	r3, sp, #12
 80099b0:	4805      	ldr	r0, [pc, #20]	; (80099c8 <fiprintf+0x20>)
 80099b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b6:	6800      	ldr	r0, [r0, #0]
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	f7ff fe31 	bl	8009620 <_vfiprintf_r>
 80099be:	b002      	add	sp, #8
 80099c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c4:	b003      	add	sp, #12
 80099c6:	4770      	bx	lr
 80099c8:	20000014 	.word	0x20000014

080099cc <_fstat_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d07      	ldr	r5, [pc, #28]	; (80099ec <_fstat_r+0x20>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	4611      	mov	r1, r2
 80099d8:	602b      	str	r3, [r5, #0]
 80099da:	f7f9 fe90 	bl	80036fe <_fstat>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	d102      	bne.n	80099e8 <_fstat_r+0x1c>
 80099e2:	682b      	ldr	r3, [r5, #0]
 80099e4:	b103      	cbz	r3, 80099e8 <_fstat_r+0x1c>
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	bd38      	pop	{r3, r4, r5, pc}
 80099ea:	bf00      	nop
 80099ec:	200003c8 	.word	0x200003c8

080099f0 <_isatty_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d06      	ldr	r5, [pc, #24]	; (8009a0c <_isatty_r+0x1c>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	602b      	str	r3, [r5, #0]
 80099fc:	f7f9 fe8f 	bl	800371e <_isatty>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_isatty_r+0x1a>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_isatty_r+0x1a>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	200003c8 	.word	0x200003c8

08009a10 <_lseek_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d07      	ldr	r5, [pc, #28]	; (8009a30 <_lseek_r+0x20>)
 8009a14:	4604      	mov	r4, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	602a      	str	r2, [r5, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f7f9 fe88 	bl	8003734 <_lseek>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_lseek_r+0x1e>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_lseek_r+0x1e>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	200003c8 	.word	0x200003c8

08009a34 <__ascii_mbtowc>:
 8009a34:	b082      	sub	sp, #8
 8009a36:	b901      	cbnz	r1, 8009a3a <__ascii_mbtowc+0x6>
 8009a38:	a901      	add	r1, sp, #4
 8009a3a:	b142      	cbz	r2, 8009a4e <__ascii_mbtowc+0x1a>
 8009a3c:	b14b      	cbz	r3, 8009a52 <__ascii_mbtowc+0x1e>
 8009a3e:	7813      	ldrb	r3, [r2, #0]
 8009a40:	600b      	str	r3, [r1, #0]
 8009a42:	7812      	ldrb	r2, [r2, #0]
 8009a44:	1e10      	subs	r0, r2, #0
 8009a46:	bf18      	it	ne
 8009a48:	2001      	movne	r0, #1
 8009a4a:	b002      	add	sp, #8
 8009a4c:	4770      	bx	lr
 8009a4e:	4610      	mov	r0, r2
 8009a50:	e7fb      	b.n	8009a4a <__ascii_mbtowc+0x16>
 8009a52:	f06f 0001 	mvn.w	r0, #1
 8009a56:	e7f8      	b.n	8009a4a <__ascii_mbtowc+0x16>

08009a58 <memmove>:
 8009a58:	4288      	cmp	r0, r1
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	eb01 0402 	add.w	r4, r1, r2
 8009a60:	d902      	bls.n	8009a68 <memmove+0x10>
 8009a62:	4284      	cmp	r4, r0
 8009a64:	4623      	mov	r3, r4
 8009a66:	d807      	bhi.n	8009a78 <memmove+0x20>
 8009a68:	1e43      	subs	r3, r0, #1
 8009a6a:	42a1      	cmp	r1, r4
 8009a6c:	d008      	beq.n	8009a80 <memmove+0x28>
 8009a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a76:	e7f8      	b.n	8009a6a <memmove+0x12>
 8009a78:	4402      	add	r2, r0
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	428a      	cmp	r2, r1
 8009a7e:	d100      	bne.n	8009a82 <memmove+0x2a>
 8009a80:	bd10      	pop	{r4, pc}
 8009a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a8a:	e7f7      	b.n	8009a7c <memmove+0x24>

08009a8c <__malloc_lock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__malloc_lock+0x8>)
 8009a8e:	f7fe bf8c 	b.w	80089aa <__retarget_lock_acquire_recursive>
 8009a92:	bf00      	nop
 8009a94:	200003c0 	.word	0x200003c0

08009a98 <__malloc_unlock>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__malloc_unlock+0x8>)
 8009a9a:	f7fe bf87 	b.w	80089ac <__retarget_lock_release_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	200003c0 	.word	0x200003c0

08009aa4 <_realloc_r>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	460e      	mov	r6, r1
 8009aac:	b921      	cbnz	r1, 8009ab8 <_realloc_r+0x14>
 8009aae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	f7ff bbd4 	b.w	8009260 <_malloc_r>
 8009ab8:	b922      	cbnz	r2, 8009ac4 <_realloc_r+0x20>
 8009aba:	f7ff fb81 	bl	80091c0 <_free_r>
 8009abe:	4625      	mov	r5, r4
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac4:	f000 f83a 	bl	8009b3c <_malloc_usable_size_r>
 8009ac8:	42a0      	cmp	r0, r4
 8009aca:	d20f      	bcs.n	8009aec <_realloc_r+0x48>
 8009acc:	4621      	mov	r1, r4
 8009ace:	4638      	mov	r0, r7
 8009ad0:	f7ff fbc6 	bl	8009260 <_malloc_r>
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0f2      	beq.n	8009ac0 <_realloc_r+0x1c>
 8009ada:	4631      	mov	r1, r6
 8009adc:	4622      	mov	r2, r4
 8009ade:	f7fe ffd3 	bl	8008a88 <memcpy>
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f7ff fb6b 	bl	80091c0 <_free_r>
 8009aea:	e7e9      	b.n	8009ac0 <_realloc_r+0x1c>
 8009aec:	4635      	mov	r5, r6
 8009aee:	e7e7      	b.n	8009ac0 <_realloc_r+0x1c>

08009af0 <_read_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d07      	ldr	r5, [pc, #28]	; (8009b10 <_read_r+0x20>)
 8009af4:	4604      	mov	r4, r0
 8009af6:	4608      	mov	r0, r1
 8009af8:	4611      	mov	r1, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	602a      	str	r2, [r5, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f7f9 fdb8 	bl	8003674 <_read>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_read_r+0x1e>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_read_r+0x1e>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	200003c8 	.word	0x200003c8

08009b14 <__ascii_wctomb>:
 8009b14:	b149      	cbz	r1, 8009b2a <__ascii_wctomb+0x16>
 8009b16:	2aff      	cmp	r2, #255	; 0xff
 8009b18:	bf85      	ittet	hi
 8009b1a:	238a      	movhi	r3, #138	; 0x8a
 8009b1c:	6003      	strhi	r3, [r0, #0]
 8009b1e:	700a      	strbls	r2, [r1, #0]
 8009b20:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b24:	bf98      	it	ls
 8009b26:	2001      	movls	r0, #1
 8009b28:	4770      	bx	lr
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	4770      	bx	lr

08009b2e <abort>:
 8009b2e:	b508      	push	{r3, lr}
 8009b30:	2006      	movs	r0, #6
 8009b32:	f000 f833 	bl	8009b9c <raise>
 8009b36:	2001      	movs	r0, #1
 8009b38:	f7f9 fd92 	bl	8003660 <_exit>

08009b3c <_malloc_usable_size_r>:
 8009b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b40:	1f18      	subs	r0, r3, #4
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	bfbc      	itt	lt
 8009b46:	580b      	ldrlt	r3, [r1, r0]
 8009b48:	18c0      	addlt	r0, r0, r3
 8009b4a:	4770      	bx	lr

08009b4c <_raise_r>:
 8009b4c:	291f      	cmp	r1, #31
 8009b4e:	b538      	push	{r3, r4, r5, lr}
 8009b50:	4604      	mov	r4, r0
 8009b52:	460d      	mov	r5, r1
 8009b54:	d904      	bls.n	8009b60 <_raise_r+0x14>
 8009b56:	2316      	movs	r3, #22
 8009b58:	6003      	str	r3, [r0, #0]
 8009b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b62:	b112      	cbz	r2, 8009b6a <_raise_r+0x1e>
 8009b64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b68:	b94b      	cbnz	r3, 8009b7e <_raise_r+0x32>
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 f830 	bl	8009bd0 <_getpid_r>
 8009b70:	462a      	mov	r2, r5
 8009b72:	4601      	mov	r1, r0
 8009b74:	4620      	mov	r0, r4
 8009b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b7a:	f000 b817 	b.w	8009bac <_kill_r>
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d00a      	beq.n	8009b98 <_raise_r+0x4c>
 8009b82:	1c59      	adds	r1, r3, #1
 8009b84:	d103      	bne.n	8009b8e <_raise_r+0x42>
 8009b86:	2316      	movs	r3, #22
 8009b88:	6003      	str	r3, [r0, #0]
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e7e7      	b.n	8009b5e <_raise_r+0x12>
 8009b8e:	2400      	movs	r4, #0
 8009b90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b94:	4628      	mov	r0, r5
 8009b96:	4798      	blx	r3
 8009b98:	2000      	movs	r0, #0
 8009b9a:	e7e0      	b.n	8009b5e <_raise_r+0x12>

08009b9c <raise>:
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <raise+0xc>)
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	f7ff bfd3 	b.w	8009b4c <_raise_r>
 8009ba6:	bf00      	nop
 8009ba8:	20000014 	.word	0x20000014

08009bac <_kill_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d07      	ldr	r5, [pc, #28]	; (8009bcc <_kill_r+0x20>)
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	602b      	str	r3, [r5, #0]
 8009bba:	f7f9 fd41 	bl	8003640 <_kill>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	d102      	bne.n	8009bc8 <_kill_r+0x1c>
 8009bc2:	682b      	ldr	r3, [r5, #0]
 8009bc4:	b103      	cbz	r3, 8009bc8 <_kill_r+0x1c>
 8009bc6:	6023      	str	r3, [r4, #0]
 8009bc8:	bd38      	pop	{r3, r4, r5, pc}
 8009bca:	bf00      	nop
 8009bcc:	200003c8 	.word	0x200003c8

08009bd0 <_getpid_r>:
 8009bd0:	f7f9 bd2e 	b.w	8003630 <_getpid>

08009bd4 <_init>:
 8009bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd6:	bf00      	nop
 8009bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bda:	bc08      	pop	{r3}
 8009bdc:	469e      	mov	lr, r3
 8009bde:	4770      	bx	lr

08009be0 <_fini>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	bf00      	nop
 8009be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be6:	bc08      	pop	{r3}
 8009be8:	469e      	mov	lr, r3
 8009bea:	4770      	bx	lr
