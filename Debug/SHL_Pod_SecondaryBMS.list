
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047fc  080047fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004804  08004804  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800480c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  2000000c  08004818  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08004818  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129b2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026be  00000000  00000000  000329ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000350b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00035e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259c0  00000000  00000000  00036ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f996  00000000  00000000  0005c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4d73  00000000  00000000  0006be0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160b81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  00160bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080047cc 	.word	0x080047cc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080047cc 	.word	0x080047cc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fcd3 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f80e 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f9a2 	bl	8000854 <MX_GPIO_Init>
  MX_ETH_Init();
 8000510:	f000 f8d0 	bl	80006b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f940 	bl	8000798 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 f96e 	bl	80007f8 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800051c:	f000 f896 	bl	800064c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f90a 	bl	8000738 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x24>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0b4      	sub	sp, #208	; 0xd0
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 f940 	bl	80047bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2284      	movs	r2, #132	; 0x84
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f004 f931 	bl	80047bc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055a:	f001 ff41 	bl	80023e0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b38      	ldr	r3, [pc, #224]	; (8000640 <SystemClock_Config+0x118>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <SystemClock_Config+0x118>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6413      	str	r3, [r2, #64]	; 0x40
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <SystemClock_Config+0x118>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000576:	4b33      	ldr	r3, [pc, #204]	; (8000644 <SystemClock_Config+0x11c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <SystemClock_Config+0x11c>)
 8000580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <SystemClock_Config+0x11c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000598:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800059c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b4:	2348      	movs	r3, #72	; 0x48
 80005b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c0:	2303      	movs	r3, #3
 80005c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 ff18 	bl	8002400 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005d6:	f000 f9df 	bl	8000998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f002 f9a1 	bl	8002948 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800060c:	f000 f9c4 	bl	8000998 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <SystemClock_Config+0x120>)
 8000612:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000614:	2300      	movs	r3, #0
 8000616:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000618:	2300      	movs	r3, #0
 800061a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fb90 	bl	8002d4c <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000632:	f000 f9b1 	bl	8000998 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	37d0      	adds	r7, #208	; 0xd0
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000
 8000648:	00200180 	.word	0x00200180

0800064c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_CAN1_Init+0x60>)
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000654:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_CAN1_Init+0x60>)
 8000658:	2210      	movs	r2, #16
 800065a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_CAN1_Init+0x60>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_CAN1_Init+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_CAN1_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_CAN1_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_CAN1_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_CAN1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_CAN1_Init+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_CAN1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_CAN1_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_CAN1_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_CAN1_Init+0x60>)
 800069a:	f000 fc89 	bl	8000fb0 <HAL_CAN_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006a4:	f000 f978 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200006cc 	.word	0x200006cc
 80006b0:	40006400 	.word	0x40006400

080006b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_ETH_Init+0x78>)
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_ETH_Init+0x7c>)
 80006bc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_ETH_Init+0x78>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_ETH_Init+0x78>)
 80006c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ca:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_ETH_Init+0x78>)
 80006ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ETH_Init+0x78>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_ETH_Init+0x80>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_ETH_Init+0x80>)
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_ETH_Init+0x80>)
 80006e8:	22e1      	movs	r2, #225	; 0xe1
 80006ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_ETH_Init+0x80>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_ETH_Init+0x80>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_ETH_Init+0x80>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_ETH_Init+0x78>)
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <MX_ETH_Init+0x80>)
 8000702:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_ETH_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_ETH_Init+0x78>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_ETH_Init+0x78>)
 8000712:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000716:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_ETH_Init+0x78>)
 800071a:	f000 fee9 	bl	80014f0 <HAL_ETH_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000724:	f000 f938 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200006f4 	.word	0x200006f4
 8000730:	40028000 	.word	0x40028000
 8000734:	20000028 	.word	0x20000028

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MX_USART2_UART_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800077c:	f002 fed6 	bl	800352c <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 f907 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000648 	.word	0x20000648
 8000794:	40004400 	.word	0x40004400

08000798 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 1 */

  //Verified with UART configuration stated on TinyBMS_Communication_Protocols.pdf page 4
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART3_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007dc:	f002 fea6 	bl	800352c <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f8d7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000030 	.word	0x20000030
 80007f4:	40004800 	.word	0x40004800

080007f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000802:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2206      	movs	r2, #6
 8000808:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2202      	movs	r2, #2
 800080e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2202      	movs	r2, #2
 800081a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2201      	movs	r2, #1
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	f001 fc87 	bl	800214e <HAL_PCD_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f8a7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000b4 	.word	0x200000b4

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <MX_GPIO_Init+0x130>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a45      	ldr	r2, [pc, #276]	; (8000984 <MX_GPIO_Init+0x130>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b43      	ldr	r3, [pc, #268]	; (8000984 <MX_GPIO_Init+0x130>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <MX_GPIO_Init+0x130>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a3f      	ldr	r2, [pc, #252]	; (8000984 <MX_GPIO_Init+0x130>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <MX_GPIO_Init+0x130>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <MX_GPIO_Init+0x130>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a39      	ldr	r2, [pc, #228]	; (8000984 <MX_GPIO_Init+0x130>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <MX_GPIO_Init+0x130>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_GPIO_Init+0x130>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a33      	ldr	r2, [pc, #204]	; (8000984 <MX_GPIO_Init+0x130>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <MX_GPIO_Init+0x130>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <MX_GPIO_Init+0x130>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <MX_GPIO_Init+0x130>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <MX_GPIO_Init+0x130>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_GPIO_Init+0x130>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <MX_GPIO_Init+0x130>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_GPIO_Init+0x130>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_GPIO_Init+0x134>)
 8000902:	f001 fc0b 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2140      	movs	r1, #64	; 0x40
 800090a:	4820      	ldr	r0, [pc, #128]	; (800098c <MX_GPIO_Init+0x138>)
 800090c:	f001 fc06 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_GPIO_Init+0x13c>)
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <MX_GPIO_Init+0x140>)
 8000926:	f001 fa4d 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800092a:	f244 0381 	movw	r3, #16513	; 0x4081
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <MX_GPIO_Init+0x134>)
 8000944:	f001 fa3e 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000948:	2340      	movs	r3, #64	; 0x40
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <MX_GPIO_Init+0x138>)
 8000960:	f001 fa30 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_GPIO_Init+0x138>)
 8000978:	f001 fa24 	bl	8001dc4 <HAL_GPIO_Init>

}
 800097c:	bf00      	nop
 800097e:	3730      	adds	r7, #48	; 0x30
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40021800 	.word	0x40021800
 8000990:	10110000 	.word	0x10110000
 8000994:	40020800 	.word	0x40020800

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_CAN_MspInit+0x7c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d127      	bne.n	8000a5e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a4e:	2309      	movs	r3, #9
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_CAN_MspInit+0x84>)
 8000a5a:	f001 f9b3 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40006400 	.word	0x40006400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a4e      	ldr	r2, [pc, #312]	; (8000bcc <HAL_ETH_MspInit+0x158>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	f040 8096 	bne.w	8000bc4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a98:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a4c      	ldr	r2, [pc, #304]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a46      	ldr	r2, [pc, #280]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	4b41      	ldr	r3, [pc, #260]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a40      	ldr	r2, [pc, #256]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b3e      	ldr	r3, [pc, #248]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	4b3b      	ldr	r3, [pc, #236]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a3a      	ldr	r2, [pc, #232]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b38      	ldr	r3, [pc, #224]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a34      	ldr	r2, [pc, #208]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a2e      	ldr	r2, [pc, #184]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b40:	2332      	movs	r3, #50	; 0x32
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b50:	230b      	movs	r3, #11
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481e      	ldr	r0, [pc, #120]	; (8000bd4 <HAL_ETH_MspInit+0x160>)
 8000b5c:	f001 f932 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b60:	2386      	movs	r3, #134	; 0x86
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b70:	230b      	movs	r3, #11
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <HAL_ETH_MspInit+0x164>)
 8000b7c:	f001 f922 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b92:	230b      	movs	r3, #11
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <HAL_ETH_MspInit+0x168>)
 8000b9e:	f001 f911 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb4:	230b      	movs	r3, #11
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <HAL_ETH_MspInit+0x16c>)
 8000bc0:	f001 f900 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3738      	adds	r7, #56	; 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40028000 	.word	0x40028000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40021800 	.word	0x40021800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a40      	ldr	r2, [pc, #256]	; (8000d04 <HAL_UART_MspInit+0x120>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d14c      	bne.n	8000ca0 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	4b40      	ldr	r3, [pc, #256]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a3f      	ldr	r2, [pc, #252]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a39      	ldr	r2, [pc, #228]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a33      	ldr	r2, [pc, #204]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4828      	ldr	r0, [pc, #160]	; (8000d0c <HAL_UART_MspInit+0x128>)
 8000c6a:	f001 f8ab 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4821      	ldr	r0, [pc, #132]	; (8000d10 <HAL_UART_MspInit+0x12c>)
 8000c8a:	f001 f89b 	bl	8001dc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2026      	movs	r0, #38	; 0x26
 8000c94:	f000 fb63 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c98:	2026      	movs	r0, #38	; 0x26
 8000c9a:	f000 fb7c 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c9e:	e02d      	b.n	8000cfc <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_UART_MspInit+0x130>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d128      	bne.n	8000cfc <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_UART_MspInit+0x124>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cec:	2307      	movs	r3, #7
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <HAL_UART_MspInit+0x12c>)
 8000cf8:	f001 f864 	bl	8001dc4 <HAL_GPIO_Init>
}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	40004800 	.word	0x40004800

08000d18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d38:	d141      	bne.n	8000dbe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d52:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d64:	230a      	movs	r3, #10
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4817      	ldr	r0, [pc, #92]	; (8000dcc <HAL_PCD_MspInit+0xb4>)
 8000d70:	f001 f828 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4810      	ldr	r0, [pc, #64]	; (8000dcc <HAL_PCD_MspInit+0xb4>)
 8000d8a:	f001 f81b 	bl	8001dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6353      	str	r3, [r2, #52]	; 0x34
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_PCD_MspInit+0xb0>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f884 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <USART2_IRQHandler+0x10>)
 8000e2a:	f002 fbcd 	bl	80035c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000648 	.word	0x20000648

08000e38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e86:	f7ff ffd7 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f003 fc73 	bl	8004774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fb37 	bl	8000500 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea0:	0800480c 	.word	0x0800480c
  ldr r2, =_sbss
 8000ea4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea8:	20000740 	.word	0x20000740

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>

08000eae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 fa48 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 f805 	bl	8000ec8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ebe:	f7ff fd71 	bl	80009a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa63 	bl	80013b2 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fa2b 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	2000073c 	.word	0x2000073c

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000073c 	.word	0x2000073c

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0ed      	b.n	800119e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fd0c 	bl	80009ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0202 	bic.w	r2, r2, #2
 8000fe2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe4:	f7ff ffb4 	bl	8000f50 <HAL_GetTick>
 8000fe8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fea:	e012      	b.n	8001012 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fec:	f7ff ffb0 	bl	8000f50 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b0a      	cmp	r3, #10
 8000ff8:	d90b      	bls.n	8001012 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2205      	movs	r2, #5
 800100a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0c5      	b.n	800119e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1e5      	bne.n	8000fec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001030:	f7ff ff8e 	bl	8000f50 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001036:	e012      	b.n	800105e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001038:	f7ff ff8a 	bl	8000f50 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d90b      	bls.n	800105e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2205      	movs	r2, #5
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e09f      	b.n	800119e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0e5      	beq.n	8001038 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7e1b      	ldrb	r3, [r3, #24]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e007      	b.n	8001096 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7e5b      	ldrb	r3, [r3, #25]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d108      	bne.n	80010b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e007      	b.n	80010c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7e9b      	ldrb	r3, [r3, #26]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d108      	bne.n	80010da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0220 	orr.w	r2, r2, #32
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e007      	b.n	80010ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0220 	bic.w	r2, r2, #32
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7edb      	ldrb	r3, [r3, #27]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d108      	bne.n	8001104 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0210 	bic.w	r2, r2, #16
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e007      	b.n	8001114 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0210 	orr.w	r2, r2, #16
 8001112:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7f1b      	ldrb	r3, [r3, #28]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d108      	bne.n	800112e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0208 	orr.w	r2, r2, #8
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e007      	b.n	800113e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0208 	bic.w	r2, r2, #8
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7f5b      	ldrb	r3, [r3, #29]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d108      	bne.n	8001158 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 0204 	orr.w	r2, r2, #4
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e007      	b.n	8001168 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0204 	bic.w	r2, r2, #4
 8001166:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	ea42 0103 	orr.w	r1, r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <__NVIC_SetPriorityGrouping+0x40>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <__NVIC_SetPriorityGrouping+0x40>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	05fa0000 	.word	0x05fa0000

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff3e 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff31 	bl	800120c <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fdba 	bl	8000f50 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d008      	beq.n	80013fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e052      	b.n	80014a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0216 	bic.w	r2, r2, #22
 800140a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800141a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	d103      	bne.n	800142c <HAL_DMA_Abort+0x62>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0208 	bic.w	r2, r2, #8
 800143a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800144c:	e013      	b.n	8001476 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144e:	f7ff fd7f 	bl	8000f50 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b05      	cmp	r3, #5
 800145a:	d90c      	bls.n	8001476 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e015      	b.n	80014a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e4      	bne.n	800144e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	223f      	movs	r2, #63	; 0x3f
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d004      	beq.n	80014c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e00c      	b.n	80014e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2205      	movs	r2, #5
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001500:	4ba9      	ldr	r3, [pc, #676]	; (80017a8 <HAL_ETH_Init+0x2b8>)
 8001502:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e181      	b.n	800181a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff faa2 	bl	8000a74 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001530:	4b9e      	ldr	r3, [pc, #632]	; (80017ac <HAL_ETH_Init+0x2bc>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	4a9d      	ldr	r2, [pc, #628]	; (80017ac <HAL_ETH_Init+0x2bc>)
 8001536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153a:	6453      	str	r3, [r2, #68]	; 0x44
 800153c:	4b9b      	ldr	r3, [pc, #620]	; (80017ac <HAL_ETH_Init+0x2bc>)
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001548:	4b99      	ldr	r3, [pc, #612]	; (80017b0 <HAL_ETH_Init+0x2c0>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a98      	ldr	r2, [pc, #608]	; (80017b0 <HAL_ETH_Init+0x2c0>)
 800154e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001552:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001554:	4b96      	ldr	r3, [pc, #600]	; (80017b0 <HAL_ETH_Init+0x2c0>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4994      	ldr	r1, [pc, #592]	; (80017b0 <HAL_ETH_Init+0x2c0>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0201 	orr.w	r2, r2, #1
 8001574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001578:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800157a:	f7ff fce9 	bl	8000f50 <HAL_GetTick>
 800157e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001580:	e011      	b.n	80015a6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001582:	f7ff fce5 	bl	8000f50 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001590:	d909      	bls.n	80015a6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2203      	movs	r2, #3
 8001596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e139      	b.n	800181a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e4      	bne.n	8001582 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f023 031c 	bic.w	r3, r3, #28
 80015c6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015c8:	f001 fb8c 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 80015cc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4a78      	ldr	r2, [pc, #480]	; (80017b4 <HAL_ETH_Init+0x2c4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d908      	bls.n	80015e8 <HAL_ETH_Init+0xf8>
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4a77      	ldr	r2, [pc, #476]	; (80017b8 <HAL_ETH_Init+0x2c8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d804      	bhi.n	80015e8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e027      	b.n	8001638 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	4a73      	ldr	r2, [pc, #460]	; (80017b8 <HAL_ETH_Init+0x2c8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d908      	bls.n	8001602 <HAL_ETH_Init+0x112>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	4a6d      	ldr	r2, [pc, #436]	; (80017a8 <HAL_ETH_Init+0x2b8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d204      	bcs.n	8001602 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f043 030c 	orr.w	r3, r3, #12
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	e01a      	b.n	8001638 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4a68      	ldr	r2, [pc, #416]	; (80017a8 <HAL_ETH_Init+0x2b8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d303      	bcc.n	8001612 <HAL_ETH_Init+0x122>
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4a6b      	ldr	r2, [pc, #428]	; (80017bc <HAL_ETH_Init+0x2cc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d911      	bls.n	8001636 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4a69      	ldr	r2, [pc, #420]	; (80017bc <HAL_ETH_Init+0x2cc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d908      	bls.n	800162c <HAL_ETH_Init+0x13c>
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4a68      	ldr	r2, [pc, #416]	; (80017c0 <HAL_ETH_Init+0x2d0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d804      	bhi.n	800162c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e005      	b.n	8001638 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	e000      	b.n	8001638 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001636:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001640:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f954 	bl	80018f4 <HAL_ETH_WritePHYRegister>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001656:	6939      	ldr	r1, [r7, #16]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f9b1 	bl	80019c0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0d7      	b.n	800181a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800166a:	20ff      	movs	r0, #255	; 0xff
 800166c:	f7ff fc7c 	bl	8000f68 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a5 	beq.w	80017c4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800167a:	f7ff fc69 	bl	8000f50 <HAL_GetTick>
 800167e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	461a      	mov	r2, r3
 8001686:	2101      	movs	r1, #1
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f8cb 	bl	8001824 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800168e:	f7ff fc5f 	bl	8000f50 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d90f      	bls.n	80016c0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016a4:	6939      	ldr	r1, [r7, #16]
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f98a 	bl	80019c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0ac      	b.n	800181a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0da      	beq.n	8001680 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80016ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016ce:	2100      	movs	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f90f 	bl	80018f4 <HAL_ETH_WritePHYRegister>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00b      	beq.n	80016f4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016e0:	6939      	ldr	r1, [r7, #16]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f96c 	bl	80019c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016f0:	2301      	movs	r3, #1
 80016f2:	e092      	b.n	800181a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff fc2c 	bl	8000f50 <HAL_GetTick>
 80016f8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	461a      	mov	r2, r3
 8001700:	2101      	movs	r1, #1
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f88e 	bl	8001824 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001708:	f7ff fc22 	bl	8000f50 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d90f      	bls.n	800173a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800171e:	6939      	ldr	r1, [r7, #16]
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f94d 	bl	80019c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e06f      	b.n	800181a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0da      	beq.n	80016fa <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	461a      	mov	r2, r3
 800174a:	2110      	movs	r1, #16
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f869 	bl	8001824 <HAL_ETH_ReadPHYRegister>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f92e 	bl	80019c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800176c:	2301      	movs	r3, #1
 800176e:	e054      	b.n	800181a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	e002      	b.n	800178a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	e035      	b.n	8001808 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	e030      	b.n	8001808 <HAL_ETH_Init+0x318>
 80017a6:	bf00      	nop
 80017a8:	03938700 	.word	0x03938700
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40013800 	.word	0x40013800
 80017b4:	01312cff 	.word	0x01312cff
 80017b8:	02160ebf 	.word	0x02160ebf
 80017bc:	05f5e0ff 	.word	0x05f5e0ff
 80017c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f889 	bl	80018f4 <HAL_ETH_WritePHYRegister>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00b      	beq.n	8001800 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017ec:	6939      	ldr	r1, [r7, #16]
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f8e6 	bl	80019c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e00c      	b.n	800181a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001800:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001804:	f7ff fbb0 	bl	8000f68 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f8d8 	bl	80019c0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop

08001824 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	460b      	mov	r3, r1
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b82      	cmp	r3, #130	; 0x82
 8001844:	d101      	bne.n	800184a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001846:	2302      	movs	r3, #2
 8001848:	e050      	b.n	80018ec <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2282      	movs	r2, #130	; 0x82
 800184e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 031c 	and.w	r3, r3, #28
 8001860:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8a1b      	ldrh	r3, [r3, #16]
 8001866:	02db      	lsls	r3, r3, #11
 8001868:	b29b      	uxth	r3, r3
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001870:	897b      	ldrh	r3, [r7, #10]
 8001872:	019b      	lsls	r3, r3, #6
 8001874:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f023 0302 	bic.w	r3, r3, #2
 8001884:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001896:	f7ff fb5b 	bl	8000f50 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800189c:	e015      	b.n	80018ca <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800189e:	f7ff fb57 	bl	8000f50 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d309      	bcc.n	80018c2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e014      	b.n	80018ec <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e4      	bne.n	800189e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	460b      	mov	r3, r1
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b42      	cmp	r3, #66	; 0x42
 8001914:	d101      	bne.n	800191a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001916:	2302      	movs	r3, #2
 8001918:	e04e      	b.n	80019b8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2242      	movs	r2, #66	; 0x42
 800191e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 031c 	and.w	r3, r3, #28
 8001930:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8a1b      	ldrh	r3, [r3, #16]
 8001936:	02db      	lsls	r3, r3, #11
 8001938:	b29b      	uxth	r3, r3
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001940:	897b      	ldrh	r3, [r7, #10]
 8001942:	019b      	lsls	r3, r3, #6
 8001944:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001970:	f7ff faee 	bl	8000f50 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001976:	e015      	b.n	80019a4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001978:	f7ff faea 	bl	8000f50 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001986:	d309      	bcc.n	800199c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e00d      	b.n	80019b8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e4      	bne.n	8001978 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0b0      	sub	sp, #192	; 0xc0
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019dc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80019ee:	2300      	movs	r3, #0
 80019f0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d103      	bne.n	8001a0e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a0c:	e001      	b.n	8001a12 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a16:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001a2c:	2340      	movs	r3, #64	; 0x40
 8001a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a98:	4bab      	ldr	r3, [pc, #684]	; (8001d48 <ETH_MACDMAConfig+0x388>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001aa4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001aa8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001aac:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001ab2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001ab6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001aba:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ac0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ac4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ac8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001acc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ad0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001ad4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ad6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fa37 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b02:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b08:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001b0c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001b12:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001b18:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001b1e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001b24:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001b28:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001b30:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b32:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff fa12 	bl	8000f68 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b4c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b56:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b60:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001b6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b70:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b74:	4013      	ands	r3, r2
 8001b76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b7e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001b80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b84:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001b8a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001b90:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001b96:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001b9c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7ff f9d3 	bl	8000f68 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bca:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001bcc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001bd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff f9be 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bf4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bfe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001c04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c08:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c4a:	4413      	add	r3, r2
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001c52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <ETH_MACDMAConfig+0x38c>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c5e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001c60:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c62:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001c64:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001c66:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001c68:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001c6a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001c6c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001c6e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001c70:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001c72:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001c74:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001c76:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001c7a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001c7e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c92:	4413      	add	r3, r2
 8001c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c98:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ca2:	4413      	add	r3, r2
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff f95c 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cb8:	4413      	add	r3, r2
 8001cba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cbe:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cc4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001cc8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ccc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001cd0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001cd6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001cda:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff f935 	bl	8000f68 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d0a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10d      	bne.n	8001d30 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f241 031c 	movw	r3, #4124	; 0x101c
 8001d1c:	4413      	add	r3, r2
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6811      	ldr	r1, [r2, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <ETH_MACDMAConfig+0x390>)
 8001d26:	431a      	orrs	r2, r3
 8001d28:	f241 031c 	movw	r3, #4124	; 0x101c
 8001d2c:	440b      	add	r3, r1
 8001d2e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	461a      	mov	r2, r3
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f80b 	bl	8001d54 <ETH_MACAddressConfig>
}
 8001d3e:	bf00      	nop
 8001d40:	37c0      	adds	r7, #192	; 0xc0
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	ff20810f 	.word	0xff20810f
 8001d4c:	f8de3f23 	.word	0xf8de3f23
 8001d50:	00010040 	.word	0x00010040

08001d54 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3305      	adds	r3, #5
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	3204      	adds	r2, #4
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <ETH_MACAddressConfig+0x68>)
 8001d76:	4413      	add	r3, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3303      	adds	r3, #3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	061a      	lsls	r2, r3, #24
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3301      	adds	r3, #1
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <ETH_MACAddressConfig+0x6c>)
 8001da6:	4413      	add	r3, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6013      	str	r3, [r2, #0]
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40028040 	.word	0x40028040
 8001dc0:	40028044 	.word	0x40028044

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e175      	b.n	80020d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8164 	bne.w	80020ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d00b      	beq.n	8001e22 <HAL_GPIO_Init+0x5e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e16:	2b11      	cmp	r3, #17
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d130      	bne.n	8001e84 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 0201 	and.w	r2, r3, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x100>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80be 	beq.w	80020ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_GPIO_Init+0x324>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f66:	4a61      	ldr	r2, [pc, #388]	; (80020ec <HAL_GPIO_Init+0x328>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d037      	beq.n	8002002 <HAL_GPIO_Init+0x23e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d031      	beq.n	8001ffe <HAL_GPIO_Init+0x23a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <HAL_GPIO_Init+0x236>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a55      	ldr	r2, [pc, #340]	; (80020fc <HAL_GPIO_Init+0x338>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x232>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a54      	ldr	r2, [pc, #336]	; (8002100 <HAL_GPIO_Init+0x33c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x22e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a53      	ldr	r2, [pc, #332]	; (8002104 <HAL_GPIO_Init+0x340>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x22a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_GPIO_Init+0x344>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x226>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_GPIO_Init+0x348>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x222>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_GPIO_Init+0x34c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x21e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	; (8002114 <HAL_GPIO_Init+0x350>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x21a>
 8001fda:	2309      	movs	r3, #9
 8001fdc:	e012      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fde:	230a      	movs	r3, #10
 8001fe0:	e010      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	e00e      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00c      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fea:	2306      	movs	r3, #6
 8001fec:	e00a      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001fee:	2305      	movs	r3, #5
 8001ff0:	e008      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e004      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e002      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_GPIO_Init+0x240>
 8002002:	2300      	movs	r3, #0
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f002 0203 	and.w	r2, r2, #3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4093      	lsls	r3, r2
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002014:	4935      	ldr	r1, [pc, #212]	; (80020ec <HAL_GPIO_Init+0x328>)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002046:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_GPIO_Init+0x354>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002070:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_GPIO_Init+0x354>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209a:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_GPIO_Init+0x354>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_GPIO_Init+0x354>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_GPIO_Init+0x354>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3301      	adds	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	f67f ae86 	bls.w	8001de4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40013800 	.word	0x40013800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020400 	.word	0x40020400
 80020f8:	40020800 	.word	0x40020800
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40021000 	.word	0x40021000
 8002104:	40021400 	.word	0x40021400
 8002108:	40021800 	.word	0x40021800
 800210c:	40021c00 	.word	0x40021c00
 8002110:	40022000 	.word	0x40022000
 8002114:	40022400 	.word	0x40022400
 8002118:	40013c00 	.word	0x40013c00

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002138:	e003      	b.n	8002142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	041a      	lsls	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	619a      	str	r2, [r3, #24]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800214e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002150:	b08f      	sub	sp, #60	; 0x3c
 8002152:	af0a      	add	r7, sp, #40	; 0x28
 8002154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e116      	b.n	800238e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fdcc 	bl	8000d18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2203      	movs	r2, #3
 8002184:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 f888 	bl	80042b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	687e      	ldr	r6, [r7, #4]
 80021ac:	466d      	mov	r5, sp
 80021ae:	f106 0410 	add.w	r4, r6, #16
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021be:	e885 0003 	stmia.w	r5, {r0, r1}
 80021c2:	1d33      	adds	r3, r6, #4
 80021c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f002 f81c 	bl	8004204 <USB_CoreInit>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0d7      	b.n	800238e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 f876 	bl	80042d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e04a      	b.n	8002286 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	333d      	adds	r3, #61	; 0x3d
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	333c      	adds	r3, #60	; 0x3c
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	b298      	uxth	r0, r3
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	3342      	adds	r3, #66	; 0x42
 800222c:	4602      	mov	r2, r0
 800222e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	333f      	adds	r3, #63	; 0x3f
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3344      	adds	r3, #68	; 0x44
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3348      	adds	r3, #72	; 0x48
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	3350      	adds	r3, #80	; 0x50
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	3301      	adds	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	d3af      	bcc.n	80021f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e044      	b.n	8002320 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	3301      	adds	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3b5      	bcc.n	8002296 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	687e      	ldr	r6, [r7, #4]
 8002332:	466d      	mov	r5, sp
 8002334:	f106 0410 	add.w	r4, r6, #16
 8002338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002340:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002344:	e885 0003 	stmia.w	r5, {r0, r1}
 8002348:	1d33      	adds	r3, r6, #4
 800234a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234c:	6838      	ldr	r0, [r7, #0]
 800234e:	f001 ffed 	bl	800432c <USB_DevInit>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e014      	b.n	800238e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2b01      	cmp	r3, #1
 800237a:	d102      	bne.n	8002382 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f80b 	bl	8002398 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f002 f99f 	bl	80046ca <USB_DevDisconnect>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002398 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_PCDEx_ActivateLPM+0x44>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	10000003 	.word	0x10000003

080023e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40007000 	.word	0x40007000

08002400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e291      	b.n	800293a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8087 	beq.w	8002532 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002424:	4b96      	ldr	r3, [pc, #600]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00c      	beq.n	800244a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002430:	4b93      	ldr	r3, [pc, #588]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d112      	bne.n	8002462 <HAL_RCC_OscConfig+0x62>
 800243c:	4b90      	ldr	r3, [pc, #576]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002448:	d10b      	bne.n	8002462 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244a:	4b8d      	ldr	r3, [pc, #564]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d06c      	beq.n	8002530 <HAL_RCC_OscConfig+0x130>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d168      	bne.n	8002530 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e26b      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x7a>
 800246c:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a83      	ldr	r2, [pc, #524]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e02e      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x9c>
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7b      	ldr	r2, [pc, #492]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0xc0>
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a75      	ldr	r2, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a72      	ldr	r2, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd36 	bl	8000f50 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe fd32 	bl	8000f50 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e21f      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xe8>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fd22 	bl	8000f50 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe fd1e 	bl	8000f50 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e20b      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x110>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d069      	beq.n	8002612 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b08      	cmp	r3, #8
 8002554:	d11c      	bne.n	8002590 <HAL_RCC_OscConfig+0x190>
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_RCC_OscConfig+0x17a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1df      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	493d      	ldr	r1, [pc, #244]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	e040      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a38      	ldr	r2, [pc, #224]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fcd4 	bl	8000f50 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7fe fcd0 	bl	8000f50 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e1bd      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4929      	ldr	r1, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]
 80025de:	e018      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fcb0 	bl	8000f50 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fcac 	bl	8000f50 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e199      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d038      	beq.n	8002690 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	4a15      	ldr	r2, [pc, #84]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7fe fc8d 	bl	8000f50 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263a:	f7fe fc89 	bl	8000f50 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e176      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x23a>
 8002658:	e01a      	b.n	8002690 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fc73 	bl	8000f50 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266e:	f7fe fc6f 	bl	8000f50 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d903      	bls.n	8002684 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e15c      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
 8002680:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	4b91      	ldr	r3, [pc, #580]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ee      	bne.n	800266e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a4 	beq.w	80027e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a87      	ldr	r2, [pc, #540]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026d2:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7e      	ldr	r2, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe fc37 	bl	8000f50 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fc33 	bl	8000f50 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e120      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f8:	4b75      	ldr	r3, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x31a>
 800270c:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	e02d      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x33c>
 8002722:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a69      	ldr	r2, [pc, #420]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	4b67      	ldr	r3, [pc, #412]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a66      	ldr	r2, [pc, #408]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
 800273a:	e01c      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x35e>
 8002744:	4b61      	ldr	r3, [pc, #388]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a60      	ldr	r2, [pc, #384]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	4b5e      	ldr	r3, [pc, #376]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a5d      	ldr	r2, [pc, #372]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
 800275c:	e00b      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
 800275e:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a5a      	ldr	r2, [pc, #360]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	4b58      	ldr	r3, [pc, #352]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4a57      	ldr	r2, [pc, #348]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002770:	f023 0304 	bic.w	r3, r3, #4
 8002774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d015      	beq.n	80027aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe fbe7 	bl	8000f50 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fbe3 	bl	8000f50 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0ce      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ee      	beq.n	8002786 <HAL_RCC_OscConfig+0x386>
 80027a8:	e014      	b.n	80027d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe fbd1 	bl	8000f50 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fbcd 	bl	8000f50 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c8:	4b40      	ldr	r3, [pc, #256]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ee      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4b3c      	ldr	r3, [pc, #240]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80a4 	beq.w	8002938 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d06b      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d149      	bne.n	8002898 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800280a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800280e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe fb9e 	bl	8000f50 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7fe fb9a 	bl	8000f50 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e087      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	4313      	orrs	r3, r2
 800285c:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800285e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002862:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fb6e 	bl	8000f50 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe fb6a 	bl	8000f50 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e057      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x478>
 8002896:	e04f      	b.n	8002938 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 800289e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fb54 	bl	8000f50 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fb50 	bl	8000f50 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e03d      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x4ac>
 80028ca:	e035      	b.n	8002938 <HAL_RCC_OscConfig+0x538>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x544>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d028      	beq.n	8002934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d121      	bne.n	8002934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d11a      	bne.n	8002934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800290a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800290c:	4293      	cmp	r3, r2
 800290e:	d111      	bne.n	8002934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0d0      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d910      	bls.n	8002990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 020f 	bic.w	r2, r3, #15
 8002976:	4965      	ldr	r1, [pc, #404]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a8:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 80029ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 80029c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	494d      	ldr	r1, [pc, #308]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d040      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d115      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e073      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06b      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 0203 	bic.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4936      	ldr	r1, [pc, #216]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fa88 	bl	8000f50 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a44:	f7fe fa84 	bl	8000f50 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e053      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 020c 	and.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1eb      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d210      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 020f 	bic.w	r2, r3, #15
 8002a82:	4922      	ldr	r1, [pc, #136]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e032      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4916      	ldr	r1, [pc, #88]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ada:	f000 f821 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	490a      	ldr	r1, [pc, #40]	; (8002b14 <HAL_RCC_ClockConfig+0x1cc>)
 8002aec:	5ccb      	ldrb	r3, [r1, r3]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <HAL_RCC_ClockConfig+0x1d0>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1d4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f9e4 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00
 8002b10:	40023800 	.word	0x40023800
 8002b14:	080047e4 	.word	0x080047e4
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	20000004 	.word	0x20000004

08002b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	2300      	movs	r3, #0
 8002b32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b38:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x40>
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	f200 80bd 	bhi.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x34>
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b52:	e0b7      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b56:	60bb      	str	r3, [r7, #8]
      break;
 8002b58:	e0b7      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5a:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b5c:	60bb      	str	r3, [r7, #8]
      break;
 8002b5e:	e0b4      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b60:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b68:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04d      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	ea02 0800 	and.w	r8, r2, r0
 8002b8e:	ea03 0901 	and.w	r9, r3, r1
 8002b92:	4640      	mov	r0, r8
 8002b94:	4649      	mov	r1, r9
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	014b      	lsls	r3, r1, #5
 8002ba0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ba4:	0142      	lsls	r2, r0, #5
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	ebb0 0008 	subs.w	r0, r0, r8
 8002bae:	eb61 0109 	sbc.w	r1, r1, r9
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	018b      	lsls	r3, r1, #6
 8002bbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bc0:	0182      	lsls	r2, r0, #6
 8002bc2:	1a12      	subs	r2, r2, r0
 8002bc4:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc8:	f04f 0000 	mov.w	r0, #0
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	00d9      	lsls	r1, r3, #3
 8002bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bd6:	00d0      	lsls	r0, r2, #3
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	eb12 0208 	adds.w	r2, r2, r8
 8002be0:	eb43 0309 	adc.w	r3, r3, r9
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	0259      	lsls	r1, r3, #9
 8002bee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bf2:	0250      	lsls	r0, r2, #9
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	f7fd fb00 	bl	8000208 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e04a      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	ea02 0400 	and.w	r4, r2, r0
 8002c2a:	ea03 0501 	and.w	r5, r3, r1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	014b      	lsls	r3, r1, #5
 8002c3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c40:	0142      	lsls	r2, r0, #5
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	1b00      	subs	r0, r0, r4
 8002c48:	eb61 0105 	sbc.w	r1, r1, r5
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	018b      	lsls	r3, r1, #6
 8002c56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c5a:	0182      	lsls	r2, r0, #6
 8002c5c:	1a12      	subs	r2, r2, r0
 8002c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	00d9      	lsls	r1, r3, #3
 8002c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c70:	00d0      	lsls	r0, r2, #3
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	1912      	adds	r2, r2, r4
 8002c78:	eb45 0303 	adc.w	r3, r5, r3
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0299      	lsls	r1, r3, #10
 8002c86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c8a:	0290      	lsls	r0, r2, #10
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	f7fd fab4 	bl	8000208 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	60bb      	str	r3, [r7, #8]
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cc6:	60bb      	str	r3, [r7, #8]
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	68bb      	ldr	r3, [r7, #8]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200

08002ce4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000000 	.word	0x20000000

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d00:	f7ff fff0 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0a9b      	lsrs	r3, r3, #10
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4903      	ldr	r1, [pc, #12]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	080047f4 	.word	0x080047f4

08002d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d28:	f7ff ffdc 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	0b5b      	lsrs	r3, r3, #13
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4903      	ldr	r1, [pc, #12]	; (8002d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	080047f4 	.word	0x080047f4

08002d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d74:	4b69      	ldr	r3, [pc, #420]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a68      	ldr	r2, [pc, #416]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d7e:	6093      	str	r3, [r2, #8]
 8002d80:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	4964      	ldr	r1, [pc, #400]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d017      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002da6:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	4959      	ldr	r1, [pc, #356]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc4:	d101      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d017      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002de2:	4b4e      	ldr	r3, [pc, #312]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	494a      	ldr	r1, [pc, #296]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 808b 	beq.w	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b3a      	ldr	r3, [pc, #232]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	4a39      	ldr	r2, [pc, #228]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3c:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e48:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a34      	ldr	r2, [pc, #208]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e54:	f7fe f87c 	bl	8000f50 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5c:	f7fe f878 	bl	8000f50 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e357      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e7a:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d035      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d02e      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e98:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002eba:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d114      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f840 	bl	8000f50 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7fe f83c 	bl	8000f50 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e319      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0ee      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f02:	d111      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f12:	400b      	ands	r3, r1
 8002f14:	4901      	ldr	r1, [pc, #4]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40007000 	.word	0x40007000
 8002f24:	0ffffcff 	.word	0x0ffffcff
 8002f28:	4bb1      	ldr	r3, [pc, #708]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4ab0      	ldr	r2, [pc, #704]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	4bae      	ldr	r3, [pc, #696]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	49ab      	ldr	r1, [pc, #684]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f52:	4ba7      	ldr	r3, [pc, #668]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f58:	4aa5      	ldr	r2, [pc, #660]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f62:	4ba3      	ldr	r3, [pc, #652]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	49a0      	ldr	r1, [pc, #640]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f80:	4b9b      	ldr	r3, [pc, #620]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8e:	4998      	ldr	r1, [pc, #608]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fa2:	4b93      	ldr	r3, [pc, #588]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb0:	498f      	ldr	r1, [pc, #572]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fc4:	4b8a      	ldr	r3, [pc, #552]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd2:	4987      	ldr	r1, [pc, #540]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fe6:	4b82      	ldr	r3, [pc, #520]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	497e      	ldr	r1, [pc, #504]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003008:	4b79      	ldr	r3, [pc, #484]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4976      	ldr	r1, [pc, #472]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800302a:	4b71      	ldr	r3, [pc, #452]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f023 020c 	bic.w	r2, r3, #12
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003038:	496d      	ldr	r1, [pc, #436]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800304c:	4b68      	ldr	r3, [pc, #416]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305a:	4965      	ldr	r1, [pc, #404]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800306e:	4b60      	ldr	r3, [pc, #384]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307c:	495c      	ldr	r1, [pc, #368]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003090:	4b57      	ldr	r3, [pc, #348]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	4954      	ldr	r1, [pc, #336]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030b2:	4b4f      	ldr	r3, [pc, #316]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	494b      	ldr	r1, [pc, #300]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030d4:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	4943      	ldr	r1, [pc, #268]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030f6:	4b3e      	ldr	r3, [pc, #248]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003104:	493a      	ldr	r1, [pc, #232]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003118:	4b35      	ldr	r3, [pc, #212]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003126:	4932      	ldr	r1, [pc, #200]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d011      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800313a:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003148:	4929      	ldr	r1, [pc, #164]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003158:	d101      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800315a:	2301      	movs	r3, #1
 800315c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	4919      	ldr	r1, [pc, #100]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ac:	4910      	ldr	r1, [pc, #64]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d006      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80d9 	beq.w	800337a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d4:	f7fd febc 	bl	8000f50 <HAL_GetTick>
 80031d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031da:	e00b      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031dc:	f7fd feb8 	bl	8000f50 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d904      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e197      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031f4:	4b6c      	ldr	r3, [pc, #432]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ed      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d021      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11d      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003214:	4b64      	ldr	r3, [pc, #400]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003222:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003228:	0e1b      	lsrs	r3, r3, #24
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	019a      	lsls	r2, r3, #6
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	061b      	lsls	r3, r3, #24
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	071b      	lsls	r3, r3, #28
 8003248:	4957      	ldr	r1, [pc, #348]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02e      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327a:	d129      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800327c:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003290:	0f1b      	lsrs	r3, r3, #28
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	019a      	lsls	r2, r3, #6
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	071b      	lsls	r3, r3, #28
 80032b0:	493d      	ldr	r1, [pc, #244]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032be:	f023 021f 	bic.w	r2, r3, #31
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	3b01      	subs	r3, #1
 80032c8:	4937      	ldr	r1, [pc, #220]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01d      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0e1b      	lsrs	r3, r3, #24
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ea:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f0:	0f1b      	lsrs	r3, r3, #28
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	019a      	lsls	r2, r3, #6
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	4925      	ldr	r1, [pc, #148]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d011      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	019a      	lsls	r2, r3, #6
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	071b      	lsls	r3, r3, #28
 8003340:	4919      	ldr	r1, [pc, #100]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003354:	f7fd fdfc 	bl	8000f50 <HAL_GetTick>
 8003358:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800335c:	f7fd fdf8 	bl	8000f50 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e0d7      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 80cd 	bne.w	800351c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338e:	f7fd fddf 	bl	8000f50 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003394:	e00a      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003396:	f7fd fddb 	bl	8000f50 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b64      	cmp	r3, #100	; 0x64
 80033a2:	d903      	bls.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0ba      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80033a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033ac:	4b5e      	ldr	r3, [pc, #376]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b8:	d0ed      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x682>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d02e      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d12a      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033e2:	4b51      	ldr	r3, [pc, #324]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033f0:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	0f1b      	lsrs	r3, r3, #28
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	019a      	lsls	r2, r3, #6
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	061b      	lsls	r3, r3, #24
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	071b      	lsls	r3, r3, #28
 8003416:	4944      	ldr	r1, [pc, #272]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800341e:	4b42      	ldr	r3, [pc, #264]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003424:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	493d      	ldr	r1, [pc, #244]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d022      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800344c:	d11d      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003454:	0e1b      	lsrs	r3, r3, #24
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800345c:	4b32      	ldr	r3, [pc, #200]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	0f1b      	lsrs	r3, r3, #28
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	019a      	lsls	r2, r3, #6
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	431a      	orrs	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	061b      	lsls	r3, r3, #24
 800347c:	431a      	orrs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	071b      	lsls	r3, r3, #28
 8003482:	4929      	ldr	r1, [pc, #164]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d028      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	0e1b      	lsrs	r3, r3, #24
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034a4:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	019a      	lsls	r2, r3, #6
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	431a      	orrs	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	061b      	lsls	r3, r3, #24
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	071b      	lsls	r3, r3, #28
 80034ca:	4917      	ldr	r1, [pc, #92]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	4911      	ldr	r1, [pc, #68]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f4:	f7fd fd2c 	bl	8000f50 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034fc:	f7fd fd28 	bl	8000f50 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e007      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800351a:	d1ef      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800

0800352c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e040      	b.n	80035c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fb48 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2224      	movs	r2, #36	; 0x24
 8003558:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fa38 	bl	80039e0 <UART_SetConfig>
 8003570:	4603      	mov	r3, r0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e022      	b.n	80035c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fc8e 	bl	8003ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fd15 	bl	8003fe8 <UART_CheckIdleState>
 80035be:	4603      	mov	r3, r0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00e      	beq.n	8003620 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 81b9 	beq.w	8003988 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
      }
      return;
 800361e:	e1b3      	b.n	8003988 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80e3 	beq.w	80037ee <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4ba5      	ldr	r3, [pc, #660]	; (80038cc <HAL_UART_IRQHandler+0x304>)
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80d8 	beq.w	80037ee <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <HAL_UART_IRQHandler+0xa2>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <HAL_UART_IRQHandler+0xce>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2202      	movs	r2, #2
 8003684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_UART_IRQHandler+0xfa>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2204      	movs	r2, #4
 80036b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b8:	f043 0202 	orr.w	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2208      	movs	r2, #8
 80036e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ee:	f043 0208 	orr.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <HAL_UART_IRQHandler+0x15e>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003714:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 812d 	beq.w	800398c <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00c      	beq.n	8003756 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d004      	beq.n	8003776 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003772:	2b00      	cmp	r3, #0
 8003774:	d031      	beq.n	80037da <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fce5 	bl	8004146 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d123      	bne.n	80037d2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003798:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d013      	beq.n	80037ca <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a4a      	ldr	r2, [pc, #296]	; (80038d0 <HAL_UART_IRQHandler+0x308>)
 80037a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fe7b 	bl	80014aa <HAL_DMA_Abort_IT>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d017      	beq.n	80037ea <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80037c4:	4610      	mov	r0, r2
 80037c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	e00f      	b.n	80037ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8f2 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	e00b      	b.n	80037ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8ee 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d8:	e007      	b.n	80037ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8ea 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80037e8:	e0d0      	b.n	800398c <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ea:	bf00      	nop
    return;
 80037ec:	e0ce      	b.n	800398c <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	f040 80a7 	bne.w	8003946 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80a1 	beq.w	8003946 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 809b 	beq.w	8003946 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2210      	movs	r2, #16
 8003816:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d156      	bne.n	80038d4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003830:	893b      	ldrh	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80ac 	beq.w	8003990 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800383e:	893a      	ldrh	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	f080 80a5 	bcs.w	8003990 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	893a      	ldrh	r2, [r7, #8]
 800384a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003858:	d02a      	beq.n	80038b0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003868:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003888:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0210 	bic.w	r2, r2, #16
 80038a4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fd8d 	bl	80013ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f87f 	bl	80039c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038ca:	e061      	b.n	8003990 <HAL_UART_IRQHandler+0x3c8>
 80038cc:	04000120 	.word	0x04000120
 80038d0:	080041a5 	.word	0x080041a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d050      	beq.n	8003994 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 80038f2:	897b      	ldrh	r3, [r7, #10]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d04d      	beq.n	8003994 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003906:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0210 	bic.w	r2, r2, #16
 8003938:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f842 	bl	80039c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003944:	e026      	b.n	8003994 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00d      	beq.n	800396c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01a      	beq.n	8003998 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
    }
    return;
 800396a:	e015      	b.n	8003998 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <HAL_UART_IRQHandler+0x3d2>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fc25 	bl	80041d0 <UART_EndTransmit_IT>
    return;
 8003986:	e008      	b.n	800399a <HAL_UART_IRQHandler+0x3d2>
      return;
 8003988:	bf00      	nop
 800398a:	e006      	b.n	800399a <HAL_UART_IRQHandler+0x3d2>
    return;
 800398c:	bf00      	nop
 800398e:	e004      	b.n	800399a <HAL_UART_IRQHandler+0x3d2>
      return;
 8003990:	bf00      	nop
 8003992:	e002      	b.n	800399a <HAL_UART_IRQHandler+0x3d2>
      return;
 8003994:	bf00      	nop
 8003996:	e000      	b.n	800399a <HAL_UART_IRQHandler+0x3d2>
    return;
 8003998:	bf00      	nop
  }

}
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4ba7      	ldr	r3, [pc, #668]	; (8003ca8 <UART_SetConfig+0x2c8>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a95      	ldr	r2, [pc, #596]	; (8003cac <UART_SetConfig+0x2cc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d120      	bne.n	8003a9e <UART_SetConfig+0xbe>
 8003a5c:	4b94      	ldr	r3, [pc, #592]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d816      	bhi.n	8003a98 <UART_SetConfig+0xb8>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0x90>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a8d 	.word	0x08003a8d
 8003a78:	08003a87 	.word	0x08003a87
 8003a7c:	08003a93 	.word	0x08003a93
 8003a80:	2301      	movs	r3, #1
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e14f      	b.n	8003d26 <UART_SetConfig+0x346>
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e14c      	b.n	8003d26 <UART_SetConfig+0x346>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e149      	b.n	8003d26 <UART_SetConfig+0x346>
 8003a92:	2308      	movs	r3, #8
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e146      	b.n	8003d26 <UART_SetConfig+0x346>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e143      	b.n	8003d26 <UART_SetConfig+0x346>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a84      	ldr	r2, [pc, #528]	; (8003cb4 <UART_SetConfig+0x2d4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d132      	bne.n	8003b0e <UART_SetConfig+0x12e>
 8003aa8:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d828      	bhi.n	8003b08 <UART_SetConfig+0x128>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0xdc>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003b09 	.word	0x08003b09
 8003ac4:	08003b09 	.word	0x08003b09
 8003ac8:	08003b09 	.word	0x08003b09
 8003acc:	08003afd 	.word	0x08003afd
 8003ad0:	08003b09 	.word	0x08003b09
 8003ad4:	08003b09 	.word	0x08003b09
 8003ad8:	08003b09 	.word	0x08003b09
 8003adc:	08003af7 	.word	0x08003af7
 8003ae0:	08003b09 	.word	0x08003b09
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b09 	.word	0x08003b09
 8003aec:	08003b03 	.word	0x08003b03
 8003af0:	2300      	movs	r3, #0
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e117      	b.n	8003d26 <UART_SetConfig+0x346>
 8003af6:	2302      	movs	r3, #2
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e114      	b.n	8003d26 <UART_SetConfig+0x346>
 8003afc:	2304      	movs	r3, #4
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e111      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b02:	2308      	movs	r3, #8
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e10e      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e10b      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a69      	ldr	r2, [pc, #420]	; (8003cb8 <UART_SetConfig+0x2d8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d120      	bne.n	8003b5a <UART_SetConfig+0x17a>
 8003b18:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b22:	2b30      	cmp	r3, #48	; 0x30
 8003b24:	d013      	beq.n	8003b4e <UART_SetConfig+0x16e>
 8003b26:	2b30      	cmp	r3, #48	; 0x30
 8003b28:	d814      	bhi.n	8003b54 <UART_SetConfig+0x174>
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d009      	beq.n	8003b42 <UART_SetConfig+0x162>
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d810      	bhi.n	8003b54 <UART_SetConfig+0x174>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <UART_SetConfig+0x15c>
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d006      	beq.n	8003b48 <UART_SetConfig+0x168>
 8003b3a:	e00b      	b.n	8003b54 <UART_SetConfig+0x174>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e0f1      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b42:	2302      	movs	r3, #2
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e0ee      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e0eb      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b4e:	2308      	movs	r3, #8
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e0e8      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b54:	2310      	movs	r3, #16
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e0e5      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a57      	ldr	r2, [pc, #348]	; (8003cbc <UART_SetConfig+0x2dc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d120      	bne.n	8003ba6 <UART_SetConfig+0x1c6>
 8003b64:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b70:	d013      	beq.n	8003b9a <UART_SetConfig+0x1ba>
 8003b72:	2bc0      	cmp	r3, #192	; 0xc0
 8003b74:	d814      	bhi.n	8003ba0 <UART_SetConfig+0x1c0>
 8003b76:	2b80      	cmp	r3, #128	; 0x80
 8003b78:	d009      	beq.n	8003b8e <UART_SetConfig+0x1ae>
 8003b7a:	2b80      	cmp	r3, #128	; 0x80
 8003b7c:	d810      	bhi.n	8003ba0 <UART_SetConfig+0x1c0>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <UART_SetConfig+0x1a8>
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d006      	beq.n	8003b94 <UART_SetConfig+0x1b4>
 8003b86:	e00b      	b.n	8003ba0 <UART_SetConfig+0x1c0>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e0cb      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e0c8      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b94:	2304      	movs	r3, #4
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e0c5      	b.n	8003d26 <UART_SetConfig+0x346>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e0c2      	b.n	8003d26 <UART_SetConfig+0x346>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e0bf      	b.n	8003d26 <UART_SetConfig+0x346>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a45      	ldr	r2, [pc, #276]	; (8003cc0 <UART_SetConfig+0x2e0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d125      	bne.n	8003bfc <UART_SetConfig+0x21c>
 8003bb0:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bbe:	d017      	beq.n	8003bf0 <UART_SetConfig+0x210>
 8003bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc4:	d817      	bhi.n	8003bf6 <UART_SetConfig+0x216>
 8003bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bca:	d00b      	beq.n	8003be4 <UART_SetConfig+0x204>
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd0:	d811      	bhi.n	8003bf6 <UART_SetConfig+0x216>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <UART_SetConfig+0x1fe>
 8003bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bda:	d006      	beq.n	8003bea <UART_SetConfig+0x20a>
 8003bdc:	e00b      	b.n	8003bf6 <UART_SetConfig+0x216>
 8003bde:	2300      	movs	r3, #0
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e0a0      	b.n	8003d26 <UART_SetConfig+0x346>
 8003be4:	2302      	movs	r3, #2
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e09d      	b.n	8003d26 <UART_SetConfig+0x346>
 8003bea:	2304      	movs	r3, #4
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e09a      	b.n	8003d26 <UART_SetConfig+0x346>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e097      	b.n	8003d26 <UART_SetConfig+0x346>
 8003bf6:	2310      	movs	r3, #16
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e094      	b.n	8003d26 <UART_SetConfig+0x346>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <UART_SetConfig+0x2e4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d125      	bne.n	8003c52 <UART_SetConfig+0x272>
 8003c06:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c14:	d017      	beq.n	8003c46 <UART_SetConfig+0x266>
 8003c16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c1a:	d817      	bhi.n	8003c4c <UART_SetConfig+0x26c>
 8003c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c20:	d00b      	beq.n	8003c3a <UART_SetConfig+0x25a>
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c26:	d811      	bhi.n	8003c4c <UART_SetConfig+0x26c>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <UART_SetConfig+0x254>
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c30:	d006      	beq.n	8003c40 <UART_SetConfig+0x260>
 8003c32:	e00b      	b.n	8003c4c <UART_SetConfig+0x26c>
 8003c34:	2301      	movs	r3, #1
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e075      	b.n	8003d26 <UART_SetConfig+0x346>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e072      	b.n	8003d26 <UART_SetConfig+0x346>
 8003c40:	2304      	movs	r3, #4
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e06f      	b.n	8003d26 <UART_SetConfig+0x346>
 8003c46:	2308      	movs	r3, #8
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e06c      	b.n	8003d26 <UART_SetConfig+0x346>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e069      	b.n	8003d26 <UART_SetConfig+0x346>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <UART_SetConfig+0x2e8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d137      	bne.n	8003ccc <UART_SetConfig+0x2ec>
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c6a:	d017      	beq.n	8003c9c <UART_SetConfig+0x2bc>
 8003c6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c70:	d817      	bhi.n	8003ca2 <UART_SetConfig+0x2c2>
 8003c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c76:	d00b      	beq.n	8003c90 <UART_SetConfig+0x2b0>
 8003c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7c:	d811      	bhi.n	8003ca2 <UART_SetConfig+0x2c2>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <UART_SetConfig+0x2aa>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d006      	beq.n	8003c96 <UART_SetConfig+0x2b6>
 8003c88:	e00b      	b.n	8003ca2 <UART_SetConfig+0x2c2>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e04a      	b.n	8003d26 <UART_SetConfig+0x346>
 8003c90:	2302      	movs	r3, #2
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e047      	b.n	8003d26 <UART_SetConfig+0x346>
 8003c96:	2304      	movs	r3, #4
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e044      	b.n	8003d26 <UART_SetConfig+0x346>
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e041      	b.n	8003d26 <UART_SetConfig+0x346>
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e03e      	b.n	8003d26 <UART_SetConfig+0x346>
 8003ca8:	efff69f3 	.word	0xefff69f3
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40004400 	.word	0x40004400
 8003cb8:	40004800 	.word	0x40004800
 8003cbc:	40004c00 	.word	0x40004c00
 8003cc0:	40005000 	.word	0x40005000
 8003cc4:	40011400 	.word	0x40011400
 8003cc8:	40007800 	.word	0x40007800
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a71      	ldr	r2, [pc, #452]	; (8003e98 <UART_SetConfig+0x4b8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d125      	bne.n	8003d22 <UART_SetConfig+0x342>
 8003cd6:	4b71      	ldr	r3, [pc, #452]	; (8003e9c <UART_SetConfig+0x4bc>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ce0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ce4:	d017      	beq.n	8003d16 <UART_SetConfig+0x336>
 8003ce6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cea:	d817      	bhi.n	8003d1c <UART_SetConfig+0x33c>
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	d00b      	beq.n	8003d0a <UART_SetConfig+0x32a>
 8003cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf6:	d811      	bhi.n	8003d1c <UART_SetConfig+0x33c>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <UART_SetConfig+0x324>
 8003cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d00:	d006      	beq.n	8003d10 <UART_SetConfig+0x330>
 8003d02:	e00b      	b.n	8003d1c <UART_SetConfig+0x33c>
 8003d04:	2300      	movs	r3, #0
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e00d      	b.n	8003d26 <UART_SetConfig+0x346>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e00a      	b.n	8003d26 <UART_SetConfig+0x346>
 8003d10:	2304      	movs	r3, #4
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e007      	b.n	8003d26 <UART_SetConfig+0x346>
 8003d16:	2308      	movs	r3, #8
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e004      	b.n	8003d26 <UART_SetConfig+0x346>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e001      	b.n	8003d26 <UART_SetConfig+0x346>
 8003d22:	2310      	movs	r3, #16
 8003d24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2e:	d15b      	bne.n	8003de8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003d30:	7ffb      	ldrb	r3, [r7, #31]
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d827      	bhi.n	8003d86 <UART_SetConfig+0x3a6>
 8003d36:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <UART_SetConfig+0x35c>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d61 	.word	0x08003d61
 8003d40:	08003d69 	.word	0x08003d69
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d87 	.word	0x08003d87
 8003d4c:	08003d77 	.word	0x08003d77
 8003d50:	08003d87 	.word	0x08003d87
 8003d54:	08003d87 	.word	0x08003d87
 8003d58:	08003d87 	.word	0x08003d87
 8003d5c:	08003d7f 	.word	0x08003d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d60:	f7fe ffcc 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8003d64:	61b8      	str	r0, [r7, #24]
        break;
 8003d66:	e013      	b.n	8003d90 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d68:	f7fe ffdc 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 8003d6c:	61b8      	str	r0, [r7, #24]
        break;
 8003d6e:	e00f      	b.n	8003d90 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d70:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <UART_SetConfig+0x4c0>)
 8003d72:	61bb      	str	r3, [r7, #24]
        break;
 8003d74:	e00c      	b.n	8003d90 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d76:	f7fe fed3 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8003d7a:	61b8      	str	r0, [r7, #24]
        break;
 8003d7c:	e008      	b.n	8003d90 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d82:	61bb      	str	r3, [r7, #24]
        break;
 8003d84:	e004      	b.n	8003d90 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d074      	beq.n	8003e80 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	005a      	lsls	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	441a      	add	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b0f      	cmp	r3, #15
 8003db2:	d916      	bls.n	8003de2 <UART_SetConfig+0x402>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dba:	d212      	bcs.n	8003de2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f023 030f 	bic.w	r3, r3, #15
 8003dc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	89fb      	ldrh	r3, [r7, #14]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	89fa      	ldrh	r2, [r7, #14]
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	e04e      	b.n	8003e80 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	77bb      	strb	r3, [r7, #30]
 8003de6:	e04b      	b.n	8003e80 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d827      	bhi.n	8003e3e <UART_SetConfig+0x45e>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x414>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e29 	.word	0x08003e29
 8003e00:	08003e3f 	.word	0x08003e3f
 8003e04:	08003e2f 	.word	0x08003e2f
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e3f 	.word	0x08003e3f
 8003e10:	08003e3f 	.word	0x08003e3f
 8003e14:	08003e37 	.word	0x08003e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7fe ff70 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8003e1c:	61b8      	str	r0, [r7, #24]
        break;
 8003e1e:	e013      	b.n	8003e48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7fe ff80 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 8003e24:	61b8      	str	r0, [r7, #24]
        break;
 8003e26:	e00f      	b.n	8003e48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e28:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <UART_SetConfig+0x4c0>)
 8003e2a:	61bb      	str	r3, [r7, #24]
        break;
 8003e2c:	e00c      	b.n	8003e48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7fe fe77 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8003e32:	61b8      	str	r0, [r7, #24]
        break;
 8003e34:	e008      	b.n	8003e48 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	61bb      	str	r3, [r7, #24]
        break;
 8003e3c:	e004      	b.n	8003e48 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	77bb      	strb	r3, [r7, #30]
        break;
 8003e46:	bf00      	nop
    }

    if (pclk != 0U)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d018      	beq.n	8003e80 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	085a      	lsrs	r2, r3, #1
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	441a      	add	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	d908      	bls.n	8003e7c <UART_SetConfig+0x49c>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d204      	bcs.n	8003e7c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	e001      	b.n	8003e80 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40007c00 	.word	0x40007c00
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	00f42400 	.word	0x00f42400

08003ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01a      	beq.n	8003fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fa2:	d10a      	bne.n	8003fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff8:	f7fc ffaa 	bl	8000f50 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b08      	cmp	r3, #8
 800400a:	d10e      	bne.n	800402a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800400c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f817 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e00d      	b.n	8004046 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405e:	e05e      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d05a      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004068:	f7fc ff72 	bl	8000f50 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <UART_WaitOnFlagUntilTimeout+0x30>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11b      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800408c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e043      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02c      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d124      	bne.n	800411e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e00f      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	429a      	cmp	r2, r3
 800413a:	d091      	beq.n	8004060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800415c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0210 	bic.w	r2, r2, #16
 8004184:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fbf6 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fbd3 	bl	80039a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004204:	b084      	sub	sp, #16
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	f107 001c 	add.w	r0, r7, #28
 8004212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	2b01      	cmp	r3, #1
 800421a:	d120      	bne.n	800425e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <USB_CoreInit+0xac>)
 800422e:	4013      	ands	r3, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa5a 	bl	800470c <USB_CoreReset>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	e010      	b.n	8004280 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa4e 	bl	800470c <USB_CoreReset>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	2b01      	cmp	r3, #1
 8004284:	d10b      	bne.n	800429e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f043 0206 	orr.w	r2, r3, #6
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042aa:	b004      	add	sp, #16
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	ffbdffbf 	.word	0xffbdffbf

080042b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 0201 	bic.w	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d106      	bne.n	8004302 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]
 8004300:	e00b      	b.n	800431a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	60da      	str	r2, [r3, #12]
 8004314:	e001      	b.n	800431a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e003      	b.n	8004322 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800431a:	2032      	movs	r0, #50	; 0x32
 800431c:	f7fc fe24 	bl	8000f68 <HAL_Delay>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800432c:	b084      	sub	sp, #16
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800433a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e009      	b.n	8004360 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3340      	adds	r3, #64	; 0x40
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	2200      	movs	r2, #0
 8004358:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3301      	adds	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0e      	cmp	r3, #14
 8004364:	d9f2      	bls.n	800434c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11c      	bne.n	80043a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437a:	f043 0302 	orr.w	r3, r3, #2
 800437e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e005      	b.n	80043b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043b8:	461a      	mov	r2, r3
 80043ba:	2300      	movs	r3, #0
 80043bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	4619      	mov	r1, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043cc:	461a      	mov	r2, r3
 80043ce:	680b      	ldr	r3, [r1, #0]
 80043d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10c      	bne.n	80043f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043de:	2100      	movs	r1, #0
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f959 	bl	8004698 <USB_SetDevSpeed>
 80043e6:	e018      	b.n	800441a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043e8:	2101      	movs	r1, #1
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f954 	bl	8004698 <USB_SetDevSpeed>
 80043f0:	e013      	b.n	800441a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d10c      	bne.n	8004412 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043fe:	2100      	movs	r1, #0
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f949 	bl	8004698 <USB_SetDevSpeed>
 8004406:	e008      	b.n	800441a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004408:	2101      	movs	r1, #1
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f944 	bl	8004698 <USB_SetDevSpeed>
 8004410:	e003      	b.n	800441a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004412:	2103      	movs	r1, #3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f93f 	bl	8004698 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800441a:	2110      	movs	r1, #16
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8f3 	bl	8004608 <USB_FlushTxFifo>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f911 	bl	8004654 <USB_FlushRxFifo>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004442:	461a      	mov	r2, r3
 8004444:	2300      	movs	r3, #0
 8004446:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	461a      	mov	r2, r3
 8004450:	2300      	movs	r3, #0
 8004452:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445a:	461a      	mov	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	e043      	b.n	80044ee <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800447c:	d118      	bne.n	80044b0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	461a      	mov	r2, r3
 8004492:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e013      	b.n	80044c2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	461a      	mov	r2, r3
 80044a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e008      	b.n	80044c2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	461a      	mov	r2, r3
 80044be:	2300      	movs	r3, #0
 80044c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ce:	461a      	mov	r2, r3
 80044d0:	2300      	movs	r3, #0
 80044d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e0:	461a      	mov	r2, r3
 80044e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	3301      	adds	r3, #1
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d3b7      	bcc.n	8004466 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e043      	b.n	8004584 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800450e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004512:	d118      	bne.n	8004546 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e013      	b.n	8004558 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e008      	b.n	8004558 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004552:	461a      	mov	r2, r3
 8004554:	2300      	movs	r3, #0
 8004556:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	2300      	movs	r3, #0
 8004568:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	461a      	mov	r2, r3
 8004578:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800457c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3301      	adds	r3, #1
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3b7      	bcc.n	80044fc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800459a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800459e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f043 0210 	orr.w	r2, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <USB_DevInit+0x2d4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f043 0208 	orr.w	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <USB_DevInit+0x2d8>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045fc:	b004      	add	sp, #16
 80045fe:	4770      	bx	lr
 8004600:	803c3800 	.word	0x803c3800
 8004604:	40000004 	.word	0x40000004

08004608 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3301      	adds	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <USB_FlushTxFifo+0x48>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e006      	b.n	8004642 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b20      	cmp	r3, #32
 800463e:	d0f0      	beq.n	8004622 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	00030d40 	.word	0x00030d40

08004654 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2210      	movs	r2, #16
 8004664:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3301      	adds	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <USB_FlushRxFifo+0x40>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e006      	b.n	8004686 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b10      	cmp	r3, #16
 8004682:	d0f0      	beq.n	8004666 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	00030d40 	.word	0x00030d40

08004698 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046e4:	f023 0303 	bic.w	r3, r3, #3
 80046e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f8:	f043 0302 	orr.w	r3, r3, #2
 80046fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <USB_CoreReset+0x64>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e01b      	b.n	8004762 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	daf2      	bge.n	8004718 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <USB_CoreReset+0x64>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e006      	b.n	8004762 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d0f0      	beq.n	8004742 <USB_CoreReset+0x36>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	00030d40 	.word	0x00030d40

08004774 <__libc_init_array>:
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	4d0d      	ldr	r5, [pc, #52]	; (80047ac <__libc_init_array+0x38>)
 8004778:	4c0d      	ldr	r4, [pc, #52]	; (80047b0 <__libc_init_array+0x3c>)
 800477a:	1b64      	subs	r4, r4, r5
 800477c:	10a4      	asrs	r4, r4, #2
 800477e:	2600      	movs	r6, #0
 8004780:	42a6      	cmp	r6, r4
 8004782:	d109      	bne.n	8004798 <__libc_init_array+0x24>
 8004784:	4d0b      	ldr	r5, [pc, #44]	; (80047b4 <__libc_init_array+0x40>)
 8004786:	4c0c      	ldr	r4, [pc, #48]	; (80047b8 <__libc_init_array+0x44>)
 8004788:	f000 f820 	bl	80047cc <_init>
 800478c:	1b64      	subs	r4, r4, r5
 800478e:	10a4      	asrs	r4, r4, #2
 8004790:	2600      	movs	r6, #0
 8004792:	42a6      	cmp	r6, r4
 8004794:	d105      	bne.n	80047a2 <__libc_init_array+0x2e>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	f855 3b04 	ldr.w	r3, [r5], #4
 800479c:	4798      	blx	r3
 800479e:	3601      	adds	r6, #1
 80047a0:	e7ee      	b.n	8004780 <__libc_init_array+0xc>
 80047a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a6:	4798      	blx	r3
 80047a8:	3601      	adds	r6, #1
 80047aa:	e7f2      	b.n	8004792 <__libc_init_array+0x1e>
 80047ac:	08004804 	.word	0x08004804
 80047b0:	08004804 	.word	0x08004804
 80047b4:	08004804 	.word	0x08004804
 80047b8:	08004808 	.word	0x08004808

080047bc <memset>:
 80047bc:	4402      	add	r2, r0
 80047be:	4603      	mov	r3, r0
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d100      	bne.n	80047c6 <memset+0xa>
 80047c4:	4770      	bx	lr
 80047c6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ca:	e7f9      	b.n	80047c0 <memset+0x4>

080047cc <_init>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr

080047d8 <_fini>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	bf00      	nop
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr
