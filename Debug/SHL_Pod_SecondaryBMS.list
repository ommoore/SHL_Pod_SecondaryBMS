
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011070  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030a8  08011240  08011240  00021240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142e8  080142e8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080142e8  080142e8  000242e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142f0  080142f0  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142f0  080142f0  000242f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142f4  080142f4  000242f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080142f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200001e4  080144dc  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080144dc  00030588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016465  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002368  00000000  00000000  00046679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000489e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00049ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028392  00000000  00000000  0004aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157a4  00000000  00000000  00072e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b7d  00000000  00000000  000885d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d50  00000000  00000000  001801a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011228 	.word	0x08011228

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08011228 	.word	0x08011228

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <TinyBMS_UART_ACK>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  0x00 - CMD ERROR , 0x01 - CRC ERROR
 *
 */
uint8_t TinyBMS_UART_ACK(UART_HandleTypeDef *huart) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ACK\r\n");
 8000ef4:	484d      	ldr	r0, [pc, #308]	; (800102c <TinyBMS_UART_ACK+0x140>)
 8000ef6:	f00d f919 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8000efa:	23ff      	movs	r3, #255	; 0xff
 8000efc:	73fb      	strb	r3, [r7, #15]

	uint8_t cmd = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73bb      	strb	r3, [r7, #14]
	uint16_t CRC_calc = 0, CRC_reply = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	81bb      	strh	r3, [r7, #12]
 8000f06:	2300      	movs	r3, #0
 8000f08:	817b      	strh	r3, [r7, #10]

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check ACK/NACK
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4948      	ldr	r1, [pc, #288]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f0e:	4849      	ldr	r0, [pc, #292]	; (8001034 <TinyBMS_UART_ACK+0x148>)
 8000f10:	f00b f944 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8000f14:	4b46      	ldr	r3, [pc, #280]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2baa      	cmp	r3, #170	; 0xaa
 8000f1a:	d17a      	bne.n	8001012 <TinyBMS_UART_ACK+0x126>

		//[NACK]
		if(rx_buffer[1] == NACK) {
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d136      	bne.n	8000f92 <TinyBMS_UART_ACK+0xa6>
			printf("Response from BMS [NACK]\r\n");
 8000f24:	4844      	ldr	r0, [pc, #272]	; (8001038 <TinyBMS_UART_ACK+0x14c>)
 8000f26:	f00d f901 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from NACK reply
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4943      	ldr	r1, [pc, #268]	; (800103c <TinyBMS_UART_ACK+0x150>)
 8000f2e:	4841      	ldr	r0, [pc, #260]	; (8001034 <TinyBMS_UART_ACK+0x148>)
 8000f30:	f00b f934 	bl	800c19c <HAL_UART_Receive_IT>

			cmd = rx_buffer[2];
 8000f34:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f36:	789b      	ldrb	r3, [r3, #2]
 8000f38:	73bb      	strb	r3, [r7, #14]
			printf("cmd: 0x%02X\r\n", cmd);
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4840      	ldr	r0, [pc, #256]	; (8001040 <TinyBMS_UART_ACK+0x154>)
 8000f40:	f00d f86e 	bl	800e020 <iprintf>

			uint8_t error = rx_buffer[3];
 8000f44:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f46:	78db      	ldrb	r3, [r3, #3]
 8000f48:	727b      	strb	r3, [r7, #9]

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8000f4a:	4b39      	ldr	r3, [pc, #228]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f4c:	795b      	ldrb	r3, [r3, #5]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f54:	791b      	ldrb	r3, [r3, #4]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	817b      	strh	r3, [r7, #10]
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of NACK response
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4833      	ldr	r0, [pc, #204]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f62:	f005 ff71 	bl	8006e48 <CRC16>
 8000f66:	4603      	mov	r3, r0
 8000f68:	81bb      	strh	r3, [r7, #12]

			if(CRC_calc == CRC_reply) {
 8000f6a:	89ba      	ldrh	r2, [r7, #12]
 8000f6c:	897b      	ldrh	r3, [r7, #10]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d105      	bne.n	8000f7e <TinyBMS_UART_ACK+0x92>
				printf("CRC pass\r\n");
 8000f72:	4834      	ldr	r0, [pc, #208]	; (8001044 <TinyBMS_UART_ACK+0x158>)
 8000f74:	f00d f8da 	bl	800e12c <puts>
				retval = CMD_FAILURE;
 8000f78:	23ff      	movs	r3, #255	; 0xff
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e004      	b.n	8000f88 <TinyBMS_UART_ACK+0x9c>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8000f7e:	4832      	ldr	r0, [pc, #200]	; (8001048 <TinyBMS_UART_ACK+0x15c>)
 8000f80:	f00d f8d4 	bl	800e12c <puts>
				retval = CMD_FAILURE;
 8000f84:	23ff      	movs	r3, #255	; 0xff
 8000f86:	73fb      	strb	r3, [r7, #15]
			}
			reportBMSError(error);
 8000f88:	7a7b      	ldrb	r3, [r7, #9]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 ff3a 	bl	8006e04 <reportBMSError>
 8000f90:	e047      	b.n	8001022 <TinyBMS_UART_ACK+0x136>

		//[ACK]
		} else if(rx_buffer[1] == UART_TBMS_ACK) {
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d132      	bne.n	8001000 <TinyBMS_UART_ACK+0x114>
			printf("Response from BMS [ACK]\r\n");
 8000f9a:	482c      	ldr	r0, [pc, #176]	; (800104c <TinyBMS_UART_ACK+0x160>)
 8000f9c:	f00d f8c6 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 3); //read bytes 3-5 from ACK reply
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4926      	ldr	r1, [pc, #152]	; (800103c <TinyBMS_UART_ACK+0x150>)
 8000fa4:	4823      	ldr	r0, [pc, #140]	; (8001034 <TinyBMS_UART_ACK+0x148>)
 8000fa6:	f00b f8f9 	bl	800c19c <HAL_UART_Receive_IT>

			cmd = rx_buffer[2];
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000fac:	789b      	ldrb	r3, [r3, #2]
 8000fae:	73bb      	strb	r3, [r7, #14]
			printf("cmd: 0x%02X\r\n", cmd);
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4822      	ldr	r0, [pc, #136]	; (8001040 <TinyBMS_UART_ACK+0x154>)
 8000fb6:	f00d f833 	bl	800e020 <iprintf>

			CRC_reply = ((rx_buffer[4] << 8) | rx_buffer[3]);
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000fc4:	78db      	ldrb	r3, [r3, #3]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	817b      	strh	r3, [r7, #10]
			CRC_calc = CRC16(rx_buffer, 3); //Calc CRC for bytes 1-3 of ACK response
 8000fce:	2103      	movs	r1, #3
 8000fd0:	4817      	ldr	r0, [pc, #92]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8000fd2:	f005 ff39 	bl	8006e48 <CRC16>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	81bb      	strh	r3, [r7, #12]

			if(CRC_calc == CRC_reply) {
 8000fda:	89ba      	ldrh	r2, [r7, #12]
 8000fdc:	897b      	ldrh	r3, [r7, #10]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d108      	bne.n	8000ff4 <TinyBMS_UART_ACK+0x108>
				printf("CRC pass\r\n");
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <TinyBMS_UART_ACK+0x158>)
 8000fe4:	f00d f8a2 	bl	800e12c <puts>
				printf("ACK!\r\n");
 8000fe8:	4819      	ldr	r0, [pc, #100]	; (8001050 <TinyBMS_UART_ACK+0x164>)
 8000fea:	f00d f89f 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e016      	b.n	8001022 <TinyBMS_UART_ACK+0x136>
			} else {
				printf("CRC fail in BMS ACK\r\n");
 8000ff4:	4817      	ldr	r0, [pc, #92]	; (8001054 <TinyBMS_UART_ACK+0x168>)
 8000ff6:	f00d f899 	bl	800e12c <puts>
				retval = CMD_FAILURE;
 8000ffa:	23ff      	movs	r3, #255	; 0xff
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e010      	b.n	8001022 <TinyBMS_UART_ACK+0x136>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x01 but was 0x%02X\r\n", rx_buffer[1]);
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	4619      	mov	r1, r3
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <TinyBMS_UART_ACK+0x16c>)
 8001008:	f00d f80a 	bl	800e020 <iprintf>
			retval = CMD_FAILURE;
 800100c:	23ff      	movs	r3, #255	; 0xff
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e007      	b.n	8001022 <TinyBMS_UART_ACK+0x136>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <TinyBMS_UART_ACK+0x144>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <TinyBMS_UART_ACK+0x170>)
 800101a:	f00d f801 	bl	800e020 <iprintf>
		retval = CMD_FAILURE;
 800101e:	23ff      	movs	r3, #255	; 0xff
 8001020:	73fb      	strb	r3, [r7, #15]
	}
	return retval;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	08011240 	.word	0x08011240
 8001030:	2000037c 	.word	0x2000037c
 8001034:	20000228 	.word	0x20000228
 8001038:	08011254 	.word	0x08011254
 800103c:	2000037e 	.word	0x2000037e
 8001040:	08011270 	.word	0x08011270
 8001044:	08011280 	.word	0x08011280
 8001048:	0801128c 	.word	0x0801128c
 800104c:	080112a4 	.word	0x080112a4
 8001050:	080112c0 	.word	0x080112c0
 8001054:	080112c8 	.word	0x080112c8
 8001058:	080112e0 	.word	0x080112e0
 800105c:	08011318 	.word	0x08011318

08001060 <TinyBMS_UART_ReadRegBlock>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated
 * 						   by malloc(size_t size).
 */
uint8_t TinyBMS_UART_ReadRegBlock(UART_HandleTypeDef *huart, uint8_t rl, uint16_t addr) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b098      	sub	sp, #96	; 0x60
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
 800106c:	4613      	mov	r3, r2
 800106e:	803b      	strh	r3, [r7, #0]
	printf("TinyBMS_UART_ReadRegBlock\r\n");
 8001070:	48ac      	ldr	r0, [pc, #688]	; (8001324 <TinyBMS_UART_ReadRegBlock+0x2c4>)
 8001072:	f00d f85b 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8001076:	23ff      	movs	r3, #255	; 0xff
 8001078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	uint8_t tx_buffer[50];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001082:	2300      	movs	r3, #0
 8001084:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001088:	2300      	movs	r3, #0
 800108a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800108e:	2300      	movs	r3, #0
 8001090:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800109a:	2300      	movs	r3, #0
 800109c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80010a6:	23aa      	movs	r3, #170	; 0xaa
 80010a8:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = UART_TBMS_READ_REG_BLOCK;
 80010aa:	2307      	movs	r3, #7
 80010ac:	737b      	strb	r3, [r7, #13]

	tx_buffer[2] = rl;
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	73bb      	strb	r3, [r7, #14]

	ADDR_LSB = (addr & 0xFF);
 80010b2:	883b      	ldrh	r3, [r7, #0]
 80010b4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	ADDR_MSB = ((addr >> 8) & 0xFF);
 80010b8:	883b      	ldrh	r3, [r7, #0]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	tx_buffer[3] = ADDR_LSB;
 80010c2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80010c6:	73fb      	strb	r3, [r7, #15]
	tx_buffer[4] = ADDR_MSB;
 80010c8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80010cc:	743b      	strb	r3, [r7, #16]

	CRC_request = CRC16(tx_buffer, 5);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2105      	movs	r1, #5
 80010d4:	4618      	mov	r0, r3
 80010d6:	f005 feb7 	bl	8006e48 <CRC16>
 80010da:	4603      	mov	r3, r0
 80010dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	CRC_LSB = (CRC_request & 0xFF);
 80010e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80010e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80010e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[5] = CRC_LSB;
 80010f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010f8:	747b      	strb	r3, [r7, #17]
	tx_buffer[6] = CRC_MSB;
 80010fa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010fe:	74bb      	strb	r3, [r7, #18]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 7);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2207      	movs	r2, #7
 8001106:	4619      	mov	r1, r3
 8001108:	4887      	ldr	r0, [pc, #540]	; (8001328 <TinyBMS_UART_ReadRegBlock+0x2c8>)
 800110a:	f00a ffd9 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 800110e:	2202      	movs	r2, #2
 8001110:	4986      	ldr	r1, [pc, #536]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 8001112:	4885      	ldr	r0, [pc, #532]	; (8001328 <TinyBMS_UART_ReadRegBlock+0x2c8>)
 8001114:	f00b f842 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8001118:	4b84      	ldr	r3, [pc, #528]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2baa      	cmp	r3, #170	; 0xaa
 800111e:	f040 80f5 	bne.w	800130c <TinyBMS_UART_ReadRegBlock+0x2ac>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8001122:	4b82      	ldr	r3, [pc, #520]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d130      	bne.n	800118c <TinyBMS_UART_ReadRegBlock+0x12c>
			printf("Response from BMS [ERROR]\r\n");
 800112a:	4881      	ldr	r0, [pc, #516]	; (8001330 <TinyBMS_UART_ReadRegBlock+0x2d0>)
 800112c:	f00c fffe 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8001130:	2204      	movs	r2, #4
 8001132:	4980      	ldr	r1, [pc, #512]	; (8001334 <TinyBMS_UART_ReadRegBlock+0x2d4>)
 8001134:	487c      	ldr	r0, [pc, #496]	; (8001328 <TinyBMS_UART_ReadRegBlock+0x2c8>)
 8001136:	f00b f831 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 800113a:	4b7c      	ldr	r3, [pc, #496]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800113c:	78db      	ldrb	r3, [r3, #3]
 800113e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8001142:	4b7a      	ldr	r3, [pc, #488]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 8001144:	795b      	ldrb	r3, [r3, #5]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b78      	ldr	r3, [pc, #480]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8001158:	2104      	movs	r1, #4
 800115a:	4874      	ldr	r0, [pc, #464]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800115c:	f005 fe74 	bl	8006e48 <CRC16>
 8001160:	4603      	mov	r3, r0
 8001162:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

			if(CRC_calc == CRC_reply) {
 8001166:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800116a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800116e:	429a      	cmp	r2, r3
 8001170:	d103      	bne.n	800117a <TinyBMS_UART_ReadRegBlock+0x11a>
				printf("CRC pass\r\n");
 8001172:	4871      	ldr	r0, [pc, #452]	; (8001338 <TinyBMS_UART_ReadRegBlock+0x2d8>)
 8001174:	f00c ffda 	bl	800e12c <puts>
 8001178:	e002      	b.n	8001180 <TinyBMS_UART_ReadRegBlock+0x120>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 800117a:	4870      	ldr	r0, [pc, #448]	; (800133c <TinyBMS_UART_ReadRegBlock+0x2dc>)
 800117c:	f00c ffd6 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8001180:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fe3d 	bl	8006e04 <reportBMSError>
 800118a:	e0c5      	b.n	8001318 <TinyBMS_UART_ReadRegBlock+0x2b8>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_REG_BLOCK) {
 800118c:	4b67      	ldr	r3, [pc, #412]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800118e:	785b      	ldrb	r3, [r3, #1]
 8001190:	2b07      	cmp	r3, #7
 8001192:	f040 80b4 	bne.w	80012fe <TinyBMS_UART_ReadRegBlock+0x29e>
			printf("Response from BMS [OK]\r\n");
 8001196:	486a      	ldr	r0, [pc, #424]	; (8001340 <TinyBMS_UART_ReadRegBlock+0x2e0>)
 8001198:	f00c ffc8 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 800119c:	2201      	movs	r2, #1
 800119e:	4965      	ldr	r1, [pc, #404]	; (8001334 <TinyBMS_UART_ReadRegBlock+0x2d4>)
 80011a0:	4861      	ldr	r0, [pc, #388]	; (8001328 <TinyBMS_UART_ReadRegBlock+0x2c8>)
 80011a2:	f00a fffb 	bl	800c19c <HAL_UART_Receive_IT>

			//Should be equal to (RL * 2) because 2 bytes per register
			uint8_t PL = rx_buffer[2];
 80011a6:	4b61      	ldr	r3, [pc, #388]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			uint8_t bit7 = ((PL >> 7) & 1); //extract bit 7
 80011ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011b2:	09db      	lsrs	r3, r3, #7
 80011b4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			uint8_t bits05 = (PL & 63); //extract bits 0-5
 80011b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

			//if bit7 == 1
			if(bit7) {
 80011c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <TinyBMS_UART_ReadRegBlock+0x17a>
				printf("Current packet ID: 0x%02X\r\n", bits05);
 80011cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80011d0:	4619      	mov	r1, r3
 80011d2:	485c      	ldr	r0, [pc, #368]	; (8001344 <TinyBMS_UART_ReadRegBlock+0x2e4>)
 80011d4:	f00c ff24 	bl	800e020 <iprintf>
 80011d8:	e005      	b.n	80011e6 <TinyBMS_UART_ReadRegBlock+0x186>
			//else bit7 == 0
			} else {
				printf("Payload size in bytes (last packet): 0x%02X\r\n", bits05);
 80011da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80011de:	4619      	mov	r1, r3
 80011e0:	4859      	ldr	r0, [pc, #356]	; (8001348 <TinyBMS_UART_ReadRegBlock+0x2e8>)
 80011e2:	f00c ff1d 	bl	800e020 <iprintf>
			}

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 2*n+5 from OK reply
 80011e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3302      	adds	r3, #2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4956      	ldr	r1, [pc, #344]	; (800134c <TinyBMS_UART_ReadRegBlock+0x2ec>)
 80011f4:	484c      	ldr	r0, [pc, #304]	; (8001328 <TinyBMS_UART_ReadRegBlock+0x2c8>)
 80011f6:	f00a ffd1 	bl	800c19c <HAL_UART_Receive_IT>

			uint16_t DATA[] = {0};
 80011fa:	2300      	movs	r3, #0
 80011fc:	813b      	strh	r3, [r7, #8]
			uint32_t numDATA = (PL / 2); //2 bytes per data
 80011fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001202:	085b      	lsrs	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
			uint32_t n = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	65bb      	str	r3, [r7, #88]	; 0x58

			for(uint32_t i = 0; i < numDATA; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	657b      	str	r3, [r7, #84]	; 0x54
 8001210:	e019      	b.n	8001246 <TinyBMS_UART_ReadRegBlock+0x1e6>
				n++;
 8001212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001214:	3301      	adds	r3, #1
 8001216:	65bb      	str	r3, [r7, #88]	; 0x58
				//i=0,1,..,n-1 or n = 1,2,..,n
				DATA[i] = (rx_buffer[n+4-1] << 8) | rx_buffer[n+3-1];
 8001218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800121a:	3303      	adds	r3, #3
 800121c:	4a43      	ldr	r2, [pc, #268]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800121e:	5cd3      	ldrb	r3, [r2, r3]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001226:	3302      	adds	r3, #2
 8001228:	4940      	ldr	r1, [pc, #256]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800122a:	5ccb      	ldrb	r3, [r1, r3]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	b29a      	uxth	r2, r3
 8001234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	3360      	adds	r3, #96	; 0x60
 800123a:	443b      	add	r3, r7
 800123c:	f823 2c58 	strh.w	r2, [r3, #-88]
			for(uint32_t i = 0; i < numDATA; i++) {
 8001240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001242:	3301      	adds	r3, #1
 8001244:	657b      	str	r3, [r7, #84]	; 0x54
 8001246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800124a:	429a      	cmp	r2, r3
 800124c:	d3e1      	bcc.n	8001212 <TinyBMS_UART_ReadRegBlock+0x1b2>
			}

			CRC_reply = ((rx_buffer[n+6-1] << 8) | rx_buffer[n+5-1]);
 800124e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001250:	3305      	adds	r3, #5
 8001252:	4a36      	ldr	r2, [pc, #216]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800125c:	3304      	adds	r3, #4
 800125e:	4933      	ldr	r1, [pc, #204]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 8001260:	5ccb      	ldrb	r3, [r1, r3]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 800126c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001270:	b29b      	uxth	r3, r3
 8001272:	3303      	adds	r3, #3
 8001274:	b29b      	uxth	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	482c      	ldr	r0, [pc, #176]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800127a:	f005 fde5 	bl	8006e48 <CRC16>
 800127e:	4603      	mov	r3, r0
 8001280:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

			if(CRC_calc == CRC_reply) {
 8001284:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001288:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800128c:	429a      	cmp	r2, r3
 800128e:	d132      	bne.n	80012f6 <TinyBMS_UART_ReadRegBlock+0x296>
				printf("CRC pass\r\n");
 8001290:	4829      	ldr	r0, [pc, #164]	; (8001338 <TinyBMS_UART_ReadRegBlock+0x2d8>)
 8001292:	f00c ff4b 	bl	800e12c <puts>

				//Print the Register Block Contents
				printf("************ TinyBMS Register Block Contents ************\r\n");
 8001296:	482e      	ldr	r0, [pc, #184]	; (8001350 <TinyBMS_UART_ReadRegBlock+0x2f0>)
 8001298:	f00c ff48 	bl	800e12c <puts>
				printf("Printing Register Contents ranging from: 0x%04X to 0x%04X.\r\n", addr, addr+PL);
 800129c:	8839      	ldrh	r1, [r7, #0]
 800129e:	883a      	ldrh	r2, [r7, #0]
 80012a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012a4:	4413      	add	r3, r2
 80012a6:	461a      	mov	r2, r3
 80012a8:	482a      	ldr	r0, [pc, #168]	; (8001354 <TinyBMS_UART_ReadRegBlock+0x2f4>)
 80012aa:	f00c feb9 	bl	800e020 <iprintf>
				for(uint16_t i = 0; i < numDATA; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80012b4:	e013      	b.n	80012de <TinyBMS_UART_ReadRegBlock+0x27e>
					printf("Register 0x%04X: Value: %u\r\n", addr+i, DATA[i]);
 80012b6:	883a      	ldrh	r2, [r7, #0]
 80012b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012bc:	18d1      	adds	r1, r2, r3
 80012be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	3360      	adds	r3, #96	; 0x60
 80012c6:	443b      	add	r3, r7
 80012c8:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <TinyBMS_UART_ReadRegBlock+0x2f8>)
 80012d0:	f00c fea6 	bl	800e020 <iprintf>
				for(uint16_t i = 0; i < numDATA; i++) {
 80012d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012d8:	3301      	adds	r3, #1
 80012da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80012de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8e6      	bhi.n	80012b6 <TinyBMS_UART_ReadRegBlock+0x256>
				}
				printf("----------------------------------------\r\n");
 80012e8:	481c      	ldr	r0, [pc, #112]	; (800135c <TinyBMS_UART_ReadRegBlock+0x2fc>)
 80012ea:	f00c ff1f 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012f4:	e010      	b.n	8001318 <TinyBMS_UART_ReadRegBlock+0x2b8>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80012f6:	481a      	ldr	r0, [pc, #104]	; (8001360 <TinyBMS_UART_ReadRegBlock+0x300>)
 80012f8:	f00c ff18 	bl	800e12c <puts>
 80012fc:	e00c      	b.n	8001318 <TinyBMS_UART_ReadRegBlock+0x2b8>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x07 but was 0x%02X\r\n", rx_buffer[1]);
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	4619      	mov	r1, r3
 8001304:	4817      	ldr	r0, [pc, #92]	; (8001364 <TinyBMS_UART_ReadRegBlock+0x304>)
 8001306:	f00c fe8b 	bl	800e020 <iprintf>
 800130a:	e005      	b.n	8001318 <TinyBMS_UART_ReadRegBlock+0x2b8>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <TinyBMS_UART_ReadRegBlock+0x2cc>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	4815      	ldr	r0, [pc, #84]	; (8001368 <TinyBMS_UART_ReadRegBlock+0x308>)
 8001314:	f00c fe84 	bl	800e020 <iprintf>
	}

	return retval;
 8001318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800131c:	4618      	mov	r0, r3
 800131e:	3760      	adds	r7, #96	; 0x60
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	08011348 	.word	0x08011348
 8001328:	20000228 	.word	0x20000228
 800132c:	2000037c 	.word	0x2000037c
 8001330:	08011364 	.word	0x08011364
 8001334:	2000037e 	.word	0x2000037e
 8001338:	08011280 	.word	0x08011280
 800133c:	0801128c 	.word	0x0801128c
 8001340:	08011380 	.word	0x08011380
 8001344:	08011398 	.word	0x08011398
 8001348:	080113b4 	.word	0x080113b4
 800134c:	2000037f 	.word	0x2000037f
 8001350:	080113e4 	.word	0x080113e4
 8001354:	08011420 	.word	0x08011420
 8001358:	08011460 	.word	0x08011460
 800135c:	08011480 	.word	0x08011480
 8001360:	080114ac 	.word	0x080114ac
 8001364:	080114c0 	.word	0x080114c0
 8001368:	08011318 	.word	0x08011318

0800136c <TinyBMS_UART_ReadRegIndividual>:
 * @note				-			Individual Register Response from BMS [OK]:
 * 						 	Byte n*4   Byte n*4+1  Byte n*4+2  Byte n*4+3  Byte n*4+4  Byte n*4+5
 * 						 	ADDRn:LSB  ADDRn:MSB   DATAn:LSB   DATAn:MSB   CRC:LSB     CRC:MSB
 * 						 	      [UINT16]			     [UINT16]
 */
uint8_t TinyBMS_UART_ReadRegIndividual(UART_HandleTypeDef *huart, uint8_t pl, uint16_t addr[]) {
 800136c:	b580      	push	{r7, lr}
 800136e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8001372:	af00      	add	r7, sp, #0
 8001374:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001378:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800137c:	6018      	str	r0, [r3, #0]
 800137e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001382:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800138c:	f2a3 431d 	subw	r3, r3, #1053	; 0x41d
 8001390:	460a      	mov	r2, r1
 8001392:	701a      	strb	r2, [r3, #0]
	printf("TinyBMS_UART_ReadRegIndividual\r\n");
 8001394:	48a5      	ldr	r0, [pc, #660]	; (800162c <TinyBMS_UART_ReadRegIndividual+0x2c0>)
 8001396:	f00c fec9 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 800139a:	23ff      	movs	r3, #255	; 0xff
 800139c:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427

	uint8_t tx_buffer[1000];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3419 	strb.w	r3, [r7, #1049]	; 0x419
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 3418 	strb.w	r3, [r7, #1048]	; 0x418
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 80013be:	2300      	movs	r3, #0
 80013c0:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8a7 3412 	strh.w	r3, [r7, #1042]	; 0x412

	uint8_t pl_request = pl;
 80013ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013ce:	f2a3 431d 	subw	r3, r3, #1053	; 0x41d
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f887 3411 	strb.w	r3, [r7, #1041]	; 0x411

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80013d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013dc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80013e0:	22aa      	movs	r2, #170	; 0xaa
 80013e2:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = UART_TBMS_READ_INDIVIDUAL_REGS;
 80013e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013e8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80013ec:	2209      	movs	r2, #9
 80013ee:	705a      	strb	r2, [r3, #1]

	tx_buffer[2] = pl_request;
 80013f0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013f4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80013f8:	f897 2411 	ldrb.w	r2, [r7, #1041]	; 0x411
 80013fc:	709a      	strb	r2, [r3, #2]
	uint16_t numAddresses = (pl_request / 2); //2 bytes per address
 80013fe:	f897 3411 	ldrb.w	r3, [r7, #1041]	; 0x411
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	uint16_t n = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	f8a7 3424 	strh.w	r3, [r7, #1060]	; 0x424

	//input array addr[] contains n uint16_t elements
	for(uint16_t i = 0; i < numAddresses; i++) {
 8001410:	2300      	movs	r3, #0
 8001412:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
 8001416:	e03a      	b.n	800148e <TinyBMS_UART_ReadRegIndividual+0x122>
		n++; //n = 1,2,3,.. addr#
 8001418:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	; 0x424
 800141c:	3301      	adds	r3, #1
 800141e:	f8a7 3424 	strh.w	r3, [r7, #1060]	; 0x424
		ADDR_LSB = (addr[i] & 0xFF);
 8001422:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800142c:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	4413      	add	r3, r2
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
		ADDR_MSB = ((addr[i] >> 8) & 0xFF);
 800143a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8001444:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	4413      	add	r3, r2
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29b      	uxth	r3, r3
 8001452:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
		tx_buffer[(2*n)+2-1] = ADDR_LSB; //for n=1,2,3,.. index: 3,5,7,..
 8001456:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	; 0x424
 800145a:	3301      	adds	r3, #1
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8001464:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001468:	f897 141b 	ldrb.w	r1, [r7, #1051]	; 0x41b
 800146c:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(2*n)+3-1] = ADDR_MSB; //for n=1,2,3,.. index: 4,6,8,..
 800146e:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	; 0x424
 8001472:	3301      	adds	r3, #1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800147a:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800147e:	f897 141a 	ldrb.w	r1, [r7, #1050]	; 0x41a
 8001482:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < numAddresses; i++) {
 8001484:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8001488:	3301      	adds	r3, #1
 800148a:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
 800148e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8001492:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8001496:	429a      	cmp	r2, r3
 8001498:	d3be      	bcc.n	8001418 <TinyBMS_UART_ReadRegIndividual+0xac>
	}

	CRC_request = CRC16(tx_buffer, pl_request+3); //Bytes 1:2n+3 or pl+3
 800149a:	f897 3411 	ldrb.w	r3, [r7, #1041]	; 0x411
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3303      	adds	r3, #3
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fccc 	bl	8006e48 <CRC16>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
	CRC_LSB = (CRC_request & 0xFF);
 80014b6:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 80014ba:	f887 3419 	strb.w	r3, [r7, #1049]	; 0x419
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80014be:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	f887 3418 	strb.w	r3, [r7, #1048]	; 0x418
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[(2*n)+4-1] = CRC_LSB;
 80014ca:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	; 0x424
 80014ce:	3302      	adds	r3, #2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80014d8:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80014dc:	f897 1419 	ldrb.w	r1, [r7, #1049]	; 0x419
 80014e0:	54d1      	strb	r1, [r2, r3]
	tx_buffer[(2*n)+5-1] = CRC_MSB;
 80014e2:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	; 0x424
 80014e6:	3302      	adds	r3, #2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80014ee:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80014f2:	f897 1418 	ldrb.w	r1, [r7, #1048]	; 0x418
 80014f6:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, pl_request+5); //Bytes 1:2n+5 or pl+5
 80014f8:	f897 3411 	ldrb.w	r3, [r7, #1041]	; 0x411
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3305      	adds	r3, #5
 8001500:	b29a      	uxth	r2, r3
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4849      	ldr	r0, [pc, #292]	; (8001630 <TinyBMS_UART_ReadRegIndividual+0x2c4>)
 800150a:	f00a fdd9 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 800150e:	2202      	movs	r2, #2
 8001510:	4948      	ldr	r1, [pc, #288]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 8001512:	4847      	ldr	r0, [pc, #284]	; (8001630 <TinyBMS_UART_ReadRegIndividual+0x2c4>)
 8001514:	f00a fe42 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2baa      	cmp	r3, #170	; 0xaa
 800151e:	f040 8143 	bne.w	80017a8 <TinyBMS_UART_ReadRegIndividual+0x43c>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 8001524:	785b      	ldrb	r3, [r3, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d130      	bne.n	800158c <TinyBMS_UART_ReadRegIndividual+0x220>
			printf("Response from BMS [ERROR]\r\n");
 800152a:	4843      	ldr	r0, [pc, #268]	; (8001638 <TinyBMS_UART_ReadRegIndividual+0x2cc>)
 800152c:	f00c fdfe 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8001530:	2204      	movs	r2, #4
 8001532:	4942      	ldr	r1, [pc, #264]	; (800163c <TinyBMS_UART_ReadRegIndividual+0x2d0>)
 8001534:	483e      	ldr	r0, [pc, #248]	; (8001630 <TinyBMS_UART_ReadRegIndividual+0x2c4>)
 8001536:	f00a fe31 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 800153c:	78db      	ldrb	r3, [r3, #3]
 800153e:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 8001544:	795b      	ldrb	r3, [r3, #5]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 800154c:	791b      	ldrb	r3, [r3, #4]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	f8a7 3412 	strh.w	r3, [r7, #1042]	; 0x412
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8001558:	2104      	movs	r1, #4
 800155a:	4836      	ldr	r0, [pc, #216]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 800155c:	f005 fc74 	bl	8006e48 <CRC16>
 8001560:	4603      	mov	r3, r0
 8001562:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414

			if(CRC_calc == CRC_reply) {
 8001566:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 800156a:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	; 0x412
 800156e:	429a      	cmp	r2, r3
 8001570:	d103      	bne.n	800157a <TinyBMS_UART_ReadRegIndividual+0x20e>
				printf("CRC pass\r\n");
 8001572:	4833      	ldr	r0, [pc, #204]	; (8001640 <TinyBMS_UART_ReadRegIndividual+0x2d4>)
 8001574:	f00c fdda 	bl	800e12c <puts>
 8001578:	e002      	b.n	8001580 <TinyBMS_UART_ReadRegIndividual+0x214>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 800157a:	4832      	ldr	r0, [pc, #200]	; (8001644 <TinyBMS_UART_ReadRegIndividual+0x2d8>)
 800157c:	f00c fdd6 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8001580:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fc3d 	bl	8006e04 <reportBMSError>
 800158a:	e113      	b.n	80017b4 <TinyBMS_UART_ReadRegIndividual+0x448>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_INDIVIDUAL_REGS) {
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 800158e:	785b      	ldrb	r3, [r3, #1]
 8001590:	2b09      	cmp	r3, #9
 8001592:	f040 8102 	bne.w	800179a <TinyBMS_UART_ReadRegIndividual+0x42e>
			printf("Response from BMS [OK]\r\n");
 8001596:	482c      	ldr	r0, [pc, #176]	; (8001648 <TinyBMS_UART_ReadRegIndividual+0x2dc>)
 8001598:	f00c fdc8 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 800159c:	2201      	movs	r2, #1
 800159e:	4927      	ldr	r1, [pc, #156]	; (800163c <TinyBMS_UART_ReadRegIndividual+0x2d0>)
 80015a0:	4823      	ldr	r0, [pc, #140]	; (8001630 <TinyBMS_UART_ReadRegIndividual+0x2c4>)
 80015a2:	f00a fdfb 	bl	800c19c <HAL_UART_Receive_IT>

			//equal to (RL * 2) because 2 bytes per register
			uint8_t pl_response = rx_buffer[2];
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <TinyBMS_UART_ReadRegIndividual+0x2c8>)
 80015a8:	789b      	ldrb	r3, [r3, #2]
 80015aa:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d

			uint8_t bit7 = ((pl_response >> 7) & 1); //extract bit 7
 80015ae:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80015b2:	09db      	lsrs	r3, r3, #7
 80015b4:	f887 340c 	strb.w	r3, [r7, #1036]	; 0x40c
			uint8_t bits05 = (pl_response & 63); //extract bits 0-5
 80015b8:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80015bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c0:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b

			//if bit7 == 1
			if(bit7) {
 80015c4:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <TinyBMS_UART_ReadRegIndividual+0x26e>
				printf("Current packet ID: 0x%02X\r\n", bits05);
 80015cc:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 80015d0:	4619      	mov	r1, r3
 80015d2:	481e      	ldr	r0, [pc, #120]	; (800164c <TinyBMS_UART_ReadRegIndividual+0x2e0>)
 80015d4:	f00c fd24 	bl	800e020 <iprintf>
 80015d8:	e005      	b.n	80015e6 <TinyBMS_UART_ReadRegIndividual+0x27a>
			//else bit7 == 0
			} else {
				printf("Payload size in bytes (last packet): 0x%02X\r\n", bits05);
 80015da:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 80015de:	4619      	mov	r1, r3
 80015e0:	481b      	ldr	r0, [pc, #108]	; (8001650 <TinyBMS_UART_ReadRegIndividual+0x2e4>)
 80015e2:	f00c fd1d 	bl	800e020 <iprintf>
			}

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], pl_response+2); //read from byte 4 to 4*n+5 from OK reply
 80015e6:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3302      	adds	r3, #2
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4918      	ldr	r1, [pc, #96]	; (8001654 <TinyBMS_UART_ReadRegIndividual+0x2e8>)
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <TinyBMS_UART_ReadRegIndividual+0x2c4>)
 80015f6:	f00a fdd1 	bl	800c19c <HAL_UART_Receive_IT>

			uint16_t ADDR[] = {0}, DATA[] = {0};
 80015fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015fe:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800160a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800160e:	2200      	movs	r2, #0
 8001610:	801a      	strh	r2, [r3, #0]
			uint16_t numDATA = (pl_response / 4); //4 bytes per data
 8001612:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f8a7 3408 	strh.w	r3, [r7, #1032]	; 0x408
			uint16_t n = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	f8a7 3420 	strh.w	r3, [r7, #1056]	; 0x420

			for(uint16_t i = 0; i < numDATA; i++) {
 8001624:	2300      	movs	r3, #0
 8001626:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
 800162a:	e052      	b.n	80016d2 <TinyBMS_UART_ReadRegIndividual+0x366>
 800162c:	080114f8 	.word	0x080114f8
 8001630:	20000228 	.word	0x20000228
 8001634:	2000037c 	.word	0x2000037c
 8001638:	08011364 	.word	0x08011364
 800163c:	2000037e 	.word	0x2000037e
 8001640:	08011280 	.word	0x08011280
 8001644:	0801128c 	.word	0x0801128c
 8001648:	08011380 	.word	0x08011380
 800164c:	08011398 	.word	0x08011398
 8001650:	080113b4 	.word	0x080113b4
 8001654:	2000037f 	.word	0x2000037f
				n++; //n = 1,2,3,.. addr# data#
 8001658:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 800165c:	3301      	adds	r3, #1
 800165e:	f8a7 3420 	strh.w	r3, [r7, #1056]	; 0x420
				//i=0,1,..,numDATA-1 or n = 1,2,..,numDATA
				ADDR[i] = (rx_buffer[(4*n)+1-1] << 8) | rx_buffer[(4*n)-1];
 8001662:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4a56      	ldr	r2, [pc, #344]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 800166a:	5cd3      	ldrb	r3, [r2, r3]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b21a      	sxth	r2, r3
 8001670:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	3b01      	subs	r3, #1
 8001678:	4952      	ldr	r1, [pc, #328]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 800167a:	5ccb      	ldrb	r3, [r1, r3]
 800167c:	b21b      	sxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b21b      	sxth	r3, r3
 8001682:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 8001686:	b299      	uxth	r1, r3
 8001688:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800168c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001690:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				DATA[i] = (rx_buffer[(4*n)+3-1] << 8) | rx_buffer[(4*n)+2-1];
 8001694:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	3301      	adds	r3, #1
 80016ac:	4945      	ldr	r1, [pc, #276]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 80016ba:	b299      	uxth	r1, r3
 80016bc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016c0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80016c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(uint16_t i = 0; i < numDATA; i++) {
 80016c8:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 80016cc:	3301      	adds	r3, #1
 80016ce:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
 80016d2:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 80016d6:	f8b7 3408 	ldrh.w	r3, [r7, #1032]	; 0x408
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3bc      	bcc.n	8001658 <TinyBMS_UART_ReadRegIndividual+0x2ec>
			}

			CRC_reply = ((rx_buffer[(4*n)+5-1] << 8) | rx_buffer[(4*n)+4-1]);
 80016de:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 80016e2:	3301      	adds	r3, #1
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4a37      	ldr	r2, [pc, #220]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 80016f2:	3301      	adds	r3, #1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	3b01      	subs	r3, #1
 80016f8:	4932      	ldr	r1, [pc, #200]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 80016fa:	5ccb      	ldrb	r3, [r1, r3]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21b      	sxth	r3, r3
 8001702:	f8a7 3412 	strh.w	r3, [r7, #1042]	; 0x412
			CRC_calc = CRC16(rx_buffer, pl_response+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8001706:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 800170a:	b29b      	uxth	r3, r3
 800170c:	3303      	adds	r3, #3
 800170e:	b29b      	uxth	r3, r3
 8001710:	4619      	mov	r1, r3
 8001712:	482c      	ldr	r0, [pc, #176]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 8001714:	f005 fb98 	bl	8006e48 <CRC16>
 8001718:	4603      	mov	r3, r0
 800171a:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414

			if(CRC_calc == CRC_reply) {
 800171e:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8001722:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	; 0x412
 8001726:	429a      	cmp	r2, r3
 8001728:	d133      	bne.n	8001792 <TinyBMS_UART_ReadRegIndividual+0x426>
				printf("CRC pass\r\n");
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <TinyBMS_UART_ReadRegIndividual+0x45c>)
 800172c:	f00c fcfe 	bl	800e12c <puts>

				//Print the Register Block Contents
				printf("************ TinyBMS Individual Register Contents ************\r\n");
 8001730:	4826      	ldr	r0, [pc, #152]	; (80017cc <TinyBMS_UART_ReadRegIndividual+0x460>)
 8001732:	f00c fcfb 	bl	800e12c <puts>
				printf("Printing Individual Register Contents:\r\n");
 8001736:	4826      	ldr	r0, [pc, #152]	; (80017d0 <TinyBMS_UART_ReadRegIndividual+0x464>)
 8001738:	f00c fcf8 	bl	800e12c <puts>
				for(uint16_t i = 0; i < numDATA; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
 8001742:	e019      	b.n	8001778 <TinyBMS_UART_ReadRegIndividual+0x40c>
					printf("Register 0x%04X: %u\r\n", ADDR[i], DATA[i]);
 8001744:	f8b7 241c 	ldrh.w	r2, [r7, #1052]	; 0x41c
 8001748:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800174c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001750:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001754:	4619      	mov	r1, r3
 8001756:	f8b7 241c 	ldrh.w	r2, [r7, #1052]	; 0x41c
 800175a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800175e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001762:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001766:	461a      	mov	r2, r3
 8001768:	481a      	ldr	r0, [pc, #104]	; (80017d4 <TinyBMS_UART_ReadRegIndividual+0x468>)
 800176a:	f00c fc59 	bl	800e020 <iprintf>
				for(uint16_t i = 0; i < numDATA; i++) {
 800176e:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 8001772:	3301      	adds	r3, #1
 8001774:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
 8001778:	f8b7 241c 	ldrh.w	r2, [r7, #1052]	; 0x41c
 800177c:	f8b7 3408 	ldrh.w	r3, [r7, #1032]	; 0x408
 8001780:	429a      	cmp	r2, r3
 8001782:	d3df      	bcc.n	8001744 <TinyBMS_UART_ReadRegIndividual+0x3d8>
				}
				printf("----------------------------------------\r\n");
 8001784:	4814      	ldr	r0, [pc, #80]	; (80017d8 <TinyBMS_UART_ReadRegIndividual+0x46c>)
 8001786:	f00c fcd1 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 800178a:	2300      	movs	r3, #0
 800178c:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
 8001790:	e010      	b.n	80017b4 <TinyBMS_UART_ReadRegIndividual+0x448>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8001792:	4812      	ldr	r0, [pc, #72]	; (80017dc <TinyBMS_UART_ReadRegIndividual+0x470>)
 8001794:	f00c fcca 	bl	800e12c <puts>
 8001798:	e00c      	b.n	80017b4 <TinyBMS_UART_ReadRegIndividual+0x448>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x09 but was 0x%02X\r\n", rx_buffer[1]);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	; (80017e0 <TinyBMS_UART_ReadRegIndividual+0x474>)
 80017a2:	f00c fc3d 	bl	800e020 <iprintf>
 80017a6:	e005      	b.n	80017b4 <TinyBMS_UART_ReadRegIndividual+0x448>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <TinyBMS_UART_ReadRegIndividual+0x458>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <TinyBMS_UART_ReadRegIndividual+0x478>)
 80017b0:	f00c fc36 	bl	800e020 <iprintf>
	}

	return retval;
 80017b4:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000037c 	.word	0x2000037c
 80017c8:	08011280 	.word	0x08011280
 80017cc:	08011518 	.word	0x08011518
 80017d0:	08011558 	.word	0x08011558
 80017d4:	08011580 	.word	0x08011580
 80017d8:	08011480 	.word	0x08011480
 80017dc:	080114ac 	.word	0x080114ac
 80017e0:	08011598 	.word	0x08011598
 80017e4:	08011318 	.word	0x08011318

080017e8 <TinyBMS_UART_WriteRegBlock>:
 *
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated by malloc(size_t size).
 */
uint8_t TinyBMS_UART_WriteRegBlock(UART_HandleTypeDef *huart, uint8_t pl, uint16_t addr, uint16_t data[]) {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	f507 6482 	add.w	r4, r7, #1040	; 0x410
 80017f4:	f2a4 4404 	subw	r4, r4, #1028	; 0x404
 80017f8:	6020      	str	r0, [r4, #0]
 80017fa:	4608      	mov	r0, r1
 80017fc:	4611      	mov	r1, r2
 80017fe:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001802:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800180c:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001810:	4602      	mov	r2, r0
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001818:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800181c:	460a      	mov	r2, r1
 800181e:	801a      	strh	r2, [r3, #0]
	printf("TinyBMS_UART_WriteRegBlock\r\n");
 8001820:	48ce      	ldr	r0, [pc, #824]	; (8001b5c <TinyBMS_UART_WriteRegBlock+0x374>)
 8001822:	f00c fc83 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8001826:	23ff      	movs	r3, #255	; 0xff
 8001828:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f

	uint8_t tx_buffer[1000];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, DATA_LSB = 0, DATA_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3409 	strb.w	r3, [r7, #1033]	; 0x409
 8001832:	2300      	movs	r3, #0
 8001834:	f887 3408 	strb.w	r3, [r7, #1032]	; 0x408
 8001838:	2300      	movs	r3, #0
 800183a:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 800183e:	2300      	movs	r3, #0
 8001840:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3404 	strb.w	r3, [r7, #1028]	; 0x404
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
 8001856:	2300      	movs	r3, #0
 8001858:	f8a7 3400 	strh.w	r3, [r7, #1024]	; 0x400
 800185c:	2300      	movs	r3, #0
 800185e:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8001862:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001866:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800186a:	22aa      	movs	r2, #170	; 0xaa
 800186c:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = UART_TBMS_WRITE_REG_BLOCK;
 800186e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001872:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001876:	220b      	movs	r2, #11
 8001878:	705a      	strb	r2, [r3, #1]

	tx_buffer[2] = pl;
 800187a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800187e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001882:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001886:	f2a2 4205 	subw	r2, r2, #1029	; 0x405
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	709a      	strb	r2, [r3, #2]

	uint8_t bit7 = ((pl >> 7) & 1); //extract bit 7
 800188e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001892:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	09db      	lsrs	r3, r3, #7
 800189a:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
	uint8_t bits05 = (pl & 63); //extract bits 0-5
 800189e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80018a2:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ac:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc

	//if bit7 == 1
	if(bit7) {
 80018b0:	f897 33fd 	ldrb.w	r3, [r7, #1021]	; 0x3fd
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <TinyBMS_UART_WriteRegBlock+0xde>
		printf("Current packet ID: 0x%02X\r\n", bits05);
 80018b8:	f897 33fc 	ldrb.w	r3, [r7, #1020]	; 0x3fc
 80018bc:	4619      	mov	r1, r3
 80018be:	48a8      	ldr	r0, [pc, #672]	; (8001b60 <TinyBMS_UART_WriteRegBlock+0x378>)
 80018c0:	f00c fbae 	bl	800e020 <iprintf>
 80018c4:	e005      	b.n	80018d2 <TinyBMS_UART_WriteRegBlock+0xea>
	//else bit7 == 0
	} else {
		printf("Payload size in bytes (last packet): 0x%02X\r\n", bits05);
 80018c6:	f897 33fc 	ldrb.w	r3, [r7, #1020]	; 0x3fc
 80018ca:	4619      	mov	r1, r3
 80018cc:	48a5      	ldr	r0, [pc, #660]	; (8001b64 <TinyBMS_UART_WriteRegBlock+0x37c>)
 80018ce:	f00c fba7 	bl	800e020 <iprintf>
	}

	//Address out of bounds
	if((addr < 0x012C) || (addr > 0x018F)) {
 80018d2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80018d6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018e0:	d307      	bcc.n	80018f2 <TinyBMS_UART_WriteRegBlock+0x10a>
 80018e2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80018e6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80018f0:	d305      	bcc.n	80018fe <TinyBMS_UART_WriteRegBlock+0x116>
		printf("Invalid - register address out of bounds. Must be between 0x012C-0x018F\r\n");
 80018f2:	489d      	ldr	r0, [pc, #628]	; (8001b68 <TinyBMS_UART_WriteRegBlock+0x380>)
 80018f4:	f00c fc1a 	bl	800e12c <puts>
		return retval;
 80018f8:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 80018fc:	e152      	b.n	8001ba4 <TinyBMS_UART_WriteRegBlock+0x3bc>
	}

	ADDR_LSB = (addr & 0xFF);
 80018fe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001902:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	f887 3409 	strb.w	r3, [r7, #1033]	; 0x409
	ADDR_MSB = ((addr >> 8) & 0xFF);
 800190c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001910:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	f887 3408 	strb.w	r3, [r7, #1032]	; 0x408
	tx_buffer[3] = ADDR_LSB;
 800191e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001922:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001926:	f897 2409 	ldrb.w	r2, [r7, #1033]	; 0x409
 800192a:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = ADDR_MSB;
 800192c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001930:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001934:	f897 2408 	ldrb.w	r2, [r7, #1032]	; 0x408
 8001938:	711a      	strb	r2, [r3, #4]

	uint16_t numDATA = ((pl - 2) / 2); //Subtract out 2 bytes for address, then 2 bytes per data
 800193a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800193e:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	3b02      	subs	r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	da00      	bge.n	800194c <TinyBMS_UART_WriteRegBlock+0x164>
 800194a:	3301      	adds	r3, #1
 800194c:	105b      	asrs	r3, r3, #1
 800194e:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
	uint16_t n = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c

	//input array data[] contains n uint16_t elements
	for(uint16_t i = 0; i < numDATA; i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
 800195e:	e03a      	b.n	80019d6 <TinyBMS_UART_WriteRegBlock+0x1ee>
		n++; //n = 1,2,3,.. data#
 8001960:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001964:	3301      	adds	r3, #1
 8001966:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
		DATA_LSB = (data[i] & 0xFF);
 800196a:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001974:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	4413      	add	r3, r2
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
		DATA_MSB = ((data[i] >> 8) & 0xFF);
 8001982:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800198c:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	4413      	add	r3, r2
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
		tx_buffer[(2*n)+4-1] = DATA_LSB; //for n=1,2,3,.. index: 3,5,7,..
 800199e:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 80019a2:	3302      	adds	r3, #2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80019ac:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80019b0:	f897 1407 	ldrb.w	r1, [r7, #1031]	; 0x407
 80019b4:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(2*n)+5-1] = DATA_MSB; //for n=1,2,3,.. index: 4,6,8,..
 80019b6:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 80019ba:	3302      	adds	r3, #2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80019c2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80019c6:	f897 1406 	ldrb.w	r1, [r7, #1030]	; 0x406
 80019ca:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < numDATA; i++) {
 80019cc:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 80019d0:	3301      	adds	r3, #1
 80019d2:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
 80019d6:	f8b7 240a 	ldrh.w	r2, [r7, #1034]	; 0x40a
 80019da:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3be      	bcc.n	8001960 <TinyBMS_UART_WriteRegBlock+0x178>
	}

	CRC_request = CRC16(tx_buffer, pl+3);
 80019e2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80019e6:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3303      	adds	r3, #3
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f005 fa25 	bl	8006e48 <CRC16>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
	CRC_LSB = (CRC_request & 0xFF);
 8001a04:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8001a08:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8001a0c:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f887 3404 	strb.w	r3, [r7, #1028]	; 0x404
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[(2*n)+6-1] = CRC_LSB;
 8001a18:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001a26:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001a2a:	f897 1405 	ldrb.w	r1, [r7, #1029]	; 0x405
 8001a2e:	54d1      	strb	r1, [r2, r3]
	tx_buffer[(2*n)+7-1] = CRC_MSB;
 8001a30:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001a34:	3303      	adds	r3, #3
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001a3c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001a40:	f897 1404 	ldrb.w	r1, [r7, #1028]	; 0x404
 8001a44:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, pl+5);
 8001a46:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001a4a:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3305      	adds	r3, #5
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4843      	ldr	r0, [pc, #268]	; (8001b6c <TinyBMS_UART_WriteRegBlock+0x384>)
 8001a5e:	f00a fb2f 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8001a62:	2202      	movs	r2, #2
 8001a64:	4942      	ldr	r1, [pc, #264]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001a66:	4841      	ldr	r0, [pc, #260]	; (8001b6c <TinyBMS_UART_WriteRegBlock+0x384>)
 8001a68:	f00a fb98 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2baa      	cmp	r3, #170	; 0xaa
 8001a72:	f040 808f 	bne.w	8001b94 <TinyBMS_UART_WriteRegBlock+0x3ac>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8001a76:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d130      	bne.n	8001ae0 <TinyBMS_UART_WriteRegBlock+0x2f8>
			printf("Response from BMS [ERROR]\r\n");
 8001a7e:	483d      	ldr	r0, [pc, #244]	; (8001b74 <TinyBMS_UART_WriteRegBlock+0x38c>)
 8001a80:	f00c fb54 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8001a84:	2204      	movs	r2, #4
 8001a86:	493c      	ldr	r1, [pc, #240]	; (8001b78 <TinyBMS_UART_WriteRegBlock+0x390>)
 8001a88:	4838      	ldr	r0, [pc, #224]	; (8001b6c <TinyBMS_UART_WriteRegBlock+0x384>)
 8001a8a:	f00a fb87 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001a90:	78db      	ldrb	r3, [r3, #3]
 8001a92:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001a98:	795b      	ldrb	r3, [r3, #5]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8001aac:	2104      	movs	r1, #4
 8001aae:	4830      	ldr	r0, [pc, #192]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001ab0:	f005 f9ca 	bl	8006e48 <CRC16>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f8a7 3400 	strh.w	r3, [r7, #1024]	; 0x400

			if(CRC_calc == CRC_reply) {
 8001aba:	f8b7 2400 	ldrh.w	r2, [r7, #1024]	; 0x400
 8001abe:	f8b7 33fe 	ldrh.w	r3, [r7, #1022]	; 0x3fe
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d103      	bne.n	8001ace <TinyBMS_UART_WriteRegBlock+0x2e6>
				printf("CRC pass\r\n");
 8001ac6:	482d      	ldr	r0, [pc, #180]	; (8001b7c <TinyBMS_UART_WriteRegBlock+0x394>)
 8001ac8:	f00c fb30 	bl	800e12c <puts>
 8001acc:	e002      	b.n	8001ad4 <TinyBMS_UART_WriteRegBlock+0x2ec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8001ace:	482c      	ldr	r0, [pc, #176]	; (8001b80 <TinyBMS_UART_WriteRegBlock+0x398>)
 8001ad0:	f00c fb2c 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8001ad4:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 f993 	bl	8006e04 <reportBMSError>
 8001ade:	e05f      	b.n	8001ba0 <TinyBMS_UART_WriteRegBlock+0x3b8>

		//[OK]
		} else if(rx_buffer[1] == ACK) {
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d131      	bne.n	8001b4c <TinyBMS_UART_WriteRegBlock+0x364>
			printf("Response from BMS [ACK]\r\n");
 8001ae8:	4826      	ldr	r0, [pc, #152]	; (8001b84 <TinyBMS_UART_WriteRegBlock+0x39c>)
 8001aea:	f00c fb1f 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 3); //read byte 3-5 from ACK reply
 8001aee:	2203      	movs	r2, #3
 8001af0:	4921      	ldr	r1, [pc, #132]	; (8001b78 <TinyBMS_UART_WriteRegBlock+0x390>)
 8001af2:	481e      	ldr	r0, [pc, #120]	; (8001b6c <TinyBMS_UART_WriteRegBlock+0x384>)
 8001af4:	f00a fb52 	bl	800c19c <HAL_UART_Receive_IT>

			if(rx_buffer[2] == UART_TBMS_WRITE_REG_BLOCK) {
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001afa:	789b      	ldrb	r3, [r3, #2]
 8001afc:	2b0b      	cmp	r3, #11
 8001afe:	d14f      	bne.n	8001ba0 <TinyBMS_UART_WriteRegBlock+0x3b8>
				CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001b02:	795b      	ldrb	r3, [r3, #5]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
				CRC_calc = CRC16(rx_buffer, 3); //Calc CRC for bytes 1-3 of ACK response
 8001b16:	2103      	movs	r1, #3
 8001b18:	4815      	ldr	r0, [pc, #84]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001b1a:	f005 f995 	bl	8006e48 <CRC16>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f8a7 3400 	strh.w	r3, [r7, #1024]	; 0x400

				if(CRC_calc == CRC_reply) {
 8001b24:	f8b7 2400 	ldrh.w	r2, [r7, #1024]	; 0x400
 8001b28:	f8b7 33fe 	ldrh.w	r3, [r7, #1022]	; 0x3fe
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d109      	bne.n	8001b44 <TinyBMS_UART_WriteRegBlock+0x35c>
					printf("CRC pass\r\n");
 8001b30:	4812      	ldr	r0, [pc, #72]	; (8001b7c <TinyBMS_UART_WriteRegBlock+0x394>)
 8001b32:	f00c fafb 	bl	800e12c <puts>
					printf("ACK!\r\n");
 8001b36:	4814      	ldr	r0, [pc, #80]	; (8001b88 <TinyBMS_UART_WriteRegBlock+0x3a0>)
 8001b38:	f00c faf8 	bl	800e12c <puts>
					retval = CMD_SUCCESS;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8001b42:	e02d      	b.n	8001ba0 <TinyBMS_UART_WriteRegBlock+0x3b8>
				} else {
					printf("CRC fail in BMS OK\r\n");
 8001b44:	4811      	ldr	r0, [pc, #68]	; (8001b8c <TinyBMS_UART_WriteRegBlock+0x3a4>)
 8001b46:	f00c faf1 	bl	800e12c <puts>
 8001b4a:	e029      	b.n	8001ba0 <TinyBMS_UART_WriteRegBlock+0x3b8>
				}
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x01 but was 0x%02X\r\n", rx_buffer[1]);
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <TinyBMS_UART_WriteRegBlock+0x388>)
 8001b4e:	785b      	ldrb	r3, [r3, #1]
 8001b50:	4619      	mov	r1, r3
 8001b52:	480f      	ldr	r0, [pc, #60]	; (8001b90 <TinyBMS_UART_WriteRegBlock+0x3a8>)
 8001b54:	f00c fa64 	bl	800e020 <iprintf>
 8001b58:	e022      	b.n	8001ba0 <TinyBMS_UART_WriteRegBlock+0x3b8>
 8001b5a:	bf00      	nop
 8001b5c:	080115d0 	.word	0x080115d0
 8001b60:	08011398 	.word	0x08011398
 8001b64:	080113b4 	.word	0x080113b4
 8001b68:	080115ec 	.word	0x080115ec
 8001b6c:	20000228 	.word	0x20000228
 8001b70:	2000037c 	.word	0x2000037c
 8001b74:	08011364 	.word	0x08011364
 8001b78:	2000037e 	.word	0x2000037e
 8001b7c:	08011280 	.word	0x08011280
 8001b80:	0801128c 	.word	0x0801128c
 8001b84:	080112a4 	.word	0x080112a4
 8001b88:	080112c0 	.word	0x080112c0
 8001b8c:	080114ac 	.word	0x080114ac
 8001b90:	080112e0 	.word	0x080112e0
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <TinyBMS_UART_WriteRegBlock+0x3c8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <TinyBMS_UART_WriteRegBlock+0x3cc>)
 8001b9c:	f00c fa40 	bl	800e020 <iprintf>
	}

	return retval;
 8001ba0:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000037c 	.word	0x2000037c
 8001bb4:	08011318 	.word	0x08011318

08001bb8 <TinyBMS_UART_WriteRegIndividual>:
 * 										Individual Register request to BMS:
 * 						 	Byte n*4   Byte n*4+1  Byte n*4+2  Byte n*4+3  Byte n*4+4  Byte n*4+5
 * 						 	ADDRn:LSB  ADDRn:MSB   DATAn:LSB   DATAn:MSB   CRC:LSB     CRC:MSB
 * 						 	      [UINT16]			     [UINT16]
 */
uint8_t TinyBMS_UART_WriteRegIndividual(UART_HandleTypeDef *huart, uint8_t pl, uint16_t addr[], uint16_t data[]) {
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	f507 6482 	add.w	r4, r7, #1040	; 0x410
 8001bc4:	f2a4 4404 	subw	r4, r4, #1028	; 0x404
 8001bc8:	6020      	str	r0, [r4, #0]
 8001bca:	4608      	mov	r0, r1
 8001bcc:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8001bd0:	f2a1 410c 	subw	r1, r1, #1036	; 0x40c
 8001bd4:	600a      	str	r2, [r1, #0]
 8001bd6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001bda:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001be4:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001be8:	4602      	mov	r2, r0
 8001bea:	701a      	strb	r2, [r3, #0]
	printf("TinyBMS_UART_WriteRegIndividual\r\n");
 8001bec:	48be      	ldr	r0, [pc, #760]	; (8001ee8 <TinyBMS_UART_WriteRegIndividual+0x330>)
 8001bee:	f00c fa9d 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8001bf2:	23ff      	movs	r3, #255	; 0xff
 8001bf4:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f

	uint8_t tx_buffer[1000];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, DATA_LSB = 0, DATA_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3409 	strb.w	r3, [r7, #1033]	; 0x409
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3408 	strb.w	r3, [r7, #1032]	; 0x408
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3404 	strb.w	r3, [r7, #1028]	; 0x404
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8a7 3400 	strh.w	r3, [r7, #1024]	; 0x400
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8001c2e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001c32:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001c36:	22aa      	movs	r2, #170	; 0xaa
 8001c38:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = UART_TBMS_WRITE_INDIVIDUAL_REGS;
 8001c3a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001c3e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001c42:	220d      	movs	r2, #13
 8001c44:	705a      	strb	r2, [r3, #1]

	tx_buffer[2] = pl;
 8001c46:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001c4a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001c4e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001c52:	f2a2 4205 	subw	r2, r2, #1029	; 0x405
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	709a      	strb	r2, [r3, #2]

	uint8_t bit7 = ((pl >> 7) & 1); //extract bit 7
 8001c5a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001c5e:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	09db      	lsrs	r3, r3, #7
 8001c66:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
	uint8_t bits05 = (pl & 63); //extract bits 0-5
 8001c6a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001c6e:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c78:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc

	//if bit7 == 1
	if(bit7) {
 8001c7c:	f897 33fd 	ldrb.w	r3, [r7, #1021]	; 0x3fd
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <TinyBMS_UART_WriteRegIndividual+0xda>
		printf("Current packet ID: 0x%02X\r\n", bits05);
 8001c84:	f897 33fc 	ldrb.w	r3, [r7, #1020]	; 0x3fc
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4898      	ldr	r0, [pc, #608]	; (8001eec <TinyBMS_UART_WriteRegIndividual+0x334>)
 8001c8c:	f00c f9c8 	bl	800e020 <iprintf>
 8001c90:	e005      	b.n	8001c9e <TinyBMS_UART_WriteRegIndividual+0xe6>
	//else bit7 == 0
	} else {
		printf("Payload size in bytes (last packet): 0x%02X\r\n", bits05);
 8001c92:	f897 33fc 	ldrb.w	r3, [r7, #1020]	; 0x3fc
 8001c96:	4619      	mov	r1, r3
 8001c98:	4895      	ldr	r0, [pc, #596]	; (8001ef0 <TinyBMS_UART_WriteRegIndividual+0x338>)
 8001c9a:	f00c f9c1 	bl	800e020 <iprintf>
	}

	uint16_t numELEMENTS = (pl / 4); //2 bytes per address, 2 bytes per data
 8001c9e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001ca2:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
	uint16_t n = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c

	//input arrays addr[] data[] contains n uint16_t elements
	for(uint16_t i = 0; i < numELEMENTS; i++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
 8001cbc:	e08e      	b.n	8001ddc <TinyBMS_UART_WriteRegIndividual+0x224>
		n++; //n = 1,2,3,.. addr# data#
 8001cbe:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c

		//Address out of bounds
		if((addr[i] < 0x012C) || (addr[i] > 0x018F)) {
 8001cc8:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001cd2:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ce0:	d30c      	bcc.n	8001cfc <TinyBMS_UART_WriteRegIndividual+0x144>
 8001ce2:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001cec:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001cfa:	d30b      	bcc.n	8001d14 <TinyBMS_UART_WriteRegIndividual+0x15c>
			printf("Invalid - register address out of bounds from index %u. Must be between 0x012C-0x018F\r\n", i);
 8001cfc:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001d00:	4619      	mov	r1, r3
 8001d02:	487c      	ldr	r0, [pc, #496]	; (8001ef4 <TinyBMS_UART_WriteRegIndividual+0x33c>)
 8001d04:	f00c f98c 	bl	800e020 <iprintf>
			retval = CMD_FAILURE;
 8001d08:	23ff      	movs	r3, #255	; 0xff
 8001d0a:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
			return retval;
 8001d0e:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8001d12:	e142      	b.n	8001f9a <TinyBMS_UART_WriteRegIndividual+0x3e2>
		}
		ADDR_LSB = (addr[i] & 0xFF);
 8001d14:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001d1e:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	f887 3409 	strb.w	r3, [r7, #1033]	; 0x409
		ADDR_MSB = ((addr[i] >> 8) & 0xFF);
 8001d2c:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001d36:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f887 3408 	strb.w	r3, [r7, #1032]	; 0x408
		tx_buffer[(4*n)-1] = ADDR_LSB;
 8001d48:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001d54:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001d58:	f897 1409 	ldrb.w	r1, [r7, #1033]	; 0x409
 8001d5c:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(4*n)+1-1] = ADDR_MSB;
 8001d5e:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001d68:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001d6c:	f897 1408 	ldrb.w	r1, [r7, #1032]	; 0x408
 8001d70:	54d1      	strb	r1, [r2, r3]

		DATA_LSB = (data[i] & 0xFF);
 8001d72:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001d7c:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
		DATA_MSB = ((data[i] >> 8) & 0xFF);
 8001d8a:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001d94:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
		tx_buffer[(4*n)+2-1] = DATA_LSB; //for n=1,2,3,.. index: 3,5,7,..
 8001da6:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3301      	adds	r3, #1
 8001dae:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001db2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001db6:	f897 1407 	ldrb.w	r1, [r7, #1031]	; 0x407
 8001dba:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(4*n)+3-1] = DATA_MSB; //for n=1,2,3,.. index: 4,6,8,..
 8001dbc:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001dc8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001dcc:	f897 1406 	ldrb.w	r1, [r7, #1030]	; 0x406
 8001dd0:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < numELEMENTS; i++) {
 8001dd2:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	; 0x40a
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f8a7 340a 	strh.w	r3, [r7, #1034]	; 0x40a
 8001ddc:	f8b7 240a 	ldrh.w	r2, [r7, #1034]	; 0x40a
 8001de0:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f4ff af6a 	bcc.w	8001cbe <TinyBMS_UART_WriteRegIndividual+0x106>
	}

	CRC_request = CRC16(tx_buffer, pl+3);
 8001dea:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001dee:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3303      	adds	r3, #3
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f005 f821 	bl	8006e48 <CRC16>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
	CRC_LSB = (CRC_request & 0xFF);
 8001e0c:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8001e10:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8001e14:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f887 3404 	strb.w	r3, [r7, #1028]	; 0x404
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[(4*n)+4-1] = CRC_LSB;
 8001e20:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001e24:	3301      	adds	r3, #1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001e2e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001e32:	f897 1405 	ldrb.w	r1, [r7, #1029]	; 0x405
 8001e36:	54d1      	strb	r1, [r2, r3]
	tx_buffer[(4*n)+5-1] = CRC_MSB;
 8001e38:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001e44:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001e48:	f897 1404 	ldrb.w	r1, [r7, #1028]	; 0x404
 8001e4c:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, pl+5);
 8001e4e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001e52:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3305      	adds	r3, #5
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	f107 0310 	add.w	r3, r7, #16
 8001e62:	4619      	mov	r1, r3
 8001e64:	4824      	ldr	r0, [pc, #144]	; (8001ef8 <TinyBMS_UART_WriteRegIndividual+0x340>)
 8001e66:	f00a f92b 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4923      	ldr	r1, [pc, #140]	; (8001efc <TinyBMS_UART_WriteRegIndividual+0x344>)
 8001e6e:	4822      	ldr	r0, [pc, #136]	; (8001ef8 <TinyBMS_UART_WriteRegIndividual+0x340>)
 8001e70:	f00a f994 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <TinyBMS_UART_WriteRegIndividual+0x344>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2baa      	cmp	r3, #170	; 0xaa
 8001e7a:	f040 8086 	bne.w	8001f8a <TinyBMS_UART_WriteRegIndividual+0x3d2>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <TinyBMS_UART_WriteRegIndividual+0x344>)
 8001e80:	785b      	ldrb	r3, [r3, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d144      	bne.n	8001f10 <TinyBMS_UART_WriteRegIndividual+0x358>
			printf("Response from BMS [ERROR]\r\n");
 8001e86:	481e      	ldr	r0, [pc, #120]	; (8001f00 <TinyBMS_UART_WriteRegIndividual+0x348>)
 8001e88:	f00c f950 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	491d      	ldr	r1, [pc, #116]	; (8001f04 <TinyBMS_UART_WriteRegIndividual+0x34c>)
 8001e90:	4819      	ldr	r0, [pc, #100]	; (8001ef8 <TinyBMS_UART_WriteRegIndividual+0x340>)
 8001e92:	f00a f983 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <TinyBMS_UART_WriteRegIndividual+0x344>)
 8001e98:	78db      	ldrb	r3, [r3, #3]
 8001e9a:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <TinyBMS_UART_WriteRegIndividual+0x344>)
 8001ea0:	795b      	ldrb	r3, [r3, #5]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <TinyBMS_UART_WriteRegIndividual+0x344>)
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4811      	ldr	r0, [pc, #68]	; (8001efc <TinyBMS_UART_WriteRegIndividual+0x344>)
 8001eb8:	f004 ffc6 	bl	8006e48 <CRC16>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f8a7 3400 	strh.w	r3, [r7, #1024]	; 0x400

			if(CRC_calc == CRC_reply) {
 8001ec2:	f8b7 2400 	ldrh.w	r2, [r7, #1024]	; 0x400
 8001ec6:	f8b7 33fe 	ldrh.w	r3, [r7, #1022]	; 0x3fe
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d103      	bne.n	8001ed6 <TinyBMS_UART_WriteRegIndividual+0x31e>
				printf("CRC pass\r\n");
 8001ece:	480e      	ldr	r0, [pc, #56]	; (8001f08 <TinyBMS_UART_WriteRegIndividual+0x350>)
 8001ed0:	f00c f92c 	bl	800e12c <puts>
 8001ed4:	e002      	b.n	8001edc <TinyBMS_UART_WriteRegIndividual+0x324>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8001ed6:	480d      	ldr	r0, [pc, #52]	; (8001f0c <TinyBMS_UART_WriteRegIndividual+0x354>)
 8001ed8:	f00c f928 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8001edc:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 ff8f 	bl	8006e04 <reportBMSError>
 8001ee6:	e056      	b.n	8001f96 <TinyBMS_UART_WriteRegIndividual+0x3de>
 8001ee8:	08011638 	.word	0x08011638
 8001eec:	08011398 	.word	0x08011398
 8001ef0:	080113b4 	.word	0x080113b4
 8001ef4:	0801165c 	.word	0x0801165c
 8001ef8:	20000228 	.word	0x20000228
 8001efc:	2000037c 	.word	0x2000037c
 8001f00:	08011364 	.word	0x08011364
 8001f04:	2000037e 	.word	0x2000037e
 8001f08:	08011280 	.word	0x08011280
 8001f0c:	0801128c 	.word	0x0801128c

		//[OK]
		} else if(rx_buffer[1] == ACK) {
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <TinyBMS_UART_WriteRegIndividual+0x3ec>)
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d131      	bne.n	8001f7c <TinyBMS_UART_WriteRegIndividual+0x3c4>
			printf("Response from BMS [ACK]\r\n");
 8001f18:	4823      	ldr	r0, [pc, #140]	; (8001fa8 <TinyBMS_UART_WriteRegIndividual+0x3f0>)
 8001f1a:	f00c f907 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 3); //read bytes 3-5 from ACK reply
 8001f1e:	2203      	movs	r2, #3
 8001f20:	4922      	ldr	r1, [pc, #136]	; (8001fac <TinyBMS_UART_WriteRegIndividual+0x3f4>)
 8001f22:	4823      	ldr	r0, [pc, #140]	; (8001fb0 <TinyBMS_UART_WriteRegIndividual+0x3f8>)
 8001f24:	f00a f93a 	bl	800c19c <HAL_UART_Receive_IT>

			if(rx_buffer[2] == UART_TBMS_WRITE_INDIVIDUAL_REGS) {
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <TinyBMS_UART_WriteRegIndividual+0x3ec>)
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	2b0d      	cmp	r3, #13
 8001f2e:	d132      	bne.n	8001f96 <TinyBMS_UART_WriteRegIndividual+0x3de>
				CRC_reply = ((rx_buffer[4] << 8) | rx_buffer[3]);
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <TinyBMS_UART_WriteRegIndividual+0x3ec>)
 8001f32:	791b      	ldrb	r3, [r3, #4]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <TinyBMS_UART_WriteRegIndividual+0x3ec>)
 8001f3a:	78db      	ldrb	r3, [r3, #3]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
				CRC_calc = CRC16(rx_buffer, 3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8001f46:	2103      	movs	r1, #3
 8001f48:	4816      	ldr	r0, [pc, #88]	; (8001fa4 <TinyBMS_UART_WriteRegIndividual+0x3ec>)
 8001f4a:	f004 ff7d 	bl	8006e48 <CRC16>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f8a7 3400 	strh.w	r3, [r7, #1024]	; 0x400

				if(CRC_calc == CRC_reply) {
 8001f54:	f8b7 2400 	ldrh.w	r2, [r7, #1024]	; 0x400
 8001f58:	f8b7 33fe 	ldrh.w	r3, [r7, #1022]	; 0x3fe
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d109      	bne.n	8001f74 <TinyBMS_UART_WriteRegIndividual+0x3bc>
					printf("CRC pass\r\n");
 8001f60:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <TinyBMS_UART_WriteRegIndividual+0x3fc>)
 8001f62:	f00c f8e3 	bl	800e12c <puts>
					printf("ACK!\r\n");
 8001f66:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <TinyBMS_UART_WriteRegIndividual+0x400>)
 8001f68:	f00c f8e0 	bl	800e12c <puts>
					retval = CMD_SUCCESS;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8001f72:	e010      	b.n	8001f96 <TinyBMS_UART_WriteRegIndividual+0x3de>
				} else {
					printf("CRC fail in BMS OK\r\n");
 8001f74:	4811      	ldr	r0, [pc, #68]	; (8001fbc <TinyBMS_UART_WriteRegIndividual+0x404>)
 8001f76:	f00c f8d9 	bl	800e12c <puts>
 8001f7a:	e00c      	b.n	8001f96 <TinyBMS_UART_WriteRegIndividual+0x3de>
				}
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x01 but was 0x%02X\r\n", rx_buffer[1]);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <TinyBMS_UART_WriteRegIndividual+0x3ec>)
 8001f7e:	785b      	ldrb	r3, [r3, #1]
 8001f80:	4619      	mov	r1, r3
 8001f82:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <TinyBMS_UART_WriteRegIndividual+0x408>)
 8001f84:	f00c f84c 	bl	800e020 <iprintf>
 8001f88:	e005      	b.n	8001f96 <TinyBMS_UART_WriteRegIndividual+0x3de>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <TinyBMS_UART_WriteRegIndividual+0x3ec>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <TinyBMS_UART_WriteRegIndividual+0x40c>)
 8001f92:	f00c f845 	bl	800e020 <iprintf>
	}

	return retval;
 8001f96:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}
 8001fa4:	2000037c 	.word	0x2000037c
 8001fa8:	080112a4 	.word	0x080112a4
 8001fac:	2000037e 	.word	0x2000037e
 8001fb0:	20000228 	.word	0x20000228
 8001fb4:	08011280 	.word	0x08011280
 8001fb8:	080112c0 	.word	0x080112c0
 8001fbc:	080114ac 	.word	0x080114ac
 8001fc0:	080112e0 	.word	0x080112e0
 8001fc4:	08011318 	.word	0x08011318

08001fc8 <TinyBMS_UART_ReadRegBlockMODBUS>:
 * 							  Individual Register Response from BMS [OK]:
 * 						 	  Byte n*2+2  Byte n*2+3  Byte n*2+4  Byte n*2+5
 * 						 	  DATAn:MSB   DATAn:LSB   CRC:LSB     CRC:MSB
 * 						 	        [UINT16]
 */
uint8_t TinyBMS_UART_ReadRegBlockMODBUS(UART_HandleTypeDef *huart, uint16_t addr, uint8_t rl) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b098      	sub	sp, #96	; 0x60
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
	printf("TinyBMS_UART_ReadRegBlockMODBUS\r\n");
 8001fd8:	48a6      	ldr	r0, [pc, #664]	; (8002274 <TinyBMS_UART_ReadRegBlockMODBUS+0x2ac>)
 8001fda:	f00c f8a7 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8001fde:	23ff      	movs	r3, #255	; 0xff
 8001fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	uint8_t tx_buffer[50];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002002:	2300      	movs	r3, #0
 8002004:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002008:	2300      	movs	r3, #0
 800200a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 800200e:	23aa      	movs	r3, #170	; 0xaa
 8002010:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = UART_TBMS_READ_REG_BLOCK_MODBUS;
 8002012:	2303      	movs	r3, #3
 8002014:	737b      	strb	r3, [r7, #13]

	//First register's block address
	ADDR_MSB = ((addr >> 8) & 0xFF);
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b29b      	uxth	r3, r3
 800201c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	ADDR_LSB = (addr & 0xFF);
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	//MSB first
	tx_buffer[2] = ADDR_MSB;
 8002026:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800202a:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = ADDR_LSB;
 800202c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002030:	73fb      	strb	r3, [r7, #15]

	tx_buffer[4] = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	743b      	strb	r3, [r7, #16]

	//rl out of bounds
	if((rl <= 0x00) || (rl > 0x7F)) {
 8002036:	787b      	ldrb	r3, [r7, #1]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <TinyBMS_UART_ReadRegBlockMODBUS+0x7c>
 800203c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da08      	bge.n	8002056 <TinyBMS_UART_ReadRegBlockMODBUS+0x8e>
		printf("Invalid - registers to read value out of bounds. Max 127 (0x7F)\r\n");
 8002044:	488c      	ldr	r0, [pc, #560]	; (8002278 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b0>)
 8002046:	f00c f871 	bl	800e12c <puts>
		retval = CMD_FAILURE;
 800204a:	23ff      	movs	r3, #255	; 0xff
 800204c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		return retval;
 8002050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002054:	e109      	b.n	800226a <TinyBMS_UART_ReadRegBlockMODBUS+0x2a2>
	}
	tx_buffer[5] = rl;
 8002056:	787b      	ldrb	r3, [r7, #1]
 8002058:	747b      	strb	r3, [r7, #17]

	CRC_request = CRC16(tx_buffer, 6);
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	2106      	movs	r1, #6
 8002060:	4618      	mov	r0, r3
 8002062:	f004 fef1 	bl	8006e48 <CRC16>
 8002066:	4603      	mov	r3, r0
 8002068:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	CRC_LSB = (CRC_request & 0xFF);
 800206c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002070:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8002074:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	b29b      	uxth	r3, r3
 800207c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[6] = CRC_LSB;
 8002080:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002084:	74bb      	strb	r3, [r7, #18]
	tx_buffer[7] = CRC_MSB;
 8002086:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800208a:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 8);
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2208      	movs	r2, #8
 8002092:	4619      	mov	r1, r3
 8002094:	4879      	ldr	r0, [pc, #484]	; (800227c <TinyBMS_UART_ReadRegBlockMODBUS+0x2b4>)
 8002096:	f00a f813 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 800209a:	2202      	movs	r2, #2
 800209c:	4978      	ldr	r1, [pc, #480]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 800209e:	4877      	ldr	r0, [pc, #476]	; (800227c <TinyBMS_UART_ReadRegBlockMODBUS+0x2b4>)
 80020a0:	f00a f87c 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80020a4:	4b76      	ldr	r3, [pc, #472]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2baa      	cmp	r3, #170	; 0xaa
 80020aa:	f040 80d6 	bne.w	800225a <TinyBMS_UART_ReadRegBlockMODBUS+0x292>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80020ae:	4b74      	ldr	r3, [pc, #464]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d130      	bne.n	8002118 <TinyBMS_UART_ReadRegBlockMODBUS+0x150>
			printf("Response from BMS [ERROR]\r\n");
 80020b6:	4873      	ldr	r0, [pc, #460]	; (8002284 <TinyBMS_UART_ReadRegBlockMODBUS+0x2bc>)
 80020b8:	f00c f838 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80020bc:	2204      	movs	r2, #4
 80020be:	4972      	ldr	r1, [pc, #456]	; (8002288 <TinyBMS_UART_ReadRegBlockMODBUS+0x2c0>)
 80020c0:	486e      	ldr	r0, [pc, #440]	; (800227c <TinyBMS_UART_ReadRegBlockMODBUS+0x2b4>)
 80020c2:	f00a f86b 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80020c6:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80020ce:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80020d0:	795b      	ldrb	r3, [r3, #5]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80020d8:	791b      	ldrb	r3, [r3, #4]
 80020da:	b21b      	sxth	r3, r3
 80020dc:	4313      	orrs	r3, r2
 80020de:	b21b      	sxth	r3, r3
 80020e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80020e4:	2104      	movs	r1, #4
 80020e6:	4866      	ldr	r0, [pc, #408]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80020e8:	f004 feae 	bl	8006e48 <CRC16>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

			if(CRC_calc == CRC_reply) {
 80020f2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80020f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d103      	bne.n	8002106 <TinyBMS_UART_ReadRegBlockMODBUS+0x13e>
				printf("CRC pass\r\n");
 80020fe:	4863      	ldr	r0, [pc, #396]	; (800228c <TinyBMS_UART_ReadRegBlockMODBUS+0x2c4>)
 8002100:	f00c f814 	bl	800e12c <puts>
 8002104:	e002      	b.n	800210c <TinyBMS_UART_ReadRegBlockMODBUS+0x144>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8002106:	4862      	ldr	r0, [pc, #392]	; (8002290 <TinyBMS_UART_ReadRegBlockMODBUS+0x2c8>)
 8002108:	f00c f810 	bl	800e12c <puts>
			}
			reportBMSError(error);
 800210c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fe77 	bl	8006e04 <reportBMSError>
 8002116:	e0a6      	b.n	8002266 <TinyBMS_UART_ReadRegBlockMODBUS+0x29e>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_REG_BLOCK_MODBUS) {
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 800211a:	785b      	ldrb	r3, [r3, #1]
 800211c:	2b03      	cmp	r3, #3
 800211e:	f040 8095 	bne.w	800224c <TinyBMS_UART_ReadRegBlockMODBUS+0x284>
			printf("Response from BMS [OK]\r\n");
 8002122:	485c      	ldr	r0, [pc, #368]	; (8002294 <TinyBMS_UART_ReadRegBlockMODBUS+0x2cc>)
 8002124:	f00c f802 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8002128:	2201      	movs	r2, #1
 800212a:	4957      	ldr	r1, [pc, #348]	; (8002288 <TinyBMS_UART_ReadRegBlockMODBUS+0x2c0>)
 800212c:	4853      	ldr	r0, [pc, #332]	; (800227c <TinyBMS_UART_ReadRegBlockMODBUS+0x2b4>)
 800212e:	f00a f835 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t PL = rx_buffer[2];
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 2*n+5 from OK reply
 800213a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800213e:	b29b      	uxth	r3, r3
 8002140:	3302      	adds	r3, #2
 8002142:	b29b      	uxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4954      	ldr	r1, [pc, #336]	; (8002298 <TinyBMS_UART_ReadRegBlockMODBUS+0x2d0>)
 8002148:	484c      	ldr	r0, [pc, #304]	; (800227c <TinyBMS_UART_ReadRegBlockMODBUS+0x2b4>)
 800214a:	f00a f827 	bl	800c19c <HAL_UART_Receive_IT>

			uint16_t DATA[] = {0};
 800214e:	2300      	movs	r3, #0
 8002150:	813b      	strh	r3, [r7, #8]
			uint32_t numDATA = (PL / 2); //2 bytes per data
 8002152:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	643b      	str	r3, [r7, #64]	; 0x40
			uint32_t n = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	65bb      	str	r3, [r7, #88]	; 0x58

			for(uint32_t i = 0; i < numDATA; i++) {
 8002160:	2300      	movs	r3, #0
 8002162:	657b      	str	r3, [r7, #84]	; 0x54
 8002164:	e01c      	b.n	80021a0 <TinyBMS_UART_ReadRegBlockMODBUS+0x1d8>
				n++;
 8002166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002168:	3301      	adds	r3, #1
 800216a:	65bb      	str	r3, [r7, #88]	; 0x58
				//MSB first
				DATA[i] = (rx_buffer[(2*n)+2-1] << 8) | rx_buffer[(2*n)+3-1];
 800216c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800216e:	3301      	adds	r3, #1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	3b01      	subs	r3, #1
 8002174:	4a42      	ldr	r2, [pc, #264]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	b21a      	sxth	r2, r3
 800217c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800217e:	3301      	adds	r3, #1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	493f      	ldr	r1, [pc, #252]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b21b      	sxth	r3, r3
 800218c:	b29a      	uxth	r2, r3
 800218e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	443b      	add	r3, r7
 8002196:	f823 2c58 	strh.w	r2, [r3, #-88]
			for(uint32_t i = 0; i < numDATA; i++) {
 800219a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219c:	3301      	adds	r3, #1
 800219e:	657b      	str	r3, [r7, #84]	; 0x54
 80021a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d3de      	bcc.n	8002166 <TinyBMS_UART_ReadRegBlockMODBUS+0x19e>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 80021a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021aa:	3302      	adds	r3, #2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4a34      	ldr	r2, [pc, #208]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b8:	3302      	adds	r3, #2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	3b01      	subs	r3, #1
 80021be:	4930      	ldr	r1, [pc, #192]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 80021cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3303      	adds	r3, #3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	4829      	ldr	r0, [pc, #164]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 80021da:	f004 fe35 	bl	8006e48 <CRC16>
 80021de:	4603      	mov	r3, r0
 80021e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

			if(CRC_calc == CRC_reply) {
 80021e4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80021e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d129      	bne.n	8002244 <TinyBMS_UART_ReadRegBlockMODBUS+0x27c>
				printf("CRC pass\r\n");
 80021f0:	4826      	ldr	r0, [pc, #152]	; (800228c <TinyBMS_UART_ReadRegBlockMODBUS+0x2c4>)
 80021f2:	f00b ff9b 	bl	800e12c <puts>

				//Print the Register Block Contents
				printf("************ TinyBMS Register Block Contents ************\r\n");
 80021f6:	4829      	ldr	r0, [pc, #164]	; (800229c <TinyBMS_UART_ReadRegBlockMODBUS+0x2d4>)
 80021f8:	f00b ff98 	bl	800e12c <puts>
				for(uint16_t i = 0; i < numDATA; i++) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002202:	e013      	b.n	800222c <TinyBMS_UART_ReadRegBlockMODBUS+0x264>
					printf("Register 0x%04X: Value: %u\r\n", addr+i, DATA[i]);
 8002204:	887a      	ldrh	r2, [r7, #2]
 8002206:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800220a:	18d1      	adds	r1, r2, r3
 800220c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	3360      	adds	r3, #96	; 0x60
 8002214:	443b      	add	r3, r7
 8002216:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 800221a:	461a      	mov	r2, r3
 800221c:	4820      	ldr	r0, [pc, #128]	; (80022a0 <TinyBMS_UART_ReadRegBlockMODBUS+0x2d8>)
 800221e:	f00b feff 	bl	800e020 <iprintf>
				for(uint16_t i = 0; i < numDATA; i++) {
 8002222:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002226:	3301      	adds	r3, #1
 8002228:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800222c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002232:	429a      	cmp	r2, r3
 8002234:	d8e6      	bhi.n	8002204 <TinyBMS_UART_ReadRegBlockMODBUS+0x23c>
				}
				printf("----------------------------------------\r\n");
 8002236:	481b      	ldr	r0, [pc, #108]	; (80022a4 <TinyBMS_UART_ReadRegBlockMODBUS+0x2dc>)
 8002238:	f00b ff78 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002242:	e010      	b.n	8002266 <TinyBMS_UART_ReadRegBlockMODBUS+0x29e>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8002244:	4818      	ldr	r0, [pc, #96]	; (80022a8 <TinyBMS_UART_ReadRegBlockMODBUS+0x2e0>)
 8002246:	f00b ff71 	bl	800e12c <puts>
 800224a:	e00c      	b.n	8002266 <TinyBMS_UART_ReadRegBlockMODBUS+0x29e>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x03 but was 0x%02X\r\n", rx_buffer[1]);
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	4619      	mov	r1, r3
 8002252:	4816      	ldr	r0, [pc, #88]	; (80022ac <TinyBMS_UART_ReadRegBlockMODBUS+0x2e4>)
 8002254:	f00b fee4 	bl	800e020 <iprintf>
 8002258:	e005      	b.n	8002266 <TinyBMS_UART_ReadRegBlockMODBUS+0x29e>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <TinyBMS_UART_ReadRegBlockMODBUS+0x2b8>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4813      	ldr	r0, [pc, #76]	; (80022b0 <TinyBMS_UART_ReadRegBlockMODBUS+0x2e8>)
 8002262:	f00b fedd 	bl	800e020 <iprintf>
	}

	return retval;
 8002266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800226a:	4618      	mov	r0, r3
 800226c:	3760      	adds	r7, #96	; 0x60
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	080116b4 	.word	0x080116b4
 8002278:	080116d8 	.word	0x080116d8
 800227c:	20000228 	.word	0x20000228
 8002280:	2000037c 	.word	0x2000037c
 8002284:	08011364 	.word	0x08011364
 8002288:	2000037e 	.word	0x2000037e
 800228c:	08011280 	.word	0x08011280
 8002290:	0801128c 	.word	0x0801128c
 8002294:	08011380 	.word	0x08011380
 8002298:	2000037f 	.word	0x2000037f
 800229c:	080113e4 	.word	0x080113e4
 80022a0:	08011460 	.word	0x08011460
 80022a4:	08011480 	.word	0x08011480
 80022a8:	080114ac 	.word	0x080114ac
 80022ac:	0801171c 	.word	0x0801171c
 80022b0:	08011318 	.word	0x08011318

080022b4 <TinyBMS_UART_WriteRegBlockMODBUS>:
 * 							  Individual Register Response from BMS [OK]:
 * 						 	  Byte n*2+6  Byte n*2+7  Byte n*2+8  Byte n*2+9
 * 						 	  DATAn:MSB   DATAn:LSB   CRC:LSB     CRC:MSB
 * 						 	        [UINT16]
 */
uint8_t TinyBMS_UART_WriteRegBlockMODBUS(UART_HandleTypeDef *huart, uint16_t addr, uint8_t rl, uint8_t pl, uint16_t data[]) {
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 80022c0:	f2a4 4404 	subw	r4, r4, #1028	; 0x404
 80022c4:	6020      	str	r0, [r4, #0]
 80022c6:	460c      	mov	r4, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80022d0:	f2a3 4306 	subw	r3, r3, #1030	; 0x406
 80022d4:	4622      	mov	r2, r4
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80022dc:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
 80022e0:	4602      	mov	r2, r0
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80022e8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80022ec:	460a      	mov	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
	printf("TinyBMS_UART_WriteRegBlockMODBUS\r\n");
 80022f0:	48cf      	ldr	r0, [pc, #828]	; (8002630 <TinyBMS_UART_WriteRegBlockMODBUS+0x37c>)
 80022f2:	f00b ff1b 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 80022f6:	23ff      	movs	r3, #255	; 0xff
 80022f8:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407

	uint8_t tx_buffer[1000];
	uint8_t ADDR_LSB = 0, ADDR_MSB = 0, DATA_LSB = 0, DATA_MSB = 0, CRC_LSB = 0, CRC_MSB = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3401 	strb.w	r3, [r7, #1025]	; 0x401
 8002302:	2300      	movs	r3, #0
 8002304:	f887 3400 	strb.w	r3, [r7, #1024]	; 0x400
 8002308:	2300      	movs	r3, #0
 800230a:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff
 800230e:	2300      	movs	r3, #0
 8002310:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe
 8002314:	2300      	movs	r3, #0
 8002316:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
 800231a:	2300      	movs	r3, #0
 800231c:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
 8002326:	2300      	movs	r3, #0
 8002328:	f8a7 33f8 	strh.w	r3, [r7, #1016]	; 0x3f8
 800232c:	2300      	movs	r3, #0
 800232e:	f8a7 33f6 	strh.w	r3, [r7, #1014]	; 0x3f6

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8002332:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002336:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800233a:	22aa      	movs	r2, #170	; 0xaa
 800233c:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = UART_TBMS_WRITE_REG_BLOCK_MODBUS;
 800233e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002342:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002346:	2210      	movs	r2, #16
 8002348:	705a      	strb	r2, [r3, #1]

	//MSB first
	ADDR_MSB = ((addr >> 8) & 0xFF);
 800234a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800234e:	f2a3 4306 	subw	r3, r3, #1030	; 0x406
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	b29b      	uxth	r3, r3
 8002358:	f887 3400 	strb.w	r3, [r7, #1024]	; 0x400
	ADDR_LSB = (addr & 0xFF);
 800235c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002360:	f2a3 4306 	subw	r3, r3, #1030	; 0x406
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	f887 3401 	strb.w	r3, [r7, #1025]	; 0x401
	tx_buffer[2] = ADDR_MSB;
 800236a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800236e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002372:	f897 2400 	ldrb.w	r2, [r7, #1024]	; 0x400
 8002376:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = ADDR_LSB;
 8002378:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800237c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002380:	f897 2401 	ldrb.w	r2, [r7, #1025]	; 0x401
 8002384:	70da      	strb	r2, [r3, #3]

	tx_buffer[4] = 0x00;
 8002386:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800238a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800238e:	2200      	movs	r2, #0
 8002390:	711a      	strb	r2, [r3, #4]

	//rl out of bounds
	if((rl <= 0x00) || (rl > 0x64)) {
 8002392:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002396:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <TinyBMS_UART_WriteRegBlockMODBUS+0xfa>
 80023a0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80023a4:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d908      	bls.n	80023c0 <TinyBMS_UART_WriteRegBlockMODBUS+0x10c>
		printf("Invalid - registers to write value out of bounds. Max 100 (0x64)\r\n");
 80023ae:	48a1      	ldr	r0, [pc, #644]	; (8002634 <TinyBMS_UART_WriteRegBlockMODBUS+0x380>)
 80023b0:	f00b febc 	bl	800e12c <puts>
		retval = CMD_FAILURE;
 80023b4:	23ff      	movs	r3, #255	; 0xff
 80023b6:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
		return retval;
 80023ba:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 80023be:	e132      	b.n	8002626 <TinyBMS_UART_WriteRegBlockMODBUS+0x372>
	}
	tx_buffer[5] = rl;
 80023c0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80023c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80023c8:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 80023cc:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	715a      	strb	r2, [r3, #5]
	tx_buffer[6] = pl;
 80023d4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80023d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80023dc:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 80023e0:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	719a      	strb	r2, [r3, #6]

	uint16_t numDATA = (pl / 2); //2 bytes per data
 80023e8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80023ec:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f8a7 33f4 	strh.w	r3, [r7, #1012]	; 0x3f4
	uint16_t n = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404

	//input arrays data[] contains n uint16_t elements
	for(uint16_t i = 0; i < numDATA; i++) {
 8002400:	2300      	movs	r3, #0
 8002402:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
 8002406:	e034      	b.n	8002472 <TinyBMS_UART_WriteRegBlockMODBUS+0x1be>
		n++; //n = 1,2,3,.. data#
 8002408:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 800240c:	3301      	adds	r3, #1
 800240e:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404

		//MSB first
		DATA_MSB = ((data[i] >> 8) & 0xFF);
 8002412:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800241c:	4413      	add	r3, r2
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe
		DATA_LSB = (data[i] & 0xFF);
 8002428:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002432:	4413      	add	r3, r2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff
		tx_buffer[(2*n)+6-1] = DATA_MSB; //for n=1,2,3,.. index: 4,6,8,..
 800243a:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 800243e:	3303      	adds	r3, #3
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8002448:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800244c:	f897 13fe 	ldrb.w	r1, [r7, #1022]	; 0x3fe
 8002450:	54d1      	strb	r1, [r2, r3]
		tx_buffer[(2*n)+7-1] = DATA_LSB; //for n=1,2,3,.. index: 3,5,7,..
 8002452:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 8002456:	3303      	adds	r3, #3
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800245e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002462:	f897 13ff 	ldrb.w	r1, [r7, #1023]	; 0x3ff
 8002466:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < numDATA; i++) {
 8002468:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 800246c:	3301      	adds	r3, #1
 800246e:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
 8002472:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 8002476:	f8b7 33f4 	ldrh.w	r3, [r7, #1012]	; 0x3f4
 800247a:	429a      	cmp	r2, r3
 800247c:	d3c4      	bcc.n	8002408 <TinyBMS_UART_WriteRegBlockMODBUS+0x154>
	}

	CRC_request = CRC16(tx_buffer, pl+7);
 800247e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002482:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	3307      	adds	r3, #7
 800248c:	b29a      	uxth	r2, r3
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f004 fcd7 	bl	8006e48 <CRC16>
 800249a:	4603      	mov	r3, r0
 800249c:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
	CRC_LSB = (CRC_request & 0xFF);
 80024a0:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
 80024a4:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80024a8:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[(2*n)+8-1] = CRC_LSB;
 80024b4:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 80024b8:	3304      	adds	r3, #4
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 80024c2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80024c6:	f897 13fd 	ldrb.w	r1, [r7, #1021]	; 0x3fd
 80024ca:	54d1      	strb	r1, [r2, r3]
	tx_buffer[(2*n)+9-1] = CRC_MSB;
 80024cc:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 80024d0:	3304      	adds	r3, #4
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 80024d8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80024dc:	f897 13fc 	ldrb.w	r1, [r7, #1020]	; 0x3fc
 80024e0:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, pl+9);
 80024e2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80024e6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3309      	adds	r3, #9
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	4619      	mov	r1, r3
 80024f8:	484f      	ldr	r0, [pc, #316]	; (8002638 <TinyBMS_UART_WriteRegBlockMODBUS+0x384>)
 80024fa:	f009 fde1 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80024fe:	2202      	movs	r2, #2
 8002500:	494e      	ldr	r1, [pc, #312]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 8002502:	484d      	ldr	r0, [pc, #308]	; (8002638 <TinyBMS_UART_WriteRegBlockMODBUS+0x384>)
 8002504:	f009 fe4a 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2baa      	cmp	r3, #170	; 0xaa
 800250e:	f040 8082 	bne.w	8002616 <TinyBMS_UART_WriteRegBlockMODBUS+0x362>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8002512:	4b4a      	ldr	r3, [pc, #296]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d130      	bne.n	800257c <TinyBMS_UART_WriteRegBlockMODBUS+0x2c8>
			printf("Response from BMS [ERROR]\r\n");
 800251a:	4849      	ldr	r0, [pc, #292]	; (8002640 <TinyBMS_UART_WriteRegBlockMODBUS+0x38c>)
 800251c:	f00b fe06 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8002520:	2204      	movs	r2, #4
 8002522:	4948      	ldr	r1, [pc, #288]	; (8002644 <TinyBMS_UART_WriteRegBlockMODBUS+0x390>)
 8002524:	4844      	ldr	r0, [pc, #272]	; (8002638 <TinyBMS_UART_WriteRegBlockMODBUS+0x384>)
 8002526:	f009 fe39 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 800252a:	4b44      	ldr	r3, [pc, #272]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 800252c:	78db      	ldrb	r3, [r3, #3]
 800252e:	f887 33f0 	strb.w	r3, [r7, #1008]	; 0x3f0

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 8002534:	795b      	ldrb	r3, [r3, #5]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	b21a      	sxth	r2, r3
 800253a:	4b40      	ldr	r3, [pc, #256]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 800253c:	791b      	ldrb	r3, [r3, #4]
 800253e:	b21b      	sxth	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	b21b      	sxth	r3, r3
 8002544:	f8a7 33f6 	strh.w	r3, [r7, #1014]	; 0x3f6
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8002548:	2104      	movs	r1, #4
 800254a:	483c      	ldr	r0, [pc, #240]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 800254c:	f004 fc7c 	bl	8006e48 <CRC16>
 8002550:	4603      	mov	r3, r0
 8002552:	f8a7 33f8 	strh.w	r3, [r7, #1016]	; 0x3f8

			if(CRC_calc == CRC_reply) {
 8002556:	f8b7 23f8 	ldrh.w	r2, [r7, #1016]	; 0x3f8
 800255a:	f8b7 33f6 	ldrh.w	r3, [r7, #1014]	; 0x3f6
 800255e:	429a      	cmp	r2, r3
 8002560:	d103      	bne.n	800256a <TinyBMS_UART_WriteRegBlockMODBUS+0x2b6>
				printf("CRC pass\r\n");
 8002562:	4839      	ldr	r0, [pc, #228]	; (8002648 <TinyBMS_UART_WriteRegBlockMODBUS+0x394>)
 8002564:	f00b fde2 	bl	800e12c <puts>
 8002568:	e002      	b.n	8002570 <TinyBMS_UART_WriteRegBlockMODBUS+0x2bc>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 800256a:	4838      	ldr	r0, [pc, #224]	; (800264c <TinyBMS_UART_WriteRegBlockMODBUS+0x398>)
 800256c:	f00b fdde 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8002570:	f897 33f0 	ldrb.w	r3, [r7, #1008]	; 0x3f0
 8002574:	4618      	mov	r0, r3
 8002576:	f004 fc45 	bl	8006e04 <reportBMSError>
 800257a:	e052      	b.n	8002622 <TinyBMS_UART_WriteRegBlockMODBUS+0x36e>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_WRITE_REG_BLOCK_MODBUS) {
 800257c:	4b2f      	ldr	r3, [pc, #188]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2b10      	cmp	r3, #16
 8002582:	d141      	bne.n	8002608 <TinyBMS_UART_WriteRegBlockMODBUS+0x354>
			printf("Response from BMS [OK]\r\n");
 8002584:	4832      	ldr	r0, [pc, #200]	; (8002650 <TinyBMS_UART_WriteRegBlockMODBUS+0x39c>)
 8002586:	f00b fdd1 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 800258a:	2206      	movs	r2, #6
 800258c:	492d      	ldr	r1, [pc, #180]	; (8002644 <TinyBMS_UART_WriteRegBlockMODBUS+0x390>)
 800258e:	482a      	ldr	r0, [pc, #168]	; (8002638 <TinyBMS_UART_WriteRegBlockMODBUS+0x384>)
 8002590:	f009 fe04 	bl	800c19c <HAL_UART_Receive_IT>

			//MSB first
			uint16_t addr_response = ((rx_buffer[2] << 8) | rx_buffer[3]);
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 8002596:	789b      	ldrb	r3, [r3, #2]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	b21a      	sxth	r2, r3
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 800259e:	78db      	ldrb	r3, [r3, #3]
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2

			uint8_t rl_response = rx_buffer[5];
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 80025ac:	795b      	ldrb	r3, [r3, #5]
 80025ae:	f887 33f1 	strb.w	r3, [r7, #1009]	; 0x3f1

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 80025b4:	79db      	ldrb	r3, [r3, #7]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b21a      	sxth	r2, r3
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 80025bc:	799b      	ldrb	r3, [r3, #6]
 80025be:	b21b      	sxth	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	f8a7 33f6 	strh.w	r3, [r7, #1014]	; 0x3f6
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-5 of OK response
 80025c8:	2106      	movs	r1, #6
 80025ca:	481c      	ldr	r0, [pc, #112]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 80025cc:	f004 fc3c 	bl	8006e48 <CRC16>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f8a7 33f8 	strh.w	r3, [r7, #1016]	; 0x3f8

			if(CRC_calc == CRC_reply) {
 80025d6:	f8b7 23f8 	ldrh.w	r2, [r7, #1016]	; 0x3f8
 80025da:	f8b7 33f6 	ldrh.w	r3, [r7, #1014]	; 0x3f6
 80025de:	429a      	cmp	r2, r3
 80025e0:	d10e      	bne.n	8002600 <TinyBMS_UART_WriteRegBlockMODBUS+0x34c>
				printf("CRC pass\r\n");
 80025e2:	4819      	ldr	r0, [pc, #100]	; (8002648 <TinyBMS_UART_WriteRegBlockMODBUS+0x394>)
 80025e4:	f00b fda2 	bl	800e12c <puts>
				printf("Successful block write of %u registers starting from address: 0x%04X\r\n", rl_response, addr_response);
 80025e8:	f897 33f1 	ldrb.w	r3, [r7, #1009]	; 0x3f1
 80025ec:	f8b7 23f2 	ldrh.w	r2, [r7, #1010]	; 0x3f2
 80025f0:	4619      	mov	r1, r3
 80025f2:	4818      	ldr	r0, [pc, #96]	; (8002654 <TinyBMS_UART_WriteRegBlockMODBUS+0x3a0>)
 80025f4:	f00b fd14 	bl	800e020 <iprintf>
				retval = CMD_SUCCESS;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 80025fe:	e010      	b.n	8002622 <TinyBMS_UART_WriteRegBlockMODBUS+0x36e>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8002600:	4815      	ldr	r0, [pc, #84]	; (8002658 <TinyBMS_UART_WriteRegBlockMODBUS+0x3a4>)
 8002602:	f00b fd93 	bl	800e12c <puts>
 8002606:	e00c      	b.n	8002622 <TinyBMS_UART_WriteRegBlockMODBUS+0x36e>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x10 but was 0x%02X\r\n", rx_buffer[1]);
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	4619      	mov	r1, r3
 800260e:	4813      	ldr	r0, [pc, #76]	; (800265c <TinyBMS_UART_WriteRegBlockMODBUS+0x3a8>)
 8002610:	f00b fd06 	bl	800e020 <iprintf>
 8002614:	e005      	b.n	8002622 <TinyBMS_UART_WriteRegBlockMODBUS+0x36e>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <TinyBMS_UART_WriteRegBlockMODBUS+0x388>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4810      	ldr	r0, [pc, #64]	; (8002660 <TinyBMS_UART_WriteRegBlockMODBUS+0x3ac>)
 800261e:	f00b fcff 	bl	800e020 <iprintf>
	}

	return retval;
 8002622:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
}
 8002626:	4618      	mov	r0, r3
 8002628:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 800262c:	46bd      	mov	sp, r7
 800262e:	bd90      	pop	{r4, r7, pc}
 8002630:	08011754 	.word	0x08011754
 8002634:	08011778 	.word	0x08011778
 8002638:	20000228 	.word	0x20000228
 800263c:	2000037c 	.word	0x2000037c
 8002640:	08011364 	.word	0x08011364
 8002644:	2000037e 	.word	0x2000037e
 8002648:	08011280 	.word	0x08011280
 800264c:	0801128c 	.word	0x0801128c
 8002650:	08011380 	.word	0x08011380
 8002654:	080117bc 	.word	0x080117bc
 8002658:	080114ac 	.word	0x080114ac
 800265c:	08011804 	.word	0x08011804
 8002660:	08011318 	.word	0x08011318

08002664 <TinyBMS_UART_ResetClearEventsStatistics>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  Options: 0x01 - Clear Events , 0x02 - Clear Statistics , 0x05 - Reset BMS
 *
 */
uint8_t TinyBMS_UART_ResetClearEventsStatistics(UART_HandleTypeDef *huart, uint8_t option) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b092      	sub	sp, #72	; 0x48
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	70fb      	strb	r3, [r7, #3]
	printf("TinyBMS_UART_ResetClearEventsStatistics\r\n");
 8002670:	4874      	ldr	r0, [pc, #464]	; (8002844 <TinyBMS_UART_ResetClearEventsStatistics+0x1e0>)
 8002672:	f00b fd5b 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8002676:	23ff      	movs	r3, #255	; 0xff
 8002678:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002682:	2300      	movs	r3, #0
 8002684:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800268e:	2300      	movs	r3, #0
 8002690:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002694:	2300      	movs	r3, #0
 8002696:	87fb      	strh	r3, [r7, #62]	; 0x3e

	//Check if invalid option
	if((option != 0x01) && (option != 0x02) && (option != 0x05)) {
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d010      	beq.n	80026c0 <TinyBMS_UART_ResetClearEventsStatistics+0x5c>
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d00d      	beq.n	80026c0 <TinyBMS_UART_ResetClearEventsStatistics+0x5c>
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d00a      	beq.n	80026c0 <TinyBMS_UART_ResetClearEventsStatistics+0x5c>
		printf("Invalid option: 0x%02X\r\n", option);
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4866      	ldr	r0, [pc, #408]	; (8002848 <TinyBMS_UART_ResetClearEventsStatistics+0x1e4>)
 80026b0:	f00b fcb6 	bl	800e020 <iprintf>
		retval = CMD_FAILURE;
 80026b4:	23ff      	movs	r3, #255	; 0xff
 80026b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return retval;
 80026ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026be:	e0bc      	b.n	800283a <TinyBMS_UART_ResetClearEventsStatistics+0x1d6>
	}

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80026c0:	23aa      	movs	r3, #170	; 0xaa
 80026c2:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = UART_TBMS_RESET_CLEAR_EVENTS_STATS;
 80026c4:	2302      	movs	r3, #2
 80026c6:	727b      	strb	r3, [r7, #9]
	tx_buffer[2] = option; //check notes above
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	72bb      	strb	r3, [r7, #10]

	CRC_request = CRC16(tx_buffer, 3);
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	2103      	movs	r1, #3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f004 fbb8 	bl	8006e48 <CRC16>
 80026d8:	4603      	mov	r3, r0
 80026da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	CRC_LSB = (CRC_request & 0xFF);
 80026de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80026e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80026e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[3] = CRC_LSB;
 80026f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80026f6:	72fb      	strb	r3, [r7, #11]
	tx_buffer[4] = CRC_MSB;
 80026f8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80026fc:	733b      	strb	r3, [r7, #12]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 5);
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	2205      	movs	r2, #5
 8002704:	4619      	mov	r1, r3
 8002706:	4851      	ldr	r0, [pc, #324]	; (800284c <TinyBMS_UART_ResetClearEventsStatistics+0x1e8>)
 8002708:	f009 fcda 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check ACK/ERROR
 800270c:	2202      	movs	r2, #2
 800270e:	4950      	ldr	r1, [pc, #320]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 8002710:	484e      	ldr	r0, [pc, #312]	; (800284c <TinyBMS_UART_ResetClearEventsStatistics+0x1e8>)
 8002712:	f009 fd43 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2baa      	cmp	r3, #170	; 0xaa
 800271c:	f040 8085 	bne.w	800282a <TinyBMS_UART_ResetClearEventsStatistics+0x1c6>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 8002722:	785b      	ldrb	r3, [r3, #1]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12e      	bne.n	8002786 <TinyBMS_UART_ResetClearEventsStatistics+0x122>
			printf("Response from BMS [ERROR]\r\n");
 8002728:	484a      	ldr	r0, [pc, #296]	; (8002854 <TinyBMS_UART_ResetClearEventsStatistics+0x1f0>)
 800272a:	f00b fcff 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 800272e:	2204      	movs	r2, #4
 8002730:	4949      	ldr	r1, [pc, #292]	; (8002858 <TinyBMS_UART_ResetClearEventsStatistics+0x1f4>)
 8002732:	4846      	ldr	r0, [pc, #280]	; (800284c <TinyBMS_UART_ResetClearEventsStatistics+0x1e8>)
 8002734:	f009 fd32 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8002738:	4b45      	ldr	r3, [pc, #276]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 800273a:	78db      	ldrb	r3, [r3, #3]
 800273c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 8002742:	795b      	ldrb	r3, [r3, #5]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	b21a      	sxth	r2, r3
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 800274a:	791b      	ldrb	r3, [r3, #4]
 800274c:	b21b      	sxth	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b21b      	sxth	r3, r3
 8002752:	87fb      	strh	r3, [r7, #62]	; 0x3e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8002754:	2104      	movs	r1, #4
 8002756:	483e      	ldr	r0, [pc, #248]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 8002758:	f004 fb76 	bl	8006e48 <CRC16>
 800275c:	4603      	mov	r3, r0
 800275e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			if(CRC_calc == CRC_reply) {
 8002762:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002766:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002768:	429a      	cmp	r2, r3
 800276a:	d103      	bne.n	8002774 <TinyBMS_UART_ResetClearEventsStatistics+0x110>
				printf("CRC pass\r\n");
 800276c:	483b      	ldr	r0, [pc, #236]	; (800285c <TinyBMS_UART_ResetClearEventsStatistics+0x1f8>)
 800276e:	f00b fcdd 	bl	800e12c <puts>
 8002772:	e002      	b.n	800277a <TinyBMS_UART_ResetClearEventsStatistics+0x116>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8002774:	483a      	ldr	r0, [pc, #232]	; (8002860 <TinyBMS_UART_ResetClearEventsStatistics+0x1fc>)
 8002776:	f00b fcd9 	bl	800e12c <puts>
			}
			reportBMSError(error);
 800277a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fb40 	bl	8006e04 <reportBMSError>
 8002784:	e057      	b.n	8002836 <TinyBMS_UART_ResetClearEventsStatistics+0x1d2>

		//[ACK]
		} else if(rx_buffer[1] == ACK) {
 8002786:	4b32      	ldr	r3, [pc, #200]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d146      	bne.n	800281c <TinyBMS_UART_ResetClearEventsStatistics+0x1b8>
			printf("Response from BMS [ACK]\r\n");
 800278e:	4835      	ldr	r0, [pc, #212]	; (8002864 <TinyBMS_UART_ResetClearEventsStatistics+0x200>)
 8002790:	f00b fccc 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 3); //read bytes 3-5 from ACK reply
 8002794:	2203      	movs	r2, #3
 8002796:	4930      	ldr	r1, [pc, #192]	; (8002858 <TinyBMS_UART_ResetClearEventsStatistics+0x1f4>)
 8002798:	482c      	ldr	r0, [pc, #176]	; (800284c <TinyBMS_UART_ResetClearEventsStatistics+0x1e8>)
 800279a:	f009 fcff 	bl	800c19c <HAL_UART_Receive_IT>
			if(rx_buffer[2] == UART_TBMS_RESET_CLEAR_EVENTS_STATS) {
 800279e:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 80027a0:	789b      	ldrb	r3, [r3, #2]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d147      	bne.n	8002836 <TinyBMS_UART_ResetClearEventsStatistics+0x1d2>
				CRC_reply = ((rx_buffer[4] << 8) | rx_buffer[3]);
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 80027a8:	791b      	ldrb	r3, [r3, #4]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	4b28      	ldr	r3, [pc, #160]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 80027b0:	78db      	ldrb	r3, [r3, #3]
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	4313      	orrs	r3, r2
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
				CRC_calc = CRC16(rx_buffer, 3); //Calc CRC for bytes 1-3 of OK response
 80027ba:	2103      	movs	r1, #3
 80027bc:	4824      	ldr	r0, [pc, #144]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 80027be:	f004 fb43 	bl	8006e48 <CRC16>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

				if(CRC_calc == CRC_reply) {
 80027c8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80027cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d120      	bne.n	8002814 <TinyBMS_UART_ResetClearEventsStatistics+0x1b0>
					printf("CRC pass\r\n");
 80027d2:	4822      	ldr	r0, [pc, #136]	; (800285c <TinyBMS_UART_ResetClearEventsStatistics+0x1f8>)
 80027d4:	f00b fcaa 	bl	800e12c <puts>

					if(option == TINYBMS_CLEAR_EVENTS)
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <TinyBMS_UART_ResetClearEventsStatistics+0x186>
						printf("Option 0x%02X - Clear Events\r\n", option);
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	4619      	mov	r1, r3
 80027e2:	4821      	ldr	r0, [pc, #132]	; (8002868 <TinyBMS_UART_ResetClearEventsStatistics+0x204>)
 80027e4:	f00b fc1c 	bl	800e020 <iprintf>
 80027e8:	e010      	b.n	800280c <TinyBMS_UART_ResetClearEventsStatistics+0x1a8>
					else if(option == TINYBMS_CLEAR_STATS)
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d105      	bne.n	80027fc <TinyBMS_UART_ResetClearEventsStatistics+0x198>
						printf("Option 0x%02X - Clear Statistics\r\n", option);
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	4619      	mov	r1, r3
 80027f4:	481d      	ldr	r0, [pc, #116]	; (800286c <TinyBMS_UART_ResetClearEventsStatistics+0x208>)
 80027f6:	f00b fc13 	bl	800e020 <iprintf>
 80027fa:	e007      	b.n	800280c <TinyBMS_UART_ResetClearEventsStatistics+0x1a8>
					else if(option == TINYBMS_RESET_BMS)
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d104      	bne.n	800280c <TinyBMS_UART_ResetClearEventsStatistics+0x1a8>
						printf("Option 0x%02X - Reset BMS\r\n", option);
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	4619      	mov	r1, r3
 8002806:	481a      	ldr	r0, [pc, #104]	; (8002870 <TinyBMS_UART_ResetClearEventsStatistics+0x20c>)
 8002808:	f00b fc0a 	bl	800e020 <iprintf>

					retval = CMD_SUCCESS;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002812:	e010      	b.n	8002836 <TinyBMS_UART_ResetClearEventsStatistics+0x1d2>

				} else {
					printf("CRC fail in BMS ACK\r\n");
 8002814:	4817      	ldr	r0, [pc, #92]	; (8002874 <TinyBMS_UART_ResetClearEventsStatistics+0x210>)
 8002816:	f00b fc89 	bl	800e12c <puts>
 800281a:	e00c      	b.n	8002836 <TinyBMS_UART_ResetClearEventsStatistics+0x1d2>
				}
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1B but was 0x%02X\r\n", rx_buffer[1]);
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	4619      	mov	r1, r3
 8002822:	4815      	ldr	r0, [pc, #84]	; (8002878 <TinyBMS_UART_ResetClearEventsStatistics+0x214>)
 8002824:	f00b fbfc 	bl	800e020 <iprintf>
 8002828:	e005      	b.n	8002836 <TinyBMS_UART_ResetClearEventsStatistics+0x1d2>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <TinyBMS_UART_ResetClearEventsStatistics+0x1ec>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4812      	ldr	r0, [pc, #72]	; (800287c <TinyBMS_UART_ResetClearEventsStatistics+0x218>)
 8002832:	f00b fbf5 	bl	800e020 <iprintf>
	}

	return retval;
 8002836:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800283a:	4618      	mov	r0, r3
 800283c:	3748      	adds	r7, #72	; 0x48
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	0801183c 	.word	0x0801183c
 8002848:	08011868 	.word	0x08011868
 800284c:	20000228 	.word	0x20000228
 8002850:	2000037c 	.word	0x2000037c
 8002854:	08011364 	.word	0x08011364
 8002858:	2000037e 	.word	0x2000037e
 800285c:	08011280 	.word	0x08011280
 8002860:	0801128c 	.word	0x0801128c
 8002864:	080112a4 	.word	0x080112a4
 8002868:	08011884 	.word	0x08011884
 800286c:	080118a4 	.word	0x080118a4
 8002870:	080118c8 	.word	0x080118c8
 8002874:	080112c8 	.word	0x080112c8
 8002878:	080118e4 	.word	0x080118e4
 800287c:	08011318 	.word	0x08011318

08002880 <TinyBMS_UART_ReadNewestEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_UART_ReadNewestEvents(UART_HandleTypeDef *huart) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b09a      	sub	sp, #104	; 0x68
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadNewestEvents\r\n");
 8002888:	48ad      	ldr	r0, [pc, #692]	; (8002b40 <TinyBMS_UART_ReadNewestEvents+0x2c0>)
 800288a:	f00b fc4f 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 800288e:	23ff      	movs	r3, #255	; 0xff
 8002890:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 80028b2:	23aa      	movs	r3, #170	; 0xaa
 80028b4:	743b      	strb	r3, [r7, #16]
	tx_buffer[1] = UART_TBMS_READ_NEWEST_EVENTS;
 80028b6:	2311      	movs	r3, #17
 80028b8:	747b      	strb	r3, [r7, #17]

	CRC_request = CRC16(tx_buffer, 2);
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	2102      	movs	r1, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 fac1 	bl	8006e48 <CRC16>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	CRC_LSB = (CRC_request & 0xFF);
 80028cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028d0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80028d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 80028e0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80028e4:	74bb      	strb	r3, [r7, #18]
	tx_buffer[3] = CRC_MSB;
 80028e6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80028ea:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	2204      	movs	r2, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	4893      	ldr	r0, [pc, #588]	; (8002b44 <TinyBMS_UART_ReadNewestEvents+0x2c4>)
 80028f6:	f009 fbe3 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80028fa:	2202      	movs	r2, #2
 80028fc:	4992      	ldr	r1, [pc, #584]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 80028fe:	4891      	ldr	r0, [pc, #580]	; (8002b44 <TinyBMS_UART_ReadNewestEvents+0x2c4>)
 8002900:	f009 fc4c 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8002904:	4b90      	ldr	r3, [pc, #576]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2baa      	cmp	r3, #170	; 0xaa
 800290a:	f040 810c 	bne.w	8002b26 <TinyBMS_UART_ReadNewestEvents+0x2a6>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 800290e:	4b8e      	ldr	r3, [pc, #568]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002910:	785b      	ldrb	r3, [r3, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d130      	bne.n	8002978 <TinyBMS_UART_ReadNewestEvents+0xf8>
			printf("Response from BMS [ERROR]\r\n");
 8002916:	488d      	ldr	r0, [pc, #564]	; (8002b4c <TinyBMS_UART_ReadNewestEvents+0x2cc>)
 8002918:	f00b fc08 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 800291c:	2204      	movs	r2, #4
 800291e:	498c      	ldr	r1, [pc, #560]	; (8002b50 <TinyBMS_UART_ReadNewestEvents+0x2d0>)
 8002920:	4888      	ldr	r0, [pc, #544]	; (8002b44 <TinyBMS_UART_ReadNewestEvents+0x2c4>)
 8002922:	f009 fc3b 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002928:	78db      	ldrb	r3, [r3, #3]
 800292a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 800292e:	4b86      	ldr	r3, [pc, #536]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002930:	795b      	ldrb	r3, [r3, #5]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	b21a      	sxth	r2, r3
 8002936:	4b84      	ldr	r3, [pc, #528]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002938:	791b      	ldrb	r3, [r3, #4]
 800293a:	b21b      	sxth	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	b21b      	sxth	r3, r3
 8002940:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8002944:	2104      	movs	r1, #4
 8002946:	4880      	ldr	r0, [pc, #512]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002948:	f004 fa7e 	bl	8006e48 <CRC16>
 800294c:	4603      	mov	r3, r0
 800294e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			if(CRC_calc == CRC_reply) {
 8002952:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002956:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800295a:	429a      	cmp	r2, r3
 800295c:	d103      	bne.n	8002966 <TinyBMS_UART_ReadNewestEvents+0xe6>
				printf("CRC pass\r\n");
 800295e:	487d      	ldr	r0, [pc, #500]	; (8002b54 <TinyBMS_UART_ReadNewestEvents+0x2d4>)
 8002960:	f00b fbe4 	bl	800e12c <puts>
 8002964:	e002      	b.n	800296c <TinyBMS_UART_ReadNewestEvents+0xec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8002966:	487c      	ldr	r0, [pc, #496]	; (8002b58 <TinyBMS_UART_ReadNewestEvents+0x2d8>)
 8002968:	f00b fbe0 	bl	800e12c <puts>
			}
			reportBMSError(error);
 800296c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002970:	4618      	mov	r0, r3
 8002972:	f004 fa47 	bl	8006e04 <reportBMSError>
 8002976:	e0dc      	b.n	8002b32 <TinyBMS_UART_ReadNewestEvents+0x2b2>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_NEWEST_EVENTS) {
 8002978:	4b73      	ldr	r3, [pc, #460]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	2b11      	cmp	r3, #17
 800297e:	f040 80cb 	bne.w	8002b18 <TinyBMS_UART_ReadNewestEvents+0x298>
			printf("Response from BMS [OK]\r\n");
 8002982:	4876      	ldr	r0, [pc, #472]	; (8002b5c <TinyBMS_UART_ReadNewestEvents+0x2dc>)
 8002984:	f00b fbd2 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8002988:	2201      	movs	r2, #1
 800298a:	4971      	ldr	r1, [pc, #452]	; (8002b50 <TinyBMS_UART_ReadNewestEvents+0x2d0>)
 800298c:	486d      	ldr	r0, [pc, #436]	; (8002b44 <TinyBMS_UART_ReadNewestEvents+0x2c4>)
 800298e:	f009 fc05 	bl	800c19c <HAL_UART_Receive_IT>

			//Total Events: (0x01-0x90) or 144 events
			uint8_t PL = rx_buffer[2];
 8002992:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002994:	789b      	ldrb	r3, [r3, #2]
 8002996:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			//Payload Length = PL = 4n+4 bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 4n+9 from OK reply
 800299a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3302      	adds	r3, #2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	496e      	ldr	r1, [pc, #440]	; (8002b60 <TinyBMS_UART_ReadNewestEvents+0x2e0>)
 80029a8:	4866      	ldr	r0, [pc, #408]	; (8002b44 <TinyBMS_UART_ReadNewestEvents+0x2c4>)
 80029aa:	f009 fbf7 	bl	800c19c <HAL_UART_Receive_IT>

			uint32_t BTSP = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	663b      	str	r3, [r7, #96]	; 0x60
			uint32_t TSP[] = {0}; 	//uint24_t stored in a uint32_t
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
			uint8_t Event[] = {0};
 80029b6:	2300      	movs	r3, #0
 80029b8:	723b      	strb	r3, [r7, #8]
			uint32_t numEvents = ((PL - 4) / 4); //4 bytes for BTSP + 4 bytes per TSP+EVENT reading
 80029ba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80029be:	3b04      	subs	r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da00      	bge.n	80029c6 <TinyBMS_UART_ReadNewestEvents+0x146>
 80029c4:	3303      	adds	r3, #3
 80029c6:	109b      	asrs	r3, r3, #2
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
			//**1 event = Payload length of 8 Bytes (BTSP + TSP + EVENT), 2 events = 12 Bytes, etc..**
			uint32_t n = 1; //event index
 80029ca:	2301      	movs	r3, #1
 80029cc:	65fb      	str	r3, [r7, #92]	; 0x5c

			for(uint32_t i = 0; i < numEvents; i++) {
 80029ce:	2300      	movs	r3, #0
 80029d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80029d2:	e048      	b.n	8002a66 <TinyBMS_UART_ReadNewestEvents+0x1e6>
				if(i == 0) {
 80029d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d119      	bne.n	8002a0e <TinyBMS_UART_ReadNewestEvents+0x18e>
					//BTSP BMS Timestamp in seconds -> LSB = Byte4, MSB = Byte7 (i.e. rx_buffer[3:6])
					BTSP = ((rx_buffer[(4*n)+3-1] << 24) | (rx_buffer[(4*n)+2-1] << 16) | (rx_buffer[(4*n)+1-1] << 8) | (rx_buffer[(4*n)-1]));
 80029da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	4a59      	ldr	r2, [pc, #356]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	061a      	lsls	r2, r3, #24
 80029e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	3301      	adds	r3, #1
 80029ec:	4956      	ldr	r1, [pc, #344]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4953      	ldr	r1, [pc, #332]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	4313      	orrs	r3, r2
 8002a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a02:	0092      	lsls	r2, r2, #2
 8002a04:	3a01      	subs	r2, #1
 8002a06:	4950      	ldr	r1, [pc, #320]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002a08:	5c8a      	ldrb	r2, [r1, r2]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	663b      	str	r3, [r7, #96]	; 0x60
				}

				//TSPn Event Timestamp in seconds -> LSB = Byte4n+4, MSB = Byte4n+6 (i.e. rx_buffer[4n+4-1 : 4n+6-1])
				//**Remember that TSP data is a uint24_t stored in a uint32_t, so ignore the MSB of the array element**
				TSP[i] = ((rx_buffer[(4*n)+6-1] << 16) | (rx_buffer[(4*n)+5-1] << 8) | (rx_buffer[(4*n)+4-1]));
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	3305      	adds	r3, #5
 8002a14:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	041a      	lsls	r2, r3, #16
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4949      	ldr	r1, [pc, #292]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	4313      	orrs	r3, r2
 8002a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a2a:	3201      	adds	r2, #1
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	4945      	ldr	r1, [pc, #276]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002a32:	5c8a      	ldrb	r2, [r1, r2]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	461a      	mov	r2, r3
 8002a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3368      	adds	r3, #104	; 0x68
 8002a3e:	443b      	add	r3, r7
 8002a40:	f843 2c5c 	str.w	r2, [r3, #-92]

				//BMS Eventn ID -> Byte(4n+7) (i.e. rx_buffer [4n+7-1])
				Event[i] = rx_buffer[(4*n)+7-1];
 8002a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	3306      	adds	r3, #6
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002a4c:	5cd1      	ldrb	r1, [r2, r3]
 8002a4e:	f107 0208 	add.w	r2, r7, #8
 8002a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a54:	4413      	add	r3, r2
 8002a56:	460a      	mov	r2, r1
 8002a58:	701a      	strb	r2, [r3, #0]

				n++;
 8002a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
			for(uint32_t i = 0; i < numEvents; i++) {
 8002a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a62:	3301      	adds	r3, #1
 8002a64:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d3b2      	bcc.n	80029d4 <TinyBMS_UART_ReadNewestEvents+0x154>
			}

			CRC_reply = ((rx_buffer[(4*n)+9-1] << 8) | rx_buffer[(4*n)+8-1]);
 8002a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a70:	3302      	adds	r3, #2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7e:	3302      	adds	r3, #2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	3b01      	subs	r3, #1
 8002a84:	4930      	ldr	r1, [pc, #192]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8002a92:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3303      	adds	r3, #3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	482a      	ldr	r0, [pc, #168]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002aa0:	f004 f9d2 	bl	8006e48 <CRC16>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			if(CRC_calc == CRC_reply) {
 8002aaa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002aae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d12c      	bne.n	8002b10 <TinyBMS_UART_ReadNewestEvents+0x290>
				printf("CRC pass\r\n");
 8002ab6:	4827      	ldr	r0, [pc, #156]	; (8002b54 <TinyBMS_UART_ReadNewestEvents+0x2d4>)
 8002ab8:	f00b fb38 	bl	800e12c <puts>

				//Print "Newest Events" Timestamps with their Event IDs
				printf("************ TinyBMS Newest Events ************\r\n");
 8002abc:	4829      	ldr	r0, [pc, #164]	; (8002b64 <TinyBMS_UART_ReadNewestEvents+0x2e4>)
 8002abe:	f00b fb35 	bl	800e12c <puts>
				for(uint32_t i = 0; i < numEvents; i++) {
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	657b      	str	r3, [r7, #84]	; 0x54
 8002ac6:	e018      	b.n	8002afa <TinyBMS_UART_ReadNewestEvents+0x27a>
					if(i == 0) {
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <TinyBMS_UART_ReadNewestEvents+0x256>
						//could convert seconds into a meaningful hh:mm:ss time later
						printf("BMS Timestamp (s): %lu\r\n", BTSP);
 8002ace:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ad0:	4825      	ldr	r0, [pc, #148]	; (8002b68 <TinyBMS_UART_ReadNewestEvents+0x2e8>)
 8002ad2:	f00b faa5 	bl	800e020 <iprintf>
					}
					//could convert seconds into a meaningful hh:mm:ss time later
					printf("Event Timestamp (s): %lu \t Event ID: 0x%02X\r\n", TSP[i], Event[i]);
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	3368      	adds	r3, #104	; 0x68
 8002adc:	443b      	add	r3, r7
 8002ade:	f853 1c5c 	ldr.w	r1, [r3, #-92]
 8002ae2:	f107 0208 	add.w	r2, r7, #8
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae8:	4413      	add	r3, r2
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	481f      	ldr	r0, [pc, #124]	; (8002b6c <TinyBMS_UART_ReadNewestEvents+0x2ec>)
 8002af0:	f00b fa96 	bl	800e020 <iprintf>
				for(uint32_t i = 0; i < numEvents; i++) {
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	3301      	adds	r3, #1
 8002af8:	657b      	str	r3, [r7, #84]	; 0x54
 8002afa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3e2      	bcc.n	8002ac8 <TinyBMS_UART_ReadNewestEvents+0x248>
				}
				printf("----------------------------------------\r\n");
 8002b02:	481b      	ldr	r0, [pc, #108]	; (8002b70 <TinyBMS_UART_ReadNewestEvents+0x2f0>)
 8002b04:	f00b fb12 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b0e:	e010      	b.n	8002b32 <TinyBMS_UART_ReadNewestEvents+0x2b2>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8002b10:	4818      	ldr	r0, [pc, #96]	; (8002b74 <TinyBMS_UART_ReadNewestEvents+0x2f4>)
 8002b12:	f00b fb0b 	bl	800e12c <puts>
 8002b16:	e00c      	b.n	8002b32 <TinyBMS_UART_ReadNewestEvents+0x2b2>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x11 but was 0x%02X\r\n", rx_buffer[1]);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4816      	ldr	r0, [pc, #88]	; (8002b78 <TinyBMS_UART_ReadNewestEvents+0x2f8>)
 8002b20:	f00b fa7e 	bl	800e020 <iprintf>
 8002b24:	e005      	b.n	8002b32 <TinyBMS_UART_ReadNewestEvents+0x2b2>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <TinyBMS_UART_ReadNewestEvents+0x2c8>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4813      	ldr	r0, [pc, #76]	; (8002b7c <TinyBMS_UART_ReadNewestEvents+0x2fc>)
 8002b2e:	f00b fa77 	bl	800e020 <iprintf>
	}

	return retval;
 8002b32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3768      	adds	r7, #104	; 0x68
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	0801191c 	.word	0x0801191c
 8002b44:	20000228 	.word	0x20000228
 8002b48:	2000037c 	.word	0x2000037c
 8002b4c:	08011364 	.word	0x08011364
 8002b50:	2000037e 	.word	0x2000037e
 8002b54:	08011280 	.word	0x08011280
 8002b58:	0801128c 	.word	0x0801128c
 8002b5c:	08011380 	.word	0x08011380
 8002b60:	2000037f 	.word	0x2000037f
 8002b64:	0801193c 	.word	0x0801193c
 8002b68:	08011970 	.word	0x08011970
 8002b6c:	0801198c 	.word	0x0801198c
 8002b70:	08011480 	.word	0x08011480
 8002b74:	080114ac 	.word	0x080114ac
 8002b78:	080119bc 	.word	0x080119bc
 8002b7c:	08011318 	.word	0x08011318

08002b80 <TinyBMS_UART_ReadAllEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_UART_ReadAllEvents(UART_HandleTypeDef *huart) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b09a      	sub	sp, #104	; 0x68
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadAllEvents\r\n");
 8002b88:	48ad      	ldr	r0, [pc, #692]	; (8002e40 <TinyBMS_UART_ReadAllEvents+0x2c0>)
 8002b8a:	f00b facf 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8002b8e:	23ff      	movs	r3, #255	; 0xff
 8002b90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8002bb2:	23aa      	movs	r3, #170	; 0xaa
 8002bb4:	743b      	strb	r3, [r7, #16]
	tx_buffer[1] = UART_TBMS_READ_ALL_EVENTS;
 8002bb6:	2312      	movs	r3, #18
 8002bb8:	747b      	strb	r3, [r7, #17]

	CRC_request = CRC16(tx_buffer, 2);
 8002bba:	f107 0310 	add.w	r3, r7, #16
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f004 f941 	bl	8006e48 <CRC16>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	CRC_LSB = (CRC_request & 0xFF);
 8002bcc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bd0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8002bd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8002be0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002be4:	74bb      	strb	r3, [r7, #18]
	tx_buffer[3] = CRC_MSB;
 8002be6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002bea:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4893      	ldr	r0, [pc, #588]	; (8002e44 <TinyBMS_UART_ReadAllEvents+0x2c4>)
 8002bf6:	f009 fa63 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4992      	ldr	r1, [pc, #584]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002bfe:	4891      	ldr	r0, [pc, #580]	; (8002e44 <TinyBMS_UART_ReadAllEvents+0x2c4>)
 8002c00:	f009 facc 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8002c04:	4b90      	ldr	r3, [pc, #576]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2baa      	cmp	r3, #170	; 0xaa
 8002c0a:	f040 810c 	bne.w	8002e26 <TinyBMS_UART_ReadAllEvents+0x2a6>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8002c0e:	4b8e      	ldr	r3, [pc, #568]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d130      	bne.n	8002c78 <TinyBMS_UART_ReadAllEvents+0xf8>
			printf("Response from BMS [ERROR]\r\n");
 8002c16:	488d      	ldr	r0, [pc, #564]	; (8002e4c <TinyBMS_UART_ReadAllEvents+0x2cc>)
 8002c18:	f00b fa88 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	498c      	ldr	r1, [pc, #560]	; (8002e50 <TinyBMS_UART_ReadAllEvents+0x2d0>)
 8002c20:	4888      	ldr	r0, [pc, #544]	; (8002e44 <TinyBMS_UART_ReadAllEvents+0x2c4>)
 8002c22:	f009 fabb 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8002c26:	4b88      	ldr	r3, [pc, #544]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002c28:	78db      	ldrb	r3, [r3, #3]
 8002c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8002c2e:	4b86      	ldr	r3, [pc, #536]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002c30:	795b      	ldrb	r3, [r3, #5]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	b21a      	sxth	r2, r3
 8002c36:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002c38:	791b      	ldrb	r3, [r3, #4]
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8002c44:	2104      	movs	r1, #4
 8002c46:	4880      	ldr	r0, [pc, #512]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002c48:	f004 f8fe 	bl	8006e48 <CRC16>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			if(CRC_calc == CRC_reply) {
 8002c52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d103      	bne.n	8002c66 <TinyBMS_UART_ReadAllEvents+0xe6>
				printf("CRC pass\r\n");
 8002c5e:	487d      	ldr	r0, [pc, #500]	; (8002e54 <TinyBMS_UART_ReadAllEvents+0x2d4>)
 8002c60:	f00b fa64 	bl	800e12c <puts>
 8002c64:	e002      	b.n	8002c6c <TinyBMS_UART_ReadAllEvents+0xec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8002c66:	487c      	ldr	r0, [pc, #496]	; (8002e58 <TinyBMS_UART_ReadAllEvents+0x2d8>)
 8002c68:	f00b fa60 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8002c6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 f8c7 	bl	8006e04 <reportBMSError>
 8002c76:	e0dc      	b.n	8002e32 <TinyBMS_UART_ReadAllEvents+0x2b2>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_ALL_EVENTS) {
 8002c78:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002c7a:	785b      	ldrb	r3, [r3, #1]
 8002c7c:	2b12      	cmp	r3, #18
 8002c7e:	f040 80cb 	bne.w	8002e18 <TinyBMS_UART_ReadAllEvents+0x298>
			printf("Response from BMS [OK]\r\n");
 8002c82:	4876      	ldr	r0, [pc, #472]	; (8002e5c <TinyBMS_UART_ReadAllEvents+0x2dc>)
 8002c84:	f00b fa52 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4971      	ldr	r1, [pc, #452]	; (8002e50 <TinyBMS_UART_ReadAllEvents+0x2d0>)
 8002c8c:	486d      	ldr	r0, [pc, #436]	; (8002e44 <TinyBMS_UART_ReadAllEvents+0x2c4>)
 8002c8e:	f009 fa85 	bl	800c19c <HAL_UART_Receive_IT>

			//Total Events: (0x01-0x90) or 144 events
			uint8_t PL = rx_buffer[2];
 8002c92:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002c94:	789b      	ldrb	r3, [r3, #2]
 8002c96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			//Payload Length = PL = 4n+4 bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 4n+9 from OK reply
 8002c9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	496e      	ldr	r1, [pc, #440]	; (8002e60 <TinyBMS_UART_ReadAllEvents+0x2e0>)
 8002ca8:	4866      	ldr	r0, [pc, #408]	; (8002e44 <TinyBMS_UART_ReadAllEvents+0x2c4>)
 8002caa:	f009 fa77 	bl	800c19c <HAL_UART_Receive_IT>

			uint32_t BTSP = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
			uint32_t TSP[] = {0}; 	//uint24_t stored in a uint32_t
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
			uint8_t Event[] = {0};
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	723b      	strb	r3, [r7, #8]
			uint32_t numEvents = ((PL - 4) / 4); //4 bytes for BTSP + 4 bytes per TSP+EVENT reading
 8002cba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da00      	bge.n	8002cc6 <TinyBMS_UART_ReadAllEvents+0x146>
 8002cc4:	3303      	adds	r3, #3
 8002cc6:	109b      	asrs	r3, r3, #2
 8002cc8:	647b      	str	r3, [r7, #68]	; 0x44
			//**1 event = Payload length of 8 Bytes (BTSP + TSP + EVENT), 2 events = 12 Bytes, etc..**
			uint32_t n = 1; //event index
 8002cca:	2301      	movs	r3, #1
 8002ccc:	65fb      	str	r3, [r7, #92]	; 0x5c

			for(uint32_t i = 0; i < numEvents; i++) {
 8002cce:	2300      	movs	r3, #0
 8002cd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cd2:	e048      	b.n	8002d66 <TinyBMS_UART_ReadAllEvents+0x1e6>
				if(i == 0) {
 8002cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d119      	bne.n	8002d0e <TinyBMS_UART_ReadAllEvents+0x18e>
					//BTSP BMS Timestamp in seconds -> LSB = Byte4, MSB = Byte7 (i.e. rx_buffer[3:6])
					BTSP = ((rx_buffer[(4*n)+3-1] << 24) | (rx_buffer[(4*n)+2-1] << 16) | (rx_buffer[(4*n)+1-1] << 8) | (rx_buffer[(4*n)-1]));
 8002cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	4a59      	ldr	r2, [pc, #356]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002ce2:	5cd3      	ldrb	r3, [r2, r3]
 8002ce4:	061a      	lsls	r2, r3, #24
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	3301      	adds	r3, #1
 8002cec:	4956      	ldr	r1, [pc, #344]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4953      	ldr	r1, [pc, #332]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	3a01      	subs	r2, #1
 8002d06:	4950      	ldr	r1, [pc, #320]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002d08:	5c8a      	ldrb	r2, [r1, r2]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	663b      	str	r3, [r7, #96]	; 0x60
				}

				//TSPn Event Timestamp in seconds -> LSB = Byte4n+4, MSB = Byte4n+6 (i.e. rx_buffer[4n+4-1 : 4n+6-1])
				//**Remember that TSP data is a uint24_t stored in a uint32_t, so ignore the MSB of the array element**
				TSP[i] = ((rx_buffer[(4*n)+6-1] << 16) | (rx_buffer[(4*n)+5-1] << 8) | (rx_buffer[(4*n)+4-1]));
 8002d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	3305      	adds	r3, #5
 8002d14:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	041a      	lsls	r2, r3, #16
 8002d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4949      	ldr	r1, [pc, #292]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	4313      	orrs	r3, r2
 8002d28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d2a:	3201      	adds	r2, #1
 8002d2c:	0092      	lsls	r2, r2, #2
 8002d2e:	3a01      	subs	r2, #1
 8002d30:	4945      	ldr	r1, [pc, #276]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002d32:	5c8a      	ldrb	r2, [r1, r2]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	461a      	mov	r2, r3
 8002d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	3368      	adds	r3, #104	; 0x68
 8002d3e:	443b      	add	r3, r7
 8002d40:	f843 2c5c 	str.w	r2, [r3, #-92]

				//BMS Eventn ID -> Byte(4n+7) (i.e. rx_buffer [4n+7-1])
				Event[i] = rx_buffer[(4*n)+7-1];
 8002d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	3306      	adds	r3, #6
 8002d4a:	4a3f      	ldr	r2, [pc, #252]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002d4c:	5cd1      	ldrb	r1, [r2, r3]
 8002d4e:	f107 0208 	add.w	r2, r7, #8
 8002d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d54:	4413      	add	r3, r2
 8002d56:	460a      	mov	r2, r1
 8002d58:	701a      	strb	r2, [r3, #0]

				n++;
 8002d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
			for(uint32_t i = 0; i < numEvents; i++) {
 8002d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d62:	3301      	adds	r3, #1
 8002d64:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3b2      	bcc.n	8002cd4 <TinyBMS_UART_ReadAllEvents+0x154>
			}

			CRC_reply = ((rx_buffer[(4*n)+9-1] << 8) | rx_buffer[(4*n)+8-1]);
 8002d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d70:	3302      	adds	r3, #2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	b21a      	sxth	r2, r3
 8002d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7e:	3302      	adds	r3, #2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	3b01      	subs	r3, #1
 8002d84:	4930      	ldr	r1, [pc, #192]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8002d92:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3303      	adds	r3, #3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	482a      	ldr	r0, [pc, #168]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002da0:	f004 f852 	bl	8006e48 <CRC16>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			if(CRC_calc == CRC_reply) {
 8002daa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002dae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d12c      	bne.n	8002e10 <TinyBMS_UART_ReadAllEvents+0x290>
				printf("CRC pass\r\n");
 8002db6:	4827      	ldr	r0, [pc, #156]	; (8002e54 <TinyBMS_UART_ReadAllEvents+0x2d4>)
 8002db8:	f00b f9b8 	bl	800e12c <puts>

				//Print "All Events" Timestamps with their Event IDs
				printf("************ TinyBMS All Events ************\r\n");
 8002dbc:	4829      	ldr	r0, [pc, #164]	; (8002e64 <TinyBMS_UART_ReadAllEvents+0x2e4>)
 8002dbe:	f00b f9b5 	bl	800e12c <puts>
				for(uint32_t i = 0; i < numEvents; i++) {
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc6:	e018      	b.n	8002dfa <TinyBMS_UART_ReadAllEvents+0x27a>
					if(i == 0) {
 8002dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <TinyBMS_UART_ReadAllEvents+0x256>
						//could convert seconds into a meaningful hh:mm:ss time later
						printf("BMS Timestamp (s): %lu\r\n", BTSP);
 8002dce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002dd0:	4825      	ldr	r0, [pc, #148]	; (8002e68 <TinyBMS_UART_ReadAllEvents+0x2e8>)
 8002dd2:	f00b f925 	bl	800e020 <iprintf>
					}
					//could convert seconds into a meaningful hh:mm:ss time later
					printf("Event Timestamp (s): %lu \t Event ID: 0x%02X\r\n", TSP[i], Event[i]);
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	3368      	adds	r3, #104	; 0x68
 8002ddc:	443b      	add	r3, r7
 8002dde:	f853 1c5c 	ldr.w	r1, [r3, #-92]
 8002de2:	f107 0208 	add.w	r2, r7, #8
 8002de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de8:	4413      	add	r3, r2
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	481f      	ldr	r0, [pc, #124]	; (8002e6c <TinyBMS_UART_ReadAllEvents+0x2ec>)
 8002df0:	f00b f916 	bl	800e020 <iprintf>
				for(uint32_t i = 0; i < numEvents; i++) {
 8002df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df6:	3301      	adds	r3, #1
 8002df8:	657b      	str	r3, [r7, #84]	; 0x54
 8002dfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d3e2      	bcc.n	8002dc8 <TinyBMS_UART_ReadAllEvents+0x248>
				}
				printf("----------------------------------------\r\n");
 8002e02:	481b      	ldr	r0, [pc, #108]	; (8002e70 <TinyBMS_UART_ReadAllEvents+0x2f0>)
 8002e04:	f00b f992 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e0e:	e010      	b.n	8002e32 <TinyBMS_UART_ReadAllEvents+0x2b2>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8002e10:	4818      	ldr	r0, [pc, #96]	; (8002e74 <TinyBMS_UART_ReadAllEvents+0x2f4>)
 8002e12:	f00b f98b 	bl	800e12c <puts>
 8002e16:	e00c      	b.n	8002e32 <TinyBMS_UART_ReadAllEvents+0x2b2>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x12 but was 0x%02X\r\n", rx_buffer[1]);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4816      	ldr	r0, [pc, #88]	; (8002e78 <TinyBMS_UART_ReadAllEvents+0x2f8>)
 8002e20:	f00b f8fe 	bl	800e020 <iprintf>
 8002e24:	e005      	b.n	8002e32 <TinyBMS_UART_ReadAllEvents+0x2b2>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <TinyBMS_UART_ReadAllEvents+0x2c8>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4813      	ldr	r0, [pc, #76]	; (8002e7c <TinyBMS_UART_ReadAllEvents+0x2fc>)
 8002e2e:	f00b f8f7 	bl	800e020 <iprintf>
	}

	return retval;
 8002e32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3768      	adds	r7, #104	; 0x68
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	080119f4 	.word	0x080119f4
 8002e44:	20000228 	.word	0x20000228
 8002e48:	2000037c 	.word	0x2000037c
 8002e4c:	08011364 	.word	0x08011364
 8002e50:	2000037e 	.word	0x2000037e
 8002e54:	08011280 	.word	0x08011280
 8002e58:	0801128c 	.word	0x0801128c
 8002e5c:	08011380 	.word	0x08011380
 8002e60:	2000037f 	.word	0x2000037f
 8002e64:	08011a10 	.word	0x08011a10
 8002e68:	08011970 	.word	0x08011970
 8002e6c:	0801198c 	.word	0x0801198c
 8002e70:	08011480 	.word	0x08011480
 8002e74:	080114ac 	.word	0x080114ac
 8002e78:	08011a40 	.word	0x08011a40
 8002e7c:	08011318 	.word	0x08011318

08002e80 <TinyBMS_UART_ReadBatteryPackVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_UART_ReadBatteryPackVoltage(UART_HandleTypeDef *huart) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b094      	sub	sp, #80	; 0x50
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackVoltage\r\n");
 8002e88:	486b      	ldr	r0, [pc, #428]	; (8003038 <TinyBMS_UART_ReadBatteryPackVoltage+0x1b8>)
 8002e8a:	f00b f94f 	bl	800e12c <puts>
	float retval = CMD_FAILURE;
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	; (800303c <TinyBMS_UART_ReadBatteryPackVoltage+0x1bc>)
 8002e90:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8002eb0:	23aa      	movs	r3, #170	; 0xaa
 8002eb2:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = UART_TBMS_READ_PACK_VOLTAGE;
 8002eb4:	2314      	movs	r3, #20
 8002eb6:	727b      	strb	r3, [r7, #9]

	CRC_request = CRC16(tx_buffer, 2);
 8002eb8:	f107 0308 	add.w	r3, r7, #8
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 ffc2 	bl	8006e48 <CRC16>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	CRC_LSB = (CRC_request & 0xFF);
 8002eca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ece:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8002ed2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8002ede:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ee2:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = CRC_MSB;
 8002ee4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002ee8:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4853      	ldr	r0, [pc, #332]	; (8003040 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c0>)
 8002ef4:	f009 f8e4 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4952      	ldr	r1, [pc, #328]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002efc:	4850      	ldr	r0, [pc, #320]	; (8003040 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c0>)
 8002efe:	f009 f94d 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8002f02:	4b50      	ldr	r3, [pc, #320]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2baa      	cmp	r3, #170	; 0xaa
 8002f08:	f040 8088 	bne.w	800301c <TinyBMS_UART_ReadBatteryPackVoltage+0x19c>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d130      	bne.n	8002f76 <TinyBMS_UART_ReadBatteryPackVoltage+0xf6>
			printf("Response from BMS [ERROR]\r\n");
 8002f14:	484c      	ldr	r0, [pc, #304]	; (8003048 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c8>)
 8002f16:	f00b f909 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	494b      	ldr	r1, [pc, #300]	; (800304c <TinyBMS_UART_ReadBatteryPackVoltage+0x1cc>)
 8002f1e:	4848      	ldr	r0, [pc, #288]	; (8003040 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c0>)
 8002f20:	f009 f93c 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8002f24:	4b47      	ldr	r3, [pc, #284]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f26:	78db      	ldrb	r3, [r3, #3]
 8002f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8002f2c:	4b45      	ldr	r3, [pc, #276]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f2e:	795b      	ldrb	r3, [r3, #5]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	b21a      	sxth	r2, r3
 8002f34:	4b43      	ldr	r3, [pc, #268]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f36:	791b      	ldrb	r3, [r3, #4]
 8002f38:	b21b      	sxth	r3, r3
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8002f42:	2104      	movs	r1, #4
 8002f44:	483f      	ldr	r0, [pc, #252]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f46:	f003 ff7f 	bl	8006e48 <CRC16>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			if(CRC_calc == CRC_reply) {
 8002f50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002f54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d103      	bne.n	8002f64 <TinyBMS_UART_ReadBatteryPackVoltage+0xe4>
				printf("CRC pass\r\n");
 8002f5c:	483c      	ldr	r0, [pc, #240]	; (8003050 <TinyBMS_UART_ReadBatteryPackVoltage+0x1d0>)
 8002f5e:	f00b f8e5 	bl	800e12c <puts>
 8002f62:	e002      	b.n	8002f6a <TinyBMS_UART_ReadBatteryPackVoltage+0xea>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8002f64:	483b      	ldr	r0, [pc, #236]	; (8003054 <TinyBMS_UART_ReadBatteryPackVoltage+0x1d4>)
 8002f66:	f00b f8e1 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8002f6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 ff48 	bl	8006e04 <reportBMSError>
 8002f74:	e058      	b.n	8003028 <TinyBMS_UART_ReadBatteryPackVoltage+0x1a8>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_PACK_VOLTAGE) {
 8002f76:	4b33      	ldr	r3, [pc, #204]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	2b14      	cmp	r3, #20
 8002f7c:	d147      	bne.n	800300e <TinyBMS_UART_ReadBatteryPackVoltage+0x18e>
			printf("Response from BMS [OK]\r\n");
 8002f7e:	4836      	ldr	r0, [pc, #216]	; (8003058 <TinyBMS_UART_ReadBatteryPackVoltage+0x1d8>)
 8002f80:	f00b f8d4 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 8002f84:	2206      	movs	r2, #6
 8002f86:	4931      	ldr	r1, [pc, #196]	; (800304c <TinyBMS_UART_ReadBatteryPackVoltage+0x1cc>)
 8002f88:	482d      	ldr	r0, [pc, #180]	; (8003040 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c0>)
 8002f8a:	f009 f907 	bl	800c19c <HAL_UART_Receive_IT>

			uint32_t data = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f90:	795b      	ldrb	r3, [r3, #5]
 8002f92:	061a      	lsls	r2, r3, #24
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f96:	791b      	ldrb	r3, [r3, #4]
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002f9e:	78db      	ldrb	r3, [r3, #3]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	4a27      	ldr	r2, [pc, #156]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002fa6:	7892      	ldrb	r2, [r2, #2]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
		    //printf("0x%08X\r\n", data);

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002fae:	79db      	ldrb	r3, [r3, #7]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	b21a      	sxth	r2, r3
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002fb6:	799b      	ldrb	r3, [r3, #6]
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	b21b      	sxth	r3, r3
 8002fbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-6 of OK response
 8002fc2:	2106      	movs	r1, #6
 8002fc4:	481f      	ldr	r0, [pc, #124]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8002fc6:	f003 ff3f 	bl	8006e48 <CRC16>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			if(CRC_calc == CRC_reply) {
 8002fd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002fd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d114      	bne.n	8003006 <TinyBMS_UART_ReadBatteryPackVoltage+0x186>
				printf("CRC pass\r\n");
 8002fdc:	481c      	ldr	r0, [pc, #112]	; (8003050 <TinyBMS_UART_ReadBatteryPackVoltage+0x1d0>)
 8002fde:	f00b f8a5 	bl	800e12c <puts>

				float batteryPackVoltage = data;
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				printf("Battery Pack Voltage: %f (V)\r\n", batteryPackVoltage);
 8002ff0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ff2:	f7fd fac9 	bl	8000588 <__aeabi_f2d>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4818      	ldr	r0, [pc, #96]	; (800305c <TinyBMS_UART_ReadBatteryPackVoltage+0x1dc>)
 8002ffc:	f00b f810 	bl	800e020 <iprintf>
				retval = batteryPackVoltage;
 8003000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003004:	e010      	b.n	8003028 <TinyBMS_UART_ReadBatteryPackVoltage+0x1a8>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003006:	4816      	ldr	r0, [pc, #88]	; (8003060 <TinyBMS_UART_ReadBatteryPackVoltage+0x1e0>)
 8003008:	f00b f890 	bl	800e12c <puts>
 800300c:	e00c      	b.n	8003028 <TinyBMS_UART_ReadBatteryPackVoltage+0x1a8>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x14 but was 0x%02X\r\n", rx_buffer[1]);
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 8003010:	785b      	ldrb	r3, [r3, #1]
 8003012:	4619      	mov	r1, r3
 8003014:	4813      	ldr	r0, [pc, #76]	; (8003064 <TinyBMS_UART_ReadBatteryPackVoltage+0x1e4>)
 8003016:	f00b f803 	bl	800e020 <iprintf>
 800301a:	e005      	b.n	8003028 <TinyBMS_UART_ReadBatteryPackVoltage+0x1a8>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <TinyBMS_UART_ReadBatteryPackVoltage+0x1c4>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	4811      	ldr	r0, [pc, #68]	; (8003068 <TinyBMS_UART_ReadBatteryPackVoltage+0x1e8>)
 8003024:	f00a fffc 	bl	800e020 <iprintf>
	}

	return retval;
 8003028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302a:	ee07 3a90 	vmov	s15, r3
}
 800302e:	eeb0 0a67 	vmov.f32	s0, s15
 8003032:	3750      	adds	r7, #80	; 0x50
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	08011a78 	.word	0x08011a78
 800303c:	bf800000 	.word	0xbf800000
 8003040:	20000228 	.word	0x20000228
 8003044:	2000037c 	.word	0x2000037c
 8003048:	08011364 	.word	0x08011364
 800304c:	2000037e 	.word	0x2000037e
 8003050:	08011280 	.word	0x08011280
 8003054:	0801128c 	.word	0x0801128c
 8003058:	08011380 	.word	0x08011380
 800305c:	08011aa0 	.word	0x08011aa0
 8003060:	080114ac 	.word	0x080114ac
 8003064:	08011ac0 	.word	0x08011ac0
 8003068:	08011318 	.word	0x08011318

0800306c <TinyBMS_UART_ReadBatteryPackCurrent>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_UART_ReadBatteryPackCurrent(UART_HandleTypeDef *huart) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b094      	sub	sp, #80	; 0x50
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackCurrent\r\n");
 8003074:	486b      	ldr	r0, [pc, #428]	; (8003224 <TinyBMS_UART_ReadBatteryPackCurrent+0x1b8>)
 8003076:	f00b f859 	bl	800e12c <puts>
	float retval = CMD_FAILURE;
 800307a:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <TinyBMS_UART_ReadBatteryPackCurrent+0x1bc>)
 800307c:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003084:	2300      	movs	r3, #0
 8003086:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003090:	2300      	movs	r3, #0
 8003092:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003096:	2300      	movs	r3, #0
 8003098:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 800309c:	23aa      	movs	r3, #170	; 0xaa
 800309e:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = UART_TBMS_READ_PACK_CURRENT;
 80030a0:	2315      	movs	r3, #21
 80030a2:	727b      	strb	r3, [r7, #9]

	CRC_request = CRC16(tx_buffer, 2);
 80030a4:	f107 0308 	add.w	r3, r7, #8
 80030a8:	2102      	movs	r1, #2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fecc 	bl	8006e48 <CRC16>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	CRC_LSB = (CRC_request & 0xFF);
 80030b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80030be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 80030ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80030ce:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = CRC_MSB;
 80030d0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80030d4:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 80030d6:	f107 0308 	add.w	r3, r7, #8
 80030da:	2204      	movs	r2, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4853      	ldr	r0, [pc, #332]	; (800322c <TinyBMS_UART_ReadBatteryPackCurrent+0x1c0>)
 80030e0:	f008 ffee 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80030e4:	2202      	movs	r2, #2
 80030e6:	4952      	ldr	r1, [pc, #328]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 80030e8:	4850      	ldr	r0, [pc, #320]	; (800322c <TinyBMS_UART_ReadBatteryPackCurrent+0x1c0>)
 80030ea:	f009 f857 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80030ee:	4b50      	ldr	r3, [pc, #320]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2baa      	cmp	r3, #170	; 0xaa
 80030f4:	f040 8088 	bne.w	8003208 <TinyBMS_UART_ReadBatteryPackCurrent+0x19c>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80030f8:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d130      	bne.n	8003162 <TinyBMS_UART_ReadBatteryPackCurrent+0xf6>
			printf("Response from BMS [ERROR]\r\n");
 8003100:	484c      	ldr	r0, [pc, #304]	; (8003234 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c8>)
 8003102:	f00b f813 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003106:	2204      	movs	r2, #4
 8003108:	494b      	ldr	r1, [pc, #300]	; (8003238 <TinyBMS_UART_ReadBatteryPackCurrent+0x1cc>)
 800310a:	4848      	ldr	r0, [pc, #288]	; (800322c <TinyBMS_UART_ReadBatteryPackCurrent+0x1c0>)
 800310c:	f009 f846 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8003110:	4b47      	ldr	r3, [pc, #284]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 8003112:	78db      	ldrb	r3, [r3, #3]
 8003114:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003118:	4b45      	ldr	r3, [pc, #276]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 800311a:	795b      	ldrb	r3, [r3, #5]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	b21a      	sxth	r2, r3
 8003120:	4b43      	ldr	r3, [pc, #268]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 8003122:	791b      	ldrb	r3, [r3, #4]
 8003124:	b21b      	sxth	r3, r3
 8003126:	4313      	orrs	r3, r2
 8003128:	b21b      	sxth	r3, r3
 800312a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 800312e:	2104      	movs	r1, #4
 8003130:	483f      	ldr	r0, [pc, #252]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 8003132:	f003 fe89 	bl	8006e48 <CRC16>
 8003136:	4603      	mov	r3, r0
 8003138:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			if(CRC_calc == CRC_reply) {
 800313c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003140:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003144:	429a      	cmp	r2, r3
 8003146:	d103      	bne.n	8003150 <TinyBMS_UART_ReadBatteryPackCurrent+0xe4>
				printf("CRC pass\r\n");
 8003148:	483c      	ldr	r0, [pc, #240]	; (800323c <TinyBMS_UART_ReadBatteryPackCurrent+0x1d0>)
 800314a:	f00a ffef 	bl	800e12c <puts>
 800314e:	e002      	b.n	8003156 <TinyBMS_UART_ReadBatteryPackCurrent+0xea>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8003150:	483b      	ldr	r0, [pc, #236]	; (8003240 <TinyBMS_UART_ReadBatteryPackCurrent+0x1d4>)
 8003152:	f00a ffeb 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8003156:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fe52 	bl	8006e04 <reportBMSError>
 8003160:	e058      	b.n	8003214 <TinyBMS_UART_ReadBatteryPackCurrent+0x1a8>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_PACK_CURRENT) {
 8003162:	4b33      	ldr	r3, [pc, #204]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	2b15      	cmp	r3, #21
 8003168:	d147      	bne.n	80031fa <TinyBMS_UART_ReadBatteryPackCurrent+0x18e>
			printf("Response from BMS [OK]\r\n");
 800316a:	4836      	ldr	r0, [pc, #216]	; (8003244 <TinyBMS_UART_ReadBatteryPackCurrent+0x1d8>)
 800316c:	f00a ffde 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 8003170:	2206      	movs	r2, #6
 8003172:	4931      	ldr	r1, [pc, #196]	; (8003238 <TinyBMS_UART_ReadBatteryPackCurrent+0x1cc>)
 8003174:	482d      	ldr	r0, [pc, #180]	; (800322c <TinyBMS_UART_ReadBatteryPackCurrent+0x1c0>)
 8003176:	f009 f811 	bl	800c19c <HAL_UART_Receive_IT>

			uint32_t data = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 800317c:	795b      	ldrb	r3, [r3, #5]
 800317e:	061a      	lsls	r2, r3, #24
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 8003182:	791b      	ldrb	r3, [r3, #4]
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	4b29      	ldr	r3, [pc, #164]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 800318a:	78db      	ldrb	r3, [r3, #3]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	4313      	orrs	r3, r2
 8003190:	4a27      	ldr	r2, [pc, #156]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 8003192:	7892      	ldrb	r2, [r2, #2]
 8003194:	4313      	orrs	r3, r2
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
		    //printf("0x%08X\r\n", data);

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 800319a:	79db      	ldrb	r3, [r3, #7]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	b21a      	sxth	r2, r3
 80031a0:	4b23      	ldr	r3, [pc, #140]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 80031a2:	799b      	ldrb	r3, [r3, #6]
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-6 of OK response
 80031ae:	2106      	movs	r1, #6
 80031b0:	481f      	ldr	r0, [pc, #124]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 80031b2:	f003 fe49 	bl	8006e48 <CRC16>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			if(CRC_calc == CRC_reply) {
 80031bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80031c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d114      	bne.n	80031f2 <TinyBMS_UART_ReadBatteryPackCurrent+0x186>
				printf("CRC pass\r\n");
 80031c8:	481c      	ldr	r0, [pc, #112]	; (800323c <TinyBMS_UART_ReadBatteryPackCurrent+0x1d0>)
 80031ca:	f00a ffaf 	bl	800e12c <puts>

				float batteryPackCurrent = data;
 80031ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				printf("Battery Pack Current: %f (A)\r\n", batteryPackCurrent);
 80031dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031de:	f7fd f9d3 	bl	8000588 <__aeabi_f2d>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4818      	ldr	r0, [pc, #96]	; (8003248 <TinyBMS_UART_ReadBatteryPackCurrent+0x1dc>)
 80031e8:	f00a ff1a 	bl	800e020 <iprintf>
				retval = batteryPackCurrent;
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f0:	e010      	b.n	8003214 <TinyBMS_UART_ReadBatteryPackCurrent+0x1a8>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80031f2:	4816      	ldr	r0, [pc, #88]	; (800324c <TinyBMS_UART_ReadBatteryPackCurrent+0x1e0>)
 80031f4:	f00a ff9a 	bl	800e12c <puts>
 80031f8:	e00c      	b.n	8003214 <TinyBMS_UART_ReadBatteryPackCurrent+0x1a8>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x15 but was 0x%02X\r\n", rx_buffer[1]);
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	4619      	mov	r1, r3
 8003200:	4813      	ldr	r0, [pc, #76]	; (8003250 <TinyBMS_UART_ReadBatteryPackCurrent+0x1e4>)
 8003202:	f00a ff0d 	bl	800e020 <iprintf>
 8003206:	e005      	b.n	8003214 <TinyBMS_UART_ReadBatteryPackCurrent+0x1a8>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <TinyBMS_UART_ReadBatteryPackCurrent+0x1c4>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	4811      	ldr	r0, [pc, #68]	; (8003254 <TinyBMS_UART_ReadBatteryPackCurrent+0x1e8>)
 8003210:	f00a ff06 	bl	800e020 <iprintf>
	}

	return retval;
 8003214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003216:	ee07 3a90 	vmov	s15, r3
}
 800321a:	eeb0 0a67 	vmov.f32	s0, s15
 800321e:	3750      	adds	r7, #80	; 0x50
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	08011af8 	.word	0x08011af8
 8003228:	bf800000 	.word	0xbf800000
 800322c:	20000228 	.word	0x20000228
 8003230:	2000037c 	.word	0x2000037c
 8003234:	08011364 	.word	0x08011364
 8003238:	2000037e 	.word	0x2000037e
 800323c:	08011280 	.word	0x08011280
 8003240:	0801128c 	.word	0x0801128c
 8003244:	08011380 	.word	0x08011380
 8003248:	08011b20 	.word	0x08011b20
 800324c:	080114ac 	.word	0x080114ac
 8003250:	08011b40 	.word	0x08011b40
 8003254:	08011318 	.word	0x08011318

08003258 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_UART_ReadBatteryPackMaxCellVoltage(UART_HandleTypeDef *huart) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b092      	sub	sp, #72	; 0x48
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackMaxCellVoltage\r\n");
 8003260:	4861      	ldr	r0, [pc, #388]	; (80033e8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x190>)
 8003262:	f00a ff63 	bl	800e12c <puts>
	uint16_t retval = CMD_FAILURE;
 8003266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800326a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003274:	2300      	movs	r3, #0
 8003276:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003280:	2300      	movs	r3, #0
 8003282:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003286:	2300      	movs	r3, #0
 8003288:	87fb      	strh	r3, [r7, #62]	; 0x3e

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 800328a:	23aa      	movs	r3, #170	; 0xaa
 800328c:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = UART_TBMS_READ_MAX_CELL_VOLTAGE;
 800328e:	2316      	movs	r3, #22
 8003290:	727b      	strb	r3, [r7, #9]

	CRC_request = CRC16(tx_buffer, 2);
 8003292:	f107 0308 	add.w	r3, r7, #8
 8003296:	2102      	movs	r1, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f003 fdd5 	bl	8006e48 <CRC16>
 800329e:	4603      	mov	r3, r0
 80032a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	CRC_LSB = (CRC_request & 0xFF);
 80032a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 80032ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 80032b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80032bc:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = CRC_MSB;
 80032be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80032c2:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 80032c4:	f107 0308 	add.w	r3, r7, #8
 80032c8:	2204      	movs	r2, #4
 80032ca:	4619      	mov	r1, r3
 80032cc:	4847      	ldr	r0, [pc, #284]	; (80033ec <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x194>)
 80032ce:	f008 fef7 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80032d2:	2202      	movs	r2, #2
 80032d4:	4946      	ldr	r1, [pc, #280]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 80032d6:	4845      	ldr	r0, [pc, #276]	; (80033ec <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x194>)
 80032d8:	f008 ff60 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80032dc:	4b44      	ldr	r3, [pc, #272]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2baa      	cmp	r3, #170	; 0xaa
 80032e2:	d175      	bne.n	80033d0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x178>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d12e      	bne.n	800334a <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0xf2>
			printf("Response from BMS [ERROR]\r\n");
 80032ec:	4841      	ldr	r0, [pc, #260]	; (80033f4 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x19c>)
 80032ee:	f00a ff1d 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80032f2:	2204      	movs	r2, #4
 80032f4:	4940      	ldr	r1, [pc, #256]	; (80033f8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1a0>)
 80032f6:	483d      	ldr	r0, [pc, #244]	; (80033ec <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x194>)
 80032f8:	f008 ff50 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80032fc:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 80032fe:	78db      	ldrb	r3, [r3, #3]
 8003300:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003304:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 8003306:	795b      	ldrb	r3, [r3, #5]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	b21a      	sxth	r2, r3
 800330c:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 800330e:	791b      	ldrb	r3, [r3, #4]
 8003310:	b21b      	sxth	r3, r3
 8003312:	4313      	orrs	r3, r2
 8003314:	b21b      	sxth	r3, r3
 8003316:	87fb      	strh	r3, [r7, #62]	; 0x3e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8003318:	2104      	movs	r1, #4
 800331a:	4835      	ldr	r0, [pc, #212]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 800331c:	f003 fd94 	bl	8006e48 <CRC16>
 8003320:	4603      	mov	r3, r0
 8003322:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			if(CRC_calc == CRC_reply) {
 8003326:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800332a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800332c:	429a      	cmp	r2, r3
 800332e:	d103      	bne.n	8003338 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0xe0>
				printf("CRC pass\r\n");
 8003330:	4832      	ldr	r0, [pc, #200]	; (80033fc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1a4>)
 8003332:	f00a fefb 	bl	800e12c <puts>
 8003336:	e002      	b.n	800333e <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0xe6>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8003338:	4831      	ldr	r0, [pc, #196]	; (8003400 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1a8>)
 800333a:	f00a fef7 	bl	800e12c <puts>
			}
			reportBMSError(error);
 800333e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003342:	4618      	mov	r0, r3
 8003344:	f003 fd5e 	bl	8006e04 <reportBMSError>
 8003348:	e048      	b.n	80033dc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x184>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_MAX_CELL_VOLTAGE) {
 800334a:	4b29      	ldr	r3, [pc, #164]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	2b16      	cmp	r3, #22
 8003350:	d137      	bne.n	80033c2 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x16a>
			printf("Response from BMS [OK]\r\n");
 8003352:	482c      	ldr	r0, [pc, #176]	; (8003404 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1ac>)
 8003354:	f00a feea 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from OK reply
 8003358:	2204      	movs	r2, #4
 800335a:	4927      	ldr	r1, [pc, #156]	; (80033f8 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1a0>)
 800335c:	4823      	ldr	r0, [pc, #140]	; (80033ec <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x194>)
 800335e:	f008 ff1d 	bl	800c19c <HAL_UART_Receive_IT>

			uint16_t batteryPackMaxCellVoltage = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 8003362:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 8003364:	78db      	ldrb	r3, [r3, #3]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	b21a      	sxth	r2, r3
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 800336c:	789b      	ldrb	r3, [r3, #2]
 800336e:	b21b      	sxth	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b21b      	sxth	r3, r3
 8003374:	87bb      	strh	r3, [r7, #60]	; 0x3c

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 8003378:	795b      	ldrb	r3, [r3, #5]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	b21a      	sxth	r2, r3
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	b21b      	sxth	r3, r3
 8003384:	4313      	orrs	r3, r2
 8003386:	b21b      	sxth	r3, r3
 8003388:	87fb      	strh	r3, [r7, #62]	; 0x3e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of OK response
 800338a:	2104      	movs	r1, #4
 800338c:	4818      	ldr	r0, [pc, #96]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 800338e:	f003 fd5b 	bl	8006e48 <CRC16>
 8003392:	4603      	mov	r3, r0
 8003394:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			if(CRC_calc == CRC_reply) {
 8003398:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800339c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10b      	bne.n	80033ba <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x162>
				printf("CRC pass\r\n");
 80033a2:	4816      	ldr	r0, [pc, #88]	; (80033fc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1a4>)
 80033a4:	f00a fec2 	bl	800e12c <puts>

				printf("Battery Pack Maximum Cell Voltage: %u (mV)\r\n", batteryPackMaxCellVoltage);
 80033a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80033aa:	4619      	mov	r1, r3
 80033ac:	4816      	ldr	r0, [pc, #88]	; (8003408 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1b0>)
 80033ae:	f00a fe37 	bl	800e020 <iprintf>
				retval = batteryPackMaxCellVoltage;
 80033b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80033b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80033b8:	e010      	b.n	80033dc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x184>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80033ba:	4814      	ldr	r0, [pc, #80]	; (800340c <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1b4>)
 80033bc:	f00a feb6 	bl	800e12c <puts>
 80033c0:	e00c      	b.n	80033dc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x184>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x16 but was 0x%02X\r\n", rx_buffer[1]);
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	4619      	mov	r1, r3
 80033c8:	4811      	ldr	r0, [pc, #68]	; (8003410 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1b8>)
 80033ca:	f00a fe29 	bl	800e020 <iprintf>
 80033ce:	e005      	b.n	80033dc <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x184>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x198>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	4619      	mov	r1, r3
 80033d6:	480f      	ldr	r0, [pc, #60]	; (8003414 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage+0x1bc>)
 80033d8:	f00a fe22 	bl	800e020 <iprintf>
	}

	return retval;
 80033dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3748      	adds	r7, #72	; 0x48
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	08011b78 	.word	0x08011b78
 80033ec:	20000228 	.word	0x20000228
 80033f0:	2000037c 	.word	0x2000037c
 80033f4:	08011364 	.word	0x08011364
 80033f8:	2000037e 	.word	0x2000037e
 80033fc:	08011280 	.word	0x08011280
 8003400:	0801128c 	.word	0x0801128c
 8003404:	08011380 	.word	0x08011380
 8003408:	08011ba4 	.word	0x08011ba4
 800340c:	080114ac 	.word	0x080114ac
 8003410:	08011bd4 	.word	0x08011bd4
 8003414:	08011318 	.word	0x08011318

08003418 <TinyBMS_UART_ReadBatteryPackMinCellVoltage>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_UART_ReadBatteryPackMinCellVoltage(UART_HandleTypeDef *huart) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b092      	sub	sp, #72	; 0x48
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackMinCellVoltage\r\n");
 8003420:	4861      	ldr	r0, [pc, #388]	; (80035a8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x190>)
 8003422:	f00a fe83 	bl	800e12c <puts>
	uint16_t retval = CMD_FAILURE;
 8003426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800342a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003440:	2300      	movs	r3, #0
 8003442:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003446:	2300      	movs	r3, #0
 8003448:	87fb      	strh	r3, [r7, #62]	; 0x3e

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 800344a:	23aa      	movs	r3, #170	; 0xaa
 800344c:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = UART_TBMS_READ_MIN_CELL_VOLTAGE;
 800344e:	2317      	movs	r3, #23
 8003450:	727b      	strb	r3, [r7, #9]

	CRC_request = CRC16(tx_buffer, 2);
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fcf5 	bl	8006e48 <CRC16>
 800345e:	4603      	mov	r3, r0
 8003460:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	CRC_LSB = (CRC_request & 0xFF);
 8003464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003468:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 800346c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	b29b      	uxth	r3, r3
 8003474:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003478:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800347c:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = CRC_MSB;
 800347e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003482:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	2204      	movs	r2, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4847      	ldr	r0, [pc, #284]	; (80035ac <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x194>)
 800348e:	f008 fe17 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003492:	2202      	movs	r2, #2
 8003494:	4946      	ldr	r1, [pc, #280]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 8003496:	4845      	ldr	r0, [pc, #276]	; (80035ac <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x194>)
 8003498:	f008 fe80 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 800349c:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2baa      	cmp	r3, #170	; 0xaa
 80034a2:	d175      	bne.n	8003590 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x178>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80034a4:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d12e      	bne.n	800350a <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0xf2>
			printf("Response from BMS [ERROR]\r\n");
 80034ac:	4841      	ldr	r0, [pc, #260]	; (80035b4 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x19c>)
 80034ae:	f00a fe3d 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80034b2:	2204      	movs	r2, #4
 80034b4:	4940      	ldr	r1, [pc, #256]	; (80035b8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1a0>)
 80034b6:	483d      	ldr	r0, [pc, #244]	; (80035ac <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x194>)
 80034b8:	f008 fe70 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80034bc:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80034c4:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 80034c6:	795b      	ldrb	r3, [r3, #5]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	4b38      	ldr	r3, [pc, #224]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 80034ce:	791b      	ldrb	r3, [r3, #4]
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80034d8:	2104      	movs	r1, #4
 80034da:	4835      	ldr	r0, [pc, #212]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 80034dc:	f003 fcb4 	bl	8006e48 <CRC16>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			if(CRC_calc == CRC_reply) {
 80034e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80034ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d103      	bne.n	80034f8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0xe0>
				printf("CRC pass\r\n");
 80034f0:	4832      	ldr	r0, [pc, #200]	; (80035bc <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1a4>)
 80034f2:	f00a fe1b 	bl	800e12c <puts>
 80034f6:	e002      	b.n	80034fe <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0xe6>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 80034f8:	4831      	ldr	r0, [pc, #196]	; (80035c0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1a8>)
 80034fa:	f00a fe17 	bl	800e12c <puts>
			}
			reportBMSError(error);
 80034fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fc7e 	bl	8006e04 <reportBMSError>
 8003508:	e048      	b.n	800359c <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x184>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_MIN_CELL_VOLTAGE) {
 800350a:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b17      	cmp	r3, #23
 8003510:	d137      	bne.n	8003582 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x16a>
			printf("Response from BMS [OK]\r\n");
 8003512:	482c      	ldr	r0, [pc, #176]	; (80035c4 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1ac>)
 8003514:	f00a fe0a 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from OK reply
 8003518:	2204      	movs	r2, #4
 800351a:	4927      	ldr	r1, [pc, #156]	; (80035b8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1a0>)
 800351c:	4823      	ldr	r0, [pc, #140]	; (80035ac <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x194>)
 800351e:	f008 fe3d 	bl	800c19c <HAL_UART_Receive_IT>

			uint16_t batteryPackMinCellVoltage = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 8003522:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 8003524:	78db      	ldrb	r3, [r3, #3]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	b21a      	sxth	r2, r3
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 800352c:	789b      	ldrb	r3, [r3, #2]
 800352e:	b21b      	sxth	r3, r3
 8003530:	4313      	orrs	r3, r2
 8003532:	b21b      	sxth	r3, r3
 8003534:	87bb      	strh	r3, [r7, #60]	; 0x3c

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003536:	4b1e      	ldr	r3, [pc, #120]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 8003538:	795b      	ldrb	r3, [r3, #5]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	b21a      	sxth	r2, r3
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 8003540:	791b      	ldrb	r3, [r3, #4]
 8003542:	b21b      	sxth	r3, r3
 8003544:	4313      	orrs	r3, r2
 8003546:	b21b      	sxth	r3, r3
 8003548:	87fb      	strh	r3, [r7, #62]	; 0x3e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of OK response
 800354a:	2104      	movs	r1, #4
 800354c:	4818      	ldr	r0, [pc, #96]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 800354e:	f003 fc7b 	bl	8006e48 <CRC16>
 8003552:	4603      	mov	r3, r0
 8003554:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			if(CRC_calc == CRC_reply) {
 8003558:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800355c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800355e:	429a      	cmp	r2, r3
 8003560:	d10b      	bne.n	800357a <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x162>
				printf("CRC pass\r\n");
 8003562:	4816      	ldr	r0, [pc, #88]	; (80035bc <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1a4>)
 8003564:	f00a fde2 	bl	800e12c <puts>

				printf("Battery Pack Minimum Cell Voltage: %u (mV)\r\n", batteryPackMinCellVoltage);
 8003568:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800356a:	4619      	mov	r1, r3
 800356c:	4816      	ldr	r0, [pc, #88]	; (80035c8 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1b0>)
 800356e:	f00a fd57 	bl	800e020 <iprintf>
				retval = batteryPackMinCellVoltage;
 8003572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003574:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003578:	e010      	b.n	800359c <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x184>

			} else {
				printf("CRC fail in BMS OK\r\n");
 800357a:	4814      	ldr	r0, [pc, #80]	; (80035cc <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1b4>)
 800357c:	f00a fdd6 	bl	800e12c <puts>
 8003580:	e00c      	b.n	800359c <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x184>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x17 but was 0x%02X\r\n", rx_buffer[1]);
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	4619      	mov	r1, r3
 8003588:	4811      	ldr	r0, [pc, #68]	; (80035d0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1b8>)
 800358a:	f00a fd49 	bl	800e020 <iprintf>
 800358e:	e005      	b.n	800359c <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x184>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x198>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	480f      	ldr	r0, [pc, #60]	; (80035d4 <TinyBMS_UART_ReadBatteryPackMinCellVoltage+0x1bc>)
 8003598:	f00a fd42 	bl	800e020 <iprintf>
	}

	return retval;
 800359c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3748      	adds	r7, #72	; 0x48
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	08011c0c 	.word	0x08011c0c
 80035ac:	20000228 	.word	0x20000228
 80035b0:	2000037c 	.word	0x2000037c
 80035b4:	08011364 	.word	0x08011364
 80035b8:	2000037e 	.word	0x2000037e
 80035bc:	08011280 	.word	0x08011280
 80035c0:	0801128c 	.word	0x0801128c
 80035c4:	08011380 	.word	0x08011380
 80035c8:	08011c38 	.word	0x08011c38
 80035cc:	080114ac 	.word	0x080114ac
 80035d0:	08011c68 	.word	0x08011c68
 80035d4:	08011318 	.word	0x08011318

080035d8 <TinyBMS_UART_ReadOnlineStatus>:
 * 						 	        [UINT16]
 * 						   0x91 - Charging [INFO], 0x92 - Fully Charged [INFO]
 * 						   0x93 - Discharging [INFO], 0x94 - Regeneration [INFO]
 * 						   0x97 - Idle [INFO], 0x9B - Fault [ERROR]
 */
uint16_t TinyBMS_UART_ReadOnlineStatus(UART_HandleTypeDef *huart) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b092      	sub	sp, #72	; 0x48
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadOnlineStatus\r\n");
 80035e0:	487f      	ldr	r0, [pc, #508]	; (80037e0 <TinyBMS_UART_ReadOnlineStatus+0x208>)
 80035e2:	f00a fda3 	bl	800e12c <puts>
	uint16_t retval = CMD_FAILURE;
 80035e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003600:	2300      	movs	r3, #0
 8003602:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003606:	2300      	movs	r3, #0
 8003608:	87fb      	strh	r3, [r7, #62]	; 0x3e

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 800360a:	23aa      	movs	r3, #170	; 0xaa
 800360c:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = UART_TBMS_READ_ONLINE_STATUS;
 800360e:	2318      	movs	r3, #24
 8003610:	727b      	strb	r3, [r7, #9]

	CRC_request = CRC16(tx_buffer, 2);
 8003612:	f107 0308 	add.w	r3, r7, #8
 8003616:	2102      	movs	r1, #2
 8003618:	4618      	mov	r0, r3
 800361a:	f003 fc15 	bl	8006e48 <CRC16>
 800361e:	4603      	mov	r3, r0
 8003620:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	CRC_LSB = (CRC_request & 0xFF);
 8003624:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003628:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 800362c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	b29b      	uxth	r3, r3
 8003634:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003638:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800363c:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = CRC_MSB;
 800363e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003642:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003644:	f107 0308 	add.w	r3, r7, #8
 8003648:	2204      	movs	r2, #4
 800364a:	4619      	mov	r1, r3
 800364c:	4865      	ldr	r0, [pc, #404]	; (80037e4 <TinyBMS_UART_ReadOnlineStatus+0x20c>)
 800364e:	f008 fd37 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003652:	2202      	movs	r2, #2
 8003654:	4964      	ldr	r1, [pc, #400]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 8003656:	4863      	ldr	r0, [pc, #396]	; (80037e4 <TinyBMS_UART_ReadOnlineStatus+0x20c>)
 8003658:	f008 fda0 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 800365c:	4b62      	ldr	r3, [pc, #392]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2baa      	cmp	r3, #170	; 0xaa
 8003662:	f040 80b0 	bne.w	80037c6 <TinyBMS_UART_ReadOnlineStatus+0x1ee>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003666:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 8003668:	785b      	ldrb	r3, [r3, #1]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d12e      	bne.n	80036cc <TinyBMS_UART_ReadOnlineStatus+0xf4>
			printf("Response from BMS [ERROR]\r\n");
 800366e:	485f      	ldr	r0, [pc, #380]	; (80037ec <TinyBMS_UART_ReadOnlineStatus+0x214>)
 8003670:	f00a fd5c 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003674:	2204      	movs	r2, #4
 8003676:	495e      	ldr	r1, [pc, #376]	; (80037f0 <TinyBMS_UART_ReadOnlineStatus+0x218>)
 8003678:	485a      	ldr	r0, [pc, #360]	; (80037e4 <TinyBMS_UART_ReadOnlineStatus+0x20c>)
 800367a:	f008 fd8f 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 800367e:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 8003680:	78db      	ldrb	r3, [r3, #3]
 8003682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003686:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 8003688:	795b      	ldrb	r3, [r3, #5]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	b21a      	sxth	r2, r3
 800368e:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 8003690:	791b      	ldrb	r3, [r3, #4]
 8003692:	b21b      	sxth	r3, r3
 8003694:	4313      	orrs	r3, r2
 8003696:	b21b      	sxth	r3, r3
 8003698:	87fb      	strh	r3, [r7, #62]	; 0x3e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 800369a:	2104      	movs	r1, #4
 800369c:	4852      	ldr	r0, [pc, #328]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 800369e:	f003 fbd3 	bl	8006e48 <CRC16>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			if(CRC_calc == CRC_reply) {
 80036a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80036ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d103      	bne.n	80036ba <TinyBMS_UART_ReadOnlineStatus+0xe2>
				printf("CRC pass\r\n");
 80036b2:	4850      	ldr	r0, [pc, #320]	; (80037f4 <TinyBMS_UART_ReadOnlineStatus+0x21c>)
 80036b4:	f00a fd3a 	bl	800e12c <puts>
 80036b8:	e002      	b.n	80036c0 <TinyBMS_UART_ReadOnlineStatus+0xe8>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 80036ba:	484f      	ldr	r0, [pc, #316]	; (80037f8 <TinyBMS_UART_ReadOnlineStatus+0x220>)
 80036bc:	f00a fd36 	bl	800e12c <puts>
			}
			reportBMSError(error);
 80036c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 fb9d 	bl	8006e04 <reportBMSError>
 80036ca:	e082      	b.n	80037d2 <TinyBMS_UART_ReadOnlineStatus+0x1fa>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_ONLINE_STATUS) {
 80036cc:	4b46      	ldr	r3, [pc, #280]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	2b18      	cmp	r3, #24
 80036d2:	d171      	bne.n	80037b8 <TinyBMS_UART_ReadOnlineStatus+0x1e0>
			printf("Response from BMS [OK]\r\n");
 80036d4:	4849      	ldr	r0, [pc, #292]	; (80037fc <TinyBMS_UART_ReadOnlineStatus+0x224>)
 80036d6:	f00a fd29 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from OK reply
 80036da:	2204      	movs	r2, #4
 80036dc:	4944      	ldr	r1, [pc, #272]	; (80037f0 <TinyBMS_UART_ReadOnlineStatus+0x218>)
 80036de:	4841      	ldr	r0, [pc, #260]	; (80037e4 <TinyBMS_UART_ReadOnlineStatus+0x20c>)
 80036e0:	f008 fd5c 	bl	800c19c <HAL_UART_Receive_IT>

			uint16_t onlineStatus = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 80036e4:	4b40      	ldr	r3, [pc, #256]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 80036e6:	78db      	ldrb	r3, [r3, #3]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	b21a      	sxth	r2, r3
 80036ec:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 80036ee:	789b      	ldrb	r3, [r3, #2]
 80036f0:	b21b      	sxth	r3, r3
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b21b      	sxth	r3, r3
 80036f6:	87bb      	strh	r3, [r7, #60]	; 0x3c

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80036f8:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 80036fa:	795b      	ldrb	r3, [r3, #5]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	b21a      	sxth	r2, r3
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 8003702:	791b      	ldrb	r3, [r3, #4]
 8003704:	b21b      	sxth	r3, r3
 8003706:	4313      	orrs	r3, r2
 8003708:	b21b      	sxth	r3, r3
 800370a:	87fb      	strh	r3, [r7, #62]	; 0x3e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of OK response
 800370c:	2104      	movs	r1, #4
 800370e:	4836      	ldr	r0, [pc, #216]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 8003710:	f003 fb9a 	bl	8006e48 <CRC16>
 8003714:	4603      	mov	r3, r0
 8003716:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			if(CRC_calc == CRC_reply) {
 800371a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800371e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003720:	429a      	cmp	r2, r3
 8003722:	d145      	bne.n	80037b0 <TinyBMS_UART_ReadOnlineStatus+0x1d8>
				printf("CRC pass\r\n");
 8003724:	4833      	ldr	r0, [pc, #204]	; (80037f4 <TinyBMS_UART_ReadOnlineStatus+0x21c>)
 8003726:	f00a fd01 	bl	800e12c <puts>

				printf("************ TinyBMS Online Status: ************\r\n");
 800372a:	4835      	ldr	r0, [pc, #212]	; (8003800 <TinyBMS_UART_ReadOnlineStatus+0x228>)
 800372c:	f00a fcfe 	bl	800e12c <puts>
				switch(onlineStatus) {
 8003730:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003732:	3b91      	subs	r3, #145	; 0x91
 8003734:	2b0a      	cmp	r3, #10
 8003736:	d831      	bhi.n	800379c <TinyBMS_UART_ReadOnlineStatus+0x1c4>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <TinyBMS_UART_ReadOnlineStatus+0x168>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003775 	.word	0x08003775
 8003748:	0800377d 	.word	0x0800377d
 800374c:	0800379d 	.word	0x0800379d
 8003750:	0800379d 	.word	0x0800379d
 8003754:	08003785 	.word	0x08003785
 8003758:	0800378d 	.word	0x0800378d
 800375c:	0800379d 	.word	0x0800379d
 8003760:	0800379d 	.word	0x0800379d
 8003764:	0800379d 	.word	0x0800379d
 8003768:	08003795 	.word	0x08003795
					case TINYBMS_STATUS_CHARGING:
						printf("0x91 - Charging [INFO]\r\n");
 800376c:	4825      	ldr	r0, [pc, #148]	; (8003804 <TinyBMS_UART_ReadOnlineStatus+0x22c>)
 800376e:	f00a fcdd 	bl	800e12c <puts>
						break;
 8003772:	e019      	b.n	80037a8 <TinyBMS_UART_ReadOnlineStatus+0x1d0>
					case TINYBMS_STATUS_FULLYCHARGED:
						printf("0x92 - Fully Charged [INFO]\r\n");
 8003774:	4824      	ldr	r0, [pc, #144]	; (8003808 <TinyBMS_UART_ReadOnlineStatus+0x230>)
 8003776:	f00a fcd9 	bl	800e12c <puts>
						break;
 800377a:	e015      	b.n	80037a8 <TinyBMS_UART_ReadOnlineStatus+0x1d0>
					case TINYBMS_STATUS_DISCHARGING:
						printf("0x93 - Discharging [INFO]\r\n");
 800377c:	4823      	ldr	r0, [pc, #140]	; (800380c <TinyBMS_UART_ReadOnlineStatus+0x234>)
 800377e:	f00a fcd5 	bl	800e12c <puts>
						break;
 8003782:	e011      	b.n	80037a8 <TinyBMS_UART_ReadOnlineStatus+0x1d0>
					case TINYBMS_STATUS_REGENERATION:
						printf("0x96 - Regeneration [INFO]\r\n");
 8003784:	4822      	ldr	r0, [pc, #136]	; (8003810 <TinyBMS_UART_ReadOnlineStatus+0x238>)
 8003786:	f00a fcd1 	bl	800e12c <puts>
						break;
 800378a:	e00d      	b.n	80037a8 <TinyBMS_UART_ReadOnlineStatus+0x1d0>
					case TINYBMS_STATUS_IDLE:
						printf("0x97 - Idle [INFO]\r\n");
 800378c:	4821      	ldr	r0, [pc, #132]	; (8003814 <TinyBMS_UART_ReadOnlineStatus+0x23c>)
 800378e:	f00a fccd 	bl	800e12c <puts>
						break;
 8003792:	e009      	b.n	80037a8 <TinyBMS_UART_ReadOnlineStatus+0x1d0>
					case TINYBMS_STATUS_FAULT:
						printf("0x9B - Fault [ERROR]\r\n");
 8003794:	4820      	ldr	r0, [pc, #128]	; (8003818 <TinyBMS_UART_ReadOnlineStatus+0x240>)
 8003796:	f00a fcc9 	bl	800e12c <puts>
						break;
 800379a:	e005      	b.n	80037a8 <TinyBMS_UART_ReadOnlineStatus+0x1d0>
					default:
						printf("Invalid onlineStatus\r\n");
 800379c:	481f      	ldr	r0, [pc, #124]	; (800381c <TinyBMS_UART_ReadOnlineStatus+0x244>)
 800379e:	f00a fcc5 	bl	800e12c <puts>
						return retval;
 80037a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80037a6:	e016      	b.n	80037d6 <TinyBMS_UART_ReadOnlineStatus+0x1fe>
				}
				retval = onlineStatus;
 80037a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80037aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80037ae:	e010      	b.n	80037d2 <TinyBMS_UART_ReadOnlineStatus+0x1fa>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80037b0:	481b      	ldr	r0, [pc, #108]	; (8003820 <TinyBMS_UART_ReadOnlineStatus+0x248>)
 80037b2:	f00a fcbb 	bl	800e12c <puts>
 80037b6:	e00c      	b.n	80037d2 <TinyBMS_UART_ReadOnlineStatus+0x1fa>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x18 but was 0x%02X\r\n", rx_buffer[1]);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	4619      	mov	r1, r3
 80037be:	4819      	ldr	r0, [pc, #100]	; (8003824 <TinyBMS_UART_ReadOnlineStatus+0x24c>)
 80037c0:	f00a fc2e 	bl	800e020 <iprintf>
 80037c4:	e005      	b.n	80037d2 <TinyBMS_UART_ReadOnlineStatus+0x1fa>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <TinyBMS_UART_ReadOnlineStatus+0x210>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	4619      	mov	r1, r3
 80037cc:	4816      	ldr	r0, [pc, #88]	; (8003828 <TinyBMS_UART_ReadOnlineStatus+0x250>)
 80037ce:	f00a fc27 	bl	800e020 <iprintf>
	}

	return retval;
 80037d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3748      	adds	r7, #72	; 0x48
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	08011ca0 	.word	0x08011ca0
 80037e4:	20000228 	.word	0x20000228
 80037e8:	2000037c 	.word	0x2000037c
 80037ec:	08011364 	.word	0x08011364
 80037f0:	2000037e 	.word	0x2000037e
 80037f4:	08011280 	.word	0x08011280
 80037f8:	0801128c 	.word	0x0801128c
 80037fc:	08011380 	.word	0x08011380
 8003800:	08011cc0 	.word	0x08011cc0
 8003804:	08011cf4 	.word	0x08011cf4
 8003808:	08011d0c 	.word	0x08011d0c
 800380c:	08011d2c 	.word	0x08011d2c
 8003810:	08011d48 	.word	0x08011d48
 8003814:	08011d64 	.word	0x08011d64
 8003818:	08011d78 	.word	0x08011d78
 800381c:	08011d90 	.word	0x08011d90
 8003820:	080114ac 	.word	0x080114ac
 8003824:	08011da8 	.word	0x08011da8
 8003828:	08011318 	.word	0x08011318

0800382c <TinyBMS_UART_ReadLifetimeCounter>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_UART_ReadLifetimeCounter(UART_HandleTypeDef *huart) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b094      	sub	sp, #80	; 0x50
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadLifetimeCounter\r\n");
 8003834:	4864      	ldr	r0, [pc, #400]	; (80039c8 <TinyBMS_UART_ReadLifetimeCounter+0x19c>)
 8003836:	f00a fc79 	bl	800e12c <puts>
	uint32_t retval = CMD_FAILURE;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003846:	2300      	movs	r3, #0
 8003848:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003852:	2300      	movs	r3, #0
 8003854:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003858:	2300      	movs	r3, #0
 800385a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 800385e:	23aa      	movs	r3, #170	; 0xaa
 8003860:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = UART_TBMS_READ_LIFETIME_COUNTER;
 8003862:	2319      	movs	r3, #25
 8003864:	737b      	strb	r3, [r7, #13]

	CRC_request = CRC16(tx_buffer, 2);
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	2102      	movs	r1, #2
 800386c:	4618      	mov	r0, r3
 800386e:	f003 faeb 	bl	8006e48 <CRC16>
 8003872:	4603      	mov	r3, r0
 8003874:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	CRC_LSB = (CRC_request & 0xFF);
 8003878:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800387c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8003880:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	b29b      	uxth	r3, r3
 8003888:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 800388c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003890:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = CRC_MSB;
 8003892:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003896:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003898:	f107 030c 	add.w	r3, r7, #12
 800389c:	2204      	movs	r2, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	484a      	ldr	r0, [pc, #296]	; (80039cc <TinyBMS_UART_ReadLifetimeCounter+0x1a0>)
 80038a2:	f008 fc0d 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80038a6:	2202      	movs	r2, #2
 80038a8:	4949      	ldr	r1, [pc, #292]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80038aa:	4848      	ldr	r0, [pc, #288]	; (80039cc <TinyBMS_UART_ReadLifetimeCounter+0x1a0>)
 80038ac:	f008 fc76 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80038b0:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2baa      	cmp	r3, #170	; 0xaa
 80038b6:	d17c      	bne.n	80039b2 <TinyBMS_UART_ReadLifetimeCounter+0x186>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80038b8:	4b45      	ldr	r3, [pc, #276]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d130      	bne.n	8003922 <TinyBMS_UART_ReadLifetimeCounter+0xf6>
			printf("Response from BMS [ERROR]\r\n");
 80038c0:	4844      	ldr	r0, [pc, #272]	; (80039d4 <TinyBMS_UART_ReadLifetimeCounter+0x1a8>)
 80038c2:	f00a fc33 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80038c6:	2204      	movs	r2, #4
 80038c8:	4943      	ldr	r1, [pc, #268]	; (80039d8 <TinyBMS_UART_ReadLifetimeCounter+0x1ac>)
 80038ca:	4840      	ldr	r0, [pc, #256]	; (80039cc <TinyBMS_UART_ReadLifetimeCounter+0x1a0>)
 80038cc:	f008 fc66 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80038d0:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80038d2:	78db      	ldrb	r3, [r3, #3]
 80038d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80038d8:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80038da:	795b      	ldrb	r3, [r3, #5]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	b21a      	sxth	r2, r3
 80038e0:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80038e2:	791b      	ldrb	r3, [r3, #4]
 80038e4:	b21b      	sxth	r3, r3
 80038e6:	4313      	orrs	r3, r2
 80038e8:	b21b      	sxth	r3, r3
 80038ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80038ee:	2104      	movs	r1, #4
 80038f0:	4837      	ldr	r0, [pc, #220]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80038f2:	f003 faa9 	bl	8006e48 <CRC16>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			if(CRC_calc == CRC_reply) {
 80038fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003900:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003904:	429a      	cmp	r2, r3
 8003906:	d103      	bne.n	8003910 <TinyBMS_UART_ReadLifetimeCounter+0xe4>
				printf("CRC pass\r\n");
 8003908:	4834      	ldr	r0, [pc, #208]	; (80039dc <TinyBMS_UART_ReadLifetimeCounter+0x1b0>)
 800390a:	f00a fc0f 	bl	800e12c <puts>
 800390e:	e002      	b.n	8003916 <TinyBMS_UART_ReadLifetimeCounter+0xea>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8003910:	4833      	ldr	r0, [pc, #204]	; (80039e0 <TinyBMS_UART_ReadLifetimeCounter+0x1b4>)
 8003912:	f00a fc0b 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8003916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800391a:	4618      	mov	r0, r3
 800391c:	f003 fa72 	bl	8006e04 <reportBMSError>
 8003920:	e04d      	b.n	80039be <TinyBMS_UART_ReadLifetimeCounter+0x192>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_LIFETIME_COUNTER) {
 8003922:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 8003924:	785b      	ldrb	r3, [r3, #1]
 8003926:	2b19      	cmp	r3, #25
 8003928:	d13c      	bne.n	80039a4 <TinyBMS_UART_ReadLifetimeCounter+0x178>
			printf("Response from BMS [OK]\r\n");
 800392a:	482e      	ldr	r0, [pc, #184]	; (80039e4 <TinyBMS_UART_ReadLifetimeCounter+0x1b8>)
 800392c:	f00a fbfe 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 8003930:	2206      	movs	r2, #6
 8003932:	4929      	ldr	r1, [pc, #164]	; (80039d8 <TinyBMS_UART_ReadLifetimeCounter+0x1ac>)
 8003934:	4825      	ldr	r0, [pc, #148]	; (80039cc <TinyBMS_UART_ReadLifetimeCounter+0x1a0>)
 8003936:	f008 fc31 	bl	800c19c <HAL_UART_Receive_IT>

			uint32_t lifetimeCounter = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 800393a:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 800393c:	795b      	ldrb	r3, [r3, #5]
 800393e:	061a      	lsls	r2, r3, #24
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 8003942:	791b      	ldrb	r3, [r3, #4]
 8003944:	041b      	lsls	r3, r3, #16
 8003946:	431a      	orrs	r2, r3
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 800394a:	78db      	ldrb	r3, [r3, #3]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	4313      	orrs	r3, r2
 8003950:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 8003952:	7892      	ldrb	r2, [r2, #2]
 8003954:	4313      	orrs	r3, r2
 8003956:	643b      	str	r3, [r7, #64]	; 0x40

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 800395a:	79db      	ldrb	r3, [r3, #7]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	b21a      	sxth	r2, r3
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 8003962:	799b      	ldrb	r3, [r3, #6]
 8003964:	b21b      	sxth	r3, r3
 8003966:	4313      	orrs	r3, r2
 8003968:	b21b      	sxth	r3, r3
 800396a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-6 of OK response
 800396e:	2106      	movs	r1, #6
 8003970:	4817      	ldr	r0, [pc, #92]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 8003972:	f003 fa69 	bl	8006e48 <CRC16>
 8003976:	4603      	mov	r3, r0
 8003978:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			if(CRC_calc == CRC_reply) {
 800397c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003980:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003984:	429a      	cmp	r2, r3
 8003986:	d109      	bne.n	800399c <TinyBMS_UART_ReadLifetimeCounter+0x170>
				printf("CRC pass\r\n");
 8003988:	4814      	ldr	r0, [pc, #80]	; (80039dc <TinyBMS_UART_ReadLifetimeCounter+0x1b0>)
 800398a:	f00a fbcf 	bl	800e12c <puts>

				printf("TinyBMS Lifetime Counter: %lu (s)\r\n", lifetimeCounter);
 800398e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003990:	4815      	ldr	r0, [pc, #84]	; (80039e8 <TinyBMS_UART_ReadLifetimeCounter+0x1bc>)
 8003992:	f00a fb45 	bl	800e020 <iprintf>
				retval = lifetimeCounter;
 8003996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003998:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399a:	e010      	b.n	80039be <TinyBMS_UART_ReadLifetimeCounter+0x192>

			} else {
				printf("CRC fail in BMS OK\r\n");
 800399c:	4813      	ldr	r0, [pc, #76]	; (80039ec <TinyBMS_UART_ReadLifetimeCounter+0x1c0>)
 800399e:	f00a fbc5 	bl	800e12c <puts>
 80039a2:	e00c      	b.n	80039be <TinyBMS_UART_ReadLifetimeCounter+0x192>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x19 but was 0x%02X\r\n", rx_buffer[1]);
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	4619      	mov	r1, r3
 80039aa:	4811      	ldr	r0, [pc, #68]	; (80039f0 <TinyBMS_UART_ReadLifetimeCounter+0x1c4>)
 80039ac:	f00a fb38 	bl	800e020 <iprintf>
 80039b0:	e005      	b.n	80039be <TinyBMS_UART_ReadLifetimeCounter+0x192>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <TinyBMS_UART_ReadLifetimeCounter+0x1a4>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	4619      	mov	r1, r3
 80039b8:	480e      	ldr	r0, [pc, #56]	; (80039f4 <TinyBMS_UART_ReadLifetimeCounter+0x1c8>)
 80039ba:	f00a fb31 	bl	800e020 <iprintf>
	}

	return retval;
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3750      	adds	r7, #80	; 0x50
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	08011de0 	.word	0x08011de0
 80039cc:	20000228 	.word	0x20000228
 80039d0:	2000037c 	.word	0x2000037c
 80039d4:	08011364 	.word	0x08011364
 80039d8:	2000037e 	.word	0x2000037e
 80039dc:	08011280 	.word	0x08011280
 80039e0:	0801128c 	.word	0x0801128c
 80039e4:	08011380 	.word	0x08011380
 80039e8:	08011e04 	.word	0x08011e04
 80039ec:	080114ac 	.word	0x080114ac
 80039f0:	08011e28 	.word	0x08011e28
 80039f4:	08011318 	.word	0x08011318

080039f8 <TinyBMS_UART_ReadEstimatedSOCValue>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_UART_ReadEstimatedSOCValue(UART_HandleTypeDef *huart) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b094      	sub	sp, #80	; 0x50
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadEstimatedSOCValue\r\n");
 8003a00:	4864      	ldr	r0, [pc, #400]	; (8003b94 <TinyBMS_UART_ReadEstimatedSOCValue+0x19c>)
 8003a02:	f00a fb93 	bl	800e12c <puts>
	uint32_t retval = CMD_FAILURE;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003a2a:	23aa      	movs	r3, #170	; 0xaa
 8003a2c:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = UART_TBMS_READ_EST_SOC;
 8003a2e:	231a      	movs	r3, #26
 8003a30:	737b      	strb	r3, [r7, #13]

	CRC_request = CRC16(tx_buffer, 2);
 8003a32:	f107 030c 	add.w	r3, r7, #12
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f003 fa05 	bl	8006e48 <CRC16>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	CRC_LSB = (CRC_request & 0xFF);
 8003a44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a48:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8003a4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003a58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003a5c:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = CRC_MSB;
 8003a5e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003a62:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2204      	movs	r2, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	484a      	ldr	r0, [pc, #296]	; (8003b98 <TinyBMS_UART_ReadEstimatedSOCValue+0x1a0>)
 8003a6e:	f008 fb27 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003a72:	2202      	movs	r2, #2
 8003a74:	4949      	ldr	r1, [pc, #292]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003a76:	4848      	ldr	r0, [pc, #288]	; (8003b98 <TinyBMS_UART_ReadEstimatedSOCValue+0x1a0>)
 8003a78:	f008 fb90 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003a7c:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2baa      	cmp	r3, #170	; 0xaa
 8003a82:	d17c      	bne.n	8003b7e <TinyBMS_UART_ReadEstimatedSOCValue+0x186>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003a84:	4b45      	ldr	r3, [pc, #276]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d130      	bne.n	8003aee <TinyBMS_UART_ReadEstimatedSOCValue+0xf6>
			printf("Response from BMS [ERROR]\r\n");
 8003a8c:	4844      	ldr	r0, [pc, #272]	; (8003ba0 <TinyBMS_UART_ReadEstimatedSOCValue+0x1a8>)
 8003a8e:	f00a fb4d 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003a92:	2204      	movs	r2, #4
 8003a94:	4943      	ldr	r1, [pc, #268]	; (8003ba4 <TinyBMS_UART_ReadEstimatedSOCValue+0x1ac>)
 8003a96:	4840      	ldr	r0, [pc, #256]	; (8003b98 <TinyBMS_UART_ReadEstimatedSOCValue+0x1a0>)
 8003a98:	f008 fb80 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8003a9c:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003a9e:	78db      	ldrb	r3, [r3, #3]
 8003aa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003aa4:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003aa6:	795b      	ldrb	r3, [r3, #5]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	b21a      	sxth	r2, r3
 8003aac:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003aae:	791b      	ldrb	r3, [r3, #4]
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b21b      	sxth	r3, r3
 8003ab6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8003aba:	2104      	movs	r1, #4
 8003abc:	4837      	ldr	r0, [pc, #220]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003abe:	f003 f9c3 	bl	8006e48 <CRC16>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			if(CRC_calc == CRC_reply) {
 8003ac8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003acc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d103      	bne.n	8003adc <TinyBMS_UART_ReadEstimatedSOCValue+0xe4>
				printf("CRC pass\r\n");
 8003ad4:	4834      	ldr	r0, [pc, #208]	; (8003ba8 <TinyBMS_UART_ReadEstimatedSOCValue+0x1b0>)
 8003ad6:	f00a fb29 	bl	800e12c <puts>
 8003ada:	e002      	b.n	8003ae2 <TinyBMS_UART_ReadEstimatedSOCValue+0xea>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8003adc:	4833      	ldr	r0, [pc, #204]	; (8003bac <TinyBMS_UART_ReadEstimatedSOCValue+0x1b4>)
 8003ade:	f00a fb25 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8003ae2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 f98c 	bl	8006e04 <reportBMSError>
 8003aec:	e04d      	b.n	8003b8a <TinyBMS_UART_ReadEstimatedSOCValue+0x192>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_EST_SOC) {
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003af0:	785b      	ldrb	r3, [r3, #1]
 8003af2:	2b1a      	cmp	r3, #26
 8003af4:	d13c      	bne.n	8003b70 <TinyBMS_UART_ReadEstimatedSOCValue+0x178>
			printf("Response from BMS [OK]\r\n");
 8003af6:	482e      	ldr	r0, [pc, #184]	; (8003bb0 <TinyBMS_UART_ReadEstimatedSOCValue+0x1b8>)
 8003af8:	f00a fb18 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 6); //read bytes 3-8 from OK reply
 8003afc:	2206      	movs	r2, #6
 8003afe:	4929      	ldr	r1, [pc, #164]	; (8003ba4 <TinyBMS_UART_ReadEstimatedSOCValue+0x1ac>)
 8003b00:	4825      	ldr	r0, [pc, #148]	; (8003b98 <TinyBMS_UART_ReadEstimatedSOCValue+0x1a0>)
 8003b02:	f008 fb4b 	bl	800c19c <HAL_UART_Receive_IT>

			uint32_t estSOC = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8003b06:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b08:	795b      	ldrb	r3, [r3, #5]
 8003b0a:	061a      	lsls	r2, r3, #24
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b0e:	791b      	ldrb	r3, [r3, #4]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b16:	78db      	ldrb	r3, [r3, #3]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b1e:	7892      	ldrb	r2, [r2, #2]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	643b      	str	r3, [r7, #64]	; 0x40

			CRC_reply = ((rx_buffer[7] << 8) | rx_buffer[6]);
 8003b24:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b26:	79db      	ldrb	r3, [r3, #7]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	b21a      	sxth	r2, r3
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b2e:	799b      	ldrb	r3, [r3, #6]
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b21b      	sxth	r3, r3
 8003b36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CRC_calc = CRC16(rx_buffer, 6); //Calc CRC for bytes 1-6 of OK response
 8003b3a:	2106      	movs	r1, #6
 8003b3c:	4817      	ldr	r0, [pc, #92]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b3e:	f003 f983 	bl	8006e48 <CRC16>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			if(CRC_calc == CRC_reply) {
 8003b48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003b4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d109      	bne.n	8003b68 <TinyBMS_UART_ReadEstimatedSOCValue+0x170>
				printf("CRC pass\r\n");
 8003b54:	4814      	ldr	r0, [pc, #80]	; (8003ba8 <TinyBMS_UART_ReadEstimatedSOCValue+0x1b0>)
 8003b56:	f00a fae9 	bl	800e12c <puts>

				printf("Estimated State of Charge (SOC): %lu (0.000 001 %% resolution)\r\n", estSOC);
 8003b5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b5c:	4815      	ldr	r0, [pc, #84]	; (8003bb4 <TinyBMS_UART_ReadEstimatedSOCValue+0x1bc>)
 8003b5e:	f00a fa5f 	bl	800e020 <iprintf>
				retval = estSOC;
 8003b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b66:	e010      	b.n	8003b8a <TinyBMS_UART_ReadEstimatedSOCValue+0x192>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003b68:	4813      	ldr	r0, [pc, #76]	; (8003bb8 <TinyBMS_UART_ReadEstimatedSOCValue+0x1c0>)
 8003b6a:	f00a fadf 	bl	800e12c <puts>
 8003b6e:	e00c      	b.n	8003b8a <TinyBMS_UART_ReadEstimatedSOCValue+0x192>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x19 but was 0x%02X\r\n", rx_buffer[1]);
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b72:	785b      	ldrb	r3, [r3, #1]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4811      	ldr	r0, [pc, #68]	; (8003bbc <TinyBMS_UART_ReadEstimatedSOCValue+0x1c4>)
 8003b78:	f00a fa52 	bl	800e020 <iprintf>
 8003b7c:	e005      	b.n	8003b8a <TinyBMS_UART_ReadEstimatedSOCValue+0x192>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <TinyBMS_UART_ReadEstimatedSOCValue+0x1a4>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	480e      	ldr	r0, [pc, #56]	; (8003bc0 <TinyBMS_UART_ReadEstimatedSOCValue+0x1c8>)
 8003b86:	f00a fa4b 	bl	800e020 <iprintf>
	}

	return retval;
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3750      	adds	r7, #80	; 0x50
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	08011e60 	.word	0x08011e60
 8003b98:	20000228 	.word	0x20000228
 8003b9c:	2000037c 	.word	0x2000037c
 8003ba0:	08011364 	.word	0x08011364
 8003ba4:	2000037e 	.word	0x2000037e
 8003ba8:	08011280 	.word	0x08011280
 8003bac:	0801128c 	.word	0x0801128c
 8003bb0:	08011380 	.word	0x08011380
 8003bb4:	08011e84 	.word	0x08011e84
 8003bb8:	080114ac 	.word	0x080114ac
 8003bbc:	08011e28 	.word	0x08011e28
 8003bc0:	08011318 	.word	0x08011318

08003bc4 <TinyBMS_UART_ReadDeviceTemperatures>:
 * 						 	      [INT16]				   [INT16] 				  [INT16]
 * 						  	(Reg 48) DATA1 - TinyBMS Internal Temperature
 * 						  	(Reg 42) DATA2 - External Temp Sensor #1 (value of -327689 if NC)
 * 						  	(Reg 43) DATA3 - External Temp Sensor #2 (value of -327689 if NC)
 */
uint8_t TinyBMS_UART_ReadDeviceTemperatures(UART_HandleTypeDef *huart) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b09a      	sub	sp, #104	; 0x68
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadDeviceTemperatures\r\n");
 8003bcc:	4895      	ldr	r0, [pc, #596]	; (8003e24 <TinyBMS_UART_ReadDeviceTemperatures+0x260>)
 8003bce:	f00a faad 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8003bd2:	23ff      	movs	r3, #255	; 0xff
 8003bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003bf6:	23aa      	movs	r3, #170	; 0xaa
 8003bf8:	743b      	strb	r3, [r7, #16]
	tx_buffer[1] = UART_TBMS_READ_TEMPS;
 8003bfa:	231b      	movs	r3, #27
 8003bfc:	747b      	strb	r3, [r7, #17]

	//Verified!
	CRC_request = CRC16(tx_buffer, 2);		//should be 0x1B3F
 8003bfe:	f107 0310 	add.w	r3, r7, #16
 8003c02:	2102      	movs	r1, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 f91f 	bl	8006e48 <CRC16>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	CRC_LSB = (CRC_request & 0xFF); 		//should be 0x3F
 8003c10:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003c14:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	CRC_MSB = ((CRC_request >> 8) & 0xFF);	//should be 0x1B
 8003c18:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003c24:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003c28:	74bb      	strb	r3, [r7, #18]
	tx_buffer[3] = CRC_MSB;
 8003c2a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003c2e:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003c30:	f107 0310 	add.w	r3, r7, #16
 8003c34:	2204      	movs	r2, #4
 8003c36:	4619      	mov	r1, r3
 8003c38:	487b      	ldr	r0, [pc, #492]	; (8003e28 <TinyBMS_UART_ReadDeviceTemperatures+0x264>)
 8003c3a:	f008 fa41 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003c3e:	2202      	movs	r2, #2
 8003c40:	497a      	ldr	r1, [pc, #488]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003c42:	4879      	ldr	r0, [pc, #484]	; (8003e28 <TinyBMS_UART_ReadDeviceTemperatures+0x264>)
 8003c44:	f008 faaa 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003c48:	4b78      	ldr	r3, [pc, #480]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2baa      	cmp	r3, #170	; 0xaa
 8003c4e:	f040 80dc 	bne.w	8003e0a <TinyBMS_UART_ReadDeviceTemperatures+0x246>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003c52:	4b76      	ldr	r3, [pc, #472]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d130      	bne.n	8003cbc <TinyBMS_UART_ReadDeviceTemperatures+0xf8>
			printf("Response from BMS [ERROR]\r\n");
 8003c5a:	4875      	ldr	r0, [pc, #468]	; (8003e30 <TinyBMS_UART_ReadDeviceTemperatures+0x26c>)
 8003c5c:	f00a fa66 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003c60:	2204      	movs	r2, #4
 8003c62:	4974      	ldr	r1, [pc, #464]	; (8003e34 <TinyBMS_UART_ReadDeviceTemperatures+0x270>)
 8003c64:	4870      	ldr	r0, [pc, #448]	; (8003e28 <TinyBMS_UART_ReadDeviceTemperatures+0x264>)
 8003c66:	f008 fa99 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8003c6a:	4b70      	ldr	r3, [pc, #448]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003c6c:	78db      	ldrb	r3, [r3, #3]
 8003c6e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003c72:	4b6e      	ldr	r3, [pc, #440]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003c74:	795b      	ldrb	r3, [r3, #5]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	b21a      	sxth	r2, r3
 8003c7a:	4b6c      	ldr	r3, [pc, #432]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003c7c:	791b      	ldrb	r3, [r3, #4]
 8003c7e:	b21b      	sxth	r3, r3
 8003c80:	4313      	orrs	r3, r2
 8003c82:	b21b      	sxth	r3, r3
 8003c84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8003c88:	2104      	movs	r1, #4
 8003c8a:	4868      	ldr	r0, [pc, #416]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003c8c:	f003 f8dc 	bl	8006e48 <CRC16>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

			if(CRC_calc == CRC_reply) {
 8003c96:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003c9a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d103      	bne.n	8003caa <TinyBMS_UART_ReadDeviceTemperatures+0xe6>
				printf("CRC pass\r\n");
 8003ca2:	4865      	ldr	r0, [pc, #404]	; (8003e38 <TinyBMS_UART_ReadDeviceTemperatures+0x274>)
 8003ca4:	f00a fa42 	bl	800e12c <puts>
 8003ca8:	e002      	b.n	8003cb0 <TinyBMS_UART_ReadDeviceTemperatures+0xec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8003caa:	4864      	ldr	r0, [pc, #400]	; (8003e3c <TinyBMS_UART_ReadDeviceTemperatures+0x278>)
 8003cac:	f00a fa3e 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8003cb0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f003 f8a5 	bl	8006e04 <reportBMSError>
 8003cba:	e0ac      	b.n	8003e16 <TinyBMS_UART_ReadDeviceTemperatures+0x252>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_TEMPS) {
 8003cbc:	4b5b      	ldr	r3, [pc, #364]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	2b1b      	cmp	r3, #27
 8003cc2:	f040 809b 	bne.w	8003dfc <TinyBMS_UART_ReadDeviceTemperatures+0x238>
			printf("Response from BMS [OK]\r\n");
 8003cc6:	485e      	ldr	r0, [pc, #376]	; (8003e40 <TinyBMS_UART_ReadDeviceTemperatures+0x27c>)
 8003cc8:	f00a fa30 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4959      	ldr	r1, [pc, #356]	; (8003e34 <TinyBMS_UART_ReadDeviceTemperatures+0x270>)
 8003cd0:	4855      	ldr	r0, [pc, #340]	; (8003e28 <TinyBMS_UART_ReadDeviceTemperatures+0x264>)
 8003cd2:	f008 fa63 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t PL = rx_buffer[2]; //payload length in bytes
 8003cd6:	4b55      	ldr	r3, [pc, #340]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003cd8:	789b      	ldrb	r3, [r3, #2]
 8003cda:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			printf("Payload Length: 0x%02X\r\n", PL);
 8003cde:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4857      	ldr	r0, [pc, #348]	; (8003e44 <TinyBMS_UART_ReadDeviceTemperatures+0x280>)
 8003ce6:	f00a f99b 	bl	800e020 <iprintf>
			//Payload Length = PL = 2n bytes -> where n = 1,2,3 (DATA1,DATA2,DATA3)

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read bytes 4-2n+5 from OK reply
 8003cea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4954      	ldr	r1, [pc, #336]	; (8003e48 <TinyBMS_UART_ReadDeviceTemperatures+0x284>)
 8003cf8:	484b      	ldr	r0, [pc, #300]	; (8003e28 <TinyBMS_UART_ReadDeviceTemperatures+0x264>)
 8003cfa:	f008 fa4f 	bl	800c19c <HAL_UART_Receive_IT>

			int16_t DATA[] = {0};
 8003cfe:	2300      	movs	r3, #0
 8003d00:	81bb      	strh	r3, [r7, #12]
			uint32_t numData = (PL / 2); //2 bytes per data reading
 8003d02:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
			uint32_t n = 1; //data index
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	663b      	str	r3, [r7, #96]	; 0x60

			for(uint32_t i = 0; i < numData; i++) {
 8003d10:	2300      	movs	r3, #0
 8003d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d14:	e01b      	b.n	8003d4e <TinyBMS_UART_ReadDeviceTemperatures+0x18a>
				//TinyBMS Device Temperatures -> LSB = Byte(2n+2) MSB = Byte(2n+3) (i.e. rx_buffer[2n+2 : 2n+3])
				DATA[i] = ((rx_buffer[(2*n)+3-1] << 8) | (rx_buffer[(2*n)+2-1]));
 8003d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d18:	3301      	adds	r3, #1
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4a43      	ldr	r2, [pc, #268]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003d1e:	5cd3      	ldrb	r3, [r2, r3]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	b21a      	sxth	r2, r3
 8003d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d26:	3301      	adds	r3, #1
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	493f      	ldr	r1, [pc, #252]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b21a      	sxth	r2, r3
 8003d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	3368      	adds	r3, #104	; 0x68
 8003d3c:	443b      	add	r3, r7
 8003d3e:	f823 2c5c 	strh.w	r2, [r3, #-92]
				n++;
 8003d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d44:	3301      	adds	r3, #1
 8003d46:	663b      	str	r3, [r7, #96]	; 0x60
			for(uint32_t i = 0; i < numData; i++) {
 8003d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d3df      	bcc.n	8003d16 <TinyBMS_UART_ReadDeviceTemperatures+0x152>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 8003d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d58:	3302      	adds	r3, #2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	b21a      	sxth	r2, r3
 8003d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d66:	3302      	adds	r3, #2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	492f      	ldr	r1, [pc, #188]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes 1-2n+3 of OK response
 8003d7a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3303      	adds	r3, #3
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	4829      	ldr	r0, [pc, #164]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003d88:	f003 f85e 	bl	8006e48 <CRC16>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

			if(CRC_calc == CRC_reply) {
 8003d92:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003d96:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d12a      	bne.n	8003df4 <TinyBMS_UART_ReadDeviceTemperatures+0x230>
				printf("CRC pass\r\n");
 8003d9e:	4826      	ldr	r0, [pc, #152]	; (8003e38 <TinyBMS_UART_ReadDeviceTemperatures+0x274>)
 8003da0:	f00a f9c4 	bl	800e12c <puts>

				int16_t internalTemp = DATA[0];  //TinyBMS internal temperature
 8003da4:	89bb      	ldrh	r3, [r7, #12]
 8003da6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				printf("TinyBMS internal temperature: %d°C (0.1°C)\r\n", internalTemp);
 8003daa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003dae:	4619      	mov	r1, r3
 8003db0:	4826      	ldr	r0, [pc, #152]	; (8003e4c <TinyBMS_UART_ReadDeviceTemperatures+0x288>)
 8003db2:	f00a f935 	bl	800e020 <iprintf>

				if((numData == 2) || (numData == 3)) {
 8003db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d002      	beq.n	8003dc2 <TinyBMS_UART_ReadDeviceTemperatures+0x1fe>
 8003dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d114      	bne.n	8003dec <TinyBMS_UART_ReadDeviceTemperatures+0x228>
					int16_t externalTemp1 = DATA[1];  //External Temp Sensor #1
 8003dc2:	89fb      	ldrh	r3, [r7, #14]
 8003dc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
					printf("External sensor 1 temperature: %d°C (0.1°C)\r\n", externalTemp1);
 8003dc8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4820      	ldr	r0, [pc, #128]	; (8003e50 <TinyBMS_UART_ReadDeviceTemperatures+0x28c>)
 8003dd0:	f00a f926 	bl	800e020 <iprintf>
					//value of -32768 if not connected

					if(numData == 3) {
 8003dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d108      	bne.n	8003dec <TinyBMS_UART_ReadDeviceTemperatures+0x228>
						int16_t externalTemp2 = DATA[2];  //External Temp Sensor #2
 8003dda:	8a3b      	ldrh	r3, [r7, #16]
 8003ddc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						printf("External sensor 2 temperature: %d°C (0.1°C)\r\n", externalTemp2);
 8003de0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8003de4:	4619      	mov	r1, r3
 8003de6:	481b      	ldr	r0, [pc, #108]	; (8003e54 <TinyBMS_UART_ReadDeviceTemperatures+0x290>)
 8003de8:	f00a f91a 	bl	800e020 <iprintf>
						//value of -32768 if not connected
					}
				}
				retval = CMD_SUCCESS;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003df2:	e010      	b.n	8003e16 <TinyBMS_UART_ReadDeviceTemperatures+0x252>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8003df4:	4818      	ldr	r0, [pc, #96]	; (8003e58 <TinyBMS_UART_ReadDeviceTemperatures+0x294>)
 8003df6:	f00a f999 	bl	800e12c <puts>
 8003dfa:	e00c      	b.n	8003e16 <TinyBMS_UART_ReadDeviceTemperatures+0x252>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1B but was 0x%02X\r\n", rx_buffer[1]);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	4619      	mov	r1, r3
 8003e02:	4816      	ldr	r0, [pc, #88]	; (8003e5c <TinyBMS_UART_ReadDeviceTemperatures+0x298>)
 8003e04:	f00a f90c 	bl	800e020 <iprintf>
 8003e08:	e005      	b.n	8003e16 <TinyBMS_UART_ReadDeviceTemperatures+0x252>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <TinyBMS_UART_ReadDeviceTemperatures+0x268>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4813      	ldr	r0, [pc, #76]	; (8003e60 <TinyBMS_UART_ReadDeviceTemperatures+0x29c>)
 8003e12:	f00a f905 	bl	800e020 <iprintf>
	}

	return retval;
 8003e16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3768      	adds	r7, #104	; 0x68
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	08011ec8 	.word	0x08011ec8
 8003e28:	20000228 	.word	0x20000228
 8003e2c:	2000037c 	.word	0x2000037c
 8003e30:	08011364 	.word	0x08011364
 8003e34:	2000037e 	.word	0x2000037e
 8003e38:	08011280 	.word	0x08011280
 8003e3c:	0801128c 	.word	0x0801128c
 8003e40:	08011380 	.word	0x08011380
 8003e44:	08011ef0 	.word	0x08011ef0
 8003e48:	2000037f 	.word	0x2000037f
 8003e4c:	08011f0c 	.word	0x08011f0c
 8003e50:	08011f3c 	.word	0x08011f3c
 8003e54:	08011f6c 	.word	0x08011f6c
 8003e58:	080114ac 	.word	0x080114ac
 8003e5c:	080118e4 	.word	0x080118e4
 8003e60:	08011318 	.word	0x08011318

08003e64 <TinyBMS_UART_ReadBatteryPackCellVoltages>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte n*2+2    Byte n*2+3 		Byte n*2+4 	Byte n*2+5
 * 						 	  DATAn:LSB   	DATAn:MSB   	CRC:LSB 	CRC:MSB
 * 						 	       	 [UINT16]
 */
uint8_t TinyBMS_UART_ReadBatteryPackCellVoltages(UART_HandleTypeDef *huart) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b098      	sub	sp, #96	; 0x60
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadBatteryPackCellVoltages\r\n");
 8003e6c:	4891      	ldr	r0, [pc, #580]	; (80040b4 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x250>)
 8003e6e:	f00a f95d 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8003e72:	23ff      	movs	r3, #255	; 0xff
 8003e74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8003e96:	23aa      	movs	r3, #170	; 0xaa
 8003e98:	743b      	strb	r3, [r7, #16]
	tx_buffer[1] = UART_TBMS_READ_CELL_VOLTAGES;
 8003e9a:	231c      	movs	r3, #28
 8003e9c:	747b      	strb	r3, [r7, #17]

	CRC_request = CRC16(tx_buffer, 2);
 8003e9e:	f107 0310 	add.w	r3, r7, #16
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f002 ffcf 	bl	8006e48 <CRC16>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	CRC_LSB = (CRC_request & 0xFF);
 8003eb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003eb4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8003eb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ebc:	0a1b      	lsrs	r3, r3, #8
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8003ec4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003ec8:	74bb      	strb	r3, [r7, #18]
	tx_buffer[3] = CRC_MSB;
 8003eca:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003ece:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8003ed0:	f107 0310 	add.w	r3, r7, #16
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4877      	ldr	r0, [pc, #476]	; (80040b8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x254>)
 8003eda:	f008 f8f1 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8003ede:	2202      	movs	r2, #2
 8003ee0:	4976      	ldr	r1, [pc, #472]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003ee2:	4875      	ldr	r0, [pc, #468]	; (80040b8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x254>)
 8003ee4:	f008 f95a 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8003ee8:	4b74      	ldr	r3, [pc, #464]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2baa      	cmp	r3, #170	; 0xaa
 8003eee:	f040 80d5 	bne.w	800409c <TinyBMS_UART_ReadBatteryPackCellVoltages+0x238>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8003ef2:	4b72      	ldr	r3, [pc, #456]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d130      	bne.n	8003f5c <TinyBMS_UART_ReadBatteryPackCellVoltages+0xf8>
			printf("Response from BMS [ERROR]\r\n");
 8003efa:	4871      	ldr	r0, [pc, #452]	; (80040c0 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x25c>)
 8003efc:	f00a f916 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8003f00:	2204      	movs	r2, #4
 8003f02:	4970      	ldr	r1, [pc, #448]	; (80040c4 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x260>)
 8003f04:	486c      	ldr	r0, [pc, #432]	; (80040b8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x254>)
 8003f06:	f008 f949 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8003f0a:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003f0c:	78db      	ldrb	r3, [r3, #3]
 8003f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8003f12:	4b6a      	ldr	r3, [pc, #424]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003f14:	795b      	ldrb	r3, [r3, #5]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	b21a      	sxth	r2, r3
 8003f1a:	4b68      	ldr	r3, [pc, #416]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003f1c:	791b      	ldrb	r3, [r3, #4]
 8003f1e:	b21b      	sxth	r3, r3
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b21b      	sxth	r3, r3
 8003f24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8003f28:	2104      	movs	r1, #4
 8003f2a:	4864      	ldr	r0, [pc, #400]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003f2c:	f002 ff8c 	bl	8006e48 <CRC16>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if(CRC_calc == CRC_reply) {
 8003f36:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003f3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d103      	bne.n	8003f4a <TinyBMS_UART_ReadBatteryPackCellVoltages+0xe6>
				printf("CRC pass\r\n");
 8003f42:	4861      	ldr	r0, [pc, #388]	; (80040c8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x264>)
 8003f44:	f00a f8f2 	bl	800e12c <puts>
 8003f48:	e002      	b.n	8003f50 <TinyBMS_UART_ReadBatteryPackCellVoltages+0xec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8003f4a:	4860      	ldr	r0, [pc, #384]	; (80040cc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x268>)
 8003f4c:	f00a f8ee 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8003f50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003f54:	4618      	mov	r0, r3
 8003f56:	f002 ff55 	bl	8006e04 <reportBMSError>
 8003f5a:	e0a5      	b.n	80040a8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x244>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_CELL_VOLTAGES) {
 8003f5c:	4b57      	ldr	r3, [pc, #348]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	2b1c      	cmp	r3, #28
 8003f62:	f040 8094 	bne.w	800408e <TinyBMS_UART_ReadBatteryPackCellVoltages+0x22a>
			printf("Response from BMS [OK]\r\n");
 8003f66:	485a      	ldr	r0, [pc, #360]	; (80040d0 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x26c>)
 8003f68:	f00a f8e0 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4955      	ldr	r1, [pc, #340]	; (80040c4 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x260>)
 8003f70:	4851      	ldr	r0, [pc, #324]	; (80040b8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x254>)
 8003f72:	f008 f913 	bl	800c19c <HAL_UART_Receive_IT>

			//Up to 16 Cells in Series: (Registers: 0x00-0x15) Cell 1 - Cell 16
			uint8_t PL = rx_buffer[2];
 8003f76:	4b51      	ldr	r3, [pc, #324]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003f78:	789b      	ldrb	r3, [r3, #2]
 8003f7a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			//Payload Length = PL = 2n bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 2n+5 from OK reply
 8003f7e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3302      	adds	r3, #2
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4952      	ldr	r1, [pc, #328]	; (80040d4 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x270>)
 8003f8c:	484a      	ldr	r0, [pc, #296]	; (80040b8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x254>)
 8003f8e:	f008 f905 	bl	800c19c <HAL_UART_Receive_IT>

			uint16_t cellVoltage[] = {0};
 8003f92:	2300      	movs	r3, #0
 8003f94:	81bb      	strh	r3, [r7, #12]
			uint32_t numCells = (PL / 2); //2 bytes per data reading
 8003f96:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	647b      	str	r3, [r7, #68]	; 0x44
			uint32_t n = 1; //cell or data index, where 1 <= n <= 16
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	65bb      	str	r3, [r7, #88]	; 0x58

			for(uint32_t i = 0; i < numCells; i++) {
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa8:	e01c      	b.n	8003fe4 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x180>
				//DATAn Cell Voltage (0.1mV resolution) LSB = Byte(2n+2), MSB = Byte(2n+3) (i.e. rx_buffer[2n+2:2n+3])
				cellVoltage[i] = ((rx_buffer[(2*n)+3-1] << 8) | (rx_buffer[(2*n)+2-1]));
 8003faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fac:	3301      	adds	r3, #1
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4a42      	ldr	r2, [pc, #264]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	b21a      	sxth	r2, r3
 8003fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fba:	3301      	adds	r3, #1
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	493e      	ldr	r1, [pc, #248]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b21b      	sxth	r3, r3
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	3360      	adds	r3, #96	; 0x60
 8003fd2:	443b      	add	r3, r7
 8003fd4:	f823 2c54 	strh.w	r2, [r3, #-84]
				n++;
 8003fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fda:	3301      	adds	r3, #1
 8003fdc:	65bb      	str	r3, [r7, #88]	; 0x58
			for(uint32_t i = 0; i < numCells; i++) {
 8003fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d3de      	bcc.n	8003faa <TinyBMS_UART_ReadBatteryPackCellVoltages+0x146>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 8003fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fee:	3302      	adds	r3, #2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4a32      	ldr	r2, [pc, #200]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8003ff4:	5cd3      	ldrb	r3, [r2, r3]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	b21a      	sxth	r2, r3
 8003ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	492e      	ldr	r1, [pc, #184]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8004004:	5ccb      	ldrb	r3, [r1, r3]
 8004006:	b21b      	sxth	r3, r3
 8004008:	4313      	orrs	r3, r2
 800400a:	b21b      	sxth	r3, r3
 800400c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8004010:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004014:	b29b      	uxth	r3, r3
 8004016:	3303      	adds	r3, #3
 8004018:	b29b      	uxth	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	4827      	ldr	r0, [pc, #156]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 800401e:	f002 ff13 	bl	8006e48 <CRC16>
 8004022:	4603      	mov	r3, r0
 8004024:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if(CRC_calc == CRC_reply) {
 8004028:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800402c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004030:	429a      	cmp	r2, r3
 8004032:	d128      	bne.n	8004086 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x222>
				printf("CRC pass\r\n");
 8004034:	4824      	ldr	r0, [pc, #144]	; (80040c8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x264>)
 8004036:	f00a f879 	bl	800e12c <puts>

				//Print the Individual Cell Voltages of Battery Pack
				printf("************ TinyBMS Secondary Pack Cell Voltages************\r\n");
 800403a:	4827      	ldr	r0, [pc, #156]	; (80040d8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x274>)
 800403c:	f00a f876 	bl	800e12c <puts>
				for(uint16_t i = 0; i < numCells; i++) {
 8004040:	2300      	movs	r3, #0
 8004042:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004046:	e012      	b.n	800406e <TinyBMS_UART_ReadBatteryPackCellVoltages+0x20a>
					printf("Cell%d Voltage: %u (0.1mV resolution)\r\n", i+1, cellVoltage[i]);
 8004048:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800404c:	1c59      	adds	r1, r3, #1
 800404e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	443b      	add	r3, r7
 8004058:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800405c:	461a      	mov	r2, r3
 800405e:	481f      	ldr	r0, [pc, #124]	; (80040dc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x278>)
 8004060:	f009 ffde 	bl	800e020 <iprintf>
				for(uint16_t i = 0; i < numCells; i++) {
 8004064:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004068:	3301      	adds	r3, #1
 800406a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800406e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004074:	429a      	cmp	r2, r3
 8004076:	d8e7      	bhi.n	8004048 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x1e4>
				}
				printf("----------------------------------------\r\n");
 8004078:	4819      	ldr	r0, [pc, #100]	; (80040e0 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x27c>)
 800407a:	f00a f857 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004084:	e010      	b.n	80040a8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x244>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8004086:	4817      	ldr	r0, [pc, #92]	; (80040e4 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x280>)
 8004088:	f00a f850 	bl	800e12c <puts>
 800408c:	e00c      	b.n	80040a8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x244>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1C but was 0x%02X\r\n", rx_buffer[1]);
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	4619      	mov	r1, r3
 8004094:	4814      	ldr	r0, [pc, #80]	; (80040e8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x284>)
 8004096:	f009 ffc3 	bl	800e020 <iprintf>
 800409a:	e005      	b.n	80040a8 <TinyBMS_UART_ReadBatteryPackCellVoltages+0x244>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <TinyBMS_UART_ReadBatteryPackCellVoltages+0x258>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4619      	mov	r1, r3
 80040a2:	4812      	ldr	r0, [pc, #72]	; (80040ec <TinyBMS_UART_ReadBatteryPackCellVoltages+0x288>)
 80040a4:	f009 ffbc 	bl	800e020 <iprintf>
	}

	return retval;
 80040a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3760      	adds	r7, #96	; 0x60
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	08011f9c 	.word	0x08011f9c
 80040b8:	20000228 	.word	0x20000228
 80040bc:	2000037c 	.word	0x2000037c
 80040c0:	08011364 	.word	0x08011364
 80040c4:	2000037e 	.word	0x2000037e
 80040c8:	08011280 	.word	0x08011280
 80040cc:	0801128c 	.word	0x0801128c
 80040d0:	08011380 	.word	0x08011380
 80040d4:	2000037f 	.word	0x2000037f
 80040d8:	08011fc8 	.word	0x08011fc8
 80040dc:	08012008 	.word	0x08012008
 80040e0:	08011480 	.word	0x08011480
 80040e4:	080114ac 	.word	0x080114ac
 80040e8:	08012030 	.word	0x08012030
 80040ec:	08011318 	.word	0x08011318

080040f0 <TinyBMS_UART_ReadSettingsValues>:
 * 						   0x01 - Min. settings     0x02 - Max. settings,
 * 						   0x03 - Default settings  0x04 - Current settings
 *
 * 						   RL - Registers to read. Max. 100 (0x64) registers
 */
uint8_t TinyBMS_UART_ReadSettingsValues(UART_HandleTypeDef *huart, uint8_t option, uint8_t rl) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b098      	sub	sp, #96	; 0x60
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
 80040fc:	4613      	mov	r3, r2
 80040fe:	70bb      	strb	r3, [r7, #2]
	printf("TinyBMS_UART_ReadSettingsValues\r\n");
 8004100:	48b2      	ldr	r0, [pc, #712]	; (80043cc <TinyBMS_UART_ReadSettingsValues+0x2dc>)
 8004102:	f00a f813 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8004106:	23ff      	movs	r3, #255	; 0xff
 8004108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8004112:	2300      	movs	r3, #0
 8004114:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800411e:	2300      	movs	r3, #0
 8004120:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004124:	2300      	movs	r3, #0
 8004126:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 800412a:	23aa      	movs	r3, #170	; 0xaa
 800412c:	743b      	strb	r3, [r7, #16]
	tx_buffer[1] = UART_TBMS_READ_SETTINGS_VALUES;
 800412e:	231d      	movs	r3, #29
 8004130:	747b      	strb	r3, [r7, #17]

	//Check input
	if((option != 0x01) && (option != 0x02) && (option != 0x03) && (option != 0x04)) {
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d00e      	beq.n	8004156 <TinyBMS_UART_ReadSettingsValues+0x66>
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d00b      	beq.n	8004156 <TinyBMS_UART_ReadSettingsValues+0x66>
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d008      	beq.n	8004156 <TinyBMS_UART_ReadSettingsValues+0x66>
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d005      	beq.n	8004156 <TinyBMS_UART_ReadSettingsValues+0x66>
		printf("Input 'option' invalid, must be: 0x01 - Min, 0x02 - Max, 0x03 - Default, or 0x04 - Current.\r\n");
 800414a:	48a1      	ldr	r0, [pc, #644]	; (80043d0 <TinyBMS_UART_ReadSettingsValues+0x2e0>)
 800414c:	f009 ffee 	bl	800e12c <puts>
		return retval;
 8004150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004154:	e135      	b.n	80043c2 <TinyBMS_UART_ReadSettingsValues+0x2d2>
	}
	tx_buffer[2] = option;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	74bb      	strb	r3, [r7, #18]

	tx_buffer[3] = 0x00;
 800415a:	2300      	movs	r3, #0
 800415c:	74fb      	strb	r3, [r7, #19]

	//Check input
	if((rl < 1) || (rl > 100)) {
 800415e:	78bb      	ldrb	r3, [r7, #2]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <TinyBMS_UART_ReadSettingsValues+0x7a>
 8004164:	78bb      	ldrb	r3, [r7, #2]
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d908      	bls.n	800417c <TinyBMS_UART_ReadSettingsValues+0x8c>
		printf("Input 'rl' (registers to read) out of acceptable range. Please enter a value between 1-100.\r\n");
 800416a:	489a      	ldr	r0, [pc, #616]	; (80043d4 <TinyBMS_UART_ReadSettingsValues+0x2e4>)
 800416c:	f009 ffde 	bl	800e12c <puts>
		retval = CMD_FAILURE;
 8004170:	23ff      	movs	r3, #255	; 0xff
 8004172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		return retval;
 8004176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800417a:	e122      	b.n	80043c2 <TinyBMS_UART_ReadSettingsValues+0x2d2>
	}
	tx_buffer[4] = rl;
 800417c:	78bb      	ldrb	r3, [r7, #2]
 800417e:	753b      	strb	r3, [r7, #20]


	CRC_request = CRC16(tx_buffer, 5);
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	2105      	movs	r1, #5
 8004186:	4618      	mov	r0, r3
 8004188:	f002 fe5e 	bl	8006e48 <CRC16>
 800418c:	4603      	mov	r3, r0
 800418e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	CRC_LSB = (CRC_request & 0xFF);
 8004192:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004196:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 800419a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[5] = CRC_LSB;
 80041a6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80041aa:	757b      	strb	r3, [r7, #21]
	tx_buffer[6] = CRC_MSB;
 80041ac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80041b0:	75bb      	strb	r3, [r7, #22]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 7);
 80041b2:	f107 0310 	add.w	r3, r7, #16
 80041b6:	2207      	movs	r2, #7
 80041b8:	4619      	mov	r1, r3
 80041ba:	4887      	ldr	r0, [pc, #540]	; (80043d8 <TinyBMS_UART_ReadSettingsValues+0x2e8>)
 80041bc:	f007 ff80 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80041c0:	2202      	movs	r2, #2
 80041c2:	4986      	ldr	r1, [pc, #536]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80041c4:	4884      	ldr	r0, [pc, #528]	; (80043d8 <TinyBMS_UART_ReadSettingsValues+0x2e8>)
 80041c6:	f007 ffe9 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80041ca:	4b84      	ldr	r3, [pc, #528]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2baa      	cmp	r3, #170	; 0xaa
 80041d0:	f040 80ef 	bne.w	80043b2 <TinyBMS_UART_ReadSettingsValues+0x2c2>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80041d4:	4b81      	ldr	r3, [pc, #516]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d130      	bne.n	800423e <TinyBMS_UART_ReadSettingsValues+0x14e>
			printf("Response from BMS [ERROR]\r\n");
 80041dc:	4880      	ldr	r0, [pc, #512]	; (80043e0 <TinyBMS_UART_ReadSettingsValues+0x2f0>)
 80041de:	f009 ffa5 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80041e2:	2204      	movs	r2, #4
 80041e4:	497f      	ldr	r1, [pc, #508]	; (80043e4 <TinyBMS_UART_ReadSettingsValues+0x2f4>)
 80041e6:	487c      	ldr	r0, [pc, #496]	; (80043d8 <TinyBMS_UART_ReadSettingsValues+0x2e8>)
 80041e8:	f007 ffd8 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80041ec:	4b7b      	ldr	r3, [pc, #492]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80041ee:	78db      	ldrb	r3, [r3, #3]
 80041f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80041f4:	4b79      	ldr	r3, [pc, #484]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80041f6:	795b      	ldrb	r3, [r3, #5]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	b21a      	sxth	r2, r3
 80041fc:	4b77      	ldr	r3, [pc, #476]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	b21b      	sxth	r3, r3
 8004202:	4313      	orrs	r3, r2
 8004204:	b21b      	sxth	r3, r3
 8004206:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 800420a:	2104      	movs	r1, #4
 800420c:	4873      	ldr	r0, [pc, #460]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 800420e:	f002 fe1b 	bl	8006e48 <CRC16>
 8004212:	4603      	mov	r3, r0
 8004214:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if(CRC_calc == CRC_reply) {
 8004218:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800421c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004220:	429a      	cmp	r2, r3
 8004222:	d103      	bne.n	800422c <TinyBMS_UART_ReadSettingsValues+0x13c>
				printf("CRC pass\r\n");
 8004224:	4870      	ldr	r0, [pc, #448]	; (80043e8 <TinyBMS_UART_ReadSettingsValues+0x2f8>)
 8004226:	f009 ff81 	bl	800e12c <puts>
 800422a:	e002      	b.n	8004232 <TinyBMS_UART_ReadSettingsValues+0x142>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 800422c:	486f      	ldr	r0, [pc, #444]	; (80043ec <TinyBMS_UART_ReadSettingsValues+0x2fc>)
 800422e:	f009 ff7d 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8004232:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004236:	4618      	mov	r0, r3
 8004238:	f002 fde4 	bl	8006e04 <reportBMSError>
 800423c:	e0bf      	b.n	80043be <TinyBMS_UART_ReadSettingsValues+0x2ce>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_SETTINGS_VALUES) {
 800423e:	4b67      	ldr	r3, [pc, #412]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b1d      	cmp	r3, #29
 8004244:	f040 80ae 	bne.w	80043a4 <TinyBMS_UART_ReadSettingsValues+0x2b4>
			printf("Response from BMS [OK]\r\n");
 8004248:	4869      	ldr	r0, [pc, #420]	; (80043f0 <TinyBMS_UART_ReadSettingsValues+0x300>)
 800424a:	f009 ff6f 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 800424e:	2201      	movs	r2, #1
 8004250:	4964      	ldr	r1, [pc, #400]	; (80043e4 <TinyBMS_UART_ReadSettingsValues+0x2f4>)
 8004252:	4861      	ldr	r0, [pc, #388]	; (80043d8 <TinyBMS_UART_ReadSettingsValues+0x2e8>)
 8004254:	f007 ffa2 	bl	800c19c <HAL_UART_Receive_IT>

			//Can read up to maximum of 100 (0x64) registers
			uint8_t PL = rx_buffer[2];
 8004258:	4b60      	ldr	r3, [pc, #384]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 800425a:	789b      	ldrb	r3, [r3, #2]
 800425c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			//Payload Length = PL = 2n bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to 2n+5 from OK reply
 8004260:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004264:	b29b      	uxth	r3, r3
 8004266:	3302      	adds	r3, #2
 8004268:	b29b      	uxth	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	4961      	ldr	r1, [pc, #388]	; (80043f4 <TinyBMS_UART_ReadSettingsValues+0x304>)
 800426e:	485a      	ldr	r0, [pc, #360]	; (80043d8 <TinyBMS_UART_ReadSettingsValues+0x2e8>)
 8004270:	f007 ff94 	bl	800c19c <HAL_UART_Receive_IT>

			uint16_t settingsValues[] = {0};
 8004274:	2300      	movs	r3, #0
 8004276:	81bb      	strh	r3, [r7, #12]
			uint32_t numSettings = (PL / 2); //2 bytes per data reading
 8004278:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	b2db      	uxtb	r3, r3
 8004280:	647b      	str	r3, [r7, #68]	; 0x44
			uint32_t n = 1; //settings or data index
 8004282:	2301      	movs	r3, #1
 8004284:	65bb      	str	r3, [r7, #88]	; 0x58

			for(uint32_t i = 0; i < numSettings; i++) {
 8004286:	2300      	movs	r3, #0
 8004288:	657b      	str	r3, [r7, #84]	; 0x54
 800428a:	e01c      	b.n	80042c6 <TinyBMS_UART_ReadSettingsValues+0x1d6>
				settingsValues[i] = ((rx_buffer[(2*n)+3-1] << 8) | (rx_buffer[(2*n)+2-1]));
 800428c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428e:	3301      	adds	r3, #1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	4a52      	ldr	r2, [pc, #328]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 8004294:	5cd3      	ldrb	r3, [r2, r3]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	b21a      	sxth	r2, r3
 800429a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429c:	3301      	adds	r3, #1
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	3b01      	subs	r3, #1
 80042a2:	494e      	ldr	r1, [pc, #312]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	b21b      	sxth	r3, r3
 80042a8:	4313      	orrs	r3, r2
 80042aa:	b21b      	sxth	r3, r3
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	3360      	adds	r3, #96	; 0x60
 80042b4:	443b      	add	r3, r7
 80042b6:	f823 2c54 	strh.w	r2, [r3, #-84]
				n++;
 80042ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042bc:	3301      	adds	r3, #1
 80042be:	65bb      	str	r3, [r7, #88]	; 0x58
			for(uint32_t i = 0; i < numSettings; i++) {
 80042c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c2:	3301      	adds	r3, #1
 80042c4:	657b      	str	r3, [r7, #84]	; 0x54
 80042c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d3de      	bcc.n	800428c <TinyBMS_UART_ReadSettingsValues+0x19c>
			}

			CRC_reply = ((rx_buffer[(2*n)+5-1] << 8) | rx_buffer[(2*n)+4-1]);
 80042ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d0:	3302      	adds	r3, #2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4a41      	ldr	r2, [pc, #260]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	b21a      	sxth	r2, r3
 80042dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042de:	3302      	adds	r3, #2
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	3b01      	subs	r3, #1
 80042e4:	493d      	ldr	r1, [pc, #244]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	b21b      	sxth	r3, r3
 80042ea:	4313      	orrs	r3, r2
 80042ec:	b21b      	sxth	r3, r3
 80042ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 80042f2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3303      	adds	r3, #3
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	4619      	mov	r1, r3
 80042fe:	4837      	ldr	r0, [pc, #220]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 8004300:	f002 fda2 	bl	8006e48 <CRC16>
 8004304:	4603      	mov	r3, r0
 8004306:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if(CRC_calc == CRC_reply) {
 800430a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800430e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004312:	429a      	cmp	r2, r3
 8004314:	d142      	bne.n	800439c <TinyBMS_UART_ReadSettingsValues+0x2ac>
				printf("CRC pass\r\n");
 8004316:	4834      	ldr	r0, [pc, #208]	; (80043e8 <TinyBMS_UART_ReadSettingsValues+0x2f8>)
 8004318:	f009 ff08 	bl	800e12c <puts>

				//Print the TinyBMS Settings Values (min, max, default, or current)
				printf("************ TinyBMS Settings Values ************\r\n");
 800431c:	4836      	ldr	r0, [pc, #216]	; (80043f8 <TinyBMS_UART_ReadSettingsValues+0x308>)
 800431e:	f009 ff05 	bl	800e12c <puts>
				if(option == TINYBMS_SETTINGS_MIN) {
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d103      	bne.n	8004330 <TinyBMS_UART_ReadSettingsValues+0x240>
					printf("0x01 - Minimum Settings\r\n");
 8004328:	4834      	ldr	r0, [pc, #208]	; (80043fc <TinyBMS_UART_ReadSettingsValues+0x30c>)
 800432a:	f009 feff 	bl	800e12c <puts>
 800432e:	e013      	b.n	8004358 <TinyBMS_UART_ReadSettingsValues+0x268>
				} else if(option == TINYBMS_SETTINGS_MAX) {
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d103      	bne.n	800433e <TinyBMS_UART_ReadSettingsValues+0x24e>
					printf("0x02 - Maximum Settings\r\n");
 8004336:	4832      	ldr	r0, [pc, #200]	; (8004400 <TinyBMS_UART_ReadSettingsValues+0x310>)
 8004338:	f009 fef8 	bl	800e12c <puts>
 800433c:	e00c      	b.n	8004358 <TinyBMS_UART_ReadSettingsValues+0x268>
				} else if(option == TINYBMS_SETTINGS_DEFAULT) {
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d103      	bne.n	800434c <TinyBMS_UART_ReadSettingsValues+0x25c>
					printf("0x03 - Default Settings\r\n");
 8004344:	482f      	ldr	r0, [pc, #188]	; (8004404 <TinyBMS_UART_ReadSettingsValues+0x314>)
 8004346:	f009 fef1 	bl	800e12c <puts>
 800434a:	e005      	b.n	8004358 <TinyBMS_UART_ReadSettingsValues+0x268>
				} else if(option == TINYBMS_SETTINGS_CURRENT) {
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d102      	bne.n	8004358 <TinyBMS_UART_ReadSettingsValues+0x268>
					printf("0x04 - Current Settings\r\n");
 8004352:	482d      	ldr	r0, [pc, #180]	; (8004408 <TinyBMS_UART_ReadSettingsValues+0x318>)
 8004354:	f009 feea 	bl	800e12c <puts>
				}
				for(uint16_t i = 0; i < numSettings; i++) {
 8004358:	2300      	movs	r3, #0
 800435a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800435e:	e011      	b.n	8004384 <TinyBMS_UART_ReadSettingsValues+0x294>
					printf("Register %u: %u\r\n", i, settingsValues[i]);
 8004360:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8004364:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	3360      	adds	r3, #96	; 0x60
 800436c:	443b      	add	r3, r7
 800436e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004372:	461a      	mov	r2, r3
 8004374:	4825      	ldr	r0, [pc, #148]	; (800440c <TinyBMS_UART_ReadSettingsValues+0x31c>)
 8004376:	f009 fe53 	bl	800e020 <iprintf>
				for(uint16_t i = 0; i < numSettings; i++) {
 800437a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800437e:	3301      	adds	r3, #1
 8004380:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004384:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800438a:	429a      	cmp	r2, r3
 800438c:	d8e8      	bhi.n	8004360 <TinyBMS_UART_ReadSettingsValues+0x270>
				}
				printf("----------------------------------------\r\n");
 800438e:	4820      	ldr	r0, [pc, #128]	; (8004410 <TinyBMS_UART_ReadSettingsValues+0x320>)
 8004390:	f009 fecc 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 8004394:	2300      	movs	r3, #0
 8004396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800439a:	e010      	b.n	80043be <TinyBMS_UART_ReadSettingsValues+0x2ce>

			} else {
				printf("CRC fail in BMS OK\r\n");
 800439c:	481d      	ldr	r0, [pc, #116]	; (8004414 <TinyBMS_UART_ReadSettingsValues+0x324>)
 800439e:	f009 fec5 	bl	800e12c <puts>
 80043a2:	e00c      	b.n	80043be <TinyBMS_UART_ReadSettingsValues+0x2ce>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1D but was 0x%02X\r\n", rx_buffer[1]);
 80043a4:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80043a6:	785b      	ldrb	r3, [r3, #1]
 80043a8:	4619      	mov	r1, r3
 80043aa:	481b      	ldr	r0, [pc, #108]	; (8004418 <TinyBMS_UART_ReadSettingsValues+0x328>)
 80043ac:	f009 fe38 	bl	800e020 <iprintf>
 80043b0:	e005      	b.n	80043be <TinyBMS_UART_ReadSettingsValues+0x2ce>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <TinyBMS_UART_ReadSettingsValues+0x2ec>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	4818      	ldr	r0, [pc, #96]	; (800441c <TinyBMS_UART_ReadSettingsValues+0x32c>)
 80043ba:	f009 fe31 	bl	800e020 <iprintf>
	}

	return retval;
 80043be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3760      	adds	r7, #96	; 0x60
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	08012068 	.word	0x08012068
 80043d0:	0801208c 	.word	0x0801208c
 80043d4:	080120ec 	.word	0x080120ec
 80043d8:	20000228 	.word	0x20000228
 80043dc:	2000037c 	.word	0x2000037c
 80043e0:	08011364 	.word	0x08011364
 80043e4:	2000037e 	.word	0x2000037e
 80043e8:	08011280 	.word	0x08011280
 80043ec:	0801128c 	.word	0x0801128c
 80043f0:	08011380 	.word	0x08011380
 80043f4:	2000037f 	.word	0x2000037f
 80043f8:	0801214c 	.word	0x0801214c
 80043fc:	08012180 	.word	0x08012180
 8004400:	0801219c 	.word	0x0801219c
 8004404:	080121b8 	.word	0x080121b8
 8004408:	080121d4 	.word	0x080121d4
 800440c:	080121f0 	.word	0x080121f0
 8004410:	08011480 	.word	0x08011480
 8004414:	080114ac 	.word	0x080114ac
 8004418:	08012204 	.word	0x08012204
 800441c:	08011318 	.word	0x08011318

08004420 <TinyBMS_UART_ReadVersion>:
 * 						 	 DATA1 - Hardware version
 * 						 	 DATA2 - Hardware changes version
 * 						 	 DATA3 - Firmware public version
 * 						 	 DATA4 - Firmware internal version
 */
uint8_t TinyBMS_UART_ReadVersion(UART_HandleTypeDef *huart) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b096      	sub	sp, #88	; 0x58
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadVersion\r\n");
 8004428:	48b2      	ldr	r0, [pc, #712]	; (80046f4 <TinyBMS_UART_ReadVersion+0x2d4>)
 800442a:	f009 fe7f 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 800442e:	23ff      	movs	r3, #255	; 0xff
 8004430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800443a:	2300      	movs	r3, #0
 800443c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004446:	2300      	movs	r3, #0
 8004448:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800444c:	2300      	movs	r3, #0
 800444e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8004452:	23aa      	movs	r3, #170	; 0xaa
 8004454:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = UART_TBMS_READ_VERSION;
 8004456:	231e      	movs	r3, #30
 8004458:	737b      	strb	r3, [r7, #13]

	CRC_request = CRC16(tx_buffer, 2);
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f002 fcf1 	bl	8006e48 <CRC16>
 8004466:	4603      	mov	r3, r0
 8004468:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	CRC_LSB = (CRC_request & 0xFF);
 800446c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004470:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8004474:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	b29b      	uxth	r3, r3
 800447c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8004480:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004484:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = CRC_MSB;
 8004486:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800448a:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 800448c:	f107 030c 	add.w	r3, r7, #12
 8004490:	2204      	movs	r2, #4
 8004492:	4619      	mov	r1, r3
 8004494:	4898      	ldr	r0, [pc, #608]	; (80046f8 <TinyBMS_UART_ReadVersion+0x2d8>)
 8004496:	f007 fe13 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 800449a:	2202      	movs	r2, #2
 800449c:	4997      	ldr	r1, [pc, #604]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 800449e:	4896      	ldr	r0, [pc, #600]	; (80046f8 <TinyBMS_UART_ReadVersion+0x2d8>)
 80044a0:	f007 fe7c 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80044a4:	4b95      	ldr	r3, [pc, #596]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2baa      	cmp	r3, #170	; 0xaa
 80044aa:	f040 8116 	bne.w	80046da <TinyBMS_UART_ReadVersion+0x2ba>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80044ae:	4b93      	ldr	r3, [pc, #588]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d130      	bne.n	8004518 <TinyBMS_UART_ReadVersion+0xf8>
			printf("Response from BMS [ERROR]\r\n");
 80044b6:	4892      	ldr	r0, [pc, #584]	; (8004700 <TinyBMS_UART_ReadVersion+0x2e0>)
 80044b8:	f009 fe38 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80044bc:	2204      	movs	r2, #4
 80044be:	4991      	ldr	r1, [pc, #580]	; (8004704 <TinyBMS_UART_ReadVersion+0x2e4>)
 80044c0:	488d      	ldr	r0, [pc, #564]	; (80046f8 <TinyBMS_UART_ReadVersion+0x2d8>)
 80044c2:	f007 fe6b 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80044c6:	4b8d      	ldr	r3, [pc, #564]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80044c8:	78db      	ldrb	r3, [r3, #3]
 80044ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80044ce:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80044d0:	795b      	ldrb	r3, [r3, #5]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	b21a      	sxth	r2, r3
 80044d6:	4b89      	ldr	r3, [pc, #548]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80044d8:	791b      	ldrb	r3, [r3, #4]
 80044da:	b21b      	sxth	r3, r3
 80044dc:	4313      	orrs	r3, r2
 80044de:	b21b      	sxth	r3, r3
 80044e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 80044e4:	2104      	movs	r1, #4
 80044e6:	4885      	ldr	r0, [pc, #532]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80044e8:	f002 fcae 	bl	8006e48 <CRC16>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			if(CRC_calc == CRC_reply) {
 80044f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80044f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d103      	bne.n	8004506 <TinyBMS_UART_ReadVersion+0xe6>
				printf("CRC pass\r\n");
 80044fe:	4882      	ldr	r0, [pc, #520]	; (8004708 <TinyBMS_UART_ReadVersion+0x2e8>)
 8004500:	f009 fe14 	bl	800e12c <puts>
 8004504:	e002      	b.n	800450c <TinyBMS_UART_ReadVersion+0xec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8004506:	4881      	ldr	r0, [pc, #516]	; (800470c <TinyBMS_UART_ReadVersion+0x2ec>)
 8004508:	f009 fe10 	bl	800e12c <puts>
			}
			reportBMSError(error);
 800450c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004510:	4618      	mov	r0, r3
 8004512:	f002 fc77 	bl	8006e04 <reportBMSError>
 8004516:	e0e6      	b.n	80046e6 <TinyBMS_UART_ReadVersion+0x2c6>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_VERSION) {
 8004518:	4b78      	ldr	r3, [pc, #480]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b1e      	cmp	r3, #30
 800451e:	f040 80d5 	bne.w	80046cc <TinyBMS_UART_ReadVersion+0x2ac>
			printf("Response from BMS [OK]\r\n");
 8004522:	487b      	ldr	r0, [pc, #492]	; (8004710 <TinyBMS_UART_ReadVersion+0x2f0>)
 8004524:	f009 fe02 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8004528:	2201      	movs	r2, #1
 800452a:	4976      	ldr	r1, [pc, #472]	; (8004704 <TinyBMS_UART_ReadVersion+0x2e4>)
 800452c:	4872      	ldr	r0, [pc, #456]	; (80046f8 <TinyBMS_UART_ReadVersion+0x2d8>)
 800452e:	f007 fe35 	bl	800c19c <HAL_UART_Receive_IT>

			//PL: (uint8_t)(uint8_t)(uint8_t)(uint16_t)
			uint8_t PL = rx_buffer[2];
 8004532:	4b72      	ldr	r3, [pc, #456]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 8004534:	789b      	ldrb	r3, [r3, #2]
 8004536:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			//Payload Length = PL = n bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to  from OK reply
 800453a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800453e:	b29b      	uxth	r3, r3
 8004540:	3302      	adds	r3, #2
 8004542:	b29b      	uxth	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	4973      	ldr	r1, [pc, #460]	; (8004714 <TinyBMS_UART_ReadVersion+0x2f4>)
 8004548:	486b      	ldr	r0, [pc, #428]	; (80046f8 <TinyBMS_UART_ReadVersion+0x2d8>)
 800454a:	f007 fe27 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t versions8[] = {0};
 800454e:	2300      	movs	r3, #0
 8004550:	723b      	strb	r3, [r7, #8]
			uint16_t version16 = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			uint32_t numVersions = PL; //1 bytes per data reading (except DATA4 which is 2 bytes)
 8004558:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800455c:	653b      	str	r3, [r7, #80]	; 0x50
			if(PL >= 5) {
 800455e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004562:	2b04      	cmp	r3, #4
 8004564:	d902      	bls.n	800456c <TinyBMS_UART_ReadVersion+0x14c>
				numVersions = numVersions - 1; //accounting for DATA4 being 2 bytes instead of 1
 8004566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004568:	3b01      	subs	r3, #1
 800456a:	653b      	str	r3, [r7, #80]	; 0x50
			}
			uint32_t n = 0; //version or data index
 800456c:	2300      	movs	r3, #0
 800456e:	64fb      	str	r3, [r7, #76]	; 0x4c

			//PL = 5 (max)
			for(uint32_t i = 0; i < numVersions; i++) {
 8004570:	2300      	movs	r3, #0
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
 8004574:	e024      	b.n	80045c0 <TinyBMS_UART_ReadVersion+0x1a0>
				n++;
 8004576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004578:	3301      	adds	r3, #1
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
				//DATA1,2,3
				//n=1,2,3 or i=0,1,2
				if((i >= 0) && (i < 3)) {
 800457c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457e:	2b02      	cmp	r3, #2
 8004580:	d809      	bhi.n	8004596 <TinyBMS_UART_ReadVersion+0x176>
					versions8[i] = rx_buffer[n+3-1];
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	3302      	adds	r3, #2
 8004586:	4a5d      	ldr	r2, [pc, #372]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 8004588:	5cd1      	ldrb	r1, [r2, r3]
 800458a:	f107 0208 	add.w	r2, r7, #8
 800458e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004590:	4413      	add	r3, r2
 8004592:	460a      	mov	r2, r1
 8004594:	701a      	strb	r2, [r3, #0]
				}
				//DATA4
				//n=4 or i=3
				if(i == 3) {
 8004596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10e      	bne.n	80045ba <TinyBMS_UART_ReadVersion+0x19a>
					version16 = ((rx_buffer[n+4-1] << 8) | rx_buffer[n+3-1]);
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459e:	3303      	adds	r3, #3
 80045a0:	4a56      	ldr	r2, [pc, #344]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	b21a      	sxth	r2, r3
 80045a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045aa:	3302      	adds	r3, #2
 80045ac:	4953      	ldr	r1, [pc, #332]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	b21b      	sxth	r3, r3
 80045b2:	4313      	orrs	r3, r2
 80045b4:	b21b      	sxth	r3, r3
 80045b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			for(uint32_t i = 0; i < numVersions; i++) {
 80045ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045bc:	3301      	adds	r3, #1
 80045be:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d3d6      	bcc.n	8004576 <TinyBMS_UART_ReadVersion+0x156>
				}
			}

			//n=4
			CRC_reply = ((rx_buffer[n+6-1] << 8) | rx_buffer[n+5-1]);
 80045c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ca:	3305      	adds	r3, #5
 80045cc:	4a4b      	ldr	r2, [pc, #300]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	b21a      	sxth	r2, r3
 80045d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d6:	3304      	adds	r3, #4
 80045d8:	4948      	ldr	r1, [pc, #288]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	b21b      	sxth	r3, r3
 80045de:	4313      	orrs	r3, r2
 80045e0:	b21b      	sxth	r3, r3
 80045e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 80045e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3303      	adds	r3, #3
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4619      	mov	r1, r3
 80045f2:	4842      	ldr	r0, [pc, #264]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80045f4:	f002 fc28 	bl	8006e48 <CRC16>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			if(CRC_calc == CRC_reply) {
 80045fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004602:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004606:	429a      	cmp	r2, r3
 8004608:	d15c      	bne.n	80046c4 <TinyBMS_UART_ReadVersion+0x2a4>
				printf("CRC pass\r\n");
 800460a:	483f      	ldr	r0, [pc, #252]	; (8004708 <TinyBMS_UART_ReadVersion+0x2e8>)
 800460c:	f009 fd8e 	bl	800e12c <puts>

				//Print the TinyBMS Versions (Hardware, Hardware Changes, Firmware Public, or Firmware Internal)
				printf("************ TinyBMS Versions ************\r\n");
 8004610:	4841      	ldr	r0, [pc, #260]	; (8004718 <TinyBMS_UART_ReadVersion+0x2f8>)
 8004612:	f009 fd8b 	bl	800e12c <puts>
				switch(PL) {
 8004616:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800461a:	3b01      	subs	r3, #1
 800461c:	2b04      	cmp	r3, #4
 800461e:	d844      	bhi.n	80046aa <TinyBMS_UART_ReadVersion+0x28a>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <TinyBMS_UART_ReadVersion+0x208>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	0800463d 	.word	0x0800463d
 800462c:	08004649 	.word	0x08004649
 8004630:	0800465f 	.word	0x0800465f
 8004634:	080046ab 	.word	0x080046ab
 8004638:	0800467f 	.word	0x0800467f
				case 1:
					printf("Hardware Version: %u\r\n", versions8[0]);
 800463c:	7a3b      	ldrb	r3, [r7, #8]
 800463e:	4619      	mov	r1, r3
 8004640:	4836      	ldr	r0, [pc, #216]	; (800471c <TinyBMS_UART_ReadVersion+0x2fc>)
 8004642:	f009 fced 	bl	800e020 <iprintf>
					break;
 8004646:	e036      	b.n	80046b6 <TinyBMS_UART_ReadVersion+0x296>
				case 2:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8004648:	7a3b      	ldrb	r3, [r7, #8]
 800464a:	4619      	mov	r1, r3
 800464c:	4833      	ldr	r0, [pc, #204]	; (800471c <TinyBMS_UART_ReadVersion+0x2fc>)
 800464e:	f009 fce7 	bl	800e020 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8004652:	7a7b      	ldrb	r3, [r7, #9]
 8004654:	4619      	mov	r1, r3
 8004656:	4832      	ldr	r0, [pc, #200]	; (8004720 <TinyBMS_UART_ReadVersion+0x300>)
 8004658:	f009 fce2 	bl	800e020 <iprintf>
					break;
 800465c:	e02b      	b.n	80046b6 <TinyBMS_UART_ReadVersion+0x296>
				case 3:
					printf("Hardware Version: %u\r\n", versions8[0]);
 800465e:	7a3b      	ldrb	r3, [r7, #8]
 8004660:	4619      	mov	r1, r3
 8004662:	482e      	ldr	r0, [pc, #184]	; (800471c <TinyBMS_UART_ReadVersion+0x2fc>)
 8004664:	f009 fcdc 	bl	800e020 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8004668:	7a7b      	ldrb	r3, [r7, #9]
 800466a:	4619      	mov	r1, r3
 800466c:	482c      	ldr	r0, [pc, #176]	; (8004720 <TinyBMS_UART_ReadVersion+0x300>)
 800466e:	f009 fcd7 	bl	800e020 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 8004672:	7abb      	ldrb	r3, [r7, #10]
 8004674:	4619      	mov	r1, r3
 8004676:	482b      	ldr	r0, [pc, #172]	; (8004724 <TinyBMS_UART_ReadVersion+0x304>)
 8004678:	f009 fcd2 	bl	800e020 <iprintf>
					break;
 800467c:	e01b      	b.n	80046b6 <TinyBMS_UART_ReadVersion+0x296>
				case 5:
					printf("Hardware Version: %u\r\n", versions8[0]);
 800467e:	7a3b      	ldrb	r3, [r7, #8]
 8004680:	4619      	mov	r1, r3
 8004682:	4826      	ldr	r0, [pc, #152]	; (800471c <TinyBMS_UART_ReadVersion+0x2fc>)
 8004684:	f009 fccc 	bl	800e020 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8004688:	7a7b      	ldrb	r3, [r7, #9]
 800468a:	4619      	mov	r1, r3
 800468c:	4824      	ldr	r0, [pc, #144]	; (8004720 <TinyBMS_UART_ReadVersion+0x300>)
 800468e:	f009 fcc7 	bl	800e020 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 8004692:	7abb      	ldrb	r3, [r7, #10]
 8004694:	4619      	mov	r1, r3
 8004696:	4823      	ldr	r0, [pc, #140]	; (8004724 <TinyBMS_UART_ReadVersion+0x304>)
 8004698:	f009 fcc2 	bl	800e020 <iprintf>
					printf("Firmware Internal Version: %u\r\n", version16);
 800469c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80046a0:	4619      	mov	r1, r3
 80046a2:	4821      	ldr	r0, [pc, #132]	; (8004728 <TinyBMS_UART_ReadVersion+0x308>)
 80046a4:	f009 fcbc 	bl	800e020 <iprintf>
					break;
 80046a8:	e005      	b.n	80046b6 <TinyBMS_UART_ReadVersion+0x296>
				default:
					printf("Invalid Payload Value\r\n");
 80046aa:	4820      	ldr	r0, [pc, #128]	; (800472c <TinyBMS_UART_ReadVersion+0x30c>)
 80046ac:	f009 fd3e 	bl	800e12c <puts>
					return retval;
 80046b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046b4:	e019      	b.n	80046ea <TinyBMS_UART_ReadVersion+0x2ca>
				}
				printf("----------------------------------------\r\n");
 80046b6:	481e      	ldr	r0, [pc, #120]	; (8004730 <TinyBMS_UART_ReadVersion+0x310>)
 80046b8:	f009 fd38 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80046c2:	e010      	b.n	80046e6 <TinyBMS_UART_ReadVersion+0x2c6>

			} else {
				printf("CRC fail in BMS OK\r\n");
 80046c4:	481b      	ldr	r0, [pc, #108]	; (8004734 <TinyBMS_UART_ReadVersion+0x314>)
 80046c6:	f009 fd31 	bl	800e12c <puts>
 80046ca:	e00c      	b.n	80046e6 <TinyBMS_UART_ReadVersion+0x2c6>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1E but was 0x%02X\r\n", rx_buffer[1]);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	4619      	mov	r1, r3
 80046d2:	4819      	ldr	r0, [pc, #100]	; (8004738 <TinyBMS_UART_ReadVersion+0x318>)
 80046d4:	f009 fca4 	bl	800e020 <iprintf>
 80046d8:	e005      	b.n	80046e6 <TinyBMS_UART_ReadVersion+0x2c6>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 80046da:	4b08      	ldr	r3, [pc, #32]	; (80046fc <TinyBMS_UART_ReadVersion+0x2dc>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	4816      	ldr	r0, [pc, #88]	; (800473c <TinyBMS_UART_ReadVersion+0x31c>)
 80046e2:	f009 fc9d 	bl	800e020 <iprintf>
	}

	return retval;
 80046e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3758      	adds	r7, #88	; 0x58
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	0801223c 	.word	0x0801223c
 80046f8:	20000228 	.word	0x20000228
 80046fc:	2000037c 	.word	0x2000037c
 8004700:	08011364 	.word	0x08011364
 8004704:	2000037e 	.word	0x2000037e
 8004708:	08011280 	.word	0x08011280
 800470c:	0801128c 	.word	0x0801128c
 8004710:	08011380 	.word	0x08011380
 8004714:	2000037f 	.word	0x2000037f
 8004718:	08012258 	.word	0x08012258
 800471c:	08012284 	.word	0x08012284
 8004720:	0801229c 	.word	0x0801229c
 8004724:	080122bc 	.word	0x080122bc
 8004728:	080122dc 	.word	0x080122dc
 800472c:	080122fc 	.word	0x080122fc
 8004730:	08011480 	.word	0x08011480
 8004734:	080114ac 	.word	0x080114ac
 8004738:	08012314 	.word	0x08012314
 800473c:	08011318 	.word	0x08011318

08004740 <TinyBMS_UART_ReadVersionExtended>:
 * 						 	 DATA3 - Firmware public version
 * 						 	 DATA4 - Firmware internal version
 * 						 	 DATA5 - Bootloader version
 * 						 	 DATA6 - Register map version
 */
uint8_t TinyBMS_UART_ReadVersionExtended(UART_HandleTypeDef *huart) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b096      	sub	sp, #88	; 0x58
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadVersionExtended\r\n");
 8004748:	48b8      	ldr	r0, [pc, #736]	; (8004a2c <TinyBMS_UART_ReadVersionExtended+0x2ec>)
 800474a:	f009 fcef 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 800474e:	23ff      	movs	r3, #255	; 0xff
 8004750:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800475a:	2300      	movs	r3, #0
 800475c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004766:	2300      	movs	r3, #0
 8004768:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800476c:	2300      	movs	r3, #0
 800476e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8004772:	23aa      	movs	r3, #170	; 0xaa
 8004774:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = UART_TBMS_READ_VERSION_EXTENDED;
 8004776:	231f      	movs	r3, #31
 8004778:	737b      	strb	r3, [r7, #13]

	CRC_request = CRC16(tx_buffer, 2);
 800477a:	f107 030c 	add.w	r3, r7, #12
 800477e:	2102      	movs	r1, #2
 8004780:	4618      	mov	r0, r3
 8004782:	f002 fb61 	bl	8006e48 <CRC16>
 8004786:	4603      	mov	r3, r0
 8004788:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	CRC_LSB = (CRC_request & 0xFF);
 800478c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8004794:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	b29b      	uxth	r3, r3
 800479c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 80047a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047a4:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = CRC_MSB;
 80047a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047aa:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 80047ac:	f107 030c 	add.w	r3, r7, #12
 80047b0:	2204      	movs	r2, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	489e      	ldr	r0, [pc, #632]	; (8004a30 <TinyBMS_UART_ReadVersionExtended+0x2f0>)
 80047b6:	f007 fc83 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 80047ba:	2202      	movs	r2, #2
 80047bc:	499d      	ldr	r1, [pc, #628]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80047be:	489c      	ldr	r0, [pc, #624]	; (8004a30 <TinyBMS_UART_ReadVersionExtended+0x2f0>)
 80047c0:	f007 fcec 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 80047c4:	4b9b      	ldr	r3, [pc, #620]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2baa      	cmp	r3, #170	; 0xaa
 80047ca:	f040 8185 	bne.w	8004ad8 <TinyBMS_UART_ReadVersionExtended+0x398>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 80047ce:	4b99      	ldr	r3, [pc, #612]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80047d0:	785b      	ldrb	r3, [r3, #1]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d130      	bne.n	8004838 <TinyBMS_UART_ReadVersionExtended+0xf8>
			printf("Response from BMS [ERROR]\r\n");
 80047d6:	4898      	ldr	r0, [pc, #608]	; (8004a38 <TinyBMS_UART_ReadVersionExtended+0x2f8>)
 80047d8:	f009 fca8 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 80047dc:	2204      	movs	r2, #4
 80047de:	4997      	ldr	r1, [pc, #604]	; (8004a3c <TinyBMS_UART_ReadVersionExtended+0x2fc>)
 80047e0:	4893      	ldr	r0, [pc, #588]	; (8004a30 <TinyBMS_UART_ReadVersionExtended+0x2f0>)
 80047e2:	f007 fcdb 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 80047e6:	4b93      	ldr	r3, [pc, #588]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80047e8:	78db      	ldrb	r3, [r3, #3]
 80047ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 80047ee:	4b91      	ldr	r3, [pc, #580]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80047f0:	795b      	ldrb	r3, [r3, #5]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	b21a      	sxth	r2, r3
 80047f6:	4b8f      	ldr	r3, [pc, #572]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80047f8:	791b      	ldrb	r3, [r3, #4]
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	4313      	orrs	r3, r2
 80047fe:	b21b      	sxth	r3, r3
 8004800:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8004804:	2104      	movs	r1, #4
 8004806:	488b      	ldr	r0, [pc, #556]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 8004808:	f002 fb1e 	bl	8006e48 <CRC16>
 800480c:	4603      	mov	r3, r0
 800480e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			if(CRC_calc == CRC_reply) {
 8004812:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004816:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800481a:	429a      	cmp	r2, r3
 800481c:	d103      	bne.n	8004826 <TinyBMS_UART_ReadVersionExtended+0xe6>
				printf("CRC pass\r\n");
 800481e:	4888      	ldr	r0, [pc, #544]	; (8004a40 <TinyBMS_UART_ReadVersionExtended+0x300>)
 8004820:	f009 fc84 	bl	800e12c <puts>
 8004824:	e002      	b.n	800482c <TinyBMS_UART_ReadVersionExtended+0xec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8004826:	4887      	ldr	r0, [pc, #540]	; (8004a44 <TinyBMS_UART_ReadVersionExtended+0x304>)
 8004828:	f009 fc80 	bl	800e12c <puts>
			}
			reportBMSError(error);
 800482c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004830:	4618      	mov	r0, r3
 8004832:	f002 fae7 	bl	8006e04 <reportBMSError>
 8004836:	e155      	b.n	8004ae4 <TinyBMS_UART_ReadVersionExtended+0x3a4>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_VERSION_EXTENDED) {
 8004838:	4b7e      	ldr	r3, [pc, #504]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b1f      	cmp	r3, #31
 800483e:	f040 8144 	bne.w	8004aca <TinyBMS_UART_ReadVersionExtended+0x38a>
			printf("Response from BMS [OK]\r\n");
 8004842:	4881      	ldr	r0, [pc, #516]	; (8004a48 <TinyBMS_UART_ReadVersionExtended+0x308>)
 8004844:	f009 fc72 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 1); //read byte 3 from OK reply
 8004848:	2201      	movs	r2, #1
 800484a:	497c      	ldr	r1, [pc, #496]	; (8004a3c <TinyBMS_UART_ReadVersionExtended+0x2fc>)
 800484c:	4878      	ldr	r0, [pc, #480]	; (8004a30 <TinyBMS_UART_ReadVersionExtended+0x2f0>)
 800484e:	f007 fca5 	bl	800c19c <HAL_UART_Receive_IT>

			//PL: (uint8_t)(uint8_t)(uint8_t)(uint16_t)(uint8_t)(uint8_t)
			uint8_t PL = rx_buffer[2];
 8004852:	4b78      	ldr	r3, [pc, #480]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 8004854:	789b      	ldrb	r3, [r3, #2]
 8004856:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			//Payload Length = PL = n bytes

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], PL+2); //read from byte 4 to  from OK reply
 800485a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800485e:	b29b      	uxth	r3, r3
 8004860:	3302      	adds	r3, #2
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	4979      	ldr	r1, [pc, #484]	; (8004a4c <TinyBMS_UART_ReadVersionExtended+0x30c>)
 8004868:	4871      	ldr	r0, [pc, #452]	; (8004a30 <TinyBMS_UART_ReadVersionExtended+0x2f0>)
 800486a:	f007 fc97 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t versions8[] = {0};
 800486e:	2300      	movs	r3, #0
 8004870:	723b      	strb	r3, [r7, #8]
			uint16_t version16 = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			uint32_t numVersions = PL; //1 bytes per data reading (except DATA4 which is 2 bytes)
 8004878:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800487c:	653b      	str	r3, [r7, #80]	; 0x50
			if(PL >= 5) {
 800487e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004882:	2b04      	cmp	r3, #4
 8004884:	d902      	bls.n	800488c <TinyBMS_UART_ReadVersionExtended+0x14c>
				numVersions = numVersions - 1; //accounting for DATA4 being 2 bytes instead of 1
 8004886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004888:	3b01      	subs	r3, #1
 800488a:	653b      	str	r3, [r7, #80]	; 0x50
			}
			uint32_t n = 0; //version or data index
 800488c:	2300      	movs	r3, #0
 800488e:	64fb      	str	r3, [r7, #76]	; 0x4c

			//PL = 7 (max)
			for(uint32_t i = 0; i < numVersions; i++) {
 8004890:	2300      	movs	r3, #0
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48
 8004894:	e034      	b.n	8004900 <TinyBMS_UART_ReadVersionExtended+0x1c0>
				n++;
 8004896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004898:	3301      	adds	r3, #1
 800489a:	64fb      	str	r3, [r7, #76]	; 0x4c
				//DATA1,2,3
				//n=1,2,3 or i=0,1,2
				if((i >= 0) && (i < 3)) {
 800489c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d809      	bhi.n	80048b6 <TinyBMS_UART_ReadVersionExtended+0x176>
					versions8[i] = rx_buffer[n+3-1];
 80048a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a4:	3302      	adds	r3, #2
 80048a6:	4a63      	ldr	r2, [pc, #396]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80048a8:	5cd1      	ldrb	r1, [r2, r3]
 80048aa:	f107 0208 	add.w	r2, r7, #8
 80048ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b0:	4413      	add	r3, r2
 80048b2:	460a      	mov	r2, r1
 80048b4:	701a      	strb	r2, [r3, #0]
				}
				//DATA4
				//n=4 or i=3
				if(i == 3) {
 80048b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d10e      	bne.n	80048da <TinyBMS_UART_ReadVersionExtended+0x19a>
					version16 = ((rx_buffer[n+4-1] << 8) | rx_buffer[n+3-1]);
 80048bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048be:	3303      	adds	r3, #3
 80048c0:	4a5c      	ldr	r2, [pc, #368]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80048c2:	5cd3      	ldrb	r3, [r2, r3]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	b21a      	sxth	r2, r3
 80048c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ca:	3302      	adds	r3, #2
 80048cc:	4959      	ldr	r1, [pc, #356]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	b21b      	sxth	r3, r3
 80048d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				}
				//DATA5,6
				//n=5,6 or i=4,5
				if((i >= 4) && (i < 6)) {
 80048da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d90c      	bls.n	80048fa <TinyBMS_UART_ReadVersionExtended+0x1ba>
 80048e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d809      	bhi.n	80048fa <TinyBMS_UART_ReadVersionExtended+0x1ba>
					versions8[i-1] = rx_buffer[n+4-1];
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	1cda      	adds	r2, r3, #3
 80048ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ec:	3b01      	subs	r3, #1
 80048ee:	4951      	ldr	r1, [pc, #324]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 80048f0:	5c8a      	ldrb	r2, [r1, r2]
 80048f2:	3358      	adds	r3, #88	; 0x58
 80048f4:	443b      	add	r3, r7
 80048f6:	f803 2c50 	strb.w	r2, [r3, #-80]
			for(uint32_t i = 0; i < numVersions; i++) {
 80048fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fc:	3301      	adds	r3, #1
 80048fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004904:	429a      	cmp	r2, r3
 8004906:	d3c6      	bcc.n	8004896 <TinyBMS_UART_ReadVersionExtended+0x156>
				}
			}

			//n=6
			CRC_reply = ((rx_buffer[n+6-1] << 8) | rx_buffer[n+5-1]);
 8004908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490a:	3305      	adds	r3, #5
 800490c:	4a49      	ldr	r2, [pc, #292]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	b21a      	sxth	r2, r3
 8004914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004916:	3304      	adds	r3, #4
 8004918:	4946      	ldr	r1, [pc, #280]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 800491a:	5ccb      	ldrb	r3, [r1, r3]
 800491c:	b21b      	sxth	r3, r3
 800491e:	4313      	orrs	r3, r2
 8004920:	b21b      	sxth	r3, r3
 8004922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			CRC_calc = CRC16(rx_buffer, PL+3); //Calc CRC for bytes (PL+3 or Payload Value plus Bytes 1,2,3)) of OK response
 8004926:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800492a:	b29b      	uxth	r3, r3
 800492c:	3303      	adds	r3, #3
 800492e:	b29b      	uxth	r3, r3
 8004930:	4619      	mov	r1, r3
 8004932:	4840      	ldr	r0, [pc, #256]	; (8004a34 <TinyBMS_UART_ReadVersionExtended+0x2f4>)
 8004934:	f002 fa88 	bl	8006e48 <CRC16>
 8004938:	4603      	mov	r3, r0
 800493a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			if(CRC_calc == CRC_reply) {
 800493e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004946:	429a      	cmp	r2, r3
 8004948:	f040 80bb 	bne.w	8004ac2 <TinyBMS_UART_ReadVersionExtended+0x382>
				printf("CRC pass\r\n");
 800494c:	483c      	ldr	r0, [pc, #240]	; (8004a40 <TinyBMS_UART_ReadVersionExtended+0x300>)
 800494e:	f009 fbed 	bl	800e12c <puts>

				//Print the TinyBMS Versions (Hardware, Hardware Changes, Firmware Public, Firmware Internal, Bootloader, or Register Map)
				printf("************ TinyBMS Extended Versions ************\r\n");
 8004952:	483f      	ldr	r0, [pc, #252]	; (8004a50 <TinyBMS_UART_ReadVersionExtended+0x310>)
 8004954:	f009 fbea 	bl	800e12c <puts>

				switch(PL) {
 8004958:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800495c:	3b01      	subs	r3, #1
 800495e:	2b06      	cmp	r3, #6
 8004960:	f200 80a2 	bhi.w	8004aa8 <TinyBMS_UART_ReadVersionExtended+0x368>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <TinyBMS_UART_ReadVersionExtended+0x22c>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004989 	.word	0x08004989
 8004970:	08004995 	.word	0x08004995
 8004974:	080049ab 	.word	0x080049ab
 8004978:	08004aa9 	.word	0x08004aa9
 800497c:	080049cb 	.word	0x080049cb
 8004980:	080049f7 	.word	0x080049f7
 8004984:	08004a69 	.word	0x08004a69
				case 1:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8004988:	7a3b      	ldrb	r3, [r7, #8]
 800498a:	4619      	mov	r1, r3
 800498c:	4831      	ldr	r0, [pc, #196]	; (8004a54 <TinyBMS_UART_ReadVersionExtended+0x314>)
 800498e:	f009 fb47 	bl	800e020 <iprintf>
					break;
 8004992:	e08f      	b.n	8004ab4 <TinyBMS_UART_ReadVersionExtended+0x374>
				case 2:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8004994:	7a3b      	ldrb	r3, [r7, #8]
 8004996:	4619      	mov	r1, r3
 8004998:	482e      	ldr	r0, [pc, #184]	; (8004a54 <TinyBMS_UART_ReadVersionExtended+0x314>)
 800499a:	f009 fb41 	bl	800e020 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 800499e:	7a7b      	ldrb	r3, [r7, #9]
 80049a0:	4619      	mov	r1, r3
 80049a2:	482d      	ldr	r0, [pc, #180]	; (8004a58 <TinyBMS_UART_ReadVersionExtended+0x318>)
 80049a4:	f009 fb3c 	bl	800e020 <iprintf>
					break;
 80049a8:	e084      	b.n	8004ab4 <TinyBMS_UART_ReadVersionExtended+0x374>
				case 3:
					printf("Hardware Version: %u\r\n", versions8[0]);
 80049aa:	7a3b      	ldrb	r3, [r7, #8]
 80049ac:	4619      	mov	r1, r3
 80049ae:	4829      	ldr	r0, [pc, #164]	; (8004a54 <TinyBMS_UART_ReadVersionExtended+0x314>)
 80049b0:	f009 fb36 	bl	800e020 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 80049b4:	7a7b      	ldrb	r3, [r7, #9]
 80049b6:	4619      	mov	r1, r3
 80049b8:	4827      	ldr	r0, [pc, #156]	; (8004a58 <TinyBMS_UART_ReadVersionExtended+0x318>)
 80049ba:	f009 fb31 	bl	800e020 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 80049be:	7abb      	ldrb	r3, [r7, #10]
 80049c0:	4619      	mov	r1, r3
 80049c2:	4826      	ldr	r0, [pc, #152]	; (8004a5c <TinyBMS_UART_ReadVersionExtended+0x31c>)
 80049c4:	f009 fb2c 	bl	800e020 <iprintf>
					break;
 80049c8:	e074      	b.n	8004ab4 <TinyBMS_UART_ReadVersionExtended+0x374>
				case 5:
					printf("Hardware Version: %u\r\n", versions8[0]);
 80049ca:	7a3b      	ldrb	r3, [r7, #8]
 80049cc:	4619      	mov	r1, r3
 80049ce:	4821      	ldr	r0, [pc, #132]	; (8004a54 <TinyBMS_UART_ReadVersionExtended+0x314>)
 80049d0:	f009 fb26 	bl	800e020 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 80049d4:	7a7b      	ldrb	r3, [r7, #9]
 80049d6:	4619      	mov	r1, r3
 80049d8:	481f      	ldr	r0, [pc, #124]	; (8004a58 <TinyBMS_UART_ReadVersionExtended+0x318>)
 80049da:	f009 fb21 	bl	800e020 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 80049de:	7abb      	ldrb	r3, [r7, #10]
 80049e0:	4619      	mov	r1, r3
 80049e2:	481e      	ldr	r0, [pc, #120]	; (8004a5c <TinyBMS_UART_ReadVersionExtended+0x31c>)
 80049e4:	f009 fb1c 	bl	800e020 <iprintf>
					printf("Firmware Internal Version: %u\r\n", version16);
 80049e8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80049ec:	4619      	mov	r1, r3
 80049ee:	481c      	ldr	r0, [pc, #112]	; (8004a60 <TinyBMS_UART_ReadVersionExtended+0x320>)
 80049f0:	f009 fb16 	bl	800e020 <iprintf>
					break;
 80049f4:	e05e      	b.n	8004ab4 <TinyBMS_UART_ReadVersionExtended+0x374>
				case 6:
					printf("Hardware Version: %u\r\n", versions8[0]);
 80049f6:	7a3b      	ldrb	r3, [r7, #8]
 80049f8:	4619      	mov	r1, r3
 80049fa:	4816      	ldr	r0, [pc, #88]	; (8004a54 <TinyBMS_UART_ReadVersionExtended+0x314>)
 80049fc:	f009 fb10 	bl	800e020 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8004a00:	7a7b      	ldrb	r3, [r7, #9]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4814      	ldr	r0, [pc, #80]	; (8004a58 <TinyBMS_UART_ReadVersionExtended+0x318>)
 8004a06:	f009 fb0b 	bl	800e020 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 8004a0a:	7abb      	ldrb	r3, [r7, #10]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4813      	ldr	r0, [pc, #76]	; (8004a5c <TinyBMS_UART_ReadVersionExtended+0x31c>)
 8004a10:	f009 fb06 	bl	800e020 <iprintf>
					printf("Firmware Internal Version: %u\r\n", version16);
 8004a14:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4811      	ldr	r0, [pc, #68]	; (8004a60 <TinyBMS_UART_ReadVersionExtended+0x320>)
 8004a1c:	f009 fb00 	bl	800e020 <iprintf>
					printf("Bootloader Version: %u\r\n", versions8[3]);
 8004a20:	7afb      	ldrb	r3, [r7, #11]
 8004a22:	4619      	mov	r1, r3
 8004a24:	480f      	ldr	r0, [pc, #60]	; (8004a64 <TinyBMS_UART_ReadVersionExtended+0x324>)
 8004a26:	f009 fafb 	bl	800e020 <iprintf>
					break;
 8004a2a:	e043      	b.n	8004ab4 <TinyBMS_UART_ReadVersionExtended+0x374>
 8004a2c:	0801234c 	.word	0x0801234c
 8004a30:	20000228 	.word	0x20000228
 8004a34:	2000037c 	.word	0x2000037c
 8004a38:	08011364 	.word	0x08011364
 8004a3c:	2000037e 	.word	0x2000037e
 8004a40:	08011280 	.word	0x08011280
 8004a44:	0801128c 	.word	0x0801128c
 8004a48:	08011380 	.word	0x08011380
 8004a4c:	2000037f 	.word	0x2000037f
 8004a50:	08012370 	.word	0x08012370
 8004a54:	08012284 	.word	0x08012284
 8004a58:	0801229c 	.word	0x0801229c
 8004a5c:	080122bc 	.word	0x080122bc
 8004a60:	080122dc 	.word	0x080122dc
 8004a64:	080123a8 	.word	0x080123a8
				case 7:
					printf("Hardware Version: %u\r\n", versions8[0]);
 8004a68:	7a3b      	ldrb	r3, [r7, #8]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4820      	ldr	r0, [pc, #128]	; (8004af0 <TinyBMS_UART_ReadVersionExtended+0x3b0>)
 8004a6e:	f009 fad7 	bl	800e020 <iprintf>
					printf("Hardware Changes Version: %u\r\n", versions8[1]);
 8004a72:	7a7b      	ldrb	r3, [r7, #9]
 8004a74:	4619      	mov	r1, r3
 8004a76:	481f      	ldr	r0, [pc, #124]	; (8004af4 <TinyBMS_UART_ReadVersionExtended+0x3b4>)
 8004a78:	f009 fad2 	bl	800e020 <iprintf>
					printf("Firmware Public Version: %u\r\n", versions8[2]);
 8004a7c:	7abb      	ldrb	r3, [r7, #10]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	481d      	ldr	r0, [pc, #116]	; (8004af8 <TinyBMS_UART_ReadVersionExtended+0x3b8>)
 8004a82:	f009 facd 	bl	800e020 <iprintf>
					printf("Firmware Internal Version: %u\r\n", version16);
 8004a86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	481b      	ldr	r0, [pc, #108]	; (8004afc <TinyBMS_UART_ReadVersionExtended+0x3bc>)
 8004a8e:	f009 fac7 	bl	800e020 <iprintf>
					printf("Bootloader Version: %u\r\n", versions8[3]);
 8004a92:	7afb      	ldrb	r3, [r7, #11]
 8004a94:	4619      	mov	r1, r3
 8004a96:	481a      	ldr	r0, [pc, #104]	; (8004b00 <TinyBMS_UART_ReadVersionExtended+0x3c0>)
 8004a98:	f009 fac2 	bl	800e020 <iprintf>
					printf("Register Map Version: %u\r\n", versions8[4]);
 8004a9c:	7b3b      	ldrb	r3, [r7, #12]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4818      	ldr	r0, [pc, #96]	; (8004b04 <TinyBMS_UART_ReadVersionExtended+0x3c4>)
 8004aa2:	f009 fabd 	bl	800e020 <iprintf>
					break;
 8004aa6:	e005      	b.n	8004ab4 <TinyBMS_UART_ReadVersionExtended+0x374>
				default:
					printf("Invalid Payload Value\r\n");
 8004aa8:	4817      	ldr	r0, [pc, #92]	; (8004b08 <TinyBMS_UART_ReadVersionExtended+0x3c8>)
 8004aaa:	f009 fb3f 	bl	800e12c <puts>
					return retval;
 8004aae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ab2:	e019      	b.n	8004ae8 <TinyBMS_UART_ReadVersionExtended+0x3a8>
				}
				printf("----------------------------------------\r\n");
 8004ab4:	4815      	ldr	r0, [pc, #84]	; (8004b0c <TinyBMS_UART_ReadVersionExtended+0x3cc>)
 8004ab6:	f009 fb39 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004ac0:	e010      	b.n	8004ae4 <TinyBMS_UART_ReadVersionExtended+0x3a4>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8004ac2:	4813      	ldr	r0, [pc, #76]	; (8004b10 <TinyBMS_UART_ReadVersionExtended+0x3d0>)
 8004ac4:	f009 fb32 	bl	800e12c <puts>
 8004ac8:	e00c      	b.n	8004ae4 <TinyBMS_UART_ReadVersionExtended+0x3a4>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x1F but was 0x%02X\r\n", rx_buffer[1]);
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <TinyBMS_UART_ReadVersionExtended+0x3d4>)
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4811      	ldr	r0, [pc, #68]	; (8004b18 <TinyBMS_UART_ReadVersionExtended+0x3d8>)
 8004ad2:	f009 faa5 	bl	800e020 <iprintf>
 8004ad6:	e005      	b.n	8004ae4 <TinyBMS_UART_ReadVersionExtended+0x3a4>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <TinyBMS_UART_ReadVersionExtended+0x3d4>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	4619      	mov	r1, r3
 8004ade:	480f      	ldr	r0, [pc, #60]	; (8004b1c <TinyBMS_UART_ReadVersionExtended+0x3dc>)
 8004ae0:	f009 fa9e 	bl	800e020 <iprintf>
	}

	return retval;
 8004ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3758      	adds	r7, #88	; 0x58
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	08012284 	.word	0x08012284
 8004af4:	0801229c 	.word	0x0801229c
 8004af8:	080122bc 	.word	0x080122bc
 8004afc:	080122dc 	.word	0x080122dc
 8004b00:	080123a8 	.word	0x080123a8
 8004b04:	080123c4 	.word	0x080123c4
 8004b08:	080122fc 	.word	0x080122fc
 8004b0c:	08011480 	.word	0x08011480
 8004b10:	080114ac 	.word	0x080114ac
 8004b14:	2000037c 	.word	0x2000037c
 8004b18:	080123e0 	.word	0x080123e0
 8004b1c:	08011318 	.word	0x08011318

08004b20 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft>:
 *
 * 						 	 DATA1 - Speed (km/h)
 * 						 	 DATA2 - Distance left until empty battery (km)
 * 						 	 DATA3 - Estimated time left until empty battery (s)
 */
uint8_t TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft(UART_HandleTypeDef *huart) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b096      	sub	sp, #88	; 0x58
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft\r\n");
 8004b28:	4881      	ldr	r0, [pc, #516]	; (8004d30 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x210>)
 8004b2a:	f009 faff 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8004b2e:	23ff      	movs	r3, #255	; 0xff
 8004b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint8_t tx_buffer[50];
	uint8_t CRC_LSB = 0, CRC_MSB = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint16_t CRC_request = 0, CRC_calc = 0, CRC_reply = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004b46:	2300      	movs	r3, #0
 8004b48:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	/* Request to BMS */
	tx_buffer[0] = 0xAA;
 8004b52:	23aa      	movs	r3, #170	; 0xaa
 8004b54:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = UART_TBMS_READ_SPEED_DISTANCETIME_LEFT;
 8004b56:	2320      	movs	r3, #32
 8004b58:	727b      	strb	r3, [r7, #9]

	CRC_request = CRC16(tx_buffer, 2);
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	2102      	movs	r1, #2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f002 f971 	bl	8006e48 <CRC16>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	CRC_LSB = (CRC_request & 0xFF);
 8004b6c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004b70:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	CRC_MSB = ((CRC_request >> 8) & 0xFF);
 8004b74:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	printf("CRC_request: 0x%04X\r\n", CRC_request);
	printf("CRC_LSB: 0x%02X\r\n", CRC_LSB);
	printf("CRC_MSB: 0x%02X\r\n", CRC_MSB);
	*/

	tx_buffer[2] = CRC_LSB;
 8004b80:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004b84:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = CRC_MSB;
 8004b86:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004b8a:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 4);
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	2204      	movs	r2, #4
 8004b92:	4619      	mov	r1, r3
 8004b94:	4867      	ldr	r0, [pc, #412]	; (8004d34 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8004b96:	f007 fa93 	bl	800c0c0 <HAL_UART_Transmit_IT>

	/* Response from BMS */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 2); //read bytes 1-2 to check OK/ERROR
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	4966      	ldr	r1, [pc, #408]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004b9e:	4865      	ldr	r0, [pc, #404]	; (8004d34 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8004ba0:	f007 fafc 	bl	800c19c <HAL_UART_Receive_IT>

	if(rx_buffer[0] == 0xAA) {
 8004ba4:	4b64      	ldr	r3, [pc, #400]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2baa      	cmp	r3, #170	; 0xaa
 8004baa:	f040 80b5 	bne.w	8004d18 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1f8>

		//[ERROR]
		if(rx_buffer[1] == NACK) {
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d130      	bne.n	8004c18 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0xf8>
			printf("Response from BMS [ERROR]\r\n");
 8004bb6:	4861      	ldr	r0, [pc, #388]	; (8004d3c <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x21c>)
 8004bb8:	f009 fab8 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[2], 4); //read bytes 3-6 from ERROR reply
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	4960      	ldr	r1, [pc, #384]	; (8004d40 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x220>)
 8004bc0:	485c      	ldr	r0, [pc, #368]	; (8004d34 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8004bc2:	f007 faeb 	bl	800c19c <HAL_UART_Receive_IT>

			uint8_t error = rx_buffer[3];
 8004bc6:	4b5c      	ldr	r3, [pc, #368]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004bc8:	78db      	ldrb	r3, [r3, #3]
 8004bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			CRC_reply = ((rx_buffer[5] << 8) | rx_buffer[4]);
 8004bce:	4b5a      	ldr	r3, [pc, #360]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004bd0:	795b      	ldrb	r3, [r3, #5]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	b21a      	sxth	r2, r3
 8004bd6:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004bd8:	791b      	ldrb	r3, [r3, #4]
 8004bda:	b21b      	sxth	r3, r3
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	b21b      	sxth	r3, r3
 8004be0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			CRC_calc = CRC16(rx_buffer, 4); //Calc CRC for bytes 1-4 of ERROR response
 8004be4:	2104      	movs	r1, #4
 8004be6:	4854      	ldr	r0, [pc, #336]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004be8:	f002 f92e 	bl	8006e48 <CRC16>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

			if(CRC_calc == CRC_reply) {
 8004bf2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d103      	bne.n	8004c06 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0xe6>
				printf("CRC pass\r\n");
 8004bfe:	4851      	ldr	r0, [pc, #324]	; (8004d44 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x224>)
 8004c00:	f009 fa94 	bl	800e12c <puts>
 8004c04:	e002      	b.n	8004c0c <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0xec>
			} else {
				printf("CRC fail in BMS ERROR\r\n");
 8004c06:	4850      	ldr	r0, [pc, #320]	; (8004d48 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x228>)
 8004c08:	f009 fa90 	bl	800e12c <puts>
			}
			reportBMSError(error);
 8004c0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c10:	4618      	mov	r0, r3
 8004c12:	f002 f8f7 	bl	8006e04 <reportBMSError>
 8004c16:	e085      	b.n	8004d24 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x204>

		//[OK]
		} else if(rx_buffer[1] == UART_TBMS_READ_SPEED_DISTANCETIME_LEFT) {
 8004c18:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d174      	bne.n	8004d0a <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ea>
			printf("Response from BMS [OK]\r\n");
 8004c20:	484a      	ldr	r0, [pc, #296]	; (8004d4c <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x22c>)
 8004c22:	f009 fa83 	bl	800e12c <puts>

			HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_buffer[3], 14); //read from byte 3 to 16 from OK reply
 8004c26:	220e      	movs	r2, #14
 8004c28:	4949      	ldr	r1, [pc, #292]	; (8004d50 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x230>)
 8004c2a:	4842      	ldr	r0, [pc, #264]	; (8004d34 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8004c2c:	f007 fab6 	bl	800c19c <HAL_UART_Receive_IT>

			//DATA1 - Speed (km/h)
			uint32_t DATA1 = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8004c30:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c32:	795b      	ldrb	r3, [r3, #5]
 8004c34:	061a      	lsls	r2, r3, #24
 8004c36:	4b40      	ldr	r3, [pc, #256]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c38:	791b      	ldrb	r3, [r3, #4]
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c40:	78db      	ldrb	r3, [r3, #3]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	4313      	orrs	r3, r2
 8004c46:	4a3c      	ldr	r2, [pc, #240]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c48:	7892      	ldrb	r2, [r2, #2]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	64bb      	str	r3, [r7, #72]	; 0x48
			float speed = DATA1;
 8004c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c58:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

			//DATA2 - Distance Left Until Empty Battery (km)
			uint32_t distanceLeftUntilEmpty = ((rx_buffer[9] << 24) | (rx_buffer[8] << 16) | (rx_buffer[7] << 8) | (rx_buffer[6]));
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c5e:	7a5b      	ldrb	r3, [r3, #9]
 8004c60:	061a      	lsls	r2, r3, #24
 8004c62:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c64:	7a1b      	ldrb	r3, [r3, #8]
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	4b33      	ldr	r3, [pc, #204]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c6c:	79db      	ldrb	r3, [r3, #7]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	4313      	orrs	r3, r2
 8004c72:	4a31      	ldr	r2, [pc, #196]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c74:	7992      	ldrb	r2, [r2, #6]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	643b      	str	r3, [r7, #64]	; 0x40

			//DATA3 - Estimated Time Left Until Empty Battery (seconds)
			uint32_t timeLeftUntilEmpty = ((rx_buffer[13] << 24) | (rx_buffer[12] << 16) | (rx_buffer[11] << 8) | (rx_buffer[10]));
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c7c:	7b5b      	ldrb	r3, [r3, #13]
 8004c7e:	061a      	lsls	r2, r3, #24
 8004c80:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c82:	7b1b      	ldrb	r3, [r3, #12]
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	431a      	orrs	r2, r3
 8004c88:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c8a:	7adb      	ldrb	r3, [r3, #11]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c92:	7a92      	ldrb	r2, [r2, #10]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c

			CRC_reply = ((rx_buffer[15] << 8) | rx_buffer[14]);
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004c9a:	7bdb      	ldrb	r3, [r3, #15]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	b21a      	sxth	r2, r3
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004ca2:	7b9b      	ldrb	r3, [r3, #14]
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			CRC_calc = CRC16(rx_buffer, 14);
 8004cae:	210e      	movs	r1, #14
 8004cb0:	4821      	ldr	r0, [pc, #132]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004cb2:	f002 f8c9 	bl	8006e48 <CRC16>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

			if(CRC_calc == CRC_reply) {
 8004cbc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d11c      	bne.n	8004d02 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1e2>
				printf("CRC pass\r\n");
 8004cc8:	481e      	ldr	r0, [pc, #120]	; (8004d44 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x224>)
 8004cca:	f009 fa2f 	bl	800e12c <puts>

				//Print the TinyBMS Versions (Hardware, Hardware Changes, Firmware Public, Firmware Internal, Bootloader, or Register Map)
				printf("************ TinyBMS Calculated Speed, Distance & Estimated Time Left Until Empty ************\r\n");
 8004cce:	4821      	ldr	r0, [pc, #132]	; (8004d54 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x234>)
 8004cd0:	f009 fa2c 	bl	800e12c <puts>
				printf("Speed: %f (km/h)\r\n", speed);
 8004cd4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004cd6:	f7fb fc57 	bl	8000588 <__aeabi_f2d>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	481e      	ldr	r0, [pc, #120]	; (8004d58 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x238>)
 8004ce0:	f009 f99e 	bl	800e020 <iprintf>
				printf("Distance left until empty: %lu (km)\r\n", distanceLeftUntilEmpty);
 8004ce4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ce6:	481d      	ldr	r0, [pc, #116]	; (8004d5c <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x23c>)
 8004ce8:	f009 f99a 	bl	800e020 <iprintf>
				printf("Estimated time left until empty: %lu (s)\r\n", timeLeftUntilEmpty);
 8004cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cee:	481c      	ldr	r0, [pc, #112]	; (8004d60 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x240>)
 8004cf0:	f009 f996 	bl	800e020 <iprintf>
				printf("----------------------------------------\r\n");
 8004cf4:	481b      	ldr	r0, [pc, #108]	; (8004d64 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x244>)
 8004cf6:	f009 fa19 	bl	800e12c <puts>
				retval = CMD_SUCCESS;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004d00:	e010      	b.n	8004d24 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x204>

			} else {
				printf("CRC fail in BMS OK\r\n");
 8004d02:	4819      	ldr	r0, [pc, #100]	; (8004d68 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x248>)
 8004d04:	f009 fa12 	bl	800e12c <puts>
 8004d08:	e00c      	b.n	8004d24 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x204>
			}

		} else {
			printf("Error: Byte 2 should be 0x00 or 0x20 but was 0x%02X\r\n", rx_buffer[1]);
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4816      	ldr	r0, [pc, #88]	; (8004d6c <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x24c>)
 8004d12:	f009 f985 	bl	800e020 <iprintf>
 8004d16:	e005      	b.n	8004d24 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x204>
		}

	} else {
		printf("Error: Byte 1 should be 0xAA but was 0x%02X\r\n", rx_buffer[0]);
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4814      	ldr	r0, [pc, #80]	; (8004d70 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft+0x250>)
 8004d20:	f009 f97e 	bl	800e020 <iprintf>
	}

	return retval;
 8004d24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3758      	adds	r7, #88	; 0x58
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08012418 	.word	0x08012418
 8004d34:	20000228 	.word	0x20000228
 8004d38:	2000037c 	.word	0x2000037c
 8004d3c:	08011364 	.word	0x08011364
 8004d40:	2000037e 	.word	0x2000037e
 8004d44:	08011280 	.word	0x08011280
 8004d48:	0801128c 	.word	0x0801128c
 8004d4c:	08011380 	.word	0x08011380
 8004d50:	2000037f 	.word	0x2000037f
 8004d54:	0801244c 	.word	0x0801244c
 8004d58:	080124ac 	.word	0x080124ac
 8004d5c:	080124c0 	.word	0x080124c0
 8004d60:	080124e8 	.word	0x080124e8
 8004d64:	08011480 	.word	0x08011480
 8004d68:	080114ac 	.word	0x080114ac
 8004d6c:	08012514 	.word	0x08012514
 8004d70:	08011318 	.word	0x08011318

08004d74 <TinyBMS_CAN_ResetClearEventsStatistics>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  Options: 0x01 - Clear Events , 0x02 - Clear Statistics , 0x05 - Reset BMS
 *
 */
uint8_t TinyBMS_CAN_ResetClearEventsStatistics(CAN_HandleTypeDef *hcan, uint8_t option) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08c      	sub	sp, #48	; 0x30
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
	printf("TinyBMS_CAN_ResetClearEventsStatistics\r\n");
 8004d80:	484d      	ldr	r0, [pc, #308]	; (8004eb8 <TinyBMS_CAN_ResetClearEventsStatistics+0x144>)
 8004d82:	f009 f9d3 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8004d86:	23ff      	movs	r3, #255	; 0xff
 8004d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	switch(option) {
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d00e      	beq.n	8004db0 <TinyBMS_CAN_ResetClearEventsStatistics+0x3c>
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	dc10      	bgt.n	8004db8 <TinyBMS_CAN_ResetClearEventsStatistics+0x44>
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d002      	beq.n	8004da0 <TinyBMS_CAN_ResetClearEventsStatistics+0x2c>
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d004      	beq.n	8004da8 <TinyBMS_CAN_ResetClearEventsStatistics+0x34>
 8004d9e:	e00b      	b.n	8004db8 <TinyBMS_CAN_ResetClearEventsStatistics+0x44>
	case TINYBMS_CLEAR_EVENTS:
		printf("0x01 Clear Events\r\n");
 8004da0:	4846      	ldr	r0, [pc, #280]	; (8004ebc <TinyBMS_CAN_ResetClearEventsStatistics+0x148>)
 8004da2:	f009 f9c3 	bl	800e12c <puts>
		break;
 8004da6:	e00d      	b.n	8004dc4 <TinyBMS_CAN_ResetClearEventsStatistics+0x50>
	case TINYBMS_CLEAR_STATS:
		printf("0x02 Clear Statistics\r\n");
 8004da8:	4845      	ldr	r0, [pc, #276]	; (8004ec0 <TinyBMS_CAN_ResetClearEventsStatistics+0x14c>)
 8004daa:	f009 f9bf 	bl	800e12c <puts>
		break;
 8004dae:	e009      	b.n	8004dc4 <TinyBMS_CAN_ResetClearEventsStatistics+0x50>
	case TINYBMS_RESET_BMS:
		printf("0x05 Reset BMS\r\n");
 8004db0:	4844      	ldr	r0, [pc, #272]	; (8004ec4 <TinyBMS_CAN_ResetClearEventsStatistics+0x150>)
 8004db2:	f009 f9bb 	bl	800e12c <puts>
		break;
 8004db6:	e005      	b.n	8004dc4 <TinyBMS_CAN_ResetClearEventsStatistics+0x50>
	default:
		printf("Invalid option\r\n");
 8004db8:	4843      	ldr	r0, [pc, #268]	; (8004ec8 <TinyBMS_CAN_ResetClearEventsStatistics+0x154>)
 8004dba:	f009 f9b7 	bl	800e12c <puts>
		return retval;
 8004dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dc2:	e074      	b.n	8004eae <TinyBMS_CAN_ResetClearEventsStatistics+0x13a>
	}

	uint8_t tx_msg[8] = {0x02, option, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	723b      	strb	r3, [r7, #8]
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	727b      	strb	r3, [r7, #9]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	72bb      	strb	r3, [r7, #10]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	72fb      	strb	r3, [r7, #11]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	733b      	strb	r3, [r7, #12]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	737b      	strb	r3, [r7, #13]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73bb      	strb	r3, [r7, #14]
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 2;
 8004de4:	2302      	movs	r3, #2
 8004de6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8004dea:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4619      	mov	r1, r3
 8004df4:	2000      	movs	r0, #0
 8004df6:	f004 fa4b 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8004dfa:	e04f      	b.n	8004e9c <TinyBMS_CAN_ResetClearEventsStatistics+0x128>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8004dfc:	f107 0210 	add.w	r2, r7, #16
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8004e02:	2100      	movs	r1, #0
 8004e04:	4832      	ldr	r0, [pc, #200]	; (8004ed0 <TinyBMS_CAN_ResetClearEventsStatistics+0x15c>)
 8004e06:	f005 f988 	bl	800a11a <HAL_CAN_GetRxMessage>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <TinyBMS_CAN_ResetClearEventsStatistics+0xa0>
			Error_Handler();
 8004e10:	f004 fbb6 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8004e14:	f240 4103 	movw	r1, #1027	; 0x403
 8004e18:	482d      	ldr	r0, [pc, #180]	; (8004ed0 <TinyBMS_CAN_ResetClearEventsStatistics+0x15c>)
 8004e1a:	f005 fab8 	bl	800a38e <HAL_CAN_ActivateNotification>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <TinyBMS_CAN_ResetClearEventsStatistics+0xb4>
			Error_Handler();
 8004e24:	f004 fbac 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <TinyBMS_CAN_ResetClearEventsStatistics+0x160>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d134      	bne.n	8004e9c <TinyBMS_CAN_ResetClearEventsStatistics+0x128>
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d131      	bne.n	8004e9c <TinyBMS_CAN_ResetClearEventsStatistics+0x128>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8004e38:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d115      	bne.n	8004e6c <TinyBMS_CAN_ResetClearEventsStatistics+0xf8>
				printf("Response from BMS [Error]\r\n");
 8004e40:	4825      	ldr	r0, [pc, #148]	; (8004ed8 <TinyBMS_CAN_ResetClearEventsStatistics+0x164>)
 8004e42:	f009 f973 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8004e46:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8004e4e:	789b      	ldrb	r3, [r3, #2]
 8004e50:	461a      	mov	r2, r3
 8004e52:	4822      	ldr	r0, [pc, #136]	; (8004edc <TinyBMS_CAN_ResetClearEventsStatistics+0x168>)
 8004e54:	f009 f8e4 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8004e58:	4b1c      	ldr	r3, [pc, #112]	; (8004ecc <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8004e5a:	789b      	ldrb	r3, [r3, #2]
 8004e5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				reportBMSError(error);
 8004e60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 ffcd 	bl	8006e04 <reportBMSError>
 8004e6a:	e017      	b.n	8004e9c <TinyBMS_CAN_ResetClearEventsStatistics+0x128>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_RESET_CLEAR_EVENTS_STATS)) {
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d110      	bne.n	8004e96 <TinyBMS_CAN_ResetClearEventsStatistics+0x122>
 8004e74:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d10c      	bne.n	8004e96 <TinyBMS_CAN_ResetClearEventsStatistics+0x122>
				printf("Response from BMS [OK]\r\n");
 8004e7c:	4818      	ldr	r0, [pc, #96]	; (8004ee0 <TinyBMS_CAN_ResetClearEventsStatistics+0x16c>)
 8004e7e:	f009 f955 	bl	800e12c <puts>
				printf("CAN_TBMS_RESET_CLEAR_EVENTS_STATS | CMD: 0x%02X\r\n", rx_buffer[1]);
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <TinyBMS_CAN_ResetClearEventsStatistics+0x158>)
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	4619      	mov	r1, r3
 8004e88:	4816      	ldr	r0, [pc, #88]	; (8004ee4 <TinyBMS_CAN_ResetClearEventsStatistics+0x170>)
 8004e8a:	f009 f8c9 	bl	800e020 <iprintf>
				retval = CMD_SUCCESS;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e94:	e002      	b.n	8004e9c <TinyBMS_CAN_ResetClearEventsStatistics+0x128>

			} else {
				printf("Data Corruption\r\n");
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <TinyBMS_CAN_ResetClearEventsStatistics+0x174>)
 8004e98:	f009 f948 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	480c      	ldr	r0, [pc, #48]	; (8004ed0 <TinyBMS_CAN_ResetClearEventsStatistics+0x15c>)
 8004ea0:	f005 fa4d 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1a8      	bne.n	8004dfc <TinyBMS_CAN_ResetClearEventsStatistics+0x88>
			}
		}
	}

	return retval;
 8004eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3730      	adds	r7, #48	; 0x30
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	0801254c 	.word	0x0801254c
 8004ebc:	08012574 	.word	0x08012574
 8004ec0:	08012588 	.word	0x08012588
 8004ec4:	080125a0 	.word	0x080125a0
 8004ec8:	080125b0 	.word	0x080125b0
 8004ecc:	2000037c 	.word	0x2000037c
 8004ed0:	20000200 	.word	0x20000200
 8004ed4:	20000004 	.word	0x20000004
 8004ed8:	080125c0 	.word	0x080125c0
 8004edc:	080125dc 	.word	0x080125dc
 8004ee0:	08011380 	.word	0x08011380
 8004ee4:	08012600 	.word	0x08012600
 8004ee8:	08012634 	.word	0x08012634

08004eec <TinyBMS_CAN_ReadRegBlock>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated
 * 						   by malloc(size_t size).
 */
uint8_t TinyBMS_CAN_ReadRegBlock(CAN_HandleTypeDef *hcan, uint8_t rl, uint16_t addr) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	; 0x38
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	803b      	strh	r3, [r7, #0]
	printf("TinyBMS_CAN_ReadRegBlock\r\n");
 8004efc:	4870      	ldr	r0, [pc, #448]	; (80050c0 <TinyBMS_CAN_ReadRegBlock+0x1d4>)
 8004efe:	f009 f915 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8004f02:	23ff      	movs	r3, #255	; 0xff
 8004f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t addr_MSB = 0, addr_LSB = 0, msg_count = 1, pl = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint16_t data = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	863b      	strh	r3, [r7, #48]	; 0x30

	/* Request to BMS */
	//Check if number of registers to write is within bounds
	if((rl <= 0) || (rl > 0x7F)) {
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <TinyBMS_CAN_ReadRegBlock+0x46>
 8004f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da05      	bge.n	8004f3e <TinyBMS_CAN_ReadRegBlock+0x52>
		retval = CMD_FAILURE;
 8004f32:	23ff      	movs	r3, #255	; 0xff
 8004f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return retval;
 8004f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3c:	e0bb      	b.n	80050b6 <TinyBMS_CAN_ReadRegBlock+0x1ca>
	}

	//Starting address of Register Block
	addr_MSB = ((addr >> 8) & 0xFF);
 8004f3e:	883b      	ldrh	r3, [r7, #0]
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	addr_LSB = (addr & 0xFF);
 8004f48:	883b      	ldrh	r3, [r7, #0]
 8004f4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t tx_msg[8] = {CAN_TBMS_READ_REG_BLOCK, addr_MSB, addr_LSB, 0x00, rl, 0x00, 0x00, 0x00};
 8004f4e:	2303      	movs	r3, #3
 8004f50:	723b      	strb	r3, [r7, #8]
 8004f52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004f56:	727b      	strb	r3, [r7, #9]
 8004f58:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f5c:	72bb      	strb	r3, [r7, #10]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	72fb      	strb	r3, [r7, #11]
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	733b      	strb	r3, [r7, #12]
 8004f66:	2300      	movs	r3, #0
 8004f68:	737b      	strb	r3, [r7, #13]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73bb      	strb	r3, [r7, #14]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 5;
 8004f72:	2305      	movs	r3, #5
 8004f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8004f78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f7c:	f107 0308 	add.w	r3, r7, #8
 8004f80:	4619      	mov	r1, r3
 8004f82:	2000      	movs	r0, #0
 8004f84:	f004 f984 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8004f88:	e08b      	b.n	80050a2 <TinyBMS_CAN_ReadRegBlock+0x1b6>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8004f8a:	f107 0210 	add.w	r2, r7, #16
 8004f8e:	4b4d      	ldr	r3, [pc, #308]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8004f90:	2100      	movs	r1, #0
 8004f92:	484d      	ldr	r0, [pc, #308]	; (80050c8 <TinyBMS_CAN_ReadRegBlock+0x1dc>)
 8004f94:	f005 f8c1 	bl	800a11a <HAL_CAN_GetRxMessage>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <TinyBMS_CAN_ReadRegBlock+0xb6>
			Error_Handler();
 8004f9e:	f004 faef 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8004fa2:	f240 4103 	movw	r1, #1027	; 0x403
 8004fa6:	4848      	ldr	r0, [pc, #288]	; (80050c8 <TinyBMS_CAN_ReadRegBlock+0x1dc>)
 8004fa8:	f005 f9f1 	bl	800a38e <HAL_CAN_ActivateNotification>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <TinyBMS_CAN_ReadRegBlock+0xca>
			Error_Handler();
 8004fb2:	f004 fae5 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4b44      	ldr	r3, [pc, #272]	; (80050cc <TinyBMS_CAN_ReadRegBlock+0x1e0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d170      	bne.n	80050a2 <TinyBMS_CAN_ReadRegBlock+0x1b6>
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d16d      	bne.n	80050a2 <TinyBMS_CAN_ReadRegBlock+0x1b6>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8004fc6:	4b3f      	ldr	r3, [pc, #252]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d115      	bne.n	8004ffa <TinyBMS_CAN_ReadRegBlock+0x10e>
				printf("Response from BMS [Error]\r\n");
 8004fce:	4840      	ldr	r0, [pc, #256]	; (80050d0 <TinyBMS_CAN_ReadRegBlock+0x1e4>)
 8004fd0:	f009 f8ac 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8004fd4:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4b3a      	ldr	r3, [pc, #232]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8004fdc:	789b      	ldrb	r3, [r3, #2]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	483c      	ldr	r0, [pc, #240]	; (80050d4 <TinyBMS_CAN_ReadRegBlock+0x1e8>)
 8004fe2:	f009 f81d 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8004fe6:	4b37      	ldr	r3, [pc, #220]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8004fe8:	789b      	ldrb	r3, [r3, #2]
 8004fea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				reportBMSError(error);
 8004fee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 ff06 	bl	8006e04 <reportBMSError>
 8004ff8:	e053      	b.n	80050a2 <TinyBMS_CAN_ReadRegBlock+0x1b6>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_REG_BLOCK)) {
 8004ffa:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d14c      	bne.n	800509c <TinyBMS_CAN_ReadRegBlock+0x1b0>
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d148      	bne.n	800509c <TinyBMS_CAN_ReadRegBlock+0x1b0>
				if(msg_count == 1) {
 800500a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800500e:	2b01      	cmp	r3, #1
 8005010:	d108      	bne.n	8005024 <TinyBMS_CAN_ReadRegBlock+0x138>
					printf("Response from BMS [OK]\r\n");
 8005012:	4831      	ldr	r0, [pc, #196]	; (80050d8 <TinyBMS_CAN_ReadRegBlock+0x1ec>)
 8005014:	f009 f88a 	bl	800e12c <puts>
					printf("CAN_TBMS_READ_REG_BLOCK | CMD: 0x%02X\r\n", rx_buffer[1]);
 8005018:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	4619      	mov	r1, r3
 800501e:	482f      	ldr	r0, [pc, #188]	; (80050dc <TinyBMS_CAN_ReadRegBlock+0x1f0>)
 8005020:	f008 fffe 	bl	800e020 <iprintf>
				}
				pl = rx_buffer[2];
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8005026:	789b      	ldrb	r3, [r3, #2]
 8005028:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				if((pl == 2) && (rx_buffer[5] == (msg_count-1))) {
 800502c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005030:	2b02      	cmp	r3, #2
 8005032:	d12f      	bne.n	8005094 <TinyBMS_CAN_ReadRegBlock+0x1a8>
 8005034:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8005036:	795b      	ldrb	r3, [r3, #5]
 8005038:	461a      	mov	r2, r3
 800503a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800503e:	3b01      	subs	r3, #1
 8005040:	429a      	cmp	r2, r3
 8005042:	d127      	bne.n	8005094 <TinyBMS_CAN_ReadRegBlock+0x1a8>
					data = ((rx_buffer[3] << 8) | rx_buffer[4]);
 8005044:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 8005046:	78db      	ldrb	r3, [r3, #3]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	b21a      	sxth	r2, r3
 800504c:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <TinyBMS_CAN_ReadRegBlock+0x1d8>)
 800504e:	791b      	ldrb	r3, [r3, #4]
 8005050:	b21b      	sxth	r3, r3
 8005052:	4313      	orrs	r3, r2
 8005054:	b21b      	sxth	r3, r3
 8005056:	863b      	strh	r3, [r7, #48]	; 0x30
					// MSG1 - Addr: 0xABCD - Data: 0x1234
					// MSG2 - Addr: 0xABDD - Data: 0x5678
					printf("MSG%u - ", msg_count);
 8005058:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800505c:	4619      	mov	r1, r3
 800505e:	4820      	ldr	r0, [pc, #128]	; (80050e0 <TinyBMS_CAN_ReadRegBlock+0x1f4>)
 8005060:	f008 ffde 	bl	800e020 <iprintf>
					printf("Addr: 0x%04X - ", (addr+(sizeof(addr)*(msg_count-1))) );
 8005064:	883a      	ldrh	r2, [r7, #0]
 8005066:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800506a:	3b01      	subs	r3, #1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	4619      	mov	r1, r3
 8005072:	481c      	ldr	r0, [pc, #112]	; (80050e4 <TinyBMS_CAN_ReadRegBlock+0x1f8>)
 8005074:	f008 ffd4 	bl	800e020 <iprintf>
					printf("Data: 0x%04X\r\n", data);
 8005078:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800507a:	4619      	mov	r1, r3
 800507c:	481a      	ldr	r0, [pc, #104]	; (80050e8 <TinyBMS_CAN_ReadRegBlock+0x1fc>)
 800507e:	f008 ffcf 	bl	800e020 <iprintf>
					msg_count++;
 8005082:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005086:	3301      	adds	r3, #1
 8005088:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					retval = CMD_SUCCESS;
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005092:	e002      	b.n	800509a <TinyBMS_CAN_ReadRegBlock+0x1ae>

				} else {
					printf("Data Corruption\r\n");
 8005094:	4815      	ldr	r0, [pc, #84]	; (80050ec <TinyBMS_CAN_ReadRegBlock+0x200>)
 8005096:	f009 f849 	bl	800e12c <puts>
				if((pl == 2) && (rx_buffer[5] == (msg_count-1))) {
 800509a:	e002      	b.n	80050a2 <TinyBMS_CAN_ReadRegBlock+0x1b6>
				}

			} else {
				printf("Data Corruption\r\n");
 800509c:	4813      	ldr	r0, [pc, #76]	; (80050ec <TinyBMS_CAN_ReadRegBlock+0x200>)
 800509e:	f009 f845 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80050a2:	2100      	movs	r1, #0
 80050a4:	4808      	ldr	r0, [pc, #32]	; (80050c8 <TinyBMS_CAN_ReadRegBlock+0x1dc>)
 80050a6:	f005 f94a 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f47f af6c 	bne.w	8004f8a <TinyBMS_CAN_ReadRegBlock+0x9e>
			}
		}
	}

	return retval;
 80050b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3738      	adds	r7, #56	; 0x38
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	08012648 	.word	0x08012648
 80050c4:	2000037c 	.word	0x2000037c
 80050c8:	20000200 	.word	0x20000200
 80050cc:	20000004 	.word	0x20000004
 80050d0:	080125c0 	.word	0x080125c0
 80050d4:	080125dc 	.word	0x080125dc
 80050d8:	08011380 	.word	0x08011380
 80050dc:	08012664 	.word	0x08012664
 80050e0:	0801268c 	.word	0x0801268c
 80050e4:	08012698 	.word	0x08012698
 80050e8:	080126a8 	.word	0x080126a8
 80050ec:	08012634 	.word	0x08012634

080050f0 <TinyBMS_CAN_WriteRegBlock>:
 *
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  A memory block is a group of one or more contiguous bytes of memory allocated by malloc(size_t size).
 */
uint8_t TinyBMS_CAN_WriteRegBlock(CAN_HandleTypeDef *hcan, uint8_t rl, uint16_t addr, uint16_t data[]) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b092      	sub	sp, #72	; 0x48
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	72fb      	strb	r3, [r7, #11]
 80050fe:	4613      	mov	r3, r2
 8005100:	813b      	strh	r3, [r7, #8]
	printf("TinyBMS_CAN_WriteRegBlock\r\n");
 8005102:	4878      	ldr	r0, [pc, #480]	; (80052e4 <TinyBMS_CAN_WriteRegBlock+0x1f4>)
 8005104:	f009 f812 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8005108:	23ff      	movs	r3, #255	; 0xff
 800510a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t tx_msg[8];
	uint8_t addr_MSB = 0, addr_LSB = 0, data_MSB = 0, data_LSB = 0, msg_count = 1;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005114:	2300      	movs	r3, #0
 8005116:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800511a:	2300      	movs	r3, #0
 800511c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005120:	2300      	movs	r3, #0
 8005122:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	/* Request to BMS */
	//Check if register block start address is within bounds
	if((addr < 0x12C) || (addr > 0x18F)) {
 800512c:	893b      	ldrh	r3, [r7, #8]
 800512e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005132:	d303      	bcc.n	800513c <TinyBMS_CAN_WriteRegBlock+0x4c>
 8005134:	893b      	ldrh	r3, [r7, #8]
 8005136:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800513a:	d302      	bcc.n	8005142 <TinyBMS_CAN_WriteRegBlock+0x52>
		return retval;
 800513c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005140:	e0cc      	b.n	80052dc <TinyBMS_CAN_WriteRegBlock+0x1ec>
	}

	//Check if number of registers to write is within bounds
	if((rl <= 0) || (rl > 0x64)) {
 8005142:	7afb      	ldrb	r3, [r7, #11]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <TinyBMS_CAN_WriteRegBlock+0x5e>
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d902      	bls.n	8005154 <TinyBMS_CAN_WriteRegBlock+0x64>
		return retval;
 800514e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005152:	e0c3      	b.n	80052dc <TinyBMS_CAN_WriteRegBlock+0x1ec>
	}

	//Starting address of Register Block
	addr_MSB = ((addr >> 8) & 0xFF);
 8005154:	893b      	ldrh	r3, [r7, #8]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	b29b      	uxth	r3, r3
 800515a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	addr_LSB = (addr & 0xFF);
 800515e:	893b      	ldrh	r3, [r7, #8]
 8005160:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	uint8_t tx_len = 8;
 8005164:	2308      	movs	r3, #8
 8005166:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	for(uint32_t i = 0; i < rl; i++) {
 800516a:	2300      	movs	r3, #0
 800516c:	643b      	str	r3, [r7, #64]	; 0x40
 800516e:	e036      	b.n	80051de <TinyBMS_CAN_WriteRegBlock+0xee>
		data_MSB = ((data[i] >> 8) & 0xFF);
 8005170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	b29b      	uxth	r3, r3
 800517e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		data_LSB = (data[i] & 0xFF);
 8005182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

		tx_msg[0] = CAN_TBMS_WRITE_REG_BLOCK;
 8005190:	2310      	movs	r3, #16
 8005192:	743b      	strb	r3, [r7, #16]
		tx_msg[1] = addr_MSB;
 8005194:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005198:	747b      	strb	r3, [r7, #17]
		tx_msg[2] = addr_LSB;
 800519a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800519e:	74bb      	strb	r3, [r7, #18]
		tx_msg[3] = 0x00;
 80051a0:	2300      	movs	r3, #0
 80051a2:	74fb      	strb	r3, [r7, #19]
		tx_msg[4] = rl;
 80051a4:	7afb      	ldrb	r3, [r7, #11]
 80051a6:	753b      	strb	r3, [r7, #20]
		tx_msg[5] = data_MSB;
 80051a8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80051ac:	757b      	strb	r3, [r7, #21]
		tx_msg[6] = data_LSB;
 80051ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80051b2:	75bb      	strb	r3, [r7, #22]
		tx_msg[7] = (msg_count-1);
 80051b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	75fb      	strb	r3, [r7, #23]
		CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80051be:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80051c2:	f107 0310 	add.w	r3, r7, #16
 80051c6:	4619      	mov	r1, r3
 80051c8:	2000      	movs	r0, #0
 80051ca:	f004 f861 	bl	8009290 <CAN1_Tx>

		//Message counter range: 1 to n vs Byte 8: 0 to n-1
		msg_count++;
 80051ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80051d2:	3301      	adds	r3, #1
 80051d4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	for(uint32_t i = 0; i < rl; i++) {
 80051d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051da:	3301      	adds	r3, #1
 80051dc:	643b      	str	r3, [r7, #64]	; 0x40
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d3c4      	bcc.n	8005170 <TinyBMS_CAN_WriteRegBlock+0x80>
	}

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80051e6:	e070      	b.n	80052ca <TinyBMS_CAN_WriteRegBlock+0x1da>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 80051e8:	f107 0218 	add.w	r2, r7, #24
 80051ec:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 80051ee:	2100      	movs	r1, #0
 80051f0:	483e      	ldr	r0, [pc, #248]	; (80052ec <TinyBMS_CAN_WriteRegBlock+0x1fc>)
 80051f2:	f004 ff92 	bl	800a11a <HAL_CAN_GetRxMessage>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <TinyBMS_CAN_WriteRegBlock+0x110>
			Error_Handler();
 80051fc:	f004 f9c0 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005200:	f240 4103 	movw	r1, #1027	; 0x403
 8005204:	4839      	ldr	r0, [pc, #228]	; (80052ec <TinyBMS_CAN_WriteRegBlock+0x1fc>)
 8005206:	f005 f8c2 	bl	800a38e <HAL_CAN_ActivateNotification>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <TinyBMS_CAN_WriteRegBlock+0x124>
			Error_Handler();
 8005210:	f004 f9b6 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <TinyBMS_CAN_WriteRegBlock+0x200>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d155      	bne.n	80052ca <TinyBMS_CAN_WriteRegBlock+0x1da>
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d152      	bne.n	80052ca <TinyBMS_CAN_WriteRegBlock+0x1da>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8005224:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d115      	bne.n	8005258 <TinyBMS_CAN_WriteRegBlock+0x168>
				printf("Response from BMS [Error]\r\n");
 800522c:	4831      	ldr	r0, [pc, #196]	; (80052f4 <TinyBMS_CAN_WriteRegBlock+0x204>)
 800522e:	f008 ff7d 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8005232:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	4619      	mov	r1, r3
 8005238:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 800523a:	789b      	ldrb	r3, [r3, #2]
 800523c:	461a      	mov	r2, r3
 800523e:	482e      	ldr	r0, [pc, #184]	; (80052f8 <TinyBMS_CAN_WriteRegBlock+0x208>)
 8005240:	f008 feee 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8005244:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 8005246:	789b      	ldrb	r3, [r3, #2]
 8005248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				reportBMSError(error);
 800524c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fdd7 	bl	8006e04 <reportBMSError>
 8005256:	e038      	b.n	80052ca <TinyBMS_CAN_WriteRegBlock+0x1da>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_WRITE_REG_BLOCK)) {
 8005258:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d131      	bne.n	80052c4 <TinyBMS_CAN_WriteRegBlock+0x1d4>
 8005260:	4b21      	ldr	r3, [pc, #132]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b10      	cmp	r3, #16
 8005266:	d12d      	bne.n	80052c4 <TinyBMS_CAN_WriteRegBlock+0x1d4>
				printf("Response from BMS [OK]\r\n");
 8005268:	4824      	ldr	r0, [pc, #144]	; (80052fc <TinyBMS_CAN_WriteRegBlock+0x20c>)
 800526a:	f008 ff5f 	bl	800e12c <puts>
				printf("CAN_TBMS_WRITE_REG_BLOCK | CMD: 0x%02X\r\n", rx_buffer[1]);
 800526e:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 8005270:	785b      	ldrb	r3, [r3, #1]
 8005272:	4619      	mov	r1, r3
 8005274:	4822      	ldr	r0, [pc, #136]	; (8005300 <TinyBMS_CAN_WriteRegBlock+0x210>)
 8005276:	f008 fed3 	bl	800e020 <iprintf>

				//If Byte 5 is 0x00, Byte 6's rl matches input rl, and Bytes[3:4]'s address matches input address
				uint16_t addr_check = ((rx_buffer[2] << 8) | rx_buffer[3]);
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 800527c:	789b      	ldrb	r3, [r3, #2]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	b21a      	sxth	r2, r3
 8005282:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 8005284:	78db      	ldrb	r3, [r3, #3]
 8005286:	b21b      	sxth	r3, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	b21b      	sxth	r3, r3
 800528c:	873b      	strh	r3, [r7, #56]	; 0x38
				if((rx_buffer[4] == 0x00) && (rx_buffer[5] == rl) && (addr_check == addr)) {
 800528e:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 8005290:	791b      	ldrb	r3, [r3, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d112      	bne.n	80052bc <TinyBMS_CAN_WriteRegBlock+0x1cc>
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <TinyBMS_CAN_WriteRegBlock+0x1f8>)
 8005298:	795b      	ldrb	r3, [r3, #5]
 800529a:	7afa      	ldrb	r2, [r7, #11]
 800529c:	429a      	cmp	r2, r3
 800529e:	d10d      	bne.n	80052bc <TinyBMS_CAN_WriteRegBlock+0x1cc>
 80052a0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80052a2:	893b      	ldrh	r3, [r7, #8]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d109      	bne.n	80052bc <TinyBMS_CAN_WriteRegBlock+0x1cc>
					printf("Success! Wrote a block of %u registers starting at address 0x%04X\r\n", rl, addr_check);
 80052a8:	7afb      	ldrb	r3, [r7, #11]
 80052aa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80052ac:	4619      	mov	r1, r3
 80052ae:	4815      	ldr	r0, [pc, #84]	; (8005304 <TinyBMS_CAN_WriteRegBlock+0x214>)
 80052b0:	f008 feb6 	bl	800e020 <iprintf>
					retval = CMD_SUCCESS;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80052ba:	e002      	b.n	80052c2 <TinyBMS_CAN_WriteRegBlock+0x1d2>

				} else {
					printf("Data Corruption\r\n");
 80052bc:	4812      	ldr	r0, [pc, #72]	; (8005308 <TinyBMS_CAN_WriteRegBlock+0x218>)
 80052be:	f008 ff35 	bl	800e12c <puts>
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_WRITE_REG_BLOCK)) {
 80052c2:	e002      	b.n	80052ca <TinyBMS_CAN_WriteRegBlock+0x1da>
				}

			} else {
				printf("Data Corruption\r\n");
 80052c4:	4810      	ldr	r0, [pc, #64]	; (8005308 <TinyBMS_CAN_WriteRegBlock+0x218>)
 80052c6:	f008 ff31 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80052ca:	2100      	movs	r1, #0
 80052cc:	4807      	ldr	r0, [pc, #28]	; (80052ec <TinyBMS_CAN_WriteRegBlock+0x1fc>)
 80052ce:	f005 f836 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d187      	bne.n	80051e8 <TinyBMS_CAN_WriteRegBlock+0xf8>
			}
		}
	}

	return retval;
 80052d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3748      	adds	r7, #72	; 0x48
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	080126b8 	.word	0x080126b8
 80052e8:	2000037c 	.word	0x2000037c
 80052ec:	20000200 	.word	0x20000200
 80052f0:	20000004 	.word	0x20000004
 80052f4:	080125c0 	.word	0x080125c0
 80052f8:	080125dc 	.word	0x080125dc
 80052fc:	08011380 	.word	0x08011380
 8005300:	080126d4 	.word	0x080126d4
 8005304:	08012700 	.word	0x08012700
 8005308:	08012634 	.word	0x08012634

0800530c <TinyBMS_CAN_ReadNewestEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_CAN_ReadNewestEvents(CAN_HandleTypeDef *hcan) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b090      	sub	sp, #64	; 0x40
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadNewestEvents\r\n");
 8005314:	486f      	ldr	r0, [pc, #444]	; (80054d4 <TinyBMS_CAN_ReadNewestEvents+0x1c8>)
 8005316:	f008 ff09 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 800531a:	23ff      	movs	r3, #255	; 0xff
 800531c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t pl = 0, msg_count = 1, IDn = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005326:	2301      	movs	r3, #1
 8005328:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800532c:	2300      	movs	r3, #0
 800532e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint32_t BTSP = 0, TSP = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	63bb      	str	r3, [r7, #56]	; 0x38
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	; 0x34

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_NEWEST_EVENTS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800533a:	4a67      	ldr	r2, [pc, #412]	; (80054d8 <TinyBMS_CAN_ReadNewestEvents+0x1cc>)
 800533c:	f107 030c 	add.w	r3, r7, #12
 8005340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005344:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8005348:	2301      	movs	r3, #1
 800534a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 800534e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005352:	f107 030c 	add.w	r3, r7, #12
 8005356:	4619      	mov	r1, r3
 8005358:	2000      	movs	r0, #0
 800535a:	f003 ff99 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800535e:	e0ab      	b.n	80054b8 <TinyBMS_CAN_ReadNewestEvents+0x1ac>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8005360:	f107 0214 	add.w	r2, r7, #20
 8005364:	4b5d      	ldr	r3, [pc, #372]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8005366:	2100      	movs	r1, #0
 8005368:	485d      	ldr	r0, [pc, #372]	; (80054e0 <TinyBMS_CAN_ReadNewestEvents+0x1d4>)
 800536a:	f004 fed6 	bl	800a11a <HAL_CAN_GetRxMessage>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <TinyBMS_CAN_ReadNewestEvents+0x6c>
			Error_Handler();
 8005374:	f004 f904 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005378:	f240 4103 	movw	r1, #1027	; 0x403
 800537c:	4858      	ldr	r0, [pc, #352]	; (80054e0 <TinyBMS_CAN_ReadNewestEvents+0x1d4>)
 800537e:	f005 f806 	bl	800a38e <HAL_CAN_ActivateNotification>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <TinyBMS_CAN_ReadNewestEvents+0x80>
			Error_Handler();
 8005388:	f004 f8fa 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4b55      	ldr	r3, [pc, #340]	; (80054e4 <TinyBMS_CAN_ReadNewestEvents+0x1d8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	f040 8090 	bne.w	80054b8 <TinyBMS_CAN_ReadNewestEvents+0x1ac>
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f040 808c 	bne.w	80054b8 <TinyBMS_CAN_ReadNewestEvents+0x1ac>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 80053a0:	4b4e      	ldr	r3, [pc, #312]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d115      	bne.n	80053d4 <TinyBMS_CAN_ReadNewestEvents+0xc8>
				printf("Response from BMS [Error]\r\n");
 80053a8:	484f      	ldr	r0, [pc, #316]	; (80054e8 <TinyBMS_CAN_ReadNewestEvents+0x1dc>)
 80053aa:	f008 febf 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 80053ae:	4b4b      	ldr	r3, [pc, #300]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	4619      	mov	r1, r3
 80053b4:	4b49      	ldr	r3, [pc, #292]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 80053b6:	789b      	ldrb	r3, [r3, #2]
 80053b8:	461a      	mov	r2, r3
 80053ba:	484c      	ldr	r0, [pc, #304]	; (80054ec <TinyBMS_CAN_ReadNewestEvents+0x1e0>)
 80053bc:	f008 fe30 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 80053c0:	4b46      	ldr	r3, [pc, #280]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 80053c2:	789b      	ldrb	r3, [r3, #2]
 80053c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				reportBMSError(error);
 80053c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 fd19 	bl	8006e04 <reportBMSError>
 80053d2:	e071      	b.n	80054b8 <TinyBMS_CAN_ReadNewestEvents+0x1ac>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_NEWEST_EVENTS)) {
 80053d4:	4b41      	ldr	r3, [pc, #260]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d167      	bne.n	80054ac <TinyBMS_CAN_ReadNewestEvents+0x1a0>
 80053dc:	4b3f      	ldr	r3, [pc, #252]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b11      	cmp	r3, #17
 80053e2:	d163      	bne.n	80054ac <TinyBMS_CAN_ReadNewestEvents+0x1a0>
				if(msg_count == 1) {
 80053e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d108      	bne.n	80053fe <TinyBMS_CAN_ReadNewestEvents+0xf2>
					printf("Response from BMS [OK]\r\n");
 80053ec:	4840      	ldr	r0, [pc, #256]	; (80054f0 <TinyBMS_CAN_ReadNewestEvents+0x1e4>)
 80053ee:	f008 fe9d 	bl	800e12c <puts>
					printf("CAN_TBMS_READ_NEWEST_EVENTS | CMD: 0x%02X\r\n", rx_buffer[1]);
 80053f2:	4b3a      	ldr	r3, [pc, #232]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	4619      	mov	r1, r3
 80053f8:	483e      	ldr	r0, [pc, #248]	; (80054f4 <TinyBMS_CAN_ReadNewestEvents+0x1e8>)
 80053fa:	f008 fe11 	bl	800e020 <iprintf>
				}
				pl = rx_buffer[2];
 80053fe:	4b37      	ldr	r3, [pc, #220]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8005400:	789b      	ldrb	r3, [r3, #2]
 8005402:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				retval = CMD_SUCCESS;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				//MSG1 - TinyBMS Timestamp
				//If payload is 4 Bytes and Byte 8 is 0x00
				if((rx_buffer[7] == 0x00) && (pl == 4)) {
 800540c:	4b33      	ldr	r3, [pc, #204]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 800540e:	79db      	ldrb	r3, [r3, #7]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11c      	bne.n	800544e <TinyBMS_CAN_ReadNewestEvents+0x142>
 8005414:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005418:	2b04      	cmp	r3, #4
 800541a:	d118      	bne.n	800544e <TinyBMS_CAN_ReadNewestEvents+0x142>
					BTSP = ((rx_buffer[6] << 24) | (rx_buffer[5] << 16) | (rx_buffer[4] << 8) | (rx_buffer[3]));
 800541c:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 800541e:	799b      	ldrb	r3, [r3, #6]
 8005420:	061a      	lsls	r2, r3, #24
 8005422:	4b2e      	ldr	r3, [pc, #184]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8005424:	795b      	ldrb	r3, [r3, #5]
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	431a      	orrs	r2, r3
 800542a:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 800542c:	791b      	ldrb	r3, [r3, #4]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	4313      	orrs	r3, r2
 8005432:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8005434:	78d2      	ldrb	r2, [r2, #3]
 8005436:	4313      	orrs	r3, r2
 8005438:	63bb      	str	r3, [r7, #56]	; 0x38
					printf("TinyBMS Timestamp (s): [%lu]\r\n", BTSP);
 800543a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800543c:	482e      	ldr	r0, [pc, #184]	; (80054f8 <TinyBMS_CAN_ReadNewestEvents+0x1ec>)
 800543e:	f008 fdef 	bl	800e020 <iprintf>
					msg_count++;
 8005442:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005446:	3301      	adds	r3, #1
 8005448:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800544c:	e02d      	b.n	80054aa <TinyBMS_CAN_ReadNewestEvents+0x19e>

				//MSG2..n - Newest Event ID + Timestamp
				//If payload is 4 Bytes and Byte 8 is 1..n-1
				} else if((rx_buffer[7] == (msg_count-1)) && (pl == 4)) {
 800544e:	4b23      	ldr	r3, [pc, #140]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8005450:	79db      	ldrb	r3, [r3, #7]
 8005452:	461a      	mov	r2, r3
 8005454:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005458:	3b01      	subs	r3, #1
 800545a:	429a      	cmp	r2, r3
 800545c:	d11f      	bne.n	800549e <TinyBMS_CAN_ReadNewestEvents+0x192>
 800545e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005462:	2b04      	cmp	r3, #4
 8005464:	d11b      	bne.n	800549e <TinyBMS_CAN_ReadNewestEvents+0x192>
					TSP = ((0x00 << 24) | (rx_buffer[5] << 16) | (rx_buffer[4] << 8) | (rx_buffer[3]));
 8005466:	4b1d      	ldr	r3, [pc, #116]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8005468:	795b      	ldrb	r3, [r3, #5]
 800546a:	041a      	lsls	r2, r3, #16
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 800546e:	791b      	ldrb	r3, [r3, #4]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	4313      	orrs	r3, r2
 8005474:	4a19      	ldr	r2, [pc, #100]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 8005476:	78d2      	ldrb	r2, [r2, #3]
 8005478:	4313      	orrs	r3, r2
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
					IDn = rx_buffer[6];
 800547c:	4b17      	ldr	r3, [pc, #92]	; (80054dc <TinyBMS_CAN_ReadNewestEvents+0x1d0>)
 800547e:	799b      	ldrb	r3, [r3, #6]
 8005480:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					printf("Event - ID: 0x%02X | Timestamp (s): [%lu]\r\n", IDn, TSP);
 8005484:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548a:	4619      	mov	r1, r3
 800548c:	481b      	ldr	r0, [pc, #108]	; (80054fc <TinyBMS_CAN_ReadNewestEvents+0x1f0>)
 800548e:	f008 fdc7 	bl	800e020 <iprintf>
					msg_count++;
 8005492:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005496:	3301      	adds	r3, #1
 8005498:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800549c:	e005      	b.n	80054aa <TinyBMS_CAN_ReadNewestEvents+0x19e>

				} else {
					printf("Data Corruption\r\n");
 800549e:	4818      	ldr	r0, [pc, #96]	; (8005500 <TinyBMS_CAN_ReadNewestEvents+0x1f4>)
 80054a0:	f008 fe44 	bl	800e12c <puts>
					retval = CMD_FAILURE;
 80054a4:	23ff      	movs	r3, #255	; 0xff
 80054a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((rx_buffer[7] == 0x00) && (pl == 4)) {
 80054aa:	e005      	b.n	80054b8 <TinyBMS_CAN_ReadNewestEvents+0x1ac>
				}

			} else {
				printf("Data Corruption\r\n");
 80054ac:	4814      	ldr	r0, [pc, #80]	; (8005500 <TinyBMS_CAN_ReadNewestEvents+0x1f4>)
 80054ae:	f008 fe3d 	bl	800e12c <puts>
				retval = CMD_FAILURE;
 80054b2:	23ff      	movs	r3, #255	; 0xff
 80054b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80054b8:	2100      	movs	r1, #0
 80054ba:	4809      	ldr	r0, [pc, #36]	; (80054e0 <TinyBMS_CAN_ReadNewestEvents+0x1d4>)
 80054bc:	f004 ff3f 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f47f af4c 	bne.w	8005360 <TinyBMS_CAN_ReadNewestEvents+0x54>
			}
		}
	}

	return retval;
 80054c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3740      	adds	r7, #64	; 0x40
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	08012744 	.word	0x08012744
 80054d8:	080127dc 	.word	0x080127dc
 80054dc:	2000037c 	.word	0x2000037c
 80054e0:	20000200 	.word	0x20000200
 80054e4:	20000004 	.word	0x20000004
 80054e8:	080125c0 	.word	0x080125c0
 80054ec:	080125dc 	.word	0x080125dc
 80054f0:	08011380 	.word	0x08011380
 80054f4:	08012764 	.word	0x08012764
 80054f8:	08012790 	.word	0x08012790
 80054fc:	080127b0 	.word	0x080127b0
 8005500:	08012634 	.word	0x08012634

08005504 <TinyBMS_CAN_ReadAllEvents>:
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  PL: Payload length in bytes [UINT8]. BTSP: BMS timestamp in seconds [UINT32].
 * 						   TSP: Event timestamp in seconds [UINT24]. EVENT: BMS Event ID [UINT8].
 */
uint8_t TinyBMS_CAN_ReadAllEvents(CAN_HandleTypeDef *hcan) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b090      	sub	sp, #64	; 0x40
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadAllEvents\r\n");
 800550c:	486f      	ldr	r0, [pc, #444]	; (80056cc <TinyBMS_CAN_ReadAllEvents+0x1c8>)
 800550e:	f008 fe0d 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8005512:	23ff      	movs	r3, #255	; 0xff
 8005514:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t pl = 0, msg_count = 1, IDn = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800551e:	2301      	movs	r3, #1
 8005520:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005524:	2300      	movs	r3, #0
 8005526:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint32_t BTSP = 0, TSP = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_ALL_EVENTS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005532:	4a67      	ldr	r2, [pc, #412]	; (80056d0 <TinyBMS_CAN_ReadAllEvents+0x1cc>)
 8005534:	f107 030c 	add.w	r3, r7, #12
 8005538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800553c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005546:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800554a:	f107 030c 	add.w	r3, r7, #12
 800554e:	4619      	mov	r1, r3
 8005550:	2000      	movs	r0, #0
 8005552:	f003 fe9d 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005556:	e0ab      	b.n	80056b0 <TinyBMS_CAN_ReadAllEvents+0x1ac>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8005558:	f107 0214 	add.w	r2, r7, #20
 800555c:	4b5d      	ldr	r3, [pc, #372]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 800555e:	2100      	movs	r1, #0
 8005560:	485d      	ldr	r0, [pc, #372]	; (80056d8 <TinyBMS_CAN_ReadAllEvents+0x1d4>)
 8005562:	f004 fdda 	bl	800a11a <HAL_CAN_GetRxMessage>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <TinyBMS_CAN_ReadAllEvents+0x6c>
			Error_Handler();
 800556c:	f004 f808 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005570:	f240 4103 	movw	r1, #1027	; 0x403
 8005574:	4858      	ldr	r0, [pc, #352]	; (80056d8 <TinyBMS_CAN_ReadAllEvents+0x1d4>)
 8005576:	f004 ff0a 	bl	800a38e <HAL_CAN_ActivateNotification>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <TinyBMS_CAN_ReadAllEvents+0x80>
			Error_Handler();
 8005580:	f003 fffe 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4b55      	ldr	r3, [pc, #340]	; (80056dc <TinyBMS_CAN_ReadAllEvents+0x1d8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	f040 8090 	bne.w	80056b0 <TinyBMS_CAN_ReadAllEvents+0x1ac>
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 808c 	bne.w	80056b0 <TinyBMS_CAN_ReadAllEvents+0x1ac>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8005598:	4b4e      	ldr	r3, [pc, #312]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d115      	bne.n	80055cc <TinyBMS_CAN_ReadAllEvents+0xc8>
				printf("Response from BMS [Error]\r\n");
 80055a0:	484f      	ldr	r0, [pc, #316]	; (80056e0 <TinyBMS_CAN_ReadAllEvents+0x1dc>)
 80055a2:	f008 fdc3 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 80055a6:	4b4b      	ldr	r3, [pc, #300]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	4619      	mov	r1, r3
 80055ac:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 80055ae:	789b      	ldrb	r3, [r3, #2]
 80055b0:	461a      	mov	r2, r3
 80055b2:	484c      	ldr	r0, [pc, #304]	; (80056e4 <TinyBMS_CAN_ReadAllEvents+0x1e0>)
 80055b4:	f008 fd34 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 80055b8:	4b46      	ldr	r3, [pc, #280]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 80055ba:	789b      	ldrb	r3, [r3, #2]
 80055bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				reportBMSError(error);
 80055c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80055c4:	4618      	mov	r0, r3
 80055c6:	f001 fc1d 	bl	8006e04 <reportBMSError>
 80055ca:	e071      	b.n	80056b0 <TinyBMS_CAN_ReadAllEvents+0x1ac>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_ALL_EVENTS)) {
 80055cc:	4b41      	ldr	r3, [pc, #260]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d167      	bne.n	80056a4 <TinyBMS_CAN_ReadAllEvents+0x1a0>
 80055d4:	4b3f      	ldr	r3, [pc, #252]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	2b12      	cmp	r3, #18
 80055da:	d163      	bne.n	80056a4 <TinyBMS_CAN_ReadAllEvents+0x1a0>
				if(msg_count == 1) {
 80055dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d108      	bne.n	80055f6 <TinyBMS_CAN_ReadAllEvents+0xf2>
					printf("Response from BMS [OK]\r\n");
 80055e4:	4840      	ldr	r0, [pc, #256]	; (80056e8 <TinyBMS_CAN_ReadAllEvents+0x1e4>)
 80055e6:	f008 fda1 	bl	800e12c <puts>
					printf("CAN_TBMS_READ_ALL_EVENTS | CMD: 0x%02X\r\n", rx_buffer[1]);
 80055ea:	4b3a      	ldr	r3, [pc, #232]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	4619      	mov	r1, r3
 80055f0:	483e      	ldr	r0, [pc, #248]	; (80056ec <TinyBMS_CAN_ReadAllEvents+0x1e8>)
 80055f2:	f008 fd15 	bl	800e020 <iprintf>
				}
				pl = rx_buffer[2];
 80055f6:	4b37      	ldr	r3, [pc, #220]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 80055f8:	789b      	ldrb	r3, [r3, #2]
 80055fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				retval = CMD_SUCCESS;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				//MSG1 - TinyBMS Timestamp
				//If payload is 4 Bytes and Byte 8 is 0x00
				if((rx_buffer[7] == 0x00) && (pl == 4)) {
 8005604:	4b33      	ldr	r3, [pc, #204]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8005606:	79db      	ldrb	r3, [r3, #7]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d11c      	bne.n	8005646 <TinyBMS_CAN_ReadAllEvents+0x142>
 800560c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005610:	2b04      	cmp	r3, #4
 8005612:	d118      	bne.n	8005646 <TinyBMS_CAN_ReadAllEvents+0x142>
					BTSP = ((rx_buffer[6] << 24) | (rx_buffer[5] << 16) | (rx_buffer[4] << 8) | (rx_buffer[3]));
 8005614:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8005616:	799b      	ldrb	r3, [r3, #6]
 8005618:	061a      	lsls	r2, r3, #24
 800561a:	4b2e      	ldr	r3, [pc, #184]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 800561c:	795b      	ldrb	r3, [r3, #5]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	431a      	orrs	r2, r3
 8005622:	4b2c      	ldr	r3, [pc, #176]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8005624:	791b      	ldrb	r3, [r3, #4]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	4313      	orrs	r3, r2
 800562a:	4a2a      	ldr	r2, [pc, #168]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 800562c:	78d2      	ldrb	r2, [r2, #3]
 800562e:	4313      	orrs	r3, r2
 8005630:	63bb      	str	r3, [r7, #56]	; 0x38
					printf("TinyBMS Timestamp (s): [%lu]\r\n", BTSP);
 8005632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005634:	482e      	ldr	r0, [pc, #184]	; (80056f0 <TinyBMS_CAN_ReadAllEvents+0x1ec>)
 8005636:	f008 fcf3 	bl	800e020 <iprintf>
					msg_count++;
 800563a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800563e:	3301      	adds	r3, #1
 8005640:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005644:	e02d      	b.n	80056a2 <TinyBMS_CAN_ReadAllEvents+0x19e>

				//MSG2..n - Event ID + Timestamp
				//If payload is 4 Bytes and Byte 8 is 1..n-1
				} else if((rx_buffer[7] == (msg_count-1)) && (pl == 4)) {
 8005646:	4b23      	ldr	r3, [pc, #140]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8005648:	79db      	ldrb	r3, [r3, #7]
 800564a:	461a      	mov	r2, r3
 800564c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005650:	3b01      	subs	r3, #1
 8005652:	429a      	cmp	r2, r3
 8005654:	d11f      	bne.n	8005696 <TinyBMS_CAN_ReadAllEvents+0x192>
 8005656:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800565a:	2b04      	cmp	r3, #4
 800565c:	d11b      	bne.n	8005696 <TinyBMS_CAN_ReadAllEvents+0x192>
					TSP = ((0x00 << 24) | (rx_buffer[5] << 16) | (rx_buffer[4] << 8) | (rx_buffer[3]));
 800565e:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8005660:	795b      	ldrb	r3, [r3, #5]
 8005662:	041a      	lsls	r2, r3, #16
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8005666:	791b      	ldrb	r3, [r3, #4]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	4313      	orrs	r3, r2
 800566c:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 800566e:	78d2      	ldrb	r2, [r2, #3]
 8005670:	4313      	orrs	r3, r2
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
					IDn = rx_buffer[6];
 8005674:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <TinyBMS_CAN_ReadAllEvents+0x1d0>)
 8005676:	799b      	ldrb	r3, [r3, #6]
 8005678:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					printf("Event - ID: 0x%02X | Timestamp (s): [%lu]\r\n", IDn, TSP);
 800567c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005682:	4619      	mov	r1, r3
 8005684:	481b      	ldr	r0, [pc, #108]	; (80056f4 <TinyBMS_CAN_ReadAllEvents+0x1f0>)
 8005686:	f008 fccb 	bl	800e020 <iprintf>
					msg_count++;
 800568a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800568e:	3301      	adds	r3, #1
 8005690:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005694:	e005      	b.n	80056a2 <TinyBMS_CAN_ReadAllEvents+0x19e>

				} else {
					printf("Data Corruption\r\n");
 8005696:	4818      	ldr	r0, [pc, #96]	; (80056f8 <TinyBMS_CAN_ReadAllEvents+0x1f4>)
 8005698:	f008 fd48 	bl	800e12c <puts>
					retval = CMD_FAILURE;
 800569c:	23ff      	movs	r3, #255	; 0xff
 800569e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if((rx_buffer[7] == 0x00) && (pl == 4)) {
 80056a2:	e005      	b.n	80056b0 <TinyBMS_CAN_ReadAllEvents+0x1ac>
				}

			} else {
				printf("Data Corruption\r\n");
 80056a4:	4814      	ldr	r0, [pc, #80]	; (80056f8 <TinyBMS_CAN_ReadAllEvents+0x1f4>)
 80056a6:	f008 fd41 	bl	800e12c <puts>
				retval = CMD_FAILURE;
 80056aa:	23ff      	movs	r3, #255	; 0xff
 80056ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80056b0:	2100      	movs	r1, #0
 80056b2:	4809      	ldr	r0, [pc, #36]	; (80056d8 <TinyBMS_CAN_ReadAllEvents+0x1d4>)
 80056b4:	f004 fe43 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f47f af4c 	bne.w	8005558 <TinyBMS_CAN_ReadAllEvents+0x54>
			}
		}
	}

	return retval;
 80056c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3740      	adds	r7, #64	; 0x40
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	080127e4 	.word	0x080127e4
 80056d0:	0801282c 	.word	0x0801282c
 80056d4:	2000037c 	.word	0x2000037c
 80056d8:	20000200 	.word	0x20000200
 80056dc:	20000004 	.word	0x20000004
 80056e0:	080125c0 	.word	0x080125c0
 80056e4:	080125dc 	.word	0x080125dc
 80056e8:	08011380 	.word	0x08011380
 80056ec:	08012800 	.word	0x08012800
 80056f0:	08012790 	.word	0x08012790
 80056f4:	080127b0 	.word	0x080127b0
 80056f8:	08012634 	.word	0x08012634

080056fc <TinyBMS_CAN_ReadBatteryPackVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_CAN_ReadBatteryPackVoltage(CAN_HandleTypeDef *hcan) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b090      	sub	sp, #64	; 0x40
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackVoltage\r\n");
 8005704:	4849      	ldr	r0, [pc, #292]	; (800582c <TinyBMS_CAN_ReadBatteryPackVoltage+0x130>)
 8005706:	f008 fd11 	bl	800e12c <puts>
	float retval = CMD_FAILURE;
 800570a:	4b49      	ldr	r3, [pc, #292]	; (8005830 <TinyBMS_CAN_ReadBatteryPackVoltage+0x134>)
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_PACK_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800570e:	4a49      	ldr	r2, [pc, #292]	; (8005834 <TinyBMS_CAN_ReadBatteryPackVoltage+0x138>)
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005718:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005722:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005726:	f107 0308 	add.w	r3, r7, #8
 800572a:	4619      	mov	r1, r3
 800572c:	2000      	movs	r0, #0
 800572e:	f003 fdaf 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005732:	e06c      	b.n	800580e <TinyBMS_CAN_ReadBatteryPackVoltage+0x112>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8005734:	f107 0210 	add.w	r2, r7, #16
 8005738:	4b3f      	ldr	r3, [pc, #252]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 800573a:	2100      	movs	r1, #0
 800573c:	483f      	ldr	r0, [pc, #252]	; (800583c <TinyBMS_CAN_ReadBatteryPackVoltage+0x140>)
 800573e:	f004 fcec 	bl	800a11a <HAL_CAN_GetRxMessage>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <TinyBMS_CAN_ReadBatteryPackVoltage+0x50>
			Error_Handler();
 8005748:	f003 ff1a 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800574c:	f240 4103 	movw	r1, #1027	; 0x403
 8005750:	483a      	ldr	r0, [pc, #232]	; (800583c <TinyBMS_CAN_ReadBatteryPackVoltage+0x140>)
 8005752:	f004 fe1c 	bl	800a38e <HAL_CAN_ActivateNotification>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <TinyBMS_CAN_ReadBatteryPackVoltage+0x64>
			Error_Handler();
 800575c:	f003 ff10 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4b37      	ldr	r3, [pc, #220]	; (8005840 <TinyBMS_CAN_ReadBatteryPackVoltage+0x144>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d151      	bne.n	800580e <TinyBMS_CAN_ReadBatteryPackVoltage+0x112>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d14e      	bne.n	800580e <TinyBMS_CAN_ReadBatteryPackVoltage+0x112>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d115      	bne.n	80057a4 <TinyBMS_CAN_ReadBatteryPackVoltage+0xa8>
				printf("Response from BMS [Error]\r\n");
 8005778:	4832      	ldr	r0, [pc, #200]	; (8005844 <TinyBMS_CAN_ReadBatteryPackVoltage+0x148>)
 800577a:	f008 fcd7 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 800577e:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	4619      	mov	r1, r3
 8005784:	4b2c      	ldr	r3, [pc, #176]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 8005786:	789b      	ldrb	r3, [r3, #2]
 8005788:	461a      	mov	r2, r3
 800578a:	482f      	ldr	r0, [pc, #188]	; (8005848 <TinyBMS_CAN_ReadBatteryPackVoltage+0x14c>)
 800578c:	f008 fc48 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8005790:	4b29      	ldr	r3, [pc, #164]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 8005792:	789b      	ldrb	r3, [r3, #2]
 8005794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				reportBMSError(error);
 8005798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fb31 	bl	8006e04 <reportBMSError>
 80057a2:	e034      	b.n	800580e <TinyBMS_CAN_ReadBatteryPackVoltage+0x112>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_PACK_VOLTAGE)) {
 80057a4:	4b24      	ldr	r3, [pc, #144]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d12d      	bne.n	8005808 <TinyBMS_CAN_ReadBatteryPackVoltage+0x10c>
 80057ac:	4b22      	ldr	r3, [pc, #136]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b14      	cmp	r3, #20
 80057b2:	d129      	bne.n	8005808 <TinyBMS_CAN_ReadBatteryPackVoltage+0x10c>
				printf("Response from BMS [OK]\r\n");
 80057b4:	4825      	ldr	r0, [pc, #148]	; (800584c <TinyBMS_CAN_ReadBatteryPackVoltage+0x150>)
 80057b6:	f008 fcb9 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_PACK_VOLTAGE | CMD: 0x%02X\r\n", rx_buffer[1]);
 80057ba:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	4619      	mov	r1, r3
 80057c0:	4823      	ldr	r0, [pc, #140]	; (8005850 <TinyBMS_CAN_ReadBatteryPackVoltage+0x154>)
 80057c2:	f008 fc2d 	bl	800e020 <iprintf>
				uint32_t data = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 80057c6:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 80057c8:	795b      	ldrb	r3, [r3, #5]
 80057ca:	061a      	lsls	r2, r3, #24
 80057cc:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 80057ce:	791b      	ldrb	r3, [r3, #4]
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	431a      	orrs	r2, r3
 80057d4:	4b18      	ldr	r3, [pc, #96]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 80057d6:	78db      	ldrb	r3, [r3, #3]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	4313      	orrs	r3, r2
 80057dc:	4a16      	ldr	r2, [pc, #88]	; (8005838 <TinyBMS_CAN_ReadBatteryPackVoltage+0x13c>)
 80057de:	7892      	ldrb	r2, [r2, #2]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
				float packVoltage = data;
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 80057f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f4:	f7fa fec8 	bl	8000588 <__aeabi_f2d>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4815      	ldr	r0, [pc, #84]	; (8005854 <TinyBMS_CAN_ReadBatteryPackVoltage+0x158>)
 80057fe:	f008 fc0f 	bl	800e020 <iprintf>
				retval = packVoltage;
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_PACK_VOLTAGE)) {
 8005806:	e002      	b.n	800580e <TinyBMS_CAN_ReadBatteryPackVoltage+0x112>

			} else {
				printf("Data Corruption\r\n");
 8005808:	4813      	ldr	r0, [pc, #76]	; (8005858 <TinyBMS_CAN_ReadBatteryPackVoltage+0x15c>)
 800580a:	f008 fc8f 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800580e:	2100      	movs	r1, #0
 8005810:	480a      	ldr	r0, [pc, #40]	; (800583c <TinyBMS_CAN_ReadBatteryPackVoltage+0x140>)
 8005812:	f004 fd94 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d18b      	bne.n	8005734 <TinyBMS_CAN_ReadBatteryPackVoltage+0x38>
			}
		}
	}

	return retval;
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	ee07 3a90 	vmov	s15, r3
}
 8005822:	eeb0 0a67 	vmov.f32	s0, s15
 8005826:	3740      	adds	r7, #64	; 0x40
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	08012834 	.word	0x08012834
 8005830:	bf800000 	.word	0xbf800000
 8005834:	080128b0 	.word	0x080128b0
 8005838:	2000037c 	.word	0x2000037c
 800583c:	20000200 	.word	0x20000200
 8005840:	20000004 	.word	0x20000004
 8005844:	080125c0 	.word	0x080125c0
 8005848:	080125dc 	.word	0x080125dc
 800584c:	08011380 	.word	0x08011380
 8005850:	08012858 	.word	0x08012858
 8005854:	08012884 	.word	0x08012884
 8005858:	08012634 	.word	0x08012634

0800585c <TinyBMS_CAN_ReadBatteryPackCurrent>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3      Byte4  Byte5  	Byte6 		Byte7 	Byte8
 * 						 	  DATA:LSB   DATA   DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	               [FLOAT]
 */
float TinyBMS_CAN_ReadBatteryPackCurrent(CAN_HandleTypeDef *hcan) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b090      	sub	sp, #64	; 0x40
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackCurrent\r\n");
 8005864:	4849      	ldr	r0, [pc, #292]	; (800598c <TinyBMS_CAN_ReadBatteryPackCurrent+0x130>)
 8005866:	f008 fc61 	bl	800e12c <puts>
	float retval = CMD_FAILURE;
 800586a:	4b49      	ldr	r3, [pc, #292]	; (8005990 <TinyBMS_CAN_ReadBatteryPackCurrent+0x134>)
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_PACK_CURRENT, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800586e:	4a49      	ldr	r2, [pc, #292]	; (8005994 <TinyBMS_CAN_ReadBatteryPackCurrent+0x138>)
 8005870:	f107 0308 	add.w	r3, r7, #8
 8005874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005878:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005882:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005886:	f107 0308 	add.w	r3, r7, #8
 800588a:	4619      	mov	r1, r3
 800588c:	2000      	movs	r0, #0
 800588e:	f003 fcff 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005892:	e06c      	b.n	800596e <TinyBMS_CAN_ReadBatteryPackCurrent+0x112>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8005894:	f107 0210 	add.w	r2, r7, #16
 8005898:	4b3f      	ldr	r3, [pc, #252]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 800589a:	2100      	movs	r1, #0
 800589c:	483f      	ldr	r0, [pc, #252]	; (800599c <TinyBMS_CAN_ReadBatteryPackCurrent+0x140>)
 800589e:	f004 fc3c 	bl	800a11a <HAL_CAN_GetRxMessage>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <TinyBMS_CAN_ReadBatteryPackCurrent+0x50>
			Error_Handler();
 80058a8:	f003 fe6a 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80058ac:	f240 4103 	movw	r1, #1027	; 0x403
 80058b0:	483a      	ldr	r0, [pc, #232]	; (800599c <TinyBMS_CAN_ReadBatteryPackCurrent+0x140>)
 80058b2:	f004 fd6c 	bl	800a38e <HAL_CAN_ActivateNotification>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <TinyBMS_CAN_ReadBatteryPackCurrent+0x64>
			Error_Handler();
 80058bc:	f003 fe60 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <TinyBMS_CAN_ReadBatteryPackCurrent+0x144>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d151      	bne.n	800596e <TinyBMS_CAN_ReadBatteryPackCurrent+0x112>
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d14e      	bne.n	800596e <TinyBMS_CAN_ReadBatteryPackCurrent+0x112>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 80058d0:	4b31      	ldr	r3, [pc, #196]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d115      	bne.n	8005904 <TinyBMS_CAN_ReadBatteryPackCurrent+0xa8>
				printf("Response from BMS [Error]\r\n");
 80058d8:	4832      	ldr	r0, [pc, #200]	; (80059a4 <TinyBMS_CAN_ReadBatteryPackCurrent+0x148>)
 80058da:	f008 fc27 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 80058de:	4b2e      	ldr	r3, [pc, #184]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	4619      	mov	r1, r3
 80058e4:	4b2c      	ldr	r3, [pc, #176]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 80058e6:	789b      	ldrb	r3, [r3, #2]
 80058e8:	461a      	mov	r2, r3
 80058ea:	482f      	ldr	r0, [pc, #188]	; (80059a8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x14c>)
 80058ec:	f008 fb98 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 80058f0:	4b29      	ldr	r3, [pc, #164]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 80058f2:	789b      	ldrb	r3, [r3, #2]
 80058f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				reportBMSError(error);
 80058f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 fa81 	bl	8006e04 <reportBMSError>
 8005902:	e034      	b.n	800596e <TinyBMS_CAN_ReadBatteryPackCurrent+0x112>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_PACK_CURRENT)) {
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d12d      	bne.n	8005968 <TinyBMS_CAN_ReadBatteryPackCurrent+0x10c>
 800590c:	4b22      	ldr	r3, [pc, #136]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	2b15      	cmp	r3, #21
 8005912:	d129      	bne.n	8005968 <TinyBMS_CAN_ReadBatteryPackCurrent+0x10c>
				printf("Response from BMS [OK]\r\n");
 8005914:	4825      	ldr	r0, [pc, #148]	; (80059ac <TinyBMS_CAN_ReadBatteryPackCurrent+0x150>)
 8005916:	f008 fc09 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_PACK_CURRENT | CMD: 0x%02X\r\n", rx_buffer[1]);
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 800591c:	785b      	ldrb	r3, [r3, #1]
 800591e:	4619      	mov	r1, r3
 8005920:	4823      	ldr	r0, [pc, #140]	; (80059b0 <TinyBMS_CAN_ReadBatteryPackCurrent+0x154>)
 8005922:	f008 fb7d 	bl	800e020 <iprintf>
				uint32_t data = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 8005928:	795b      	ldrb	r3, [r3, #5]
 800592a:	061a      	lsls	r2, r3, #24
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 800592e:	791b      	ldrb	r3, [r3, #4]
 8005930:	041b      	lsls	r3, r3, #16
 8005932:	431a      	orrs	r2, r3
 8005934:	4b18      	ldr	r3, [pc, #96]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 8005936:	78db      	ldrb	r3, [r3, #3]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	4313      	orrs	r3, r2
 800593c:	4a16      	ldr	r2, [pc, #88]	; (8005998 <TinyBMS_CAN_ReadBatteryPackCurrent+0x13c>)
 800593e:	7892      	ldrb	r2, [r2, #2]
 8005940:	4313      	orrs	r3, r2
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
				float packCurrent = data;
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 8005952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005954:	f7fa fe18 	bl	8000588 <__aeabi_f2d>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4815      	ldr	r0, [pc, #84]	; (80059b4 <TinyBMS_CAN_ReadBatteryPackCurrent+0x158>)
 800595e:	f008 fb5f 	bl	800e020 <iprintf>
				retval = packCurrent;
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_PACK_CURRENT)) {
 8005966:	e002      	b.n	800596e <TinyBMS_CAN_ReadBatteryPackCurrent+0x112>

			} else {
				printf("Data Corruption\r\n");
 8005968:	4813      	ldr	r0, [pc, #76]	; (80059b8 <TinyBMS_CAN_ReadBatteryPackCurrent+0x15c>)
 800596a:	f008 fbdf 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800596e:	2100      	movs	r1, #0
 8005970:	480a      	ldr	r0, [pc, #40]	; (800599c <TinyBMS_CAN_ReadBatteryPackCurrent+0x140>)
 8005972:	f004 fce4 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d18b      	bne.n	8005894 <TinyBMS_CAN_ReadBatteryPackCurrent+0x38>
			}
		}
	}

	return retval;
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597e:	ee07 3a90 	vmov	s15, r3
}
 8005982:	eeb0 0a67 	vmov.f32	s0, s15
 8005986:	3740      	adds	r7, #64	; 0x40
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	080128b8 	.word	0x080128b8
 8005990:	bf800000 	.word	0xbf800000
 8005994:	08012934 	.word	0x08012934
 8005998:	2000037c 	.word	0x2000037c
 800599c:	20000200 	.word	0x20000200
 80059a0:	20000004 	.word	0x20000004
 80059a4:	080125c0 	.word	0x080125c0
 80059a8:	080125dc 	.word	0x080125dc
 80059ac:	08011380 	.word	0x08011380
 80059b0:	080128dc 	.word	0x080128dc
 80059b4:	08012908 	.word	0x08012908
 80059b8:	08012634 	.word	0x08012634

080059bc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>:
 * @note				-  			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(CAN_HandleTypeDef *hcan) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08e      	sub	sp, #56	; 0x38
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackMaxCellVoltage\r\n");
 80059c4:	4841      	ldr	r0, [pc, #260]	; (8005acc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x110>)
 80059c6:	f008 fbb1 	bl	800e12c <puts>
	uint16_t retval = CMD_FAILURE;
 80059ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059ce:	86fb      	strh	r3, [r7, #54]	; 0x36

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_MAX_CELL_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80059d0:	4a3f      	ldr	r2, [pc, #252]	; (8005ad0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x114>)
 80059d2:	f107 030c 	add.w	r3, r7, #12
 80059d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059da:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80059e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80059e8:	f107 030c 	add.w	r3, r7, #12
 80059ec:	4619      	mov	r1, r3
 80059ee:	2000      	movs	r0, #0
 80059f0:	f003 fc4e 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80059f4:	e05d      	b.n	8005ab2 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf6>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 80059f6:	f107 0214 	add.w	r2, r7, #20
 80059fa:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 80059fc:	2100      	movs	r1, #0
 80059fe:	4836      	ldr	r0, [pc, #216]	; (8005ad8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x11c>)
 8005a00:	f004 fb8b 	bl	800a11a <HAL_CAN_GetRxMessage>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x52>
			Error_Handler();
 8005a0a:	f003 fdb9 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005a0e:	f240 4103 	movw	r1, #1027	; 0x403
 8005a12:	4831      	ldr	r0, [pc, #196]	; (8005ad8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x11c>)
 8005a14:	f004 fcbb 	bl	800a38e <HAL_CAN_ActivateNotification>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x66>
			Error_Handler();
 8005a1e:	f003 fdaf 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x120>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d142      	bne.n	8005ab2 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf6>
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d13f      	bne.n	8005ab2 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf6>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8005a32:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d115      	bne.n	8005a66 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xaa>
				printf("Response from BMS [Error]\r\n");
 8005a3a:	4829      	ldr	r0, [pc, #164]	; (8005ae0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x124>)
 8005a3c:	f008 fb76 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8005a40:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	4619      	mov	r1, r3
 8005a46:	4b23      	ldr	r3, [pc, #140]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a48:	789b      	ldrb	r3, [r3, #2]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	4825      	ldr	r0, [pc, #148]	; (8005ae4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x128>)
 8005a4e:	f008 fae7 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a54:	789b      	ldrb	r3, [r3, #2]
 8005a56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				reportBMSError(error);
 8005a5a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f9d0 	bl	8006e04 <reportBMSError>
 8005a64:	e025      	b.n	8005ab2 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf6>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_MAX_CELL_VOLTAGE)) {
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d11e      	bne.n	8005aac <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf0>
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b16      	cmp	r3, #22
 8005a74:	d11a      	bne.n	8005aac <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf0>
				printf("Response from BMS [OK]\r\n");
 8005a76:	481c      	ldr	r0, [pc, #112]	; (8005ae8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x12c>)
 8005a78:	f008 fb58 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_MAX_CELL_VOLTAGE | CMD: 0x%02X\r\n", rx_buffer[1]);
 8005a7c:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	4619      	mov	r1, r3
 8005a82:	481a      	ldr	r0, [pc, #104]	; (8005aec <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x130>)
 8005a84:	f008 facc 	bl	800e020 <iprintf>
				uint16_t maxCellVoltage = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 8005a88:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a8a:	78db      	ldrb	r3, [r3, #3]
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	b21a      	sxth	r2, r3
 8005a90:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x118>)
 8005a92:	789b      	ldrb	r3, [r3, #2]
 8005a94:	b21b      	sxth	r3, r3
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b21b      	sxth	r3, r3
 8005a9a:	867b      	strh	r3, [r7, #50]	; 0x32
				printf("Secondary Battery Pack Maximum Cell Voltage: %u (mV)\r\n", maxCellVoltage);
 8005a9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4813      	ldr	r0, [pc, #76]	; (8005af0 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x134>)
 8005aa2:	f008 fabd 	bl	800e020 <iprintf>
				retval = maxCellVoltage;
 8005aa6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005aa8:	86fb      	strh	r3, [r7, #54]	; 0x36
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_MAX_CELL_VOLTAGE)) {
 8005aaa:	e002      	b.n	8005ab2 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0xf6>

			} else {
				printf("Data Corruption\r\n");
 8005aac:	4811      	ldr	r0, [pc, #68]	; (8005af4 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x138>)
 8005aae:	f008 fb3d 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4808      	ldr	r0, [pc, #32]	; (8005ad8 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x11c>)
 8005ab6:	f004 fc42 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d19a      	bne.n	80059f6 <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage+0x3a>
			}
		}
	}

	return retval;
 8005ac0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3738      	adds	r7, #56	; 0x38
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	0801293c 	.word	0x0801293c
 8005ad0:	080129d0 	.word	0x080129d0
 8005ad4:	2000037c 	.word	0x2000037c
 8005ad8:	20000200 	.word	0x20000200
 8005adc:	20000004 	.word	0x20000004
 8005ae0:	080125c0 	.word	0x080125c0
 8005ae4:	080125dc 	.word	0x080125dc
 8005ae8:	08011380 	.word	0x08011380
 8005aec:	08012968 	.word	0x08012968
 8005af0:	08012998 	.word	0x08012998
 8005af4:	08012634 	.word	0x08012634

08005af8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte3        	Byte4 		Byte5 	Byte6
 * 						 	  DATA:LSB   	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        [UINT16]
 */
uint16_t TinyBMS_CAN_ReadBatteryPackMinCellVoltage(CAN_HandleTypeDef *hcan) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08e      	sub	sp, #56	; 0x38
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackMinCellVoltage\r\n");
 8005b00:	4841      	ldr	r0, [pc, #260]	; (8005c08 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x110>)
 8005b02:	f008 fb13 	bl	800e12c <puts>
	uint16_t retval = CMD_FAILURE;
 8005b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b0a:	86fb      	strh	r3, [r7, #54]	; 0x36

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_MIN_CELL_VOLTAGE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005b0c:	4a3f      	ldr	r2, [pc, #252]	; (8005c0c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x114>)
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b16:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005b20:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005b24:	f107 030c 	add.w	r3, r7, #12
 8005b28:	4619      	mov	r1, r3
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f003 fbb0 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005b30:	e05d      	b.n	8005bee <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf6>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8005b32:	f107 0214 	add.w	r2, r7, #20
 8005b36:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4836      	ldr	r0, [pc, #216]	; (8005c14 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x11c>)
 8005b3c:	f004 faed 	bl	800a11a <HAL_CAN_GetRxMessage>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x52>
			Error_Handler();
 8005b46:	f003 fd1b 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005b4a:	f240 4103 	movw	r1, #1027	; 0x403
 8005b4e:	4831      	ldr	r0, [pc, #196]	; (8005c14 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x11c>)
 8005b50:	f004 fc1d 	bl	800a38e <HAL_CAN_ActivateNotification>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x66>
			Error_Handler();
 8005b5a:	f003 fd11 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4b2d      	ldr	r3, [pc, #180]	; (8005c18 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x120>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d142      	bne.n	8005bee <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf6>
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d13f      	bne.n	8005bee <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf6>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8005b6e:	4b28      	ldr	r3, [pc, #160]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d115      	bne.n	8005ba2 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xaa>
				printf("Response from BMS [Error]\r\n");
 8005b76:	4829      	ldr	r0, [pc, #164]	; (8005c1c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x124>)
 8005b78:	f008 fad8 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8005b7c:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	4619      	mov	r1, r3
 8005b82:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005b84:	789b      	ldrb	r3, [r3, #2]
 8005b86:	461a      	mov	r2, r3
 8005b88:	4825      	ldr	r0, [pc, #148]	; (8005c20 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x128>)
 8005b8a:	f008 fa49 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8005b8e:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005b90:	789b      	ldrb	r3, [r3, #2]
 8005b92:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				reportBMSError(error);
 8005b96:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 f932 	bl	8006e04 <reportBMSError>
 8005ba0:	e025      	b.n	8005bee <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf6>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_MIN_CELL_VOLTAGE)) {
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d11e      	bne.n	8005be8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf0>
 8005baa:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b17      	cmp	r3, #23
 8005bb0:	d11a      	bne.n	8005be8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf0>
				printf("Response from BMS [OK]\r\n");
 8005bb2:	481c      	ldr	r0, [pc, #112]	; (8005c24 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x12c>)
 8005bb4:	f008 faba 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_MIN_CELL_VOLTAGE | CMD: 0x%02X\r\n", rx_buffer[1]);
 8005bb8:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	481a      	ldr	r0, [pc, #104]	; (8005c28 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x130>)
 8005bc0:	f008 fa2e 	bl	800e020 <iprintf>
				uint16_t minCellVoltage = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005bc6:	78db      	ldrb	r3, [r3, #3]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	b21a      	sxth	r2, r3
 8005bcc:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x118>)
 8005bce:	789b      	ldrb	r3, [r3, #2]
 8005bd0:	b21b      	sxth	r3, r3
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	867b      	strh	r3, [r7, #50]	; 0x32
				printf("Secondary Battery Pack Minimum Cell Voltage: %u (mV)\r\n", minCellVoltage);
 8005bd8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4813      	ldr	r0, [pc, #76]	; (8005c2c <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x134>)
 8005bde:	f008 fa1f 	bl	800e020 <iprintf>
				retval = minCellVoltage;
 8005be2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005be4:	86fb      	strh	r3, [r7, #54]	; 0x36
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_MIN_CELL_VOLTAGE)) {
 8005be6:	e002      	b.n	8005bee <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0xf6>

			} else {
				printf("Data Corruption\r\n");
 8005be8:	4811      	ldr	r0, [pc, #68]	; (8005c30 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x138>)
 8005bea:	f008 fa9f 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4808      	ldr	r0, [pc, #32]	; (8005c14 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x11c>)
 8005bf2:	f004 fba4 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d19a      	bne.n	8005b32 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage+0x3a>
			}
		}
	}

	return retval;
 8005bfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3738      	adds	r7, #56	; 0x38
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	080129d8 	.word	0x080129d8
 8005c0c:	08012a6c 	.word	0x08012a6c
 8005c10:	2000037c 	.word	0x2000037c
 8005c14:	20000200 	.word	0x20000200
 8005c18:	20000004 	.word	0x20000004
 8005c1c:	080125c0 	.word	0x080125c0
 8005c20:	080125dc 	.word	0x080125dc
 8005c24:	08011380 	.word	0x08011380
 8005c28:	08012a04 	.word	0x08012a04
 8005c2c:	08012a34 	.word	0x08012a34
 8005c30:	08012634 	.word	0x08012634

08005c34 <TinyBMS_CAN_ReadOnlineStatus>:
 * 						 	        [UINT16]
 * 						   0x91 - Charging [INFO], 0x92 - Fully Charged [INFO]
 * 						   0x93 - Discharging [INFO], 0x94 - Regeneration [INFO]
 * 						   0x97 - Idle [INFO], 0x9B - Fault [ERROR]
 */
uint16_t TinyBMS_CAN_ReadOnlineStatus(CAN_HandleTypeDef *hcan) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08e      	sub	sp, #56	; 0x38
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadOnlineStatus\r\n");
 8005c3c:	4863      	ldr	r0, [pc, #396]	; (8005dcc <TinyBMS_CAN_ReadOnlineStatus+0x198>)
 8005c3e:	f008 fa75 	bl	800e12c <puts>
	uint16_t retval = CMD_FAILURE;
 8005c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c46:	86fb      	strh	r3, [r7, #54]	; 0x36

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_ONLINE_STATUS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005c48:	4a61      	ldr	r2, [pc, #388]	; (8005dd0 <TinyBMS_CAN_ReadOnlineStatus+0x19c>)
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c52:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005c5c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	4619      	mov	r1, r3
 8005c66:	2000      	movs	r0, #0
 8005c68:	f003 fb12 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005c6c:	e0a1      	b.n	8005db2 <TinyBMS_CAN_ReadOnlineStatus+0x17e>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8005c6e:	f107 0214 	add.w	r2, r7, #20
 8005c72:	4b58      	ldr	r3, [pc, #352]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005c74:	2100      	movs	r1, #0
 8005c76:	4858      	ldr	r0, [pc, #352]	; (8005dd8 <TinyBMS_CAN_ReadOnlineStatus+0x1a4>)
 8005c78:	f004 fa4f 	bl	800a11a <HAL_CAN_GetRxMessage>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <TinyBMS_CAN_ReadOnlineStatus+0x52>
			Error_Handler();
 8005c82:	f003 fc7d 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005c86:	f240 4103 	movw	r1, #1027	; 0x403
 8005c8a:	4853      	ldr	r0, [pc, #332]	; (8005dd8 <TinyBMS_CAN_ReadOnlineStatus+0x1a4>)
 8005c8c:	f004 fb7f 	bl	800a38e <HAL_CAN_ActivateNotification>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <TinyBMS_CAN_ReadOnlineStatus+0x66>
			Error_Handler();
 8005c96:	f003 fc73 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4b4f      	ldr	r3, [pc, #316]	; (8005ddc <TinyBMS_CAN_ReadOnlineStatus+0x1a8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	f040 8086 	bne.w	8005db2 <TinyBMS_CAN_ReadOnlineStatus+0x17e>
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 8082 	bne.w	8005db2 <TinyBMS_CAN_ReadOnlineStatus+0x17e>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8005cae:	4b49      	ldr	r3, [pc, #292]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d115      	bne.n	8005ce2 <TinyBMS_CAN_ReadOnlineStatus+0xae>
				printf("Response from BMS [Error]\r\n");
 8005cb6:	484a      	ldr	r0, [pc, #296]	; (8005de0 <TinyBMS_CAN_ReadOnlineStatus+0x1ac>)
 8005cb8:	f008 fa38 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8005cbc:	4b45      	ldr	r3, [pc, #276]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4b44      	ldr	r3, [pc, #272]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005cc4:	789b      	ldrb	r3, [r3, #2]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4846      	ldr	r0, [pc, #280]	; (8005de4 <TinyBMS_CAN_ReadOnlineStatus+0x1b0>)
 8005cca:	f008 f9a9 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8005cce:	4b41      	ldr	r3, [pc, #260]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005cd0:	789b      	ldrb	r3, [r3, #2]
 8005cd2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				reportBMSError(error);
 8005cd6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 f892 	bl	8006e04 <reportBMSError>
 8005ce0:	e067      	b.n	8005db2 <TinyBMS_CAN_ReadOnlineStatus+0x17e>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_ONLINE_STATUS)) {
 8005ce2:	4b3c      	ldr	r3, [pc, #240]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d160      	bne.n	8005dac <TinyBMS_CAN_ReadOnlineStatus+0x178>
 8005cea:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b18      	cmp	r3, #24
 8005cf0:	d15c      	bne.n	8005dac <TinyBMS_CAN_ReadOnlineStatus+0x178>
				printf("Response from BMS [OK]\r\n");
 8005cf2:	483d      	ldr	r0, [pc, #244]	; (8005de8 <TinyBMS_CAN_ReadOnlineStatus+0x1b4>)
 8005cf4:	f008 fa1a 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_ONLINE_STATUS | CMD: 0x%02X\r\n", rx_buffer[1]);
 8005cf8:	4b36      	ldr	r3, [pc, #216]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	483b      	ldr	r0, [pc, #236]	; (8005dec <TinyBMS_CAN_ReadOnlineStatus+0x1b8>)
 8005d00:	f008 f98e 	bl	800e020 <iprintf>
				uint16_t onlineStatus = ((rx_buffer[3] << 8) | (rx_buffer[2]));
 8005d04:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005d06:	78db      	ldrb	r3, [r3, #3]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	b21a      	sxth	r2, r3
 8005d0c:	4b31      	ldr	r3, [pc, #196]	; (8005dd4 <TinyBMS_CAN_ReadOnlineStatus+0x1a0>)
 8005d0e:	789b      	ldrb	r3, [r3, #2]
 8005d10:	b21b      	sxth	r3, r3
 8005d12:	4313      	orrs	r3, r2
 8005d14:	b21b      	sxth	r3, r3
 8005d16:	867b      	strh	r3, [r7, #50]	; 0x32

				switch(onlineStatus) {
 8005d18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d1a:	3b91      	subs	r3, #145	; 0x91
 8005d1c:	2b0a      	cmp	r3, #10
 8005d1e:	d83d      	bhi.n	8005d9c <TinyBMS_CAN_ReadOnlineStatus+0x168>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <TinyBMS_CAN_ReadOnlineStatus+0xf4>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005d6d 	.word	0x08005d6d
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d9d 	.word	0x08005d9d
 8005d3c:	08005d79 	.word	0x08005d79
 8005d40:	08005d85 	.word	0x08005d85
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d9d 	.word	0x08005d9d
 8005d50:	08005d91 	.word	0x08005d91
				case TINYBMS_STATUS_CHARGING:
					printf("TinyBMS Online Status: 0x%02X - Charging [INFO]\r\n", onlineStatus);
 8005d54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d56:	4619      	mov	r1, r3
 8005d58:	4825      	ldr	r0, [pc, #148]	; (8005df0 <TinyBMS_CAN_ReadOnlineStatus+0x1bc>)
 8005d5a:	f008 f961 	bl	800e020 <iprintf>
					break;
 8005d5e:	e022      	b.n	8005da6 <TinyBMS_CAN_ReadOnlineStatus+0x172>
				case TINYBMS_STATUS_FULLYCHARGED:
					printf("TinyBMS Online Status: 0x%02X - Fully Charged [INFO]\r\n", onlineStatus);
 8005d60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d62:	4619      	mov	r1, r3
 8005d64:	4823      	ldr	r0, [pc, #140]	; (8005df4 <TinyBMS_CAN_ReadOnlineStatus+0x1c0>)
 8005d66:	f008 f95b 	bl	800e020 <iprintf>
					break;
 8005d6a:	e01c      	b.n	8005da6 <TinyBMS_CAN_ReadOnlineStatus+0x172>
				case TINYBMS_STATUS_DISCHARGING:
					printf("TinyBMS Online Status: 0x%02X - Discharging [INFO]\r\n", onlineStatus);
 8005d6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4821      	ldr	r0, [pc, #132]	; (8005df8 <TinyBMS_CAN_ReadOnlineStatus+0x1c4>)
 8005d72:	f008 f955 	bl	800e020 <iprintf>
					break;
 8005d76:	e016      	b.n	8005da6 <TinyBMS_CAN_ReadOnlineStatus+0x172>
				case TINYBMS_STATUS_REGENERATION:
					printf("TinyBMS Online Status: 0x%02X - Regeneration [INFO]\r\n", onlineStatus);
 8005d78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	481f      	ldr	r0, [pc, #124]	; (8005dfc <TinyBMS_CAN_ReadOnlineStatus+0x1c8>)
 8005d7e:	f008 f94f 	bl	800e020 <iprintf>
					break;
 8005d82:	e010      	b.n	8005da6 <TinyBMS_CAN_ReadOnlineStatus+0x172>
				case TINYBMS_STATUS_IDLE:
					printf("TinyBMS Online Status: 0x%02X - Idle [INFO]\r\n", onlineStatus);
 8005d84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d86:	4619      	mov	r1, r3
 8005d88:	481d      	ldr	r0, [pc, #116]	; (8005e00 <TinyBMS_CAN_ReadOnlineStatus+0x1cc>)
 8005d8a:	f008 f949 	bl	800e020 <iprintf>
					break;
 8005d8e:	e00a      	b.n	8005da6 <TinyBMS_CAN_ReadOnlineStatus+0x172>
				case TINYBMS_STATUS_FAULT:
					printf("TinyBMS Online Status: 0x%02X - Fault [Error]\r\n", onlineStatus);
 8005d90:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d92:	4619      	mov	r1, r3
 8005d94:	481b      	ldr	r0, [pc, #108]	; (8005e04 <TinyBMS_CAN_ReadOnlineStatus+0x1d0>)
 8005d96:	f008 f943 	bl	800e020 <iprintf>
					break;
 8005d9a:	e004      	b.n	8005da6 <TinyBMS_CAN_ReadOnlineStatus+0x172>
				default:
					printf("Invalid TinyBMS OnlineStatus received\r\n");
 8005d9c:	481a      	ldr	r0, [pc, #104]	; (8005e08 <TinyBMS_CAN_ReadOnlineStatus+0x1d4>)
 8005d9e:	f008 f9c5 	bl	800e12c <puts>
					return retval;
 8005da2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005da4:	e00e      	b.n	8005dc4 <TinyBMS_CAN_ReadOnlineStatus+0x190>
				}
				retval = onlineStatus;
 8005da6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005da8:	86fb      	strh	r3, [r7, #54]	; 0x36
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_ONLINE_STATUS)) {
 8005daa:	e002      	b.n	8005db2 <TinyBMS_CAN_ReadOnlineStatus+0x17e>

			} else {
				printf("Data Corruption\r\n");
 8005dac:	4817      	ldr	r0, [pc, #92]	; (8005e0c <TinyBMS_CAN_ReadOnlineStatus+0x1d8>)
 8005dae:	f008 f9bd 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005db2:	2100      	movs	r1, #0
 8005db4:	4808      	ldr	r0, [pc, #32]	; (8005dd8 <TinyBMS_CAN_ReadOnlineStatus+0x1a4>)
 8005db6:	f004 fac2 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f47f af56 	bne.w	8005c6e <TinyBMS_CAN_ReadOnlineStatus+0x3a>
			}
		}
	}

	return retval;
 8005dc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3738      	adds	r7, #56	; 0x38
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	08012a74 	.word	0x08012a74
 8005dd0:	08012c24 	.word	0x08012c24
 8005dd4:	2000037c 	.word	0x2000037c
 8005dd8:	20000200 	.word	0x20000200
 8005ddc:	20000004 	.word	0x20000004
 8005de0:	080125c0 	.word	0x080125c0
 8005de4:	080125dc 	.word	0x080125dc
 8005de8:	08011380 	.word	0x08011380
 8005dec:	08012a94 	.word	0x08012a94
 8005df0:	08012ac0 	.word	0x08012ac0
 8005df4:	08012af4 	.word	0x08012af4
 8005df8:	08012b2c 	.word	0x08012b2c
 8005dfc:	08012b64 	.word	0x08012b64
 8005e00:	08012b9c 	.word	0x08012b9c
 8005e04:	08012bcc 	.word	0x08012bcc
 8005e08:	08012bfc 	.word	0x08012bfc
 8005e0c:	08012634 	.word	0x08012634

08005e10 <TinyBMS_CAN_ReadLifetimeCounter>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_CAN_ReadLifetimeCounter(CAN_HandleTypeDef *hcan) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b090      	sub	sp, #64	; 0x40
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadLifetimeCounter\r\n");
 8005e18:	4843      	ldr	r0, [pc, #268]	; (8005f28 <TinyBMS_CAN_ReadLifetimeCounter+0x118>)
 8005e1a:	f008 f987 	bl	800e12c <puts>
	uint32_t retval = CMD_FAILURE;
 8005e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e22:	63fb      	str	r3, [r7, #60]	; 0x3c

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_LIFETIME_COUNTER, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005e24:	4a41      	ldr	r2, [pc, #260]	; (8005f2c <TinyBMS_CAN_ReadLifetimeCounter+0x11c>)
 8005e26:	f107 030c 	add.w	r3, r7, #12
 8005e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e2e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005e38:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005e3c:	f107 030c 	add.w	r3, r7, #12
 8005e40:	4619      	mov	r1, r3
 8005e42:	2000      	movs	r0, #0
 8005e44:	f003 fa24 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005e48:	e061      	b.n	8005f0e <TinyBMS_CAN_ReadLifetimeCounter+0xfe>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8005e4a:	f107 0214 	add.w	r2, r7, #20
 8005e4e:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005e50:	2100      	movs	r1, #0
 8005e52:	4838      	ldr	r0, [pc, #224]	; (8005f34 <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 8005e54:	f004 f961 	bl	800a11a <HAL_CAN_GetRxMessage>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <TinyBMS_CAN_ReadLifetimeCounter+0x52>
			Error_Handler();
 8005e5e:	f003 fb8f 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005e62:	f240 4103 	movw	r1, #1027	; 0x403
 8005e66:	4833      	ldr	r0, [pc, #204]	; (8005f34 <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 8005e68:	f004 fa91 	bl	800a38e <HAL_CAN_ActivateNotification>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <TinyBMS_CAN_ReadLifetimeCounter+0x66>
			Error_Handler();
 8005e72:	f003 fb85 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <TinyBMS_CAN_ReadLifetimeCounter+0x128>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d146      	bne.n	8005f0e <TinyBMS_CAN_ReadLifetimeCounter+0xfe>
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d143      	bne.n	8005f0e <TinyBMS_CAN_ReadLifetimeCounter+0xfe>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8005e86:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d115      	bne.n	8005eba <TinyBMS_CAN_ReadLifetimeCounter+0xaa>
				printf("Response from BMS [Error]\r\n");
 8005e8e:	482b      	ldr	r0, [pc, #172]	; (8005f3c <TinyBMS_CAN_ReadLifetimeCounter+0x12c>)
 8005e90:	f008 f94c 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8005e94:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005e9c:	789b      	ldrb	r3, [r3, #2]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	4827      	ldr	r0, [pc, #156]	; (8005f40 <TinyBMS_CAN_ReadLifetimeCounter+0x130>)
 8005ea2:	f008 f8bd 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8005ea6:	4b22      	ldr	r3, [pc, #136]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005ea8:	789b      	ldrb	r3, [r3, #2]
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				reportBMSError(error);
 8005eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 ffa6 	bl	8006e04 <reportBMSError>
 8005eb8:	e029      	b.n	8005f0e <TinyBMS_CAN_ReadLifetimeCounter+0xfe>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_LIFETIME_COUNTER)) {
 8005eba:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d122      	bne.n	8005f08 <TinyBMS_CAN_ReadLifetimeCounter+0xf8>
 8005ec2:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b19      	cmp	r3, #25
 8005ec8:	d11e      	bne.n	8005f08 <TinyBMS_CAN_ReadLifetimeCounter+0xf8>
				printf("Response from BMS [OK]\r\n");
 8005eca:	481e      	ldr	r0, [pc, #120]	; (8005f44 <TinyBMS_CAN_ReadLifetimeCounter+0x134>)
 8005ecc:	f008 f92e 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_LIFETIME_COUNTER | CMD: 0x%02X\r\n", rx_buffer[1]);
 8005ed0:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	481c      	ldr	r0, [pc, #112]	; (8005f48 <TinyBMS_CAN_ReadLifetimeCounter+0x138>)
 8005ed8:	f008 f8a2 	bl	800e020 <iprintf>
				uint32_t lifetimeCounter = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8005edc:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005ede:	795b      	ldrb	r3, [r3, #5]
 8005ee0:	061a      	lsls	r2, r3, #24
 8005ee2:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005ee4:	791b      	ldrb	r3, [r3, #4]
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005eec:	78db      	ldrb	r3, [r3, #3]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	4a0f      	ldr	r2, [pc, #60]	; (8005f30 <TinyBMS_CAN_ReadLifetimeCounter+0x120>)
 8005ef4:	7892      	ldrb	r2, [r2, #2]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
				printf("TinyBMS Lifetime Counter: %lu (s)\r\n", lifetimeCounter);
 8005efa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005efc:	4813      	ldr	r0, [pc, #76]	; (8005f4c <TinyBMS_CAN_ReadLifetimeCounter+0x13c>)
 8005efe:	f008 f88f 	bl	800e020 <iprintf>
				retval = lifetimeCounter;
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_LIFETIME_COUNTER)) {
 8005f06:	e002      	b.n	8005f0e <TinyBMS_CAN_ReadLifetimeCounter+0xfe>

			} else {
				printf("Data Corruption\r\n");
 8005f08:	4811      	ldr	r0, [pc, #68]	; (8005f50 <TinyBMS_CAN_ReadLifetimeCounter+0x140>)
 8005f0a:	f008 f90f 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4808      	ldr	r0, [pc, #32]	; (8005f34 <TinyBMS_CAN_ReadLifetimeCounter+0x124>)
 8005f12:	f004 fa14 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d196      	bne.n	8005e4a <TinyBMS_CAN_ReadLifetimeCounter+0x3a>
			}
		}
	}

	return retval;
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3740      	adds	r7, #64	; 0x40
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	08012c2c 	.word	0x08012c2c
 8005f2c:	08012c80 	.word	0x08012c80
 8005f30:	2000037c 	.word	0x2000037c
 8005f34:	20000200 	.word	0x20000200
 8005f38:	20000004 	.word	0x20000004
 8005f3c:	080125c0 	.word	0x080125c0
 8005f40:	080125dc 	.word	0x080125dc
 8005f44:	08011380 	.word	0x08011380
 8005f48:	08012c50 	.word	0x08012c50
 8005f4c:	08011e04 	.word	0x08011e04
 8005f50:	08012634 	.word	0x08012634

08005f54 <TinyBMS_CAN_ReadEstimatedSOCValue>:
 * @note				-  				Response from BMS [OK]:
 * 						 	  Byte3      Byte4 	Byte5 	Byte6		Byte5 	Byte6
 * 						 	  DATA:LSB   DATA	DATA	DATA:MSB   	CRC:LSB CRC:MSB
 * 						 	        	  [UINT32]
 */
uint32_t TinyBMS_CAN_ReadEstimatedSOCValue(CAN_HandleTypeDef *hcan) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b090      	sub	sp, #64	; 0x40
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadEstimatedSOCValue\r\n");
 8005f5c:	4843      	ldr	r0, [pc, #268]	; (800606c <TinyBMS_CAN_ReadEstimatedSOCValue+0x118>)
 8005f5e:	f008 f8e5 	bl	800e12c <puts>
	uint32_t retval = CMD_FAILURE;
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_EST_SOC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005f68:	4a41      	ldr	r2, [pc, #260]	; (8006070 <TinyBMS_CAN_ReadEstimatedSOCValue+0x11c>)
 8005f6a:	f107 030c 	add.w	r3, r7, #12
 8005f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f72:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8005f7c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005f80:	f107 030c 	add.w	r3, r7, #12
 8005f84:	4619      	mov	r1, r3
 8005f86:	2000      	movs	r0, #0
 8005f88:	f003 f982 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8005f8c:	e061      	b.n	8006052 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfe>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8005f8e:	f107 0214 	add.w	r2, r7, #20
 8005f92:	4b38      	ldr	r3, [pc, #224]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8005f94:	2100      	movs	r1, #0
 8005f96:	4838      	ldr	r0, [pc, #224]	; (8006078 <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8005f98:	f004 f8bf 	bl	800a11a <HAL_CAN_GetRxMessage>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <TinyBMS_CAN_ReadEstimatedSOCValue+0x52>
			Error_Handler();
 8005fa2:	f003 faed 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8005fa6:	f240 4103 	movw	r1, #1027	; 0x403
 8005faa:	4833      	ldr	r0, [pc, #204]	; (8006078 <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8005fac:	f004 f9ef 	bl	800a38e <HAL_CAN_ActivateNotification>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <TinyBMS_CAN_ReadEstimatedSOCValue+0x66>
			Error_Handler();
 8005fb6:	f003 fae3 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4b2f      	ldr	r3, [pc, #188]	; (800607c <TinyBMS_CAN_ReadEstimatedSOCValue+0x128>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d146      	bne.n	8006052 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfe>
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d143      	bne.n	8006052 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfe>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8005fca:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d115      	bne.n	8005ffe <TinyBMS_CAN_ReadEstimatedSOCValue+0xaa>
				printf("Response from BMS [Error]\r\n");
 8005fd2:	482b      	ldr	r0, [pc, #172]	; (8006080 <TinyBMS_CAN_ReadEstimatedSOCValue+0x12c>)
 8005fd4:	f008 f8aa 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8005fd8:	4b26      	ldr	r3, [pc, #152]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8005fe0:	789b      	ldrb	r3, [r3, #2]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4827      	ldr	r0, [pc, #156]	; (8006084 <TinyBMS_CAN_ReadEstimatedSOCValue+0x130>)
 8005fe6:	f008 f81b 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8005fea:	4b22      	ldr	r3, [pc, #136]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8005fec:	789b      	ldrb	r3, [r3, #2]
 8005fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				reportBMSError(error);
 8005ff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 ff04 	bl	8006e04 <reportBMSError>
 8005ffc:	e029      	b.n	8006052 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfe>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_EST_SOC)) {
 8005ffe:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d122      	bne.n	800604c <TinyBMS_CAN_ReadEstimatedSOCValue+0xf8>
 8006006:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b1a      	cmp	r3, #26
 800600c:	d11e      	bne.n	800604c <TinyBMS_CAN_ReadEstimatedSOCValue+0xf8>
				printf("Response from BMS [OK]\r\n");
 800600e:	481e      	ldr	r0, [pc, #120]	; (8006088 <TinyBMS_CAN_ReadEstimatedSOCValue+0x134>)
 8006010:	f008 f88c 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_EST_SOC | CMD: 0x%02X\r\n", rx_buffer[1]);
 8006014:	4b17      	ldr	r3, [pc, #92]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	4619      	mov	r1, r3
 800601a:	481c      	ldr	r0, [pc, #112]	; (800608c <TinyBMS_CAN_ReadEstimatedSOCValue+0x138>)
 800601c:	f008 f800 	bl	800e020 <iprintf>
				uint32_t estSOC = ((rx_buffer[5] << 24) | (rx_buffer[4] << 16) | (rx_buffer[3] << 8) | (rx_buffer[2]));
 8006020:	4b14      	ldr	r3, [pc, #80]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8006022:	795b      	ldrb	r3, [r3, #5]
 8006024:	061a      	lsls	r2, r3, #24
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8006028:	791b      	ldrb	r3, [r3, #4]
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	431a      	orrs	r2, r3
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8006030:	78db      	ldrb	r3, [r3, #3]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	4313      	orrs	r3, r2
 8006036:	4a0f      	ldr	r2, [pc, #60]	; (8006074 <TinyBMS_CAN_ReadEstimatedSOCValue+0x120>)
 8006038:	7892      	ldrb	r2, [r2, #2]
 800603a:	4313      	orrs	r3, r2
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
				printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 800603e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006040:	4813      	ldr	r0, [pc, #76]	; (8006090 <TinyBMS_CAN_ReadEstimatedSOCValue+0x13c>)
 8006042:	f007 ffed 	bl	800e020 <iprintf>
				retval = estSOC;
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_EST_SOC)) {
 800604a:	e002      	b.n	8006052 <TinyBMS_CAN_ReadEstimatedSOCValue+0xfe>

			} else {
				printf("Data Corruption\r\n");
 800604c:	4811      	ldr	r0, [pc, #68]	; (8006094 <TinyBMS_CAN_ReadEstimatedSOCValue+0x140>)
 800604e:	f008 f86d 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006052:	2100      	movs	r1, #0
 8006054:	4808      	ldr	r0, [pc, #32]	; (8006078 <TinyBMS_CAN_ReadEstimatedSOCValue+0x124>)
 8006056:	f004 f972 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d196      	bne.n	8005f8e <TinyBMS_CAN_ReadEstimatedSOCValue+0x3a>

			}
		}
	}

	return retval;
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006062:	4618      	mov	r0, r3
 8006064:	3740      	adds	r7, #64	; 0x40
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	08012c88 	.word	0x08012c88
 8006070:	08012d18 	.word	0x08012d18
 8006074:	2000037c 	.word	0x2000037c
 8006078:	20000200 	.word	0x20000200
 800607c:	20000004 	.word	0x20000004
 8006080:	080125c0 	.word	0x080125c0
 8006084:	080125dc 	.word	0x080125dc
 8006088:	08011380 	.word	0x08011380
 800608c:	08012cac 	.word	0x08012cac
 8006090:	08012cd4 	.word	0x08012cd4
 8006094:	08012634 	.word	0x08012634

08006098 <TinyBMS_CAN_ReadDeviceTemperatures>:
 * 						 	      [INT16]				   [INT16] 				  [INT16]
 * 						  	(Reg 48) DATA1 - TinyBMS Internal Temperature
 * 						  	(Reg 42) DATA2 - External Temp Sensor #1 (value of -327689 if NC)
 * 						  	(Reg 43) DATA3 - External Temp Sensor #2 (value of -327689 if NC)
 */
uint8_t TinyBMS_CAN_ReadDeviceTemperatures(CAN_HandleTypeDef *hcan) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b08e      	sub	sp, #56	; 0x38
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadDeviceTemperatures\r\n");
 80060a0:	4870      	ldr	r0, [pc, #448]	; (8006264 <TinyBMS_CAN_ReadDeviceTemperatures+0x1cc>)
 80060a2:	f008 f843 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 80060a6:	23ff      	movs	r3, #255	; 0xff
 80060a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t msg_count = 1, pl = 0;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80060b2:	2300      	movs	r3, #0
 80060b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_TEMPS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80060b8:	4a6b      	ldr	r2, [pc, #428]	; (8006268 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d0>)
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060c2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80060cc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80060d0:	f107 0308 	add.w	r3, r7, #8
 80060d4:	4619      	mov	r1, r3
 80060d6:	2000      	movs	r0, #0
 80060d8:	f003 f8da 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80060dc:	e0b4      	b.n	8006248 <TinyBMS_CAN_ReadDeviceTemperatures+0x1b0>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 80060de:	f107 0210 	add.w	r2, r7, #16
 80060e2:	4b62      	ldr	r3, [pc, #392]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 80060e4:	2100      	movs	r1, #0
 80060e6:	4862      	ldr	r0, [pc, #392]	; (8006270 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d8>)
 80060e8:	f004 f817 	bl	800a11a <HAL_CAN_GetRxMessage>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <TinyBMS_CAN_ReadDeviceTemperatures+0x5e>
			Error_Handler();
 80060f2:	f003 fa45 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80060f6:	f240 4103 	movw	r1, #1027	; 0x403
 80060fa:	485d      	ldr	r0, [pc, #372]	; (8006270 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d8>)
 80060fc:	f004 f947 	bl	800a38e <HAL_CAN_ActivateNotification>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <TinyBMS_CAN_ReadDeviceTemperatures+0x72>
			Error_Handler();
 8006106:	f003 fa3b 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4b59      	ldr	r3, [pc, #356]	; (8006274 <TinyBMS_CAN_ReadDeviceTemperatures+0x1dc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	f040 8099 	bne.w	8006248 <TinyBMS_CAN_ReadDeviceTemperatures+0x1b0>
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 8095 	bne.w	8006248 <TinyBMS_CAN_ReadDeviceTemperatures+0x1b0>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 800611e:	4b53      	ldr	r3, [pc, #332]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d115      	bne.n	8006152 <TinyBMS_CAN_ReadDeviceTemperatures+0xba>
				printf("Response from BMS [Error]\r\n");
 8006126:	4854      	ldr	r0, [pc, #336]	; (8006278 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e0>)
 8006128:	f008 f800 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 800612c:	4b4f      	ldr	r3, [pc, #316]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	4619      	mov	r1, r3
 8006132:	4b4e      	ldr	r3, [pc, #312]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006134:	789b      	ldrb	r3, [r3, #2]
 8006136:	461a      	mov	r2, r3
 8006138:	4850      	ldr	r0, [pc, #320]	; (800627c <TinyBMS_CAN_ReadDeviceTemperatures+0x1e4>)
 800613a:	f007 ff71 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 800613e:	4b4b      	ldr	r3, [pc, #300]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006140:	789b      	ldrb	r3, [r3, #2]
 8006142:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				reportBMSError(error);
 8006146:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fe5a 	bl	8006e04 <reportBMSError>
 8006150:	e07a      	b.n	8006248 <TinyBMS_CAN_ReadDeviceTemperatures+0x1b0>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_TEMPS)) {
 8006152:	4b46      	ldr	r3, [pc, #280]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d173      	bne.n	8006242 <TinyBMS_CAN_ReadDeviceTemperatures+0x1aa>
 800615a:	4b44      	ldr	r3, [pc, #272]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	2b1b      	cmp	r3, #27
 8006160:	d16f      	bne.n	8006242 <TinyBMS_CAN_ReadDeviceTemperatures+0x1aa>
				if(msg_count == 1) {
 8006162:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006166:	2b01      	cmp	r3, #1
 8006168:	d108      	bne.n	800617c <TinyBMS_CAN_ReadDeviceTemperatures+0xe4>
					printf("Response from BMS [OK]\r\n");
 800616a:	4845      	ldr	r0, [pc, #276]	; (8006280 <TinyBMS_CAN_ReadDeviceTemperatures+0x1e8>)
 800616c:	f007 ffde 	bl	800e12c <puts>
					printf("CAN_TBMS_READ_TEMPS | CMD: 0x%02X\r\n", rx_buffer[1]);
 8006170:	4b3e      	ldr	r3, [pc, #248]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	4619      	mov	r1, r3
 8006176:	4843      	ldr	r0, [pc, #268]	; (8006284 <TinyBMS_CAN_ReadDeviceTemperatures+0x1ec>)
 8006178:	f007 ff52 	bl	800e020 <iprintf>
				}
				pl = rx_buffer[2];
 800617c:	4b3b      	ldr	r3, [pc, #236]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 800617e:	789b      	ldrb	r3, [r3, #2]
 8006180:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				retval = CMD_SUCCESS;
 8006184:	2300      	movs	r3, #0
 8006186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				//MSG1
				if((pl == 2) && (rx_buffer[5] == 0x00)) {
 800618a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800618e:	2b02      	cmp	r3, #2
 8006190:	d118      	bne.n	80061c4 <TinyBMS_CAN_ReadDeviceTemperatures+0x12c>
 8006192:	4b36      	ldr	r3, [pc, #216]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006194:	795b      	ldrb	r3, [r3, #5]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d114      	bne.n	80061c4 <TinyBMS_CAN_ReadDeviceTemperatures+0x12c>
					int16_t temp1 = ((rx_buffer[4] << 8) | (rx_buffer[3]));
 800619a:	4b34      	ldr	r3, [pc, #208]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 800619c:	791b      	ldrb	r3, [r3, #4]
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	b21a      	sxth	r2, r3
 80061a2:	4b32      	ldr	r3, [pc, #200]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	b21b      	sxth	r3, r3
 80061a8:	4313      	orrs	r3, r2
 80061aa:	867b      	strh	r3, [r7, #50]	; 0x32
					printf("TinyBMS Internal Temp:   %d (°C)\r\n", temp1);
 80061ac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80061b0:	4619      	mov	r1, r3
 80061b2:	4835      	ldr	r0, [pc, #212]	; (8006288 <TinyBMS_CAN_ReadDeviceTemperatures+0x1f0>)
 80061b4:	f007 ff34 	bl	800e020 <iprintf>
					msg_count++;
 80061b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80061bc:	3301      	adds	r3, #1
 80061be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if((pl == 2) && (rx_buffer[5] == 0x00)) {
 80061c2:	e03d      	b.n	8006240 <TinyBMS_CAN_ReadDeviceTemperatures+0x1a8>

				//MSG2
				} else if((pl == 2) && (rx_buffer[5] == 0x01)) {
 80061c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d118      	bne.n	80061fe <TinyBMS_CAN_ReadDeviceTemperatures+0x166>
 80061cc:	4b27      	ldr	r3, [pc, #156]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 80061ce:	795b      	ldrb	r3, [r3, #5]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d114      	bne.n	80061fe <TinyBMS_CAN_ReadDeviceTemperatures+0x166>
					int16_t temp2 = ((rx_buffer[4] << 8) | (rx_buffer[3]));
 80061d4:	4b25      	ldr	r3, [pc, #148]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 80061d6:	791b      	ldrb	r3, [r3, #4]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	b21a      	sxth	r2, r3
 80061dc:	4b23      	ldr	r3, [pc, #140]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 80061de:	78db      	ldrb	r3, [r3, #3]
 80061e0:	b21b      	sxth	r3, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	863b      	strh	r3, [r7, #48]	; 0x30
					printf("TinyBMS External Temp 1: %d (°C)\r\n", temp2);
 80061e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80061ea:	4619      	mov	r1, r3
 80061ec:	4827      	ldr	r0, [pc, #156]	; (800628c <TinyBMS_CAN_ReadDeviceTemperatures+0x1f4>)
 80061ee:	f007 ff17 	bl	800e020 <iprintf>
					msg_count++;
 80061f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80061f6:	3301      	adds	r3, #1
 80061f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				} else if((pl == 2) && (rx_buffer[5] == 0x01)) {
 80061fc:	e020      	b.n	8006240 <TinyBMS_CAN_ReadDeviceTemperatures+0x1a8>

				//MSG3
				} else if((pl == 2) && (rx_buffer[5] == 0x02)) {
 80061fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006202:	2b02      	cmp	r3, #2
 8006204:	d113      	bne.n	800622e <TinyBMS_CAN_ReadDeviceTemperatures+0x196>
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006208:	795b      	ldrb	r3, [r3, #5]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d10f      	bne.n	800622e <TinyBMS_CAN_ReadDeviceTemperatures+0x196>
					int16_t temp3 = ((rx_buffer[4] << 8) | (rx_buffer[3]));
 800620e:	4b17      	ldr	r3, [pc, #92]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006210:	791b      	ldrb	r3, [r3, #4]
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	b21a      	sxth	r2, r3
 8006216:	4b15      	ldr	r3, [pc, #84]	; (800626c <TinyBMS_CAN_ReadDeviceTemperatures+0x1d4>)
 8006218:	78db      	ldrb	r3, [r3, #3]
 800621a:	b21b      	sxth	r3, r3
 800621c:	4313      	orrs	r3, r2
 800621e:	85fb      	strh	r3, [r7, #46]	; 0x2e
					printf("TinyBMS External Temp 2: %d (°C)\r\n", temp3);
 8006220:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006224:	4619      	mov	r1, r3
 8006226:	481a      	ldr	r0, [pc, #104]	; (8006290 <TinyBMS_CAN_ReadDeviceTemperatures+0x1f8>)
 8006228:	f007 fefa 	bl	800e020 <iprintf>
				} else if((pl == 2) && (rx_buffer[5] == 0x02)) {
 800622c:	e008      	b.n	8006240 <TinyBMS_CAN_ReadDeviceTemperatures+0x1a8>

				} else {
					printf("Data Corruption\r\n");
 800622e:	4819      	ldr	r0, [pc, #100]	; (8006294 <TinyBMS_CAN_ReadDeviceTemperatures+0x1fc>)
 8006230:	f007 ff7c 	bl	800e12c <puts>
					retval = CMD_FAILURE;
 8006234:	23ff      	movs	r3, #255	; 0xff
 8006236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					return retval;
 800623a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800623e:	e00d      	b.n	800625c <TinyBMS_CAN_ReadDeviceTemperatures+0x1c4>
				if((pl == 2) && (rx_buffer[5] == 0x00)) {
 8006240:	e002      	b.n	8006248 <TinyBMS_CAN_ReadDeviceTemperatures+0x1b0>
				}

			} else {
				printf("Data Corruption\r\n");
 8006242:	4814      	ldr	r0, [pc, #80]	; (8006294 <TinyBMS_CAN_ReadDeviceTemperatures+0x1fc>)
 8006244:	f007 ff72 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006248:	2100      	movs	r1, #0
 800624a:	4809      	ldr	r0, [pc, #36]	; (8006270 <TinyBMS_CAN_ReadDeviceTemperatures+0x1d8>)
 800624c:	f004 f877 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	f47f af43 	bne.w	80060de <TinyBMS_CAN_ReadDeviceTemperatures+0x46>
			}
		}
	}

	return retval;
 8006258:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800625c:	4618      	mov	r0, r3
 800625e:	3738      	adds	r7, #56	; 0x38
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	08012d20 	.word	0x08012d20
 8006268:	08012dd4 	.word	0x08012dd4
 800626c:	2000037c 	.word	0x2000037c
 8006270:	20000200 	.word	0x20000200
 8006274:	20000004 	.word	0x20000004
 8006278:	080125c0 	.word	0x080125c0
 800627c:	080125dc 	.word	0x080125dc
 8006280:	08011380 	.word	0x08011380
 8006284:	08012d44 	.word	0x08012d44
 8006288:	08012d68 	.word	0x08012d68
 800628c:	08012d8c 	.word	0x08012d8c
 8006290:	08012db0 	.word	0x08012db0
 8006294:	08012634 	.word	0x08012634

08006298 <TinyBMS_CAN_ReadBatteryPackCellVoltages>:
 * @note				- 			Response from BMS [OK]:
 * 						 	  Byte n*2+2    Byte n*2+3 		Byte n*2+4 	Byte n*2+5
 * 						 	  DATAn:LSB   	DATAn:MSB   	CRC:LSB 	CRC:MSB
 * 						 	       	 [UINT16]
 */
uint8_t TinyBMS_CAN_ReadBatteryPackCellVoltages(CAN_HandleTypeDef *hcan) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b08e      	sub	sp, #56	; 0x38
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadBatteryPackCellVoltages\r\n");
 80062a0:	4858      	ldr	r0, [pc, #352]	; (8006404 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x16c>)
 80062a2:	f007 ff43 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 80062a6:	23ff      	movs	r3, #255	; 0xff
 80062a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t msg_count = 1, pl = 0;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80062b2:	2300      	movs	r3, #0
 80062b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint16_t cellVoltage = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	867b      	strh	r3, [r7, #50]	; 0x32

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_CELL_VOLTAGES, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80062bc:	4a52      	ldr	r2, [pc, #328]	; (8006408 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x170>)
 80062be:	f107 030c 	add.w	r3, r7, #12
 80062c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062c6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80062d0:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80062d4:	f107 030c 	add.w	r3, r7, #12
 80062d8:	4619      	mov	r1, r3
 80062da:	2000      	movs	r0, #0
 80062dc:	f002 ffd8 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80062e0:	e082      	b.n	80063e8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x150>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 80062e2:	f107 0214 	add.w	r2, r7, #20
 80062e6:	4b49      	ldr	r3, [pc, #292]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 80062e8:	2100      	movs	r1, #0
 80062ea:	4849      	ldr	r0, [pc, #292]	; (8006410 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 80062ec:	f003 ff15 	bl	800a11a <HAL_CAN_GetRxMessage>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x62>
			Error_Handler();
 80062f6:	f003 f943 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80062fa:	f240 4103 	movw	r1, #1027	; 0x403
 80062fe:	4844      	ldr	r0, [pc, #272]	; (8006410 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 8006300:	f004 f845 	bl	800a38e <HAL_CAN_ActivateNotification>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x76>
			Error_Handler();
 800630a:	f003 f939 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4b40      	ldr	r3, [pc, #256]	; (8006414 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x17c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d167      	bne.n	80063e8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x150>
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d164      	bne.n	80063e8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x150>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 800631e:	4b3b      	ldr	r3, [pc, #236]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d115      	bne.n	8006352 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0xba>
				printf("Response from BMS [Error]\r\n");
 8006326:	483c      	ldr	r0, [pc, #240]	; (8006418 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x180>)
 8006328:	f007 ff00 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 800632c:	4b37      	ldr	r3, [pc, #220]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	4619      	mov	r1, r3
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 8006334:	789b      	ldrb	r3, [r3, #2]
 8006336:	461a      	mov	r2, r3
 8006338:	4838      	ldr	r0, [pc, #224]	; (800641c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x184>)
 800633a:	f007 fe71 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 800633e:	4b33      	ldr	r3, [pc, #204]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 8006340:	789b      	ldrb	r3, [r3, #2]
 8006342:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				reportBMSError(error);
 8006346:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fd5a 	bl	8006e04 <reportBMSError>
 8006350:	e04a      	b.n	80063e8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x150>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_CELL_VOLTAGES)) {
 8006352:	4b2e      	ldr	r3, [pc, #184]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d143      	bne.n	80063e2 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14a>
 800635a:	4b2c      	ldr	r3, [pc, #176]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	2b1c      	cmp	r3, #28
 8006360:	d13f      	bne.n	80063e2 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x14a>
				if(msg_count == 1) {
 8006362:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006366:	2b01      	cmp	r3, #1
 8006368:	d108      	bne.n	800637c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0xe4>
					printf("Response from BMS [OK]\r\n");
 800636a:	482d      	ldr	r0, [pc, #180]	; (8006420 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x188>)
 800636c:	f007 fede 	bl	800e12c <puts>
					printf("CAN_TBMS_READ_CELL_VOLTAGES | CMD: 0x%02X\r\n", rx_buffer[1]);
 8006370:	4b26      	ldr	r3, [pc, #152]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	4619      	mov	r1, r3
 8006376:	482b      	ldr	r0, [pc, #172]	; (8006424 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x18c>)
 8006378:	f007 fe52 	bl	800e020 <iprintf>
				}
				pl = rx_buffer[2];
 800637c:	4b23      	ldr	r3, [pc, #140]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 800637e:	789b      	ldrb	r3, [r3, #2]
 8006380:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				//msg_count is equal to the cell_count
				if((pl == 2) && (rx_buffer[5] == (msg_count-1))) {
 8006384:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006388:	2b02      	cmp	r3, #2
 800638a:	d121      	bne.n	80063d0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x138>
 800638c:	4b1f      	ldr	r3, [pc, #124]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 800638e:	795b      	ldrb	r3, [r3, #5]
 8006390:	461a      	mov	r2, r3
 8006392:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006396:	3b01      	subs	r3, #1
 8006398:	429a      	cmp	r2, r3
 800639a:	d119      	bne.n	80063d0 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x138>
					cellVoltage = ((rx_buffer[4] << 8) | rx_buffer[3]);
 800639c:	4b1b      	ldr	r3, [pc, #108]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 800639e:	791b      	ldrb	r3, [r3, #4]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	b21a      	sxth	r2, r3
 80063a4:	4b19      	ldr	r3, [pc, #100]	; (800640c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x174>)
 80063a6:	78db      	ldrb	r3, [r3, #3]
 80063a8:	b21b      	sxth	r3, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	b21b      	sxth	r3, r3
 80063ae:	867b      	strh	r3, [r7, #50]	; 0x32
					printf("Secondary Battery Pack - Cell#: %u | Voltage: %u (0.1mV Resolution)\r\n", msg_count, cellVoltage);
 80063b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80063b4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80063b6:	4619      	mov	r1, r3
 80063b8:	481b      	ldr	r0, [pc, #108]	; (8006428 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x190>)
 80063ba:	f007 fe31 	bl	800e020 <iprintf>
					msg_count++;
 80063be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80063c2:	3301      	adds	r3, #1
 80063c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					retval = CMD_SUCCESS;
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if((pl == 2) && (rx_buffer[5] == (msg_count-1))) {
 80063ce:	e00b      	b.n	80063e8 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x150>

				} else {
					printf("Data Corruption\r\n");
 80063d0:	4816      	ldr	r0, [pc, #88]	; (800642c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x194>)
 80063d2:	f007 feab 	bl	800e12c <puts>
					retval = CMD_FAILURE;
 80063d6:	23ff      	movs	r3, #255	; 0xff
 80063d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					return retval;
 80063dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063e0:	e00c      	b.n	80063fc <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x164>
				}

			} else {
				printf("Data Corruption\r\n");
 80063e2:	4812      	ldr	r0, [pc, #72]	; (800642c <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x194>)
 80063e4:	f007 fea2 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80063e8:	2100      	movs	r1, #0
 80063ea:	4809      	ldr	r0, [pc, #36]	; (8006410 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x178>)
 80063ec:	f003 ffa7 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f47f af75 	bne.w	80062e2 <TinyBMS_CAN_ReadBatteryPackCellVoltages+0x4a>
			}
		}
	}

	return retval;
 80063f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3738      	adds	r7, #56	; 0x38
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	08012ddc 	.word	0x08012ddc
 8006408:	08012e7c 	.word	0x08012e7c
 800640c:	2000037c 	.word	0x2000037c
 8006410:	20000200 	.word	0x20000200
 8006414:	20000004 	.word	0x20000004
 8006418:	080125c0 	.word	0x080125c0
 800641c:	080125dc 	.word	0x080125dc
 8006420:	08011380 	.word	0x08011380
 8006424:	08012e08 	.word	0x08012e08
 8006428:	08012e34 	.word	0x08012e34
 800642c:	08012634 	.word	0x08012634

08006430 <TinyBMS_CAN_ReadSettingsValues>:
 * 						   0x01 - Min. settings     0x02 - Max. settings,
 * 						   0x03 - Default settings  0x04 - Current settings
 *
 * 						   RL - Registers to read. Max. 100 (0x64) registers
 */
uint8_t TinyBMS_CAN_ReadSettingsValues(CAN_HandleTypeDef *hcan, uint8_t option, uint8_t rl) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b08e      	sub	sp, #56	; 0x38
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
 800643c:	4613      	mov	r3, r2
 800643e:	70bb      	strb	r3, [r7, #2]
	printf("TinyBMS_CAN_ReadSettingsValues\r\n");
 8006440:	4874      	ldr	r0, [pc, #464]	; (8006614 <TinyBMS_CAN_ReadSettingsValues+0x1e4>)
 8006442:	f007 fe73 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8006446:	23ff      	movs	r3, #255	; 0xff
 8006448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t msg_count = 1, pl = 0;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006452:	2300      	movs	r3, #0
 8006454:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint16_t data = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	867b      	strh	r3, [r7, #50]	; 0x32

	switch(option) {
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	3b01      	subs	r3, #1
 8006460:	2b03      	cmp	r3, #3
 8006462:	d81b      	bhi.n	800649c <TinyBMS_CAN_ReadSettingsValues+0x6c>
 8006464:	a201      	add	r2, pc, #4	; (adr r2, 800646c <TinyBMS_CAN_ReadSettingsValues+0x3c>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	0800647d 	.word	0x0800647d
 8006470:	08006485 	.word	0x08006485
 8006474:	0800648d 	.word	0x0800648d
 8006478:	08006495 	.word	0x08006495
	case TINYBMS_SETTINGS_MIN:
		printf("0x01 Min Settings\r\n");
 800647c:	4866      	ldr	r0, [pc, #408]	; (8006618 <TinyBMS_CAN_ReadSettingsValues+0x1e8>)
 800647e:	f007 fe55 	bl	800e12c <puts>
		break;
 8006482:	e011      	b.n	80064a8 <TinyBMS_CAN_ReadSettingsValues+0x78>
	case TINYBMS_SETTINGS_MAX:
		printf("0x02 Max Settings\r\n");
 8006484:	4865      	ldr	r0, [pc, #404]	; (800661c <TinyBMS_CAN_ReadSettingsValues+0x1ec>)
 8006486:	f007 fe51 	bl	800e12c <puts>
		break;
 800648a:	e00d      	b.n	80064a8 <TinyBMS_CAN_ReadSettingsValues+0x78>
	case TINYBMS_SETTINGS_DEFAULT:
		printf("0x03 Default Settings\r\n");
 800648c:	4864      	ldr	r0, [pc, #400]	; (8006620 <TinyBMS_CAN_ReadSettingsValues+0x1f0>)
 800648e:	f007 fe4d 	bl	800e12c <puts>
		break;
 8006492:	e009      	b.n	80064a8 <TinyBMS_CAN_ReadSettingsValues+0x78>
	case TINYBMS_SETTINGS_CURRENT:
		printf("0x04 Current Settings\r\n");
 8006494:	4863      	ldr	r0, [pc, #396]	; (8006624 <TinyBMS_CAN_ReadSettingsValues+0x1f4>)
 8006496:	f007 fe49 	bl	800e12c <puts>
		break;
 800649a:	e005      	b.n	80064a8 <TinyBMS_CAN_ReadSettingsValues+0x78>
	default:
		printf("Invalid option\r\n");
 800649c:	4862      	ldr	r0, [pc, #392]	; (8006628 <TinyBMS_CAN_ReadSettingsValues+0x1f8>)
 800649e:	f007 fe45 	bl	800e12c <puts>
		return retval;
 80064a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80064a6:	e0b1      	b.n	800660c <TinyBMS_CAN_ReadSettingsValues+0x1dc>
	}

	//Check if number of registers to read is within bounds
	if((rl <= 0) || (rl > 0x64)) {
 80064a8:	78bb      	ldrb	r3, [r7, #2]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <TinyBMS_CAN_ReadSettingsValues+0x84>
 80064ae:	78bb      	ldrb	r3, [r7, #2]
 80064b0:	2b64      	cmp	r3, #100	; 0x64
 80064b2:	d902      	bls.n	80064ba <TinyBMS_CAN_ReadSettingsValues+0x8a>
		return retval;
 80064b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80064b8:	e0a8      	b.n	800660c <TinyBMS_CAN_ReadSettingsValues+0x1dc>
	}

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_SETTINGS_VALUES, option, 0x00, rl, 0x00, 0x00, 0x00, 0x00};
 80064ba:	231d      	movs	r3, #29
 80064bc:	733b      	strb	r3, [r7, #12]
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	737b      	strb	r3, [r7, #13]
 80064c2:	2300      	movs	r3, #0
 80064c4:	73bb      	strb	r3, [r7, #14]
 80064c6:	78bb      	ldrb	r3, [r7, #2]
 80064c8:	73fb      	strb	r3, [r7, #15]
 80064ca:	2300      	movs	r3, #0
 80064cc:	743b      	strb	r3, [r7, #16]
 80064ce:	2300      	movs	r3, #0
 80064d0:	747b      	strb	r3, [r7, #17]
 80064d2:	2300      	movs	r3, #0
 80064d4:	74bb      	strb	r3, [r7, #18]
 80064d6:	2300      	movs	r3, #0
 80064d8:	74fb      	strb	r3, [r7, #19]
	uint8_t tx_len = 4;
 80064da:	2304      	movs	r3, #4
 80064dc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80064e0:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80064e4:	f107 030c 	add.w	r3, r7, #12
 80064e8:	4619      	mov	r1, r3
 80064ea:	2000      	movs	r0, #0
 80064ec:	f002 fed0 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80064f0:	e082      	b.n	80065f8 <TinyBMS_CAN_ReadSettingsValues+0x1c8>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 80064f2:	f107 0214 	add.w	r2, r7, #20
 80064f6:	4b4d      	ldr	r3, [pc, #308]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 80064f8:	2100      	movs	r1, #0
 80064fa:	484d      	ldr	r0, [pc, #308]	; (8006630 <TinyBMS_CAN_ReadSettingsValues+0x200>)
 80064fc:	f003 fe0d 	bl	800a11a <HAL_CAN_GetRxMessage>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <TinyBMS_CAN_ReadSettingsValues+0xda>
			Error_Handler();
 8006506:	f003 f83b 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800650a:	f240 4103 	movw	r1, #1027	; 0x403
 800650e:	4848      	ldr	r0, [pc, #288]	; (8006630 <TinyBMS_CAN_ReadSettingsValues+0x200>)
 8006510:	f003 ff3d 	bl	800a38e <HAL_CAN_ActivateNotification>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <TinyBMS_CAN_ReadSettingsValues+0xee>
			Error_Handler();
 800651a:	f003 f831 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4b44      	ldr	r3, [pc, #272]	; (8006634 <TinyBMS_CAN_ReadSettingsValues+0x204>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d167      	bne.n	80065f8 <TinyBMS_CAN_ReadSettingsValues+0x1c8>
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d164      	bne.n	80065f8 <TinyBMS_CAN_ReadSettingsValues+0x1c8>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 800652e:	4b3f      	ldr	r3, [pc, #252]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d115      	bne.n	8006562 <TinyBMS_CAN_ReadSettingsValues+0x132>
				printf("Response from BMS [Error]\r\n");
 8006536:	4840      	ldr	r0, [pc, #256]	; (8006638 <TinyBMS_CAN_ReadSettingsValues+0x208>)
 8006538:	f007 fdf8 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	4619      	mov	r1, r3
 8006542:	4b3a      	ldr	r3, [pc, #232]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 8006544:	789b      	ldrb	r3, [r3, #2]
 8006546:	461a      	mov	r2, r3
 8006548:	483c      	ldr	r0, [pc, #240]	; (800663c <TinyBMS_CAN_ReadSettingsValues+0x20c>)
 800654a:	f007 fd69 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 800654e:	4b37      	ldr	r3, [pc, #220]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 8006550:	789b      	ldrb	r3, [r3, #2]
 8006552:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				reportBMSError(error);
 8006556:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fc52 	bl	8006e04 <reportBMSError>
 8006560:	e04a      	b.n	80065f8 <TinyBMS_CAN_ReadSettingsValues+0x1c8>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_SETTINGS_VALUES)) {
 8006562:	4b32      	ldr	r3, [pc, #200]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d143      	bne.n	80065f2 <TinyBMS_CAN_ReadSettingsValues+0x1c2>
 800656a:	4b30      	ldr	r3, [pc, #192]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b1d      	cmp	r3, #29
 8006570:	d13f      	bne.n	80065f2 <TinyBMS_CAN_ReadSettingsValues+0x1c2>
				if(msg_count == 1) {
 8006572:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006576:	2b01      	cmp	r3, #1
 8006578:	d108      	bne.n	800658c <TinyBMS_CAN_ReadSettingsValues+0x15c>
					printf("Response from BMS [OK]\r\n");
 800657a:	4831      	ldr	r0, [pc, #196]	; (8006640 <TinyBMS_CAN_ReadSettingsValues+0x210>)
 800657c:	f007 fdd6 	bl	800e12c <puts>
					printf("CAN_TBMS_READ_SETTINGS_VALUES | CMD: 0x%02X\r\n", rx_buffer[1]);
 8006580:	4b2a      	ldr	r3, [pc, #168]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	4619      	mov	r1, r3
 8006586:	482f      	ldr	r0, [pc, #188]	; (8006644 <TinyBMS_CAN_ReadSettingsValues+0x214>)
 8006588:	f007 fd4a 	bl	800e020 <iprintf>
				}
				pl = rx_buffer[2];
 800658c:	4b27      	ldr	r3, [pc, #156]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 800658e:	789b      	ldrb	r3, [r3, #2]
 8006590:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

				//If DATAn is 2 bytes in length and Byte 6 counter is correct
				//Message counter range: 1 to n vs Byte 6: 0 to n-1
				//msg_count is equal to the settings_count
				if((pl == 2) && (rx_buffer[5] == (msg_count-1))) {
 8006594:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006598:	2b02      	cmp	r3, #2
 800659a:	d121      	bne.n	80065e0 <TinyBMS_CAN_ReadSettingsValues+0x1b0>
 800659c:	4b23      	ldr	r3, [pc, #140]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 800659e:	795b      	ldrb	r3, [r3, #5]
 80065a0:	461a      	mov	r2, r3
 80065a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80065a6:	3b01      	subs	r3, #1
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d119      	bne.n	80065e0 <TinyBMS_CAN_ReadSettingsValues+0x1b0>
					data = ((rx_buffer[4] << 8) | rx_buffer[3]);
 80065ac:	4b1f      	ldr	r3, [pc, #124]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 80065ae:	791b      	ldrb	r3, [r3, #4]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	b21a      	sxth	r2, r3
 80065b4:	4b1d      	ldr	r3, [pc, #116]	; (800662c <TinyBMS_CAN_ReadSettingsValues+0x1fc>)
 80065b6:	78db      	ldrb	r3, [r3, #3]
 80065b8:	b21b      	sxth	r3, r3
 80065ba:	4313      	orrs	r3, r2
 80065bc:	b21b      	sxth	r3, r3
 80065be:	867b      	strh	r3, [r7, #50]	; 0x32
					printf("TinyBMS Setting#: %u | Value: %u\r\n", msg_count, data);
 80065c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80065c4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80065c6:	4619      	mov	r1, r3
 80065c8:	481f      	ldr	r0, [pc, #124]	; (8006648 <TinyBMS_CAN_ReadSettingsValues+0x218>)
 80065ca:	f007 fd29 	bl	800e020 <iprintf>
					msg_count++;
 80065ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80065d2:	3301      	adds	r3, #1
 80065d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					retval = CMD_SUCCESS;
 80065d8:	2300      	movs	r3, #0
 80065da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if((pl == 2) && (rx_buffer[5] == (msg_count-1))) {
 80065de:	e00b      	b.n	80065f8 <TinyBMS_CAN_ReadSettingsValues+0x1c8>

				} else {
					printf("Data Corruption\r\n");
 80065e0:	481a      	ldr	r0, [pc, #104]	; (800664c <TinyBMS_CAN_ReadSettingsValues+0x21c>)
 80065e2:	f007 fda3 	bl	800e12c <puts>
					retval = CMD_FAILURE;
 80065e6:	23ff      	movs	r3, #255	; 0xff
 80065e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					return retval;
 80065ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065f0:	e00c      	b.n	800660c <TinyBMS_CAN_ReadSettingsValues+0x1dc>
				}

			} else {
				printf("Data Corruption\r\n");
 80065f2:	4816      	ldr	r0, [pc, #88]	; (800664c <TinyBMS_CAN_ReadSettingsValues+0x21c>)
 80065f4:	f007 fd9a 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80065f8:	2100      	movs	r1, #0
 80065fa:	480d      	ldr	r0, [pc, #52]	; (8006630 <TinyBMS_CAN_ReadSettingsValues+0x200>)
 80065fc:	f003 fe9f 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	f47f af75 	bne.w	80064f2 <TinyBMS_CAN_ReadSettingsValues+0xc2>
			}
		}
	}

	return retval;
 8006608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800660c:	4618      	mov	r0, r3
 800660e:	3738      	adds	r7, #56	; 0x38
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	08012e84 	.word	0x08012e84
 8006618:	08012ea4 	.word	0x08012ea4
 800661c:	08012eb8 	.word	0x08012eb8
 8006620:	08012ecc 	.word	0x08012ecc
 8006624:	08012ee4 	.word	0x08012ee4
 8006628:	080125b0 	.word	0x080125b0
 800662c:	2000037c 	.word	0x2000037c
 8006630:	20000200 	.word	0x20000200
 8006634:	20000004 	.word	0x20000004
 8006638:	080125c0 	.word	0x080125c0
 800663c:	080125dc 	.word	0x080125dc
 8006640:	08011380 	.word	0x08011380
 8006644:	08012efc 	.word	0x08012efc
 8006648:	08012f2c 	.word	0x08012f2c
 800664c:	08012634 	.word	0x08012634

08006650 <TinyBMS_CAN_ReadVersion>:
 * 						 	 DATA1 - Hardware version
 * 						 	 DATA2 - Hardware changes version
 * 						 	 DATA3 - Firmware public version
 * 						 	 DATA4 - Firmware internal version
 */
uint8_t TinyBMS_CAN_ReadVersion(CAN_HandleTypeDef *hcan) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b08e      	sub	sp, #56	; 0x38
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadVersion\r\n");
 8006658:	488a      	ldr	r0, [pc, #552]	; (8006884 <TinyBMS_CAN_ReadVersion+0x234>)
 800665a:	f007 fd67 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 800665e:	23ff      	movs	r3, #255	; 0xff
 8006660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t pl = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t hw_version = 0, hw_changes = 0, firmware_public = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006670:	2300      	movs	r3, #0
 8006672:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8006676:	2300      	movs	r3, #0
 8006678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint16_t firmware_internal = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	863b      	strh	r3, [r7, #48]	; 0x30

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_VERSION, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006680:	4a81      	ldr	r2, [pc, #516]	; (8006888 <TinyBMS_CAN_ReadVersion+0x238>)
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800668a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006694:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006698:	f107 0308 	add.w	r3, r7, #8
 800669c:	4619      	mov	r1, r3
 800669e:	2000      	movs	r0, #0
 80066a0:	f002 fdf6 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80066a4:	e0e0      	b.n	8006868 <TinyBMS_CAN_ReadVersion+0x218>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 80066a6:	f107 0210 	add.w	r2, r7, #16
 80066aa:	4b78      	ldr	r3, [pc, #480]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80066ac:	2100      	movs	r1, #0
 80066ae:	4878      	ldr	r0, [pc, #480]	; (8006890 <TinyBMS_CAN_ReadVersion+0x240>)
 80066b0:	f003 fd33 	bl	800a11a <HAL_CAN_GetRxMessage>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <TinyBMS_CAN_ReadVersion+0x6e>
			Error_Handler();
 80066ba:	f002 ff61 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80066be:	f240 4103 	movw	r1, #1027	; 0x403
 80066c2:	4873      	ldr	r0, [pc, #460]	; (8006890 <TinyBMS_CAN_ReadVersion+0x240>)
 80066c4:	f003 fe63 	bl	800a38e <HAL_CAN_ActivateNotification>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <TinyBMS_CAN_ReadVersion+0x82>
			Error_Handler();
 80066ce:	f002 ff57 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4b6f      	ldr	r3, [pc, #444]	; (8006894 <TinyBMS_CAN_ReadVersion+0x244>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	f040 80c5 	bne.w	8006868 <TinyBMS_CAN_ReadVersion+0x218>
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 80c1 	bne.w	8006868 <TinyBMS_CAN_ReadVersion+0x218>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 80066e6:	4b69      	ldr	r3, [pc, #420]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d115      	bne.n	800671a <TinyBMS_CAN_ReadVersion+0xca>
				printf("Response from BMS [Error]\r\n");
 80066ee:	486a      	ldr	r0, [pc, #424]	; (8006898 <TinyBMS_CAN_ReadVersion+0x248>)
 80066f0:	f007 fd1c 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 80066f4:	4b65      	ldr	r3, [pc, #404]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	4619      	mov	r1, r3
 80066fa:	4b64      	ldr	r3, [pc, #400]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80066fc:	789b      	ldrb	r3, [r3, #2]
 80066fe:	461a      	mov	r2, r3
 8006700:	4866      	ldr	r0, [pc, #408]	; (800689c <TinyBMS_CAN_ReadVersion+0x24c>)
 8006702:	f007 fc8d 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8006706:	4b61      	ldr	r3, [pc, #388]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 8006708:	789b      	ldrb	r3, [r3, #2]
 800670a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				reportBMSError(error);
 800670e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fb76 	bl	8006e04 <reportBMSError>
 8006718:	e0a6      	b.n	8006868 <TinyBMS_CAN_ReadVersion+0x218>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_VERSION)) {
 800671a:	4b5c      	ldr	r3, [pc, #368]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b01      	cmp	r3, #1
 8006720:	f040 809f 	bne.w	8006862 <TinyBMS_CAN_ReadVersion+0x212>
 8006724:	4b59      	ldr	r3, [pc, #356]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b1e      	cmp	r3, #30
 800672a:	f040 809a 	bne.w	8006862 <TinyBMS_CAN_ReadVersion+0x212>
				printf("Response from BMS [OK]\r\n");
 800672e:	485c      	ldr	r0, [pc, #368]	; (80068a0 <TinyBMS_CAN_ReadVersion+0x250>)
 8006730:	f007 fcfc 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_VERSION | CMD: 0x%02X\r\n", rx_buffer[1]);
 8006734:	4b55      	ldr	r3, [pc, #340]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	4619      	mov	r1, r3
 800673a:	485a      	ldr	r0, [pc, #360]	; (80068a4 <TinyBMS_CAN_ReadVersion+0x254>)
 800673c:	f007 fc70 	bl	800e020 <iprintf>
				pl = rx_buffer[2];
 8006740:	4b52      	ldr	r3, [pc, #328]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 8006742:	789b      	ldrb	r3, [r3, #2]
 8006744:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				retval = CMD_SUCCESS;
 8006748:	2300      	movs	r3, #0
 800674a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				switch(pl) {
 800674e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006752:	3b01      	subs	r3, #1
 8006754:	2b04      	cmp	r3, #4
 8006756:	d87a      	bhi.n	800684e <TinyBMS_CAN_ReadVersion+0x1fe>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <TinyBMS_CAN_ReadVersion+0x110>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006775 	.word	0x08006775
 8006764:	0800678b 	.word	0x0800678b
 8006768:	080067b5 	.word	0x080067b5
 800676c:	0800684f 	.word	0x0800684f
 8006770:	080067f3 	.word	0x080067f3
				case 1: //DATA1
					hw_version = rx_buffer[3];
 8006774:	4b45      	ldr	r3, [pc, #276]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 8006776:	78db      	ldrb	r3, [r3, #3]
 8006778:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					printf("TinyBMS Hardware Version: %u\r\n", hw_version);
 800677c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006780:	4619      	mov	r1, r3
 8006782:	4849      	ldr	r0, [pc, #292]	; (80068a8 <TinyBMS_CAN_ReadVersion+0x258>)
 8006784:	f007 fc4c 	bl	800e020 <iprintf>
					break;
 8006788:	e06a      	b.n	8006860 <TinyBMS_CAN_ReadVersion+0x210>
				case 2: //DATA1 + DATA2
					hw_version = rx_buffer[3];
 800678a:	4b40      	ldr	r3, [pc, #256]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 800678c:	78db      	ldrb	r3, [r3, #3]
 800678e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					hw_changes = rx_buffer[4];
 8006792:	4b3e      	ldr	r3, [pc, #248]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 8006794:	791b      	ldrb	r3, [r3, #4]
 8006796:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					printf("TinyBMS Hardware Version: %u\r\n", hw_version);
 800679a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800679e:	4619      	mov	r1, r3
 80067a0:	4841      	ldr	r0, [pc, #260]	; (80068a8 <TinyBMS_CAN_ReadVersion+0x258>)
 80067a2:	f007 fc3d 	bl	800e020 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\r\n", hw_changes);
 80067a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80067aa:	4619      	mov	r1, r3
 80067ac:	483f      	ldr	r0, [pc, #252]	; (80068ac <TinyBMS_CAN_ReadVersion+0x25c>)
 80067ae:	f007 fc37 	bl	800e020 <iprintf>
					break;
 80067b2:	e055      	b.n	8006860 <TinyBMS_CAN_ReadVersion+0x210>
				case 3: //DATA1 + DATA2 + DATA3
					hw_version = rx_buffer[3];
 80067b4:	4b35      	ldr	r3, [pc, #212]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80067b6:	78db      	ldrb	r3, [r3, #3]
 80067b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					hw_changes = rx_buffer[4];
 80067bc:	4b33      	ldr	r3, [pc, #204]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80067be:	791b      	ldrb	r3, [r3, #4]
 80067c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					firmware_public = rx_buffer[5];
 80067c4:	4b31      	ldr	r3, [pc, #196]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80067c6:	795b      	ldrb	r3, [r3, #5]
 80067c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					printf("TinyBMS Hardware Version: %u\r\n", hw_version);
 80067cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80067d0:	4619      	mov	r1, r3
 80067d2:	4835      	ldr	r0, [pc, #212]	; (80068a8 <TinyBMS_CAN_ReadVersion+0x258>)
 80067d4:	f007 fc24 	bl	800e020 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\r\n", hw_changes);
 80067d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80067dc:	4619      	mov	r1, r3
 80067de:	4833      	ldr	r0, [pc, #204]	; (80068ac <TinyBMS_CAN_ReadVersion+0x25c>)
 80067e0:	f007 fc1e 	bl	800e020 <iprintf>
					printf("TinyBMS Firmware Public Version: %u\r\n", firmware_public);
 80067e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067e8:	4619      	mov	r1, r3
 80067ea:	4831      	ldr	r0, [pc, #196]	; (80068b0 <TinyBMS_CAN_ReadVersion+0x260>)
 80067ec:	f007 fc18 	bl	800e020 <iprintf>
					break;
 80067f0:	e036      	b.n	8006860 <TinyBMS_CAN_ReadVersion+0x210>
				case 5: //DATA1 + DATA2 + DATA3 + DATA4
					hw_version = rx_buffer[3];
 80067f2:	4b26      	ldr	r3, [pc, #152]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80067f4:	78db      	ldrb	r3, [r3, #3]
 80067f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					hw_changes = rx_buffer[4];
 80067fa:	4b24      	ldr	r3, [pc, #144]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					firmware_public = rx_buffer[5];
 8006802:	4b22      	ldr	r3, [pc, #136]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 8006804:	795b      	ldrb	r3, [r3, #5]
 8006806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					firmware_internal = ((rx_buffer[7] << 8) | rx_buffer[6]);
 800680a:	4b20      	ldr	r3, [pc, #128]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 800680c:	79db      	ldrb	r3, [r3, #7]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	b21a      	sxth	r2, r3
 8006812:	4b1e      	ldr	r3, [pc, #120]	; (800688c <TinyBMS_CAN_ReadVersion+0x23c>)
 8006814:	799b      	ldrb	r3, [r3, #6]
 8006816:	b21b      	sxth	r3, r3
 8006818:	4313      	orrs	r3, r2
 800681a:	b21b      	sxth	r3, r3
 800681c:	863b      	strh	r3, [r7, #48]	; 0x30
					printf("TinyBMS Hardware Version: %u\r\n", hw_version);
 800681e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006822:	4619      	mov	r1, r3
 8006824:	4820      	ldr	r0, [pc, #128]	; (80068a8 <TinyBMS_CAN_ReadVersion+0x258>)
 8006826:	f007 fbfb 	bl	800e020 <iprintf>
					printf("TinyBMS Hardware Changes Version: %u\r\n", hw_changes);
 800682a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800682e:	4619      	mov	r1, r3
 8006830:	481e      	ldr	r0, [pc, #120]	; (80068ac <TinyBMS_CAN_ReadVersion+0x25c>)
 8006832:	f007 fbf5 	bl	800e020 <iprintf>
					printf("TinyBMS Firmware Public Version: %u\r\n", firmware_public);
 8006836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800683a:	4619      	mov	r1, r3
 800683c:	481c      	ldr	r0, [pc, #112]	; (80068b0 <TinyBMS_CAN_ReadVersion+0x260>)
 800683e:	f007 fbef 	bl	800e020 <iprintf>
					printf("TinyBMS Firmware Internal Version: %u\r\n", firmware_internal);
 8006842:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006844:	4619      	mov	r1, r3
 8006846:	481b      	ldr	r0, [pc, #108]	; (80068b4 <TinyBMS_CAN_ReadVersion+0x264>)
 8006848:	f007 fbea 	bl	800e020 <iprintf>
					break;
 800684c:	e008      	b.n	8006860 <TinyBMS_CAN_ReadVersion+0x210>
				default:
					printf("Invalid Payload Value\r\n");
 800684e:	481a      	ldr	r0, [pc, #104]	; (80068b8 <TinyBMS_CAN_ReadVersion+0x268>)
 8006850:	f007 fc6c 	bl	800e12c <puts>
					retval = CMD_FAILURE;
 8006854:	23ff      	movs	r3, #255	; 0xff
 8006856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					return retval;
 800685a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800685e:	e00d      	b.n	800687c <TinyBMS_CAN_ReadVersion+0x22c>
				switch(pl) {
 8006860:	e002      	b.n	8006868 <TinyBMS_CAN_ReadVersion+0x218>
				}

			} else {
				printf("Data Corruption\r\n");
 8006862:	4816      	ldr	r0, [pc, #88]	; (80068bc <TinyBMS_CAN_ReadVersion+0x26c>)
 8006864:	f007 fc62 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006868:	2100      	movs	r1, #0
 800686a:	4809      	ldr	r0, [pc, #36]	; (8006890 <TinyBMS_CAN_ReadVersion+0x240>)
 800686c:	f003 fd67 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	f47f af17 	bne.w	80066a6 <TinyBMS_CAN_ReadVersion+0x56>
			}
		}
	}

	return retval;
 8006878:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800687c:	4618      	mov	r0, r3
 800687e:	3738      	adds	r7, #56	; 0x38
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	08012f50 	.word	0x08012f50
 8006888:	0801302c 	.word	0x0801302c
 800688c:	2000037c 	.word	0x2000037c
 8006890:	20000200 	.word	0x20000200
 8006894:	20000004 	.word	0x20000004
 8006898:	080125c0 	.word	0x080125c0
 800689c:	080125dc 	.word	0x080125dc
 80068a0:	08011380 	.word	0x08011380
 80068a4:	08012f6c 	.word	0x08012f6c
 80068a8:	08012f94 	.word	0x08012f94
 80068ac:	08012fb4 	.word	0x08012fb4
 80068b0:	08012fdc 	.word	0x08012fdc
 80068b4:	08013004 	.word	0x08013004
 80068b8:	080122fc 	.word	0x080122fc
 80068bc:	08012634 	.word	0x08012634

080068c0 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft>:
 *
 * 						 	 DATA1 - Speed (km/h)
 * 						 	 DATA2 - Distance left until empty battery (km)
 * 						 	 DATA3 - Estimated time left until empty battery (s)
 */
uint8_t TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft(CAN_HandleTypeDef *hcan) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b092      	sub	sp, #72	; 0x48
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft\r\n");
 80068c8:	4880      	ldr	r0, [pc, #512]	; (8006acc <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x20c>)
 80068ca:	f007 fc2f 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 80068ce:	23ff      	movs	r3, #255	; 0xff
 80068d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t pl = 0, msg_count = 1;
 80068d4:	2300      	movs	r3, #0
 80068d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_SPEED_DISTANCETIME_LEFT, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80068e0:	4a7b      	ldr	r2, [pc, #492]	; (8006ad0 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x210>)
 80068e2:	f107 030c 	add.w	r3, r7, #12
 80068e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 80068f4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80068f8:	f107 030c 	add.w	r3, r7, #12
 80068fc:	4619      	mov	r1, r3
 80068fe:	2000      	movs	r0, #0
 8006900:	f002 fcc6 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006904:	e0d3      	b.n	8006aae <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ee>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8006906:	f107 0214 	add.w	r2, r7, #20
 800690a:	4b72      	ldr	r3, [pc, #456]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 800690c:	2100      	movs	r1, #0
 800690e:	4872      	ldr	r0, [pc, #456]	; (8006ad8 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8006910:	f003 fc03 	bl	800a11a <HAL_CAN_GetRxMessage>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x5e>
			Error_Handler();
 800691a:	f002 fe31 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800691e:	f240 4103 	movw	r1, #1027	; 0x403
 8006922:	486d      	ldr	r0, [pc, #436]	; (8006ad8 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8006924:	f003 fd33 	bl	800a38e <HAL_CAN_ActivateNotification>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x72>
			Error_Handler();
 800692e:	f002 fe27 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4b69      	ldr	r3, [pc, #420]	; (8006adc <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x21c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	f040 80b8 	bne.w	8006aae <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ee>
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f040 80b4 	bne.w	8006aae <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ee>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8006946:	4b63      	ldr	r3, [pc, #396]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d115      	bne.n	800697a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0xba>
				printf("Response from BMS [Error]\r\n");
 800694e:	4864      	ldr	r0, [pc, #400]	; (8006ae0 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x220>)
 8006950:	f007 fbec 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8006954:	4b5f      	ldr	r3, [pc, #380]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	4619      	mov	r1, r3
 800695a:	4b5e      	ldr	r3, [pc, #376]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 800695c:	789b      	ldrb	r3, [r3, #2]
 800695e:	461a      	mov	r2, r3
 8006960:	4860      	ldr	r0, [pc, #384]	; (8006ae4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x224>)
 8006962:	f007 fb5d 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8006966:	4b5b      	ldr	r3, [pc, #364]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006968:	789b      	ldrb	r3, [r3, #2]
 800696a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				reportBMSError(error);
 800696e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fa46 	bl	8006e04 <reportBMSError>
 8006978:	e099      	b.n	8006aae <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ee>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_SPEED_DISTANCETIME_LEFT)) {
 800697a:	4b56      	ldr	r3, [pc, #344]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b01      	cmp	r3, #1
 8006980:	f040 808c 	bne.w	8006a9c <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1dc>
 8006984:	4b53      	ldr	r3, [pc, #332]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b20      	cmp	r3, #32
 800698a:	f040 8087 	bne.w	8006a9c <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1dc>
				if(msg_count == 1) {
 800698e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006992:	2b01      	cmp	r3, #1
 8006994:	d108      	bne.n	80069a8 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0xe8>
					printf("Response from BMS [OK]\r\n");
 8006996:	4854      	ldr	r0, [pc, #336]	; (8006ae8 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x228>)
 8006998:	f007 fbc8 	bl	800e12c <puts>
					printf("CAN_TBMS_READ_SPEED_DISTANCETIME_LEFT | CMD: 0x%02X\r\n", rx_buffer[1]);
 800699c:	4b4d      	ldr	r3, [pc, #308]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	4619      	mov	r1, r3
 80069a2:	4852      	ldr	r0, [pc, #328]	; (8006aec <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x22c>)
 80069a4:	f007 fb3c 	bl	800e020 <iprintf>
				}
				pl = rx_buffer[2];
 80069a8:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 80069aa:	789b      	ldrb	r3, [r3, #2]
 80069ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				retval = CMD_SUCCESS;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

				//MSG1 - SPEED
				if((pl == 4) && (rx_buffer[7] == 0x00)) {
 80069b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d127      	bne.n	8006a0e <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x14e>
 80069be:	4b45      	ldr	r3, [pc, #276]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 80069c0:	79db      	ldrb	r3, [r3, #7]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d123      	bne.n	8006a0e <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x14e>
					uint32_t data1 = ((rx_buffer[6] << 24) | (rx_buffer[5] << 16) | (rx_buffer[4] << 8) | (rx_buffer[3]));
 80069c6:	4b43      	ldr	r3, [pc, #268]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 80069c8:	799b      	ldrb	r3, [r3, #6]
 80069ca:	061a      	lsls	r2, r3, #24
 80069cc:	4b41      	ldr	r3, [pc, #260]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 80069ce:	795b      	ldrb	r3, [r3, #5]
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	431a      	orrs	r2, r3
 80069d4:	4b3f      	ldr	r3, [pc, #252]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 80069d6:	791b      	ldrb	r3, [r3, #4]
 80069d8:	021b      	lsls	r3, r3, #8
 80069da:	4313      	orrs	r3, r2
 80069dc:	4a3d      	ldr	r2, [pc, #244]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 80069de:	78d2      	ldrb	r2, [r2, #3]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	643b      	str	r3, [r7, #64]	; 0x40
					float speed = data1;
 80069e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					printf("TinyBMS Speed: %f (km/h)\r\n", speed);
 80069f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069f4:	f7f9 fdc8 	bl	8000588 <__aeabi_f2d>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	483c      	ldr	r0, [pc, #240]	; (8006af0 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x230>)
 80069fe:	f007 fb0f 	bl	800e020 <iprintf>
					msg_count++;
 8006a02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a06:	3301      	adds	r3, #1
 8006a08:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if((pl == 4) && (rx_buffer[7] == 0x00)) {
 8006a0c:	e045      	b.n	8006a9a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1da>

				//MSG2 - DISTANCE LEFT
				} else if((pl == 4) && (rx_buffer[7] == 0x01)) {
 8006a0e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d11c      	bne.n	8006a50 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x190>
 8006a16:	4b2f      	ldr	r3, [pc, #188]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a18:	79db      	ldrb	r3, [r3, #7]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d118      	bne.n	8006a50 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x190>
					uint32_t distanceLeft = ((rx_buffer[6] << 24) | (rx_buffer[5] << 16) | (rx_buffer[4] << 8) | (rx_buffer[3]));
 8006a1e:	4b2d      	ldr	r3, [pc, #180]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a20:	799b      	ldrb	r3, [r3, #6]
 8006a22:	061a      	lsls	r2, r3, #24
 8006a24:	4b2b      	ldr	r3, [pc, #172]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a26:	795b      	ldrb	r3, [r3, #5]
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	4b29      	ldr	r3, [pc, #164]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a2e:	791b      	ldrb	r3, [r3, #4]
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	4313      	orrs	r3, r2
 8006a34:	4a27      	ldr	r2, [pc, #156]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a36:	78d2      	ldrb	r2, [r2, #3]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	63bb      	str	r3, [r7, #56]	; 0x38
					printf("TinyBMS Distance Left until Empty: %lu (km)\r\n", distanceLeft);
 8006a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a3e:	482d      	ldr	r0, [pc, #180]	; (8006af4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x234>)
 8006a40:	f007 faee 	bl	800e020 <iprintf>
					msg_count++;
 8006a44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a48:	3301      	adds	r3, #1
 8006a4a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				} else if((pl == 4) && (rx_buffer[7] == 0x01)) {
 8006a4e:	e024      	b.n	8006a9a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1da>

				//MSG3 - ESTIMATED TIME LEFT
				} else if((pl == 4) && (rx_buffer[7] == 0x02)) {
 8006a50:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d117      	bne.n	8006a88 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1c8>
 8006a58:	4b1e      	ldr	r3, [pc, #120]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a5a:	79db      	ldrb	r3, [r3, #7]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d113      	bne.n	8006a88 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1c8>
					uint32_t timeLeft = ((rx_buffer[6] << 24) | (rx_buffer[5] << 16) | (rx_buffer[4] << 8) | (rx_buffer[3]));
 8006a60:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a62:	799b      	ldrb	r3, [r3, #6]
 8006a64:	061a      	lsls	r2, r3, #24
 8006a66:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a68:	795b      	ldrb	r3, [r3, #5]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	4b19      	ldr	r3, [pc, #100]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a70:	791b      	ldrb	r3, [r3, #4]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	4313      	orrs	r3, r2
 8006a76:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x214>)
 8006a78:	78d2      	ldrb	r2, [r2, #3]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	637b      	str	r3, [r7, #52]	; 0x34
					printf("TinyBMS Time Left until Empty: %lu (s)\r\n", timeLeft);
 8006a7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a80:	481d      	ldr	r0, [pc, #116]	; (8006af8 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x238>)
 8006a82:	f007 facd 	bl	800e020 <iprintf>
				} else if((pl == 4) && (rx_buffer[7] == 0x02)) {
 8006a86:	e008      	b.n	8006a9a <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1da>

				} else {
					printf("Data Corruption\r\n");
 8006a88:	481c      	ldr	r0, [pc, #112]	; (8006afc <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x23c>)
 8006a8a:	f007 fb4f 	bl	800e12c <puts>
					retval = CMD_FAILURE;
 8006a8e:	23ff      	movs	r3, #255	; 0xff
 8006a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					return retval;
 8006a94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a98:	e013      	b.n	8006ac2 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x202>
				if((pl == 4) && (rx_buffer[7] == 0x00)) {
 8006a9a:	e008      	b.n	8006aae <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x1ee>
				}

			} else {
				printf("Data Corruption\r\n");
 8006a9c:	4817      	ldr	r0, [pc, #92]	; (8006afc <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x23c>)
 8006a9e:	f007 fb45 	bl	800e12c <puts>
				retval = CMD_FAILURE;
 8006aa2:	23ff      	movs	r3, #255	; 0xff
 8006aa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				return retval;
 8006aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006aac:	e009      	b.n	8006ac2 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x202>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4809      	ldr	r0, [pc, #36]	; (8006ad8 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x218>)
 8006ab2:	f003 fc44 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f af24 	bne.w	8006906 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft+0x46>
			}
		}
	}

	return retval;
 8006abe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3748      	adds	r7, #72	; 0x48
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	08013034 	.word	0x08013034
 8006ad0:	08013118 	.word	0x08013118
 8006ad4:	2000037c 	.word	0x2000037c
 8006ad8:	20000200 	.word	0x20000200
 8006adc:	20000004 	.word	0x20000004
 8006ae0:	080125c0 	.word	0x080125c0
 8006ae4:	080125dc 	.word	0x080125dc
 8006ae8:	08011380 	.word	0x08011380
 8006aec:	08013068 	.word	0x08013068
 8006af0:	080130a0 	.word	0x080130a0
 8006af4:	080130bc 	.word	0x080130bc
 8006af8:	080130ec 	.word	0x080130ec
 8006afc:	08012634 	.word	0x08012634

08006b00 <TinyBMS_CAN_ReadNodeID>:
 *
 * @return				-  unsigned 8-bit node ID
 *
 * @note				-  Default after firmware update is 0x01
 */
uint8_t TinyBMS_CAN_ReadNodeID(CAN_HandleTypeDef *hcan) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08c      	sub	sp, #48	; 0x30
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	printf("TinyBMS_CAN_ReadNodeID\r\n");
 8006b08:	4851      	ldr	r0, [pc, #324]	; (8006c50 <TinyBMS_CAN_ReadNodeID+0x150>)
 8006b0a:	f007 fb0f 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8006b0e:	23ff      	movs	r3, #255	; 0xff
 8006b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	CAN_RxHeaderTypeDef RxHeader;

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_READ_CAN_NODEID, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006b14:	4a4f      	ldr	r2, [pc, #316]	; (8006c54 <TinyBMS_CAN_ReadNodeID+0x154>)
 8006b16:	f107 0308 	add.w	r3, r7, #8
 8006b1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b1e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tx_len = 1;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006b28:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	4619      	mov	r1, r3
 8006b32:	2000      	movs	r0, #0
 8006b34:	f002 fbac 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006b38:	e07b      	b.n	8006c32 <TinyBMS_CAN_ReadNodeID+0x132>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8006b3a:	f107 0210 	add.w	r2, r7, #16
 8006b3e:	4b46      	ldr	r3, [pc, #280]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006b40:	2100      	movs	r1, #0
 8006b42:	4846      	ldr	r0, [pc, #280]	; (8006c5c <TinyBMS_CAN_ReadNodeID+0x15c>)
 8006b44:	f003 fae9 	bl	800a11a <HAL_CAN_GetRxMessage>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <TinyBMS_CAN_ReadNodeID+0x52>
			Error_Handler();
 8006b4e:	f002 fd17 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006b52:	f240 4103 	movw	r1, #1027	; 0x403
 8006b56:	4841      	ldr	r0, [pc, #260]	; (8006c5c <TinyBMS_CAN_ReadNodeID+0x15c>)
 8006b58:	f003 fc19 	bl	800a38e <HAL_CAN_ActivateNotification>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <TinyBMS_CAN_ReadNodeID+0x66>
			Error_Handler();
 8006b62:	f002 fd0d 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		//Search for current NodeID by accepting any data frame with Response StdID of 0x241-0x27F (full range)
		if(((RxHeader.StdId >= TINYBMS_CAN_RESPONSE_STDID_MIN) && (RxHeader.StdId <= TINYBMS_CAN_RESPONSE_STDID_MAX)) && (RxHeader.RTR == 0)) {
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006b6c:	d961      	bls.n	8006c32 <TinyBMS_CAN_ReadNodeID+0x132>
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006b74:	d25d      	bcs.n	8006c32 <TinyBMS_CAN_ReadNodeID+0x132>
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d15a      	bne.n	8006c32 <TinyBMS_CAN_ReadNodeID+0x132>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8006b7c:	4b36      	ldr	r3, [pc, #216]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d115      	bne.n	8006bb0 <TinyBMS_CAN_ReadNodeID+0xb0>
				printf("Response from BMS [Error]\r\n");
 8006b84:	4836      	ldr	r0, [pc, #216]	; (8006c60 <TinyBMS_CAN_ReadNodeID+0x160>)
 8006b86:	f007 fad1 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8006b8a:	4b33      	ldr	r3, [pc, #204]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4b31      	ldr	r3, [pc, #196]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006b92:	789b      	ldrb	r3, [r3, #2]
 8006b94:	461a      	mov	r2, r3
 8006b96:	4833      	ldr	r0, [pc, #204]	; (8006c64 <TinyBMS_CAN_ReadNodeID+0x164>)
 8006b98:	f007 fa42 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8006b9c:	4b2e      	ldr	r3, [pc, #184]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006b9e:	789b      	ldrb	r3, [r3, #2]
 8006ba0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				reportBMSError(error);
 8006ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f92b 	bl	8006e04 <reportBMSError>
 8006bae:	e040      	b.n	8006c32 <TinyBMS_CAN_ReadNodeID+0x132>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_CAN_NODEID)) {
 8006bb0:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d139      	bne.n	8006c2c <TinyBMS_CAN_ReadNodeID+0x12c>
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006bba:	785b      	ldrb	r3, [r3, #1]
 8006bbc:	2b28      	cmp	r3, #40	; 0x28
 8006bbe:	d135      	bne.n	8006c2c <TinyBMS_CAN_ReadNodeID+0x12c>
				printf("Response from BMS [OK]\r\n");
 8006bc0:	4829      	ldr	r0, [pc, #164]	; (8006c68 <TinyBMS_CAN_ReadNodeID+0x168>)
 8006bc2:	f007 fab3 	bl	800e12c <puts>
				printf("CAN_TBMS_READ_CAN_NODEID | CMD: 0x%02X\r\n", rx_buffer[1]);
 8006bc6:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006bc8:	785b      	ldrb	r3, [r3, #1]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4827      	ldr	r0, [pc, #156]	; (8006c6c <TinyBMS_CAN_ReadNodeID+0x16c>)
 8006bce:	f007 fa27 	bl	800e020 <iprintf>
				uint8_t nodeID_current = rx_buffer[2];
 8006bd2:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <TinyBMS_CAN_ReadNodeID+0x158>)
 8006bd4:	789b      	ldrb	r3, [r3, #2]
 8006bd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				//CAN-UART converter CAN Node ID: must be between 0x01 to 0x3F
				if((nodeID_current < TINYBMS_CAN_NODEID_MIN) || (nodeID_current > TINYBMS_CAN_NODEID_MAX)) {
 8006bda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <TinyBMS_CAN_ReadNodeID+0xea>
 8006be2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006be6:	2b3f      	cmp	r3, #63	; 0x3f
 8006be8:	d908      	bls.n	8006bfc <TinyBMS_CAN_ReadNodeID+0xfc>
					printf("TinyBMS CAN NodeID out of range\r\n");
 8006bea:	4821      	ldr	r0, [pc, #132]	; (8006c70 <TinyBMS_CAN_ReadNodeID+0x170>)
 8006bec:	f007 fa9e 	bl	800e12c <puts>
					retval = CMD_FAILURE;
 8006bf0:	23ff      	movs	r3, #255	; 0xff
 8006bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					return retval;
 8006bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bfa:	e024      	b.n	8006c46 <TinyBMS_CAN_ReadNodeID+0x146>
				}

				//Update both StdID's to reflect current NodeID
				TinybmsStdID_Request = (uint32_t)(TINYBMS_CAN_REQUEST_BASE_STDID + nodeID_current);
 8006bfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c04:	461a      	mov	r2, r3
 8006c06:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <TinyBMS_CAN_ReadNodeID+0x174>)
 8006c08:	601a      	str	r2, [r3, #0]
				TinybmsStdID_Response = (uint32_t)(TINYBMS_CAN_RESPONSE_BASE_STDID + nodeID_current);
 8006c0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c0e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006c12:	461a      	mov	r2, r3
 8006c14:	4b18      	ldr	r3, [pc, #96]	; (8006c78 <TinyBMS_CAN_ReadNodeID+0x178>)
 8006c16:	601a      	str	r2, [r3, #0]
				printf("TinyBMS Current CAN NodeID: %d\r\n", nodeID_current);
 8006c18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4817      	ldr	r0, [pc, #92]	; (8006c7c <TinyBMS_CAN_ReadNodeID+0x17c>)
 8006c20:	f007 f9fe 	bl	800e020 <iprintf>
				retval = CMD_SUCCESS;
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_READ_CAN_NODEID)) {
 8006c2a:	e002      	b.n	8006c32 <TinyBMS_CAN_ReadNodeID+0x132>

			} else {
				printf("Data Corruption\r\n");
 8006c2c:	4814      	ldr	r0, [pc, #80]	; (8006c80 <TinyBMS_CAN_ReadNodeID+0x180>)
 8006c2e:	f007 fa7d 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006c32:	2100      	movs	r1, #0
 8006c34:	4809      	ldr	r0, [pc, #36]	; (8006c5c <TinyBMS_CAN_ReadNodeID+0x15c>)
 8006c36:	f003 fb82 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f47f af7c 	bne.w	8006b3a <TinyBMS_CAN_ReadNodeID+0x3a>
			}
		}
	}

	return retval;
 8006c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3730      	adds	r7, #48	; 0x30
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	08013120 	.word	0x08013120
 8006c54:	080131ac 	.word	0x080131ac
 8006c58:	2000037c 	.word	0x2000037c
 8006c5c:	20000200 	.word	0x20000200
 8006c60:	080125c0 	.word	0x080125c0
 8006c64:	080125dc 	.word	0x080125dc
 8006c68:	08011380 	.word	0x08011380
 8006c6c:	08013138 	.word	0x08013138
 8006c70:	08013164 	.word	0x08013164
 8006c74:	20000000 	.word	0x20000000
 8006c78:	20000004 	.word	0x20000004
 8006c7c:	08013188 	.word	0x08013188
 8006c80:	08012634 	.word	0x08012634

08006c84 <TinyBMS_CAN_WriteNodeID>:
 *
 * @return				-  CMD_SUCCESS, CMD_FAILURE
 *
 * @note				-  Default after firmware update is 0x01
 */
uint8_t TinyBMS_CAN_WriteNodeID(CAN_HandleTypeDef *hcan, uint8_t nodeID) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08c      	sub	sp, #48	; 0x30
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
	printf("TinyBMS_CAN_WriteNodeID\r\n");
 8006c90:	4850      	ldr	r0, [pc, #320]	; (8006dd4 <TinyBMS_CAN_WriteNodeID+0x150>)
 8006c92:	f007 fa4b 	bl	800e12c <puts>
	uint8_t retval = CMD_FAILURE;
 8006c96:	23ff      	movs	r3, #255	; 0xff
 8006c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	CAN_RxHeaderTypeDef RxHeader;

	//CAN-UART converter CAN Node ID: must be between 0x01 to 0x3F
	if((nodeID < TINYBMS_CAN_NODEID_MIN) || (nodeID > TINYBMS_CAN_NODEID_MAX)) {
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <TinyBMS_CAN_WriteNodeID+0x24>
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	2b3f      	cmp	r3, #63	; 0x3f
 8006ca6:	d905      	bls.n	8006cb4 <TinyBMS_CAN_WriteNodeID+0x30>
		printf("TinyBMS CAN NodeID out of range\r\n");
 8006ca8:	484b      	ldr	r0, [pc, #300]	; (8006dd8 <TinyBMS_CAN_WriteNodeID+0x154>)
 8006caa:	f007 fa3f 	bl	800e12c <puts>
		return retval;
 8006cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cb2:	e08a      	b.n	8006dca <TinyBMS_CAN_WriteNodeID+0x146>
	}

	/* Request to BMS */
	uint8_t tx_msg[8] = {CAN_TBMS_WRITE_CAN_NODEID, nodeID, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006cb4:	2329      	movs	r3, #41	; 0x29
 8006cb6:	723b      	strb	r3, [r7, #8]
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	727b      	strb	r3, [r7, #9]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	72bb      	strb	r3, [r7, #10]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	72fb      	strb	r3, [r7, #11]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	733b      	strb	r3, [r7, #12]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	737b      	strb	r3, [r7, #13]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73bb      	strb	r3, [r7, #14]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_len = 2;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	CAN1_Tx(TINYBMS, tx_msg, tx_len);
 8006cda:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006cde:	f107 0308 	add.w	r3, r7, #8
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f002 fad3 	bl	8009290 <CAN1_Tx>

	/* Response from BMS */
	//Loop until there are no more remaining messages in CAN_RX_FIFO0
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006cea:	e065      	b.n	8006db8 <TinyBMS_CAN_WriteNodeID+0x134>
		if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rx_buffer) != HAL_OK) {
 8006cec:	f107 0210 	add.w	r2, r7, #16
 8006cf0:	4b3a      	ldr	r3, [pc, #232]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	483a      	ldr	r0, [pc, #232]	; (8006de0 <TinyBMS_CAN_WriteNodeID+0x15c>)
 8006cf6:	f003 fa10 	bl	800a11a <HAL_CAN_GetRxMessage>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <TinyBMS_CAN_WriteNodeID+0x80>
			Error_Handler();
 8006d00:	f002 fc3e 	bl	8009580 <Error_Handler>
		}

		//Activate Notifications (Interrupts) by setting CAN_IER bits
		if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8006d04:	f240 4103 	movw	r1, #1027	; 0x403
 8006d08:	4835      	ldr	r0, [pc, #212]	; (8006de0 <TinyBMS_CAN_WriteNodeID+0x15c>)
 8006d0a:	f003 fb40 	bl	800a38e <HAL_CAN_ActivateNotification>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <TinyBMS_CAN_WriteNodeID+0x94>
			Error_Handler();
 8006d14:	f002 fc34 	bl	8009580 <Error_Handler>
		}

		//Data Frame from TinyBMS
		if((RxHeader.StdId == TinybmsStdID_Response) && (RxHeader.RTR == 0)) {
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <TinyBMS_CAN_WriteNodeID+0x160>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d14a      	bne.n	8006db8 <TinyBMS_CAN_WriteNodeID+0x134>
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d147      	bne.n	8006db8 <TinyBMS_CAN_WriteNodeID+0x134>
			//[ERROR]
			if(rx_buffer[0] == NACK) {
 8006d28:	4b2c      	ldr	r3, [pc, #176]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d115      	bne.n	8006d5c <TinyBMS_CAN_WriteNodeID+0xd8>
				printf("Response from BMS [Error]\r\n");
 8006d30:	482d      	ldr	r0, [pc, #180]	; (8006de8 <TinyBMS_CAN_WriteNodeID+0x164>)
 8006d32:	f007 f9fb 	bl	800e12c <puts>
				printf("CMD: 0x%02X | ERROR Code: 0x%02X\r\n", rx_buffer[1], rx_buffer[2]);
 8006d36:	4b29      	ldr	r3, [pc, #164]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006d3e:	789b      	ldrb	r3, [r3, #2]
 8006d40:	461a      	mov	r2, r3
 8006d42:	482a      	ldr	r0, [pc, #168]	; (8006dec <TinyBMS_CAN_WriteNodeID+0x168>)
 8006d44:	f007 f96c 	bl	800e020 <iprintf>
				uint8_t error = rx_buffer[2];
 8006d48:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006d4a:	789b      	ldrb	r3, [r3, #2]
 8006d4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				reportBMSError(error);
 8006d50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f855 	bl	8006e04 <reportBMSError>
 8006d5a:	e02d      	b.n	8006db8 <TinyBMS_CAN_WriteNodeID+0x134>

			//[OK]
			} else if((rx_buffer[0] == ACK) && (rx_buffer[1] == CAN_TBMS_WRITE_CAN_NODEID) && (rx_buffer[2] == nodeID)) {
 8006d5c:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d126      	bne.n	8006db2 <TinyBMS_CAN_WriteNodeID+0x12e>
 8006d64:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	2b29      	cmp	r3, #41	; 0x29
 8006d6a:	d122      	bne.n	8006db2 <TinyBMS_CAN_WriteNodeID+0x12e>
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006d6e:	789b      	ldrb	r3, [r3, #2]
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d11d      	bne.n	8006db2 <TinyBMS_CAN_WriteNodeID+0x12e>
				printf("Response from BMS [OK]\r\n");
 8006d76:	481e      	ldr	r0, [pc, #120]	; (8006df0 <TinyBMS_CAN_WriteNodeID+0x16c>)
 8006d78:	f007 f9d8 	bl	800e12c <puts>
				printf("CAN_TBMS_WRITE_CAN_NODEID | CMD: 0x%02X\r\n", rx_buffer[1]);
 8006d7c:	4b17      	ldr	r3, [pc, #92]	; (8006ddc <TinyBMS_CAN_WriteNodeID+0x158>)
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	4619      	mov	r1, r3
 8006d82:	481c      	ldr	r0, [pc, #112]	; (8006df4 <TinyBMS_CAN_WriteNodeID+0x170>)
 8006d84:	f007 f94c 	bl	800e020 <iprintf>
				//Update both StdID's to reflect new NodeID
				TinybmsStdID_Request = (uint32_t)(TINYBMS_CAN_REQUEST_BASE_STDID + nodeID);
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <TinyBMS_CAN_WriteNodeID+0x174>)
 8006d92:	601a      	str	r2, [r3, #0]
				TinybmsStdID_Response = (uint32_t)(TINYBMS_CAN_RESPONSE_BASE_STDID + nodeID);
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <TinyBMS_CAN_WriteNodeID+0x160>)
 8006d9e:	601a      	str	r2, [r3, #0]
				printf("TinyBMS New CAN NodeID: 0x%02X\r\n", nodeID);
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	4619      	mov	r1, r3
 8006da4:	4815      	ldr	r0, [pc, #84]	; (8006dfc <TinyBMS_CAN_WriteNodeID+0x178>)
 8006da6:	f007 f93b 	bl	800e020 <iprintf>
				retval = CMD_SUCCESS;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006db0:	e002      	b.n	8006db8 <TinyBMS_CAN_WriteNodeID+0x134>

			} else {
				printf("Data Corruption\r\n");
 8006db2:	4813      	ldr	r0, [pc, #76]	; (8006e00 <TinyBMS_CAN_WriteNodeID+0x17c>)
 8006db4:	f007 f9ba 	bl	800e12c <puts>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8006db8:	2100      	movs	r1, #0
 8006dba:	4809      	ldr	r0, [pc, #36]	; (8006de0 <TinyBMS_CAN_WriteNodeID+0x15c>)
 8006dbc:	f003 fabf 	bl	800a33e <HAL_CAN_GetRxFifoFillLevel>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d192      	bne.n	8006cec <TinyBMS_CAN_WriteNodeID+0x68>
			}
		}
	}

	return retval;
 8006dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3730      	adds	r7, #48	; 0x30
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	080131b4 	.word	0x080131b4
 8006dd8:	08013164 	.word	0x08013164
 8006ddc:	2000037c 	.word	0x2000037c
 8006de0:	20000200 	.word	0x20000200
 8006de4:	20000004 	.word	0x20000004
 8006de8:	080125c0 	.word	0x080125c0
 8006dec:	080125dc 	.word	0x080125dc
 8006df0:	08011380 	.word	0x08011380
 8006df4:	080131d0 	.word	0x080131d0
 8006df8:	20000000 	.word	0x20000000
 8006dfc:	080131fc 	.word	0x080131fc
 8006e00:	08012634 	.word	0x08012634

08006e04 <reportBMSError>:

/********************** Error Handling **********************/
static void reportBMSError(uint8_t err) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71fb      	strb	r3, [r7, #7]
	if(err == CMD_ERROR) {
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <reportBMSError+0x18>
		printf("CMD ERROR\r\n");
 8006e14:	4809      	ldr	r0, [pc, #36]	; (8006e3c <reportBMSError+0x38>)
 8006e16:	f007 f989 	bl	800e12c <puts>
	} else if(err == CRC_ERROR) {
		printf("CRC ERROR\r\n");
	} else {
		printf("Error: Byte should be 0x00 or 0x01 but was 0x%02X\r\n", err);
	}
}
 8006e1a:	e00b      	b.n	8006e34 <reportBMSError+0x30>
	} else if(err == CRC_ERROR) {
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d103      	bne.n	8006e2a <reportBMSError+0x26>
		printf("CRC ERROR\r\n");
 8006e22:	4807      	ldr	r0, [pc, #28]	; (8006e40 <reportBMSError+0x3c>)
 8006e24:	f007 f982 	bl	800e12c <puts>
}
 8006e28:	e004      	b.n	8006e34 <reportBMSError+0x30>
		printf("Error: Byte should be 0x00 or 0x01 but was 0x%02X\r\n", err);
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4805      	ldr	r0, [pc, #20]	; (8006e44 <reportBMSError+0x40>)
 8006e30:	f007 f8f6 	bl	800e020 <iprintf>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	08013220 	.word	0x08013220
 8006e40:	0801322c 	.word	0x0801322c
 8006e44:	08013238 	.word	0x08013238

08006e48 <CRC16>:

/********************** CRC Calculation **********************/
static uint16_t CRC16(const uint8_t* data, uint16_t length) {
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	807b      	strh	r3, [r7, #2]
	uint8_t tmp;
	uint16_t crcWord = 0xFFFF;
 8006e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e58:	81fb      	strh	r3, [r7, #14]

	while(length--) {
 8006e5a:	e011      	b.n	8006e80 <CRC16+0x38>
		tmp = *data++ ^ crcWord;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	781a      	ldrb	r2, [r3, #0]
 8006e64:	89fb      	ldrh	r3, [r7, #14]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	4053      	eors	r3, r2
 8006e6a:	737b      	strb	r3, [r7, #13]
		crcWord >>= 8;
 8006e6c:	89fb      	ldrh	r3, [r7, #14]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	81fb      	strh	r3, [r7, #14]
		crcWord ^= crcTable[tmp];
 8006e72:	7b7b      	ldrb	r3, [r7, #13]
 8006e74:	4a08      	ldr	r2, [pc, #32]	; (8006e98 <CRC16+0x50>)
 8006e76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006e7a:	89fb      	ldrh	r3, [r7, #14]
 8006e7c:	4053      	eors	r3, r2
 8006e7e:	81fb      	strh	r3, [r7, #14]
	while(length--) {
 8006e80:	887b      	ldrh	r3, [r7, #2]
 8006e82:	1e5a      	subs	r2, r3, #1
 8006e84:	807a      	strh	r2, [r7, #2]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e8      	bne.n	8006e5c <CRC16+0x14>
	}
	return crcWord;
 8006e8a:	89fb      	ldrh	r3, [r7, #14]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	08013cdc 	.word	0x08013cdc

08006e9c <NMI_Handler>:
extern TIM_HandleTypeDef htim6;

/******************************************************************************/
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void) {
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
	while(1) {}
 8006ea0:	e7fe      	b.n	8006ea0 <NMI_Handler+0x4>

08006ea2 <HardFault_Handler>:
}

void HardFault_Handler(void) {
 8006ea2:	b480      	push	{r7}
 8006ea4:	af00      	add	r7, sp, #0
	while(1) {}
 8006ea6:	e7fe      	b.n	8006ea6 <HardFault_Handler+0x4>

08006ea8 <MemManage_Handler>:
}

void MemManage_Handler(void) {
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
	while(1) {}
 8006eac:	e7fe      	b.n	8006eac <MemManage_Handler+0x4>

08006eae <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8006eae:	b480      	push	{r7}
 8006eb0:	af00      	add	r7, sp, #0
	while(1) {}
 8006eb2:	e7fe      	b.n	8006eb2 <BusFault_Handler+0x4>

08006eb4 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
	while(1) {}
 8006eb8:	e7fe      	b.n	8006eb8 <UsageFault_Handler+0x4>

08006eba <SVC_Handler>:
}

void SVC_Handler(void) {
 8006eba:	b480      	push	{r7}
 8006ebc:	af00      	add	r7, sp, #0

}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <DebugMon_Handler>:

void DebugMon_Handler(void) {
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0

}
 8006ecc:	bf00      	nop
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <PendSV_Handler>:

void PendSV_Handler(void) {
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0

}
 8006eda:	bf00      	nop
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <SysTick_Handler>:

void SysTick_Handler(void) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8006ee8:	f002 fdfc 	bl	8009ae4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8006eec:	f003 fdd2 	bl	800aa94 <HAL_SYSTICK_IRQHandler>
}
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USART2_IRQHandler>:
/* STM32F7xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/
void USART2_IRQHandler(void) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8006ef8:	4802      	ldr	r0, [pc, #8]	; (8006f04 <USART2_IRQHandler+0x10>)
 8006efa:	f005 f99d 	bl	800c238 <HAL_UART_IRQHandler>
}
 8006efe:	bf00      	nop
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000228 	.word	0x20000228

08006f08 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8006f0c:	4802      	ldr	r0, [pc, #8]	; (8006f18 <CAN1_TX_IRQHandler+0x10>)
 8006f0e:	f003 fa8b 	bl	800a428 <HAL_CAN_IRQHandler>
}
 8006f12:	bf00      	nop
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000200 	.word	0x20000200

08006f1c <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8006f20:	4802      	ldr	r0, [pc, #8]	; (8006f2c <CAN1_RX0_IRQHandler+0x10>)
 8006f22:	f003 fa81 	bl	800a428 <HAL_CAN_IRQHandler>
}
 8006f26:	bf00      	nop
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20000200 	.word	0x20000200

08006f30 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8006f34:	4802      	ldr	r0, [pc, #8]	; (8006f40 <CAN1_RX1_IRQHandler+0x10>)
 8006f36:	f003 fa77 	bl	800a428 <HAL_CAN_IRQHandler>
}
 8006f3a:	bf00      	nop
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000200 	.word	0x20000200

08006f44 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8006f48:	4802      	ldr	r0, [pc, #8]	; (8006f54 <CAN1_SCE_IRQHandler+0x10>)
 8006f4a:	f003 fa6d 	bl	800a428 <HAL_CAN_IRQHandler>
}
 8006f4e:	bf00      	nop
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000200 	.word	0x20000200

08006f58 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8006f5c:	4802      	ldr	r0, [pc, #8]	; (8006f68 <TIM6_DAC_IRQHandler+0x10>)
 8006f5e:	f004 fdc8 	bl	800baf2 <HAL_TIM_IRQHandler>
}
 8006f62:	bf00      	nop
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000330 	.word	0x20000330

08006f6c <main>:
/****************** TinyBMS CAN Identifiers ******************/
//Initialize TinyBMS Request/Response StdId's to Default
uint32_t TinybmsStdID_Request = TINYBMS_CAN_REQUEST_DEFAULT_STDID;
uint32_t TinybmsStdID_Response = TINYBMS_CAN_RESPONSE_DEFAULT_STDID;

int main(void) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
	uint8_t app_done = FALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	71fb      	strb	r3, [r7, #7]

	/* Resets all peripherals, initializes the flash interface and Systick. */
	HAL_Init();
 8006f76:	f002 fd78 	bl	8009a6a <HAL_Init>

	/* Configure SYSCLK to 50MHZ */
	SystemClock_Config_HSI(SYS_CLOCK_FREQ_50MHZ);
 8006f7a:	2032      	movs	r0, #50	; 0x32
 8006f7c:	f001 ff7e 	bl	8008e7c <SystemClock_Config_HSI>

	/* Initialize all configured peripherals */
	GPIO_Init();
 8006f80:	f002 f81e 	bl	8008fc0 <GPIO_Init>
	UART_Init();
 8006f84:	f002 f888 	bl	8009098 <UART_Init>
	TIM_Init();
 8006f88:	f002 f8e0 	bl	800914c <TIM_Init>
	CAN_Init(CANBITRATE_500KBIT_50MHZ);
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	f002 f8f9 	bl	8009184 <CAN_Init>
	CAN_Filter_Config();
 8006f92:	f002 f937 	bl	8009204 <CAN_Filter_Config>
	CAN_Begin();
 8006f96:	f002 f963 	bl	8009260 <CAN_Begin>

    printf("*** Spartan Hyperloop 2018-22 ***\r\n");
 8006f9a:	4841      	ldr	r0, [pc, #260]	; (80070a0 <main+0x134>)
 8006f9c:	f007 f8c6 	bl	800e12c <puts>
	printf("Energus TinyBMS API Test App\r\n");
 8006fa0:	4840      	ldr	r0, [pc, #256]	; (80070a4 <main+0x138>)
 8006fa2:	f007 f8c3 	bl	800e12c <puts>
	printf("Secondary Battery Pack BMS\r\n");
 8006fa6:	4840      	ldr	r0, [pc, #256]	; (80070a8 <main+0x13c>)
 8006fa8:	f007 f8c0 	bl	800e12c <puts>

    printf("Menu\r\n");
 8006fac:	483f      	ldr	r0, [pc, #252]	; (80070ac <main+0x140>)
 8006fae:	f007 f8bd 	bl	800e12c <puts>
    printf("1: UART API Test\r\n");
 8006fb2:	483f      	ldr	r0, [pc, #252]	; (80070b0 <main+0x144>)
 8006fb4:	f007 f8ba 	bl	800e12c <puts>
    printf("2: CAN API Test\r\n");
 8006fb8:	483e      	ldr	r0, [pc, #248]	; (80070b4 <main+0x148>)
 8006fba:	f007 f8b7 	bl	800e12c <puts>
    printf("3: Monitor Charging (UART)\r\n");
 8006fbe:	483e      	ldr	r0, [pc, #248]	; (80070b8 <main+0x14c>)
 8006fc0:	f007 f8b4 	bl	800e12c <puts>
    printf("4: Monitor Discharging (UART)\r\n");
 8006fc4:	483d      	ldr	r0, [pc, #244]	; (80070bc <main+0x150>)
 8006fc6:	f007 f8b1 	bl	800e12c <puts>
    printf("5: Monitor Charging (CAN)\r\n");
 8006fca:	483d      	ldr	r0, [pc, #244]	; (80070c0 <main+0x154>)
 8006fcc:	f007 f8ae 	bl	800e12c <puts>
    printf("6: Monitor Discharging (CAN)\r\n");
 8006fd0:	483c      	ldr	r0, [pc, #240]	; (80070c4 <main+0x158>)
 8006fd2:	f007 f8ab 	bl	800e12c <puts>
    printf("7: Quit\r\n");
 8006fd6:	483c      	ldr	r0, [pc, #240]	; (80070c8 <main+0x15c>)
 8006fd8:	f007 f8a8 	bl	800e12c <puts>

	//Application Menu
	while(!app_done) {
 8006fdc:	e058      	b.n	8007090 <main+0x124>
		int userInput = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	603b      	str	r3, [r7, #0]
		scanf("%d", &userInput);
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4839      	ldr	r0, [pc, #228]	; (80070cc <main+0x160>)
 8006fe8:	f007 f8a8 	bl	800e13c <iscanf>

		switch(userInput) {
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	2b06      	cmp	r3, #6
 8006ff2:	d847      	bhi.n	8007084 <main+0x118>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <main+0x90>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007029 	.word	0x08007029
 8007004:	08007039 	.word	0x08007039
 8007008:	08007049 	.word	0x08007049
 800700c:	08007059 	.word	0x08007059
 8007010:	08007069 	.word	0x08007069
 8007014:	08007079 	.word	0x08007079
		//UART API Test
		case MENU_UART_API_TEST:
			printf("UART API Test..\r\n");
 8007018:	482d      	ldr	r0, [pc, #180]	; (80070d0 <main+0x164>)
 800701a:	f007 f887 	bl	800e12c <puts>
			UART_Test_API();
 800701e:	f000 f867 	bl	80070f0 <UART_Test_API>
			app_done = TRUE;
 8007022:	2301      	movs	r3, #1
 8007024:	71fb      	strb	r3, [r7, #7]
			break;
 8007026:	e033      	b.n	8007090 <main+0x124>
		//CAN API Test
		case MENU_CAN_API_TEST:
			printf("CAN API Test..\r\n");
 8007028:	482a      	ldr	r0, [pc, #168]	; (80070d4 <main+0x168>)
 800702a:	f007 f87f 	bl	800e12c <puts>
			CAN_Test_API();
 800702e:	f000 fa05 	bl	800743c <CAN_Test_API>
			app_done = TRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	71fb      	strb	r3, [r7, #7]
			break;
 8007036:	e02b      	b.n	8007090 <main+0x124>
		//Monitor Charging (UART)
		case MENU_MONITOR_CHARGE_UART:
			printf("Monitor Charging (UART)..\r\n");
 8007038:	4827      	ldr	r0, [pc, #156]	; (80070d8 <main+0x16c>)
 800703a:	f007 f877 	bl	800e12c <puts>
			TinyBMS_MonitorCharging_UART();
 800703e:	f000 fb31 	bl	80076a4 <TinyBMS_MonitorCharging_UART>
			app_done = TRUE;
 8007042:	2301      	movs	r3, #1
 8007044:	71fb      	strb	r3, [r7, #7]
			break;
 8007046:	e023      	b.n	8007090 <main+0x124>
		//Monitor Discharging (UART)
		case MENU_MONITOR_DISCHARGE_UART:
			printf("Monitor Discharging (UART)..\r\n");
 8007048:	4824      	ldr	r0, [pc, #144]	; (80070dc <main+0x170>)
 800704a:	f007 f86f 	bl	800e12c <puts>
			TinyBMS_MonitorDischarging_UART();
 800704e:	f000 fcf9 	bl	8007a44 <TinyBMS_MonitorDischarging_UART>
			app_done = TRUE;
 8007052:	2301      	movs	r3, #1
 8007054:	71fb      	strb	r3, [r7, #7]
			break;
 8007056:	e01b      	b.n	8007090 <main+0x124>
		//Monitor Charging (CAN)
		case MENU_MONITOR_CHARGE_CAN:
			printf("Monitor Charging (CAN)..\r\n");
 8007058:	4821      	ldr	r0, [pc, #132]	; (80070e0 <main+0x174>)
 800705a:	f007 f867 	bl	800e12c <puts>
			TinyBMS_MonitorCharging_CAN();
 800705e:	f000 fe57 	bl	8007d10 <TinyBMS_MonitorCharging_CAN>
			app_done = TRUE;
 8007062:	2301      	movs	r3, #1
 8007064:	71fb      	strb	r3, [r7, #7]
			break;
 8007066:	e013      	b.n	8007090 <main+0x124>
		//Monitor Discharging (CAN)
		case MENU_MONITOR_DISCHARGE_CAN:
			printf("Monitor Discharging (CAN)..\r\n");
 8007068:	481e      	ldr	r0, [pc, #120]	; (80070e4 <main+0x178>)
 800706a:	f007 f85f 	bl	800e12c <puts>
			TinyBMS_MonitorDischarging_CAN();
 800706e:	f001 f80b 	bl	8008088 <TinyBMS_MonitorDischarging_CAN>
			app_done = TRUE;
 8007072:	2301      	movs	r3, #1
 8007074:	71fb      	strb	r3, [r7, #7]
			break;
 8007076:	e00b      	b.n	8007090 <main+0x124>
		//Quit
		case MENU_QUIT:
			printf("Exiting..\r\n");
 8007078:	481b      	ldr	r0, [pc, #108]	; (80070e8 <main+0x17c>)
 800707a:	f007 f857 	bl	800e12c <puts>
			app_done = TRUE;
 800707e:	2301      	movs	r3, #1
 8007080:	71fb      	strb	r3, [r7, #7]
			break;
 8007082:	e005      	b.n	8007090 <main+0x124>
		//Invalid
		default:
			printf("Invalid input.\r\n");
 8007084:	4819      	ldr	r0, [pc, #100]	; (80070ec <main+0x180>)
 8007086:	f007 f851 	bl	800e12c <puts>
			app_done = FALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	71fb      	strb	r3, [r7, #7]
			break;
 800708e:	bf00      	nop
	while(!app_done) {
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0a3      	beq.n	8006fde <main+0x72>
		}
	}
	return 0;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	0801326c 	.word	0x0801326c
 80070a4:	08013290 	.word	0x08013290
 80070a8:	080132b0 	.word	0x080132b0
 80070ac:	080132cc 	.word	0x080132cc
 80070b0:	080132d4 	.word	0x080132d4
 80070b4:	080132e8 	.word	0x080132e8
 80070b8:	080132fc 	.word	0x080132fc
 80070bc:	08013318 	.word	0x08013318
 80070c0:	08013338 	.word	0x08013338
 80070c4:	08013354 	.word	0x08013354
 80070c8:	08013374 	.word	0x08013374
 80070cc:	08013380 	.word	0x08013380
 80070d0:	08013384 	.word	0x08013384
 80070d4:	08013398 	.word	0x08013398
 80070d8:	080133a8 	.word	0x080133a8
 80070dc:	080133c4 	.word	0x080133c4
 80070e0:	080133e4 	.word	0x080133e4
 80070e4:	08013400 	.word	0x08013400
 80070e8:	08013420 	.word	0x08013420
 80070ec:	0801342c 	.word	0x0801342c

080070f0 <UART_Test_API>:

void UART_Test_API(void) {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b096      	sub	sp, #88	; 0x58
 80070f4:	af02      	add	r7, sp, #8
	int8_t option = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	//rl: registers to read/write | pl: payload length in bytes
	uint8_t rl = 0, pl = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007102:	2300      	movs	r3, #0
 8007104:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint16_t addr = 0x00;
 8007108:	2300      	movs	r3, #0
 800710a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	/*** Hangs in while loop unless success ***/
	//1.1.1 ACK
	while(TinyBMS_UART_ACK(&huart2) != CMD_SUCCESS) {}
 800710e:	bf00      	nop
 8007110:	48bd      	ldr	r0, [pc, #756]	; (8007408 <UART_Test_API+0x318>)
 8007112:	f7f9 feeb 	bl	8000eec <TinyBMS_UART_ACK>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f9      	bne.n	8007110 <UART_Test_API+0x20>

	//1.1.2 ReadRegBlock
	rl = 16;
 800711c:	2310      	movs	r3, #16
 800711e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	addr = CELL1_VOLTAGE;
 8007122:	2300      	movs	r3, #0
 8007124:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	while(TinyBMS_UART_ReadRegBlock(&huart2, rl, addr) != CMD_SUCCESS) {}
 8007128:	bf00      	nop
 800712a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800712e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007132:	4619      	mov	r1, r3
 8007134:	48b4      	ldr	r0, [pc, #720]	; (8007408 <UART_Test_API+0x318>)
 8007136:	f7f9 ff93 	bl	8001060 <TinyBMS_UART_ReadRegBlock>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f4      	bne.n	800712a <UART_Test_API+0x3a>

	//1.1.3 ReadRegIndividual
	pl = 10;
 8007140:	230a      	movs	r3, #10
 8007142:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint16_t addrs1[5] = { BMS_LIFETIME_COUNTER, ESTIMATED_TIME_LEFT,
 8007146:	4ab1      	ldr	r2, [pc, #708]	; (800740c <UART_Test_API+0x31c>)
 8007148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800714c:	ca07      	ldmia	r2, {r0, r1, r2}
 800714e:	c303      	stmia	r3!, {r0, r1}
 8007150:	801a      	strh	r2, [r3, #0]
						   BATTERY_PACK_VOLTAGE, BATTERY_PACK_CURRENT,
						   BMS_ONLINE_STATUS };
	while(TinyBMS_UART_ReadRegIndividual(&huart2, pl, addrs1) != CMD_SUCCESS) {}
 8007152:	bf00      	nop
 8007154:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007158:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800715c:	4619      	mov	r1, r3
 800715e:	48aa      	ldr	r0, [pc, #680]	; (8007408 <UART_Test_API+0x318>)
 8007160:	f7fa f904 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f4      	bne.n	8007154 <UART_Test_API+0x64>

	//1.1.4 WriteRegBlock
	pl = 8;
 800716a:	2308      	movs	r3, #8
 800716c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	addr = OVERVOLTAGE_CUTOFF;
 8007170:	f240 133b 	movw	r3, #315	; 0x13b
 8007174:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t data1[4] = {4200, 3000, 50, 25};
 8007178:	4aa5      	ldr	r2, [pc, #660]	; (8007410 <UART_Test_API+0x320>)
 800717a:	f107 031c 	add.w	r3, r7, #28
 800717e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007182:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Writing to 4 registers (2bytes each) starting with: OVERVOLTAGE_CUTOFF,
	 * UNDERVOLTAGE_CUTOFF, DISCHARGE_OVERCURRENT_CUTOFF, CHARGE_OVERCURRENT_CUTOFF */
	while(TinyBMS_UART_WriteRegBlock(&huart2, pl, addr, data1) != CMD_SUCCESS) {}
 8007186:	bf00      	nop
 8007188:	f107 031c 	add.w	r3, r7, #28
 800718c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8007190:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8007194:	489c      	ldr	r0, [pc, #624]	; (8007408 <UART_Test_API+0x318>)
 8007196:	f7fa fb27 	bl	80017e8 <TinyBMS_UART_WriteRegBlock>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f3      	bne.n	8007188 <UART_Test_API+0x98>

	//1.1.5 WriteRegIndividual
	pl = 8;
 80071a0:	2308      	movs	r3, #8
 80071a2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint16_t addrs2[4] = { FULLYCHARGED_VOLTAGE, FULLYDISCHARGED_VOLTAGE,
 80071a6:	4a9b      	ldr	r2, [pc, #620]	; (8007414 <UART_Test_API+0x324>)
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071b0:	e883 0003 	stmia.w	r3, {r0, r1}
							  BATTERY_CAPACITY, NUMBER_OF_SERIES_CELLS };
	uint16_t data2[4] = {4200, 3000, 5000, 7};
 80071b4:	4a98      	ldr	r2, [pc, #608]	; (8007418 <UART_Test_API+0x328>)
 80071b6:	f107 030c 	add.w	r3, r7, #12
 80071ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071be:	e883 0003 	stmia.w	r3, {r0, r1}
	while(TinyBMS_UART_WriteRegIndividual(&huart2, pl, addrs2, data2) != CMD_SUCCESS) {}
 80071c2:	bf00      	nop
 80071c4:	f107 030c 	add.w	r3, r7, #12
 80071c8:	f107 0214 	add.w	r2, r7, #20
 80071cc:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 80071d0:	488d      	ldr	r0, [pc, #564]	; (8007408 <UART_Test_API+0x318>)
 80071d2:	f7fa fcf1 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f3      	bne.n	80071c4 <UART_Test_API+0xd4>

	//1.1.6 ReadRegBlockMODBUS
	addr = CELL1_VOLTAGE;
 80071dc:	2300      	movs	r3, #0
 80071de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	rl = 16;
 80071e2:	2310      	movs	r3, #16
 80071e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	while(TinyBMS_UART_ReadRegBlockMODBUS(&huart2, addr, rl) != CMD_SUCCESS) {}
 80071e8:	bf00      	nop
 80071ea:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80071ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80071f2:	4619      	mov	r1, r3
 80071f4:	4884      	ldr	r0, [pc, #528]	; (8007408 <UART_Test_API+0x318>)
 80071f6:	f7fa fee7 	bl	8001fc8 <TinyBMS_UART_ReadRegBlockMODBUS>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f4      	bne.n	80071ea <UART_Test_API+0xfa>

	//1.1.7 WriteRegBlockMODBUS
	addr = OVERVOLTAGE_CUTOFF;
 8007200:	f240 133b 	movw	r3, #315	; 0x13b
 8007204:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	rl = 4;
 8007208:	2304      	movs	r3, #4
 800720a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	pl = 8;
 800720e:	2308      	movs	r3, #8
 8007210:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint16_t data3[4] = {4200, 2900, 60, 30};
 8007214:	4a81      	ldr	r2, [pc, #516]	; (800741c <UART_Test_API+0x32c>)
 8007216:	1d3b      	adds	r3, r7, #4
 8007218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800721c:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Writing to 4 registers (2bytes each) starting with: OVERVOLTAGE_CUTOFF,
	 * UNDERVOLTAGE_CUTOFF, DISCHARGE_OVERCURRENT_CUTOFF, CHARGE_OVERCURRENT_CUTOFF */
	while(TinyBMS_UART_WriteRegBlockMODBUS(&huart2, addr, rl, pl, data3) != CMD_SUCCESS) {}
 8007220:	bf00      	nop
 8007222:	f897 004d 	ldrb.w	r0, [r7, #77]	; 0x4d
 8007226:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800722a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	4603      	mov	r3, r0
 8007234:	4874      	ldr	r0, [pc, #464]	; (8007408 <UART_Test_API+0x318>)
 8007236:	f7fb f83d 	bl	80022b4 <TinyBMS_UART_WriteRegBlockMODBUS>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f0      	bne.n	8007222 <UART_Test_API+0x132>

	//1.1.8 ResetClearEventsStatistics
	option = TINYBMS_CLEAR_EVENTS;
 8007240:	2301      	movs	r3, #1
 8007242:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, option) != CMD_SUCCESS) {}
 8007246:	bf00      	nop
 8007248:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800724c:	4619      	mov	r1, r3
 800724e:	486e      	ldr	r0, [pc, #440]	; (8007408 <UART_Test_API+0x318>)
 8007250:	f7fb fa08 	bl	8002664 <TinyBMS_UART_ResetClearEventsStatistics>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1f6      	bne.n	8007248 <UART_Test_API+0x158>
	option = TINYBMS_CLEAR_STATS;
 800725a:	2302      	movs	r3, #2
 800725c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, option) != CMD_SUCCESS) {}
 8007260:	bf00      	nop
 8007262:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007266:	4619      	mov	r1, r3
 8007268:	4867      	ldr	r0, [pc, #412]	; (8007408 <UART_Test_API+0x318>)
 800726a:	f7fb f9fb 	bl	8002664 <TinyBMS_UART_ResetClearEventsStatistics>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1f6      	bne.n	8007262 <UART_Test_API+0x172>
	option = TINYBMS_RESET_BMS;
 8007274:	2305      	movs	r3, #5
 8007276:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, option) != CMD_SUCCESS) {}
 800727a:	bf00      	nop
 800727c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007280:	4619      	mov	r1, r3
 8007282:	4861      	ldr	r0, [pc, #388]	; (8007408 <UART_Test_API+0x318>)
 8007284:	f7fb f9ee 	bl	8002664 <TinyBMS_UART_ResetClearEventsStatistics>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f6      	bne.n	800727c <UART_Test_API+0x18c>

	//1.1.9 ReadNewestEvents
	while(TinyBMS_UART_ReadNewestEvents(&huart2) != CMD_SUCCESS) {}
 800728e:	bf00      	nop
 8007290:	485d      	ldr	r0, [pc, #372]	; (8007408 <UART_Test_API+0x318>)
 8007292:	f7fb faf5 	bl	8002880 <TinyBMS_UART_ReadNewestEvents>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1f9      	bne.n	8007290 <UART_Test_API+0x1a0>

	//1.1.10 ReadAllEvents
	while(TinyBMS_UART_ReadAllEvents(&huart2) != CMD_SUCCESS) {}
 800729c:	bf00      	nop
 800729e:	485a      	ldr	r0, [pc, #360]	; (8007408 <UART_Test_API+0x318>)
 80072a0:	f7fb fc6e 	bl	8002b80 <TinyBMS_UART_ReadAllEvents>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f9      	bne.n	800729e <UART_Test_API+0x1ae>

	//1.1.11 ReadBatteryPackVoltage
	float packVoltage = TinyBMS_UART_ReadBatteryPackVoltage(&huart2);
 80072aa:	4857      	ldr	r0, [pc, #348]	; (8007408 <UART_Test_API+0x318>)
 80072ac:	f7fb fde8 	bl	8002e80 <TinyBMS_UART_ReadBatteryPackVoltage>
 80072b0:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 80072b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80072b6:	f7f9 f967 	bl	8000588 <__aeabi_f2d>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4858      	ldr	r0, [pc, #352]	; (8007420 <UART_Test_API+0x330>)
 80072c0:	f006 feae 	bl	800e020 <iprintf>

	//1.1.12 ReadBatteryPackCurrent
	float packCurrent = TinyBMS_UART_ReadBatteryPackCurrent(&huart2);
 80072c4:	4850      	ldr	r0, [pc, #320]	; (8007408 <UART_Test_API+0x318>)
 80072c6:	f7fb fed1 	bl	800306c <TinyBMS_UART_ReadBatteryPackCurrent>
 80072ca:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 80072ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80072d0:	f7f9 f95a 	bl	8000588 <__aeabi_f2d>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4852      	ldr	r0, [pc, #328]	; (8007424 <UART_Test_API+0x334>)
 80072da:	f006 fea1 	bl	800e020 <iprintf>

	//1.1.13 ReadBatteryPackMaxCellVoltage
	uint16_t maxCellVoltage = TinyBMS_UART_ReadBatteryPackMaxCellVoltage(&huart2);
 80072de:	484a      	ldr	r0, [pc, #296]	; (8007408 <UART_Test_API+0x318>)
 80072e0:	f7fb ffba 	bl	8003258 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage>
 80072e4:	4603      	mov	r3, r0
 80072e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
	printf("Secondary Battery Pack Maximum Cell Voltage: %u (mV)\r\n", maxCellVoltage);
 80072e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80072ea:	4619      	mov	r1, r3
 80072ec:	484e      	ldr	r0, [pc, #312]	; (8007428 <UART_Test_API+0x338>)
 80072ee:	f006 fe97 	bl	800e020 <iprintf>

	//1.1.14 ReadBatteryPackMinCellVoltage
	uint16_t minCellVoltage = TinyBMS_UART_ReadBatteryPackMinCellVoltage(&huart2);
 80072f2:	4845      	ldr	r0, [pc, #276]	; (8007408 <UART_Test_API+0x318>)
 80072f4:	f7fc f890 	bl	8003418 <TinyBMS_UART_ReadBatteryPackMinCellVoltage>
 80072f8:	4603      	mov	r3, r0
 80072fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
	printf("Secondary Battery Pack Minimum Cell Voltage: %u (mV)\r\n", minCellVoltage);
 80072fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80072fe:	4619      	mov	r1, r3
 8007300:	484a      	ldr	r0, [pc, #296]	; (800742c <UART_Test_API+0x33c>)
 8007302:	f006 fe8d 	bl	800e020 <iprintf>

	//1.1.15 ReadOnlineStatus
	uint16_t onlineStatus = TinyBMS_UART_ReadOnlineStatus(&huart2);
 8007306:	4840      	ldr	r0, [pc, #256]	; (8007408 <UART_Test_API+0x318>)
 8007308:	f7fc f966 	bl	80035d8 <TinyBMS_UART_ReadOnlineStatus>
 800730c:	4603      	mov	r3, r0
 800730e:	877b      	strh	r3, [r7, #58]	; 0x3a
	printf("TinyBMS Online Status: %u\r\n", onlineStatus);
 8007310:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007312:	4619      	mov	r1, r3
 8007314:	4846      	ldr	r0, [pc, #280]	; (8007430 <UART_Test_API+0x340>)
 8007316:	f006 fe83 	bl	800e020 <iprintf>

	//1.1.16 ReadLifetimeCounter
	uint32_t lifetimeCounter = TinyBMS_UART_ReadLifetimeCounter(&huart2);
 800731a:	483b      	ldr	r0, [pc, #236]	; (8007408 <UART_Test_API+0x318>)
 800731c:	f7fc fa86 	bl	800382c <TinyBMS_UART_ReadLifetimeCounter>
 8007320:	6378      	str	r0, [r7, #52]	; 0x34
	printf("TinyBMS Lifetime Counter: %lu (s)\r\n", lifetimeCounter);
 8007322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007324:	4843      	ldr	r0, [pc, #268]	; (8007434 <UART_Test_API+0x344>)
 8007326:	f006 fe7b 	bl	800e020 <iprintf>

	//1.1.17 ReadEstimatedSOCValue
	uint32_t estSOC = TinyBMS_UART_ReadEstimatedSOCValue(&huart2);
 800732a:	4837      	ldr	r0, [pc, #220]	; (8007408 <UART_Test_API+0x318>)
 800732c:	f7fc fb64 	bl	80039f8 <TinyBMS_UART_ReadEstimatedSOCValue>
 8007330:	6338      	str	r0, [r7, #48]	; 0x30
	printf("Estimated State of Charge (SOC): %lu (0.000 001 %% resolution)\r\n", estSOC);
 8007332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007334:	4840      	ldr	r0, [pc, #256]	; (8007438 <UART_Test_API+0x348>)
 8007336:	f006 fe73 	bl	800e020 <iprintf>

	//1.1.18 ReadDeviceTemperatures
	while(TinyBMS_UART_ReadDeviceTemperatures(&huart2) != CMD_SUCCESS) {}
 800733a:	bf00      	nop
 800733c:	4832      	ldr	r0, [pc, #200]	; (8007408 <UART_Test_API+0x318>)
 800733e:	f7fc fc41 	bl	8003bc4 <TinyBMS_UART_ReadDeviceTemperatures>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f9      	bne.n	800733c <UART_Test_API+0x24c>

	//1.1.19 ReadBatteryPackCellVoltages
	while(TinyBMS_UART_ReadBatteryPackCellVoltages(&huart2) != CMD_SUCCESS) {}
 8007348:	bf00      	nop
 800734a:	482f      	ldr	r0, [pc, #188]	; (8007408 <UART_Test_API+0x318>)
 800734c:	f7fc fd8a 	bl	8003e64 <TinyBMS_UART_ReadBatteryPackCellVoltages>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f9      	bne.n	800734a <UART_Test_API+0x25a>

	//1.1.20 ReadSettingsValues
	rl = 100; //Registers to read: Max. 100 (0x64) registers
 8007356:	2364      	movs	r3, #100	; 0x64
 8007358:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	option = TINYBMS_SETTINGS_MIN;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(TinyBMS_UART_ReadSettingsValues(&huart2, option, rl) != CMD_SUCCESS) {}
 8007362:	bf00      	nop
 8007364:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007368:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800736c:	4619      	mov	r1, r3
 800736e:	4826      	ldr	r0, [pc, #152]	; (8007408 <UART_Test_API+0x318>)
 8007370:	f7fc febe 	bl	80040f0 <TinyBMS_UART_ReadSettingsValues>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1f4      	bne.n	8007364 <UART_Test_API+0x274>
	option = TINYBMS_SETTINGS_MAX;
 800737a:	2302      	movs	r3, #2
 800737c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(TinyBMS_UART_ReadSettingsValues(&huart2, option, rl) != CMD_SUCCESS) {}
 8007380:	bf00      	nop
 8007382:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007386:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800738a:	4619      	mov	r1, r3
 800738c:	481e      	ldr	r0, [pc, #120]	; (8007408 <UART_Test_API+0x318>)
 800738e:	f7fc feaf 	bl	80040f0 <TinyBMS_UART_ReadSettingsValues>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f4      	bne.n	8007382 <UART_Test_API+0x292>
	option = TINYBMS_SETTINGS_DEFAULT;
 8007398:	2303      	movs	r3, #3
 800739a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(TinyBMS_UART_ReadSettingsValues(&huart2, option, rl) != CMD_SUCCESS) {}
 800739e:	bf00      	nop
 80073a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80073a4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80073a8:	4619      	mov	r1, r3
 80073aa:	4817      	ldr	r0, [pc, #92]	; (8007408 <UART_Test_API+0x318>)
 80073ac:	f7fc fea0 	bl	80040f0 <TinyBMS_UART_ReadSettingsValues>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f4      	bne.n	80073a0 <UART_Test_API+0x2b0>
	option = TINYBMS_SETTINGS_CURRENT;
 80073b6:	2304      	movs	r3, #4
 80073b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(TinyBMS_UART_ReadSettingsValues(&huart2, option, rl) != CMD_SUCCESS) {}
 80073bc:	bf00      	nop
 80073be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80073c2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80073c6:	4619      	mov	r1, r3
 80073c8:	480f      	ldr	r0, [pc, #60]	; (8007408 <UART_Test_API+0x318>)
 80073ca:	f7fc fe91 	bl	80040f0 <TinyBMS_UART_ReadSettingsValues>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f4      	bne.n	80073be <UART_Test_API+0x2ce>

	//1.1.21 ReadVersion
	while(TinyBMS_UART_ReadVersion(&huart2) != CMD_SUCCESS) {}
 80073d4:	bf00      	nop
 80073d6:	480c      	ldr	r0, [pc, #48]	; (8007408 <UART_Test_API+0x318>)
 80073d8:	f7fd f822 	bl	8004420 <TinyBMS_UART_ReadVersion>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f9      	bne.n	80073d6 <UART_Test_API+0x2e6>

	//1.1.22 ReadVersionExtended
	while(TinyBMS_UART_ReadVersionExtended(&huart2) != CMD_SUCCESS) {}
 80073e2:	bf00      	nop
 80073e4:	4808      	ldr	r0, [pc, #32]	; (8007408 <UART_Test_API+0x318>)
 80073e6:	f7fd f9ab 	bl	8004740 <TinyBMS_UART_ReadVersionExtended>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1f9      	bne.n	80073e4 <UART_Test_API+0x2f4>

	//1.1.23 ReadCalcSpeedDistanceLeftEstTimeLeft
	while(TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft(&huart2) != CMD_SUCCESS) {}
 80073f0:	bf00      	nop
 80073f2:	4805      	ldr	r0, [pc, #20]	; (8007408 <UART_Test_API+0x318>)
 80073f4:	f7fd fb94 	bl	8004b20 <TinyBMS_UART_ReadCalcSpeedDistanceLeftEstTimeLeft>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f9      	bne.n	80073f2 <UART_Test_API+0x302>
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	3750      	adds	r7, #80	; 0x50
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000228 	.word	0x20000228
 800740c:	08013588 	.word	0x08013588
 8007410:	08013594 	.word	0x08013594
 8007414:	0801359c 	.word	0x0801359c
 8007418:	080135a4 	.word	0x080135a4
 800741c:	080135ac 	.word	0x080135ac
 8007420:	0801343c 	.word	0x0801343c
 8007424:	08013468 	.word	0x08013468
 8007428:	08013494 	.word	0x08013494
 800742c:	080134cc 	.word	0x080134cc
 8007430:	08013504 	.word	0x08013504
 8007434:	08013520 	.word	0x08013520
 8007438:	08013544 	.word	0x08013544

0800743c <CAN_Test_API>:

void CAN_Test_API(void) {
 800743c:	b580      	push	{r7, lr}
 800743e:	b08a      	sub	sp, #40	; 0x28
 8007440:	af00      	add	r7, sp, #0
	int8_t option = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t rl = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint16_t addr = 0x00;
 800744e:	2300      	movs	r3, #0
 8007450:	84bb      	strh	r3, [r7, #36]	; 0x24

	/*** Hangs in while loop unless success ***/
	//2.1.1 ResetClearEventsStatistics
	option = TINYBMS_CLEAR_EVENTS;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, option) != CMD_SUCCESS) {}
 8007458:	bf00      	nop
 800745a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800745e:	4619      	mov	r1, r3
 8007460:	4887      	ldr	r0, [pc, #540]	; (8007680 <CAN_Test_API+0x244>)
 8007462:	f7fd fc87 	bl	8004d74 <TinyBMS_CAN_ResetClearEventsStatistics>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f6      	bne.n	800745a <CAN_Test_API+0x1e>
	option = TINYBMS_CLEAR_STATS;
 800746c:	2302      	movs	r3, #2
 800746e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, option) != CMD_SUCCESS) {}
 8007472:	bf00      	nop
 8007474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007478:	4619      	mov	r1, r3
 800747a:	4881      	ldr	r0, [pc, #516]	; (8007680 <CAN_Test_API+0x244>)
 800747c:	f7fd fc7a 	bl	8004d74 <TinyBMS_CAN_ResetClearEventsStatistics>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f6      	bne.n	8007474 <CAN_Test_API+0x38>
	option = TINYBMS_RESET_BMS;
 8007486:	2305      	movs	r3, #5
 8007488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, option) != CMD_SUCCESS) {}
 800748c:	bf00      	nop
 800748e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007492:	4619      	mov	r1, r3
 8007494:	487a      	ldr	r0, [pc, #488]	; (8007680 <CAN_Test_API+0x244>)
 8007496:	f7fd fc6d 	bl	8004d74 <TinyBMS_CAN_ResetClearEventsStatistics>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f6      	bne.n	800748e <CAN_Test_API+0x52>

	//2.1.2 ReadRegBlock
	rl = 16;
 80074a0:	2310      	movs	r3, #16
 80074a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	addr = CELL1_VOLTAGE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	while(TinyBMS_CAN_ReadRegBlock(&hcan1, rl, addr) != CMD_SUCCESS) {}
 80074aa:	bf00      	nop
 80074ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074b2:	4619      	mov	r1, r3
 80074b4:	4872      	ldr	r0, [pc, #456]	; (8007680 <CAN_Test_API+0x244>)
 80074b6:	f7fd fd19 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1f5      	bne.n	80074ac <CAN_Test_API+0x70>

	//2.1.3 WriteRegBlock
	rl = 4;
 80074c0:	2304      	movs	r3, #4
 80074c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	addr = OVERVOLTAGE_CUTOFF;
 80074c6:	f240 133b 	movw	r3, #315	; 0x13b
 80074ca:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data1[4] = {4200, 2900, 60, 30};
 80074cc:	4a6d      	ldr	r2, [pc, #436]	; (8007684 <CAN_Test_API+0x248>)
 80074ce:	463b      	mov	r3, r7
 80074d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074d4:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Writing to 4 registers (2bytes each) starting with: OVERVOLTAGE_CUTOFF,
	* UNDERVOLTAGE_CUTOFF, DISCHARGE_OVERCURRENT_CUTOFF, CHARGE_OVERCURRENT_CUTOFF */
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, rl, addr, data1) != CMD_SUCCESS) {}
 80074d8:	bf00      	nop
 80074da:	463b      	mov	r3, r7
 80074dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074de:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80074e2:	4867      	ldr	r0, [pc, #412]	; (8007680 <CAN_Test_API+0x244>)
 80074e4:	f7fd fe04 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f5      	bne.n	80074da <CAN_Test_API+0x9e>

	//2.1.4 ReadNewestEvents
	while(TinyBMS_CAN_ReadNewestEvents(&hcan1) != CMD_SUCCESS) {}
 80074ee:	bf00      	nop
 80074f0:	4863      	ldr	r0, [pc, #396]	; (8007680 <CAN_Test_API+0x244>)
 80074f2:	f7fd ff0b 	bl	800530c <TinyBMS_CAN_ReadNewestEvents>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f9      	bne.n	80074f0 <CAN_Test_API+0xb4>

	//2.1.5 ReadAllEvents
	while(TinyBMS_CAN_ReadAllEvents(&hcan1) != CMD_SUCCESS) {}
 80074fc:	bf00      	nop
 80074fe:	4860      	ldr	r0, [pc, #384]	; (8007680 <CAN_Test_API+0x244>)
 8007500:	f7fe f800 	bl	8005504 <TinyBMS_CAN_ReadAllEvents>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f9      	bne.n	80074fe <CAN_Test_API+0xc2>

	//2.1.6 ReadBatteryPackVoltage
	float packVoltage = TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 800750a:	485d      	ldr	r0, [pc, #372]	; (8007680 <CAN_Test_API+0x244>)
 800750c:	f7fe f8f6 	bl	80056fc <TinyBMS_CAN_ReadBatteryPackVoltage>
 8007510:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 8007514:	6a38      	ldr	r0, [r7, #32]
 8007516:	f7f9 f837 	bl	8000588 <__aeabi_f2d>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	485a      	ldr	r0, [pc, #360]	; (8007688 <CAN_Test_API+0x24c>)
 8007520:	f006 fd7e 	bl	800e020 <iprintf>

	//2.1.7 ReadBatteryPackCurrent
	float packCurrent = TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 8007524:	4856      	ldr	r0, [pc, #344]	; (8007680 <CAN_Test_API+0x244>)
 8007526:	f7fe f999 	bl	800585c <TinyBMS_CAN_ReadBatteryPackCurrent>
 800752a:	ed87 0a07 	vstr	s0, [r7, #28]
	printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 800752e:	69f8      	ldr	r0, [r7, #28]
 8007530:	f7f9 f82a 	bl	8000588 <__aeabi_f2d>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4854      	ldr	r0, [pc, #336]	; (800768c <CAN_Test_API+0x250>)
 800753a:	f006 fd71 	bl	800e020 <iprintf>

	//2.1.8 ReadBatteryPackMaxCellVoltage
	uint16_t maxCellVoltage = TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(&hcan1);
 800753e:	4850      	ldr	r0, [pc, #320]	; (8007680 <CAN_Test_API+0x244>)
 8007540:	f7fe fa3c 	bl	80059bc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>
 8007544:	4603      	mov	r3, r0
 8007546:	837b      	strh	r3, [r7, #26]
	printf("Secondary Battery Pack Maximum Cell Voltage: %u (mV)\r\n", maxCellVoltage);
 8007548:	8b7b      	ldrh	r3, [r7, #26]
 800754a:	4619      	mov	r1, r3
 800754c:	4850      	ldr	r0, [pc, #320]	; (8007690 <CAN_Test_API+0x254>)
 800754e:	f006 fd67 	bl	800e020 <iprintf>

	//2.1.9 ReadBatteryPackMinCellVoltage
	uint16_t minCellVoltage = TinyBMS_CAN_ReadBatteryPackMinCellVoltage(&hcan1);
 8007552:	484b      	ldr	r0, [pc, #300]	; (8007680 <CAN_Test_API+0x244>)
 8007554:	f7fe fad0 	bl	8005af8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>
 8007558:	4603      	mov	r3, r0
 800755a:	833b      	strh	r3, [r7, #24]
	printf("Secondary Battery Pack Minimum Cell Voltage: %u (mV)\r\n", minCellVoltage);
 800755c:	8b3b      	ldrh	r3, [r7, #24]
 800755e:	4619      	mov	r1, r3
 8007560:	484c      	ldr	r0, [pc, #304]	; (8007694 <CAN_Test_API+0x258>)
 8007562:	f006 fd5d 	bl	800e020 <iprintf>

	//2.1.10 ReadOnlineStatus
	uint16_t onlineStatus = TinyBMS_CAN_ReadOnlineStatus(&hcan1);
 8007566:	4846      	ldr	r0, [pc, #280]	; (8007680 <CAN_Test_API+0x244>)
 8007568:	f7fe fb64 	bl	8005c34 <TinyBMS_CAN_ReadOnlineStatus>
 800756c:	4603      	mov	r3, r0
 800756e:	82fb      	strh	r3, [r7, #22]
	printf("TinyBMS Online Status: %u\r\n", onlineStatus);
 8007570:	8afb      	ldrh	r3, [r7, #22]
 8007572:	4619      	mov	r1, r3
 8007574:	4848      	ldr	r0, [pc, #288]	; (8007698 <CAN_Test_API+0x25c>)
 8007576:	f006 fd53 	bl	800e020 <iprintf>

	//2.1.11 ReadLifetimeCounter
	uint32_t lifetimeCounter = TinyBMS_CAN_ReadLifetimeCounter(&hcan1);
 800757a:	4841      	ldr	r0, [pc, #260]	; (8007680 <CAN_Test_API+0x244>)
 800757c:	f7fe fc48 	bl	8005e10 <TinyBMS_CAN_ReadLifetimeCounter>
 8007580:	6138      	str	r0, [r7, #16]
	printf("TinyBMS Lifetime Counter: %lu (s)\r\n", lifetimeCounter);
 8007582:	6939      	ldr	r1, [r7, #16]
 8007584:	4845      	ldr	r0, [pc, #276]	; (800769c <CAN_Test_API+0x260>)
 8007586:	f006 fd4b 	bl	800e020 <iprintf>

	//2.1.12 ReadEstimatedSOCValue
	uint32_t estSOC = TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 800758a:	483d      	ldr	r0, [pc, #244]	; (8007680 <CAN_Test_API+0x244>)
 800758c:	f7fe fce2 	bl	8005f54 <TinyBMS_CAN_ReadEstimatedSOCValue>
 8007590:	60f8      	str	r0, [r7, #12]
	printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 8007592:	68f9      	ldr	r1, [r7, #12]
 8007594:	4842      	ldr	r0, [pc, #264]	; (80076a0 <CAN_Test_API+0x264>)
 8007596:	f006 fd43 	bl	800e020 <iprintf>

	//2.1.13 ReadDeviceTemperatures
	while(TinyBMS_CAN_ReadDeviceTemperatures(&hcan1) != CMD_SUCCESS) {}
 800759a:	bf00      	nop
 800759c:	4838      	ldr	r0, [pc, #224]	; (8007680 <CAN_Test_API+0x244>)
 800759e:	f7fe fd7b 	bl	8006098 <TinyBMS_CAN_ReadDeviceTemperatures>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1f9      	bne.n	800759c <CAN_Test_API+0x160>

	//2.1.14 ReadBatteryPackCellVoltages
	while(TinyBMS_CAN_ReadBatteryPackCellVoltages(&hcan1) != CMD_SUCCESS) {}
 80075a8:	bf00      	nop
 80075aa:	4835      	ldr	r0, [pc, #212]	; (8007680 <CAN_Test_API+0x244>)
 80075ac:	f7fe fe74 	bl	8006298 <TinyBMS_CAN_ReadBatteryPackCellVoltages>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f9      	bne.n	80075aa <CAN_Test_API+0x16e>

	//2.1.15 ReadSettingsValues
	rl = 100; //Registers to read: Max. 100 (0x64) registers
 80075b6:	2364      	movs	r3, #100	; 0x64
 80075b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	option = TINYBMS_SETTINGS_MIN;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, option, rl) != CMD_SUCCESS) {}
 80075c2:	bf00      	nop
 80075c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075cc:	4619      	mov	r1, r3
 80075ce:	482c      	ldr	r0, [pc, #176]	; (8007680 <CAN_Test_API+0x244>)
 80075d0:	f7fe ff2e 	bl	8006430 <TinyBMS_CAN_ReadSettingsValues>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f4      	bne.n	80075c4 <CAN_Test_API+0x188>
	option = TINYBMS_SETTINGS_MAX;
 80075da:	2302      	movs	r3, #2
 80075dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, option, rl) != CMD_SUCCESS) {}
 80075e0:	bf00      	nop
 80075e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075ea:	4619      	mov	r1, r3
 80075ec:	4824      	ldr	r0, [pc, #144]	; (8007680 <CAN_Test_API+0x244>)
 80075ee:	f7fe ff1f 	bl	8006430 <TinyBMS_CAN_ReadSettingsValues>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f4      	bne.n	80075e2 <CAN_Test_API+0x1a6>
	option = TINYBMS_SETTINGS_DEFAULT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, option, rl) != CMD_SUCCESS) {}
 80075fe:	bf00      	nop
 8007600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007604:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007608:	4619      	mov	r1, r3
 800760a:	481d      	ldr	r0, [pc, #116]	; (8007680 <CAN_Test_API+0x244>)
 800760c:	f7fe ff10 	bl	8006430 <TinyBMS_CAN_ReadSettingsValues>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1f4      	bne.n	8007600 <CAN_Test_API+0x1c4>
	option = TINYBMS_SETTINGS_CURRENT;
 8007616:	2304      	movs	r3, #4
 8007618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, option, rl) != CMD_SUCCESS) {}
 800761c:	bf00      	nop
 800761e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007622:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007626:	4619      	mov	r1, r3
 8007628:	4815      	ldr	r0, [pc, #84]	; (8007680 <CAN_Test_API+0x244>)
 800762a:	f7fe ff01 	bl	8006430 <TinyBMS_CAN_ReadSettingsValues>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f4      	bne.n	800761e <CAN_Test_API+0x1e2>

	//2.1.16 ReadVersion
	while(TinyBMS_CAN_ReadVersion(&hcan1) != CMD_SUCCESS) {}
 8007634:	bf00      	nop
 8007636:	4812      	ldr	r0, [pc, #72]	; (8007680 <CAN_Test_API+0x244>)
 8007638:	f7ff f80a 	bl	8006650 <TinyBMS_CAN_ReadVersion>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f9      	bne.n	8007636 <CAN_Test_API+0x1fa>

	//2.1.17 ReadCalcSpeedDistanceLeftEstTimeLeft
	while(TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft(&hcan1) != CMD_SUCCESS) {}
 8007642:	bf00      	nop
 8007644:	480e      	ldr	r0, [pc, #56]	; (8007680 <CAN_Test_API+0x244>)
 8007646:	f7ff f93b 	bl	80068c0 <TinyBMS_CAN_ReadCalcSpeedDistanceLeftEstTimeLeft>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f9      	bne.n	8007644 <CAN_Test_API+0x208>

	//2.1.18 ReadNodeID
	while(TinyBMS_CAN_ReadNodeID(&hcan1) != CMD_SUCCESS) {}
 8007650:	bf00      	nop
 8007652:	480b      	ldr	r0, [pc, #44]	; (8007680 <CAN_Test_API+0x244>)
 8007654:	f7ff fa54 	bl	8006b00 <TinyBMS_CAN_ReadNodeID>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f9      	bne.n	8007652 <CAN_Test_API+0x216>

	//2.1.19 WriteNodeID
	uint8_t nodeID = 0x01;
 800765e:	2301      	movs	r3, #1
 8007660:	72fb      	strb	r3, [r7, #11]
	while(TinyBMS_CAN_WriteNodeID(&hcan1, nodeID) != CMD_SUCCESS) {}
 8007662:	bf00      	nop
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	4619      	mov	r1, r3
 8007668:	4805      	ldr	r0, [pc, #20]	; (8007680 <CAN_Test_API+0x244>)
 800766a:	f7ff fb0b 	bl	8006c84 <TinyBMS_CAN_WriteNodeID>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1f7      	bne.n	8007664 <CAN_Test_API+0x228>
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	3728      	adds	r7, #40	; 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000200 	.word	0x20000200
 8007684:	080135ac 	.word	0x080135ac
 8007688:	0801343c 	.word	0x0801343c
 800768c:	08013468 	.word	0x08013468
 8007690:	08013494 	.word	0x08013494
 8007694:	080134cc 	.word	0x080134cc
 8007698:	08013504 	.word	0x08013504
 800769c:	08013520 	.word	0x08013520
 80076a0:	080135b4 	.word	0x080135b4

080076a4 <TinyBMS_MonitorCharging_UART>:

void TinyBMS_MonitorCharging_UART(void) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08c      	sub	sp, #48	; 0x30
 80076a8:	af00      	add	r7, sp, #0
	//TinyBMS Init
	if(TinyBMS_Init_UART() != CMD_SUCCESS) {
 80076aa:	f000 fe59 	bl	8008360 <TinyBMS_Init_UART>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <TinyBMS_MonitorCharging_UART+0x1a>
		printf("TinyBMS Init failed.\r\n");
 80076b4:	4858      	ldr	r0, [pc, #352]	; (8007818 <TinyBMS_MonitorCharging_UART+0x174>)
 80076b6:	f006 fd39 	bl	800e12c <puts>
		Error_Handler();
 80076ba:	f001 ff61 	bl	8009580 <Error_Handler>
	}

	uint8_t doneCharging = FALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t addr_single[1] = {0};
 80076c4:	2300      	movs	r3, #0
 80076c6:	823b      	strh	r3, [r7, #16]

	//Start the Timer (Interrupt Mode / Non-Blocking)
	//Timer is used to send a message to the charger every 1 second
	HAL_TIM_Base_Start_IT(&htim6);
 80076c8:	4854      	ldr	r0, [pc, #336]	; (800781c <TinyBMS_MonitorCharging_UART+0x178>)
 80076ca:	f004 f96b 	bl	800b9a4 <HAL_TIM_Base_Start_IT>

	uint16_t cellv[7] = {0,0,0,0,0,0,0};
 80076ce:	463b      	mov	r3, r7
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	605a      	str	r2, [r3, #4]
 80076d6:	609a      	str	r2, [r3, #8]
 80076d8:	819a      	strh	r2, [r3, #12]
	uint16_t minCellVoltage = TinyBMS_UART_ReadBatteryPackMinCellVoltage(&huart2);	//mV
 80076da:	4851      	ldr	r0, [pc, #324]	; (8007820 <TinyBMS_MonitorCharging_UART+0x17c>)
 80076dc:	f7fb fe9c 	bl	8003418 <TinyBMS_UART_ReadBatteryPackMinCellVoltage>
 80076e0:	4603      	mov	r3, r0
 80076e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t maxCellVoltage = TinyBMS_UART_ReadBatteryPackMaxCellVoltage(&huart2);	//mV
 80076e4:	484e      	ldr	r0, [pc, #312]	; (8007820 <TinyBMS_MonitorCharging_UART+0x17c>)
 80076e6:	f7fb fdb7 	bl	8003258 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage>
 80076ea:	4603      	mov	r3, r0
 80076ec:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t numDetectedCells = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t balance_decision_bits = 0, real_balance_bits = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076f6:	2300      	movs	r3, #0
 80076f8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t estSOC = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	623b      	str	r3, [r7, #32]
	float packCurrent = 0, packVoltage = 0;
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	61bb      	str	r3, [r7, #24]

	addr_single[0] = CHARGE_FINISHED_CURRENT;
 800770a:	f44f 7398 	mov.w	r3, #304	; 0x130
 800770e:	823b      	strh	r3, [r7, #16]
	while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 8007710:	bf00      	nop
 8007712:	f107 0310 	add.w	r3, r7, #16
 8007716:	461a      	mov	r2, r3
 8007718:	2101      	movs	r1, #1
 800771a:	4841      	ldr	r0, [pc, #260]	; (8007820 <TinyBMS_MonitorCharging_UART+0x17c>)
 800771c:	f7f9 fe26 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1f5      	bne.n	8007712 <TinyBMS_MonitorCharging_UART+0x6e>
	uint16_t stopChargingCurrent = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007726:	4b3f      	ldr	r3, [pc, #252]	; (8007824 <TinyBMS_MonitorCharging_UART+0x180>)
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	021b      	lsls	r3, r3, #8
 800772c:	b21a      	sxth	r2, r3
 800772e:	4b3d      	ldr	r3, [pc, #244]	; (8007824 <TinyBMS_MonitorCharging_UART+0x180>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	b21b      	sxth	r3, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	b21b      	sxth	r3, r3
 8007738:	82fb      	strh	r3, [r7, #22]
	stopChargingCurrent = (stopChargingCurrent * 1000); 						//mA * 1000 = A
 800773a:	8afb      	ldrh	r3, [r7, #22]
 800773c:	461a      	mov	r2, r3
 800773e:	0152      	lsls	r2, r2, #5
 8007740:	1ad2      	subs	r2, r2, r3
 8007742:	0092      	lsls	r2, r2, #2
 8007744:	4413      	add	r3, r2
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	82fb      	strh	r3, [r7, #22]

	addr_single[0] = CHARGE_OVERCURRENT_CUTOFF;
 800774a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800774e:	823b      	strh	r3, [r7, #16]
	while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 8007750:	bf00      	nop
 8007752:	f107 0310 	add.w	r3, r7, #16
 8007756:	461a      	mov	r2, r3
 8007758:	2101      	movs	r1, #1
 800775a:	4831      	ldr	r0, [pc, #196]	; (8007820 <TinyBMS_MonitorCharging_UART+0x17c>)
 800775c:	f7f9 fe06 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f5      	bne.n	8007752 <TinyBMS_MonitorCharging_UART+0xae>
	uint16_t chargeOvercurrent = ((rx_buffer[1] << 8) | rx_buffer[0]);			//A
 8007766:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <TinyBMS_MonitorCharging_UART+0x180>)
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	b21a      	sxth	r2, r3
 800776e:	4b2d      	ldr	r3, [pc, #180]	; (8007824 <TinyBMS_MonitorCharging_UART+0x180>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	b21b      	sxth	r3, r3
 8007774:	4313      	orrs	r3, r2
 8007776:	b21b      	sxth	r3, r3
 8007778:	82bb      	strh	r3, [r7, #20]

	addr_single[0] = FULLYCHARGED_VOLTAGE;
 800777a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800777e:	823b      	strh	r3, [r7, #16]
	while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 8007780:	bf00      	nop
 8007782:	f107 0310 	add.w	r3, r7, #16
 8007786:	461a      	mov	r2, r3
 8007788:	2101      	movs	r1, #1
 800778a:	4825      	ldr	r0, [pc, #148]	; (8007820 <TinyBMS_MonitorCharging_UART+0x17c>)
 800778c:	f7f9 fdee 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1f5      	bne.n	8007782 <TinyBMS_MonitorCharging_UART+0xde>
	uint16_t fullyChargedVoltage = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007796:	4b23      	ldr	r3, [pc, #140]	; (8007824 <TinyBMS_MonitorCharging_UART+0x180>)
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	021b      	lsls	r3, r3, #8
 800779c:	b21a      	sxth	r2, r3
 800779e:	4b21      	ldr	r3, [pc, #132]	; (8007824 <TinyBMS_MonitorCharging_UART+0x180>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b21b      	sxth	r3, r3
 80077a4:	4313      	orrs	r3, r2
 80077a6:	b21b      	sxth	r3, r3
 80077a8:	827b      	strh	r3, [r7, #18]
	fullyChargedVoltage = (fullyChargedVoltage * 1000 * NUMCELLS_SECONDARY);	//mV * 1000 * 7 cells series = F.C. pack voltage (V)
 80077aa:	8a7b      	ldrh	r3, [r7, #18]
 80077ac:	461a      	mov	r2, r3
 80077ae:	0152      	lsls	r2, r2, #5
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	0092      	lsls	r2, r2, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	461a      	mov	r2, r3
 80077b8:	00d2      	lsls	r2, r2, #3
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	827b      	strh	r3, [r7, #18]

	while(!doneCharging) {
 80077c0:	e121      	b.n	8007a06 <TinyBMS_MonitorCharging_UART+0x362>
		while(TinyBMS_UART_ReadOnlineStatus(&huart2) == TINYBMS_STATUS_CHARGING) {
			//Verify that all cells are being detected
			addr_single[0] = NUMBER_OF_DETECTED_CELLS;
 80077c2:	2335      	movs	r3, #53	; 0x35
 80077c4:	823b      	strh	r3, [r7, #16]
			while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 80077c6:	bf00      	nop
 80077c8:	f107 0310 	add.w	r3, r7, #16
 80077cc:	461a      	mov	r2, r3
 80077ce:	2101      	movs	r1, #1
 80077d0:	4813      	ldr	r0, [pc, #76]	; (8007820 <TinyBMS_MonitorCharging_UART+0x17c>)
 80077d2:	f7f9 fdcb 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f5      	bne.n	80077c8 <TinyBMS_MonitorCharging_UART+0x124>
			numDetectedCells = ((rx_buffer[1] << 8) | rx_buffer[0]);
 80077dc:	4b11      	ldr	r3, [pc, #68]	; (8007824 <TinyBMS_MonitorCharging_UART+0x180>)
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	b21a      	sxth	r2, r3
 80077e4:	4b0f      	ldr	r3, [pc, #60]	; (8007824 <TinyBMS_MonitorCharging_UART+0x180>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	b21b      	sxth	r3, r3
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b21b      	sxth	r3, r3
 80077ee:	853b      	strh	r3, [r7, #40]	; 0x28
			if(numDetectedCells != NUMCELLS_SECONDARY) {
 80077f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077f2:	2b07      	cmp	r3, #7
 80077f4:	d005      	beq.n	8007802 <TinyBMS_MonitorCharging_UART+0x15e>
				printf("Some cells are not being detected!\r\n");
 80077f6:	480c      	ldr	r0, [pc, #48]	; (8007828 <TinyBMS_MonitorCharging_UART+0x184>)
 80077f8:	f006 fc98 	bl	800e12c <puts>
				doneCharging = TRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			//Get voltage of all cells and compare with max/min voltage thresholds
			while(TinyBMS_UART_ReadBatteryPackCellVoltages(&huart2) != CMD_SUCCESS);
 8007802:	bf00      	nop
 8007804:	4806      	ldr	r0, [pc, #24]	; (8007820 <TinyBMS_MonitorCharging_UART+0x17c>)
 8007806:	f7fc fb2d 	bl	8003e64 <TinyBMS_UART_ReadBatteryPackCellVoltages>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f9      	bne.n	8007804 <TinyBMS_MonitorCharging_UART+0x160>
			for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8007810:	2300      	movs	r3, #0
 8007812:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007816:	e066      	b.n	80078e6 <TinyBMS_MonitorCharging_UART+0x242>
 8007818:	080135f8 	.word	0x080135f8
 800781c:	20000330 	.word	0x20000330
 8007820:	20000228 	.word	0x20000228
 8007824:	2000037c 	.word	0x2000037c
 8007828:	08013610 	.word	0x08013610
				addr_single[0] = CELL1_VOLTAGE+i;
 800782c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007830:	b29b      	uxth	r3, r3
 8007832:	823b      	strh	r3, [r7, #16]
				while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 8007834:	bf00      	nop
 8007836:	f107 0310 	add.w	r3, r7, #16
 800783a:	461a      	mov	r2, r3
 800783c:	2101      	movs	r1, #1
 800783e:	4877      	ldr	r0, [pc, #476]	; (8007a1c <TinyBMS_MonitorCharging_UART+0x378>)
 8007840:	f7f9 fd94 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f5      	bne.n	8007836 <TinyBMS_MonitorCharging_UART+0x192>
				cellv[i] = ((rx_buffer[1] << 8) | rx_buffer[0]);
 800784a:	4b75      	ldr	r3, [pc, #468]	; (8007a20 <TinyBMS_MonitorCharging_UART+0x37c>)
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	b21a      	sxth	r2, r3
 8007852:	4b73      	ldr	r3, [pc, #460]	; (8007a20 <TinyBMS_MonitorCharging_UART+0x37c>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b21b      	sxth	r3, r3
 8007858:	4313      	orrs	r3, r2
 800785a:	b21a      	sxth	r2, r3
 800785c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007860:	b292      	uxth	r2, r2
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	3330      	adds	r3, #48	; 0x30
 8007866:	443b      	add	r3, r7
 8007868:	f823 2c30 	strh.w	r2, [r3, #-48]
				cellv[i] = (cellv[i] * 10); 	//0.1mV -> mV
 800786c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	3330      	adds	r3, #48	; 0x30
 8007874:	443b      	add	r3, r7
 8007876:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800787a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800787e:	4611      	mov	r1, r2
 8007880:	0089      	lsls	r1, r1, #2
 8007882:	440a      	add	r2, r1
 8007884:	0052      	lsls	r2, r2, #1
 8007886:	b292      	uxth	r2, r2
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	3330      	adds	r3, #48	; 0x30
 800788c:	443b      	add	r3, r7
 800788e:	f823 2c30 	strh.w	r2, [r3, #-48]
				if(cellv[i] < minCellVoltage) {	//mV < mV ?
 8007892:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	3330      	adds	r3, #48	; 0x30
 800789a:	443b      	add	r3, r7
 800789c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80078a0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d906      	bls.n	80078b4 <TinyBMS_MonitorCharging_UART+0x210>
					printf("Cell %u is below the minimum voltage threshold!\r\n", i+1);
 80078a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078aa:	3301      	adds	r3, #1
 80078ac:	4619      	mov	r1, r3
 80078ae:	485d      	ldr	r0, [pc, #372]	; (8007a24 <TinyBMS_MonitorCharging_UART+0x380>)
 80078b0:	f006 fbb6 	bl	800e020 <iprintf>
				}
				if(cellv[i] > maxCellVoltage) { //mV > mV ?
 80078b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	3330      	adds	r3, #48	; 0x30
 80078bc:	443b      	add	r3, r7
 80078be:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80078c2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d209      	bcs.n	80078dc <TinyBMS_MonitorCharging_UART+0x238>
					printf("Cell %u is above the maximum voltage threshold!\r\n", i+1);
 80078c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078cc:	3301      	adds	r3, #1
 80078ce:	4619      	mov	r1, r3
 80078d0:	4855      	ldr	r0, [pc, #340]	; (8007a28 <TinyBMS_MonitorCharging_UART+0x384>)
 80078d2:	f006 fba5 	bl	800e020 <iprintf>
					doneCharging = TRUE;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 80078dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078e0:	3301      	adds	r3, #1
 80078e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80078e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d99e      	bls.n	800782c <TinyBMS_MonitorCharging_UART+0x188>
				}
			}

			//Check if cells need balancing or are in progress of balancing
			//Regs 51 & 52: BALANCING_DECISION_BITS & REAL_BALANCING_BITS
			while(TinyBMS_UART_ReadRegBlock(&huart2, 2, BALANCING_DECISION_BITS) != CMD_SUCCESS);
 80078ee:	bf00      	nop
 80078f0:	2233      	movs	r2, #51	; 0x33
 80078f2:	2102      	movs	r1, #2
 80078f4:	4849      	ldr	r0, [pc, #292]	; (8007a1c <TinyBMS_MonitorCharging_UART+0x378>)
 80078f6:	f7f9 fbb3 	bl	8001060 <TinyBMS_UART_ReadRegBlock>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1f7      	bne.n	80078f0 <TinyBMS_MonitorCharging_UART+0x24c>
			balance_decision_bits = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007900:	4b47      	ldr	r3, [pc, #284]	; (8007a20 <TinyBMS_MonitorCharging_UART+0x37c>)
 8007902:	785b      	ldrb	r3, [r3, #1]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	b21a      	sxth	r2, r3
 8007908:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <TinyBMS_MonitorCharging_UART+0x37c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b21b      	sxth	r3, r3
 800790e:	4313      	orrs	r3, r2
 8007910:	b21b      	sxth	r3, r3
 8007912:	84fb      	strh	r3, [r7, #38]	; 0x26
			real_balance_bits = ((rx_buffer[3] << 8) | rx_buffer[2]);
 8007914:	4b42      	ldr	r3, [pc, #264]	; (8007a20 <TinyBMS_MonitorCharging_UART+0x37c>)
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	b21a      	sxth	r2, r3
 800791c:	4b40      	ldr	r3, [pc, #256]	; (8007a20 <TinyBMS_MonitorCharging_UART+0x37c>)
 800791e:	789b      	ldrb	r3, [r3, #2]
 8007920:	b21b      	sxth	r3, r3
 8007922:	4313      	orrs	r3, r2
 8007924:	b21b      	sxth	r3, r3
 8007926:	84bb      	strh	r3, [r7, #36]	; 0x24
			printf("Balancing Decision Bits: 0x%04X\r\n", balance_decision_bits);
 8007928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800792a:	4619      	mov	r1, r3
 800792c:	483f      	ldr	r0, [pc, #252]	; (8007a2c <TinyBMS_MonitorCharging_UART+0x388>)
 800792e:	f006 fb77 	bl	800e020 <iprintf>
			printf("Real Balancing Bits: 0x%04X\r\n", real_balance_bits);
 8007932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007934:	4619      	mov	r1, r3
 8007936:	483e      	ldr	r0, [pc, #248]	; (8007a30 <TinyBMS_MonitorCharging_UART+0x38c>)
 8007938:	f006 fb72 	bl	800e020 <iprintf>

			//Check Newest Events
			while(TinyBMS_UART_ReadNewestEvents(&huart2) != CMD_SUCCESS);
 800793c:	bf00      	nop
 800793e:	4837      	ldr	r0, [pc, #220]	; (8007a1c <TinyBMS_MonitorCharging_UART+0x378>)
 8007940:	f7fa ff9e 	bl	8002880 <TinyBMS_UART_ReadNewestEvents>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1f9      	bne.n	800793e <TinyBMS_MonitorCharging_UART+0x29a>

			//Check Temperatures against LOWTEMP_CHARGER_CUTOFF and OVERTEMP_CUTOFF
			while(TinyBMS_UART_ReadDeviceTemperatures(&huart2) != CMD_SUCCESS);
 800794a:	bf00      	nop
 800794c:	4833      	ldr	r0, [pc, #204]	; (8007a1c <TinyBMS_MonitorCharging_UART+0x378>)
 800794e:	f7fc f939 	bl	8003bc4 <TinyBMS_UART_ReadDeviceTemperatures>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f9      	bne.n	800794c <TinyBMS_MonitorCharging_UART+0x2a8>

			//Get State of Charge
			estSOC = TinyBMS_UART_ReadEstimatedSOCValue(&huart2);
 8007958:	4830      	ldr	r0, [pc, #192]	; (8007a1c <TinyBMS_MonitorCharging_UART+0x378>)
 800795a:	f7fc f84d 	bl	80039f8 <TinyBMS_UART_ReadEstimatedSOCValue>
 800795e:	6238      	str	r0, [r7, #32]
			printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 8007960:	6a39      	ldr	r1, [r7, #32]
 8007962:	4834      	ldr	r0, [pc, #208]	; (8007a34 <TinyBMS_MonitorCharging_UART+0x390>)
 8007964:	f006 fb5c 	bl	800e020 <iprintf>

			//Compare Pack Voltage to FULLYCHARGED_VOLTAGE
			packVoltage = TinyBMS_UART_ReadBatteryPackVoltage(&huart2);
 8007968:	482c      	ldr	r0, [pc, #176]	; (8007a1c <TinyBMS_MonitorCharging_UART+0x378>)
 800796a:	f7fb fa89 	bl	8002e80 <TinyBMS_UART_ReadBatteryPackVoltage>
 800796e:	ed87 0a06 	vstr	s0, [r7, #24]
			printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 8007972:	69b8      	ldr	r0, [r7, #24]
 8007974:	f7f8 fe08 	bl	8000588 <__aeabi_f2d>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	482e      	ldr	r0, [pc, #184]	; (8007a38 <TinyBMS_MonitorCharging_UART+0x394>)
 800797e:	f006 fb4f 	bl	800e020 <iprintf>
			if(packVoltage >= fullyChargedVoltage) {	//V >= V ?
 8007982:	8a7b      	ldrh	r3, [r7, #18]
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800798c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007998:	db02      	blt.n	80079a0 <TinyBMS_MonitorCharging_UART+0x2fc>
				doneCharging = TRUE;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			//Compare Pack Current to CHARGE_FINISHED_CURRENT and CHARGE_OVERCURRENT_CUTOFF
			packCurrent = TinyBMS_UART_ReadBatteryPackCurrent(&huart2);
 80079a0:	481e      	ldr	r0, [pc, #120]	; (8007a1c <TinyBMS_MonitorCharging_UART+0x378>)
 80079a2:	f7fb fb63 	bl	800306c <TinyBMS_UART_ReadBatteryPackCurrent>
 80079a6:	ed87 0a07 	vstr	s0, [r7, #28]
			printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 80079aa:	69f8      	ldr	r0, [r7, #28]
 80079ac:	f7f8 fdec 	bl	8000588 <__aeabi_f2d>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4821      	ldr	r0, [pc, #132]	; (8007a3c <TinyBMS_MonitorCharging_UART+0x398>)
 80079b6:	f006 fb33 	bl	800e020 <iprintf>
			if(packCurrent <= stopChargingCurrent) { 	//A <= A ?
 80079ba:	8afb      	ldrh	r3, [r7, #22]
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80079c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d0:	d802      	bhi.n	80079d8 <TinyBMS_MonitorCharging_UART+0x334>
				doneCharging = TRUE;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}
			if(packCurrent >= chargeOvercurrent) { 		//A >= A ?
 80079d8:	8abb      	ldrh	r3, [r7, #20]
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80079e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ee:	da00      	bge.n	80079f2 <TinyBMS_MonitorCharging_UART+0x34e>
 80079f0:	e002      	b.n	80079f8 <TinyBMS_MonitorCharging_UART+0x354>
				doneCharging = TRUE;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while(TinyBMS_UART_ReadOnlineStatus(&huart2) == TINYBMS_STATUS_CHARGING) {
 80079f8:	4808      	ldr	r0, [pc, #32]	; (8007a1c <TinyBMS_MonitorCharging_UART+0x378>)
 80079fa:	f7fb fded 	bl	80035d8 <TinyBMS_UART_ReadOnlineStatus>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b91      	cmp	r3, #145	; 0x91
 8007a02:	f43f aede 	beq.w	80077c2 <TinyBMS_MonitorCharging_UART+0x11e>
	while(!doneCharging) {
 8007a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0f4      	beq.n	80079f8 <TinyBMS_MonitorCharging_UART+0x354>
			}
		}
	}
	//Stop the Timer
	HAL_TIM_Base_Stop_IT(&htim6);
 8007a0e:	480c      	ldr	r0, [pc, #48]	; (8007a40 <TinyBMS_MonitorCharging_UART+0x39c>)
 8007a10:	f004 f840 	bl	800ba94 <HAL_TIM_Base_Stop_IT>
}
 8007a14:	bf00      	nop
 8007a16:	3730      	adds	r7, #48	; 0x30
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000228 	.word	0x20000228
 8007a20:	2000037c 	.word	0x2000037c
 8007a24:	08013634 	.word	0x08013634
 8007a28:	08013668 	.word	0x08013668
 8007a2c:	0801369c 	.word	0x0801369c
 8007a30:	080136c0 	.word	0x080136c0
 8007a34:	080135b4 	.word	0x080135b4
 8007a38:	0801343c 	.word	0x0801343c
 8007a3c:	08013468 	.word	0x08013468
 8007a40:	20000330 	.word	0x20000330

08007a44 <TinyBMS_MonitorDischarging_UART>:

void TinyBMS_MonitorDischarging_UART(void) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08c      	sub	sp, #48	; 0x30
 8007a48:	af00      	add	r7, sp, #0
	//TinyBMS Init
	if(TinyBMS_Init_UART() != CMD_SUCCESS) {
 8007a4a:	f000 fc89 	bl	8008360 <TinyBMS_Init_UART>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <TinyBMS_MonitorDischarging_UART+0x1a>
		printf("TinyBMS Init failed.\r\n");
 8007a54:	48a5      	ldr	r0, [pc, #660]	; (8007cec <TinyBMS_MonitorDischarging_UART+0x2a8>)
 8007a56:	f006 fb69 	bl	800e12c <puts>
		Error_Handler();
 8007a5a:	f001 fd91 	bl	8009580 <Error_Handler>
	}

	uint8_t doneDischarging = FALSE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t addr_single[1] = {0};
 8007a64:	2300      	movs	r3, #0
 8007a66:	82bb      	strh	r3, [r7, #20]

	uint16_t cellv[7] = {0,0,0,0,0,0,0};
 8007a68:	1d3b      	adds	r3, r7, #4
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	605a      	str	r2, [r3, #4]
 8007a70:	609a      	str	r2, [r3, #8]
 8007a72:	819a      	strh	r2, [r3, #12]
	uint16_t minCellVoltage = TinyBMS_UART_ReadBatteryPackMinCellVoltage(&huart2);	//mV
 8007a74:	489e      	ldr	r0, [pc, #632]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007a76:	f7fb fccf 	bl	8003418 <TinyBMS_UART_ReadBatteryPackMinCellVoltage>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t maxCellVoltage = TinyBMS_UART_ReadBatteryPackMaxCellVoltage(&huart2);	//mV
 8007a7e:	489c      	ldr	r0, [pc, #624]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007a80:	f7fb fbea 	bl	8003258 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage>
 8007a84:	4603      	mov	r3, r0
 8007a86:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t numDetectedCells = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	853b      	strh	r3, [r7, #40]	; 0x28
	uint32_t estSOC = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
	float packCurrent = 0, packVoltage = 0;
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	623b      	str	r3, [r7, #32]
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]

	addr_single[0] = DISCHARGE_OVERCURRENT_CUTOFF;
 8007a9c:	f240 133d 	movw	r3, #317	; 0x13d
 8007aa0:	82bb      	strh	r3, [r7, #20]
	while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 8007aa2:	bf00      	nop
 8007aa4:	f107 0314 	add.w	r3, r7, #20
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2101      	movs	r1, #1
 8007aac:	4890      	ldr	r0, [pc, #576]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007aae:	f7f9 fc5d 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1f5      	bne.n	8007aa4 <TinyBMS_MonitorDischarging_UART+0x60>
	uint16_t dischargeOvercurrent = ((rx_buffer[1] << 8) | rx_buffer[0]);			//A
 8007ab8:	4b8e      	ldr	r3, [pc, #568]	; (8007cf4 <TinyBMS_MonitorDischarging_UART+0x2b0>)
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	b21a      	sxth	r2, r3
 8007ac0:	4b8c      	ldr	r3, [pc, #560]	; (8007cf4 <TinyBMS_MonitorDischarging_UART+0x2b0>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b21b      	sxth	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b21b      	sxth	r3, r3
 8007aca:	837b      	strh	r3, [r7, #26]

	addr_single[0] = FULLYDISCHARGED_VOLTAGE;
 8007acc:	f240 132d 	movw	r3, #301	; 0x12d
 8007ad0:	82bb      	strh	r3, [r7, #20]
	while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 8007ad2:	bf00      	nop
 8007ad4:	f107 0314 	add.w	r3, r7, #20
 8007ad8:	461a      	mov	r2, r3
 8007ada:	2101      	movs	r1, #1
 8007adc:	4884      	ldr	r0, [pc, #528]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007ade:	f7f9 fc45 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f5      	bne.n	8007ad4 <TinyBMS_MonitorDischarging_UART+0x90>
	uint16_t fullyDischargedVoltage = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007ae8:	4b82      	ldr	r3, [pc, #520]	; (8007cf4 <TinyBMS_MonitorDischarging_UART+0x2b0>)
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	b21a      	sxth	r2, r3
 8007af0:	4b80      	ldr	r3, [pc, #512]	; (8007cf4 <TinyBMS_MonitorDischarging_UART+0x2b0>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b21b      	sxth	r3, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	b21b      	sxth	r3, r3
 8007afa:	833b      	strh	r3, [r7, #24]
	fullyDischargedVoltage = (fullyDischargedVoltage * 1000 * NUMCELLS_SECONDARY);	//mV * 1000 * 7 cells series = empty pack voltage (V)
 8007afc:	8b3b      	ldrh	r3, [r7, #24]
 8007afe:	461a      	mov	r2, r3
 8007b00:	0152      	lsls	r2, r2, #5
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	0092      	lsls	r2, r2, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	00d2      	lsls	r2, r2, #3
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	833b      	strh	r3, [r7, #24]

	while(!doneDischarging) {
 8007b12:	e0e1      	b.n	8007cd8 <TinyBMS_MonitorDischarging_UART+0x294>
		while(TinyBMS_UART_ReadOnlineStatus(&huart2) == TINYBMS_STATUS_DISCHARGING) {
			//Verify that all cells are being detected
			addr_single[0] = NUMBER_OF_DETECTED_CELLS;
 8007b14:	2335      	movs	r3, #53	; 0x35
 8007b16:	82bb      	strh	r3, [r7, #20]
			while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 8007b18:	bf00      	nop
 8007b1a:	f107 0314 	add.w	r3, r7, #20
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2101      	movs	r1, #1
 8007b22:	4873      	ldr	r0, [pc, #460]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007b24:	f7f9 fc22 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f5      	bne.n	8007b1a <TinyBMS_MonitorDischarging_UART+0xd6>
			numDetectedCells = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007b2e:	4b71      	ldr	r3, [pc, #452]	; (8007cf4 <TinyBMS_MonitorDischarging_UART+0x2b0>)
 8007b30:	785b      	ldrb	r3, [r3, #1]
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	b21a      	sxth	r2, r3
 8007b36:	4b6f      	ldr	r3, [pc, #444]	; (8007cf4 <TinyBMS_MonitorDischarging_UART+0x2b0>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b21b      	sxth	r3, r3
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	b21b      	sxth	r3, r3
 8007b40:	853b      	strh	r3, [r7, #40]	; 0x28
			if(numDetectedCells != NUMCELLS_SECONDARY) {
 8007b42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b44:	2b07      	cmp	r3, #7
 8007b46:	d005      	beq.n	8007b54 <TinyBMS_MonitorDischarging_UART+0x110>
				printf("Some cells are not being detected!\r\n");
 8007b48:	486b      	ldr	r0, [pc, #428]	; (8007cf8 <TinyBMS_MonitorDischarging_UART+0x2b4>)
 8007b4a:	f006 faef 	bl	800e12c <puts>
				doneDischarging = TRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			//Get voltage of all cells and compare with max/min voltage thresholds
			while(TinyBMS_UART_ReadBatteryPackCellVoltages(&huart2) != CMD_SUCCESS);
 8007b54:	bf00      	nop
 8007b56:	4866      	ldr	r0, [pc, #408]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007b58:	f7fc f984 	bl	8003e64 <TinyBMS_UART_ReadBatteryPackCellVoltages>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1f9      	bne.n	8007b56 <TinyBMS_MonitorDischarging_UART+0x112>
			for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007b68:	e05c      	b.n	8007c24 <TinyBMS_MonitorDischarging_UART+0x1e0>
				addr_single[0] = CELL1_VOLTAGE+i;
 8007b6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	82bb      	strh	r3, [r7, #20]
				while(TinyBMS_UART_ReadRegIndividual(&huart2, 1, addr_single) != CMD_SUCCESS);
 8007b72:	bf00      	nop
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	485c      	ldr	r0, [pc, #368]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007b7e:	f7f9 fbf5 	bl	800136c <TinyBMS_UART_ReadRegIndividual>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1f5      	bne.n	8007b74 <TinyBMS_MonitorDischarging_UART+0x130>
				cellv[i] = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007b88:	4b5a      	ldr	r3, [pc, #360]	; (8007cf4 <TinyBMS_MonitorDischarging_UART+0x2b0>)
 8007b8a:	785b      	ldrb	r3, [r3, #1]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	b21a      	sxth	r2, r3
 8007b90:	4b58      	ldr	r3, [pc, #352]	; (8007cf4 <TinyBMS_MonitorDischarging_UART+0x2b0>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	b21b      	sxth	r3, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	b21a      	sxth	r2, r3
 8007b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b9e:	b292      	uxth	r2, r2
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	3330      	adds	r3, #48	; 0x30
 8007ba4:	443b      	add	r3, r7
 8007ba6:	f823 2c2c 	strh.w	r2, [r3, #-44]
				cellv[i] = (cellv[i] * 10); 	//0.1mV -> mV
 8007baa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	3330      	adds	r3, #48	; 0x30
 8007bb2:	443b      	add	r3, r7
 8007bb4:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 8007bb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	0089      	lsls	r1, r1, #2
 8007bc0:	440a      	add	r2, r1
 8007bc2:	0052      	lsls	r2, r2, #1
 8007bc4:	b292      	uxth	r2, r2
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	3330      	adds	r3, #48	; 0x30
 8007bca:	443b      	add	r3, r7
 8007bcc:	f823 2c2c 	strh.w	r2, [r3, #-44]
				if(cellv[i] < minCellVoltage) {	//mV < mV ?
 8007bd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	3330      	adds	r3, #48	; 0x30
 8007bd8:	443b      	add	r3, r7
 8007bda:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8007bde:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d909      	bls.n	8007bf8 <TinyBMS_MonitorDischarging_UART+0x1b4>
					printf("Cell %u is below the minimum voltage threshold!\r\n", i+1);
 8007be4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007be8:	3301      	adds	r3, #1
 8007bea:	4619      	mov	r1, r3
 8007bec:	4843      	ldr	r0, [pc, #268]	; (8007cfc <TinyBMS_MonitorDischarging_UART+0x2b8>)
 8007bee:	f006 fa17 	bl	800e020 <iprintf>
					doneDischarging = TRUE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				}
				if(cellv[i] > maxCellVoltage) {	//mV > mV ?
 8007bf8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	3330      	adds	r3, #48	; 0x30
 8007c00:	443b      	add	r3, r7
 8007c02:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8007c06:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d206      	bcs.n	8007c1a <TinyBMS_MonitorDischarging_UART+0x1d6>
					printf("Cell %u is above the maximum voltage threshold!\r\n", i+1);
 8007c0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c10:	3301      	adds	r3, #1
 8007c12:	4619      	mov	r1, r3
 8007c14:	483a      	ldr	r0, [pc, #232]	; (8007d00 <TinyBMS_MonitorDischarging_UART+0x2bc>)
 8007c16:	f006 fa03 	bl	800e020 <iprintf>
			for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8007c1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c1e:	3301      	adds	r3, #1
 8007c20:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007c24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c28:	2b06      	cmp	r3, #6
 8007c2a:	d99e      	bls.n	8007b6a <TinyBMS_MonitorDischarging_UART+0x126>
			}

			//No cell balancing check during discharge

			//Check Newest Events
			while(TinyBMS_UART_ReadNewestEvents(&huart2) != CMD_SUCCESS);
 8007c2c:	bf00      	nop
 8007c2e:	4830      	ldr	r0, [pc, #192]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007c30:	f7fa fe26 	bl	8002880 <TinyBMS_UART_ReadNewestEvents>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f9      	bne.n	8007c2e <TinyBMS_MonitorDischarging_UART+0x1ea>

			//Check Temperatures against OVERTEMP_CUTOFF
			while(TinyBMS_UART_ReadDeviceTemperatures(&huart2) != CMD_SUCCESS);
 8007c3a:	bf00      	nop
 8007c3c:	482c      	ldr	r0, [pc, #176]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007c3e:	f7fb ffc1 	bl	8003bc4 <TinyBMS_UART_ReadDeviceTemperatures>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1f9      	bne.n	8007c3c <TinyBMS_MonitorDischarging_UART+0x1f8>

			//Get State of Charge
			estSOC = TinyBMS_UART_ReadEstimatedSOCValue(&huart2);
 8007c48:	4829      	ldr	r0, [pc, #164]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007c4a:	f7fb fed5 	bl	80039f8 <TinyBMS_UART_ReadEstimatedSOCValue>
 8007c4e:	6278      	str	r0, [r7, #36]	; 0x24
			printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 8007c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c52:	482c      	ldr	r0, [pc, #176]	; (8007d04 <TinyBMS_MonitorDischarging_UART+0x2c0>)
 8007c54:	f006 f9e4 	bl	800e020 <iprintf>

			//Compare Pack Voltage to FULLYDISCHARGED_VOLTAGE
			packVoltage = TinyBMS_UART_ReadBatteryPackVoltage(&huart2);
 8007c58:	4825      	ldr	r0, [pc, #148]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007c5a:	f7fb f911 	bl	8002e80 <TinyBMS_UART_ReadBatteryPackVoltage>
 8007c5e:	ed87 0a07 	vstr	s0, [r7, #28]
			printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 8007c62:	69f8      	ldr	r0, [r7, #28]
 8007c64:	f7f8 fc90 	bl	8000588 <__aeabi_f2d>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4826      	ldr	r0, [pc, #152]	; (8007d08 <TinyBMS_MonitorDischarging_UART+0x2c4>)
 8007c6e:	f006 f9d7 	bl	800e020 <iprintf>
			if(packVoltage <= fullyDischargedVoltage) {	//V <= V ?
 8007c72:	8b3b      	ldrh	r3, [r7, #24]
 8007c74:	ee07 3a90 	vmov	s15, r3
 8007c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8007c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c88:	d802      	bhi.n	8007c90 <TinyBMS_MonitorDischarging_UART+0x24c>
				doneDischarging = TRUE;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			//Compare Pack Current to DISCHARGE_OVERCURRENT_CUTOFF
			packCurrent = TinyBMS_UART_ReadBatteryPackCurrent(&huart2);
 8007c90:	4817      	ldr	r0, [pc, #92]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007c92:	f7fb f9eb 	bl	800306c <TinyBMS_UART_ReadBatteryPackCurrent>
 8007c96:	ed87 0a08 	vstr	s0, [r7, #32]
			printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 8007c9a:	6a38      	ldr	r0, [r7, #32]
 8007c9c:	f7f8 fc74 	bl	8000588 <__aeabi_f2d>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4819      	ldr	r0, [pc, #100]	; (8007d0c <TinyBMS_MonitorDischarging_UART+0x2c8>)
 8007ca6:	f006 f9bb 	bl	800e020 <iprintf>
			if(packCurrent >= dischargeOvercurrent) {	//A >= A ?
 8007caa:	8b7b      	ldrh	r3, [r7, #26]
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cb4:	ed97 7a08 	vldr	s14, [r7, #32]
 8007cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc0:	da00      	bge.n	8007cc4 <TinyBMS_MonitorDischarging_UART+0x280>
 8007cc2:	e002      	b.n	8007cca <TinyBMS_MonitorDischarging_UART+0x286>
				doneDischarging = TRUE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while(TinyBMS_UART_ReadOnlineStatus(&huart2) == TINYBMS_STATUS_DISCHARGING) {
 8007cca:	4809      	ldr	r0, [pc, #36]	; (8007cf0 <TinyBMS_MonitorDischarging_UART+0x2ac>)
 8007ccc:	f7fb fc84 	bl	80035d8 <TinyBMS_UART_ReadOnlineStatus>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b93      	cmp	r3, #147	; 0x93
 8007cd4:	f43f af1e 	beq.w	8007b14 <TinyBMS_MonitorDischarging_UART+0xd0>
	while(!doneDischarging) {
 8007cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0f4      	beq.n	8007cca <TinyBMS_MonitorDischarging_UART+0x286>
			}
		}
	}
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	3730      	adds	r7, #48	; 0x30
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	080135f8 	.word	0x080135f8
 8007cf0:	20000228 	.word	0x20000228
 8007cf4:	2000037c 	.word	0x2000037c
 8007cf8:	08013610 	.word	0x08013610
 8007cfc:	08013634 	.word	0x08013634
 8007d00:	08013668 	.word	0x08013668
 8007d04:	080135b4 	.word	0x080135b4
 8007d08:	0801343c 	.word	0x0801343c
 8007d0c:	08013468 	.word	0x08013468

08007d10 <TinyBMS_MonitorCharging_CAN>:

void TinyBMS_MonitorCharging_CAN(void) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08c      	sub	sp, #48	; 0x30
 8007d14:	af00      	add	r7, sp, #0
	//TinyBMS Init
	if(TinyBMS_Init_CAN() != CMD_SUCCESS) {
 8007d16:	f000 fd8b 	bl	8008830 <TinyBMS_Init_CAN>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <TinyBMS_MonitorCharging_CAN+0x1a>
		printf("TinyBMS Init failed.\r\n");
 8007d20:	484f      	ldr	r0, [pc, #316]	; (8007e60 <TinyBMS_MonitorCharging_CAN+0x150>)
 8007d22:	f006 fa03 	bl	800e12c <puts>
		Error_Handler();
 8007d26:	f001 fc2b 	bl	8009580 <Error_Handler>
	}

	//Start the Timer (Interrupt Mode / Non-Blocking)
	//Timer is used to send a message to the charger every 1 second
	HAL_TIM_Base_Start_IT(&htim6);
 8007d2a:	484e      	ldr	r0, [pc, #312]	; (8007e64 <TinyBMS_MonitorCharging_CAN+0x154>)
 8007d2c:	f003 fe3a 	bl	800b9a4 <HAL_TIM_Base_Start_IT>

	uint8_t doneCharging = FALSE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	uint16_t cellv[7] = {0,0,0,0,0,0,0};
 8007d36:	1d3b      	adds	r3, r7, #4
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	605a      	str	r2, [r3, #4]
 8007d3e:	609a      	str	r2, [r3, #8]
 8007d40:	819a      	strh	r2, [r3, #12]
	uint16_t minCellVoltage = TinyBMS_CAN_ReadBatteryPackMinCellVoltage(&hcan1);	//mV
 8007d42:	4849      	ldr	r0, [pc, #292]	; (8007e68 <TinyBMS_MonitorCharging_CAN+0x158>)
 8007d44:	f7fd fed8 	bl	8005af8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t maxCellVoltage = TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(&hcan1);	//mV
 8007d4c:	4846      	ldr	r0, [pc, #280]	; (8007e68 <TinyBMS_MonitorCharging_CAN+0x158>)
 8007d4e:	f7fd fe35 	bl	80059bc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>
 8007d52:	4603      	mov	r3, r0
 8007d54:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t numDetectedCells = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t balance_decision_bits = 0, real_balance_bits = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d5e:	2300      	movs	r3, #0
 8007d60:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t estSOC = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	623b      	str	r3, [r7, #32]
	float packCurrent = 0, packVoltage = 0;
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	61fb      	str	r3, [r7, #28]
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	61bb      	str	r3, [r7, #24]

	while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, CHARGE_FINISHED_CURRENT) != CMD_SUCCESS);
 8007d72:	bf00      	nop
 8007d74:	f44f 7298 	mov.w	r2, #304	; 0x130
 8007d78:	2101      	movs	r1, #1
 8007d7a:	483b      	ldr	r0, [pc, #236]	; (8007e68 <TinyBMS_MonitorCharging_CAN+0x158>)
 8007d7c:	f7fd f8b6 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f6      	bne.n	8007d74 <TinyBMS_MonitorCharging_CAN+0x64>
	uint16_t stopChargingCurrent = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007d86:	4b39      	ldr	r3, [pc, #228]	; (8007e6c <TinyBMS_MonitorCharging_CAN+0x15c>)
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	b21a      	sxth	r2, r3
 8007d8e:	4b37      	ldr	r3, [pc, #220]	; (8007e6c <TinyBMS_MonitorCharging_CAN+0x15c>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	b21b      	sxth	r3, r3
 8007d94:	4313      	orrs	r3, r2
 8007d96:	b21b      	sxth	r3, r3
 8007d98:	82fb      	strh	r3, [r7, #22]
	stopChargingCurrent = (stopChargingCurrent * 1000); 							//mA * 1000 = A
 8007d9a:	8afb      	ldrh	r3, [r7, #22]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	0152      	lsls	r2, r2, #5
 8007da0:	1ad2      	subs	r2, r2, r3
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	82fb      	strh	r3, [r7, #22]

	while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, CHARGE_OVERCURRENT_CUTOFF) != CMD_SUCCESS);
 8007daa:	bf00      	nop
 8007dac:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8007db0:	2101      	movs	r1, #1
 8007db2:	482d      	ldr	r0, [pc, #180]	; (8007e68 <TinyBMS_MonitorCharging_CAN+0x158>)
 8007db4:	f7fd f89a 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f6      	bne.n	8007dac <TinyBMS_MonitorCharging_CAN+0x9c>
	uint16_t chargeOvercurrent = ((rx_buffer[1] << 8) | rx_buffer[0]);				//A
 8007dbe:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <TinyBMS_MonitorCharging_CAN+0x15c>)
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	b21a      	sxth	r2, r3
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <TinyBMS_MonitorCharging_CAN+0x15c>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b21b      	sxth	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b21b      	sxth	r3, r3
 8007dd0:	82bb      	strh	r3, [r7, #20]

	while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, FULLYCHARGED_VOLTAGE) != CMD_SUCCESS);
 8007dd2:	bf00      	nop
 8007dd4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007dd8:	2101      	movs	r1, #1
 8007dda:	4823      	ldr	r0, [pc, #140]	; (8007e68 <TinyBMS_MonitorCharging_CAN+0x158>)
 8007ddc:	f7fd f886 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f6      	bne.n	8007dd4 <TinyBMS_MonitorCharging_CAN+0xc4>
	uint16_t fullyChargedVoltage = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007de6:	4b21      	ldr	r3, [pc, #132]	; (8007e6c <TinyBMS_MonitorCharging_CAN+0x15c>)
 8007de8:	785b      	ldrb	r3, [r3, #1]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	b21a      	sxth	r2, r3
 8007dee:	4b1f      	ldr	r3, [pc, #124]	; (8007e6c <TinyBMS_MonitorCharging_CAN+0x15c>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b21b      	sxth	r3, r3
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b21b      	sxth	r3, r3
 8007df8:	827b      	strh	r3, [r7, #18]
	fullyChargedVoltage = (fullyChargedVoltage * 1000 * NUMCELLS_SECONDARY);		//mV * 1000 * 7 cells series = F.C. pack voltage (V)
 8007dfa:	8a7b      	ldrh	r3, [r7, #18]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	0152      	lsls	r2, r2, #5
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	0092      	lsls	r2, r2, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	461a      	mov	r2, r3
 8007e08:	00d2      	lsls	r2, r2, #3
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	827b      	strh	r3, [r7, #18]

	while(!doneCharging) {
 8007e10:	e11a      	b.n	8008048 <TinyBMS_MonitorCharging_CAN+0x338>
		while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_CHARGING) {
			//Verify that all cells are being detected
			while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, NUMBER_OF_DETECTED_CELLS) != CMD_SUCCESS);
 8007e12:	bf00      	nop
 8007e14:	2235      	movs	r2, #53	; 0x35
 8007e16:	2101      	movs	r1, #1
 8007e18:	4813      	ldr	r0, [pc, #76]	; (8007e68 <TinyBMS_MonitorCharging_CAN+0x158>)
 8007e1a:	f7fd f867 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1f7      	bne.n	8007e14 <TinyBMS_MonitorCharging_CAN+0x104>
			numDetectedCells = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007e24:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <TinyBMS_MonitorCharging_CAN+0x15c>)
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	b21a      	sxth	r2, r3
 8007e2c:	4b0f      	ldr	r3, [pc, #60]	; (8007e6c <TinyBMS_MonitorCharging_CAN+0x15c>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	b21b      	sxth	r3, r3
 8007e32:	4313      	orrs	r3, r2
 8007e34:	b21b      	sxth	r3, r3
 8007e36:	853b      	strh	r3, [r7, #40]	; 0x28
			if(numDetectedCells != NUMCELLS_SECONDARY) {
 8007e38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e3a:	2b07      	cmp	r3, #7
 8007e3c:	d005      	beq.n	8007e4a <TinyBMS_MonitorCharging_CAN+0x13a>
				printf("Some cells are not being detected!\r\n");
 8007e3e:	480c      	ldr	r0, [pc, #48]	; (8007e70 <TinyBMS_MonitorCharging_CAN+0x160>)
 8007e40:	f006 f974 	bl	800e12c <puts>
				doneCharging = TRUE;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			//Get voltage of all cells and compare with max/min voltage thresholds
			while(TinyBMS_CAN_ReadBatteryPackCellVoltages(&hcan1) != CMD_SUCCESS);
 8007e4a:	bf00      	nop
 8007e4c:	4806      	ldr	r0, [pc, #24]	; (8007e68 <TinyBMS_MonitorCharging_CAN+0x158>)
 8007e4e:	f7fe fa23 	bl	8006298 <TinyBMS_CAN_ReadBatteryPackCellVoltages>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f9      	bne.n	8007e4c <TinyBMS_MonitorCharging_CAN+0x13c>
			for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007e5e:	e063      	b.n	8007f28 <TinyBMS_MonitorCharging_CAN+0x218>
 8007e60:	080135f8 	.word	0x080135f8
 8007e64:	20000330 	.word	0x20000330
 8007e68:	20000200 	.word	0x20000200
 8007e6c:	2000037c 	.word	0x2000037c
 8007e70:	08013610 	.word	0x08013610
				while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, CELL1_VOLTAGE+i) != CMD_SUCCESS);
 8007e74:	bf00      	nop
 8007e76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4877      	ldr	r0, [pc, #476]	; (8008060 <TinyBMS_MonitorCharging_CAN+0x350>)
 8007e82:	f7fd f833 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f4      	bne.n	8007e76 <TinyBMS_MonitorCharging_CAN+0x166>
				cellv[i] = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007e8c:	4b75      	ldr	r3, [pc, #468]	; (8008064 <TinyBMS_MonitorCharging_CAN+0x354>)
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	b21a      	sxth	r2, r3
 8007e94:	4b73      	ldr	r3, [pc, #460]	; (8008064 <TinyBMS_MonitorCharging_CAN+0x354>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	b21b      	sxth	r3, r3
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	b21a      	sxth	r2, r3
 8007e9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	3330      	adds	r3, #48	; 0x30
 8007ea8:	443b      	add	r3, r7
 8007eaa:	f823 2c2c 	strh.w	r2, [r3, #-44]
				cellv[i] = (cellv[i] * 10); 	//0.1mV -> mV
 8007eae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	3330      	adds	r3, #48	; 0x30
 8007eb6:	443b      	add	r3, r7
 8007eb8:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 8007ebc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	0089      	lsls	r1, r1, #2
 8007ec4:	440a      	add	r2, r1
 8007ec6:	0052      	lsls	r2, r2, #1
 8007ec8:	b292      	uxth	r2, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	3330      	adds	r3, #48	; 0x30
 8007ece:	443b      	add	r3, r7
 8007ed0:	f823 2c2c 	strh.w	r2, [r3, #-44]
				if(cellv[i] < minCellVoltage) {	//mV < mV ?
 8007ed4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	3330      	adds	r3, #48	; 0x30
 8007edc:	443b      	add	r3, r7
 8007ede:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8007ee2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d906      	bls.n	8007ef6 <TinyBMS_MonitorCharging_CAN+0x1e6>
					printf("Cell %u is below the minimum voltage threshold!\r\n", i+1);
 8007ee8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eec:	3301      	adds	r3, #1
 8007eee:	4619      	mov	r1, r3
 8007ef0:	485d      	ldr	r0, [pc, #372]	; (8008068 <TinyBMS_MonitorCharging_CAN+0x358>)
 8007ef2:	f006 f895 	bl	800e020 <iprintf>
				}
				if(cellv[i] > maxCellVoltage) {	//mV > mV ?
 8007ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	3330      	adds	r3, #48	; 0x30
 8007efe:	443b      	add	r3, r7
 8007f00:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8007f04:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d209      	bcs.n	8007f1e <TinyBMS_MonitorCharging_CAN+0x20e>
					printf("Cell %u is above the maximum voltage threshold!\r\n", i+1);
 8007f0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f0e:	3301      	adds	r3, #1
 8007f10:	4619      	mov	r1, r3
 8007f12:	4856      	ldr	r0, [pc, #344]	; (800806c <TinyBMS_MonitorCharging_CAN+0x35c>)
 8007f14:	f006 f884 	bl	800e020 <iprintf>
					doneCharging = TRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 8007f1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f22:	3301      	adds	r3, #1
 8007f24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007f28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f2c:	2b06      	cmp	r3, #6
 8007f2e:	d9a1      	bls.n	8007e74 <TinyBMS_MonitorCharging_CAN+0x164>
				}
			}

			//Check if cells need balancing or are in progress of balancing
			//Regs 51 & 52: BALANCING_DECISION_BITS & REAL_BALANCING_BITS
			while(TinyBMS_CAN_ReadRegBlock(&hcan1, 2, BALANCING_DECISION_BITS) != CMD_SUCCESS);
 8007f30:	bf00      	nop
 8007f32:	2233      	movs	r2, #51	; 0x33
 8007f34:	2102      	movs	r1, #2
 8007f36:	484a      	ldr	r0, [pc, #296]	; (8008060 <TinyBMS_MonitorCharging_CAN+0x350>)
 8007f38:	f7fc ffd8 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f7      	bne.n	8007f32 <TinyBMS_MonitorCharging_CAN+0x222>
			balance_decision_bits = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8007f42:	4b48      	ldr	r3, [pc, #288]	; (8008064 <TinyBMS_MonitorCharging_CAN+0x354>)
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	b21a      	sxth	r2, r3
 8007f4a:	4b46      	ldr	r3, [pc, #280]	; (8008064 <TinyBMS_MonitorCharging_CAN+0x354>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b21b      	sxth	r3, r3
 8007f54:	84fb      	strh	r3, [r7, #38]	; 0x26
			real_balance_bits = ((rx_buffer[3] << 8) | rx_buffer[2]);
 8007f56:	4b43      	ldr	r3, [pc, #268]	; (8008064 <TinyBMS_MonitorCharging_CAN+0x354>)
 8007f58:	78db      	ldrb	r3, [r3, #3]
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	b21a      	sxth	r2, r3
 8007f5e:	4b41      	ldr	r3, [pc, #260]	; (8008064 <TinyBMS_MonitorCharging_CAN+0x354>)
 8007f60:	789b      	ldrb	r3, [r3, #2]
 8007f62:	b21b      	sxth	r3, r3
 8007f64:	4313      	orrs	r3, r2
 8007f66:	b21b      	sxth	r3, r3
 8007f68:	84bb      	strh	r3, [r7, #36]	; 0x24
			printf("Balancing Decision Bits: 0x%04X\r\n", balance_decision_bits);
 8007f6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4840      	ldr	r0, [pc, #256]	; (8008070 <TinyBMS_MonitorCharging_CAN+0x360>)
 8007f70:	f006 f856 	bl	800e020 <iprintf>
			printf("Real Balancing Bits: 0x%04X\r\n", real_balance_bits);
 8007f74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f76:	4619      	mov	r1, r3
 8007f78:	483e      	ldr	r0, [pc, #248]	; (8008074 <TinyBMS_MonitorCharging_CAN+0x364>)
 8007f7a:	f006 f851 	bl	800e020 <iprintf>

			//Check Newest Events
			while(TinyBMS_CAN_ReadNewestEvents(&hcan1) != CMD_SUCCESS);
 8007f7e:	bf00      	nop
 8007f80:	4837      	ldr	r0, [pc, #220]	; (8008060 <TinyBMS_MonitorCharging_CAN+0x350>)
 8007f82:	f7fd f9c3 	bl	800530c <TinyBMS_CAN_ReadNewestEvents>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f9      	bne.n	8007f80 <TinyBMS_MonitorCharging_CAN+0x270>

			//Check Temperatures against LOWTEMP_CHARGER_CUTOFF and OVERTEMP_CUTOFF
			while(TinyBMS_CAN_ReadDeviceTemperatures(&hcan1) != CMD_SUCCESS);
 8007f8c:	bf00      	nop
 8007f8e:	4834      	ldr	r0, [pc, #208]	; (8008060 <TinyBMS_MonitorCharging_CAN+0x350>)
 8007f90:	f7fe f882 	bl	8006098 <TinyBMS_CAN_ReadDeviceTemperatures>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f9      	bne.n	8007f8e <TinyBMS_MonitorCharging_CAN+0x27e>

			//Get State of Charge
			estSOC = TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 8007f9a:	4831      	ldr	r0, [pc, #196]	; (8008060 <TinyBMS_MonitorCharging_CAN+0x350>)
 8007f9c:	f7fd ffda 	bl	8005f54 <TinyBMS_CAN_ReadEstimatedSOCValue>
 8007fa0:	6238      	str	r0, [r7, #32]
			printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 8007fa2:	6a39      	ldr	r1, [r7, #32]
 8007fa4:	4834      	ldr	r0, [pc, #208]	; (8008078 <TinyBMS_MonitorCharging_CAN+0x368>)
 8007fa6:	f006 f83b 	bl	800e020 <iprintf>

			//Compare Pack Voltage to FULLYCHARGED_VOLTAGE
			packVoltage = TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 8007faa:	482d      	ldr	r0, [pc, #180]	; (8008060 <TinyBMS_MonitorCharging_CAN+0x350>)
 8007fac:	f7fd fba6 	bl	80056fc <TinyBMS_CAN_ReadBatteryPackVoltage>
 8007fb0:	ed87 0a06 	vstr	s0, [r7, #24]
			printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 8007fb4:	69b8      	ldr	r0, [r7, #24]
 8007fb6:	f7f8 fae7 	bl	8000588 <__aeabi_f2d>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	482f      	ldr	r0, [pc, #188]	; (800807c <TinyBMS_MonitorCharging_CAN+0x36c>)
 8007fc0:	f006 f82e 	bl	800e020 <iprintf>
			if(packVoltage >= fullyChargedVoltage) { 	//V >= V ?
 8007fc4:	8a7b      	ldrh	r3, [r7, #18]
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fce:	ed97 7a06 	vldr	s14, [r7, #24]
 8007fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fda:	db02      	blt.n	8007fe2 <TinyBMS_MonitorCharging_CAN+0x2d2>
				doneCharging = TRUE;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			//Compare Pack Current to CHARGE_FINISHED_CURRENT and CHARGE_OVERCURRENT_CUTOFF
			packCurrent = TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 8007fe2:	481f      	ldr	r0, [pc, #124]	; (8008060 <TinyBMS_MonitorCharging_CAN+0x350>)
 8007fe4:	f7fd fc3a 	bl	800585c <TinyBMS_CAN_ReadBatteryPackCurrent>
 8007fe8:	ed87 0a07 	vstr	s0, [r7, #28]
			printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 8007fec:	69f8      	ldr	r0, [r7, #28]
 8007fee:	f7f8 facb 	bl	8000588 <__aeabi_f2d>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4822      	ldr	r0, [pc, #136]	; (8008080 <TinyBMS_MonitorCharging_CAN+0x370>)
 8007ff8:	f006 f812 	bl	800e020 <iprintf>
			if(packCurrent <= stopChargingCurrent) {	//A <= A ?
 8007ffc:	8afb      	ldrh	r3, [r7, #22]
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008006:	ed97 7a07 	vldr	s14, [r7, #28]
 800800a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800800e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008012:	d802      	bhi.n	800801a <TinyBMS_MonitorCharging_CAN+0x30a>
				doneCharging = TRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}
			if(packCurrent >= chargeOvercurrent) {		//A >= A ?
 800801a:	8abb      	ldrh	r3, [r7, #20]
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008024:	ed97 7a07 	vldr	s14, [r7, #28]
 8008028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008030:	da00      	bge.n	8008034 <TinyBMS_MonitorCharging_CAN+0x324>
 8008032:	e002      	b.n	800803a <TinyBMS_MonitorCharging_CAN+0x32a>
				doneCharging = TRUE;
 8008034:	2301      	movs	r3, #1
 8008036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_CHARGING) {
 800803a:	4809      	ldr	r0, [pc, #36]	; (8008060 <TinyBMS_MonitorCharging_CAN+0x350>)
 800803c:	f7fd fdfa 	bl	8005c34 <TinyBMS_CAN_ReadOnlineStatus>
 8008040:	4603      	mov	r3, r0
 8008042:	2b91      	cmp	r3, #145	; 0x91
 8008044:	f43f aee5 	beq.w	8007e12 <TinyBMS_MonitorCharging_CAN+0x102>
	while(!doneCharging) {
 8008048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0f4      	beq.n	800803a <TinyBMS_MonitorCharging_CAN+0x32a>
			}
		}
	}

	//Stop the Timer
	HAL_TIM_Base_Stop_IT(&htim6);
 8008050:	480c      	ldr	r0, [pc, #48]	; (8008084 <TinyBMS_MonitorCharging_CAN+0x374>)
 8008052:	f003 fd1f 	bl	800ba94 <HAL_TIM_Base_Stop_IT>
}
 8008056:	bf00      	nop
 8008058:	3730      	adds	r7, #48	; 0x30
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000200 	.word	0x20000200
 8008064:	2000037c 	.word	0x2000037c
 8008068:	08013634 	.word	0x08013634
 800806c:	08013668 	.word	0x08013668
 8008070:	0801369c 	.word	0x0801369c
 8008074:	080136c0 	.word	0x080136c0
 8008078:	080135b4 	.word	0x080135b4
 800807c:	0801343c 	.word	0x0801343c
 8008080:	08013468 	.word	0x08013468
 8008084:	20000330 	.word	0x20000330

08008088 <TinyBMS_MonitorDischarging_CAN>:

void TinyBMS_MonitorDischarging_CAN(void) {
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	; 0x28
 800808c:	af00      	add	r7, sp, #0
	//TinyBMS Init
	if(TinyBMS_Init_CAN() != CMD_SUCCESS) {
 800808e:	f000 fbcf 	bl	8008830 <TinyBMS_Init_CAN>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <TinyBMS_MonitorDischarging_CAN+0x1a>
		printf("TinyBMS Init failed.\r\n");
 8008098:	489c      	ldr	r0, [pc, #624]	; (800830c <TinyBMS_MonitorDischarging_CAN+0x284>)
 800809a:	f006 f847 	bl	800e12c <puts>
		Error_Handler();
 800809e:	f001 fa6f 	bl	8009580 <Error_Handler>
	}

	uint8_t doneDischarging = FALSE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint16_t cellv[7] = {0,0,0,0,0,0,0};
 80080a8:	463b      	mov	r3, r7
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	605a      	str	r2, [r3, #4]
 80080b0:	609a      	str	r2, [r3, #8]
 80080b2:	819a      	strh	r2, [r3, #12]
	uint16_t minCellVoltage = TinyBMS_CAN_ReadBatteryPackMinCellVoltage(&hcan1);	//mV
 80080b4:	4896      	ldr	r0, [pc, #600]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 80080b6:	f7fd fd1f 	bl	8005af8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>
 80080ba:	4603      	mov	r3, r0
 80080bc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t maxCellVoltage = TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(&hcan1);	//mV
 80080be:	4894      	ldr	r0, [pc, #592]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 80080c0:	f7fd fc7c 	bl	80059bc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>
 80080c4:	4603      	mov	r3, r0
 80080c6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t numDetectedCells = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	843b      	strh	r3, [r7, #32]
	uint32_t estSOC = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61fb      	str	r3, [r7, #28]
	float packCurrent = 0, packVoltage = 0;
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	617b      	str	r3, [r7, #20]

	while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, DISCHARGE_OVERCURRENT_CUTOFF) != CMD_SUCCESS);
 80080dc:	bf00      	nop
 80080de:	f240 123d 	movw	r2, #317	; 0x13d
 80080e2:	2101      	movs	r1, #1
 80080e4:	488a      	ldr	r0, [pc, #552]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 80080e6:	f7fc ff01 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f6      	bne.n	80080de <TinyBMS_MonitorDischarging_CAN+0x56>
	uint16_t dischargeOvercurrent = ((rx_buffer[1] << 8) | rx_buffer[0]);			//A
 80080f0:	4b88      	ldr	r3, [pc, #544]	; (8008314 <TinyBMS_MonitorDischarging_CAN+0x28c>)
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	b21a      	sxth	r2, r3
 80080f8:	4b86      	ldr	r3, [pc, #536]	; (8008314 <TinyBMS_MonitorDischarging_CAN+0x28c>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	b21b      	sxth	r3, r3
 80080fe:	4313      	orrs	r3, r2
 8008100:	b21b      	sxth	r3, r3
 8008102:	827b      	strh	r3, [r7, #18]

	while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, FULLYDISCHARGED_VOLTAGE) != CMD_SUCCESS);
 8008104:	bf00      	nop
 8008106:	f240 122d 	movw	r2, #301	; 0x12d
 800810a:	2101      	movs	r1, #1
 800810c:	4880      	ldr	r0, [pc, #512]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 800810e:	f7fc feed 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1f6      	bne.n	8008106 <TinyBMS_MonitorDischarging_CAN+0x7e>
	uint16_t fullyDischargedVoltage = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8008118:	4b7e      	ldr	r3, [pc, #504]	; (8008314 <TinyBMS_MonitorDischarging_CAN+0x28c>)
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	b21a      	sxth	r2, r3
 8008120:	4b7c      	ldr	r3, [pc, #496]	; (8008314 <TinyBMS_MonitorDischarging_CAN+0x28c>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	b21b      	sxth	r3, r3
 8008126:	4313      	orrs	r3, r2
 8008128:	b21b      	sxth	r3, r3
 800812a:	823b      	strh	r3, [r7, #16]
	fullyDischargedVoltage = (fullyDischargedVoltage * 1000 * NUMCELLS_SECONDARY);	//mV * 1000 * 7 cells series = empty pack voltage (V)
 800812c:	8a3b      	ldrh	r3, [r7, #16]
 800812e:	461a      	mov	r2, r3
 8008130:	0152      	lsls	r2, r2, #5
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	0092      	lsls	r2, r2, #2
 8008136:	4413      	add	r3, r2
 8008138:	461a      	mov	r2, r3
 800813a:	00d2      	lsls	r2, r2, #3
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	823b      	strh	r3, [r7, #16]

	while(!doneDischarging) {
 8008142:	e0da      	b.n	80082fa <TinyBMS_MonitorDischarging_CAN+0x272>
		while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_DISCHARGING) {
			//Verify that all cells are being detected
			while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, NUMBER_OF_DETECTED_CELLS) != CMD_SUCCESS);
 8008144:	bf00      	nop
 8008146:	2235      	movs	r2, #53	; 0x35
 8008148:	2101      	movs	r1, #1
 800814a:	4871      	ldr	r0, [pc, #452]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 800814c:	f7fc fece 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1f7      	bne.n	8008146 <TinyBMS_MonitorDischarging_CAN+0xbe>
			numDetectedCells = ((rx_buffer[1] << 8) | rx_buffer[0]);
 8008156:	4b6f      	ldr	r3, [pc, #444]	; (8008314 <TinyBMS_MonitorDischarging_CAN+0x28c>)
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	b21a      	sxth	r2, r3
 800815e:	4b6d      	ldr	r3, [pc, #436]	; (8008314 <TinyBMS_MonitorDischarging_CAN+0x28c>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b21b      	sxth	r3, r3
 8008164:	4313      	orrs	r3, r2
 8008166:	b21b      	sxth	r3, r3
 8008168:	843b      	strh	r3, [r7, #32]
			if(numDetectedCells != NUMCELLS_SECONDARY) {
 800816a:	8c3b      	ldrh	r3, [r7, #32]
 800816c:	2b07      	cmp	r3, #7
 800816e:	d005      	beq.n	800817c <TinyBMS_MonitorDischarging_CAN+0xf4>
				printf("Some cells are not being detected!\r\n");
 8008170:	4869      	ldr	r0, [pc, #420]	; (8008318 <TinyBMS_MonitorDischarging_CAN+0x290>)
 8008172:	f005 ffdb 	bl	800e12c <puts>
				doneDischarging = TRUE;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			//Get voltage of all cells and compare with max/min voltage thresholds
			while(TinyBMS_CAN_ReadBatteryPackCellVoltages(&hcan1) != CMD_SUCCESS);
 800817c:	bf00      	nop
 800817e:	4864      	ldr	r0, [pc, #400]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 8008180:	f7fe f88a 	bl	8006298 <TinyBMS_CAN_ReadBatteryPackCellVoltages>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f9      	bne.n	800817e <TinyBMS_MonitorDischarging_CAN+0xf6>
			for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 800818a:	2300      	movs	r3, #0
 800818c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008190:	e059      	b.n	8008246 <TinyBMS_MonitorDischarging_CAN+0x1be>
				while(TinyBMS_CAN_ReadRegBlock(&hcan1, 1, CELL1_VOLTAGE+i) != CMD_SUCCESS);
 8008192:	bf00      	nop
 8008194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008198:	b29b      	uxth	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	2101      	movs	r1, #1
 800819e:	485c      	ldr	r0, [pc, #368]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 80081a0:	f7fc fea4 	bl	8004eec <TinyBMS_CAN_ReadRegBlock>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f4      	bne.n	8008194 <TinyBMS_MonitorDischarging_CAN+0x10c>
				cellv[i] = ((rx_buffer[1] << 8) | rx_buffer[0]);
 80081aa:	4b5a      	ldr	r3, [pc, #360]	; (8008314 <TinyBMS_MonitorDischarging_CAN+0x28c>)
 80081ac:	785b      	ldrb	r3, [r3, #1]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	b21a      	sxth	r2, r3
 80081b2:	4b58      	ldr	r3, [pc, #352]	; (8008314 <TinyBMS_MonitorDischarging_CAN+0x28c>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b21b      	sxth	r3, r3
 80081b8:	4313      	orrs	r3, r2
 80081ba:	b21a      	sxth	r2, r3
 80081bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081c0:	b292      	uxth	r2, r2
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	3328      	adds	r3, #40	; 0x28
 80081c6:	443b      	add	r3, r7
 80081c8:	f823 2c28 	strh.w	r2, [r3, #-40]
				cellv[i] = (cellv[i] * 10); 	//0.1mV -> mV
 80081cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	3328      	adds	r3, #40	; 0x28
 80081d4:	443b      	add	r3, r7
 80081d6:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80081da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081de:	4611      	mov	r1, r2
 80081e0:	0089      	lsls	r1, r1, #2
 80081e2:	440a      	add	r2, r1
 80081e4:	0052      	lsls	r2, r2, #1
 80081e6:	b292      	uxth	r2, r2
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	3328      	adds	r3, #40	; 0x28
 80081ec:	443b      	add	r3, r7
 80081ee:	f823 2c28 	strh.w	r2, [r3, #-40]
				if(cellv[i] < minCellVoltage) {	//mV < mV
 80081f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	3328      	adds	r3, #40	; 0x28
 80081fa:	443b      	add	r3, r7
 80081fc:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8008200:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008202:	429a      	cmp	r2, r3
 8008204:	d909      	bls.n	800821a <TinyBMS_MonitorDischarging_CAN+0x192>
					printf("Cell %u is below the minimum voltage threshold!\r\n", i+1);
 8008206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800820a:	3301      	adds	r3, #1
 800820c:	4619      	mov	r1, r3
 800820e:	4843      	ldr	r0, [pc, #268]	; (800831c <TinyBMS_MonitorDischarging_CAN+0x294>)
 8008210:	f005 ff06 	bl	800e020 <iprintf>
					doneDischarging = TRUE;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if(cellv[i] > maxCellVoltage) {	//mV > mV
 800821a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	3328      	adds	r3, #40	; 0x28
 8008222:	443b      	add	r3, r7
 8008224:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8008228:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800822a:	429a      	cmp	r2, r3
 800822c:	d206      	bcs.n	800823c <TinyBMS_MonitorDischarging_CAN+0x1b4>
					printf("Cell %u is above the maximum voltage threshold!\r\n", i+1);
 800822e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008232:	3301      	adds	r3, #1
 8008234:	4619      	mov	r1, r3
 8008236:	483a      	ldr	r0, [pc, #232]	; (8008320 <TinyBMS_MonitorDischarging_CAN+0x298>)
 8008238:	f005 fef2 	bl	800e020 <iprintf>
			for(uint8_t i = 0; i < NUMCELLS_SECONDARY; i++) {
 800823c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008240:	3301      	adds	r3, #1
 8008242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800824a:	2b06      	cmp	r3, #6
 800824c:	d9a1      	bls.n	8008192 <TinyBMS_MonitorDischarging_CAN+0x10a>
			}

			//No cell balancing check during discharge

			//Check Newest Events
			while(TinyBMS_CAN_ReadNewestEvents(&hcan1) != CMD_SUCCESS);
 800824e:	bf00      	nop
 8008250:	482f      	ldr	r0, [pc, #188]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 8008252:	f7fd f85b 	bl	800530c <TinyBMS_CAN_ReadNewestEvents>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1f9      	bne.n	8008250 <TinyBMS_MonitorDischarging_CAN+0x1c8>

			//Check Temperatures against OVERTEMP_CUTOFF
			while(TinyBMS_CAN_ReadDeviceTemperatures(&hcan1) != CMD_SUCCESS);
 800825c:	bf00      	nop
 800825e:	482c      	ldr	r0, [pc, #176]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 8008260:	f7fd ff1a 	bl	8006098 <TinyBMS_CAN_ReadDeviceTemperatures>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f9      	bne.n	800825e <TinyBMS_MonitorDischarging_CAN+0x1d6>

			//Get State of Charge
			estSOC = TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 800826a:	4829      	ldr	r0, [pc, #164]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 800826c:	f7fd fe72 	bl	8005f54 <TinyBMS_CAN_ReadEstimatedSOCValue>
 8008270:	61f8      	str	r0, [r7, #28]
			printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 8008272:	69f9      	ldr	r1, [r7, #28]
 8008274:	482b      	ldr	r0, [pc, #172]	; (8008324 <TinyBMS_MonitorDischarging_CAN+0x29c>)
 8008276:	f005 fed3 	bl	800e020 <iprintf>

			//Compare Pack Voltage to FULLYDISCHARGED_VOLTAGE
			packVoltage = TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 800827a:	4825      	ldr	r0, [pc, #148]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 800827c:	f7fd fa3e 	bl	80056fc <TinyBMS_CAN_ReadBatteryPackVoltage>
 8008280:	ed87 0a05 	vstr	s0, [r7, #20]
			printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 8008284:	6978      	ldr	r0, [r7, #20]
 8008286:	f7f8 f97f 	bl	8000588 <__aeabi_f2d>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4826      	ldr	r0, [pc, #152]	; (8008328 <TinyBMS_MonitorDischarging_CAN+0x2a0>)
 8008290:	f005 fec6 	bl	800e020 <iprintf>
			if(packVoltage <= fullyDischargedVoltage) {	//V <= V ?
 8008294:	8a3b      	ldrh	r3, [r7, #16]
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800829e:	ed97 7a05 	vldr	s14, [r7, #20]
 80082a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082aa:	d802      	bhi.n	80082b2 <TinyBMS_MonitorDischarging_CAN+0x22a>
				doneDischarging = TRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			//Compare Pack Current to DISCHARGE_OVERCURRENT_CUTOFF
			packCurrent = TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 80082b2:	4817      	ldr	r0, [pc, #92]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 80082b4:	f7fd fad2 	bl	800585c <TinyBMS_CAN_ReadBatteryPackCurrent>
 80082b8:	ed87 0a06 	vstr	s0, [r7, #24]
			printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 80082bc:	69b8      	ldr	r0, [r7, #24]
 80082be:	f7f8 f963 	bl	8000588 <__aeabi_f2d>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4819      	ldr	r0, [pc, #100]	; (800832c <TinyBMS_MonitorDischarging_CAN+0x2a4>)
 80082c8:	f005 feaa 	bl	800e020 <iprintf>
			if(packCurrent >= dischargeOvercurrent) {	//A >= A ?
 80082cc:	8a7b      	ldrh	r3, [r7, #18]
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80082da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e2:	da00      	bge.n	80082e6 <TinyBMS_MonitorDischarging_CAN+0x25e>
 80082e4:	e002      	b.n	80082ec <TinyBMS_MonitorDischarging_CAN+0x264>
				doneDischarging = TRUE;
 80082e6:	2301      	movs	r3, #1
 80082e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(TinyBMS_CAN_ReadOnlineStatus(&hcan1) == TINYBMS_STATUS_DISCHARGING) {
 80082ec:	4808      	ldr	r0, [pc, #32]	; (8008310 <TinyBMS_MonitorDischarging_CAN+0x288>)
 80082ee:	f7fd fca1 	bl	8005c34 <TinyBMS_CAN_ReadOnlineStatus>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b93      	cmp	r3, #147	; 0x93
 80082f6:	f43f af25 	beq.w	8008144 <TinyBMS_MonitorDischarging_CAN+0xbc>
	while(!doneDischarging) {
 80082fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0f4      	beq.n	80082ec <TinyBMS_MonitorDischarging_CAN+0x264>
			}
		}
	}
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	3728      	adds	r7, #40	; 0x28
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	080135f8 	.word	0x080135f8
 8008310:	20000200 	.word	0x20000200
 8008314:	2000037c 	.word	0x2000037c
 8008318:	08013610 	.word	0x08013610
 800831c:	08013634 	.word	0x08013634
 8008320:	08013668 	.word	0x08013668
 8008324:	080135b4 	.word	0x080135b4
 8008328:	0801343c 	.word	0x0801343c
 800832c:	08013468 	.word	0x08013468

08008330 <ElCon_SendMsg>:

void ElCon_SendMsg(void) {
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
	//Triggered from HAL_TIM_PeriodElapsedCallback()
	//Every 1 second, send 8-bytes of data with voltage and current requested to ExtID 0x1806E5F4
	//Todo:
	uint8_t msg[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <ElCon_SendMsg+0x2c>)
 8008338:	1d3b      	adds	r3, r7, #4
 800833a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800833e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t len = 8;
 8008342:	2308      	movs	r3, #8
 8008344:	73fb      	strb	r3, [r7, #15]
	CAN1_Tx(ELCONCHARGER2, msg, len);
 8008346:	7bfa      	ldrb	r2, [r7, #15]
 8008348:	1d3b      	adds	r3, r7, #4
 800834a:	4619      	mov	r1, r3
 800834c:	2002      	movs	r0, #2
 800834e:	f000 ff9f 	bl	8009290 <CAN1_Tx>
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	080136e0 	.word	0x080136e0

08008360 <TinyBMS_Init_UART>:

uint8_t TinyBMS_Init_UART(void) {
 8008360:	b580      	push	{r7, lr}
 8008362:	b0aa      	sub	sp, #168	; 0xa8
 8008364:	af00      	add	r7, sp, #0
	uint8_t retval = CMD_FAILURE;
 8008366:	23ff      	movs	r3, #255	; 0xff
 8008368:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	int validInput = FALSE;
 800836c:	2300      	movs	r3, #0
 800836e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int userInput = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	//Fresh start or keep previous settings registers and statistics?
	while(!validInput) {
 8008378:	e037      	b.n	80083ea <TinyBMS_Init_UART+0x8a>
		printf("Clear TinyBMS data and reload settings registers? (Fresh Start)\r\n");
 800837a:	4813      	ldr	r0, [pc, #76]	; (80083c8 <TinyBMS_Init_UART+0x68>)
 800837c:	f005 fed6 	bl	800e12c <puts>
		printf("0: No   1: Yes\r\n");
 8008380:	4812      	ldr	r0, [pc, #72]	; (80083cc <TinyBMS_Init_UART+0x6c>)
 8008382:	f005 fed3 	bl	800e12c <puts>
		userInput = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		scanf("%d", &userInput);
 800838c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008390:	4619      	mov	r1, r3
 8008392:	480f      	ldr	r0, [pc, #60]	; (80083d0 <TinyBMS_Init_UART+0x70>)
 8008394:	f005 fed2 	bl	800e13c <iscanf>

		switch(userInput) {
 8008398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <TinyBMS_Init_UART+0x46>
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d009      	beq.n	80083b8 <TinyBMS_Init_UART+0x58>
 80083a4:	e01a      	b.n	80083dc <TinyBMS_Init_UART+0x7c>
		case NO:
			validInput = TRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			printf("Keeping previous settings and data..\r\n");
 80083ac:	4809      	ldr	r0, [pc, #36]	; (80083d4 <TinyBMS_Init_UART+0x74>)
 80083ae:	f005 febd 	bl	800e12c <puts>
			return retval;
 80083b2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80083b6:	e228      	b.n	800880a <TinyBMS_Init_UART+0x4aa>
		case YES:
			validInput = TRUE;
 80083b8:	2301      	movs	r3, #1
 80083ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			printf("Fresh Start!\r\n");
 80083be:	4806      	ldr	r0, [pc, #24]	; (80083d8 <TinyBMS_Init_UART+0x78>)
 80083c0:	f005 feb4 	bl	800e12c <puts>
			break;
 80083c4:	e011      	b.n	80083ea <TinyBMS_Init_UART+0x8a>
 80083c6:	bf00      	nop
 80083c8:	080136e8 	.word	0x080136e8
 80083cc:	0801372c 	.word	0x0801372c
 80083d0:	08013380 	.word	0x08013380
 80083d4:	0801373c 	.word	0x0801373c
 80083d8:	08013764 	.word	0x08013764
		default:
			validInput = FALSE;
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			printf("Invalid input.\r\n");
 80083e2:	48c2      	ldr	r0, [pc, #776]	; (80086ec <TinyBMS_Init_UART+0x38c>)
 80083e4:	f005 fea2 	bl	800e12c <puts>
			break;
 80083e8:	bf00      	nop
	while(!validInput) {
 80083ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d0c3      	beq.n	800837a <TinyBMS_Init_UART+0x1a>
		}
	}

	//Get initial State of Charge
	uint32_t estSOC = TinyBMS_UART_ReadEstimatedSOCValue(&huart2);
 80083f2:	48bf      	ldr	r0, [pc, #764]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80083f4:	f7fb fb00 	bl	80039f8 <TinyBMS_UART_ReadEstimatedSOCValue>
 80083f8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 80083fc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008400:	48bc      	ldr	r0, [pc, #752]	; (80086f4 <TinyBMS_Init_UART+0x394>)
 8008402:	f005 fe0d 	bl	800e020 <iprintf>

	printf("Initializing TinyBMS settings..\r\n");
 8008406:	48bc      	ldr	r0, [pc, #752]	; (80086f8 <TinyBMS_Init_UART+0x398>)
 8008408:	f005 fe90 	bl	800e12c <puts>
	// rl max is 100 (0x64) registers, but this exceeds the actual total
	// Check manual for explanations and screenshots of Battery Insider settings

	/*************** Step 1. Battery Parameters and Balancing ***************/
													//Register#:
	uint16_t addr1[] = {
 800840c:	4abb      	ldr	r2, [pc, #748]	; (80086fc <TinyBMS_Init_UART+0x39c>)
 800840e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008412:	ca07      	ldmia	r2, {r0, r1, r2}
 8008414:	c303      	stmia	r3!, {r0, r1}
 8008416:	801a      	strh	r2, [r3, #0]
			ALLOWED_DISBALANCE,						//308
			EARLY_BALANCING_THRESHOLD,				//303
			BATTERY_CAPACITY,						//306
			STATE_OF_CHARGE_SETMANUAL				//328
	};
	uint16_t data1[] = {
 8008418:	2307      	movs	r3, #7
 800841a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800841e:	230f      	movs	r3, #15
 8008420:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8008424:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8008428:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800842c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008430:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8008434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008438:	b29b      	uxth	r3, r3
 800843a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			15,										//308
			3200,									//303
			5000,									//306
			estSOC									//328
	};
	while(TinyBMS_UART_WriteRegIndividual(&huart2, 5, addr1, data1) != CMD_SUCCESS);
 800843e:	bf00      	nop
 8008440:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008444:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008448:	2105      	movs	r1, #5
 800844a:	48a9      	ldr	r0, [pc, #676]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 800844c:	f7f9 fbb4 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1f4      	bne.n	8008440 <TinyBMS_Init_UART+0xe0>
	printf("Step 1. Battery Parameters and Balancing\r\n");
 8008456:	48aa      	ldr	r0, [pc, #680]	; (8008700 <TinyBMS_Init_UART+0x3a0>)
 8008458:	f005 fe68 	bl	800e12c <puts>

	/*************** Step 2. Battery Safety Critical Events ***************/
	uint16_t addr2[] = {
 800845c:	4ba9      	ldr	r3, [pc, #676]	; (8008704 <TinyBMS_Init_UART+0x3a4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	66fb      	str	r3, [r7, #108]	; 0x6c
			OVERVOLTAGE_CUTOFF,						//315
			UNDERVOLTAGE_CUTOFF						//316
	};
	uint16_t data2[] = {
 8008462:	4ba9      	ldr	r3, [pc, #676]	; (8008708 <TinyBMS_Init_UART+0x3a8>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	66bb      	str	r3, [r7, #104]	; 0x68
			4200,									//315
			2900									//316
	};
	while(TinyBMS_UART_WriteRegIndividual(&huart2, 2, addr2, data2) != CMD_SUCCESS);
 8008468:	bf00      	nop
 800846a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800846e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008472:	2102      	movs	r1, #2
 8008474:	489e      	ldr	r0, [pc, #632]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 8008476:	f7f9 fb9f 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1f4      	bne.n	800846a <TinyBMS_Init_UART+0x10a>
	printf("Step 2. Battery Safety Critical Events\r\n");
 8008480:	48a2      	ldr	r0, [pc, #648]	; (800870c <TinyBMS_Init_UART+0x3ac>)
 8008482:	f005 fe53 	bl	800e12c <puts>

	/*************** Step 3. Charging/Discharging Characteristics ***************/
	uint16_t addr3[] = {
 8008486:	4aa2      	ldr	r2, [pc, #648]	; (8008710 <TinyBMS_Init_UART+0x3b0>)
 8008488:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800848c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008490:	6018      	str	r0, [r3, #0]
 8008492:	3304      	adds	r3, #4
 8008494:	8019      	strh	r1, [r3, #0]
			FULLYCHARGED_VOLTAGE,					//300
			FULLYDISCHARGED_VOLTAGE,				//301
			CHARGE_FINISHED_CURRENT					//304
	};
	uint16_t data3[] = {
 8008496:	4a9f      	ldr	r2, [pc, #636]	; (8008714 <TinyBMS_Init_UART+0x3b4>)
 8008498:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800849c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084a0:	6018      	str	r0, [r3, #0]
 80084a2:	3304      	adds	r3, #4
 80084a4:	8019      	strh	r1, [r3, #0]
			4000,									//300
			3000,									//301
			1000									//304
	};
	while(TinyBMS_UART_WriteRegIndividual(&huart2, 3, addr3, data3) != CMD_SUCCESS);
 80084a6:	bf00      	nop
 80084a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80084b0:	2103      	movs	r1, #3
 80084b2:	488f      	ldr	r0, [pc, #572]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80084b4:	f7f9 fb80 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f4      	bne.n	80084a8 <TinyBMS_Init_UART+0x148>
	printf("Step 3. Charging/Discharging Characteristics\r\n");
 80084be:	4896      	ldr	r0, [pc, #600]	; (8008718 <TinyBMS_Init_UART+0x3b8>)
 80084c0:	f005 fe34 	bl	800e12c <puts>

	/* Low Power (up to 60A discharge and 30A charge sustained) Configurations */
	/*************** Step 4. BMS Mode ***************/
	uint16_t addr4[1] = {
 80084c4:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80084c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			BMS_OPERATION_MODE						//340
	};
	uint16_t data4[1] = {
 80084cc:	2300      	movs	r3, #0
 80084ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			OPMODE_DUALPORT							//340
	};
	while(TinyBMS_UART_WriteRegIndividual(&huart2, 1, addr4, data4) != CMD_SUCCESS);
 80084d2:	bf00      	nop
 80084d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084d8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80084dc:	2101      	movs	r1, #1
 80084de:	4884      	ldr	r0, [pc, #528]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80084e0:	f7f9 fb6a 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f4      	bne.n	80084d4 <TinyBMS_Init_UART+0x174>
	printf("Step 4. BMS Mode\r\n");
 80084ea:	488c      	ldr	r0, [pc, #560]	; (800871c <TinyBMS_Init_UART+0x3bc>)
 80084ec:	f005 fe1e 	bl	800e12c <puts>
	//BMS should restart itself and reconnect after setting BMS Operation Mode

	//Check if BMS was Reset by reading Lifetime Counter
	while(TinyBMS_CAN_ReadLifetimeCounter(&hcan1) < 5);
 80084f0:	bf00      	nop
 80084f2:	488b      	ldr	r0, [pc, #556]	; (8008720 <TinyBMS_Init_UART+0x3c0>)
 80084f4:	f7fd fc8c 	bl	8005e10 <TinyBMS_CAN_ReadLifetimeCounter>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d9f9      	bls.n	80084f2 <TinyBMS_Init_UART+0x192>

	/*************** Step 5. Load Parameters ***************/
	uint16_t addr5[] = {
 80084fe:	4a89      	ldr	r2, [pc, #548]	; (8008724 <TinyBMS_Init_UART+0x3c4>)
 8008500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008508:	e883 0003 	stmia.w	r3, {r0, r1}
			LOAD_SWITCH_TYPE,						//331
			IGNITION,								//334
			PRECHARGE_PIN,							//337
			PRECHARGE_DURATION						//338
	};
	uint16_t data5[] = {
 800850c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	605a      	str	r2, [r3, #4]
			LOAD_SWITCH_TYPE_FET,					//331
			IGNITION_DISABLED,						//334
			PRECHARGE_PIN_DISABLED,					//337
			PRECHARGE_DURATION_100MS				//338
	};
	while(TinyBMS_UART_WriteRegIndividual(&huart2, 4, addr5, data5) != CMD_SUCCESS);
 8008516:	bf00      	nop
 8008518:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800851c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008520:	2104      	movs	r1, #4
 8008522:	4873      	ldr	r0, [pc, #460]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 8008524:	f7f9 fb48 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1f4      	bne.n	8008518 <TinyBMS_Init_UART+0x1b8>
	printf("Step 5. Load Parameters\r\n");
 800852e:	487e      	ldr	r0, [pc, #504]	; (8008728 <TinyBMS_Init_UART+0x3c8>)
 8008530:	f005 fdfc 	bl	800e12c <puts>

	/*************** Step 6. Charger Parameters ***************/
	uint16_t addr6[] = {
 8008534:	4a7d      	ldr	r2, [pc, #500]	; (800872c <TinyBMS_Init_UART+0x3cc>)
 8008536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800853a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800853e:	6018      	str	r0, [r3, #0]
 8008540:	3304      	adds	r3, #4
 8008542:	8019      	strh	r1, [r3, #0]
			CHARGER_TYPE,							//330
			CHARGER_DETECTION,						//335
			CHARGER_SWITCH_TYPE						//333
	};
	uint16_t data6[] = {
 8008544:	4a7a      	ldr	r2, [pc, #488]	; (8008730 <TinyBMS_Init_UART+0x3d0>)
 8008546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800854a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800854e:	6018      	str	r0, [r3, #0]
 8008550:	3304      	adds	r3, #4
 8008552:	8019      	strh	r1, [r3, #0]
			CHARGER_TYPE_CAN,						//330 	(STM32 Microcontroller <-UART-> TinyBMS <-CAN-> ELCON CAN-enabled Charger)
			CHARGER_DETECTION_INTERNAL,				//335
			CHARGER_SWITCH_TYPE_CHARGEFET			//333
	};
	while(TinyBMS_UART_WriteRegIndividual(&huart2, 3, addr6, data6) != CMD_SUCCESS);
 8008554:	bf00      	nop
 8008556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800855a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800855e:	2103      	movs	r1, #3
 8008560:	4863      	ldr	r0, [pc, #396]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 8008562:	f7f9 fb29 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f4      	bne.n	8008556 <TinyBMS_Init_UART+0x1f6>
	printf("Step 6. Charger Parameters\r\n");
 800856c:	4871      	ldr	r0, [pc, #452]	; (8008734 <TinyBMS_Init_UART+0x3d4>)
 800856e:	f005 fddd 	bl	800e12c <puts>

	/*************** Step 7. Peripheral Safety Critical Events ***************/
	uint16_t addr7[] = {
 8008572:	4a71      	ldr	r2, [pc, #452]	; (8008738 <TinyBMS_Init_UART+0x3d8>)
 8008574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008578:	ca07      	ldmia	r2, {r0, r1, r2}
 800857a:	c303      	stmia	r3!, {r0, r1}
 800857c:	801a      	strh	r2, [r3, #0]
			CHARGE_OVERCURRENT_CUTOFF,				//318
			OVERTEMP_CUTOFF,						//319
			LOWTEMP_CHARGER_CUTOFF,					//320
			AUTOMATIC_RECOVERY						//332
	};
	uint16_t data7[] = {
 800857e:	4a6f      	ldr	r2, [pc, #444]	; (800873c <TinyBMS_Init_UART+0x3dc>)
 8008580:	f107 0318 	add.w	r3, r7, #24
 8008584:	ca07      	ldmia	r2, {r0, r1, r2}
 8008586:	c303      	stmia	r3!, {r0, r1}
 8008588:	801a      	strh	r2, [r3, #0]
			30,										//318
			60,										//319
			1,										//320
			5										//332
	};
	while(TinyBMS_UART_WriteRegIndividual(&huart2, 5, addr7, data7) != CMD_SUCCESS);
 800858a:	bf00      	nop
 800858c:	f107 0318 	add.w	r3, r7, #24
 8008590:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008594:	2105      	movs	r1, #5
 8008596:	4856      	ldr	r0, [pc, #344]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 8008598:	f7f9 fb0e 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1f4      	bne.n	800858c <TinyBMS_Init_UART+0x22c>
	printf("Step 7. Peripheral Safety Critical Events\r\n");
 80085a2:	4867      	ldr	r0, [pc, #412]	; (8008740 <TinyBMS_Init_UART+0x3e0>)
 80085a4:	f005 fdc2 	bl	800e12c <puts>

	/*************** Step 8. Other Parameters ***************/
	uint16_t addr8[] = {
 80085a8:	4a66      	ldr	r2, [pc, #408]	; (8008744 <TinyBMS_Init_UART+0x3e4>)
 80085aa:	f107 030c 	add.w	r3, r7, #12
 80085ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80085b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			SPEED_SENSOR_INPUT,						//336
			TEMPERATURE_SENSOR_TYPE,				//339
			BROADCAST_TIME,							//342
			PROTOCOL								//343
	};
	uint16_t data8[] = {
 80085b4:	4a64      	ldr	r2, [pc, #400]	; (8008748 <TinyBMS_Init_UART+0x3e8>)
 80085b6:	463b      	mov	r3, r7
 80085b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80085ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			SPEED_SENSOR_INPUT_DISABLED,			//314
			TEMP_SENSOR_TYPE_DUAL10KNTC,			//336
			BROADCAST_TIME_DISABLED,				//342
			PROTOCOL_CAV3							//343
	};
	while(TinyBMS_UART_WriteRegIndividual(&huart2, 6, addr8, data8) != CMD_SUCCESS);
 80085be:	bf00      	nop
 80085c0:	463b      	mov	r3, r7
 80085c2:	f107 020c 	add.w	r2, r7, #12
 80085c6:	2106      	movs	r1, #6
 80085c8:	4849      	ldr	r0, [pc, #292]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80085ca:	f7f9 faf5 	bl	8001bb8 <TinyBMS_UART_WriteRegIndividual>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1f5      	bne.n	80085c0 <TinyBMS_Init_UART+0x260>
	printf("Step 8. Other Parameters\r\n");
 80085d4:	485d      	ldr	r0, [pc, #372]	; (800874c <TinyBMS_Init_UART+0x3ec>)
 80085d6:	f005 fda9 	bl	800e12c <puts>

	//Reset BMS
	printf("Resetting TinyBMS..\r\n");
 80085da:	485d      	ldr	r0, [pc, #372]	; (8008750 <TinyBMS_Init_UART+0x3f0>)
 80085dc:	f005 fda6 	bl	800e12c <puts>
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, TINYBMS_RESET_BMS) != CMD_SUCCESS);
 80085e0:	bf00      	nop
 80085e2:	2105      	movs	r1, #5
 80085e4:	4842      	ldr	r0, [pc, #264]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80085e6:	f7fa f83d 	bl	8002664 <TinyBMS_UART_ResetClearEventsStatistics>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1f8      	bne.n	80085e2 <TinyBMS_Init_UART+0x282>

	//Check if BMS was Reset by reading Lifetime Counter
	while(TinyBMS_UART_ReadLifetimeCounter(&huart2) < 5);
 80085f0:	bf00      	nop
 80085f2:	483f      	ldr	r0, [pc, #252]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80085f4:	f7fb f91a 	bl	800382c <TinyBMS_UART_ReadLifetimeCounter>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d9f9      	bls.n	80085f2 <TinyBMS_Init_UART+0x292>

	//Clear Events and Statistics
	printf("Clearing both TinyBMS Events and Statistics..\r\n");
 80085fe:	4855      	ldr	r0, [pc, #340]	; (8008754 <TinyBMS_Init_UART+0x3f4>)
 8008600:	f005 fd94 	bl	800e12c <puts>
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, TINYBMS_CLEAR_EVENTS) != CMD_SUCCESS);
 8008604:	bf00      	nop
 8008606:	2101      	movs	r1, #1
 8008608:	4839      	ldr	r0, [pc, #228]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 800860a:	f7fa f82b 	bl	8002664 <TinyBMS_UART_ResetClearEventsStatistics>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f8      	bne.n	8008606 <TinyBMS_Init_UART+0x2a6>
	while(TinyBMS_UART_ResetClearEventsStatistics(&huart2, TINYBMS_CLEAR_STATS) != CMD_SUCCESS);
 8008614:	bf00      	nop
 8008616:	2102      	movs	r1, #2
 8008618:	4835      	ldr	r0, [pc, #212]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 800861a:	f7fa f823 	bl	8002664 <TinyBMS_UART_ResetClearEventsStatistics>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f8      	bne.n	8008616 <TinyBMS_Init_UART+0x2b6>

	//Read back the Settings Registers
	while(TinyBMS_UART_ReadSettingsValues(&huart2, TINYBMS_SETTINGS_CURRENT, 30) != CMD_SUCCESS);
 8008624:	bf00      	nop
 8008626:	221e      	movs	r2, #30
 8008628:	2104      	movs	r1, #4
 800862a:	4831      	ldr	r0, [pc, #196]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 800862c:	f7fb fd60 	bl	80040f0 <TinyBMS_UART_ReadSettingsValues>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f7      	bne.n	8008626 <TinyBMS_Init_UART+0x2c6>

	//Read Version
	while(TinyBMS_UART_ReadVersion(&huart2) != CMD_SUCCESS);
 8008636:	bf00      	nop
 8008638:	482d      	ldr	r0, [pc, #180]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 800863a:	f7fb fef1 	bl	8004420 <TinyBMS_UART_ReadVersion>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1f9      	bne.n	8008638 <TinyBMS_Init_UART+0x2d8>
	while(TinyBMS_UART_ReadVersionExtended(&huart2) != CMD_SUCCESS);
 8008644:	bf00      	nop
 8008646:	482a      	ldr	r0, [pc, #168]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 8008648:	f7fc f87a 	bl	8004740 <TinyBMS_UART_ReadVersionExtended>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1f9      	bne.n	8008646 <TinyBMS_Init_UART+0x2e6>

	//Get Min/Max Cell Voltage Thresholds
	uint16_t minCellVoltage = TinyBMS_UART_ReadBatteryPackMinCellVoltage(&huart2);
 8008652:	4827      	ldr	r0, [pc, #156]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 8008654:	f7fa fee0 	bl	8003418 <TinyBMS_UART_ReadBatteryPackMinCellVoltage>
 8008658:	4603      	mov	r3, r0
 800865a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	printf("Battery Pack Minimum Cell Voltage: %u (mV)\r\n", minCellVoltage);
 800865e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008662:	4619      	mov	r1, r3
 8008664:	483c      	ldr	r0, [pc, #240]	; (8008758 <TinyBMS_Init_UART+0x3f8>)
 8008666:	f005 fcdb 	bl	800e020 <iprintf>
	uint16_t maxCellVoltage = TinyBMS_UART_ReadBatteryPackMaxCellVoltage(&huart2);
 800866a:	4821      	ldr	r0, [pc, #132]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 800866c:	f7fa fdf4 	bl	8003258 <TinyBMS_UART_ReadBatteryPackMaxCellVoltage>
 8008670:	4603      	mov	r3, r0
 8008672:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	printf("Battery Pack Maximum Cell Voltage: %u (mV)\r\n", maxCellVoltage);
 8008676:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800867a:	4619      	mov	r1, r3
 800867c:	4837      	ldr	r0, [pc, #220]	; (800875c <TinyBMS_Init_UART+0x3fc>)
 800867e:	f005 fccf 	bl	800e020 <iprintf>

	//Verify Pack Voltage and Current
	float packVoltage = TinyBMS_UART_ReadBatteryPackVoltage(&huart2);
 8008682:	481b      	ldr	r0, [pc, #108]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 8008684:	f7fa fbfc 	bl	8002e80 <TinyBMS_UART_ReadBatteryPackVoltage>
 8008688:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 800868c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008690:	f7f7 ff7a 	bl	8000588 <__aeabi_f2d>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4831      	ldr	r0, [pc, #196]	; (8008760 <TinyBMS_Init_UART+0x400>)
 800869a:	f005 fcc1 	bl	800e020 <iprintf>
	float packCurrent = TinyBMS_UART_ReadBatteryPackCurrent(&huart2);
 800869e:	4814      	ldr	r0, [pc, #80]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80086a0:	f7fa fce4 	bl	800306c <TinyBMS_UART_ReadBatteryPackCurrent>
 80086a4:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 80086a8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80086ac:	f7f7 ff6c 	bl	8000588 <__aeabi_f2d>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	482b      	ldr	r0, [pc, #172]	; (8008764 <TinyBMS_Init_UART+0x404>)
 80086b6:	f005 fcb3 	bl	800e020 <iprintf>

	//Check State of Charge
	estSOC = TinyBMS_UART_ReadEstimatedSOCValue(&huart2);
 80086ba:	480d      	ldr	r0, [pc, #52]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80086bc:	f7fb f99c 	bl	80039f8 <TinyBMS_UART_ReadEstimatedSOCValue>
 80086c0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 80086c4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80086c8:	480a      	ldr	r0, [pc, #40]	; (80086f4 <TinyBMS_Init_UART+0x394>)
 80086ca:	f005 fca9 	bl	800e020 <iprintf>

	//Check Temperatures
	while(TinyBMS_UART_ReadDeviceTemperatures(&huart2) != CMD_SUCCESS);
 80086ce:	bf00      	nop
 80086d0:	4807      	ldr	r0, [pc, #28]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80086d2:	f7fb fa77 	bl	8003bc4 <TinyBMS_UART_ReadDeviceTemperatures>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f9      	bne.n	80086d0 <TinyBMS_Init_UART+0x370>

	//Check for any active events
	while(TinyBMS_UART_ReadAllEvents(&huart2) != CMD_SUCCESS);
 80086dc:	bf00      	nop
 80086de:	4804      	ldr	r0, [pc, #16]	; (80086f0 <TinyBMS_Init_UART+0x390>)
 80086e0:	f7fa fa4e 	bl	8002b80 <TinyBMS_UART_ReadAllEvents>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f9      	bne.n	80086de <TinyBMS_Init_UART+0x37e>
 80086ea:	e03d      	b.n	8008768 <TinyBMS_Init_UART+0x408>
 80086ec:	0801342c 	.word	0x0801342c
 80086f0:	20000228 	.word	0x20000228
 80086f4:	080135b4 	.word	0x080135b4
 80086f8:	08013774 	.word	0x08013774
 80086fc:	080139f4 	.word	0x080139f4
 8008700:	08013798 	.word	0x08013798
 8008704:	08013a00 	.word	0x08013a00
 8008708:	08013a04 	.word	0x08013a04
 800870c:	080137c4 	.word	0x080137c4
 8008710:	08013a08 	.word	0x08013a08
 8008714:	08013a10 	.word	0x08013a10
 8008718:	080137ec 	.word	0x080137ec
 800871c:	0801381c 	.word	0x0801381c
 8008720:	20000200 	.word	0x20000200
 8008724:	08013a18 	.word	0x08013a18
 8008728:	08013830 	.word	0x08013830
 800872c:	08013a20 	.word	0x08013a20
 8008730:	08013a28 	.word	0x08013a28
 8008734:	0801384c 	.word	0x0801384c
 8008738:	08013a30 	.word	0x08013a30
 800873c:	08013a3c 	.word	0x08013a3c
 8008740:	08013868 	.word	0x08013868
 8008744:	08013a48 	.word	0x08013a48
 8008748:	08013a54 	.word	0x08013a54
 800874c:	08013894 	.word	0x08013894
 8008750:	080138b0 	.word	0x080138b0
 8008754:	080138c8 	.word	0x080138c8
 8008758:	080138f8 	.word	0x080138f8
 800875c:	08013928 	.word	0x08013928
 8008760:	0801343c 	.word	0x0801343c
 8008764:	08013468 	.word	0x08013468

	//Verify Online Status is TINYBMS_STATUS_IDLE before proceeding
	uint8_t isIdle = FALSE;
 8008768:	2300      	movs	r3, #0
 800876a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	while(!isIdle) {
 800876e:	e046      	b.n	80087fe <TinyBMS_Init_UART+0x49e>
		switch(TinyBMS_UART_ReadOnlineStatus(&huart2)) {
 8008770:	4828      	ldr	r0, [pc, #160]	; (8008814 <TinyBMS_Init_UART+0x4b4>)
 8008772:	f7fa ff31 	bl	80035d8 <TinyBMS_UART_ReadOnlineStatus>
 8008776:	4603      	mov	r3, r0
 8008778:	3b91      	subs	r3, #145	; 0x91
 800877a:	2b0a      	cmp	r3, #10
 800877c:	d83d      	bhi.n	80087fa <TinyBMS_Init_UART+0x49a>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <TinyBMS_Init_UART+0x424>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	080087b1 	.word	0x080087b1
 8008788:	080087b9 	.word	0x080087b9
 800878c:	080087c1 	.word	0x080087c1
 8008790:	080087fb 	.word	0x080087fb
 8008794:	080087fb 	.word	0x080087fb
 8008798:	080087c9 	.word	0x080087c9
 800879c:	080087d1 	.word	0x080087d1
 80087a0:	080087fb 	.word	0x080087fb
 80087a4:	080087fb 	.word	0x080087fb
 80087a8:	080087fb 	.word	0x080087fb
 80087ac:	080087e5 	.word	0x080087e5
		case TINYBMS_STATUS_CHARGING:
			printf("TinyBMS is Charging..\r\n");
 80087b0:	4819      	ldr	r0, [pc, #100]	; (8008818 <TinyBMS_Init_UART+0x4b8>)
 80087b2:	f005 fcbb 	bl	800e12c <puts>
			break;
 80087b6:	e022      	b.n	80087fe <TinyBMS_Init_UART+0x49e>
		case TINYBMS_STATUS_FULLYCHARGED:
			printf("TinyBMS is Fully Charged!\r\n");
 80087b8:	4818      	ldr	r0, [pc, #96]	; (800881c <TinyBMS_Init_UART+0x4bc>)
 80087ba:	f005 fcb7 	bl	800e12c <puts>
			break;
 80087be:	e01e      	b.n	80087fe <TinyBMS_Init_UART+0x49e>
		case TINYBMS_STATUS_DISCHARGING:
			printf("TinyBMS is Discharging..\r\n");
 80087c0:	4817      	ldr	r0, [pc, #92]	; (8008820 <TinyBMS_Init_UART+0x4c0>)
 80087c2:	f005 fcb3 	bl	800e12c <puts>
			break;
 80087c6:	e01a      	b.n	80087fe <TinyBMS_Init_UART+0x49e>
		case TINYBMS_STATUS_REGENERATION:
			printf("TinyBMS is Regenerating..\r\n");
 80087c8:	4816      	ldr	r0, [pc, #88]	; (8008824 <TinyBMS_Init_UART+0x4c4>)
 80087ca:	f005 fcaf 	bl	800e12c <puts>
			break;
 80087ce:	e016      	b.n	80087fe <TinyBMS_Init_UART+0x49e>
		case TINYBMS_STATUS_IDLE:
			printf("TinyBMS is Idle..\r\n");
 80087d0:	4815      	ldr	r0, [pc, #84]	; (8008828 <TinyBMS_Init_UART+0x4c8>)
 80087d2:	f005 fcab 	bl	800e12c <puts>
			isIdle = TRUE;
 80087d6:	2301      	movs	r3, #1
 80087d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			retval = CMD_SUCCESS;
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			break;
 80087e2:	e00c      	b.n	80087fe <TinyBMS_Init_UART+0x49e>
		case TINYBMS_STATUS_FAULT:
			printf("TinyBMS Fault detected..\r\n");
 80087e4:	4811      	ldr	r0, [pc, #68]	; (800882c <TinyBMS_Init_UART+0x4cc>)
 80087e6:	f005 fca1 	bl	800e12c <puts>
			//Check for any active events
			while(TinyBMS_UART_ReadAllEvents(&huart2) != CMD_SUCCESS);
 80087ea:	bf00      	nop
 80087ec:	4809      	ldr	r0, [pc, #36]	; (8008814 <TinyBMS_Init_UART+0x4b4>)
 80087ee:	f7fa f9c7 	bl	8002b80 <TinyBMS_UART_ReadAllEvents>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1f9      	bne.n	80087ec <TinyBMS_Init_UART+0x48c>
			break;
 80087f8:	e001      	b.n	80087fe <TinyBMS_Init_UART+0x49e>
		default:
			Error_Handler();
 80087fa:	f000 fec1 	bl	8009580 <Error_Handler>
	while(!isIdle) {
 80087fe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0b4      	beq.n	8008770 <TinyBMS_Init_UART+0x410>
		}
	}

	return retval;
 8008806:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800880a:	4618      	mov	r0, r3
 800880c:	37a8      	adds	r7, #168	; 0xa8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000228 	.word	0x20000228
 8008818:	08013958 	.word	0x08013958
 800881c:	08013970 	.word	0x08013970
 8008820:	0801398c 	.word	0x0801398c
 8008824:	080139a8 	.word	0x080139a8
 8008828:	080139c4 	.word	0x080139c4
 800882c:	080139d8 	.word	0x080139d8

08008830 <TinyBMS_Init_CAN>:

uint8_t TinyBMS_Init_CAN(void) {
 8008830:	b580      	push	{r7, lr}
 8008832:	b0b6      	sub	sp, #216	; 0xd8
 8008834:	af00      	add	r7, sp, #0
	uint8_t retval = CMD_FAILURE;
 8008836:	23ff      	movs	r3, #255	; 0xff
 8008838:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	int validInput = FALSE;
 800883c:	2300      	movs	r3, #0
 800883e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	int userInput = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	//Fresh start or keep previous settings registers and statistics?
	while(!validInput) {
 8008848:	e037      	b.n	80088ba <TinyBMS_Init_CAN+0x8a>
		printf("Clear TinyBMS data and reload settings registers? (Fresh Start)\r\n");
 800884a:	4813      	ldr	r0, [pc, #76]	; (8008898 <TinyBMS_Init_CAN+0x68>)
 800884c:	f005 fc6e 	bl	800e12c <puts>
		printf("0: No   1: Yes\r\n");
 8008850:	4812      	ldr	r0, [pc, #72]	; (800889c <TinyBMS_Init_CAN+0x6c>)
 8008852:	f005 fc6b 	bl	800e12c <puts>
		userInput = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		scanf("%d", &userInput);
 800885c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008860:	4619      	mov	r1, r3
 8008862:	480f      	ldr	r0, [pc, #60]	; (80088a0 <TinyBMS_Init_CAN+0x70>)
 8008864:	f005 fc6a 	bl	800e13c <iscanf>

		switch(userInput) {
 8008868:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <TinyBMS_Init_CAN+0x46>
 8008870:	2b01      	cmp	r3, #1
 8008872:	d009      	beq.n	8008888 <TinyBMS_Init_CAN+0x58>
 8008874:	e01a      	b.n	80088ac <TinyBMS_Init_CAN+0x7c>
		case NO:
			validInput = TRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			printf("Keeping previous settings and data..\r\n");
 800887c:	4809      	ldr	r0, [pc, #36]	; (80088a4 <TinyBMS_Init_CAN+0x74>)
 800887e:	f005 fc55 	bl	800e12c <puts>
			return retval;
 8008882:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008886:	e2d2      	b.n	8008e2e <TinyBMS_Init_CAN+0x5fe>
		case YES:
			validInput = TRUE;
 8008888:	2301      	movs	r3, #1
 800888a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			printf("Fresh Start!\r\n");
 800888e:	4806      	ldr	r0, [pc, #24]	; (80088a8 <TinyBMS_Init_CAN+0x78>)
 8008890:	f005 fc4c 	bl	800e12c <puts>
			break;
 8008894:	e011      	b.n	80088ba <TinyBMS_Init_CAN+0x8a>
 8008896:	bf00      	nop
 8008898:	080136e8 	.word	0x080136e8
 800889c:	0801372c 	.word	0x0801372c
 80088a0:	08013380 	.word	0x08013380
 80088a4:	0801373c 	.word	0x0801373c
 80088a8:	08013764 	.word	0x08013764
		default:
			validInput = FALSE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			printf("Invalid input.\r\n");
 80088b2:	48c9      	ldr	r0, [pc, #804]	; (8008bd8 <TinyBMS_Init_CAN+0x3a8>)
 80088b4:	f005 fc3a 	bl	800e12c <puts>
			break;
 80088b8:	bf00      	nop
	while(!validInput) {
 80088ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0c3      	beq.n	800884a <TinyBMS_Init_CAN+0x1a>
		}
	}

	//Get initial State of Charge
	uint32_t estSOC = TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 80088c2:	48c6      	ldr	r0, [pc, #792]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 80088c4:	f7fd fb46 	bl	8005f54 <TinyBMS_CAN_ReadEstimatedSOCValue>
 80088c8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 80088cc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80088d0:	48c3      	ldr	r0, [pc, #780]	; (8008be0 <TinyBMS_Init_CAN+0x3b0>)
 80088d2:	f005 fba5 	bl	800e020 <iprintf>

	printf("Initializing TinyBMS settings..\r\n");
 80088d6:	48c3      	ldr	r0, [pc, #780]	; (8008be4 <TinyBMS_Init_CAN+0x3b4>)
 80088d8:	f005 fc28 	bl	800e12c <puts>

	//CAN API only supports writing registers in blocks, rather than individually

	/************ Step 1. Battery Parameters and Balancing *************/
											//Register#:
	uint16_t addr1[] = {
 80088dc:	f240 132f 	movw	r3, #303	; 0x12f
 80088e0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
			EARLY_BALANCING_THRESHOLD		//303
	};
	uint16_t data1[] = {
 80088e4:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80088e8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			3200							//303
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr1[0], data1) != CMD_SUCCESS);
 80088ec:	bf00      	nop
 80088ee:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80088f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80088f6:	2101      	movs	r1, #1
 80088f8:	48b8      	ldr	r0, [pc, #736]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 80088fa:	f7fc fbf9 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1f4      	bne.n	80088ee <TinyBMS_Init_CAN+0xbe>

	uint16_t addr2[] = {
 8008904:	4ab8      	ldr	r2, [pc, #736]	; (8008be8 <TinyBMS_Init_CAN+0x3b8>)
 8008906:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800890a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800890e:	6018      	str	r0, [r3, #0]
 8008910:	3304      	adds	r3, #4
 8008912:	8019      	strh	r1, [r3, #0]
			BATTERY_CAPACITY,				//306
			NUMBER_OF_SERIES_CELLS,			//307
			ALLOWED_DISBALANCE				//308
	};
	uint16_t data2[] = {
 8008914:	4ab5      	ldr	r2, [pc, #724]	; (8008bec <TinyBMS_Init_CAN+0x3bc>)
 8008916:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800891a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800891e:	6018      	str	r0, [r3, #0]
 8008920:	3304      	adds	r3, #4
 8008922:	8019      	strh	r1, [r3, #0]
			5000,							//306
			7,								//307
			15								//308
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 3, addr2[0], data2) != CMD_SUCCESS);
 8008924:	bf00      	nop
 8008926:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800892a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800892e:	2103      	movs	r1, #3
 8008930:	48aa      	ldr	r0, [pc, #680]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008932:	f7fc fbdd 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f4      	bne.n	8008926 <TinyBMS_Init_CAN+0xf6>

	uint16_t addr3[] = {
 800893c:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8008940:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			STATE_OF_CHARGE_SETMANUAL		//328
	};
	uint16_t data3[] = {
 8008944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008948:	b29b      	uxth	r3, r3
 800894a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
			estSOC							//328
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr3[0], data3) != CMD_SUCCESS);
 800894e:	bf00      	nop
 8008950:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8008954:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008958:	2101      	movs	r1, #1
 800895a:	48a0      	ldr	r0, [pc, #640]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 800895c:	f7fc fbc8 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f4      	bne.n	8008950 <TinyBMS_Init_CAN+0x120>
	printf("Step 1. Battery Parameters and Balancing\r\n");
 8008966:	48a2      	ldr	r0, [pc, #648]	; (8008bf0 <TinyBMS_Init_CAN+0x3c0>)
 8008968:	f005 fbe0 	bl	800e12c <puts>

	/************* Step 2. Battery Safety Critical Events *************/
	uint16_t addr4[] = {
 800896c:	4ba1      	ldr	r3, [pc, #644]	; (8008bf4 <TinyBMS_Init_CAN+0x3c4>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			OVERVOLTAGE_CUTOFF,				//315
			UNDERVOLTAGE_CUTOFF				//316
	};
	uint16_t data4[] = {
 8008974:	4ba0      	ldr	r3, [pc, #640]	; (8008bf8 <TinyBMS_Init_CAN+0x3c8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			4200,							//315
			2900							//316
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 2, addr4[0], data4) != CMD_SUCCESS);
 800897c:	bf00      	nop
 800897e:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8008982:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008986:	2102      	movs	r1, #2
 8008988:	4894      	ldr	r0, [pc, #592]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 800898a:	f7fc fbb1 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1f4      	bne.n	800897e <TinyBMS_Init_CAN+0x14e>
	printf("Step 2. Battery Safety Critical Events\r\n");
 8008994:	4899      	ldr	r0, [pc, #612]	; (8008bfc <TinyBMS_Init_CAN+0x3cc>)
 8008996:	f005 fbc9 	bl	800e12c <puts>

	/************* Step 3. Charging/Discharging Characteristics *************/
	uint16_t addr5[] = {
 800899a:	4b99      	ldr	r3, [pc, #612]	; (8008c00 <TinyBMS_Init_CAN+0x3d0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			FULLYCHARGED_VOLTAGE,			//300
			FULLYDISCHARGED_VOLTAGE			//301
	};
	uint16_t data5[] = {
 80089a2:	4b98      	ldr	r3, [pc, #608]	; (8008c04 <TinyBMS_Init_CAN+0x3d4>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			4000,							//300
			3000							//301
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 2, addr5[0], data5) != CMD_SUCCESS);
 80089aa:	bf00      	nop
 80089ac:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80089b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80089b4:	2102      	movs	r1, #2
 80089b6:	4889      	ldr	r0, [pc, #548]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 80089b8:	f7fc fb9a 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f4      	bne.n	80089ac <TinyBMS_Init_CAN+0x17c>

	uint16_t addr6[] = {
 80089c2:	f44f 7398 	mov.w	r3, #304	; 0x130
 80089c6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			CHARGE_FINISHED_CURRENT			//304
	};
	uint16_t data6[] = {
 80089ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089ce:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			1000							//304
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr6[0], data6) != CMD_SUCCESS);
 80089d2:	bf00      	nop
 80089d4:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80089d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80089dc:	2101      	movs	r1, #1
 80089de:	487f      	ldr	r0, [pc, #508]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 80089e0:	f7fc fb86 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1f4      	bne.n	80089d4 <TinyBMS_Init_CAN+0x1a4>
	printf("Step 3. Charging/Discharging Characteristics\r\n");
 80089ea:	4887      	ldr	r0, [pc, #540]	; (8008c08 <TinyBMS_Init_CAN+0x3d8>)
 80089ec:	f005 fb9e 	bl	800e12c <puts>

	/* Low Power (up to 60A discharge and 30A charge sustained) Configurations */
	/************** Step 4. BMS Mode **************/
	uint16_t addr7[] = {
 80089f0:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80089f4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			BMS_OPERATION_MODE				//340
	};
	uint16_t data7[] = {
 80089f8:	2300      	movs	r3, #0
 80089fa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			OPMODE_DUALPORT					//340
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr7[0], data7) != CMD_SUCCESS);
 80089fe:	bf00      	nop
 8008a00:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8008a04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008a08:	2101      	movs	r1, #1
 8008a0a:	4874      	ldr	r0, [pc, #464]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008a0c:	f7fc fb70 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f4      	bne.n	8008a00 <TinyBMS_Init_CAN+0x1d0>
	printf("Step 4. BMS Mode\r\n");
 8008a16:	487d      	ldr	r0, [pc, #500]	; (8008c0c <TinyBMS_Init_CAN+0x3dc>)
 8008a18:	f005 fb88 	bl	800e12c <puts>
	//BMS should restart itself and reconnect after setting BMS Operation Mode

	//Check if BMS was Reset by reading Lifetime Counter
	while(TinyBMS_CAN_ReadLifetimeCounter(&hcan1) < 5);
 8008a1c:	bf00      	nop
 8008a1e:	486f      	ldr	r0, [pc, #444]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008a20:	f7fd f9f6 	bl	8005e10 <TinyBMS_CAN_ReadLifetimeCounter>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	d9f9      	bls.n	8008a1e <TinyBMS_Init_CAN+0x1ee>

	/************** Step 5. Load Parameters **************/
	uint16_t addr8[] = {
 8008a2a:	f240 134b 	movw	r3, #331	; 0x14b
 8008a2e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
			LOAD_SWITCH_TYPE				//331
	};
	uint16_t data8[] = {
 8008a32:	2300      	movs	r3, #0
 8008a34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			LOAD_SWITCH_TYPE_FET			//331
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr8[0], data8) != CMD_SUCCESS);
 8008a38:	bf00      	nop
 8008a3a:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8008a3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008a42:	2101      	movs	r1, #1
 8008a44:	4865      	ldr	r0, [pc, #404]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008a46:	f7fc fb53 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1f4      	bne.n	8008a3a <TinyBMS_Init_CAN+0x20a>

	uint16_t addr9[] = {
 8008a50:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8008a54:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			IGNITION						//334
	};
	uint16_t data9[] = {
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			IGNITION_DISABLED				//334
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr9[0], data9) != CMD_SUCCESS);
 8008a5e:	bf00      	nop
 8008a60:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8008a64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008a68:	2101      	movs	r1, #1
 8008a6a:	485c      	ldr	r0, [pc, #368]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008a6c:	f7fc fb40 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1f4      	bne.n	8008a60 <TinyBMS_Init_CAN+0x230>

	uint16_t addr10[] = {
 8008a76:	4b66      	ldr	r3, [pc, #408]	; (8008c10 <TinyBMS_Init_CAN+0x3e0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	663b      	str	r3, [r7, #96]	; 0x60
			PRECHARGE_PIN,					//337
			PRECHARGE_DURATION				//338
	};
	uint16_t data10[] = {
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008a82:	2300      	movs	r3, #0
 8008a84:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			PRECHARGE_PIN_DISABLED,			//337
			PRECHARGE_DURATION_100MS		//338
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 2, addr10[0], data10) != CMD_SUCCESS);
 8008a88:	bf00      	nop
 8008a8a:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8008a8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008a92:	2102      	movs	r1, #2
 8008a94:	4851      	ldr	r0, [pc, #324]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008a96:	f7fc fb2b 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1f4      	bne.n	8008a8a <TinyBMS_Init_CAN+0x25a>
	printf("Step 5. Load Parameters\r\n");
 8008aa0:	485c      	ldr	r0, [pc, #368]	; (8008c14 <TinyBMS_Init_CAN+0x3e4>)
 8008aa2:	f005 fb43 	bl	800e12c <puts>

	/************** Step 6. Charger Parameters **************/
	uint16_t addr11[] = {
 8008aa6:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8008aaa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			CHARGER_TYPE					//330
	};
	uint16_t data11[] = {
 8008aae:	2302      	movs	r3, #2
 8008ab0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			CHARGER_TYPE_CAN,				//330	(STM32 Microcontroller <-UART-> TinyBMS <-CAN-> ELCON CAN-enabled Charger)
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr11[0], data11) != CMD_SUCCESS);
 8008ab4:	bf00      	nop
 8008ab6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8008aba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4846      	ldr	r0, [pc, #280]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008ac2:	f7fc fb15 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1f4      	bne.n	8008ab6 <TinyBMS_Init_CAN+0x286>

	uint16_t addr12[] = {
 8008acc:	f240 134d 	movw	r3, #333	; 0x14d
 8008ad0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			CHARGER_SWITCH_TYPE				//333
	};
	uint16_t data12[] = {
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			CHARGER_DETECTION_INTERNAL,		//333
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr12[0], data12) != CMD_SUCCESS);
 8008ada:	bf00      	nop
 8008adc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8008ae0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	483d      	ldr	r0, [pc, #244]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008ae8:	f7fc fb02 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f4      	bne.n	8008adc <TinyBMS_Init_CAN+0x2ac>

	uint16_t addr13[] = {
 8008af2:	f240 134f 	movw	r3, #335	; 0x14f
 8008af6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			CHARGER_DETECTION				//335
	};
	uint16_t data13[] = {
 8008afa:	2301      	movs	r3, #1
 8008afc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			CHARGER_SWITCH_TYPE_CHARGEFET	//335
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr13[0], data13) != CMD_SUCCESS);
 8008b00:	bf00      	nop
 8008b02:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008b06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	4833      	ldr	r0, [pc, #204]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008b0e:	f7fc faef 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1f4      	bne.n	8008b02 <TinyBMS_Init_CAN+0x2d2>
	printf("Step 6. Charger Parameters\r\n");
 8008b18:	483f      	ldr	r0, [pc, #252]	; (8008c18 <TinyBMS_Init_CAN+0x3e8>)
 8008b1a:	f005 fb07 	bl	800e12c <puts>

	/************** Step 7. Peripheral Safety Critical Events **************/
	uint16_t addr14[] = {
 8008b1e:	4a3f      	ldr	r2, [pc, #252]	; (8008c1c <TinyBMS_Init_CAN+0x3ec>)
 8008b20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b28:	e883 0003 	stmia.w	r3, {r0, r1}
			DISCHARGE_OVERCURRENT_CUTOFF,	//317
			CHARGE_OVERCURRENT_CUTOFF,		//318
			OVERTEMP_CUTOFF,				//319
			LOWTEMP_CHARGER_CUTOFF			//320
	};
	uint16_t data14[] = {
 8008b2c:	4a3c      	ldr	r2, [pc, #240]	; (8008c20 <TinyBMS_Init_CAN+0x3f0>)
 8008b2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b36:	e883 0003 	stmia.w	r3, {r0, r1}
			60,								//317
			30,								//318
			60,								//319
			1								//320
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 4, addr14[0], data14) != CMD_SUCCESS);
 8008b3a:	bf00      	nop
 8008b3c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b42:	2104      	movs	r1, #4
 8008b44:	4825      	ldr	r0, [pc, #148]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008b46:	f7fc fad3 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f5      	bne.n	8008b3c <TinyBMS_Init_CAN+0x30c>

	uint16_t addr15[] = {
 8008b50:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 8008b54:	863b      	strh	r3, [r7, #48]	; 0x30
			AUTOMATIC_RECOVERY				//332
	};
	uint16_t data15[] = {
 8008b56:	2305      	movs	r3, #5
 8008b58:	85bb      	strh	r3, [r7, #44]	; 0x2c
			5								//332
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr15[0], data15) != CMD_SUCCESS);
 8008b5a:	bf00      	nop
 8008b5c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b62:	2101      	movs	r1, #1
 8008b64:	481d      	ldr	r0, [pc, #116]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008b66:	f7fc fac3 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1f5      	bne.n	8008b5c <TinyBMS_Init_CAN+0x32c>
	printf("Step 7. Peripheral Safety Critical Events\r\n");
 8008b70:	482c      	ldr	r0, [pc, #176]	; (8008c24 <TinyBMS_Init_CAN+0x3f4>)
 8008b72:	f005 fadb 	bl	800e12c <puts>

	/************** Step 8. Other Parameters **************/
	uint16_t addr16[] = {
 8008b76:	f44f 739c 	mov.w	r3, #312	; 0x138
 8008b7a:	853b      	strh	r3, [r7, #40]	; 0x28
			PULSES_PER_UNIT,				//312
	};
	uint16_t data16[] = {
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	84bb      	strh	r3, [r7, #36]	; 0x24
			1								//312
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr16[0], data16) != CMD_SUCCESS);
 8008b80:	bf00      	nop
 8008b82:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b88:	2101      	movs	r1, #1
 8008b8a:	4814      	ldr	r0, [pc, #80]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008b8c:	f7fc fab0 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1f5      	bne.n	8008b82 <TinyBMS_Init_CAN+0x352>

	uint16_t addr17[] = {
 8008b96:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8008b9a:	843b      	strh	r3, [r7, #32]
			DISTANCE_UNIT_NAME,				//314
	};
	uint16_t data17[] = {
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	83bb      	strh	r3, [r7, #28]
			UNIT_KILOMETER					//314
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr17[0], data17) != CMD_SUCCESS);
 8008ba0:	bf00      	nop
 8008ba2:	8c3a      	ldrh	r2, [r7, #32]
 8008ba4:	f107 031c 	add.w	r3, r7, #28
 8008ba8:	2101      	movs	r1, #1
 8008baa:	480c      	ldr	r0, [pc, #48]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008bac:	f7fc faa0 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f5      	bne.n	8008ba2 <TinyBMS_Init_CAN+0x372>

	uint16_t addr18[] = {
 8008bb6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008bba:	833b      	strh	r3, [r7, #24]
			SPEED_SENSOR_INPUT,				//336
	};
	uint16_t data18[] = {
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	82bb      	strh	r3, [r7, #20]
			SPEED_SENSOR_INPUT_DISABLED		//336
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr18[0], data18) != CMD_SUCCESS);
 8008bc0:	bf00      	nop
 8008bc2:	8b3a      	ldrh	r2, [r7, #24]
 8008bc4:	f107 0314 	add.w	r3, r7, #20
 8008bc8:	2101      	movs	r1, #1
 8008bca:	4804      	ldr	r0, [pc, #16]	; (8008bdc <TinyBMS_Init_CAN+0x3ac>)
 8008bcc:	f7fc fa90 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1f5      	bne.n	8008bc2 <TinyBMS_Init_CAN+0x392>
 8008bd6:	e027      	b.n	8008c28 <TinyBMS_Init_CAN+0x3f8>
 8008bd8:	0801342c 	.word	0x0801342c
 8008bdc:	20000200 	.word	0x20000200
 8008be0:	080135b4 	.word	0x080135b4
 8008be4:	08013774 	.word	0x08013774
 8008be8:	08013a78 	.word	0x08013a78
 8008bec:	08013a80 	.word	0x08013a80
 8008bf0:	08013798 	.word	0x08013798
 8008bf4:	08013a00 	.word	0x08013a00
 8008bf8:	08013a04 	.word	0x08013a04
 8008bfc:	080137c4 	.word	0x080137c4
 8008c00:	08013a88 	.word	0x08013a88
 8008c04:	08013a8c 	.word	0x08013a8c
 8008c08:	080137ec 	.word	0x080137ec
 8008c0c:	0801381c 	.word	0x0801381c
 8008c10:	08013a90 	.word	0x08013a90
 8008c14:	08013830 	.word	0x08013830
 8008c18:	0801384c 	.word	0x0801384c
 8008c1c:	08013a94 	.word	0x08013a94
 8008c20:	08013a9c 	.word	0x08013a9c
 8008c24:	08013868 	.word	0x08013868

	uint16_t addr19[] = {
 8008c28:	f240 1353 	movw	r3, #339	; 0x153
 8008c2c:	823b      	strh	r3, [r7, #16]
			TEMPERATURE_SENSOR_TYPE,		//339
	};
	uint16_t data19[] = {
 8008c2e:	2300      	movs	r3, #0
 8008c30:	81bb      	strh	r3, [r7, #12]
			TEMP_SENSOR_TYPE_DUAL10KNTC		//339
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 1, addr19[0], data19) != CMD_SUCCESS);
 8008c32:	bf00      	nop
 8008c34:	8a3a      	ldrh	r2, [r7, #16]
 8008c36:	f107 030c 	add.w	r3, r7, #12
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	487e      	ldr	r0, [pc, #504]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008c3e:	f7fc fa57 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1f5      	bne.n	8008c34 <TinyBMS_Init_CAN+0x404>

	uint16_t addr20[] = {
 8008c48:	4b7c      	ldr	r3, [pc, #496]	; (8008e3c <TinyBMS_Init_CAN+0x60c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60bb      	str	r3, [r7, #8]
			BROADCAST_TIME,					//342
			PROTOCOL						//343
	};
	uint16_t data20[] = {
 8008c4e:	2300      	movs	r3, #0
 8008c50:	80bb      	strh	r3, [r7, #4]
 8008c52:	2300      	movs	r3, #0
 8008c54:	80fb      	strh	r3, [r7, #6]
			BROADCAST_TIME_DISABLED,		//342
			PROTOCOL_CAV3					//343
	};
	while(TinyBMS_CAN_WriteRegBlock(&hcan1, 2, addr20[0], data20) != CMD_SUCCESS);
 8008c56:	bf00      	nop
 8008c58:	893a      	ldrh	r2, [r7, #8]
 8008c5a:	1d3b      	adds	r3, r7, #4
 8008c5c:	2102      	movs	r1, #2
 8008c5e:	4876      	ldr	r0, [pc, #472]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008c60:	f7fc fa46 	bl	80050f0 <TinyBMS_CAN_WriteRegBlock>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f6      	bne.n	8008c58 <TinyBMS_Init_CAN+0x428>
	printf("Step 8. Other Parameters\r\n");
 8008c6a:	4875      	ldr	r0, [pc, #468]	; (8008e40 <TinyBMS_Init_CAN+0x610>)
 8008c6c:	f005 fa5e 	bl	800e12c <puts>

	//Reset BMS
	printf("Resetting TinyBMS..\r\n");
 8008c70:	4874      	ldr	r0, [pc, #464]	; (8008e44 <TinyBMS_Init_CAN+0x614>)
 8008c72:	f005 fa5b 	bl	800e12c <puts>
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_RESET_BMS) != CMD_SUCCESS);
 8008c76:	bf00      	nop
 8008c78:	2105      	movs	r1, #5
 8008c7a:	486f      	ldr	r0, [pc, #444]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008c7c:	f7fc f87a 	bl	8004d74 <TinyBMS_CAN_ResetClearEventsStatistics>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f8      	bne.n	8008c78 <TinyBMS_Init_CAN+0x448>

	//Check if BMS was Reset by reading Lifetime Counter
	while(TinyBMS_CAN_ReadLifetimeCounter(&hcan1) < 5);
 8008c86:	bf00      	nop
 8008c88:	486b      	ldr	r0, [pc, #428]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008c8a:	f7fd f8c1 	bl	8005e10 <TinyBMS_CAN_ReadLifetimeCounter>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d9f9      	bls.n	8008c88 <TinyBMS_Init_CAN+0x458>

	//Clear Events and Statistics
	printf("Clearing both TinyBMS Events and Statistics..\r\n");
 8008c94:	486c      	ldr	r0, [pc, #432]	; (8008e48 <TinyBMS_Init_CAN+0x618>)
 8008c96:	f005 fa49 	bl	800e12c <puts>
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_EVENTS) != CMD_SUCCESS);
 8008c9a:	bf00      	nop
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4866      	ldr	r0, [pc, #408]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008ca0:	f7fc f868 	bl	8004d74 <TinyBMS_CAN_ResetClearEventsStatistics>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1f8      	bne.n	8008c9c <TinyBMS_Init_CAN+0x46c>
	while(TinyBMS_CAN_ResetClearEventsStatistics(&hcan1, TINYBMS_CLEAR_STATS) != CMD_SUCCESS);
 8008caa:	bf00      	nop
 8008cac:	2102      	movs	r1, #2
 8008cae:	4862      	ldr	r0, [pc, #392]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008cb0:	f7fc f860 	bl	8004d74 <TinyBMS_CAN_ResetClearEventsStatistics>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f8      	bne.n	8008cac <TinyBMS_Init_CAN+0x47c>

	//Read back the settings
	while(TinyBMS_CAN_ReadSettingsValues(&hcan1, TINYBMS_SETTINGS_CURRENT, 30) != CMD_SUCCESS);
 8008cba:	bf00      	nop
 8008cbc:	221e      	movs	r2, #30
 8008cbe:	2104      	movs	r1, #4
 8008cc0:	485d      	ldr	r0, [pc, #372]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008cc2:	f7fd fbb5 	bl	8006430 <TinyBMS_CAN_ReadSettingsValues>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1f7      	bne.n	8008cbc <TinyBMS_Init_CAN+0x48c>

	//Read Version
	while(TinyBMS_CAN_ReadVersion(&hcan1) != CMD_SUCCESS);
 8008ccc:	bf00      	nop
 8008cce:	485a      	ldr	r0, [pc, #360]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008cd0:	f7fd fcbe 	bl	8006650 <TinyBMS_CAN_ReadVersion>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f9      	bne.n	8008cce <TinyBMS_Init_CAN+0x49e>

	//Read CAN NodeID and update to it if required
	uint8_t nodeID = TinyBMS_CAN_ReadNodeID(&hcan1);
 8008cda:	4857      	ldr	r0, [pc, #348]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008cdc:	f7fd ff10 	bl	8006b00 <TinyBMS_CAN_ReadNodeID>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	printf("CAN NodeID: 0x%02X\r\n", nodeID);
 8008ce6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8008cea:	4619      	mov	r1, r3
 8008cec:	4857      	ldr	r0, [pc, #348]	; (8008e4c <TinyBMS_Init_CAN+0x61c>)
 8008cee:	f005 f997 	bl	800e020 <iprintf>

	//Get Min/Max Cell Voltage Thresholds
	uint16_t minCellVoltage = TinyBMS_CAN_ReadBatteryPackMinCellVoltage(&hcan1);
 8008cf2:	4851      	ldr	r0, [pc, #324]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008cf4:	f7fc ff00 	bl	8005af8 <TinyBMS_CAN_ReadBatteryPackMinCellVoltage>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	printf("Battery Pack Minimum Cell Voltage: %u (mV)\r\n", minCellVoltage);
 8008cfe:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4852      	ldr	r0, [pc, #328]	; (8008e50 <TinyBMS_Init_CAN+0x620>)
 8008d06:	f005 f98b 	bl	800e020 <iprintf>
	uint16_t maxCellVoltage = TinyBMS_CAN_ReadBatteryPackMaxCellVoltage(&hcan1);
 8008d0a:	484b      	ldr	r0, [pc, #300]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008d0c:	f7fc fe56 	bl	80059bc <TinyBMS_CAN_ReadBatteryPackMaxCellVoltage>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	printf("Battery Pack Maximum Cell Voltage: %u (mV)\r\n", maxCellVoltage);
 8008d16:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	484d      	ldr	r0, [pc, #308]	; (8008e54 <TinyBMS_Init_CAN+0x624>)
 8008d1e:	f005 f97f 	bl	800e020 <iprintf>

	//Verify Pack Voltage and Current
	float packVoltage = TinyBMS_CAN_ReadBatteryPackVoltage(&hcan1);
 8008d22:	4845      	ldr	r0, [pc, #276]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008d24:	f7fc fcea 	bl	80056fc <TinyBMS_CAN_ReadBatteryPackVoltage>
 8008d28:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
	printf("Secondary Battery Pack Voltage: %f (V)\r\n", packVoltage);
 8008d2c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8008d30:	f7f7 fc2a 	bl	8000588 <__aeabi_f2d>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4847      	ldr	r0, [pc, #284]	; (8008e58 <TinyBMS_Init_CAN+0x628>)
 8008d3a:	f005 f971 	bl	800e020 <iprintf>
	float packCurrent = TinyBMS_CAN_ReadBatteryPackCurrent(&hcan1);
 8008d3e:	483e      	ldr	r0, [pc, #248]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008d40:	f7fc fd8c 	bl	800585c <TinyBMS_CAN_ReadBatteryPackCurrent>
 8008d44:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
	printf("Secondary Battery Pack Current: %f (A)\r\n", packCurrent);
 8008d48:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8008d4c:	f7f7 fc1c 	bl	8000588 <__aeabi_f2d>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4841      	ldr	r0, [pc, #260]	; (8008e5c <TinyBMS_Init_CAN+0x62c>)
 8008d56:	f005 f963 	bl	800e020 <iprintf>

	//Check State of Charge
	estSOC = TinyBMS_CAN_ReadEstimatedSOCValue(&hcan1);
 8008d5a:	4837      	ldr	r0, [pc, #220]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008d5c:	f7fd f8fa 	bl	8005f54 <TinyBMS_CAN_ReadEstimatedSOCValue>
 8008d60:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	printf("TinyBMS Estimated StateOfCharge: %lu (0.000 001 %% Resolution)\r\n", estSOC);
 8008d64:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008d68:	483d      	ldr	r0, [pc, #244]	; (8008e60 <TinyBMS_Init_CAN+0x630>)
 8008d6a:	f005 f959 	bl	800e020 <iprintf>

	//Check Temperatures
	while(TinyBMS_CAN_ReadDeviceTemperatures(&hcan1) != CMD_SUCCESS);
 8008d6e:	bf00      	nop
 8008d70:	4831      	ldr	r0, [pc, #196]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008d72:	f7fd f991 	bl	8006098 <TinyBMS_CAN_ReadDeviceTemperatures>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1f9      	bne.n	8008d70 <TinyBMS_Init_CAN+0x540>

	//Check for any active events
	while(TinyBMS_CAN_ReadAllEvents(&hcan1) != CMD_SUCCESS);
 8008d7c:	bf00      	nop
 8008d7e:	482e      	ldr	r0, [pc, #184]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008d80:	f7fc fbc0 	bl	8005504 <TinyBMS_CAN_ReadAllEvents>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f9      	bne.n	8008d7e <TinyBMS_Init_CAN+0x54e>

	//Verify Online Status is TINYBMS_STATUS_IDLE before proceeding
	uint8_t isIdle = FALSE;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	while(!isIdle) {
 8008d90:	e047      	b.n	8008e22 <TinyBMS_Init_CAN+0x5f2>
		switch(TinyBMS_CAN_ReadOnlineStatus(&hcan1)) {
 8008d92:	4829      	ldr	r0, [pc, #164]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008d94:	f7fc ff4e 	bl	8005c34 <TinyBMS_CAN_ReadOnlineStatus>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	3b91      	subs	r3, #145	; 0x91
 8008d9c:	2b0a      	cmp	r3, #10
 8008d9e:	d83e      	bhi.n	8008e1e <TinyBMS_Init_CAN+0x5ee>
 8008da0:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <TinyBMS_Init_CAN+0x578>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008dd5 	.word	0x08008dd5
 8008dac:	08008ddd 	.word	0x08008ddd
 8008db0:	08008de5 	.word	0x08008de5
 8008db4:	08008e1f 	.word	0x08008e1f
 8008db8:	08008e1f 	.word	0x08008e1f
 8008dbc:	08008ded 	.word	0x08008ded
 8008dc0:	08008df5 	.word	0x08008df5
 8008dc4:	08008e1f 	.word	0x08008e1f
 8008dc8:	08008e1f 	.word	0x08008e1f
 8008dcc:	08008e1f 	.word	0x08008e1f
 8008dd0:	08008e09 	.word	0x08008e09
		case TINYBMS_STATUS_CHARGING:
			printf("TinyBMS is Charging..\r\n");
 8008dd4:	4823      	ldr	r0, [pc, #140]	; (8008e64 <TinyBMS_Init_CAN+0x634>)
 8008dd6:	f005 f9a9 	bl	800e12c <puts>
			break;
 8008dda:	e022      	b.n	8008e22 <TinyBMS_Init_CAN+0x5f2>
		case TINYBMS_STATUS_FULLYCHARGED:
			printf("TinyBMS is Fully Charged!\r\n");
 8008ddc:	4822      	ldr	r0, [pc, #136]	; (8008e68 <TinyBMS_Init_CAN+0x638>)
 8008dde:	f005 f9a5 	bl	800e12c <puts>
			break;
 8008de2:	e01e      	b.n	8008e22 <TinyBMS_Init_CAN+0x5f2>
		case TINYBMS_STATUS_DISCHARGING:
			printf("TinyBMS is Discharging..\r\n");
 8008de4:	4821      	ldr	r0, [pc, #132]	; (8008e6c <TinyBMS_Init_CAN+0x63c>)
 8008de6:	f005 f9a1 	bl	800e12c <puts>
			break;
 8008dea:	e01a      	b.n	8008e22 <TinyBMS_Init_CAN+0x5f2>
		case TINYBMS_STATUS_REGENERATION:
			printf("TinyBMS is Regenerating..\r\n");
 8008dec:	4820      	ldr	r0, [pc, #128]	; (8008e70 <TinyBMS_Init_CAN+0x640>)
 8008dee:	f005 f99d 	bl	800e12c <puts>
			break;
 8008df2:	e016      	b.n	8008e22 <TinyBMS_Init_CAN+0x5f2>
		case TINYBMS_STATUS_IDLE:
			printf("TinyBMS is Idle..\r\n");
 8008df4:	481f      	ldr	r0, [pc, #124]	; (8008e74 <TinyBMS_Init_CAN+0x644>)
 8008df6:	f005 f999 	bl	800e12c <puts>
			isIdle = TRUE;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			retval = CMD_SUCCESS;
 8008e00:	2300      	movs	r3, #0
 8008e02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			break;
 8008e06:	e00c      	b.n	8008e22 <TinyBMS_Init_CAN+0x5f2>
		case TINYBMS_STATUS_FAULT:
			printf("TinyBMS Fault detected..\r\n");
 8008e08:	481b      	ldr	r0, [pc, #108]	; (8008e78 <TinyBMS_Init_CAN+0x648>)
 8008e0a:	f005 f98f 	bl	800e12c <puts>
			//Check for any active events
			while(TinyBMS_CAN_ReadAllEvents(&hcan1) != CMD_SUCCESS);
 8008e0e:	bf00      	nop
 8008e10:	4809      	ldr	r0, [pc, #36]	; (8008e38 <TinyBMS_Init_CAN+0x608>)
 8008e12:	f7fc fb77 	bl	8005504 <TinyBMS_CAN_ReadAllEvents>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1f9      	bne.n	8008e10 <TinyBMS_Init_CAN+0x5e0>
			break;
 8008e1c:	e001      	b.n	8008e22 <TinyBMS_Init_CAN+0x5f2>
		default:
			Error_Handler();
 8008e1e:	f000 fbaf 	bl	8009580 <Error_Handler>
	while(!isIdle) {
 8008e22:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0b3      	beq.n	8008d92 <TinyBMS_Init_CAN+0x562>
		}
	}

	return retval;
 8008e2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	37d8      	adds	r7, #216	; 0xd8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000200 	.word	0x20000200
 8008e3c:	08013aa4 	.word	0x08013aa4
 8008e40:	08013894 	.word	0x08013894
 8008e44:	080138b0 	.word	0x080138b0
 8008e48:	080138c8 	.word	0x080138c8
 8008e4c:	08013a60 	.word	0x08013a60
 8008e50:	080138f8 	.word	0x080138f8
 8008e54:	08013928 	.word	0x08013928
 8008e58:	0801343c 	.word	0x0801343c
 8008e5c:	08013468 	.word	0x08013468
 8008e60:	080135b4 	.word	0x080135b4
 8008e64:	08013958 	.word	0x08013958
 8008e68:	08013970 	.word	0x08013970
 8008e6c:	0801398c 	.word	0x0801398c
 8008e70:	080139a8 	.word	0x080139a8
 8008e74:	080139c4 	.word	0x080139c4
 8008e78:	080139d8 	.word	0x080139d8

08008e7c <SystemClock_Config_HSI>:

void SystemClock_Config_HSI(uint8_t clock_freq) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b094      	sub	sp, #80	; 0x50
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init = {0};
 8008e86:	f107 031c 	add.w	r3, r7, #28
 8008e8a:	2230      	movs	r2, #48	; 0x30
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f004 fc54 	bl	800d73c <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 8008e94:	f107 0308 	add.w	r3, r7, #8
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	605a      	str	r2, [r3, #4]
 8008e9e:	609a      	str	r2, [r3, #8]
 8008ea0:	60da      	str	r2, [r3, #12]
 8008ea2:	611a      	str	r2, [r3, #16]
	uint8_t flash_latency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	//Using HSI to derive PLL
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq) {
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	2b78      	cmp	r3, #120	; 0x78
 8008ebe:	d036      	beq.n	8008f2e <SystemClock_Config_HSI+0xb2>
 8008ec0:	2b78      	cmp	r3, #120	; 0x78
 8008ec2:	dc77      	bgt.n	8008fb4 <SystemClock_Config_HSI+0x138>
 8008ec4:	2b32      	cmp	r3, #50	; 0x32
 8008ec6:	d002      	beq.n	8008ece <SystemClock_Config_HSI+0x52>
 8008ec8:	2b54      	cmp	r3, #84	; 0x54
 8008eca:	d018      	beq.n	8008efe <SystemClock_Config_HSI+0x82>
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
		flash_latency = 3;
		break;
	default:
		return;
 8008ecc:	e072      	b.n	8008fb4 <SystemClock_Config_HSI+0x138>
		osc_init.PLL.PLLM = 16;
 8008ece:	2310      	movs	r3, #16
 8008ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 100;
 8008ed2:	2364      	movs	r3, #100	; 0x64
 8008ed4:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8008eda:	2302      	movs	r3, #2
 8008edc:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8008ede:	230f      	movs	r3, #15
 8008ee0:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8008eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eee:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8008ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef4:	61bb      	str	r3, [r7, #24]
		flash_latency = 1;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8008efc:	e02f      	b.n	8008f5e <SystemClock_Config_HSI+0xe2>
		osc_init.PLL.PLLM = 16;
 8008efe:	2310      	movs	r3, #16
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 168;
 8008f02:	23a8      	movs	r3, #168	; 0xa8
 8008f04:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8008f06:	2302      	movs	r3, #2
 8008f08:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8008f0e:	230f      	movs	r3, #15
 8008f10:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f12:	2302      	movs	r3, #2
 8008f14:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f16:	2300      	movs	r3, #0
 8008f18:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8008f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f1e:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8008f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f24:	61bb      	str	r3, [r7, #24]
		flash_latency = 2;
 8008f26:	2302      	movs	r3, #2
 8008f28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8008f2c:	e017      	b.n	8008f5e <SystemClock_Config_HSI+0xe2>
		osc_init.PLL.PLLM = 16;
 8008f2e:	2310      	movs	r3, #16
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
		osc_init.PLL.PLLN = 240;
 8008f32:	23f0      	movs	r3, #240	; 0xf0
 8008f34:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8008f36:	2302      	movs	r3, #2
 8008f38:	647b      	str	r3, [r7, #68]	; 0x44
		osc_init.PLL.PLLQ = 2;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	64bb      	str	r3, [r7, #72]	; 0x48
		clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8008f3e:	230f      	movs	r3, #15
 8008f40:	60bb      	str	r3, [r7, #8]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f42:	2302      	movs	r3, #2
 8008f44:	60fb      	str	r3, [r7, #12]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f46:	2300      	movs	r3, #0
 8008f48:	613b      	str	r3, [r7, #16]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8008f4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008f4e:	617b      	str	r3, [r7, #20]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8008f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f54:	61bb      	str	r3, [r7, #24]
		flash_latency = 3;
 8008f56:	2303      	movs	r3, #3
 8008f58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8008f5c:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 8008f5e:	f107 031c 	add.w	r3, r7, #28
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 fffc 	bl	800af60 <HAL_RCC_OscConfig>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <SystemClock_Config_HSI+0xf6>
		Error_Handler();
 8008f6e:	f000 fb07 	bl	8009580 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) {
 8008f72:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008f76:	f107 0308 	add.w	r3, r7, #8
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f002 fa93 	bl	800b4a8 <HAL_RCC_ClockConfig>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <SystemClock_Config_HSI+0x110>
		Error_Handler();
 8008f88:	f000 fafa 	bl	8009580 <Error_Handler>
	}

	//Configure the SYSTICK timer interrupt frequency for every 1ms
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8008f8c:	f002 fc7e 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 8008f90:	4603      	mov	r3, r0
 8008f92:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <SystemClock_Config_HSI+0x140>)
 8008f94:	fba2 2303 	umull	r2, r3, r2, r3
 8008f98:	099b      	lsrs	r3, r3, #6
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 fd51 	bl	800aa42 <HAL_SYSTICK_Config>
	//Configure SYSTICK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008fa0:	2004      	movs	r0, #4
 8008fa2:	f001 fd5b 	bl	800aa5c <HAL_SYSTICK_CLKSourceConfig>
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	f04f 30ff 	mov.w	r0, #4294967295
 8008fae:	f001 fd1e 	bl	800a9ee <HAL_NVIC_SetPriority>
 8008fb2:	e000      	b.n	8008fb6 <SystemClock_Config_HSI+0x13a>
		return;
 8008fb4:	bf00      	nop
}
 8008fb6:	3750      	adds	r7, #80	; 0x50
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	10624dd3 	.word	0x10624dd3

08008fc0 <GPIO_Init>:

void GPIO_Init(void) {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	; 0x28
 8008fc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fc6:	f107 0314 	add.w	r3, r7, #20
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	605a      	str	r2, [r3, #4]
 8008fd0:	609a      	str	r2, [r3, #8]
 8008fd2:	60da      	str	r2, [r3, #12]
 8008fd4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008fd6:	4b2d      	ldr	r3, [pc, #180]	; (800908c <GPIO_Init+0xcc>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	4a2c      	ldr	r2, [pc, #176]	; (800908c <GPIO_Init+0xcc>)
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fe2:	4b2a      	ldr	r3, [pc, #168]	; (800908c <GPIO_Init+0xcc>)
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8008fee:	4b27      	ldr	r3, [pc, #156]	; (800908c <GPIO_Init+0xcc>)
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	4a26      	ldr	r2, [pc, #152]	; (800908c <GPIO_Init+0xcc>)
 8008ff4:	f043 0302 	orr.w	r3, r3, #2
 8008ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8008ffa:	4b24      	ldr	r3, [pc, #144]	; (800908c <GPIO_Init+0xcc>)
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009006:	4b21      	ldr	r3, [pc, #132]	; (800908c <GPIO_Init+0xcc>)
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	4a20      	ldr	r2, [pc, #128]	; (800908c <GPIO_Init+0xcc>)
 800900c:	f043 0304 	orr.w	r3, r3, #4
 8009010:	6313      	str	r3, [r2, #48]	; 0x30
 8009012:	4b1e      	ldr	r3, [pc, #120]	; (800908c <GPIO_Init+0xcc>)
 8009014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	60bb      	str	r3, [r7, #8]
 800901c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800901e:	4b1b      	ldr	r3, [pc, #108]	; (800908c <GPIO_Init+0xcc>)
 8009020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009022:	4a1a      	ldr	r2, [pc, #104]	; (800908c <GPIO_Init+0xcc>)
 8009024:	f043 0308 	orr.w	r3, r3, #8
 8009028:	6313      	str	r3, [r2, #48]	; 0x30
 800902a:	4b18      	ldr	r3, [pc, #96]	; (800908c <GPIO_Init+0xcc>)
 800902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902e:	f003 0308 	and.w	r3, r3, #8
 8009032:	607b      	str	r3, [r7, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_GPIOH_CLK_ENABLE();

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, (LED1_Pin | LED2_Pin | LED3_Pin), GPIO_PIN_RESET);
 8009036:	2200      	movs	r2, #0
 8009038:	f244 0181 	movw	r1, #16513	; 0x4081
 800903c:	4814      	ldr	r0, [pc, #80]	; (8009090 <GPIO_Init+0xd0>)
 800903e:	f001 ff75 	bl	800af2c <HAL_GPIO_WritePin>

	/* Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8009042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009046:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009048:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800904c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904e:	2300      	movs	r3, #0
 8009050:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8009052:	f107 0314 	add.w	r3, r7, #20
 8009056:	4619      	mov	r1, r3
 8009058:	480e      	ldr	r0, [pc, #56]	; (8009094 <GPIO_Init+0xd4>)
 800905a:	f001 fdbb 	bl	800abd4 <HAL_GPIO_Init>

	/* Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = (LED1_Pin | LED2_Pin | LED3_Pin);
 800905e:	f244 0381 	movw	r3, #16513	; 0x4081
 8009062:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009064:	2301      	movs	r3, #1
 8009066:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009068:	2300      	movs	r3, #0
 800906a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800906c:	2300      	movs	r3, #0
 800906e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8009070:	f107 0314 	add.w	r3, r7, #20
 8009074:	4619      	mov	r1, r3
 8009076:	4806      	ldr	r0, [pc, #24]	; (8009090 <GPIO_Init+0xd0>)
 8009078:	f001 fdac 	bl	800abd4 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800907c:	2028      	movs	r0, #40	; 0x28
 800907e:	f001 fcd2 	bl	800aa26 <HAL_NVIC_EnableIRQ>
}
 8009082:	bf00      	nop
 8009084:	3728      	adds	r7, #40	; 0x28
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	40023800 	.word	0x40023800
 8009090:	40020400 	.word	0x40020400
 8009094:	40020800 	.word	0x40020800

08009098 <UART_Init>:

void UART_Init(void) {
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
	//USART2: PD5 PD6 for TinyBMS communication
	huart2.Instance = USART2;
 800909c:	4b27      	ldr	r3, [pc, #156]	; (800913c <UART_Init+0xa4>)
 800909e:	4a28      	ldr	r2, [pc, #160]	; (8009140 <UART_Init+0xa8>)
 80090a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80090a2:	4b26      	ldr	r3, [pc, #152]	; (800913c <UART_Init+0xa4>)
 80090a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80090a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80090aa:	4b24      	ldr	r3, [pc, #144]	; (800913c <UART_Init+0xa4>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80090b0:	4b22      	ldr	r3, [pc, #136]	; (800913c <UART_Init+0xa4>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80090b6:	4b21      	ldr	r3, [pc, #132]	; (800913c <UART_Init+0xa4>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80090bc:	4b1f      	ldr	r3, [pc, #124]	; (800913c <UART_Init+0xa4>)
 80090be:	2200      	movs	r2, #0
 80090c0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80090c2:	4b1e      	ldr	r3, [pc, #120]	; (800913c <UART_Init+0xa4>)
 80090c4:	220c      	movs	r2, #12
 80090c6:	615a      	str	r2, [r3, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80090c8:	4b1c      	ldr	r3, [pc, #112]	; (800913c <UART_Init+0xa4>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80090ce:	4b1b      	ldr	r3, [pc, #108]	; (800913c <UART_Init+0xa4>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80090d4:	4b19      	ldr	r3, [pc, #100]	; (800913c <UART_Init+0xa4>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart2) != HAL_OK) {
 80090da:	4818      	ldr	r0, [pc, #96]	; (800913c <UART_Init+0xa4>)
 80090dc:	f002 ff0e 	bl	800befc <HAL_UART_Init>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <UART_Init+0x52>
		Error_Handler();
 80090e6:	f000 fa4b 	bl	8009580 <Error_Handler>
	}

	//USART3: PD8 PD9 for ST-LINK debugging (printf ITM)
	huart3.Instance = USART3;
 80090ea:	4b16      	ldr	r3, [pc, #88]	; (8009144 <UART_Init+0xac>)
 80090ec:	4a16      	ldr	r2, [pc, #88]	; (8009148 <UART_Init+0xb0>)
 80090ee:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80090f0:	4b14      	ldr	r3, [pc, #80]	; (8009144 <UART_Init+0xac>)
 80090f2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80090f6:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80090f8:	4b12      	ldr	r3, [pc, #72]	; (8009144 <UART_Init+0xac>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80090fe:	4b11      	ldr	r3, [pc, #68]	; (8009144 <UART_Init+0xac>)
 8009100:	2200      	movs	r2, #0
 8009102:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8009104:	4b0f      	ldr	r3, [pc, #60]	; (8009144 <UART_Init+0xac>)
 8009106:	2200      	movs	r2, #0
 8009108:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800910a:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <UART_Init+0xac>)
 800910c:	2200      	movs	r2, #0
 800910e:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8009110:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <UART_Init+0xac>)
 8009112:	220c      	movs	r2, #12
 8009114:	615a      	str	r2, [r3, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009116:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <UART_Init+0xac>)
 8009118:	2200      	movs	r2, #0
 800911a:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <UART_Init+0xac>)
 800911e:	2200      	movs	r2, #0
 8009120:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <UART_Init+0xac>)
 8009124:	2200      	movs	r2, #0
 8009126:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart3) != HAL_OK) {
 8009128:	4806      	ldr	r0, [pc, #24]	; (8009144 <UART_Init+0xac>)
 800912a:	f002 fee7 	bl	800befc <HAL_UART_Init>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <UART_Init+0xa0>
		Error_Handler();
 8009134:	f000 fa24 	bl	8009580 <Error_Handler>
	}
}
 8009138:	bf00      	nop
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000228 	.word	0x20000228
 8009140:	40004400 	.word	0x40004400
 8009144:	200002ac 	.word	0x200002ac
 8009148:	40004800 	.word	0x40004800

0800914c <TIM_Init>:

void TIM_Init(void) {
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
	//TIM6 - Basic Timer
	//Every 1 Second or 1Hz freq
	htim6.Instance = TIM6;
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <TIM_Init+0x30>)
 8009152:	4a0b      	ldr	r2, [pc, #44]	; (8009180 <TIM_Init+0x34>)
 8009154:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 4999;
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <TIM_Init+0x30>)
 8009158:	f241 3287 	movw	r2, #4999	; 0x1387
 800915c:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 10000-1;
 800915e:	4b07      	ldr	r3, [pc, #28]	; (800917c <TIM_Init+0x30>)
 8009160:	f242 720f 	movw	r2, #9999	; 0x270f
 8009164:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8009166:	4805      	ldr	r0, [pc, #20]	; (800917c <TIM_Init+0x30>)
 8009168:	f002 fbc4 	bl	800b8f4 <HAL_TIM_Base_Init>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <TIM_Init+0x2a>
		Error_Handler();
 8009172:	f000 fa05 	bl	8009580 <Error_Handler>
	}
}
 8009176:	bf00      	nop
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000330 	.word	0x20000330
 8009180:	40001000 	.word	0x40001000

08009184 <CAN_Init>:

void CAN_Init(uint8_t can_bitrate) {
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
	 *  	. TinyBMS CAN bitrate of 500kbit/s (cannot be changed by user)
	 *  . 3 Tx Mailboxes, 2 Rx FIFOs
	 *  . 28 Filter banks shared between CAN1 and CAN2 for dual CAN
	 *  . Max Bitrate of bxCAN is 1Mbit/s
	 * 	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	hcan1.Instance = CAN1;
 800918e:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <CAN_Init+0x78>)
 8009190:	4a1b      	ldr	r2, [pc, #108]	; (8009200 <CAN_Init+0x7c>)
 8009192:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009194:	4b19      	ldr	r3, [pc, #100]	; (80091fc <CAN_Init+0x78>)
 8009196:	2200      	movs	r2, #0
 8009198:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 800919a:	4b18      	ldr	r3, [pc, #96]	; (80091fc <CAN_Init+0x78>)
 800919c:	2201      	movs	r2, #1
 800919e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 80091a0:	4b16      	ldr	r3, [pc, #88]	; (80091fc <CAN_Init+0x78>)
 80091a2:	2201      	movs	r2, #1
 80091a4:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 80091a6:	4b15      	ldr	r3, [pc, #84]	; (80091fc <CAN_Init+0x78>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80091ac:	4b13      	ldr	r3, [pc, #76]	; (80091fc <CAN_Init+0x78>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80091b2:	4b12      	ldr	r3, [pc, #72]	; (80091fc <CAN_Init+0x78>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80091b8:	4b10      	ldr	r3, [pc, #64]	; (80091fc <CAN_Init+0x78>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	775a      	strb	r2, [r3, #29]

	/* Settings related to CAN bit timings (http://www.bittiming.can-wiki.info/) */
	switch(can_bitrate) {
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d10d      	bne.n	80091e0 <CAN_Init+0x5c>
	*/
	/********* TinyBMS only supports 500kbit/s CAN speed *********/
	case CANBITRATE_500KBIT_50MHZ:
		/* ** 500kbit/s @ 50MHz SYSCLK ** */
		//prescaler = 5, num_TQ = 10, Seg1 = 8, Seg2 = 1, Sample point at 90.0, register CAN_BTR = 0x00070009
		hcan1.Init.Prescaler = 10;
 80091c4:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <CAN_Init+0x78>)
 80091c6:	220a      	movs	r2, #10
 80091c8:	605a      	str	r2, [r3, #4]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80091ca:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <CAN_Init+0x78>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <CAN_Init+0x78>)
 80091d2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80091d6:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80091d8:	4b08      	ldr	r3, [pc, #32]	; (80091fc <CAN_Init+0x78>)
 80091da:	2200      	movs	r2, #0
 80091dc:	615a      	str	r2, [r3, #20]
		break;
 80091de:	e001      	b.n	80091e4 <CAN_Init+0x60>
		hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
		hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
		break;
	*/
	default:
		Error_Handler();
 80091e0:	f000 f9ce 	bl	8009580 <Error_Handler>
	}

	if(HAL_CAN_Init(&hcan1) != HAL_OK) {
 80091e4:	4805      	ldr	r0, [pc, #20]	; (80091fc <CAN_Init+0x78>)
 80091e6:	f000 fc9d 	bl	8009b24 <HAL_CAN_Init>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <CAN_Init+0x70>
		Error_Handler();
 80091f0:	f000 f9c6 	bl	8009580 <Error_Handler>
	}
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	20000200 	.word	0x20000200
 8009200:	40006400 	.word	0x40006400

08009204 <CAN_Filter_Config>:

void CAN_Filter_Config(void) {
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	; 0x28
 8009208:	af00      	add	r7, sp, #0
	 *
	 * Note: Mask Mode can also be used to check:
	 * RTR = 0 (Data Frame)				IDE = 0 (11-bit STID)
	 * RTR = 1 (Remote Frame)			IDE = 1 (29-bit EXID)
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	CAN_FilterTypeDef can1_filter_init = {0};
 800920a:	463b      	mov	r3, r7
 800920c:	2228      	movs	r2, #40	; 0x28
 800920e:	2100      	movs	r1, #0
 8009210:	4618      	mov	r0, r3
 8009212:	f004 fa93 	bl	800d73c <memset>

	//TinyBMS Default Node ID: 0x01 (hard-coded)
	//ID List Mode: Allows TinyBMS Request/Response messages from bus
	can1_filter_init.FilterActivation = ENABLE;
 8009216:	2301      	movs	r3, #1
 8009218:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800921e:	2300      	movs	r3, #0
 8009220:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x4020; 	//IDLIST "Request to TinyBMS"
 8009222:	f244 0320 	movw	r3, #16416	; 0x4020
 8009226:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8009228:	2300      	movs	r3, #0
 800922a:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x4820; //IDLIST "Response from TinyBMS"
 800922c:	f644 0320 	movw	r3, #18464	; 0x4820
 8009230:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDLIST; //ID List Mode
 8009236:	2301      	movs	r3, #1
 8009238:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800923a:	2301      	movs	r3, #1
 800923c:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK) {
 800923e:	463b      	mov	r3, r7
 8009240:	4619      	mov	r1, r3
 8009242:	4806      	ldr	r0, [pc, #24]	; (800925c <CAN_Filter_Config+0x58>)
 8009244:	f000 fd6a 	bl	8009d1c <HAL_CAN_ConfigFilter>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <CAN_Filter_Config+0x4e>
		Error_Handler();
 800924e:	f000 f997 	bl	8009580 <Error_Handler>
	}
}
 8009252:	bf00      	nop
 8009254:	3728      	adds	r7, #40	; 0x28
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000200 	.word	0x20000200

08009260 <CAN_Begin>:

void CAN_Begin(void) {
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
	//Activate Notifications (Interrupts) by setting CAN_IER bits
	if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 8009264:	f240 4103 	movw	r1, #1027	; 0x403
 8009268:	4808      	ldr	r0, [pc, #32]	; (800928c <CAN_Begin+0x2c>)
 800926a:	f001 f890 	bl	800a38e <HAL_CAN_ActivateNotification>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <CAN_Begin+0x18>
		Error_Handler();
 8009274:	f000 f984 	bl	8009580 <Error_Handler>
	}

	//Start CAN
	if(HAL_CAN_Start(&hcan1) != HAL_OK) {
 8009278:	4804      	ldr	r0, [pc, #16]	; (800928c <CAN_Begin+0x2c>)
 800927a:	f000 fe2f 	bl	8009edc <HAL_CAN_Start>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <CAN_Begin+0x28>
		Error_Handler();
 8009284:	f000 f97c 	bl	8009580 <Error_Handler>
	}
}
 8009288:	bf00      	nop
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20000200 	.word	0x20000200

08009290 <CAN1_Tx>:

void CAN1_Tx(uint8_t device, uint8_t* message, uint8_t len) {
 8009290:	b580      	push	{r7, lr}
 8009292:	b08a      	sub	sp, #40	; 0x28
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	6039      	str	r1, [r7, #0]
 800929a:	71fb      	strb	r3, [r7, #7]
 800929c:	4613      	mov	r3, r2
 800929e:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	if(device == TINYBMS) {
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d129      	bne.n	80092fa <CAN1_Tx+0x6a>
		TxHeader.DLC = len;				//Data Length Code (in Bytes)
 80092a6:	79bb      	ldrb	r3, [r7, #6]
 80092a8:	623b      	str	r3, [r7, #32]
		if(message[0] == CAN_TBMS_WRITE_CAN_NODEID) 	//Standard ID (Write new nodeID.. Request StdID: 0x200 + user_input)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b29      	cmp	r3, #41	; 0x29
 80092b0:	d106      	bne.n	80092c0 <CAN1_Tx+0x30>
			TxHeader.StdId = (TINYBMS_CAN_REQUEST_BASE_STDID + message[1]);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	3301      	adds	r3, #1
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	e00a      	b.n	80092d6 <CAN1_Tx+0x46>
		else if(message[0] == CAN_TBMS_READ_CAN_NODEID) //Standard ID (Read current nodeID.. Request StdID: 0x200)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b28      	cmp	r3, #40	; 0x28
 80092c6:	d103      	bne.n	80092d0 <CAN1_Tx+0x40>
			TxHeader.StdId = TINYBMS_CAN_REQUEST_BASE_STDID;
 80092c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	e002      	b.n	80092d6 <CAN1_Tx+0x46>
		else 											//Standard ID (Otherwise.. Request StdID: 0x201-0x23F)
			TxHeader.StdId = TinybmsStdID_Request;
 80092d0:	4b19      	ldr	r3, [pc, #100]	; (8009338 <CAN1_Tx+0xa8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD; 		//Standard or Extended ID type
 80092d6:	2300      	movs	r3, #0
 80092d8:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;	//Remote Transmission Request
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 80092de:	f107 030c 	add.w	r3, r7, #12
 80092e2:	f107 0110 	add.w	r1, r7, #16
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	4814      	ldr	r0, [pc, #80]	; (800933c <CAN1_Tx+0xac>)
 80092ea:	f000 fe3b 	bl	8009f64 <HAL_CAN_AddTxMessage>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01d      	beq.n	8009330 <CAN1_Tx+0xa0>
			Error_Handler();
 80092f4:	f000 f944 	bl	8009580 <Error_Handler>
			Error_Handler();
		}
	} else {
		Error_Handler();
	}
}
 80092f8:	e01a      	b.n	8009330 <CAN1_Tx+0xa0>
	} else if(device == ELCONCHARGER2) {
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d115      	bne.n	800932c <CAN1_Tx+0x9c>
		TxHeader.DLC = 8;				//Data Length Code (in Bytes)
 8009300:	2308      	movs	r3, #8
 8009302:	623b      	str	r3, [r7, #32]
		TxHeader.ExtId = 0x1806E5F4;	//Extended ID
 8009304:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <CAN1_Tx+0xb0>)
 8009306:	617b      	str	r3, [r7, #20]
		TxHeader.IDE = CAN_ID_EXT; 		//Standard or Extended ID type
 8009308:	2304      	movs	r3, #4
 800930a:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;	//Remote Transmission Request
 800930c:	2300      	movs	r3, #0
 800930e:	61fb      	str	r3, [r7, #28]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &TxMailbox) != HAL_OK) {
 8009310:	f107 030c 	add.w	r3, r7, #12
 8009314:	f107 0110 	add.w	r1, r7, #16
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	4808      	ldr	r0, [pc, #32]	; (800933c <CAN1_Tx+0xac>)
 800931c:	f000 fe22 	bl	8009f64 <HAL_CAN_AddTxMessage>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d004      	beq.n	8009330 <CAN1_Tx+0xa0>
			Error_Handler();
 8009326:	f000 f92b 	bl	8009580 <Error_Handler>
}
 800932a:	e001      	b.n	8009330 <CAN1_Tx+0xa0>
		Error_Handler();
 800932c:	f000 f928 	bl	8009580 <Error_Handler>
}
 8009330:	bf00      	nop
 8009332:	3728      	adds	r7, #40	; 0x28
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20000000 	.word	0x20000000
 800933c:	20000200 	.word	0x20000200
 8009340:	1806e5f4 	.word	0x1806e5f4

08009344 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a04      	ldr	r2, [pc, #16]	; (8009364 <HAL_UART_TxCpltCallback+0x20>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d102      	bne.n	800935c <HAL_UART_TxCpltCallback+0x18>
		printf("HAL_UART_TxCpltCallback USART2\r\n");
 8009356:	4804      	ldr	r0, [pc, #16]	; (8009368 <HAL_UART_TxCpltCallback+0x24>)
 8009358:	f004 fee8 	bl	800e12c <puts>
	}
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	40004400 	.word	0x40004400
 8009368:	08013aa8 	.word	0x08013aa8

0800936c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a04      	ldr	r2, [pc, #16]	; (800938c <HAL_UART_RxCpltCallback+0x20>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d102      	bne.n	8009384 <HAL_UART_RxCpltCallback+0x18>
		printf("HAL_UART_RxCpltCallback USART2\r\n");
 800937e:	4804      	ldr	r0, [pc, #16]	; (8009390 <HAL_UART_RxCpltCallback+0x24>)
 8009380:	f004 fed4 	bl	800e12c <puts>
	}
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	40004400 	.word	0x40004400
 8009390:	08013ac8 	.word	0x08013ac8

08009394 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a04      	ldr	r2, [pc, #16]	; (80093b4 <HAL_UART_ErrorCallback+0x20>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d102      	bne.n	80093ac <HAL_UART_ErrorCallback+0x18>
		printf("HAL_UART_ErrorCallback USART2\r\n");
 80093a6:	4804      	ldr	r0, [pc, #16]	; (80093b8 <HAL_UART_ErrorCallback+0x24>)
 80093a8:	f004 fec0 	bl	800e12c <puts>
	}
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	40004400 	.word	0x40004400
 80093b8:	08013ae8 	.word	0x08013ae8

080093bc <HAL_CAN_TxMailbox0CompleteCallback>:
	if(huart->Instance == USART2) {
		printf("HAL_UART_AbortCpltCallback USART2\r\n");
	}
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80093bc:	b580      	push	{r7, lr}
 80093be:	b090      	sub	sp, #64	; 0x40
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a0e      	ldr	r2, [pc, #56]	; (8009404 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d116      	bne.n	80093fc <HAL_CAN_TxMailbox0CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox0CompleteCallback CAN1\r\n");
 80093ce:	480e      	ldr	r0, [pc, #56]	; (8009408 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 80093d0:	f004 feac 	bl	800e12c <puts>
		sprintf(msg,"Message Transmitted:M0\r\n");
 80093d4:	f107 030c 	add.w	r3, r7, #12
 80093d8:	490c      	ldr	r1, [pc, #48]	; (800940c <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 80093da:	4618      	mov	r0, r3
 80093dc:	f004 fec6 	bl	800e16c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80093e0:	f107 030c 	add.w	r3, r7, #12
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7f6 ff13 	bl	8000210 <strlen>
 80093ea:	4603      	mov	r3, r0
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	f107 010c 	add.w	r1, r7, #12
 80093f2:	f04f 33ff 	mov.w	r3, #4294967295
 80093f6:	4806      	ldr	r0, [pc, #24]	; (8009410 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 80093f8:	f002 fdce 	bl	800bf98 <HAL_UART_Transmit>
	}
}
 80093fc:	bf00      	nop
 80093fe:	3740      	adds	r7, #64	; 0x40
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	40006400 	.word	0x40006400
 8009408:	08013b84 	.word	0x08013b84
 800940c:	08013bb0 	.word	0x08013bb0
 8009410:	200002ac 	.word	0x200002ac

08009414 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b090      	sub	sp, #64	; 0x40
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0e      	ldr	r2, [pc, #56]	; (800945c <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d116      	bne.n	8009454 <HAL_CAN_TxMailbox1CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox1CompleteCallback CAN1\r\n");
 8009426:	480e      	ldr	r0, [pc, #56]	; (8009460 <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 8009428:	f004 fe80 	bl	800e12c <puts>
		sprintf(msg,"Message Transmitted:M1\r\n");
 800942c:	f107 030c 	add.w	r3, r7, #12
 8009430:	490c      	ldr	r1, [pc, #48]	; (8009464 <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 8009432:	4618      	mov	r0, r3
 8009434:	f004 fe9a 	bl	800e16c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8009438:	f107 030c 	add.w	r3, r7, #12
 800943c:	4618      	mov	r0, r3
 800943e:	f7f6 fee7 	bl	8000210 <strlen>
 8009442:	4603      	mov	r3, r0
 8009444:	b29a      	uxth	r2, r3
 8009446:	f107 010c 	add.w	r1, r7, #12
 800944a:	f04f 33ff 	mov.w	r3, #4294967295
 800944e:	4806      	ldr	r0, [pc, #24]	; (8009468 <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 8009450:	f002 fda2 	bl	800bf98 <HAL_UART_Transmit>
	}
}
 8009454:	bf00      	nop
 8009456:	3740      	adds	r7, #64	; 0x40
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40006400 	.word	0x40006400
 8009460:	08013bcc 	.word	0x08013bcc
 8009464:	08013bf8 	.word	0x08013bf8
 8009468:	200002ac 	.word	0x200002ac

0800946c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 800946c:	b580      	push	{r7, lr}
 800946e:	b090      	sub	sp, #64	; 0x40
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a0e      	ldr	r2, [pc, #56]	; (80094b4 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d116      	bne.n	80094ac <HAL_CAN_TxMailbox2CompleteCallback+0x40>
		char msg[50];
		printf("HAL_CAN_TxMailbox2CompleteCallback CAN1\r\n");
 800947e:	480e      	ldr	r0, [pc, #56]	; (80094b8 <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 8009480:	f004 fe54 	bl	800e12c <puts>
		sprintf(msg,"Message Transmitted:M2\r\n");
 8009484:	f107 030c 	add.w	r3, r7, #12
 8009488:	490c      	ldr	r1, [pc, #48]	; (80094bc <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 800948a:	4618      	mov	r0, r3
 800948c:	f004 fe6e 	bl	800e16c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8009490:	f107 030c 	add.w	r3, r7, #12
 8009494:	4618      	mov	r0, r3
 8009496:	f7f6 febb 	bl	8000210 <strlen>
 800949a:	4603      	mov	r3, r0
 800949c:	b29a      	uxth	r2, r3
 800949e:	f107 010c 	add.w	r1, r7, #12
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295
 80094a6:	4806      	ldr	r0, [pc, #24]	; (80094c0 <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 80094a8:	f002 fd76 	bl	800bf98 <HAL_UART_Transmit>
	}
}
 80094ac:	bf00      	nop
 80094ae:	3740      	adds	r7, #64	; 0x40
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	40006400 	.word	0x40006400
 80094b8:	08013c14 	.word	0x08013c14
 80094bc:	08013c40 	.word	0x08013c40
 80094c0:	200002ac 	.word	0x200002ac

080094c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a09      	ldr	r2, [pc, #36]	; (80094f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d10c      	bne.n	80094f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		//Deactivate Notifications before getting Rx Message
		if(HAL_CAN_DeactivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 80094d6:	f240 4103 	movw	r1, #1027	; 0x403
 80094da:	4808      	ldr	r0, [pc, #32]	; (80094fc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80094dc:	f000 ff7d 	bl	800a3da <HAL_CAN_DeactivateNotification>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
			Error_Handler();
 80094e6:	f000 f84b 	bl	8009580 <Error_Handler>
		}

		printf("HAL_CAN_RxFifo0MsgPendingCallback CAN1\r\n");
 80094ea:	4805      	ldr	r0, [pc, #20]	; (8009500 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80094ec:	f004 fe1e 	bl	800e12c <puts>
	}
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	40006400 	.word	0x40006400
 80094fc:	20000200 	.word	0x20000200
 8009500:	08013c5c 	.word	0x08013c5c

08009504 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b090      	sub	sp, #64	; 0x40
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0e      	ldr	r2, [pc, #56]	; (800954c <HAL_CAN_ErrorCallback+0x48>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d116      	bne.n	8009544 <HAL_CAN_ErrorCallback+0x40>
		char msg[50];
		printf("HAL_CAN_ErrorCallback CAN1\r\n");
 8009516:	480e      	ldr	r0, [pc, #56]	; (8009550 <HAL_CAN_ErrorCallback+0x4c>)
 8009518:	f004 fe08 	bl	800e12c <puts>
		sprintf(msg, "CAN Error Detected\r\n");
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	490c      	ldr	r1, [pc, #48]	; (8009554 <HAL_CAN_ErrorCallback+0x50>)
 8009522:	4618      	mov	r0, r3
 8009524:	f004 fe22 	bl	800e16c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8009528:	f107 030c 	add.w	r3, r7, #12
 800952c:	4618      	mov	r0, r3
 800952e:	f7f6 fe6f 	bl	8000210 <strlen>
 8009532:	4603      	mov	r3, r0
 8009534:	b29a      	uxth	r2, r3
 8009536:	f107 010c 	add.w	r1, r7, #12
 800953a:	f04f 33ff 	mov.w	r3, #4294967295
 800953e:	4806      	ldr	r0, [pc, #24]	; (8009558 <HAL_CAN_ErrorCallback+0x54>)
 8009540:	f002 fd2a 	bl	800bf98 <HAL_UART_Transmit>
	}
}
 8009544:	bf00      	nop
 8009546:	3740      	adds	r7, #64	; 0x40
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40006400 	.word	0x40006400
 8009550:	08013c84 	.word	0x08013c84
 8009554:	08013ca0 	.word	0x08013ca0
 8009558:	200002ac 	.word	0x200002ac

0800955c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a04      	ldr	r2, [pc, #16]	; (800957c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d101      	bne.n	8009572 <HAL_TIM_PeriodElapsedCallback+0x16>
		//Every 1 second during Charging, send message to ElCon charger
		ElCon_SendMsg();
 800956e:	f7fe fedf 	bl	8008330 <ElCon_SendMsg>
	}
}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	40001000 	.word	0x40001000

08009580 <Error_Handler>:

void Error_Handler(void) {
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
	printf("Inside Error Handler\r\n");
 8009584:	4801      	ldr	r0, [pc, #4]	; (800958c <Error_Handler+0xc>)
 8009586:	f004 fdd1 	bl	800e12c <puts>
	while(1);
 800958a:	e7fe      	b.n	800958a <Error_Handler+0xa>
 800958c:	08013cb8 	.word	0x08013cb8

08009590 <HAL_MspInit>:
* @date 09-17-2022
***********************************************/

#include "main.h"

void HAL_MspInit(void) {
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0

	/* Low level processor specific inits */
	__HAL_RCC_PWR_CLK_ENABLE();
 8009596:	4b1b      	ldr	r3, [pc, #108]	; (8009604 <HAL_MspInit+0x74>)
 8009598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959a:	4a1a      	ldr	r2, [pc, #104]	; (8009604 <HAL_MspInit+0x74>)
 800959c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095a0:	6413      	str	r3, [r2, #64]	; 0x40
 80095a2:	4b18      	ldr	r3, [pc, #96]	; (8009604 <HAL_MspInit+0x74>)
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095aa:	607b      	str	r3, [r7, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80095ae:	4b15      	ldr	r3, [pc, #84]	; (8009604 <HAL_MspInit+0x74>)
 80095b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b2:	4a14      	ldr	r2, [pc, #80]	; (8009604 <HAL_MspInit+0x74>)
 80095b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095b8:	6453      	str	r3, [r2, #68]	; 0x44
 80095ba:	4b12      	ldr	r3, [pc, #72]	; (8009604 <HAL_MspInit+0x74>)
 80095bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	683b      	ldr	r3, [r7, #0]

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //default setting
 80095c6:	2003      	movs	r0, #3
 80095c8:	f001 fa06 	bl	800a9d8 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 80095cc:	4b0e      	ldr	r3, [pc, #56]	; (8009608 <HAL_MspInit+0x78>)
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	4a0d      	ldr	r2, [pc, #52]	; (8009608 <HAL_MspInit+0x78>)
 80095d2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80095d6:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80095d8:	2200      	movs	r2, #0
 80095da:	2100      	movs	r1, #0
 80095dc:	f06f 000b 	mvn.w	r0, #11
 80095e0:	f001 fa05 	bl	800a9ee <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80095e4:	2200      	movs	r2, #0
 80095e6:	2100      	movs	r1, #0
 80095e8:	f06f 000a 	mvn.w	r0, #10
 80095ec:	f001 f9ff 	bl	800a9ee <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80095f0:	2200      	movs	r2, #0
 80095f2:	2100      	movs	r1, #0
 80095f4:	f06f 0009 	mvn.w	r0, #9
 80095f8:	f001 f9f9 	bl	800a9ee <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	40023800 	.word	0x40023800
 8009608:	e000ed00 	.word	0xe000ed00

0800960c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 800960c:	b580      	push	{r7, lr}
 800960e:	b08a      	sub	sp, #40	; 0x28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009614:	f107 0314 	add.w	r3, r7, #20
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	605a      	str	r2, [r3, #4]
 800961e:	609a      	str	r2, [r3, #8]
 8009620:	60da      	str	r2, [r3, #12]
 8009622:	611a      	str	r2, [r3, #16]

	if(hcan->Instance == CAN1) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a27      	ldr	r2, [pc, #156]	; (80096c8 <HAL_CAN_MspInit+0xbc>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d147      	bne.n	80096be <HAL_CAN_MspInit+0xb2>
		__HAL_RCC_CAN1_CLK_ENABLE();
 800962e:	4b27      	ldr	r3, [pc, #156]	; (80096cc <HAL_CAN_MspInit+0xc0>)
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	4a26      	ldr	r2, [pc, #152]	; (80096cc <HAL_CAN_MspInit+0xc0>)
 8009634:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009638:	6413      	str	r3, [r2, #64]	; 0x40
 800963a:	4b24      	ldr	r3, [pc, #144]	; (80096cc <HAL_CAN_MspInit+0xc0>)
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009642:	613b      	str	r3, [r7, #16]
 8009644:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8009646:	4b21      	ldr	r3, [pc, #132]	; (80096cc <HAL_CAN_MspInit+0xc0>)
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	4a20      	ldr	r2, [pc, #128]	; (80096cc <HAL_CAN_MspInit+0xc0>)
 800964c:	f043 0308 	orr.w	r3, r3, #8
 8009650:	6313      	str	r3, [r2, #48]	; 0x30
 8009652:	4b1e      	ldr	r3, [pc, #120]	; (80096cc <HAL_CAN_MspInit+0xc0>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	f003 0308 	and.w	r3, r3, #8
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]

		/** CAN1 GPIO Configuration
			PD0     ------> CAN1_RX
			PD1     ------> CAN1_TX
		*/
		GPIO_InitStruct.Pin = (CAN1_RX_PIN | CAN1_TX_PIN);
 800965e:	2303      	movs	r3, #3
 8009660:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009662:	2302      	movs	r3, #2
 8009664:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009666:	2300      	movs	r3, #0
 8009668:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800966a:	2303      	movs	r3, #3
 800966c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800966e:	2309      	movs	r3, #9
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(CAN1_GPIO_Port, &GPIO_InitStruct);
 8009672:	f107 0314 	add.w	r3, r7, #20
 8009676:	4619      	mov	r1, r3
 8009678:	4815      	ldr	r0, [pc, #84]	; (80096d0 <HAL_CAN_MspInit+0xc4>)
 800967a:	f001 faab 	bl	800abd4 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 800967e:	2200      	movs	r2, #0
 8009680:	210f      	movs	r1, #15
 8009682:	2013      	movs	r0, #19
 8009684:	f001 f9b3 	bl	800a9ee <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8009688:	2200      	movs	r2, #0
 800968a:	210f      	movs	r1, #15
 800968c:	2014      	movs	r0, #20
 800968e:	f001 f9ae 	bl	800a9ee <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8009692:	2200      	movs	r2, #0
 8009694:	210f      	movs	r1, #15
 8009696:	2015      	movs	r0, #21
 8009698:	f001 f9a9 	bl	800a9ee <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 800969c:	2200      	movs	r2, #0
 800969e:	210f      	movs	r1, #15
 80096a0:	2016      	movs	r0, #22
 80096a2:	f001 f9a4 	bl	800a9ee <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80096a6:	2013      	movs	r0, #19
 80096a8:	f001 f9bd 	bl	800aa26 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80096ac:	2014      	movs	r0, #20
 80096ae:	f001 f9ba 	bl	800aa26 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80096b2:	2015      	movs	r0, #21
 80096b4:	f001 f9b7 	bl	800aa26 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80096b8:	2016      	movs	r0, #22
 80096ba:	f001 f9b4 	bl	800aa26 <HAL_NVIC_EnableIRQ>
	}
}
 80096be:	bf00      	nop
 80096c0:	3728      	adds	r7, #40	; 0x28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	40006400 	.word	0x40006400
 80096cc:	40023800 	.word	0x40023800
 80096d0:	40020c00 	.word	0x40020c00

080096d4 <HAL_UART_MspInit>:
		HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
		HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	; 0x30
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096dc:	f107 031c 	add.w	r3, r7, #28
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	609a      	str	r2, [r3, #8]
 80096e8:	60da      	str	r2, [r3, #12]
 80096ea:	611a      	str	r2, [r3, #16]

	if(huart->Instance == USART2) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a32      	ldr	r2, [pc, #200]	; (80097bc <HAL_UART_MspInit+0xe8>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d130      	bne.n	8009758 <HAL_UART_MspInit+0x84>
		__HAL_RCC_USART2_CLK_ENABLE();
 80096f6:	4b32      	ldr	r3, [pc, #200]	; (80097c0 <HAL_UART_MspInit+0xec>)
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	4a31      	ldr	r2, [pc, #196]	; (80097c0 <HAL_UART_MspInit+0xec>)
 80096fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009700:	6413      	str	r3, [r2, #64]	; 0x40
 8009702:	4b2f      	ldr	r3, [pc, #188]	; (80097c0 <HAL_UART_MspInit+0xec>)
 8009704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800970e:	4b2c      	ldr	r3, [pc, #176]	; (80097c0 <HAL_UART_MspInit+0xec>)
 8009710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009712:	4a2b      	ldr	r2, [pc, #172]	; (80097c0 <HAL_UART_MspInit+0xec>)
 8009714:	f043 0308 	orr.w	r3, r3, #8
 8009718:	6313      	str	r3, [r2, #48]	; 0x30
 800971a:	4b29      	ldr	r3, [pc, #164]	; (80097c0 <HAL_UART_MspInit+0xec>)
 800971c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971e:	f003 0308 	and.w	r3, r3, #8
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	697b      	ldr	r3, [r7, #20]
		 *  USART2 GPIO Configuration
			PD5     ------> USART2_TX
			PD6     ------> USART2_RX
		*/

		GPIO_InitStruct.Pin = (USART2_TX_Pin | USART2_RX_Pin);
 8009726:	2360      	movs	r3, #96	; 0x60
 8009728:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800972a:	2302      	movs	r3, #2
 800972c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800972e:	2300      	movs	r3, #0
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009732:	2303      	movs	r3, #3
 8009734:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009736:	2307      	movs	r3, #7
 8009738:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART2_GPIO_Port, &GPIO_InitStruct);
 800973a:	f107 031c 	add.w	r3, r7, #28
 800973e:	4619      	mov	r1, r3
 8009740:	4820      	ldr	r0, [pc, #128]	; (80097c4 <HAL_UART_MspInit+0xf0>)
 8009742:	f001 fa47 	bl	800abd4 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8009746:	2200      	movs	r2, #0
 8009748:	210f      	movs	r1, #15
 800974a:	2026      	movs	r0, #38	; 0x26
 800974c:	f001 f94f 	bl	800a9ee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009750:	2026      	movs	r0, #38	; 0x26
 8009752:	f001 f968 	bl	800aa26 <HAL_NVIC_EnableIRQ>
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
	}
}
 8009756:	e02d      	b.n	80097b4 <HAL_UART_MspInit+0xe0>
	} else if(huart->Instance == USART3) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a1a      	ldr	r2, [pc, #104]	; (80097c8 <HAL_UART_MspInit+0xf4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d128      	bne.n	80097b4 <HAL_UART_MspInit+0xe0>
		__HAL_RCC_USART3_CLK_ENABLE();
 8009762:	4b17      	ldr	r3, [pc, #92]	; (80097c0 <HAL_UART_MspInit+0xec>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	4a16      	ldr	r2, [pc, #88]	; (80097c0 <HAL_UART_MspInit+0xec>)
 8009768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800976c:	6413      	str	r3, [r2, #64]	; 0x40
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <HAL_UART_MspInit+0xec>)
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009776:	613b      	str	r3, [r7, #16]
 8009778:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800977a:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <HAL_UART_MspInit+0xec>)
 800977c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977e:	4a10      	ldr	r2, [pc, #64]	; (80097c0 <HAL_UART_MspInit+0xec>)
 8009780:	f043 0308 	orr.w	r3, r3, #8
 8009784:	6313      	str	r3, [r2, #48]	; 0x30
 8009786:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <HAL_UART_MspInit+0xec>)
 8009788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978a:	f003 0308 	and.w	r3, r3, #8
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = (USART3_TX_Pin | USART3_RX_Pin);
 8009792:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009796:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009798:	2302      	movs	r3, #2
 800979a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800979c:	2301      	movs	r3, #1
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097a0:	2303      	movs	r3, #3
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80097a4:	2307      	movs	r3, #7
 80097a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(USART3_GPIO_Port, &GPIO_InitStruct);
 80097a8:	f107 031c 	add.w	r3, r7, #28
 80097ac:	4619      	mov	r1, r3
 80097ae:	4805      	ldr	r0, [pc, #20]	; (80097c4 <HAL_UART_MspInit+0xf0>)
 80097b0:	f001 fa10 	bl	800abd4 <HAL_GPIO_Init>
}
 80097b4:	bf00      	nop
 80097b6:	3730      	adds	r7, #48	; 0x30
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	40004400 	.word	0x40004400
 80097c0:	40023800 	.word	0x40023800
 80097c4:	40020c00 	.word	0x40020c00
 80097c8:	40004800 	.word	0x40004800

080097cc <HAL_TIM_Base_MspInit>:
		*/
		HAL_GPIO_DeInit(USART3_GPIO_Port, (USART3_TX_Pin | USART3_RX_Pin));
	}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a0d      	ldr	r2, [pc, #52]	; (8009810 <HAL_TIM_Base_MspInit+0x44>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d113      	bne.n	8009806 <HAL_TIM_Base_MspInit+0x3a>
		//1. Enable TIM6 Clock
		__HAL_RCC_TIM6_CLK_ENABLE();
 80097de:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <HAL_TIM_Base_MspInit+0x48>)
 80097e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e2:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <HAL_TIM_Base_MspInit+0x48>)
 80097e4:	f043 0310 	orr.w	r3, r3, #16
 80097e8:	6413      	str	r3, [r2, #64]	; 0x40
 80097ea:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <HAL_TIM_Base_MspInit+0x48>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	f003 0310 	and.w	r3, r3, #16
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	68fb      	ldr	r3, [r7, #12]

		//2. Enable TIM6 IRQ
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80097f6:	2036      	movs	r0, #54	; 0x36
 80097f8:	f001 f915 	bl	800aa26 <HAL_NVIC_EnableIRQ>

		//3. Setup TIM6_DAC_IRQn priority
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80097fc:	2200      	movs	r2, #0
 80097fe:	210f      	movs	r1, #15
 8009800:	2036      	movs	r0, #54	; 0x36
 8009802:	f001 f8f4 	bl	800a9ee <HAL_NVIC_SetPriority>
	}
}
 8009806:	bf00      	nop
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	40001000 	.word	0x40001000
 8009814:	40023800 	.word	0x40023800

08009818 <ITM_SendChar>:
#define ITM_TER         	*((volatile uint32_t*) 0xE0000E00 )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TCR            	*((volatile uint32_t*) 0xE0000E80 )

void ITM_SendChar(uint8_t ch)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	71fb      	strb	r3, [r7, #7]
    /* Stimulus Port #N is enabled when bit STIMENA[N] is set*/
	ITM_TER |= ( 1 << 0);
 8009822:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <ITM_SendChar+0x48>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a0e      	ldr	r2, [pc, #56]	; (8009860 <ITM_SendChar+0x48>)
 8009828:	f043 0301 	orr.w	r3, r3, #1
 800982c:	6013      	str	r3, [r2, #0]

	/*Enable ITM. This is the master enable and must be set to allow
	writes to all ITM registers, including the control register. */
	ITM_TCR |= ( 1 << 0);
 800982e:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <ITM_SendChar+0x4c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <ITM_SendChar+0x4c>)
 8009834:	f043 0301 	orr.w	r3, r3, #1
 8009838:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800983a:	bf00      	nop
 800983c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0f8      	beq.n	800983c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800984a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	6013      	str	r3, [r2, #0]
}
 8009852:	bf00      	nop
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	e0000e00 	.word	0xe0000e00
 8009864:	e0000e80 	.word	0xe0000e80

08009868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
	return 1;
 800986c:	2301      	movs	r3, #1
}
 800986e:	4618      	mov	r0, r3
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <_kill>:

int _kill(int pid, int sig)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009882:	f003 ff31 	bl	800d6e8 <__errno>
 8009886:	4603      	mov	r3, r0
 8009888:	2216      	movs	r2, #22
 800988a:	601a      	str	r2, [r3, #0]
	return -1;
 800988c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <_exit>:

void _exit (int status)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80098a0:	f04f 31ff 	mov.w	r1, #4294967295
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff ffe7 	bl	8009878 <_kill>
	while (1) {}		/* Make sure we hang here */
 80098aa:	e7fe      	b.n	80098aa <_exit+0x12>

080098ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	e00a      	b.n	80098d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80098be:	f3af 8000 	nop.w
 80098c2:	4601      	mov	r1, r0
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	60ba      	str	r2, [r7, #8]
 80098ca:	b2ca      	uxtb	r2, r1
 80098cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	3301      	adds	r3, #1
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	dbf0      	blt.n	80098be <_read+0x12>
	}

return len;
 80098dc:	687b      	ldr	r3, [r7, #4]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b086      	sub	sp, #24
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	e009      	b.n	800990c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	60ba      	str	r2, [r7, #8]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff ff89 	bl	8009818 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	3301      	adds	r3, #1
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	dbf1      	blt.n	80098f8 <_write+0x12>
	}
	return len;
 8009914:	687b      	ldr	r3, [r7, #4]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <_close>:

int _close(int file)
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
	return -1;
 8009926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800992a:	4618      	mov	r0, r3
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009936:	b480      	push	{r7}
 8009938:	b083      	sub	sp, #12
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009946:	605a      	str	r2, [r3, #4]
	return 0;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <_isatty>:

int _isatty(int file)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
	return 1;
 800995e:	2301      	movs	r3, #1
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
	return 0;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
	...

08009988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009990:	4a14      	ldr	r2, [pc, #80]	; (80099e4 <_sbrk+0x5c>)
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <_sbrk+0x60>)
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800999c:	4b13      	ldr	r3, [pc, #76]	; (80099ec <_sbrk+0x64>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d102      	bne.n	80099aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80099a4:	4b11      	ldr	r3, [pc, #68]	; (80099ec <_sbrk+0x64>)
 80099a6:	4a12      	ldr	r2, [pc, #72]	; (80099f0 <_sbrk+0x68>)
 80099a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80099aa:	4b10      	ldr	r3, [pc, #64]	; (80099ec <_sbrk+0x64>)
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d207      	bcs.n	80099c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80099b8:	f003 fe96 	bl	800d6e8 <__errno>
 80099bc:	4603      	mov	r3, r0
 80099be:	220c      	movs	r2, #12
 80099c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80099c2:	f04f 33ff 	mov.w	r3, #4294967295
 80099c6:	e009      	b.n	80099dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80099c8:	4b08      	ldr	r3, [pc, #32]	; (80099ec <_sbrk+0x64>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80099ce:	4b07      	ldr	r3, [pc, #28]	; (80099ec <_sbrk+0x64>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4413      	add	r3, r2
 80099d6:	4a05      	ldr	r2, [pc, #20]	; (80099ec <_sbrk+0x64>)
 80099d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80099da:	68fb      	ldr	r3, [r7, #12]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20050000 	.word	0x20050000
 80099e8:	00000400 	.word	0x00000400
 80099ec:	20000570 	.word	0x20000570
 80099f0:	20000588 	.word	0x20000588

080099f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80099f8:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <SystemInit+0x20>)
 80099fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fe:	4a05      	ldr	r2, [pc, #20]	; (8009a14 <SystemInit+0x20>)
 8009a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009a08:	bf00      	nop
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	e000ed00 	.word	0xe000ed00

08009a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009a1c:	480d      	ldr	r0, [pc, #52]	; (8009a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009a1e:	490e      	ldr	r1, [pc, #56]	; (8009a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009a20:	4a0e      	ldr	r2, [pc, #56]	; (8009a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009a24:	e002      	b.n	8009a2c <LoopCopyDataInit>

08009a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009a2a:	3304      	adds	r3, #4

08009a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009a30:	d3f9      	bcc.n	8009a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009a32:	4a0b      	ldr	r2, [pc, #44]	; (8009a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009a34:	4c0b      	ldr	r4, [pc, #44]	; (8009a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009a38:	e001      	b.n	8009a3e <LoopFillZerobss>

08009a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009a3c:	3204      	adds	r2, #4

08009a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009a40:	d3fb      	bcc.n	8009a3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009a42:	f7ff ffd7 	bl	80099f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009a46:	f003 fe55 	bl	800d6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009a4a:	f7fd fa8f 	bl	8006f6c <main>
  bx  lr    
 8009a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009a50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8009a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009a58:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8009a5c:	080142f8 	.word	0x080142f8
  ldr r2, =_sbss
 8009a60:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8009a64:	20000588 	.word	0x20000588

08009a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009a68:	e7fe      	b.n	8009a68 <ADC_IRQHandler>

08009a6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009a6e:	2003      	movs	r0, #3
 8009a70:	f000 ffb2 	bl	800a9d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009a74:	2000      	movs	r0, #0
 8009a76:	f000 f805 	bl	8009a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009a7a:	f7ff fd89 	bl	8009590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009a8c:	4b12      	ldr	r3, [pc, #72]	; (8009ad8 <HAL_InitTick+0x54>)
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	4b12      	ldr	r3, [pc, #72]	; (8009adc <HAL_InitTick+0x58>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	4619      	mov	r1, r3
 8009a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 ffcd 	bl	800aa42 <HAL_SYSTICK_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e00e      	b.n	8009ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b0f      	cmp	r3, #15
 8009ab6:	d80a      	bhi.n	8009ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ab8:	2200      	movs	r2, #0
 8009aba:	6879      	ldr	r1, [r7, #4]
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac0:	f000 ff95 	bl	800a9ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ac4:	4a06      	ldr	r2, [pc, #24]	; (8009ae0 <HAL_InitTick+0x5c>)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	e000      	b.n	8009ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000008 	.word	0x20000008
 8009adc:	20000010 	.word	0x20000010
 8009ae0:	2000000c 	.word	0x2000000c

08009ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ae8:	4b06      	ldr	r3, [pc, #24]	; (8009b04 <HAL_IncTick+0x20>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	461a      	mov	r2, r3
 8009aee:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <HAL_IncTick+0x24>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4413      	add	r3, r2
 8009af4:	4a04      	ldr	r2, [pc, #16]	; (8009b08 <HAL_IncTick+0x24>)
 8009af6:	6013      	str	r3, [r2, #0]
}
 8009af8:	bf00      	nop
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20000010 	.word	0x20000010
 8009b08:	20000574 	.word	0x20000574

08009b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8009b10:	4b03      	ldr	r3, [pc, #12]	; (8009b20 <HAL_GetTick+0x14>)
 8009b12:	681b      	ldr	r3, [r3, #0]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	20000574 	.word	0x20000574

08009b24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e0ed      	b.n	8009d12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d102      	bne.n	8009b48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff fd62 	bl	800960c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f042 0201 	orr.w	r2, r2, #1
 8009b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b58:	f7ff ffd8 	bl	8009b0c <HAL_GetTick>
 8009b5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009b5e:	e012      	b.n	8009b86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009b60:	f7ff ffd4 	bl	8009b0c <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b0a      	cmp	r3, #10
 8009b6c:	d90b      	bls.n	8009b86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2205      	movs	r2, #5
 8009b7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e0c5      	b.n	8009d12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0e5      	beq.n	8009b60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 0202 	bic.w	r2, r2, #2
 8009ba2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ba4:	f7ff ffb2 	bl	8009b0c <HAL_GetTick>
 8009ba8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009baa:	e012      	b.n	8009bd2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009bac:	f7ff ffae 	bl	8009b0c <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	2b0a      	cmp	r3, #10
 8009bb8:	d90b      	bls.n	8009bd2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2205      	movs	r2, #5
 8009bca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e09f      	b.n	8009d12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e5      	bne.n	8009bac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7e1b      	ldrb	r3, [r3, #24]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d108      	bne.n	8009bfa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	e007      	b.n	8009c0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	7e5b      	ldrb	r3, [r3, #25]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d108      	bne.n	8009c24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e007      	b.n	8009c34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	7e9b      	ldrb	r3, [r3, #26]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d108      	bne.n	8009c4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0220 	orr.w	r2, r2, #32
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	e007      	b.n	8009c5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0220 	bic.w	r2, r2, #32
 8009c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7edb      	ldrb	r3, [r3, #27]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d108      	bne.n	8009c78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0210 	bic.w	r2, r2, #16
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	e007      	b.n	8009c88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0210 	orr.w	r2, r2, #16
 8009c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	7f1b      	ldrb	r3, [r3, #28]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d108      	bne.n	8009ca2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0208 	orr.w	r2, r2, #8
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	e007      	b.n	8009cb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f022 0208 	bic.w	r2, r2, #8
 8009cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7f5b      	ldrb	r3, [r3, #29]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d108      	bne.n	8009ccc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f042 0204 	orr.w	r2, r2, #4
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	e007      	b.n	8009cdc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 0204 	bic.w	r2, r2, #4
 8009cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	ea42 0103 	orr.w	r1, r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	1e5a      	subs	r2, r3, #1
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d32:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009d34:	7cfb      	ldrb	r3, [r7, #19]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d003      	beq.n	8009d42 <HAL_CAN_ConfigFilter+0x26>
 8009d3a:	7cfb      	ldrb	r3, [r7, #19]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	f040 80be 	bne.w	8009ebe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009d42:	4b65      	ldr	r3, [pc, #404]	; (8009ed8 <HAL_CAN_ConfigFilter+0x1bc>)
 8009d44:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d4c:	f043 0201 	orr.w	r2, r3, #1
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d5c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	021b      	lsls	r3, r3, #8
 8009d72:	431a      	orrs	r2, r3
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	f003 031f 	and.w	r3, r3, #31
 8009d82:	2201      	movs	r2, #1
 8009d84:	fa02 f303 	lsl.w	r3, r2, r3
 8009d88:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	43db      	mvns	r3, r3
 8009d94:	401a      	ands	r2, r3
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d123      	bne.n	8009dec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	43db      	mvns	r3, r3
 8009dae:	401a      	ands	r2, r3
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009dc6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	3248      	adds	r2, #72	; 0x48
 8009dcc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009de0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009de2:	6979      	ldr	r1, [r7, #20]
 8009de4:	3348      	adds	r3, #72	; 0x48
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	440b      	add	r3, r1
 8009dea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d122      	bne.n	8009e3a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009e14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	3248      	adds	r2, #72	; 0x48
 8009e1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009e2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009e30:	6979      	ldr	r1, [r7, #20]
 8009e32:	3348      	adds	r3, #72	; 0x48
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	440b      	add	r3, r1
 8009e38:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d109      	bne.n	8009e56 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	43db      	mvns	r3, r3
 8009e4c:	401a      	ands	r2, r3
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009e54:	e007      	b.n	8009e66 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d109      	bne.n	8009e82 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	43db      	mvns	r3, r3
 8009e78:	401a      	ands	r2, r3
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009e80:	e007      	b.n	8009e92 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d107      	bne.n	8009eaa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009eb0:	f023 0201 	bic.w	r2, r3, #1
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e006      	b.n	8009ecc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
  }
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	371c      	adds	r7, #28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	40006400 	.word	0x40006400

08009edc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d12e      	bne.n	8009f4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 0201 	bic.w	r2, r2, #1
 8009f06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f08:	f7ff fe00 	bl	8009b0c <HAL_GetTick>
 8009f0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009f0e:	e012      	b.n	8009f36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009f10:	f7ff fdfc 	bl	8009b0c <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b0a      	cmp	r3, #10
 8009f1c:	d90b      	bls.n	8009f36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2205      	movs	r2, #5
 8009f2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e012      	b.n	8009f5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e5      	bne.n	8009f10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e006      	b.n	8009f5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
  }
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b089      	sub	sp, #36	; 0x24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f78:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009f82:	7ffb      	ldrb	r3, [r7, #31]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d003      	beq.n	8009f90 <HAL_CAN_AddTxMessage+0x2c>
 8009f88:	7ffb      	ldrb	r3, [r7, #31]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	f040 80b8 	bne.w	800a100 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10a      	bne.n	8009fb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 80a0 	beq.w	800a0f0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	0e1b      	lsrs	r3, r3, #24
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d907      	bls.n	8009fd0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e09e      	b.n	800a10e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	409a      	lsls	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10d      	bne.n	8009ffe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009fec:	68f9      	ldr	r1, [r7, #12]
 8009fee:	6809      	ldr	r1, [r1, #0]
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	3318      	adds	r3, #24
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	440b      	add	r3, r1
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	e00f      	b.n	800a01e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a008:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800a012:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	3318      	adds	r3, #24
 800a018:	011b      	lsls	r3, r3, #4
 800a01a:	440b      	add	r3, r1
 800a01c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6819      	ldr	r1, [r3, #0]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	691a      	ldr	r2, [r3, #16]
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	3318      	adds	r3, #24
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	440b      	add	r3, r1
 800a02e:	3304      	adds	r3, #4
 800a030:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	7d1b      	ldrb	r3, [r3, #20]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d111      	bne.n	800a05e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	3318      	adds	r3, #24
 800a042:	011b      	lsls	r3, r3, #4
 800a044:	4413      	add	r3, r2
 800a046:	3304      	adds	r3, #4
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	6811      	ldr	r1, [r2, #0]
 800a04e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	3318      	adds	r3, #24
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	440b      	add	r3, r1
 800a05a:	3304      	adds	r3, #4
 800a05c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3307      	adds	r3, #7
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	061a      	lsls	r2, r3, #24
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3306      	adds	r3, #6
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	041b      	lsls	r3, r3, #16
 800a06e:	431a      	orrs	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3305      	adds	r3, #5
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	021b      	lsls	r3, r3, #8
 800a078:	4313      	orrs	r3, r2
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	3204      	adds	r2, #4
 800a07e:	7812      	ldrb	r2, [r2, #0]
 800a080:	4610      	mov	r0, r2
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	6811      	ldr	r1, [r2, #0]
 800a086:	ea43 0200 	orr.w	r2, r3, r0
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	011b      	lsls	r3, r3, #4
 800a08e:	440b      	add	r3, r1
 800a090:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800a094:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3303      	adds	r3, #3
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	061a      	lsls	r2, r3, #24
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3302      	adds	r3, #2
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	041b      	lsls	r3, r3, #16
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	021b      	lsls	r3, r3, #8
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	6811      	ldr	r1, [r2, #0]
 800a0bc:	ea43 0200 	orr.w	r2, r3, r0
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	011b      	lsls	r3, r3, #4
 800a0c4:	440b      	add	r3, r1
 800a0c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800a0ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	3318      	adds	r3, #24
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	4413      	add	r3, r2
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	6811      	ldr	r1, [r2, #0]
 800a0de:	f043 0201 	orr.w	r2, r3, #1
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	3318      	adds	r3, #24
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	440b      	add	r3, r1
 800a0ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e00e      	b.n	800a10e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e006      	b.n	800a10e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
  }
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3724      	adds	r7, #36	; 0x24
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800a11a:	b480      	push	{r7}
 800a11c:	b087      	sub	sp, #28
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	607a      	str	r2, [r7, #4]
 800a126:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a12e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800a130:	7dfb      	ldrb	r3, [r7, #23]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d003      	beq.n	800a13e <HAL_CAN_GetRxMessage+0x24>
 800a136:	7dfb      	ldrb	r3, [r7, #23]
 800a138:	2b02      	cmp	r3, #2
 800a13a:	f040 80f3 	bne.w	800a324 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10e      	bne.n	800a162 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f003 0303 	and.w	r3, r3, #3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d116      	bne.n	800a180 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e0e7      	b.n	800a332 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d107      	bne.n	800a180 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e0d8      	b.n	800a332 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	331b      	adds	r3, #27
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	4413      	add	r3, r2
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0204 	and.w	r2, r3, #4
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10c      	bne.n	800a1b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	331b      	adds	r3, #27
 800a1a6:	011b      	lsls	r3, r3, #4
 800a1a8:	4413      	add	r3, r2
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	0d5b      	lsrs	r3, r3, #21
 800a1ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	e00b      	b.n	800a1d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	331b      	adds	r3, #27
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	4413      	add	r3, r2
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	08db      	lsrs	r3, r3, #3
 800a1c8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	331b      	adds	r3, #27
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	4413      	add	r3, r2
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0202 	and.w	r2, r3, #2
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	331b      	adds	r3, #27
 800a1ee:	011b      	lsls	r3, r3, #4
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 020f 	and.w	r2, r3, #15
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	331b      	adds	r3, #27
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	4413      	add	r3, r2
 800a20a:	3304      	adds	r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	0a1b      	lsrs	r3, r3, #8
 800a210:	b2da      	uxtb	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	331b      	adds	r3, #27
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	4413      	add	r3, r2
 800a222:	3304      	adds	r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	b29a      	uxth	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	4413      	add	r3, r2
 800a238:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	0a1a      	lsrs	r2, r3, #8
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	3301      	adds	r3, #1
 800a25a:	b2d2      	uxtb	r2, r2
 800a25c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	4413      	add	r3, r2
 800a268:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	0c1a      	lsrs	r2, r3, #16
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	3302      	adds	r3, #2
 800a274:	b2d2      	uxtb	r2, r2
 800a276:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	011b      	lsls	r3, r3, #4
 800a280:	4413      	add	r3, r2
 800a282:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	0e1a      	lsrs	r2, r3, #24
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	3303      	adds	r3, #3
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	011b      	lsls	r3, r3, #4
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	b2d2      	uxtb	r2, r2
 800a2a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	0a1a      	lsrs	r2, r3, #8
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	3305      	adds	r3, #5
 800a2c0:	b2d2      	uxtb	r2, r2
 800a2c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	0c1a      	lsrs	r2, r3, #16
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	3306      	adds	r3, #6
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	011b      	lsls	r3, r3, #4
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	0e1a      	lsrs	r2, r3, #24
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	3307      	adds	r3, #7
 800a2f4:	b2d2      	uxtb	r2, r2
 800a2f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d108      	bne.n	800a310 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68da      	ldr	r2, [r3, #12]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f042 0220 	orr.w	r2, r2, #32
 800a30c:	60da      	str	r2, [r3, #12]
 800a30e:	e007      	b.n	800a320 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	691a      	ldr	r2, [r3, #16]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f042 0220 	orr.w	r2, r2, #32
 800a31e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	e006      	b.n	800a332 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
  }
}
 800a332:	4618      	mov	r0, r3
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800a33e:	b480      	push	{r7}
 800a340:	b085      	sub	sp, #20
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a352:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800a354:	7afb      	ldrb	r3, [r7, #11]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d002      	beq.n	800a360 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800a35a:	7afb      	ldrb	r3, [r7, #11]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d10f      	bne.n	800a380 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f003 0303 	and.w	r3, r3, #3
 800a370:	60fb      	str	r3, [r7, #12]
 800a372:	e005      	b.n	800a380 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800a380:	68fb      	ldr	r3, [r7, #12]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800a38e:	b480      	push	{r7}
 800a390:	b085      	sub	sp, #20
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a39e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d002      	beq.n	800a3ac <HAL_CAN_ActivateNotification+0x1e>
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d109      	bne.n	800a3c0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6959      	ldr	r1, [r3, #20]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e006      	b.n	800a3ce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
  }
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b085      	sub	sp, #20
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d002      	beq.n	800a3f8 <HAL_CAN_DeactivateNotification+0x1e>
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d10a      	bne.n	800a40e <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6959      	ldr	r1, [r3, #20]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	43da      	mvns	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	400a      	ands	r2, r1
 800a408:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	e006      	b.n	800a41c <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
  }
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08a      	sub	sp, #40	; 0x28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a430:	2300      	movs	r3, #0
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d07c      	beq.n	800a568 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d023      	beq.n	800a4c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2201      	movs	r2, #1
 800a47e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fe ff96 	bl	80093bc <HAL_CAN_TxMailbox0CompleteCallback>
 800a490:	e016      	b.n	800a4c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d004      	beq.n	800a4a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a4a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a4:	e00c      	b.n	800a4c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d004      	beq.n	800a4ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b8:	e002      	b.n	800a4c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f96b 	bl	800a796 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d024      	beq.n	800a514 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7fe ff98 	bl	8009414 <HAL_CAN_TxMailbox1CompleteCallback>
 800a4e4:	e016      	b.n	800a514 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f8:	e00c      	b.n	800a514 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
 800a50c:	e002      	b.n	800a514 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f94b 	bl	800a7aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d024      	beq.n	800a568 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a526:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7fe ff9a 	bl	800946c <HAL_CAN_TxMailbox2CompleteCallback>
 800a538:	e016      	b.n	800a568 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d004      	beq.n	800a54e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
 800a54c:	e00c      	b.n	800a568 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d004      	beq.n	800a562 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
 800a560:	e002      	b.n	800a568 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f92b 	bl	800a7be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	f003 0308 	and.w	r3, r3, #8
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00c      	beq.n	800a58c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f003 0310 	and.w	r3, r3, #16
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d007      	beq.n	800a58c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a582:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2210      	movs	r2, #16
 800a58a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a58c:	6a3b      	ldr	r3, [r7, #32]
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f003 0308 	and.w	r3, r3, #8
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d006      	beq.n	800a5ae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2208      	movs	r2, #8
 800a5a6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f912 	bl	800a7d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	f003 0302 	and.w	r3, r3, #2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d009      	beq.n	800a5cc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7fe ff7c 	bl	80094c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00c      	beq.n	800a5f0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f003 0310 	and.w	r3, r3, #16
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d007      	beq.n	800a5f0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2210      	movs	r2, #16
 800a5ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	f003 0320 	and.w	r3, r3, #32
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00b      	beq.n	800a612 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	f003 0308 	and.w	r3, r3, #8
 800a600:	2b00      	cmp	r3, #0
 800a602:	d006      	beq.n	800a612 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2208      	movs	r2, #8
 800a60a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f8f4 	bl	800a7fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	f003 0310 	and.w	r3, r3, #16
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d009      	beq.n	800a630 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f8db 	bl	800a7e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00b      	beq.n	800a652 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	f003 0310 	and.w	r3, r3, #16
 800a640:	2b00      	cmp	r3, #0
 800a642:	d006      	beq.n	800a652 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2210      	movs	r2, #16
 800a64a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f8de 	bl	800a80e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00b      	beq.n	800a674 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	2b00      	cmp	r3, #0
 800a664:	d006      	beq.n	800a674 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2208      	movs	r2, #8
 800a66c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f8d7 	bl	800a822 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d07b      	beq.n	800a776 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	d072      	beq.n	800a76e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d008      	beq.n	800a6a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	f043 0301 	orr.w	r3, r3, #1
 800a6a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a6a4:	6a3b      	ldr	r3, [r7, #32]
 800a6a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d008      	beq.n	800a6c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	f043 0302 	orr.w	r3, r3, #2
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d008      	beq.n	800a6dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d003      	beq.n	800a6dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	f043 0304 	orr.w	r3, r3, #4
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d043      	beq.n	800a76e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d03e      	beq.n	800a76e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6f6:	2b60      	cmp	r3, #96	; 0x60
 800a6f8:	d02b      	beq.n	800a752 <HAL_CAN_IRQHandler+0x32a>
 800a6fa:	2b60      	cmp	r3, #96	; 0x60
 800a6fc:	d82e      	bhi.n	800a75c <HAL_CAN_IRQHandler+0x334>
 800a6fe:	2b50      	cmp	r3, #80	; 0x50
 800a700:	d022      	beq.n	800a748 <HAL_CAN_IRQHandler+0x320>
 800a702:	2b50      	cmp	r3, #80	; 0x50
 800a704:	d82a      	bhi.n	800a75c <HAL_CAN_IRQHandler+0x334>
 800a706:	2b40      	cmp	r3, #64	; 0x40
 800a708:	d019      	beq.n	800a73e <HAL_CAN_IRQHandler+0x316>
 800a70a:	2b40      	cmp	r3, #64	; 0x40
 800a70c:	d826      	bhi.n	800a75c <HAL_CAN_IRQHandler+0x334>
 800a70e:	2b30      	cmp	r3, #48	; 0x30
 800a710:	d010      	beq.n	800a734 <HAL_CAN_IRQHandler+0x30c>
 800a712:	2b30      	cmp	r3, #48	; 0x30
 800a714:	d822      	bhi.n	800a75c <HAL_CAN_IRQHandler+0x334>
 800a716:	2b10      	cmp	r3, #16
 800a718:	d002      	beq.n	800a720 <HAL_CAN_IRQHandler+0x2f8>
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	d005      	beq.n	800a72a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a71e:	e01d      	b.n	800a75c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	f043 0308 	orr.w	r3, r3, #8
 800a726:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a728:	e019      	b.n	800a75e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	f043 0310 	orr.w	r3, r3, #16
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a732:	e014      	b.n	800a75e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	f043 0320 	orr.w	r3, r3, #32
 800a73a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a73c:	e00f      	b.n	800a75e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a744:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a746:	e00a      	b.n	800a75e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a750:	e005      	b.n	800a75e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a75a:	e000      	b.n	800a75e <HAL_CAN_IRQHandler+0x336>
            break;
 800a75c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	699a      	ldr	r2, [r3, #24]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a76c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2204      	movs	r2, #4
 800a774:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d008      	beq.n	800a78e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	431a      	orrs	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7fe febb 	bl	8009504 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a78e:	bf00      	nop
 800a790:	3728      	adds	r7, #40	; 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a79e:	bf00      	nop
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a7da:	bf00      	nop
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a7ee:	bf00      	nop
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a816:	bf00      	nop
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a82a:	bf00      	nop
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
	...

0800a838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f003 0307 	and.w	r3, r3, #7
 800a846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a848:	4b0b      	ldr	r3, [pc, #44]	; (800a878 <__NVIC_SetPriorityGrouping+0x40>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a854:	4013      	ands	r3, r2
 800a856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <__NVIC_SetPriorityGrouping+0x44>)
 800a862:	4313      	orrs	r3, r2
 800a864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a866:	4a04      	ldr	r2, [pc, #16]	; (800a878 <__NVIC_SetPriorityGrouping+0x40>)
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	60d3      	str	r3, [r2, #12]
}
 800a86c:	bf00      	nop
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	e000ed00 	.word	0xe000ed00
 800a87c:	05fa0000 	.word	0x05fa0000

0800a880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a880:	b480      	push	{r7}
 800a882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a884:	4b04      	ldr	r3, [pc, #16]	; (800a898 <__NVIC_GetPriorityGrouping+0x18>)
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	0a1b      	lsrs	r3, r3, #8
 800a88a:	f003 0307 	and.w	r3, r3, #7
}
 800a88e:	4618      	mov	r0, r3
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	e000ed00 	.word	0xe000ed00

0800a89c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	db0b      	blt.n	800a8c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	f003 021f 	and.w	r2, r3, #31
 800a8b4:	4907      	ldr	r1, [pc, #28]	; (800a8d4 <__NVIC_EnableIRQ+0x38>)
 800a8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ba:	095b      	lsrs	r3, r3, #5
 800a8bc:	2001      	movs	r0, #1
 800a8be:	fa00 f202 	lsl.w	r2, r0, r2
 800a8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a8c6:	bf00      	nop
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	e000e100 	.word	0xe000e100

0800a8d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	db0a      	blt.n	800a902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	490c      	ldr	r1, [pc, #48]	; (800a924 <__NVIC_SetPriority+0x4c>)
 800a8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8f6:	0112      	lsls	r2, r2, #4
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	440b      	add	r3, r1
 800a8fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a900:	e00a      	b.n	800a918 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	b2da      	uxtb	r2, r3
 800a906:	4908      	ldr	r1, [pc, #32]	; (800a928 <__NVIC_SetPriority+0x50>)
 800a908:	79fb      	ldrb	r3, [r7, #7]
 800a90a:	f003 030f 	and.w	r3, r3, #15
 800a90e:	3b04      	subs	r3, #4
 800a910:	0112      	lsls	r2, r2, #4
 800a912:	b2d2      	uxtb	r2, r2
 800a914:	440b      	add	r3, r1
 800a916:	761a      	strb	r2, [r3, #24]
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	e000e100 	.word	0xe000e100
 800a928:	e000ed00 	.word	0xe000ed00

0800a92c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b089      	sub	sp, #36	; 0x24
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f003 0307 	and.w	r3, r3, #7
 800a93e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	f1c3 0307 	rsb	r3, r3, #7
 800a946:	2b04      	cmp	r3, #4
 800a948:	bf28      	it	cs
 800a94a:	2304      	movcs	r3, #4
 800a94c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	3304      	adds	r3, #4
 800a952:	2b06      	cmp	r3, #6
 800a954:	d902      	bls.n	800a95c <NVIC_EncodePriority+0x30>
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	3b03      	subs	r3, #3
 800a95a:	e000      	b.n	800a95e <NVIC_EncodePriority+0x32>
 800a95c:	2300      	movs	r3, #0
 800a95e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a960:	f04f 32ff 	mov.w	r2, #4294967295
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	fa02 f303 	lsl.w	r3, r2, r3
 800a96a:	43da      	mvns	r2, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	401a      	ands	r2, r3
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a974:	f04f 31ff 	mov.w	r1, #4294967295
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	fa01 f303 	lsl.w	r3, r1, r3
 800a97e:	43d9      	mvns	r1, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a984:	4313      	orrs	r3, r2
         );
}
 800a986:	4618      	mov	r0, r3
 800a988:	3724      	adds	r7, #36	; 0x24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
	...

0800a994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9a4:	d301      	bcc.n	800a9aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e00f      	b.n	800a9ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a9aa:	4a0a      	ldr	r2, [pc, #40]	; (800a9d4 <SysTick_Config+0x40>)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a9b2:	210f      	movs	r1, #15
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b8:	f7ff ff8e 	bl	800a8d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a9bc:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <SysTick_Config+0x40>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a9c2:	4b04      	ldr	r3, [pc, #16]	; (800a9d4 <SysTick_Config+0x40>)
 800a9c4:	2207      	movs	r2, #7
 800a9c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	e000e010 	.word	0xe000e010

0800a9d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff ff29 	bl	800a838 <__NVIC_SetPriorityGrouping>
}
 800a9e6:	bf00      	nop
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b086      	sub	sp, #24
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	60b9      	str	r1, [r7, #8]
 800a9f8:	607a      	str	r2, [r7, #4]
 800a9fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800aa00:	f7ff ff3e 	bl	800a880 <__NVIC_GetPriorityGrouping>
 800aa04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	6978      	ldr	r0, [r7, #20]
 800aa0c:	f7ff ff8e 	bl	800a92c <NVIC_EncodePriority>
 800aa10:	4602      	mov	r2, r0
 800aa12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa16:	4611      	mov	r1, r2
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff ff5d 	bl	800a8d8 <__NVIC_SetPriority>
}
 800aa1e:	bf00      	nop
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff ff31 	bl	800a89c <__NVIC_EnableIRQ>
}
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff ffa2 	bl	800a994 <SysTick_Config>
 800aa50:	4603      	mov	r3, r0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
	...

0800aa5c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d106      	bne.n	800aa78 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800aa6a:	4b09      	ldr	r3, [pc, #36]	; (800aa90 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a08      	ldr	r2, [pc, #32]	; (800aa90 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800aa70:	f043 0304 	orr.w	r3, r3, #4
 800aa74:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800aa76:	e005      	b.n	800aa84 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800aa78:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a04      	ldr	r2, [pc, #16]	; (800aa90 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800aa7e:	f023 0304 	bic.w	r3, r3, #4
 800aa82:	6013      	str	r3, [r2, #0]
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	e000e010 	.word	0xe000e010

0800aa94 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800aa98:	f000 f802 	bl	800aaa0 <HAL_SYSTICK_Callback>
}
 800aa9c:	bf00      	nop
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800aabc:	f7ff f826 	bl	8009b0c <HAL_GetTick>
 800aac0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d008      	beq.n	800aae0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2280      	movs	r2, #128	; 0x80
 800aad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e052      	b.n	800ab86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f022 0216 	bic.w	r2, r2, #22
 800aaee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	695a      	ldr	r2, [r3, #20]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aafe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d103      	bne.n	800ab10 <HAL_DMA_Abort+0x62>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d007      	beq.n	800ab20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f022 0208 	bic.w	r2, r2, #8
 800ab1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f022 0201 	bic.w	r2, r2, #1
 800ab2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ab30:	e013      	b.n	800ab5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ab32:	f7fe ffeb 	bl	8009b0c <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	2b05      	cmp	r3, #5
 800ab3e:	d90c      	bls.n	800ab5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2220      	movs	r2, #32
 800ab44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2203      	movs	r2, #3
 800ab4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e015      	b.n	800ab86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e4      	bne.n	800ab32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab6c:	223f      	movs	r2, #63	; 0x3f
 800ab6e:	409a      	lsls	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d004      	beq.n	800abac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2280      	movs	r2, #128	; 0x80
 800aba6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e00c      	b.n	800abc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2205      	movs	r2, #5
 800abb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f022 0201 	bic.w	r2, r2, #1
 800abc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
	...

0800abd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b089      	sub	sp, #36	; 0x24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800abde:	2300      	movs	r3, #0
 800abe0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800abe2:	2300      	movs	r3, #0
 800abe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800abe6:	2300      	movs	r3, #0
 800abe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800abea:	2300      	movs	r3, #0
 800abec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800abee:	2300      	movs	r3, #0
 800abf0:	61fb      	str	r3, [r7, #28]
 800abf2:	e175      	b.n	800aee0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800abf4:	2201      	movs	r2, #1
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	fa02 f303 	lsl.w	r3, r2, r3
 800abfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	4013      	ands	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	f040 8164 	bne.w	800aeda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d005      	beq.n	800ac2a <HAL_GPIO_Init+0x56>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f003 0303 	and.w	r3, r3, #3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d130      	bne.n	800ac8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	2203      	movs	r2, #3
 800ac36:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3a:	43db      	mvns	r3, r3
 800ac3c:	69ba      	ldr	r2, [r7, #24]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69ba      	ldr	r2, [r7, #24]
 800ac58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ac60:	2201      	movs	r2, #1
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	fa02 f303 	lsl.w	r3, r2, r3
 800ac68:	43db      	mvns	r3, r3
 800ac6a:	69ba      	ldr	r2, [r7, #24]
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	091b      	lsrs	r3, r3, #4
 800ac76:	f003 0201 	and.w	r2, r3, #1
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	f003 0303 	and.w	r3, r3, #3
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d017      	beq.n	800acc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	2203      	movs	r2, #3
 800aca4:	fa02 f303 	lsl.w	r3, r2, r3
 800aca8:	43db      	mvns	r3, r3
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	4013      	ands	r3, r2
 800acae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689a      	ldr	r2, [r3, #8]
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	fa02 f303 	lsl.w	r3, r2, r3
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	69ba      	ldr	r2, [r7, #24]
 800acc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	f003 0303 	and.w	r3, r3, #3
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d123      	bne.n	800ad1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	08da      	lsrs	r2, r3, #3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3208      	adds	r2, #8
 800acdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	f003 0307 	and.w	r3, r3, #7
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	220f      	movs	r2, #15
 800acec:	fa02 f303 	lsl.w	r3, r2, r3
 800acf0:	43db      	mvns	r3, r3
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	4013      	ands	r3, r2
 800acf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	691a      	ldr	r2, [r3, #16]
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	fa02 f303 	lsl.w	r3, r2, r3
 800ad08:	69ba      	ldr	r2, [r7, #24]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	08da      	lsrs	r2, r3, #3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3208      	adds	r2, #8
 800ad16:	69b9      	ldr	r1, [r7, #24]
 800ad18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	2203      	movs	r2, #3
 800ad28:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2c:	43db      	mvns	r3, r3
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	4013      	ands	r3, r2
 800ad32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	f003 0203 	and.w	r2, r3, #3
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	fa02 f303 	lsl.w	r3, r2, r3
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 80be 	beq.w	800aeda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad5e:	4b66      	ldr	r3, [pc, #408]	; (800aef8 <HAL_GPIO_Init+0x324>)
 800ad60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad62:	4a65      	ldr	r2, [pc, #404]	; (800aef8 <HAL_GPIO_Init+0x324>)
 800ad64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad68:	6453      	str	r3, [r2, #68]	; 0x44
 800ad6a:	4b63      	ldr	r3, [pc, #396]	; (800aef8 <HAL_GPIO_Init+0x324>)
 800ad6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad72:	60fb      	str	r3, [r7, #12]
 800ad74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800ad76:	4a61      	ldr	r2, [pc, #388]	; (800aefc <HAL_GPIO_Init+0x328>)
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	089b      	lsrs	r3, r3, #2
 800ad7c:	3302      	adds	r3, #2
 800ad7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	f003 0303 	and.w	r3, r3, #3
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	220f      	movs	r2, #15
 800ad8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad92:	43db      	mvns	r3, r3
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	4013      	ands	r3, r2
 800ad98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a58      	ldr	r2, [pc, #352]	; (800af00 <HAL_GPIO_Init+0x32c>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d037      	beq.n	800ae12 <HAL_GPIO_Init+0x23e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a57      	ldr	r2, [pc, #348]	; (800af04 <HAL_GPIO_Init+0x330>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d031      	beq.n	800ae0e <HAL_GPIO_Init+0x23a>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a56      	ldr	r2, [pc, #344]	; (800af08 <HAL_GPIO_Init+0x334>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d02b      	beq.n	800ae0a <HAL_GPIO_Init+0x236>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a55      	ldr	r2, [pc, #340]	; (800af0c <HAL_GPIO_Init+0x338>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d025      	beq.n	800ae06 <HAL_GPIO_Init+0x232>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a54      	ldr	r2, [pc, #336]	; (800af10 <HAL_GPIO_Init+0x33c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d01f      	beq.n	800ae02 <HAL_GPIO_Init+0x22e>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a53      	ldr	r2, [pc, #332]	; (800af14 <HAL_GPIO_Init+0x340>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d019      	beq.n	800adfe <HAL_GPIO_Init+0x22a>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a52      	ldr	r2, [pc, #328]	; (800af18 <HAL_GPIO_Init+0x344>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d013      	beq.n	800adfa <HAL_GPIO_Init+0x226>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a51      	ldr	r2, [pc, #324]	; (800af1c <HAL_GPIO_Init+0x348>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d00d      	beq.n	800adf6 <HAL_GPIO_Init+0x222>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a50      	ldr	r2, [pc, #320]	; (800af20 <HAL_GPIO_Init+0x34c>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d007      	beq.n	800adf2 <HAL_GPIO_Init+0x21e>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a4f      	ldr	r2, [pc, #316]	; (800af24 <HAL_GPIO_Init+0x350>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d101      	bne.n	800adee <HAL_GPIO_Init+0x21a>
 800adea:	2309      	movs	r3, #9
 800adec:	e012      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800adee:	230a      	movs	r3, #10
 800adf0:	e010      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800adf2:	2308      	movs	r3, #8
 800adf4:	e00e      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800adf6:	2307      	movs	r3, #7
 800adf8:	e00c      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800adfa:	2306      	movs	r3, #6
 800adfc:	e00a      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800adfe:	2305      	movs	r3, #5
 800ae00:	e008      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800ae02:	2304      	movs	r3, #4
 800ae04:	e006      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800ae06:	2303      	movs	r3, #3
 800ae08:	e004      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e002      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <HAL_GPIO_Init+0x240>
 800ae12:	2300      	movs	r3, #0
 800ae14:	69fa      	ldr	r2, [r7, #28]
 800ae16:	f002 0203 	and.w	r2, r2, #3
 800ae1a:	0092      	lsls	r2, r2, #2
 800ae1c:	4093      	lsls	r3, r2
 800ae1e:	69ba      	ldr	r2, [r7, #24]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800ae24:	4935      	ldr	r1, [pc, #212]	; (800aefc <HAL_GPIO_Init+0x328>)
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	089b      	lsrs	r3, r3, #2
 800ae2a:	3302      	adds	r3, #2
 800ae2c:	69ba      	ldr	r2, [r7, #24]
 800ae2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae32:	4b3d      	ldr	r3, [pc, #244]	; (800af28 <HAL_GPIO_Init+0x354>)
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	43db      	mvns	r3, r3
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ae56:	4a34      	ldr	r2, [pc, #208]	; (800af28 <HAL_GPIO_Init+0x354>)
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae5c:	4b32      	ldr	r3, [pc, #200]	; (800af28 <HAL_GPIO_Init+0x354>)
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	43db      	mvns	r3, r3
 800ae66:	69ba      	ldr	r2, [r7, #24]
 800ae68:	4013      	ands	r3, r2
 800ae6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae80:	4a29      	ldr	r2, [pc, #164]	; (800af28 <HAL_GPIO_Init+0x354>)
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ae86:	4b28      	ldr	r3, [pc, #160]	; (800af28 <HAL_GPIO_Init+0x354>)
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	43db      	mvns	r3, r3
 800ae90:	69ba      	ldr	r2, [r7, #24]
 800ae92:	4013      	ands	r3, r2
 800ae94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aeaa:	4a1f      	ldr	r2, [pc, #124]	; (800af28 <HAL_GPIO_Init+0x354>)
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800aeb0:	4b1d      	ldr	r3, [pc, #116]	; (800af28 <HAL_GPIO_Init+0x354>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	43db      	mvns	r3, r3
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	4013      	ands	r3, r2
 800aebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800aed4:	4a14      	ldr	r2, [pc, #80]	; (800af28 <HAL_GPIO_Init+0x354>)
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	3301      	adds	r3, #1
 800aede:	61fb      	str	r3, [r7, #28]
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	2b0f      	cmp	r3, #15
 800aee4:	f67f ae86 	bls.w	800abf4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	3724      	adds	r7, #36	; 0x24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40023800 	.word	0x40023800
 800aefc:	40013800 	.word	0x40013800
 800af00:	40020000 	.word	0x40020000
 800af04:	40020400 	.word	0x40020400
 800af08:	40020800 	.word	0x40020800
 800af0c:	40020c00 	.word	0x40020c00
 800af10:	40021000 	.word	0x40021000
 800af14:	40021400 	.word	0x40021400
 800af18:	40021800 	.word	0x40021800
 800af1c:	40021c00 	.word	0x40021c00
 800af20:	40022000 	.word	0x40022000
 800af24:	40022400 	.word	0x40022400
 800af28:	40013c00 	.word	0x40013c00

0800af2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	807b      	strh	r3, [r7, #2]
 800af38:	4613      	mov	r3, r2
 800af3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800af3c:	787b      	ldrb	r3, [r7, #1]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800af42:	887a      	ldrh	r2, [r7, #2]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800af48:	e003      	b.n	800af52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800af4a:	887b      	ldrh	r3, [r7, #2]
 800af4c:	041a      	lsls	r2, r3, #16
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	619a      	str	r2, [r3, #24]
}
 800af52:	bf00      	nop
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
	...

0800af60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800af68:	2300      	movs	r3, #0
 800af6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e291      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 8087 	beq.w	800b092 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800af84:	4b96      	ldr	r3, [pc, #600]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f003 030c 	and.w	r3, r3, #12
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d00c      	beq.n	800afaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af90:	4b93      	ldr	r3, [pc, #588]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	f003 030c 	and.w	r3, r3, #12
 800af98:	2b08      	cmp	r3, #8
 800af9a:	d112      	bne.n	800afc2 <HAL_RCC_OscConfig+0x62>
 800af9c:	4b90      	ldr	r3, [pc, #576]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afa8:	d10b      	bne.n	800afc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afaa:	4b8d      	ldr	r3, [pc, #564]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d06c      	beq.n	800b090 <HAL_RCC_OscConfig+0x130>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d168      	bne.n	800b090 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e26b      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afca:	d106      	bne.n	800afda <HAL_RCC_OscConfig+0x7a>
 800afcc:	4b84      	ldr	r3, [pc, #528]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a83      	ldr	r2, [pc, #524]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800afd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	e02e      	b.n	800b038 <HAL_RCC_OscConfig+0xd8>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10c      	bne.n	800affc <HAL_RCC_OscConfig+0x9c>
 800afe2:	4b7f      	ldr	r3, [pc, #508]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a7e      	ldr	r2, [pc, #504]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800afe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afec:	6013      	str	r3, [r2, #0]
 800afee:	4b7c      	ldr	r3, [pc, #496]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a7b      	ldr	r2, [pc, #492]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800aff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aff8:	6013      	str	r3, [r2, #0]
 800affa:	e01d      	b.n	800b038 <HAL_RCC_OscConfig+0xd8>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b004:	d10c      	bne.n	800b020 <HAL_RCC_OscConfig+0xc0>
 800b006:	4b76      	ldr	r3, [pc, #472]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a75      	ldr	r2, [pc, #468]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b00c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	4b73      	ldr	r3, [pc, #460]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a72      	ldr	r2, [pc, #456]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	e00b      	b.n	800b038 <HAL_RCC_OscConfig+0xd8>
 800b020:	4b6f      	ldr	r3, [pc, #444]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a6e      	ldr	r2, [pc, #440]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	4b6c      	ldr	r3, [pc, #432]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a6b      	ldr	r2, [pc, #428]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d013      	beq.n	800b068 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b040:	f7fe fd64 	bl	8009b0c <HAL_GetTick>
 800b044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b046:	e008      	b.n	800b05a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b048:	f7fe fd60 	bl	8009b0c <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	2b64      	cmp	r3, #100	; 0x64
 800b054:	d901      	bls.n	800b05a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e21f      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b05a:	4b61      	ldr	r3, [pc, #388]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0f0      	beq.n	800b048 <HAL_RCC_OscConfig+0xe8>
 800b066:	e014      	b.n	800b092 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b068:	f7fe fd50 	bl	8009b0c <HAL_GetTick>
 800b06c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b06e:	e008      	b.n	800b082 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b070:	f7fe fd4c 	bl	8009b0c <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b64      	cmp	r3, #100	; 0x64
 800b07c:	d901      	bls.n	800b082 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e20b      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b082:	4b57      	ldr	r3, [pc, #348]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1f0      	bne.n	800b070 <HAL_RCC_OscConfig+0x110>
 800b08e:	e000      	b.n	800b092 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d069      	beq.n	800b172 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b09e:	4b50      	ldr	r3, [pc, #320]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f003 030c 	and.w	r3, r3, #12
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00b      	beq.n	800b0c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b0aa:	4b4d      	ldr	r3, [pc, #308]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f003 030c 	and.w	r3, r3, #12
 800b0b2:	2b08      	cmp	r3, #8
 800b0b4:	d11c      	bne.n	800b0f0 <HAL_RCC_OscConfig+0x190>
 800b0b6:	4b4a      	ldr	r3, [pc, #296]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d116      	bne.n	800b0f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0c2:	4b47      	ldr	r3, [pc, #284]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 0302 	and.w	r3, r3, #2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d005      	beq.n	800b0da <HAL_RCC_OscConfig+0x17a>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d001      	beq.n	800b0da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e1df      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0da:	4b41      	ldr	r3, [pc, #260]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	00db      	lsls	r3, r3, #3
 800b0e8:	493d      	ldr	r1, [pc, #244]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0ee:	e040      	b.n	800b172 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d023      	beq.n	800b140 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0f8:	4b39      	ldr	r3, [pc, #228]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a38      	ldr	r2, [pc, #224]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b0fe:	f043 0301 	orr.w	r3, r3, #1
 800b102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b104:	f7fe fd02 	bl	8009b0c <HAL_GetTick>
 800b108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b10a:	e008      	b.n	800b11e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b10c:	f7fe fcfe 	bl	8009b0c <HAL_GetTick>
 800b110:	4602      	mov	r2, r0
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	2b02      	cmp	r3, #2
 800b118:	d901      	bls.n	800b11e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e1bd      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b11e:	4b30      	ldr	r3, [pc, #192]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0f0      	beq.n	800b10c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b12a:	4b2d      	ldr	r3, [pc, #180]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	4929      	ldr	r1, [pc, #164]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	600b      	str	r3, [r1, #0]
 800b13e:	e018      	b.n	800b172 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b140:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a26      	ldr	r2, [pc, #152]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b146:	f023 0301 	bic.w	r3, r3, #1
 800b14a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b14c:	f7fe fcde 	bl	8009b0c <HAL_GetTick>
 800b150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b152:	e008      	b.n	800b166 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b154:	f7fe fcda 	bl	8009b0c <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d901      	bls.n	800b166 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e199      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b166:	4b1e      	ldr	r3, [pc, #120]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1f0      	bne.n	800b154 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 0308 	and.w	r3, r3, #8
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d038      	beq.n	800b1f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d019      	beq.n	800b1ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b186:	4b16      	ldr	r3, [pc, #88]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b18a:	4a15      	ldr	r2, [pc, #84]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b18c:	f043 0301 	orr.w	r3, r3, #1
 800b190:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b192:	f7fe fcbb 	bl	8009b0c <HAL_GetTick>
 800b196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b198:	e008      	b.n	800b1ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b19a:	f7fe fcb7 	bl	8009b0c <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d901      	bls.n	800b1ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e176      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1ac:	4b0c      	ldr	r3, [pc, #48]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b1ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b0:	f003 0302 	and.w	r3, r3, #2
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0f0      	beq.n	800b19a <HAL_RCC_OscConfig+0x23a>
 800b1b8:	e01a      	b.n	800b1f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1be:	4a08      	ldr	r2, [pc, #32]	; (800b1e0 <HAL_RCC_OscConfig+0x280>)
 800b1c0:	f023 0301 	bic.w	r3, r3, #1
 800b1c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1c6:	f7fe fca1 	bl	8009b0c <HAL_GetTick>
 800b1ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1cc:	e00a      	b.n	800b1e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1ce:	f7fe fc9d 	bl	8009b0c <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d903      	bls.n	800b1e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e15c      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
 800b1e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1e4:	4b91      	ldr	r3, [pc, #580]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b1e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1ee      	bne.n	800b1ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 80a4 	beq.w	800b346 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1fe:	4b8b      	ldr	r3, [pc, #556]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10d      	bne.n	800b226 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b20a:	4b88      	ldr	r3, [pc, #544]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	4a87      	ldr	r2, [pc, #540]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b214:	6413      	str	r3, [r2, #64]	; 0x40
 800b216:	4b85      	ldr	r3, [pc, #532]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b21e:	60bb      	str	r3, [r7, #8]
 800b220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b222:	2301      	movs	r3, #1
 800b224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b226:	4b82      	ldr	r3, [pc, #520]	; (800b430 <HAL_RCC_OscConfig+0x4d0>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d118      	bne.n	800b264 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b232:	4b7f      	ldr	r3, [pc, #508]	; (800b430 <HAL_RCC_OscConfig+0x4d0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a7e      	ldr	r2, [pc, #504]	; (800b430 <HAL_RCC_OscConfig+0x4d0>)
 800b238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b23c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b23e:	f7fe fc65 	bl	8009b0c <HAL_GetTick>
 800b242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b244:	e008      	b.n	800b258 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b246:	f7fe fc61 	bl	8009b0c <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	2b64      	cmp	r3, #100	; 0x64
 800b252:	d901      	bls.n	800b258 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e120      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b258:	4b75      	ldr	r3, [pc, #468]	; (800b430 <HAL_RCC_OscConfig+0x4d0>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b260:	2b00      	cmp	r3, #0
 800b262:	d0f0      	beq.n	800b246 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d106      	bne.n	800b27a <HAL_RCC_OscConfig+0x31a>
 800b26c:	4b6f      	ldr	r3, [pc, #444]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b270:	4a6e      	ldr	r2, [pc, #440]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b272:	f043 0301 	orr.w	r3, r3, #1
 800b276:	6713      	str	r3, [r2, #112]	; 0x70
 800b278:	e02d      	b.n	800b2d6 <HAL_RCC_OscConfig+0x376>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10c      	bne.n	800b29c <HAL_RCC_OscConfig+0x33c>
 800b282:	4b6a      	ldr	r3, [pc, #424]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b286:	4a69      	ldr	r2, [pc, #420]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b288:	f023 0301 	bic.w	r3, r3, #1
 800b28c:	6713      	str	r3, [r2, #112]	; 0x70
 800b28e:	4b67      	ldr	r3, [pc, #412]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	4a66      	ldr	r2, [pc, #408]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b294:	f023 0304 	bic.w	r3, r3, #4
 800b298:	6713      	str	r3, [r2, #112]	; 0x70
 800b29a:	e01c      	b.n	800b2d6 <HAL_RCC_OscConfig+0x376>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	2b05      	cmp	r3, #5
 800b2a2:	d10c      	bne.n	800b2be <HAL_RCC_OscConfig+0x35e>
 800b2a4:	4b61      	ldr	r3, [pc, #388]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a8:	4a60      	ldr	r2, [pc, #384]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2aa:	f043 0304 	orr.w	r3, r3, #4
 800b2ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b2b0:	4b5e      	ldr	r3, [pc, #376]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b4:	4a5d      	ldr	r2, [pc, #372]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2b6:	f043 0301 	orr.w	r3, r3, #1
 800b2ba:	6713      	str	r3, [r2, #112]	; 0x70
 800b2bc:	e00b      	b.n	800b2d6 <HAL_RCC_OscConfig+0x376>
 800b2be:	4b5b      	ldr	r3, [pc, #364]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2c2:	4a5a      	ldr	r2, [pc, #360]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2c4:	f023 0301 	bic.w	r3, r3, #1
 800b2c8:	6713      	str	r3, [r2, #112]	; 0x70
 800b2ca:	4b58      	ldr	r3, [pc, #352]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ce:	4a57      	ldr	r2, [pc, #348]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2d0:	f023 0304 	bic.w	r3, r3, #4
 800b2d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d015      	beq.n	800b30a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2de:	f7fe fc15 	bl	8009b0c <HAL_GetTick>
 800b2e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2e4:	e00a      	b.n	800b2fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2e6:	f7fe fc11 	bl	8009b0c <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d901      	bls.n	800b2fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e0ce      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2fc:	4b4b      	ldr	r3, [pc, #300]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b300:	f003 0302 	and.w	r3, r3, #2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0ee      	beq.n	800b2e6 <HAL_RCC_OscConfig+0x386>
 800b308:	e014      	b.n	800b334 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b30a:	f7fe fbff 	bl	8009b0c <HAL_GetTick>
 800b30e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b310:	e00a      	b.n	800b328 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b312:	f7fe fbfb 	bl	8009b0c <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b320:	4293      	cmp	r3, r2
 800b322:	d901      	bls.n	800b328 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e0b8      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b328:	4b40      	ldr	r3, [pc, #256]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32c:	f003 0302 	and.w	r3, r3, #2
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1ee      	bne.n	800b312 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b334:	7dfb      	ldrb	r3, [r7, #23]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d105      	bne.n	800b346 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b33a:	4b3c      	ldr	r3, [pc, #240]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	4a3b      	ldr	r2, [pc, #236]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 80a4 	beq.w	800b498 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b350:	4b36      	ldr	r3, [pc, #216]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f003 030c 	and.w	r3, r3, #12
 800b358:	2b08      	cmp	r3, #8
 800b35a:	d06b      	beq.n	800b434 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	2b02      	cmp	r3, #2
 800b362:	d149      	bne.n	800b3f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b364:	4b31      	ldr	r3, [pc, #196]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a30      	ldr	r2, [pc, #192]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b36a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b36e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b370:	f7fe fbcc 	bl	8009b0c <HAL_GetTick>
 800b374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b376:	e008      	b.n	800b38a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b378:	f7fe fbc8 	bl	8009b0c <HAL_GetTick>
 800b37c:	4602      	mov	r2, r0
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	2b02      	cmp	r3, #2
 800b384:	d901      	bls.n	800b38a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e087      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b38a:	4b28      	ldr	r3, [pc, #160]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1f0      	bne.n	800b378 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	69da      	ldr	r2, [r3, #28]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	019b      	lsls	r3, r3, #6
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ac:	085b      	lsrs	r3, r3, #1
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	041b      	lsls	r3, r3, #16
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b8:	061b      	lsls	r3, r3, #24
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	4a1b      	ldr	r2, [pc, #108]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b3be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3c4:	4b19      	ldr	r3, [pc, #100]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a18      	ldr	r2, [pc, #96]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b3ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3d0:	f7fe fb9c 	bl	8009b0c <HAL_GetTick>
 800b3d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3d6:	e008      	b.n	800b3ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3d8:	f7fe fb98 	bl	8009b0c <HAL_GetTick>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d901      	bls.n	800b3ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e057      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3ea:	4b10      	ldr	r3, [pc, #64]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0f0      	beq.n	800b3d8 <HAL_RCC_OscConfig+0x478>
 800b3f6:	e04f      	b.n	800b498 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a0b      	ldr	r2, [pc, #44]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b3fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b404:	f7fe fb82 	bl	8009b0c <HAL_GetTick>
 800b408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b40a:	e008      	b.n	800b41e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b40c:	f7fe fb7e 	bl	8009b0c <HAL_GetTick>
 800b410:	4602      	mov	r2, r0
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	2b02      	cmp	r3, #2
 800b418:	d901      	bls.n	800b41e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e03d      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b41e:	4b03      	ldr	r3, [pc, #12]	; (800b42c <HAL_RCC_OscConfig+0x4cc>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1f0      	bne.n	800b40c <HAL_RCC_OscConfig+0x4ac>
 800b42a:	e035      	b.n	800b498 <HAL_RCC_OscConfig+0x538>
 800b42c:	40023800 	.word	0x40023800
 800b430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b434:	4b1b      	ldr	r3, [pc, #108]	; (800b4a4 <HAL_RCC_OscConfig+0x544>)
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d028      	beq.n	800b494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d121      	bne.n	800b494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d11a      	bne.n	800b494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b464:	4013      	ands	r3, r2
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b46a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d111      	bne.n	800b494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47a:	085b      	lsrs	r3, r3, #1
 800b47c:	3b01      	subs	r3, #1
 800b47e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b480:	429a      	cmp	r2, r3
 800b482:	d107      	bne.n	800b494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b490:	429a      	cmp	r2, r3
 800b492:	d001      	beq.n	800b498 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e000      	b.n	800b49a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	40023800 	.word	0x40023800

0800b4a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e0d0      	b.n	800b662 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4c0:	4b6a      	ldr	r3, [pc, #424]	; (800b66c <HAL_RCC_ClockConfig+0x1c4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 030f 	and.w	r3, r3, #15
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d910      	bls.n	800b4f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4ce:	4b67      	ldr	r3, [pc, #412]	; (800b66c <HAL_RCC_ClockConfig+0x1c4>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f023 020f 	bic.w	r2, r3, #15
 800b4d6:	4965      	ldr	r1, [pc, #404]	; (800b66c <HAL_RCC_ClockConfig+0x1c4>)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4de:	4b63      	ldr	r3, [pc, #396]	; (800b66c <HAL_RCC_ClockConfig+0x1c4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 030f 	and.w	r3, r3, #15
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d001      	beq.n	800b4f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e0b8      	b.n	800b662 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d020      	beq.n	800b53e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b00      	cmp	r3, #0
 800b506:	d005      	beq.n	800b514 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b508:	4b59      	ldr	r3, [pc, #356]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	4a58      	ldr	r2, [pc, #352]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b50e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0308 	and.w	r3, r3, #8
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d005      	beq.n	800b52c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b520:	4b53      	ldr	r3, [pc, #332]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	4a52      	ldr	r2, [pc, #328]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b52a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b52c:	4b50      	ldr	r3, [pc, #320]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	494d      	ldr	r1, [pc, #308]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b53a:	4313      	orrs	r3, r2
 800b53c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	2b00      	cmp	r3, #0
 800b548:	d040      	beq.n	800b5cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d107      	bne.n	800b562 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b552:	4b47      	ldr	r3, [pc, #284]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d115      	bne.n	800b58a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e07f      	b.n	800b662 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d107      	bne.n	800b57a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b56a:	4b41      	ldr	r3, [pc, #260]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b572:	2b00      	cmp	r3, #0
 800b574:	d109      	bne.n	800b58a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e073      	b.n	800b662 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b57a:	4b3d      	ldr	r3, [pc, #244]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 0302 	and.w	r3, r3, #2
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e06b      	b.n	800b662 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b58a:	4b39      	ldr	r3, [pc, #228]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f023 0203 	bic.w	r2, r3, #3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	4936      	ldr	r1, [pc, #216]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b598:	4313      	orrs	r3, r2
 800b59a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b59c:	f7fe fab6 	bl	8009b0c <HAL_GetTick>
 800b5a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5a2:	e00a      	b.n	800b5ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5a4:	f7fe fab2 	bl	8009b0c <HAL_GetTick>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d901      	bls.n	800b5ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e053      	b.n	800b662 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5ba:	4b2d      	ldr	r3, [pc, #180]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	f003 020c 	and.w	r2, r3, #12
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d1eb      	bne.n	800b5a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5cc:	4b27      	ldr	r3, [pc, #156]	; (800b66c <HAL_RCC_ClockConfig+0x1c4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 030f 	and.w	r3, r3, #15
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d210      	bcs.n	800b5fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5da:	4b24      	ldr	r3, [pc, #144]	; (800b66c <HAL_RCC_ClockConfig+0x1c4>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f023 020f 	bic.w	r2, r3, #15
 800b5e2:	4922      	ldr	r1, [pc, #136]	; (800b66c <HAL_RCC_ClockConfig+0x1c4>)
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5ea:	4b20      	ldr	r3, [pc, #128]	; (800b66c <HAL_RCC_ClockConfig+0x1c4>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 030f 	and.w	r3, r3, #15
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d001      	beq.n	800b5fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e032      	b.n	800b662 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 0304 	and.w	r3, r3, #4
 800b604:	2b00      	cmp	r3, #0
 800b606:	d008      	beq.n	800b61a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b608:	4b19      	ldr	r3, [pc, #100]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	4916      	ldr	r1, [pc, #88]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b616:	4313      	orrs	r3, r2
 800b618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0308 	and.w	r3, r3, #8
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b626:	4b12      	ldr	r3, [pc, #72]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	490e      	ldr	r1, [pc, #56]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b636:	4313      	orrs	r3, r2
 800b638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b63a:	f000 f821 	bl	800b680 <HAL_RCC_GetSysClockFreq>
 800b63e:	4602      	mov	r2, r0
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <HAL_RCC_ClockConfig+0x1c8>)
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	091b      	lsrs	r3, r3, #4
 800b646:	f003 030f 	and.w	r3, r3, #15
 800b64a:	490a      	ldr	r1, [pc, #40]	; (800b674 <HAL_RCC_ClockConfig+0x1cc>)
 800b64c:	5ccb      	ldrb	r3, [r1, r3]
 800b64e:	fa22 f303 	lsr.w	r3, r2, r3
 800b652:	4a09      	ldr	r2, [pc, #36]	; (800b678 <HAL_RCC_ClockConfig+0x1d0>)
 800b654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b656:	4b09      	ldr	r3, [pc, #36]	; (800b67c <HAL_RCC_ClockConfig+0x1d4>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fe fa12 	bl	8009a84 <HAL_InitTick>

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	40023c00 	.word	0x40023c00
 800b670:	40023800 	.word	0x40023800
 800b674:	08013edc 	.word	0x08013edc
 800b678:	20000008 	.word	0x20000008
 800b67c:	2000000c 	.word	0x2000000c

0800b680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b684:	b094      	sub	sp, #80	; 0x50
 800b686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	647b      	str	r3, [r7, #68]	; 0x44
 800b68c:	2300      	movs	r3, #0
 800b68e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b690:	2300      	movs	r3, #0
 800b692:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b698:	4b79      	ldr	r3, [pc, #484]	; (800b880 <HAL_RCC_GetSysClockFreq+0x200>)
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	f003 030c 	and.w	r3, r3, #12
 800b6a0:	2b08      	cmp	r3, #8
 800b6a2:	d00d      	beq.n	800b6c0 <HAL_RCC_GetSysClockFreq+0x40>
 800b6a4:	2b08      	cmp	r3, #8
 800b6a6:	f200 80e1 	bhi.w	800b86c <HAL_RCC_GetSysClockFreq+0x1ec>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <HAL_RCC_GetSysClockFreq+0x34>
 800b6ae:	2b04      	cmp	r3, #4
 800b6b0:	d003      	beq.n	800b6ba <HAL_RCC_GetSysClockFreq+0x3a>
 800b6b2:	e0db      	b.n	800b86c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b6b4:	4b73      	ldr	r3, [pc, #460]	; (800b884 <HAL_RCC_GetSysClockFreq+0x204>)
 800b6b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b6b8:	e0db      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b6ba:	4b73      	ldr	r3, [pc, #460]	; (800b888 <HAL_RCC_GetSysClockFreq+0x208>)
 800b6bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b6be:	e0d8      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b6c0:	4b6f      	ldr	r3, [pc, #444]	; (800b880 <HAL_RCC_GetSysClockFreq+0x200>)
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b6ca:	4b6d      	ldr	r3, [pc, #436]	; (800b880 <HAL_RCC_GetSysClockFreq+0x200>)
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d063      	beq.n	800b79e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6d6:	4b6a      	ldr	r3, [pc, #424]	; (800b880 <HAL_RCC_GetSysClockFreq+0x200>)
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	099b      	lsrs	r3, r3, #6
 800b6dc:	2200      	movs	r2, #0
 800b6de:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e8:	633b      	str	r3, [r7, #48]	; 0x30
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b6f2:	4622      	mov	r2, r4
 800b6f4:	462b      	mov	r3, r5
 800b6f6:	f04f 0000 	mov.w	r0, #0
 800b6fa:	f04f 0100 	mov.w	r1, #0
 800b6fe:	0159      	lsls	r1, r3, #5
 800b700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b704:	0150      	lsls	r0, r2, #5
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4621      	mov	r1, r4
 800b70c:	1a51      	subs	r1, r2, r1
 800b70e:	6139      	str	r1, [r7, #16]
 800b710:	4629      	mov	r1, r5
 800b712:	eb63 0301 	sbc.w	r3, r3, r1
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	f04f 0200 	mov.w	r2, #0
 800b71c:	f04f 0300 	mov.w	r3, #0
 800b720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b724:	4659      	mov	r1, fp
 800b726:	018b      	lsls	r3, r1, #6
 800b728:	4651      	mov	r1, sl
 800b72a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b72e:	4651      	mov	r1, sl
 800b730:	018a      	lsls	r2, r1, #6
 800b732:	4651      	mov	r1, sl
 800b734:	ebb2 0801 	subs.w	r8, r2, r1
 800b738:	4659      	mov	r1, fp
 800b73a:	eb63 0901 	sbc.w	r9, r3, r1
 800b73e:	f04f 0200 	mov.w	r2, #0
 800b742:	f04f 0300 	mov.w	r3, #0
 800b746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b74a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b74e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b752:	4690      	mov	r8, r2
 800b754:	4699      	mov	r9, r3
 800b756:	4623      	mov	r3, r4
 800b758:	eb18 0303 	adds.w	r3, r8, r3
 800b75c:	60bb      	str	r3, [r7, #8]
 800b75e:	462b      	mov	r3, r5
 800b760:	eb49 0303 	adc.w	r3, r9, r3
 800b764:	60fb      	str	r3, [r7, #12]
 800b766:	f04f 0200 	mov.w	r2, #0
 800b76a:	f04f 0300 	mov.w	r3, #0
 800b76e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b772:	4629      	mov	r1, r5
 800b774:	024b      	lsls	r3, r1, #9
 800b776:	4621      	mov	r1, r4
 800b778:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b77c:	4621      	mov	r1, r4
 800b77e:	024a      	lsls	r2, r1, #9
 800b780:	4610      	mov	r0, r2
 800b782:	4619      	mov	r1, r3
 800b784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b786:	2200      	movs	r2, #0
 800b788:	62bb      	str	r3, [r7, #40]	; 0x28
 800b78a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b78c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b790:	f7f5 fa2a 	bl	8000be8 <__aeabi_uldivmod>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4613      	mov	r3, r2
 800b79a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b79c:	e058      	b.n	800b850 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b79e:	4b38      	ldr	r3, [pc, #224]	; (800b880 <HAL_RCC_GetSysClockFreq+0x200>)
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	099b      	lsrs	r3, r3, #6
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b7ae:	623b      	str	r3, [r7, #32]
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b7b8:	4642      	mov	r2, r8
 800b7ba:	464b      	mov	r3, r9
 800b7bc:	f04f 0000 	mov.w	r0, #0
 800b7c0:	f04f 0100 	mov.w	r1, #0
 800b7c4:	0159      	lsls	r1, r3, #5
 800b7c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b7ca:	0150      	lsls	r0, r2, #5
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4641      	mov	r1, r8
 800b7d2:	ebb2 0a01 	subs.w	sl, r2, r1
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	eb63 0b01 	sbc.w	fp, r3, r1
 800b7dc:	f04f 0200 	mov.w	r2, #0
 800b7e0:	f04f 0300 	mov.w	r3, #0
 800b7e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b7e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b7ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b7f0:	ebb2 040a 	subs.w	r4, r2, sl
 800b7f4:	eb63 050b 	sbc.w	r5, r3, fp
 800b7f8:	f04f 0200 	mov.w	r2, #0
 800b7fc:	f04f 0300 	mov.w	r3, #0
 800b800:	00eb      	lsls	r3, r5, #3
 800b802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b806:	00e2      	lsls	r2, r4, #3
 800b808:	4614      	mov	r4, r2
 800b80a:	461d      	mov	r5, r3
 800b80c:	4643      	mov	r3, r8
 800b80e:	18e3      	adds	r3, r4, r3
 800b810:	603b      	str	r3, [r7, #0]
 800b812:	464b      	mov	r3, r9
 800b814:	eb45 0303 	adc.w	r3, r5, r3
 800b818:	607b      	str	r3, [r7, #4]
 800b81a:	f04f 0200 	mov.w	r2, #0
 800b81e:	f04f 0300 	mov.w	r3, #0
 800b822:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b826:	4629      	mov	r1, r5
 800b828:	028b      	lsls	r3, r1, #10
 800b82a:	4621      	mov	r1, r4
 800b82c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b830:	4621      	mov	r1, r4
 800b832:	028a      	lsls	r2, r1, #10
 800b834:	4610      	mov	r0, r2
 800b836:	4619      	mov	r1, r3
 800b838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b83a:	2200      	movs	r2, #0
 800b83c:	61bb      	str	r3, [r7, #24]
 800b83e:	61fa      	str	r2, [r7, #28]
 800b840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b844:	f7f5 f9d0 	bl	8000be8 <__aeabi_uldivmod>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4613      	mov	r3, r2
 800b84e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b850:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <HAL_RCC_GetSysClockFreq+0x200>)
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	0c1b      	lsrs	r3, r3, #16
 800b856:	f003 0303 	and.w	r3, r3, #3
 800b85a:	3301      	adds	r3, #1
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800b860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b864:	fbb2 f3f3 	udiv	r3, r2, r3
 800b868:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b86a:	e002      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b86c:	4b05      	ldr	r3, [pc, #20]	; (800b884 <HAL_RCC_GetSysClockFreq+0x204>)
 800b86e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b870:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b874:	4618      	mov	r0, r3
 800b876:	3750      	adds	r7, #80	; 0x50
 800b878:	46bd      	mov	sp, r7
 800b87a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b87e:	bf00      	nop
 800b880:	40023800 	.word	0x40023800
 800b884:	00f42400 	.word	0x00f42400
 800b888:	007a1200 	.word	0x007a1200

0800b88c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b88c:	b480      	push	{r7}
 800b88e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b890:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b892:	681b      	ldr	r3, [r3, #0]
}
 800b894:	4618      	mov	r0, r3
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	20000008 	.word	0x20000008

0800b8a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b8a8:	f7ff fff0 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	0a9b      	lsrs	r3, r3, #10
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	4903      	ldr	r1, [pc, #12]	; (800b8c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8ba:	5ccb      	ldrb	r3, [r1, r3]
 800b8bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	40023800 	.word	0x40023800
 800b8c8:	08013eec 	.word	0x08013eec

0800b8cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8d0:	f7ff ffdc 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	0b5b      	lsrs	r3, r3, #13
 800b8dc:	f003 0307 	and.w	r3, r3, #7
 800b8e0:	4903      	ldr	r1, [pc, #12]	; (800b8f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8e2:	5ccb      	ldrb	r3, [r1, r3]
 800b8e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	40023800 	.word	0x40023800
 800b8f0:	08013eec 	.word	0x08013eec

0800b8f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e049      	b.n	800b99a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7fd ff56 	bl	80097cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	3304      	adds	r3, #4
 800b930:	4619      	mov	r1, r3
 800b932:	4610      	mov	r0, r2
 800b934:	f000 fa24 	bl	800bd80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d001      	beq.n	800b9bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e054      	b.n	800ba66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68da      	ldr	r2, [r3, #12]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f042 0201 	orr.w	r2, r2, #1
 800b9d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a26      	ldr	r2, [pc, #152]	; (800ba74 <HAL_TIM_Base_Start_IT+0xd0>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d022      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x80>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9e6:	d01d      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x80>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a22      	ldr	r2, [pc, #136]	; (800ba78 <HAL_TIM_Base_Start_IT+0xd4>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d018      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x80>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a21      	ldr	r2, [pc, #132]	; (800ba7c <HAL_TIM_Base_Start_IT+0xd8>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d013      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x80>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a1f      	ldr	r2, [pc, #124]	; (800ba80 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d00e      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x80>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a1e      	ldr	r2, [pc, #120]	; (800ba84 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d009      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x80>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a1c      	ldr	r2, [pc, #112]	; (800ba88 <HAL_TIM_Base_Start_IT+0xe4>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d004      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x80>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a1b      	ldr	r2, [pc, #108]	; (800ba8c <HAL_TIM_Base_Start_IT+0xe8>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d115      	bne.n	800ba50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689a      	ldr	r2, [r3, #8]
 800ba2a:	4b19      	ldr	r3, [pc, #100]	; (800ba90 <HAL_TIM_Base_Start_IT+0xec>)
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b06      	cmp	r3, #6
 800ba34:	d015      	beq.n	800ba62 <HAL_TIM_Base_Start_IT+0xbe>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba3c:	d011      	beq.n	800ba62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f042 0201 	orr.w	r2, r2, #1
 800ba4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba4e:	e008      	b.n	800ba62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f042 0201 	orr.w	r2, r2, #1
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	e000      	b.n	800ba64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	40010000 	.word	0x40010000
 800ba78:	40000400 	.word	0x40000400
 800ba7c:	40000800 	.word	0x40000800
 800ba80:	40000c00 	.word	0x40000c00
 800ba84:	40010400 	.word	0x40010400
 800ba88:	40014000 	.word	0x40014000
 800ba8c:	40001800 	.word	0x40001800
 800ba90:	00010007 	.word	0x00010007

0800ba94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68da      	ldr	r2, [r3, #12]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f022 0201 	bic.w	r2, r2, #1
 800baaa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6a1a      	ldr	r2, [r3, #32]
 800bab2:	f241 1311 	movw	r3, #4369	; 0x1111
 800bab6:	4013      	ands	r3, r2
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10f      	bne.n	800badc <HAL_TIM_Base_Stop_IT+0x48>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6a1a      	ldr	r2, [r3, #32]
 800bac2:	f240 4344 	movw	r3, #1092	; 0x444
 800bac6:	4013      	ands	r3, r2
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d107      	bne.n	800badc <HAL_TIM_Base_Stop_IT+0x48>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f022 0201 	bic.w	r2, r2, #1
 800bada:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b082      	sub	sp, #8
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	f003 0302 	and.w	r3, r3, #2
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d122      	bne.n	800bb4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	f003 0302 	and.w	r3, r3, #2
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d11b      	bne.n	800bb4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f06f 0202 	mvn.w	r2, #2
 800bb1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	699b      	ldr	r3, [r3, #24]
 800bb2c:	f003 0303 	and.w	r3, r3, #3
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f905 	bl	800bd44 <HAL_TIM_IC_CaptureCallback>
 800bb3a:	e005      	b.n	800bb48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f8f7 	bl	800bd30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f908 	bl	800bd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b04      	cmp	r3, #4
 800bb5a:	d122      	bne.n	800bba2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	f003 0304 	and.w	r3, r3, #4
 800bb66:	2b04      	cmp	r3, #4
 800bb68:	d11b      	bne.n	800bba2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f06f 0204 	mvn.w	r2, #4
 800bb72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d003      	beq.n	800bb90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f8db 	bl	800bd44 <HAL_TIM_IC_CaptureCallback>
 800bb8e:	e005      	b.n	800bb9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f8cd 	bl	800bd30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f8de 	bl	800bd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	f003 0308 	and.w	r3, r3, #8
 800bbac:	2b08      	cmp	r3, #8
 800bbae:	d122      	bne.n	800bbf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	f003 0308 	and.w	r3, r3, #8
 800bbba:	2b08      	cmp	r3, #8
 800bbbc:	d11b      	bne.n	800bbf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f06f 0208 	mvn.w	r2, #8
 800bbc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2204      	movs	r2, #4
 800bbcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	69db      	ldr	r3, [r3, #28]
 800bbd4:	f003 0303 	and.w	r3, r3, #3
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f8b1 	bl	800bd44 <HAL_TIM_IC_CaptureCallback>
 800bbe2:	e005      	b.n	800bbf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f8a3 	bl	800bd30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f8b4 	bl	800bd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	f003 0310 	and.w	r3, r3, #16
 800bc00:	2b10      	cmp	r3, #16
 800bc02:	d122      	bne.n	800bc4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	f003 0310 	and.w	r3, r3, #16
 800bc0e:	2b10      	cmp	r3, #16
 800bc10:	d11b      	bne.n	800bc4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f06f 0210 	mvn.w	r2, #16
 800bc1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2208      	movs	r2, #8
 800bc20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	69db      	ldr	r3, [r3, #28]
 800bc28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d003      	beq.n	800bc38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f887 	bl	800bd44 <HAL_TIM_IC_CaptureCallback>
 800bc36:	e005      	b.n	800bc44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f879 	bl	800bd30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f88a 	bl	800bd58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d10e      	bne.n	800bc76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d107      	bne.n	800bc76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f06f 0201 	mvn.w	r2, #1
 800bc6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7fd fc73 	bl	800955c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc80:	2b80      	cmp	r3, #128	; 0x80
 800bc82:	d10e      	bne.n	800bca2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc8e:	2b80      	cmp	r3, #128	; 0x80
 800bc90:	d107      	bne.n	800bca2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f919 	bl	800bed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb0:	d10e      	bne.n	800bcd0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcbc:	2b80      	cmp	r3, #128	; 0x80
 800bcbe:	d107      	bne.n	800bcd0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bcc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f90c 	bl	800bee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcda:	2b40      	cmp	r3, #64	; 0x40
 800bcdc:	d10e      	bne.n	800bcfc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce8:	2b40      	cmp	r3, #64	; 0x40
 800bcea:	d107      	bne.n	800bcfc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f838 	bl	800bd6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	f003 0320 	and.w	r3, r3, #32
 800bd06:	2b20      	cmp	r3, #32
 800bd08:	d10e      	bne.n	800bd28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f003 0320 	and.w	r3, r3, #32
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d107      	bne.n	800bd28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f06f 0220 	mvn.w	r2, #32
 800bd20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f8cc 	bl	800bec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a40      	ldr	r2, [pc, #256]	; (800be94 <TIM_Base_SetConfig+0x114>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d013      	beq.n	800bdc0 <TIM_Base_SetConfig+0x40>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd9e:	d00f      	beq.n	800bdc0 <TIM_Base_SetConfig+0x40>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a3d      	ldr	r2, [pc, #244]	; (800be98 <TIM_Base_SetConfig+0x118>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d00b      	beq.n	800bdc0 <TIM_Base_SetConfig+0x40>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a3c      	ldr	r2, [pc, #240]	; (800be9c <TIM_Base_SetConfig+0x11c>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d007      	beq.n	800bdc0 <TIM_Base_SetConfig+0x40>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4a3b      	ldr	r2, [pc, #236]	; (800bea0 <TIM_Base_SetConfig+0x120>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d003      	beq.n	800bdc0 <TIM_Base_SetConfig+0x40>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a3a      	ldr	r2, [pc, #232]	; (800bea4 <TIM_Base_SetConfig+0x124>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d108      	bne.n	800bdd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a2f      	ldr	r2, [pc, #188]	; (800be94 <TIM_Base_SetConfig+0x114>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d02b      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bde0:	d027      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a2c      	ldr	r2, [pc, #176]	; (800be98 <TIM_Base_SetConfig+0x118>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d023      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a2b      	ldr	r2, [pc, #172]	; (800be9c <TIM_Base_SetConfig+0x11c>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d01f      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a2a      	ldr	r2, [pc, #168]	; (800bea0 <TIM_Base_SetConfig+0x120>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d01b      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a29      	ldr	r2, [pc, #164]	; (800bea4 <TIM_Base_SetConfig+0x124>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d017      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a28      	ldr	r2, [pc, #160]	; (800bea8 <TIM_Base_SetConfig+0x128>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d013      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a27      	ldr	r2, [pc, #156]	; (800beac <TIM_Base_SetConfig+0x12c>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d00f      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4a26      	ldr	r2, [pc, #152]	; (800beb0 <TIM_Base_SetConfig+0x130>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d00b      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a25      	ldr	r2, [pc, #148]	; (800beb4 <TIM_Base_SetConfig+0x134>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d007      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a24      	ldr	r2, [pc, #144]	; (800beb8 <TIM_Base_SetConfig+0x138>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d003      	beq.n	800be32 <TIM_Base_SetConfig+0xb2>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a23      	ldr	r2, [pc, #140]	; (800bebc <TIM_Base_SetConfig+0x13c>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d108      	bne.n	800be44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	4313      	orrs	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	4313      	orrs	r3, r2
 800be50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	689a      	ldr	r2, [r3, #8]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a0a      	ldr	r2, [pc, #40]	; (800be94 <TIM_Base_SetConfig+0x114>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d003      	beq.n	800be78 <TIM_Base_SetConfig+0xf8>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a0c      	ldr	r2, [pc, #48]	; (800bea4 <TIM_Base_SetConfig+0x124>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d103      	bne.n	800be80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	691a      	ldr	r2, [r3, #16]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	615a      	str	r2, [r3, #20]
}
 800be86:	bf00      	nop
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	40010000 	.word	0x40010000
 800be98:	40000400 	.word	0x40000400
 800be9c:	40000800 	.word	0x40000800
 800bea0:	40000c00 	.word	0x40000c00
 800bea4:	40010400 	.word	0x40010400
 800bea8:	40014000 	.word	0x40014000
 800beac:	40014400 	.word	0x40014400
 800beb0:	40014800 	.word	0x40014800
 800beb4:	40001800 	.word	0x40001800
 800beb8:	40001c00 	.word	0x40001c00
 800bebc:	40002000 	.word	0x40002000

0800bec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e040      	b.n	800bf90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7fd fbd8 	bl	80096d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2224      	movs	r2, #36	; 0x24
 800bf28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 0201 	bic.w	r2, r2, #1
 800bf38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fc52 	bl	800c7e4 <UART_SetConfig>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d101      	bne.n	800bf4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e022      	b.n	800bf90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 feaa 	bl	800ccac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685a      	ldr	r2, [r3, #4]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	689a      	ldr	r2, [r3, #8]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f042 0201 	orr.w	r2, r2, #1
 800bf86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 ff31 	bl	800cdf0 <UART_CheckIdleState>
 800bf8e:	4603      	mov	r3, r0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3708      	adds	r7, #8
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b08a      	sub	sp, #40	; 0x28
 800bf9c:	af02      	add	r7, sp, #8
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	603b      	str	r3, [r7, #0]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	f040 8081 	bne.w	800c0b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_UART_Transmit+0x26>
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e079      	b.n	800c0b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d101      	bne.n	800bfd0 <HAL_UART_Transmit+0x38>
 800bfcc:	2302      	movs	r3, #2
 800bfce:	e072      	b.n	800c0b6 <HAL_UART_Transmit+0x11e>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2221      	movs	r2, #33	; 0x21
 800bfe4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bfe6:	f7fd fd91 	bl	8009b0c <HAL_GetTick>
 800bfea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	88fa      	ldrh	r2, [r7, #6]
 800bff0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	88fa      	ldrh	r2, [r7, #6]
 800bff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c004:	d108      	bne.n	800c018 <HAL_UART_Transmit+0x80>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d104      	bne.n	800c018 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	61bb      	str	r3, [r7, #24]
 800c016:	e003      	b.n	800c020 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c01c:	2300      	movs	r3, #0
 800c01e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c028:	e02c      	b.n	800c084 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2200      	movs	r2, #0
 800c032:	2180      	movs	r1, #128	; 0x80
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f000 ff0e 	bl	800ce56 <UART_WaitOnFlagUntilTimeout>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d001      	beq.n	800c044 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c040:	2303      	movs	r3, #3
 800c042:	e038      	b.n	800c0b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10b      	bne.n	800c062 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	461a      	mov	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	3302      	adds	r3, #2
 800c05e:	61bb      	str	r3, [r7, #24]
 800c060:	e007      	b.n	800c072 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	781a      	ldrb	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	3301      	adds	r3, #1
 800c070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c078:	b29b      	uxth	r3, r3
 800c07a:	3b01      	subs	r3, #1
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1cc      	bne.n	800c02a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2200      	movs	r2, #0
 800c098:	2140      	movs	r1, #64	; 0x40
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f000 fedb 	bl	800ce56 <UART_WaitOnFlagUntilTimeout>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d001      	beq.n	800c0aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e005      	b.n	800c0b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	e000      	b.n	800c0b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800c0b4:	2302      	movs	r3, #2
  }
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3720      	adds	r7, #32
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b08b      	sub	sp, #44	; 0x2c
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0d2:	2b20      	cmp	r3, #32
 800c0d4:	d156      	bne.n	800c184 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d002      	beq.n	800c0e2 <HAL_UART_Transmit_IT+0x22>
 800c0dc:	88fb      	ldrh	r3, [r7, #6]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d101      	bne.n	800c0e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e04f      	b.n	800c186 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d101      	bne.n	800c0f4 <HAL_UART_Transmit_IT+0x34>
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	e048      	b.n	800c186 <HAL_UART_Transmit_IT+0xc6>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	88fa      	ldrh	r2, [r7, #6]
 800c106:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	88fa      	ldrh	r2, [r7, #6]
 800c10e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2221      	movs	r2, #33	; 0x21
 800c124:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c12e:	d107      	bne.n	800c140 <HAL_UART_Transmit_IT+0x80>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d103      	bne.n	800c140 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4a16      	ldr	r2, [pc, #88]	; (800c194 <HAL_UART_Transmit_IT+0xd4>)
 800c13c:	669a      	str	r2, [r3, #104]	; 0x68
 800c13e:	e002      	b.n	800c146 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4a15      	ldr	r2, [pc, #84]	; (800c198 <HAL_UART_Transmit_IT+0xd8>)
 800c144:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	e853 3f00 	ldrex	r3, [r3]
 800c15a:	613b      	str	r3, [r7, #16]
   return(result);
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	461a      	mov	r2, r3
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	623b      	str	r3, [r7, #32]
 800c16e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c170:	69f9      	ldr	r1, [r7, #28]
 800c172:	6a3a      	ldr	r2, [r7, #32]
 800c174:	e841 2300 	strex	r3, r2, [r1]
 800c178:	61bb      	str	r3, [r7, #24]
   return(result);
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1e6      	bne.n	800c14e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	e000      	b.n	800c186 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800c184:	2302      	movs	r3, #2
  }
}
 800c186:	4618      	mov	r0, r3
 800c188:	372c      	adds	r7, #44	; 0x2c
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	0800d31d 	.word	0x0800d31d
 800c198:	0800d267 	.word	0x0800d267

0800c19c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08a      	sub	sp, #40	; 0x28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ae:	2b20      	cmp	r3, #32
 800c1b0:	d13d      	bne.n	800c22e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <HAL_UART_Receive_IT+0x22>
 800c1b8:	88fb      	ldrh	r3, [r7, #6]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e036      	b.n	800c230 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d101      	bne.n	800c1d0 <HAL_UART_Receive_IT+0x34>
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	e02f      	b.n	800c230 <HAL_UART_Receive_IT+0x94>
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d018      	beq.n	800c21e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c200:	627b      	str	r3, [r7, #36]	; 0x24
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	623b      	str	r3, [r7, #32]
 800c20c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	69f9      	ldr	r1, [r7, #28]
 800c210:	6a3a      	ldr	r2, [r7, #32]
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	61bb      	str	r3, [r7, #24]
   return(result);
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e6      	bne.n	800c1ec <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c21e:	88fb      	ldrh	r3, [r7, #6]
 800c220:	461a      	mov	r2, r3
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 fedb 	bl	800cfe0 <UART_Start_Receive_IT>
 800c22a:	4603      	mov	r3, r0
 800c22c:	e000      	b.n	800c230 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c22e:	2302      	movs	r3, #2
  }
}
 800c230:	4618      	mov	r0, r3
 800c232:	3728      	adds	r7, #40	; 0x28
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b0ba      	sub	sp, #232	; 0xe8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c25e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c262:	f640 030f 	movw	r3, #2063	; 0x80f
 800c266:	4013      	ands	r3, r2
 800c268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c26c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c270:	2b00      	cmp	r3, #0
 800c272:	d115      	bne.n	800c2a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c278:	f003 0320 	and.w	r3, r3, #32
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00f      	beq.n	800c2a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c284:	f003 0320 	and.w	r3, r3, #32
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d009      	beq.n	800c2a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 828f 	beq.w	800c7b4 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	4798      	blx	r3
      }
      return;
 800c29e:	e289      	b.n	800c7b4 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c2a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 8117 	beq.w	800c4d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c2aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2ae:	f003 0301 	and.w	r3, r3, #1
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d106      	bne.n	800c2c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c2b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c2ba:	4b85      	ldr	r3, [pc, #532]	; (800c4d0 <HAL_UART_IRQHandler+0x298>)
 800c2bc:	4013      	ands	r3, r2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 810a 	beq.w	800c4d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d011      	beq.n	800c2f4 <HAL_UART_IRQHandler+0xbc>
 800c2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2ea:	f043 0201 	orr.w	r2, r3, #1
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2f8:	f003 0302 	and.w	r3, r3, #2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d011      	beq.n	800c324 <HAL_UART_IRQHandler+0xec>
 800c300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00b      	beq.n	800c324 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2202      	movs	r2, #2
 800c312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c31a:	f043 0204 	orr.w	r2, r3, #4
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d011      	beq.n	800c354 <HAL_UART_IRQHandler+0x11c>
 800c330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2204      	movs	r2, #4
 800c342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c34a:	f043 0202 	orr.w	r2, r3, #2
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c358:	f003 0308 	and.w	r3, r3, #8
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d017      	beq.n	800c390 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c364:	f003 0320 	and.w	r3, r3, #32
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d105      	bne.n	800c378 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c36c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c370:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2208      	movs	r2, #8
 800c37e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c386:	f043 0208 	orr.w	r2, r3, #8
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d012      	beq.n	800c3c2 <HAL_UART_IRQHandler+0x18a>
 800c39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00c      	beq.n	800c3c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3b8:	f043 0220 	orr.w	r2, r3, #32
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f000 81f5 	beq.w	800c7b8 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d2:	f003 0320 	and.w	r3, r3, #32
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00d      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c3da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3de:	f003 0320 	and.w	r3, r3, #32
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d007      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c40a:	2b40      	cmp	r3, #64	; 0x40
 800c40c:	d005      	beq.n	800c41a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c40e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c412:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c416:	2b00      	cmp	r3, #0
 800c418:	d04f      	beq.n	800c4ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 feaa 	bl	800d174 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42a:	2b40      	cmp	r3, #64	; 0x40
 800c42c:	d141      	bne.n	800c4b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3308      	adds	r3, #8
 800c434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c43c:	e853 3f00 	ldrex	r3, [r3]
 800c440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c44c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	3308      	adds	r3, #8
 800c456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c45a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c45e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c46a:	e841 2300 	strex	r3, r2, [r1]
 800c46e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1d9      	bne.n	800c42e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d013      	beq.n	800c4aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c486:	4a13      	ldr	r2, [pc, #76]	; (800c4d4 <HAL_UART_IRQHandler+0x29c>)
 800c488:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe fb7d 	bl	800ab8e <HAL_DMA_Abort_IT>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d017      	beq.n	800c4ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a8:	e00f      	b.n	800c4ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7fc ff72 	bl	8009394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b0:	e00b      	b.n	800c4ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7fc ff6e 	bl	8009394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b8:	e007      	b.n	800c4ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7fc ff6a 	bl	8009394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c4c8:	e176      	b.n	800c7b8 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ca:	bf00      	nop
    return;
 800c4cc:	e174      	b.n	800c7b8 <HAL_UART_IRQHandler+0x580>
 800c4ce:	bf00      	nop
 800c4d0:	04000120 	.word	0x04000120
 800c4d4:	0800d23b 	.word	0x0800d23b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	f040 8144 	bne.w	800c76a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4e6:	f003 0310 	and.w	r3, r3, #16
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 813d 	beq.w	800c76a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 8136 	beq.w	800c76a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2210      	movs	r2, #16
 800c504:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c510:	2b40      	cmp	r3, #64	; 0x40
 800c512:	f040 80b2 	bne.w	800c67a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c522:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 8148 	beq.w	800c7bc <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c536:	429a      	cmp	r2, r3
 800c538:	f080 8140 	bcs.w	800c7bc <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c54a:	69db      	ldr	r3, [r3, #28]
 800c54c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c550:	f000 8085 	beq.w	800c65e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c560:	e853 3f00 	ldrex	r3, [r3]
 800c564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c56c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	461a      	mov	r2, r3
 800c57a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c57e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c582:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c58a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c58e:	e841 2300 	strex	r3, r2, [r1]
 800c592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1da      	bne.n	800c554 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5a8:	e853 3f00 	ldrex	r3, [r3]
 800c5ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5b0:	f023 0301 	bic.w	r3, r3, #1
 800c5b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3308      	adds	r3, #8
 800c5be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e1      	bne.n	800c59e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3308      	adds	r3, #8
 800c5e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5e4:	e853 3f00 	ldrex	r3, [r3]
 800c5e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	3308      	adds	r3, #8
 800c5fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c606:	e841 2300 	strex	r3, r2, [r1]
 800c60a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c60c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1e3      	bne.n	800c5da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2220      	movs	r2, #32
 800c616:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c626:	e853 3f00 	ldrex	r3, [r3]
 800c62a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c62e:	f023 0310 	bic.w	r3, r3, #16
 800c632:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c640:	65bb      	str	r3, [r7, #88]	; 0x58
 800c642:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c648:	e841 2300 	strex	r3, r2, [r1]
 800c64c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e4      	bne.n	800c61e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fe fa28 	bl	800aaae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	b29b      	uxth	r3, r3
 800c670:	4619      	mov	r1, r3
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f8aa 	bl	800c7cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c678:	e0a0      	b.n	800c7bc <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c686:	b29b      	uxth	r3, r3
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c694:	b29b      	uxth	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 8092 	beq.w	800c7c0 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800c69c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 808d 	beq.w	800c7c0 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	e853 3f00 	ldrex	r3, [r3]
 800c6b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6c8:	647b      	str	r3, [r7, #68]	; 0x44
 800c6ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6d0:	e841 2300 	strex	r3, r2, [r1]
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1e4      	bne.n	800c6a6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	e853 3f00 	ldrex	r3, [r3]
 800c6ea:	623b      	str	r3, [r7, #32]
   return(result);
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	f023 0301 	bic.w	r3, r3, #1
 800c6f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3308      	adds	r3, #8
 800c6fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c700:	633a      	str	r2, [r7, #48]	; 0x30
 800c702:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c708:	e841 2300 	strex	r3, r2, [r1]
 800c70c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1e3      	bne.n	800c6dc <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	e853 3f00 	ldrex	r3, [r3]
 800c732:	60fb      	str	r3, [r7, #12]
   return(result);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f023 0310 	bic.w	r3, r3, #16
 800c73a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	461a      	mov	r2, r3
 800c744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c748:	61fb      	str	r3, [r7, #28]
 800c74a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74c:	69b9      	ldr	r1, [r7, #24]
 800c74e:	69fa      	ldr	r2, [r7, #28]
 800c750:	e841 2300 	strex	r3, r2, [r1]
 800c754:	617b      	str	r3, [r7, #20]
   return(result);
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1e4      	bne.n	800c726 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c75c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f832 	bl	800c7cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c768:	e02a      	b.n	800c7c0 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00e      	beq.n	800c794 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d008      	beq.n	800c794 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c786:	2b00      	cmp	r3, #0
 800c788:	d01c      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	4798      	blx	r3
    }
    return;
 800c792:	e017      	b.n	800c7c4 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d012      	beq.n	800c7c6 <HAL_UART_IRQHandler+0x58e>
 800c7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00c      	beq.n	800c7c6 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fe15 	bl	800d3dc <UART_EndTransmit_IT>
    return;
 800c7b2:	e008      	b.n	800c7c6 <HAL_UART_IRQHandler+0x58e>
      return;
 800c7b4:	bf00      	nop
 800c7b6:	e006      	b.n	800c7c6 <HAL_UART_IRQHandler+0x58e>
    return;
 800c7b8:	bf00      	nop
 800c7ba:	e004      	b.n	800c7c6 <HAL_UART_IRQHandler+0x58e>
      return;
 800c7bc:	bf00      	nop
 800c7be:	e002      	b.n	800c7c6 <HAL_UART_IRQHandler+0x58e>
      return;
 800c7c0:	bf00      	nop
 800c7c2:	e000      	b.n	800c7c6 <HAL_UART_IRQHandler+0x58e>
    return;
 800c7c4:	bf00      	nop
  }

}
 800c7c6:	37e8      	adds	r7, #232	; 0xe8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b088      	sub	sp, #32
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	689a      	ldr	r2, [r3, #8]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	431a      	orrs	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	695b      	ldr	r3, [r3, #20]
 800c7fe:	431a      	orrs	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	69db      	ldr	r3, [r3, #28]
 800c804:	4313      	orrs	r3, r2
 800c806:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	4ba6      	ldr	r3, [pc, #664]	; (800caa8 <UART_SetConfig+0x2c4>)
 800c810:	4013      	ands	r3, r2
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	6812      	ldr	r2, [r2, #0]
 800c816:	6979      	ldr	r1, [r7, #20]
 800c818:	430b      	orrs	r3, r1
 800c81a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68da      	ldr	r2, [r3, #12]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	430a      	orrs	r2, r1
 800c830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	4313      	orrs	r3, r2
 800c840:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	430a      	orrs	r2, r1
 800c854:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a94      	ldr	r2, [pc, #592]	; (800caac <UART_SetConfig+0x2c8>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d120      	bne.n	800c8a2 <UART_SetConfig+0xbe>
 800c860:	4b93      	ldr	r3, [pc, #588]	; (800cab0 <UART_SetConfig+0x2cc>)
 800c862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c866:	f003 0303 	and.w	r3, r3, #3
 800c86a:	2b03      	cmp	r3, #3
 800c86c:	d816      	bhi.n	800c89c <UART_SetConfig+0xb8>
 800c86e:	a201      	add	r2, pc, #4	; (adr r2, 800c874 <UART_SetConfig+0x90>)
 800c870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c874:	0800c885 	.word	0x0800c885
 800c878:	0800c891 	.word	0x0800c891
 800c87c:	0800c88b 	.word	0x0800c88b
 800c880:	0800c897 	.word	0x0800c897
 800c884:	2301      	movs	r3, #1
 800c886:	77fb      	strb	r3, [r7, #31]
 800c888:	e150      	b.n	800cb2c <UART_SetConfig+0x348>
 800c88a:	2302      	movs	r3, #2
 800c88c:	77fb      	strb	r3, [r7, #31]
 800c88e:	e14d      	b.n	800cb2c <UART_SetConfig+0x348>
 800c890:	2304      	movs	r3, #4
 800c892:	77fb      	strb	r3, [r7, #31]
 800c894:	e14a      	b.n	800cb2c <UART_SetConfig+0x348>
 800c896:	2308      	movs	r3, #8
 800c898:	77fb      	strb	r3, [r7, #31]
 800c89a:	e147      	b.n	800cb2c <UART_SetConfig+0x348>
 800c89c:	2310      	movs	r3, #16
 800c89e:	77fb      	strb	r3, [r7, #31]
 800c8a0:	e144      	b.n	800cb2c <UART_SetConfig+0x348>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a83      	ldr	r2, [pc, #524]	; (800cab4 <UART_SetConfig+0x2d0>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d132      	bne.n	800c912 <UART_SetConfig+0x12e>
 800c8ac:	4b80      	ldr	r3, [pc, #512]	; (800cab0 <UART_SetConfig+0x2cc>)
 800c8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8b2:	f003 030c 	and.w	r3, r3, #12
 800c8b6:	2b0c      	cmp	r3, #12
 800c8b8:	d828      	bhi.n	800c90c <UART_SetConfig+0x128>
 800c8ba:	a201      	add	r2, pc, #4	; (adr r2, 800c8c0 <UART_SetConfig+0xdc>)
 800c8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c0:	0800c8f5 	.word	0x0800c8f5
 800c8c4:	0800c90d 	.word	0x0800c90d
 800c8c8:	0800c90d 	.word	0x0800c90d
 800c8cc:	0800c90d 	.word	0x0800c90d
 800c8d0:	0800c901 	.word	0x0800c901
 800c8d4:	0800c90d 	.word	0x0800c90d
 800c8d8:	0800c90d 	.word	0x0800c90d
 800c8dc:	0800c90d 	.word	0x0800c90d
 800c8e0:	0800c8fb 	.word	0x0800c8fb
 800c8e4:	0800c90d 	.word	0x0800c90d
 800c8e8:	0800c90d 	.word	0x0800c90d
 800c8ec:	0800c90d 	.word	0x0800c90d
 800c8f0:	0800c907 	.word	0x0800c907
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	77fb      	strb	r3, [r7, #31]
 800c8f8:	e118      	b.n	800cb2c <UART_SetConfig+0x348>
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	77fb      	strb	r3, [r7, #31]
 800c8fe:	e115      	b.n	800cb2c <UART_SetConfig+0x348>
 800c900:	2304      	movs	r3, #4
 800c902:	77fb      	strb	r3, [r7, #31]
 800c904:	e112      	b.n	800cb2c <UART_SetConfig+0x348>
 800c906:	2308      	movs	r3, #8
 800c908:	77fb      	strb	r3, [r7, #31]
 800c90a:	e10f      	b.n	800cb2c <UART_SetConfig+0x348>
 800c90c:	2310      	movs	r3, #16
 800c90e:	77fb      	strb	r3, [r7, #31]
 800c910:	e10c      	b.n	800cb2c <UART_SetConfig+0x348>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a68      	ldr	r2, [pc, #416]	; (800cab8 <UART_SetConfig+0x2d4>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d120      	bne.n	800c95e <UART_SetConfig+0x17a>
 800c91c:	4b64      	ldr	r3, [pc, #400]	; (800cab0 <UART_SetConfig+0x2cc>)
 800c91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c922:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c926:	2b30      	cmp	r3, #48	; 0x30
 800c928:	d013      	beq.n	800c952 <UART_SetConfig+0x16e>
 800c92a:	2b30      	cmp	r3, #48	; 0x30
 800c92c:	d814      	bhi.n	800c958 <UART_SetConfig+0x174>
 800c92e:	2b20      	cmp	r3, #32
 800c930:	d009      	beq.n	800c946 <UART_SetConfig+0x162>
 800c932:	2b20      	cmp	r3, #32
 800c934:	d810      	bhi.n	800c958 <UART_SetConfig+0x174>
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <UART_SetConfig+0x15c>
 800c93a:	2b10      	cmp	r3, #16
 800c93c:	d006      	beq.n	800c94c <UART_SetConfig+0x168>
 800c93e:	e00b      	b.n	800c958 <UART_SetConfig+0x174>
 800c940:	2300      	movs	r3, #0
 800c942:	77fb      	strb	r3, [r7, #31]
 800c944:	e0f2      	b.n	800cb2c <UART_SetConfig+0x348>
 800c946:	2302      	movs	r3, #2
 800c948:	77fb      	strb	r3, [r7, #31]
 800c94a:	e0ef      	b.n	800cb2c <UART_SetConfig+0x348>
 800c94c:	2304      	movs	r3, #4
 800c94e:	77fb      	strb	r3, [r7, #31]
 800c950:	e0ec      	b.n	800cb2c <UART_SetConfig+0x348>
 800c952:	2308      	movs	r3, #8
 800c954:	77fb      	strb	r3, [r7, #31]
 800c956:	e0e9      	b.n	800cb2c <UART_SetConfig+0x348>
 800c958:	2310      	movs	r3, #16
 800c95a:	77fb      	strb	r3, [r7, #31]
 800c95c:	e0e6      	b.n	800cb2c <UART_SetConfig+0x348>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a56      	ldr	r2, [pc, #344]	; (800cabc <UART_SetConfig+0x2d8>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d120      	bne.n	800c9aa <UART_SetConfig+0x1c6>
 800c968:	4b51      	ldr	r3, [pc, #324]	; (800cab0 <UART_SetConfig+0x2cc>)
 800c96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c96e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c972:	2bc0      	cmp	r3, #192	; 0xc0
 800c974:	d013      	beq.n	800c99e <UART_SetConfig+0x1ba>
 800c976:	2bc0      	cmp	r3, #192	; 0xc0
 800c978:	d814      	bhi.n	800c9a4 <UART_SetConfig+0x1c0>
 800c97a:	2b80      	cmp	r3, #128	; 0x80
 800c97c:	d009      	beq.n	800c992 <UART_SetConfig+0x1ae>
 800c97e:	2b80      	cmp	r3, #128	; 0x80
 800c980:	d810      	bhi.n	800c9a4 <UART_SetConfig+0x1c0>
 800c982:	2b00      	cmp	r3, #0
 800c984:	d002      	beq.n	800c98c <UART_SetConfig+0x1a8>
 800c986:	2b40      	cmp	r3, #64	; 0x40
 800c988:	d006      	beq.n	800c998 <UART_SetConfig+0x1b4>
 800c98a:	e00b      	b.n	800c9a4 <UART_SetConfig+0x1c0>
 800c98c:	2300      	movs	r3, #0
 800c98e:	77fb      	strb	r3, [r7, #31]
 800c990:	e0cc      	b.n	800cb2c <UART_SetConfig+0x348>
 800c992:	2302      	movs	r3, #2
 800c994:	77fb      	strb	r3, [r7, #31]
 800c996:	e0c9      	b.n	800cb2c <UART_SetConfig+0x348>
 800c998:	2304      	movs	r3, #4
 800c99a:	77fb      	strb	r3, [r7, #31]
 800c99c:	e0c6      	b.n	800cb2c <UART_SetConfig+0x348>
 800c99e:	2308      	movs	r3, #8
 800c9a0:	77fb      	strb	r3, [r7, #31]
 800c9a2:	e0c3      	b.n	800cb2c <UART_SetConfig+0x348>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	77fb      	strb	r3, [r7, #31]
 800c9a8:	e0c0      	b.n	800cb2c <UART_SetConfig+0x348>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a44      	ldr	r2, [pc, #272]	; (800cac0 <UART_SetConfig+0x2dc>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d125      	bne.n	800ca00 <UART_SetConfig+0x21c>
 800c9b4:	4b3e      	ldr	r3, [pc, #248]	; (800cab0 <UART_SetConfig+0x2cc>)
 800c9b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9c2:	d017      	beq.n	800c9f4 <UART_SetConfig+0x210>
 800c9c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9c8:	d817      	bhi.n	800c9fa <UART_SetConfig+0x216>
 800c9ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9ce:	d00b      	beq.n	800c9e8 <UART_SetConfig+0x204>
 800c9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d4:	d811      	bhi.n	800c9fa <UART_SetConfig+0x216>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d003      	beq.n	800c9e2 <UART_SetConfig+0x1fe>
 800c9da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9de:	d006      	beq.n	800c9ee <UART_SetConfig+0x20a>
 800c9e0:	e00b      	b.n	800c9fa <UART_SetConfig+0x216>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	77fb      	strb	r3, [r7, #31]
 800c9e6:	e0a1      	b.n	800cb2c <UART_SetConfig+0x348>
 800c9e8:	2302      	movs	r3, #2
 800c9ea:	77fb      	strb	r3, [r7, #31]
 800c9ec:	e09e      	b.n	800cb2c <UART_SetConfig+0x348>
 800c9ee:	2304      	movs	r3, #4
 800c9f0:	77fb      	strb	r3, [r7, #31]
 800c9f2:	e09b      	b.n	800cb2c <UART_SetConfig+0x348>
 800c9f4:	2308      	movs	r3, #8
 800c9f6:	77fb      	strb	r3, [r7, #31]
 800c9f8:	e098      	b.n	800cb2c <UART_SetConfig+0x348>
 800c9fa:	2310      	movs	r3, #16
 800c9fc:	77fb      	strb	r3, [r7, #31]
 800c9fe:	e095      	b.n	800cb2c <UART_SetConfig+0x348>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a2f      	ldr	r2, [pc, #188]	; (800cac4 <UART_SetConfig+0x2e0>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d125      	bne.n	800ca56 <UART_SetConfig+0x272>
 800ca0a:	4b29      	ldr	r3, [pc, #164]	; (800cab0 <UART_SetConfig+0x2cc>)
 800ca0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca18:	d017      	beq.n	800ca4a <UART_SetConfig+0x266>
 800ca1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca1e:	d817      	bhi.n	800ca50 <UART_SetConfig+0x26c>
 800ca20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca24:	d00b      	beq.n	800ca3e <UART_SetConfig+0x25a>
 800ca26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca2a:	d811      	bhi.n	800ca50 <UART_SetConfig+0x26c>
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <UART_SetConfig+0x254>
 800ca30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca34:	d006      	beq.n	800ca44 <UART_SetConfig+0x260>
 800ca36:	e00b      	b.n	800ca50 <UART_SetConfig+0x26c>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	77fb      	strb	r3, [r7, #31]
 800ca3c:	e076      	b.n	800cb2c <UART_SetConfig+0x348>
 800ca3e:	2302      	movs	r3, #2
 800ca40:	77fb      	strb	r3, [r7, #31]
 800ca42:	e073      	b.n	800cb2c <UART_SetConfig+0x348>
 800ca44:	2304      	movs	r3, #4
 800ca46:	77fb      	strb	r3, [r7, #31]
 800ca48:	e070      	b.n	800cb2c <UART_SetConfig+0x348>
 800ca4a:	2308      	movs	r3, #8
 800ca4c:	77fb      	strb	r3, [r7, #31]
 800ca4e:	e06d      	b.n	800cb2c <UART_SetConfig+0x348>
 800ca50:	2310      	movs	r3, #16
 800ca52:	77fb      	strb	r3, [r7, #31]
 800ca54:	e06a      	b.n	800cb2c <UART_SetConfig+0x348>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a1b      	ldr	r2, [pc, #108]	; (800cac8 <UART_SetConfig+0x2e4>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d138      	bne.n	800cad2 <UART_SetConfig+0x2ee>
 800ca60:	4b13      	ldr	r3, [pc, #76]	; (800cab0 <UART_SetConfig+0x2cc>)
 800ca62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ca6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca6e:	d017      	beq.n	800caa0 <UART_SetConfig+0x2bc>
 800ca70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca74:	d82a      	bhi.n	800cacc <UART_SetConfig+0x2e8>
 800ca76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca7a:	d00b      	beq.n	800ca94 <UART_SetConfig+0x2b0>
 800ca7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca80:	d824      	bhi.n	800cacc <UART_SetConfig+0x2e8>
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d003      	beq.n	800ca8e <UART_SetConfig+0x2aa>
 800ca86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca8a:	d006      	beq.n	800ca9a <UART_SetConfig+0x2b6>
 800ca8c:	e01e      	b.n	800cacc <UART_SetConfig+0x2e8>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	77fb      	strb	r3, [r7, #31]
 800ca92:	e04b      	b.n	800cb2c <UART_SetConfig+0x348>
 800ca94:	2302      	movs	r3, #2
 800ca96:	77fb      	strb	r3, [r7, #31]
 800ca98:	e048      	b.n	800cb2c <UART_SetConfig+0x348>
 800ca9a:	2304      	movs	r3, #4
 800ca9c:	77fb      	strb	r3, [r7, #31]
 800ca9e:	e045      	b.n	800cb2c <UART_SetConfig+0x348>
 800caa0:	2308      	movs	r3, #8
 800caa2:	77fb      	strb	r3, [r7, #31]
 800caa4:	e042      	b.n	800cb2c <UART_SetConfig+0x348>
 800caa6:	bf00      	nop
 800caa8:	efff69f3 	.word	0xefff69f3
 800caac:	40011000 	.word	0x40011000
 800cab0:	40023800 	.word	0x40023800
 800cab4:	40004400 	.word	0x40004400
 800cab8:	40004800 	.word	0x40004800
 800cabc:	40004c00 	.word	0x40004c00
 800cac0:	40005000 	.word	0x40005000
 800cac4:	40011400 	.word	0x40011400
 800cac8:	40007800 	.word	0x40007800
 800cacc:	2310      	movs	r3, #16
 800cace:	77fb      	strb	r3, [r7, #31]
 800cad0:	e02c      	b.n	800cb2c <UART_SetConfig+0x348>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a72      	ldr	r2, [pc, #456]	; (800cca0 <UART_SetConfig+0x4bc>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d125      	bne.n	800cb28 <UART_SetConfig+0x344>
 800cadc:	4b71      	ldr	r3, [pc, #452]	; (800cca4 <UART_SetConfig+0x4c0>)
 800cade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cae2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cae6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800caea:	d017      	beq.n	800cb1c <UART_SetConfig+0x338>
 800caec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800caf0:	d817      	bhi.n	800cb22 <UART_SetConfig+0x33e>
 800caf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caf6:	d00b      	beq.n	800cb10 <UART_SetConfig+0x32c>
 800caf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cafc:	d811      	bhi.n	800cb22 <UART_SetConfig+0x33e>
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d003      	beq.n	800cb0a <UART_SetConfig+0x326>
 800cb02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb06:	d006      	beq.n	800cb16 <UART_SetConfig+0x332>
 800cb08:	e00b      	b.n	800cb22 <UART_SetConfig+0x33e>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	77fb      	strb	r3, [r7, #31]
 800cb0e:	e00d      	b.n	800cb2c <UART_SetConfig+0x348>
 800cb10:	2302      	movs	r3, #2
 800cb12:	77fb      	strb	r3, [r7, #31]
 800cb14:	e00a      	b.n	800cb2c <UART_SetConfig+0x348>
 800cb16:	2304      	movs	r3, #4
 800cb18:	77fb      	strb	r3, [r7, #31]
 800cb1a:	e007      	b.n	800cb2c <UART_SetConfig+0x348>
 800cb1c:	2308      	movs	r3, #8
 800cb1e:	77fb      	strb	r3, [r7, #31]
 800cb20:	e004      	b.n	800cb2c <UART_SetConfig+0x348>
 800cb22:	2310      	movs	r3, #16
 800cb24:	77fb      	strb	r3, [r7, #31]
 800cb26:	e001      	b.n	800cb2c <UART_SetConfig+0x348>
 800cb28:	2310      	movs	r3, #16
 800cb2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb34:	d15b      	bne.n	800cbee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cb36:	7ffb      	ldrb	r3, [r7, #31]
 800cb38:	2b08      	cmp	r3, #8
 800cb3a:	d828      	bhi.n	800cb8e <UART_SetConfig+0x3aa>
 800cb3c:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <UART_SetConfig+0x360>)
 800cb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb42:	bf00      	nop
 800cb44:	0800cb69 	.word	0x0800cb69
 800cb48:	0800cb71 	.word	0x0800cb71
 800cb4c:	0800cb79 	.word	0x0800cb79
 800cb50:	0800cb8f 	.word	0x0800cb8f
 800cb54:	0800cb7f 	.word	0x0800cb7f
 800cb58:	0800cb8f 	.word	0x0800cb8f
 800cb5c:	0800cb8f 	.word	0x0800cb8f
 800cb60:	0800cb8f 	.word	0x0800cb8f
 800cb64:	0800cb87 	.word	0x0800cb87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb68:	f7fe fe9c 	bl	800b8a4 <HAL_RCC_GetPCLK1Freq>
 800cb6c:	61b8      	str	r0, [r7, #24]
        break;
 800cb6e:	e013      	b.n	800cb98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb70:	f7fe feac 	bl	800b8cc <HAL_RCC_GetPCLK2Freq>
 800cb74:	61b8      	str	r0, [r7, #24]
        break;
 800cb76:	e00f      	b.n	800cb98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb78:	4b4b      	ldr	r3, [pc, #300]	; (800cca8 <UART_SetConfig+0x4c4>)
 800cb7a:	61bb      	str	r3, [r7, #24]
        break;
 800cb7c:	e00c      	b.n	800cb98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb7e:	f7fe fd7f 	bl	800b680 <HAL_RCC_GetSysClockFreq>
 800cb82:	61b8      	str	r0, [r7, #24]
        break;
 800cb84:	e008      	b.n	800cb98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb8a:	61bb      	str	r3, [r7, #24]
        break;
 800cb8c:	e004      	b.n	800cb98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	77bb      	strb	r3, [r7, #30]
        break;
 800cb96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d074      	beq.n	800cc88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	005a      	lsls	r2, r3, #1
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	085b      	lsrs	r3, r3, #1
 800cba8:	441a      	add	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	2b0f      	cmp	r3, #15
 800cbb8:	d916      	bls.n	800cbe8 <UART_SetConfig+0x404>
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc0:	d212      	bcs.n	800cbe8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	f023 030f 	bic.w	r3, r3, #15
 800cbca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	085b      	lsrs	r3, r3, #1
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	f003 0307 	and.w	r3, r3, #7
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	89fb      	ldrh	r3, [r7, #14]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	89fa      	ldrh	r2, [r7, #14]
 800cbe4:	60da      	str	r2, [r3, #12]
 800cbe6:	e04f      	b.n	800cc88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	77bb      	strb	r3, [r7, #30]
 800cbec:	e04c      	b.n	800cc88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbee:	7ffb      	ldrb	r3, [r7, #31]
 800cbf0:	2b08      	cmp	r3, #8
 800cbf2:	d828      	bhi.n	800cc46 <UART_SetConfig+0x462>
 800cbf4:	a201      	add	r2, pc, #4	; (adr r2, 800cbfc <UART_SetConfig+0x418>)
 800cbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfa:	bf00      	nop
 800cbfc:	0800cc21 	.word	0x0800cc21
 800cc00:	0800cc29 	.word	0x0800cc29
 800cc04:	0800cc31 	.word	0x0800cc31
 800cc08:	0800cc47 	.word	0x0800cc47
 800cc0c:	0800cc37 	.word	0x0800cc37
 800cc10:	0800cc47 	.word	0x0800cc47
 800cc14:	0800cc47 	.word	0x0800cc47
 800cc18:	0800cc47 	.word	0x0800cc47
 800cc1c:	0800cc3f 	.word	0x0800cc3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc20:	f7fe fe40 	bl	800b8a4 <HAL_RCC_GetPCLK1Freq>
 800cc24:	61b8      	str	r0, [r7, #24]
        break;
 800cc26:	e013      	b.n	800cc50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc28:	f7fe fe50 	bl	800b8cc <HAL_RCC_GetPCLK2Freq>
 800cc2c:	61b8      	str	r0, [r7, #24]
        break;
 800cc2e:	e00f      	b.n	800cc50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc30:	4b1d      	ldr	r3, [pc, #116]	; (800cca8 <UART_SetConfig+0x4c4>)
 800cc32:	61bb      	str	r3, [r7, #24]
        break;
 800cc34:	e00c      	b.n	800cc50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc36:	f7fe fd23 	bl	800b680 <HAL_RCC_GetSysClockFreq>
 800cc3a:	61b8      	str	r0, [r7, #24]
        break;
 800cc3c:	e008      	b.n	800cc50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc42:	61bb      	str	r3, [r7, #24]
        break;
 800cc44:	e004      	b.n	800cc50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cc46:	2300      	movs	r3, #0
 800cc48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	77bb      	strb	r3, [r7, #30]
        break;
 800cc4e:	bf00      	nop
    }

    if (pclk != 0U)
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d018      	beq.n	800cc88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	085a      	lsrs	r2, r3, #1
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	441a      	add	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	2b0f      	cmp	r3, #15
 800cc6e:	d909      	bls.n	800cc84 <UART_SetConfig+0x4a0>
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc76:	d205      	bcs.n	800cc84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60da      	str	r2, [r3, #12]
 800cc82:	e001      	b.n	800cc88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800cc94:	7fbb      	ldrb	r3, [r7, #30]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3720      	adds	r7, #32
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	40007c00 	.word	0x40007c00
 800cca4:	40023800 	.word	0x40023800
 800cca8:	00f42400 	.word	0x00f42400

0800ccac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00a      	beq.n	800ccd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	430a      	orrs	r2, r1
 800ccd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccda:	f003 0302 	and.w	r3, r3, #2
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00a      	beq.n	800ccf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	430a      	orrs	r2, r1
 800ccf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfc:	f003 0304 	and.w	r3, r3, #4
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00a      	beq.n	800cd1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	430a      	orrs	r2, r1
 800cd18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1e:	f003 0308 	and.w	r3, r3, #8
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00a      	beq.n	800cd3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	430a      	orrs	r2, r1
 800cd3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd40:	f003 0310 	and.w	r3, r3, #16
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00a      	beq.n	800cd5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	430a      	orrs	r2, r1
 800cd5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd62:	f003 0320 	and.w	r3, r3, #32
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00a      	beq.n	800cd80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	430a      	orrs	r2, r1
 800cd7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d01a      	beq.n	800cdc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	430a      	orrs	r2, r1
 800cda0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdaa:	d10a      	bne.n	800cdc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	430a      	orrs	r2, r1
 800cdc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00a      	beq.n	800cde4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	430a      	orrs	r2, r1
 800cde2:	605a      	str	r2, [r3, #4]
  }
}
 800cde4:	bf00      	nop
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce00:	f7fc fe84 	bl	8009b0c <HAL_GetTick>
 800ce04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f003 0308 	and.w	r3, r3, #8
 800ce10:	2b08      	cmp	r3, #8
 800ce12:	d10e      	bne.n	800ce32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f817 	bl	800ce56 <UART_WaitOnFlagUntilTimeout>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d001      	beq.n	800ce32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	e00d      	b.n	800ce4e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2220      	movs	r2, #32
 800ce36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b09c      	sub	sp, #112	; 0x70
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	60b9      	str	r1, [r7, #8]
 800ce60:	603b      	str	r3, [r7, #0]
 800ce62:	4613      	mov	r3, r2
 800ce64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce66:	e0a5      	b.n	800cfb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6e:	f000 80a1 	beq.w	800cfb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce72:	f7fc fe4b 	bl	8009b0c <HAL_GetTick>
 800ce76:	4602      	mov	r2, r0
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d302      	bcc.n	800ce88 <UART_WaitOnFlagUntilTimeout+0x32>
 800ce82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d13e      	bne.n	800cf06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce90:	e853 3f00 	ldrex	r3, [r3]
 800ce94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ce9c:	667b      	str	r3, [r7, #100]	; 0x64
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	461a      	mov	r2, r3
 800cea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cea8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ceac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ceae:	e841 2300 	strex	r3, r2, [r1]
 800ceb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ceb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1e6      	bne.n	800ce88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	3308      	adds	r3, #8
 800cec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cec4:	e853 3f00 	ldrex	r3, [r3]
 800cec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	f023 0301 	bic.w	r3, r3, #1
 800ced0:	663b      	str	r3, [r7, #96]	; 0x60
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3308      	adds	r3, #8
 800ced8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ceda:	64ba      	str	r2, [r7, #72]	; 0x48
 800cedc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e5      	bne.n	800ceba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2220      	movs	r2, #32
 800cef2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2220      	movs	r2, #32
 800cef8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800cf02:	2303      	movs	r3, #3
 800cf04:	e067      	b.n	800cfd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 0304 	and.w	r3, r3, #4
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d04f      	beq.n	800cfb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	69db      	ldr	r3, [r3, #28]
 800cf1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf22:	d147      	bne.n	800cfb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf36:	e853 3f00 	ldrex	r3, [r3]
 800cf3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf42:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf4c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf54:	e841 2300 	strex	r3, r2, [r1]
 800cf58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e6      	bne.n	800cf2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	3308      	adds	r3, #8
 800cf66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	e853 3f00 	ldrex	r3, [r3]
 800cf6e:	613b      	str	r3, [r7, #16]
   return(result);
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	f023 0301 	bic.w	r3, r3, #1
 800cf76:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf80:	623a      	str	r2, [r7, #32]
 800cf82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf84:	69f9      	ldr	r1, [r7, #28]
 800cf86:	6a3a      	ldr	r2, [r7, #32]
 800cf88:	e841 2300 	strex	r3, r2, [r1]
 800cf8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1e5      	bne.n	800cf60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2220      	movs	r2, #32
 800cf98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2220      	movs	r2, #32
 800cf9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	e010      	b.n	800cfd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	69da      	ldr	r2, [r3, #28]
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	bf0c      	ite	eq
 800cfc4:	2301      	moveq	r3, #1
 800cfc6:	2300      	movne	r3, #0
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	461a      	mov	r2, r3
 800cfcc:	79fb      	ldrb	r3, [r7, #7]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	f43f af4a 	beq.w	800ce68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3770      	adds	r7, #112	; 0x70
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
	...

0800cfe0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b097      	sub	sp, #92	; 0x5c
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	4613      	mov	r3, r2
 800cfec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	88fa      	ldrh	r2, [r7, #6]
 800cff8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	88fa      	ldrh	r2, [r7, #6]
 800d000:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d012:	d10e      	bne.n	800d032 <UART_Start_Receive_IT+0x52>
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d105      	bne.n	800d028 <UART_Start_Receive_IT+0x48>
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d026:	e02d      	b.n	800d084 <UART_Start_Receive_IT+0xa4>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	22ff      	movs	r2, #255	; 0xff
 800d02c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d030:	e028      	b.n	800d084 <UART_Start_Receive_IT+0xa4>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10d      	bne.n	800d056 <UART_Start_Receive_IT+0x76>
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d104      	bne.n	800d04c <UART_Start_Receive_IT+0x6c>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	22ff      	movs	r2, #255	; 0xff
 800d046:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d04a:	e01b      	b.n	800d084 <UART_Start_Receive_IT+0xa4>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	227f      	movs	r2, #127	; 0x7f
 800d050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d054:	e016      	b.n	800d084 <UART_Start_Receive_IT+0xa4>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d05e:	d10d      	bne.n	800d07c <UART_Start_Receive_IT+0x9c>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	691b      	ldr	r3, [r3, #16]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d104      	bne.n	800d072 <UART_Start_Receive_IT+0x92>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	227f      	movs	r2, #127	; 0x7f
 800d06c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d070:	e008      	b.n	800d084 <UART_Start_Receive_IT+0xa4>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	223f      	movs	r2, #63	; 0x3f
 800d076:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d07a:	e003      	b.n	800d084 <UART_Start_Receive_IT+0xa4>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2222      	movs	r2, #34	; 0x22
 800d090:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	3308      	adds	r3, #8
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d09c:	e853 3f00 	ldrex	r3, [r3]
 800d0a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a4:	f043 0301 	orr.w	r3, r3, #1
 800d0a8:	657b      	str	r3, [r7, #84]	; 0x54
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	3308      	adds	r3, #8
 800d0b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800d0b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0ba:	e841 2300 	strex	r3, r2, [r1]
 800d0be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e5      	bne.n	800d092 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0ce:	d107      	bne.n	800d0e0 <UART_Start_Receive_IT+0x100>
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	691b      	ldr	r3, [r3, #16]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d103      	bne.n	800d0e0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4a24      	ldr	r2, [pc, #144]	; (800d16c <UART_Start_Receive_IT+0x18c>)
 800d0dc:	665a      	str	r2, [r3, #100]	; 0x64
 800d0de:	e002      	b.n	800d0e6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	4a23      	ldr	r2, [pc, #140]	; (800d170 <UART_Start_Receive_IT+0x190>)
 800d0e4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d019      	beq.n	800d12a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	e853 3f00 	ldrex	r3, [r3]
 800d102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d10a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	461a      	mov	r2, r3
 800d112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d114:	637b      	str	r3, [r7, #52]	; 0x34
 800d116:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d11a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d11c:	e841 2300 	strex	r3, r2, [r1]
 800d120:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1e6      	bne.n	800d0f6 <UART_Start_Receive_IT+0x116>
 800d128:	e018      	b.n	800d15c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	e853 3f00 	ldrex	r3, [r3]
 800d136:	613b      	str	r3, [r7, #16]
   return(result);
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	f043 0320 	orr.w	r3, r3, #32
 800d13e:	653b      	str	r3, [r7, #80]	; 0x50
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	461a      	mov	r2, r3
 800d146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d148:	623b      	str	r3, [r7, #32]
 800d14a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d14c:	69f9      	ldr	r1, [r7, #28]
 800d14e:	6a3a      	ldr	r2, [r7, #32]
 800d150:	e841 2300 	strex	r3, r2, [r1]
 800d154:	61bb      	str	r3, [r7, #24]
   return(result);
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1e6      	bne.n	800d12a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	375c      	adds	r7, #92	; 0x5c
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	0800d58d 	.word	0x0800d58d
 800d170:	0800d431 	.word	0x0800d431

0800d174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d174:	b480      	push	{r7}
 800d176:	b095      	sub	sp, #84	; 0x54
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	e853 3f00 	ldrex	r3, [r3]
 800d188:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d190:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	461a      	mov	r2, r3
 800d198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19a:	643b      	str	r3, [r7, #64]	; 0x40
 800d19c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1a2:	e841 2300 	strex	r3, r2, [r1]
 800d1a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1e6      	bne.n	800d17c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3308      	adds	r3, #8
 800d1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	e853 3f00 	ldrex	r3, [r3]
 800d1bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	f023 0301 	bic.w	r3, r3, #1
 800d1c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	3308      	adds	r3, #8
 800d1cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1d6:	e841 2300 	strex	r3, r2, [r1]
 800d1da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1e5      	bne.n	800d1ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d118      	bne.n	800d21c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	e853 3f00 	ldrex	r3, [r3]
 800d1f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	f023 0310 	bic.w	r3, r3, #16
 800d1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	461a      	mov	r2, r3
 800d206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d208:	61bb      	str	r3, [r7, #24]
 800d20a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20c:	6979      	ldr	r1, [r7, #20]
 800d20e:	69ba      	ldr	r2, [r7, #24]
 800d210:	e841 2300 	strex	r3, r2, [r1]
 800d214:	613b      	str	r3, [r7, #16]
   return(result);
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1e6      	bne.n	800d1ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2220      	movs	r2, #32
 800d220:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d22e:	bf00      	nop
 800d230:	3754      	adds	r7, #84	; 0x54
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr

0800d23a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b084      	sub	sp, #16
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f7fc f89b 	bl	8009394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d25e:	bf00      	nop
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d266:	b480      	push	{r7}
 800d268:	b08f      	sub	sp, #60	; 0x3c
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d272:	2b21      	cmp	r3, #33	; 0x21
 800d274:	d14c      	bne.n	800d310 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d132      	bne.n	800d2e8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d288:	6a3b      	ldr	r3, [r7, #32]
 800d28a:	e853 3f00 	ldrex	r3, [r3]
 800d28e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d296:	637b      	str	r3, [r7, #52]	; 0x34
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	461a      	mov	r2, r3
 800d29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2a8:	e841 2300 	strex	r3, r2, [r1]
 800d2ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1e6      	bne.n	800d282 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	e853 3f00 	ldrex	r3, [r3]
 800d2c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c8:	633b      	str	r3, [r7, #48]	; 0x30
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d2:	61bb      	str	r3, [r7, #24]
 800d2d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d6:	6979      	ldr	r1, [r7, #20]
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	e841 2300 	strex	r3, r2, [r1]
 800d2de:	613b      	str	r3, [r7, #16]
   return(result);
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1e6      	bne.n	800d2b4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d2e6:	e013      	b.n	800d310 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2ec:	781a      	ldrb	r2, [r3, #0]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d304:	b29b      	uxth	r3, r3
 800d306:	3b01      	subs	r3, #1
 800d308:	b29a      	uxth	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d310:	bf00      	nop
 800d312:	373c      	adds	r7, #60	; 0x3c
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b091      	sub	sp, #68	; 0x44
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d328:	2b21      	cmp	r3, #33	; 0x21
 800d32a:	d151      	bne.n	800d3d0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d332:	b29b      	uxth	r3, r3
 800d334:	2b00      	cmp	r3, #0
 800d336:	d132      	bne.n	800d39e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d340:	e853 3f00 	ldrex	r3, [r3]
 800d344:	623b      	str	r3, [r7, #32]
   return(result);
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d34c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	461a      	mov	r2, r3
 800d354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d356:	633b      	str	r3, [r7, #48]	; 0x30
 800d358:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d35e:	e841 2300 	strex	r3, r2, [r1]
 800d362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1e6      	bne.n	800d338 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	e853 3f00 	ldrex	r3, [r3]
 800d376:	60fb      	str	r3, [r7, #12]
   return(result);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d37e:	637b      	str	r3, [r7, #52]	; 0x34
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	461a      	mov	r2, r3
 800d386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d388:	61fb      	str	r3, [r7, #28]
 800d38a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d38c:	69b9      	ldr	r1, [r7, #24]
 800d38e:	69fa      	ldr	r2, [r7, #28]
 800d390:	e841 2300 	strex	r3, r2, [r1]
 800d394:	617b      	str	r3, [r7, #20]
   return(result);
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1e6      	bne.n	800d36a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d39c:	e018      	b.n	800d3d0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d3b2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3b8:	1c9a      	adds	r2, r3, #2
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d3d0:	bf00      	nop
 800d3d2:	3744      	adds	r7, #68	; 0x44
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b088      	sub	sp, #32
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	e853 3f00 	ldrex	r3, [r3]
 800d3f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3f8:	61fb      	str	r3, [r7, #28]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	461a      	mov	r2, r3
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	61bb      	str	r3, [r7, #24]
 800d404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d406:	6979      	ldr	r1, [r7, #20]
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	e841 2300 	strex	r3, r2, [r1]
 800d40e:	613b      	str	r3, [r7, #16]
   return(result);
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1e6      	bne.n	800d3e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2220      	movs	r2, #32
 800d41a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7fb ff8e 	bl	8009344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d428:	bf00      	nop
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b096      	sub	sp, #88	; 0x58
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d43e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d446:	2b22      	cmp	r3, #34	; 0x22
 800d448:	f040 8094 	bne.w	800d574 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d452:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d456:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d45a:	b2d9      	uxtb	r1, r3
 800d45c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d460:	b2da      	uxtb	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d466:	400a      	ands	r2, r1
 800d468:	b2d2      	uxtb	r2, r2
 800d46a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	3b01      	subs	r3, #1
 800d480:	b29a      	uxth	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d48e:	b29b      	uxth	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	d177      	bne.n	800d584 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49c:	e853 3f00 	ldrex	r3, [r3]
 800d4a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4a8:	653b      	str	r3, [r7, #80]	; 0x50
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d4b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d4b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4ba:	e841 2300 	strex	r3, r2, [r1]
 800d4be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1e6      	bne.n	800d494 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	3308      	adds	r3, #8
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	e853 3f00 	ldrex	r3, [r3]
 800d4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	f023 0301 	bic.w	r3, r3, #1
 800d4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	3308      	adds	r3, #8
 800d4e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d4e6:	633a      	str	r2, [r7, #48]	; 0x30
 800d4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4ee:	e841 2300 	strex	r3, r2, [r1]
 800d4f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1e5      	bne.n	800d4c6 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2220      	movs	r2, #32
 800d4fe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d12e      	bne.n	800d56c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	e853 3f00 	ldrex	r3, [r3]
 800d520:	60fb      	str	r3, [r7, #12]
   return(result);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f023 0310 	bic.w	r3, r3, #16
 800d528:	64bb      	str	r3, [r7, #72]	; 0x48
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d532:	61fb      	str	r3, [r7, #28]
 800d534:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d536:	69b9      	ldr	r1, [r7, #24]
 800d538:	69fa      	ldr	r2, [r7, #28]
 800d53a:	e841 2300 	strex	r3, r2, [r1]
 800d53e:	617b      	str	r3, [r7, #20]
   return(result);
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1e6      	bne.n	800d514 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	69db      	ldr	r3, [r3, #28]
 800d54c:	f003 0310 	and.w	r3, r3, #16
 800d550:	2b10      	cmp	r3, #16
 800d552:	d103      	bne.n	800d55c <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2210      	movs	r2, #16
 800d55a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff f931 	bl	800c7cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d56a:	e00b      	b.n	800d584 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7fb fefd 	bl	800936c <HAL_UART_RxCpltCallback>
}
 800d572:	e007      	b.n	800d584 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699a      	ldr	r2, [r3, #24]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f042 0208 	orr.w	r2, r2, #8
 800d582:	619a      	str	r2, [r3, #24]
}
 800d584:	bf00      	nop
 800d586:	3758      	adds	r7, #88	; 0x58
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b096      	sub	sp, #88	; 0x58
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d59a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5a2:	2b22      	cmp	r3, #34	; 0x22
 800d5a4:	f040 8094 	bne.w	800d6d0 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5b6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d5b8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d5bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5cc:	1c9a      	adds	r2, r3, #2
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d177      	bne.n	800d6e0 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f8:	e853 3f00 	ldrex	r3, [r3]
 800d5fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d604:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d60e:	643b      	str	r3, [r7, #64]	; 0x40
 800d610:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d612:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d616:	e841 2300 	strex	r3, r2, [r1]
 800d61a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1e6      	bne.n	800d5f0 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3308      	adds	r3, #8
 800d628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62a:	6a3b      	ldr	r3, [r7, #32]
 800d62c:	e853 3f00 	ldrex	r3, [r3]
 800d630:	61fb      	str	r3, [r7, #28]
   return(result);
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	f023 0301 	bic.w	r3, r3, #1
 800d638:	64bb      	str	r3, [r7, #72]	; 0x48
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3308      	adds	r3, #8
 800d640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d642:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d64a:	e841 2300 	strex	r3, r2, [r1]
 800d64e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1e5      	bne.n	800d622 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2220      	movs	r2, #32
 800d65a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d666:	2b01      	cmp	r3, #1
 800d668:	d12e      	bne.n	800d6c8 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	e853 3f00 	ldrex	r3, [r3]
 800d67c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	f023 0310 	bic.w	r3, r3, #16
 800d684:	647b      	str	r3, [r7, #68]	; 0x44
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	461a      	mov	r2, r3
 800d68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d68e:	61bb      	str	r3, [r7, #24]
 800d690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d692:	6979      	ldr	r1, [r7, #20]
 800d694:	69ba      	ldr	r2, [r7, #24]
 800d696:	e841 2300 	strex	r3, r2, [r1]
 800d69a:	613b      	str	r3, [r7, #16]
   return(result);
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1e6      	bne.n	800d670 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	69db      	ldr	r3, [r3, #28]
 800d6a8:	f003 0310 	and.w	r3, r3, #16
 800d6ac:	2b10      	cmp	r3, #16
 800d6ae:	d103      	bne.n	800d6b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2210      	movs	r2, #16
 800d6b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f7ff f883 	bl	800c7cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d6c6:	e00b      	b.n	800d6e0 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7fb fe4f 	bl	800936c <HAL_UART_RxCpltCallback>
}
 800d6ce:	e007      	b.n	800d6e0 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	699a      	ldr	r2, [r3, #24]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f042 0208 	orr.w	r2, r2, #8
 800d6de:	619a      	str	r2, [r3, #24]
}
 800d6e0:	bf00      	nop
 800d6e2:	3758      	adds	r7, #88	; 0x58
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <__errno>:
 800d6e8:	4b01      	ldr	r3, [pc, #4]	; (800d6f0 <__errno+0x8>)
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	20000014 	.word	0x20000014

0800d6f4 <__libc_init_array>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	4d0d      	ldr	r5, [pc, #52]	; (800d72c <__libc_init_array+0x38>)
 800d6f8:	4c0d      	ldr	r4, [pc, #52]	; (800d730 <__libc_init_array+0x3c>)
 800d6fa:	1b64      	subs	r4, r4, r5
 800d6fc:	10a4      	asrs	r4, r4, #2
 800d6fe:	2600      	movs	r6, #0
 800d700:	42a6      	cmp	r6, r4
 800d702:	d109      	bne.n	800d718 <__libc_init_array+0x24>
 800d704:	4d0b      	ldr	r5, [pc, #44]	; (800d734 <__libc_init_array+0x40>)
 800d706:	4c0c      	ldr	r4, [pc, #48]	; (800d738 <__libc_init_array+0x44>)
 800d708:	f003 fd8e 	bl	8011228 <_init>
 800d70c:	1b64      	subs	r4, r4, r5
 800d70e:	10a4      	asrs	r4, r4, #2
 800d710:	2600      	movs	r6, #0
 800d712:	42a6      	cmp	r6, r4
 800d714:	d105      	bne.n	800d722 <__libc_init_array+0x2e>
 800d716:	bd70      	pop	{r4, r5, r6, pc}
 800d718:	f855 3b04 	ldr.w	r3, [r5], #4
 800d71c:	4798      	blx	r3
 800d71e:	3601      	adds	r6, #1
 800d720:	e7ee      	b.n	800d700 <__libc_init_array+0xc>
 800d722:	f855 3b04 	ldr.w	r3, [r5], #4
 800d726:	4798      	blx	r3
 800d728:	3601      	adds	r6, #1
 800d72a:	e7f2      	b.n	800d712 <__libc_init_array+0x1e>
 800d72c:	080142f0 	.word	0x080142f0
 800d730:	080142f0 	.word	0x080142f0
 800d734:	080142f0 	.word	0x080142f0
 800d738:	080142f4 	.word	0x080142f4

0800d73c <memset>:
 800d73c:	4402      	add	r2, r0
 800d73e:	4603      	mov	r3, r0
 800d740:	4293      	cmp	r3, r2
 800d742:	d100      	bne.n	800d746 <memset+0xa>
 800d744:	4770      	bx	lr
 800d746:	f803 1b01 	strb.w	r1, [r3], #1
 800d74a:	e7f9      	b.n	800d740 <memset+0x4>

0800d74c <__cvt>:
 800d74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d750:	ec55 4b10 	vmov	r4, r5, d0
 800d754:	2d00      	cmp	r5, #0
 800d756:	460e      	mov	r6, r1
 800d758:	4619      	mov	r1, r3
 800d75a:	462b      	mov	r3, r5
 800d75c:	bfbb      	ittet	lt
 800d75e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d762:	461d      	movlt	r5, r3
 800d764:	2300      	movge	r3, #0
 800d766:	232d      	movlt	r3, #45	; 0x2d
 800d768:	700b      	strb	r3, [r1, #0]
 800d76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d76c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d770:	4691      	mov	r9, r2
 800d772:	f023 0820 	bic.w	r8, r3, #32
 800d776:	bfbc      	itt	lt
 800d778:	4622      	movlt	r2, r4
 800d77a:	4614      	movlt	r4, r2
 800d77c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d780:	d005      	beq.n	800d78e <__cvt+0x42>
 800d782:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d786:	d100      	bne.n	800d78a <__cvt+0x3e>
 800d788:	3601      	adds	r6, #1
 800d78a:	2102      	movs	r1, #2
 800d78c:	e000      	b.n	800d790 <__cvt+0x44>
 800d78e:	2103      	movs	r1, #3
 800d790:	ab03      	add	r3, sp, #12
 800d792:	9301      	str	r3, [sp, #4]
 800d794:	ab02      	add	r3, sp, #8
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	ec45 4b10 	vmov	d0, r4, r5
 800d79c:	4653      	mov	r3, sl
 800d79e:	4632      	mov	r2, r6
 800d7a0:	f000 fe52 	bl	800e448 <_dtoa_r>
 800d7a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d7a8:	4607      	mov	r7, r0
 800d7aa:	d102      	bne.n	800d7b2 <__cvt+0x66>
 800d7ac:	f019 0f01 	tst.w	r9, #1
 800d7b0:	d022      	beq.n	800d7f8 <__cvt+0xac>
 800d7b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7b6:	eb07 0906 	add.w	r9, r7, r6
 800d7ba:	d110      	bne.n	800d7de <__cvt+0x92>
 800d7bc:	783b      	ldrb	r3, [r7, #0]
 800d7be:	2b30      	cmp	r3, #48	; 0x30
 800d7c0:	d10a      	bne.n	800d7d8 <__cvt+0x8c>
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	f7f3 f99d 	bl	8000b08 <__aeabi_dcmpeq>
 800d7ce:	b918      	cbnz	r0, 800d7d8 <__cvt+0x8c>
 800d7d0:	f1c6 0601 	rsb	r6, r6, #1
 800d7d4:	f8ca 6000 	str.w	r6, [sl]
 800d7d8:	f8da 3000 	ldr.w	r3, [sl]
 800d7dc:	4499      	add	r9, r3
 800d7de:	2200      	movs	r2, #0
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	f7f3 f98f 	bl	8000b08 <__aeabi_dcmpeq>
 800d7ea:	b108      	cbz	r0, 800d7f0 <__cvt+0xa4>
 800d7ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7f0:	2230      	movs	r2, #48	; 0x30
 800d7f2:	9b03      	ldr	r3, [sp, #12]
 800d7f4:	454b      	cmp	r3, r9
 800d7f6:	d307      	bcc.n	800d808 <__cvt+0xbc>
 800d7f8:	9b03      	ldr	r3, [sp, #12]
 800d7fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7fc:	1bdb      	subs	r3, r3, r7
 800d7fe:	4638      	mov	r0, r7
 800d800:	6013      	str	r3, [r2, #0]
 800d802:	b004      	add	sp, #16
 800d804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d808:	1c59      	adds	r1, r3, #1
 800d80a:	9103      	str	r1, [sp, #12]
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	e7f0      	b.n	800d7f2 <__cvt+0xa6>

0800d810 <__exponent>:
 800d810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d812:	4603      	mov	r3, r0
 800d814:	2900      	cmp	r1, #0
 800d816:	bfb8      	it	lt
 800d818:	4249      	neglt	r1, r1
 800d81a:	f803 2b02 	strb.w	r2, [r3], #2
 800d81e:	bfb4      	ite	lt
 800d820:	222d      	movlt	r2, #45	; 0x2d
 800d822:	222b      	movge	r2, #43	; 0x2b
 800d824:	2909      	cmp	r1, #9
 800d826:	7042      	strb	r2, [r0, #1]
 800d828:	dd2a      	ble.n	800d880 <__exponent+0x70>
 800d82a:	f10d 0407 	add.w	r4, sp, #7
 800d82e:	46a4      	mov	ip, r4
 800d830:	270a      	movs	r7, #10
 800d832:	46a6      	mov	lr, r4
 800d834:	460a      	mov	r2, r1
 800d836:	fb91 f6f7 	sdiv	r6, r1, r7
 800d83a:	fb07 1516 	mls	r5, r7, r6, r1
 800d83e:	3530      	adds	r5, #48	; 0x30
 800d840:	2a63      	cmp	r2, #99	; 0x63
 800d842:	f104 34ff 	add.w	r4, r4, #4294967295
 800d846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d84a:	4631      	mov	r1, r6
 800d84c:	dcf1      	bgt.n	800d832 <__exponent+0x22>
 800d84e:	3130      	adds	r1, #48	; 0x30
 800d850:	f1ae 0502 	sub.w	r5, lr, #2
 800d854:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d858:	1c44      	adds	r4, r0, #1
 800d85a:	4629      	mov	r1, r5
 800d85c:	4561      	cmp	r1, ip
 800d85e:	d30a      	bcc.n	800d876 <__exponent+0x66>
 800d860:	f10d 0209 	add.w	r2, sp, #9
 800d864:	eba2 020e 	sub.w	r2, r2, lr
 800d868:	4565      	cmp	r5, ip
 800d86a:	bf88      	it	hi
 800d86c:	2200      	movhi	r2, #0
 800d86e:	4413      	add	r3, r2
 800d870:	1a18      	subs	r0, r3, r0
 800d872:	b003      	add	sp, #12
 800d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d87a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d87e:	e7ed      	b.n	800d85c <__exponent+0x4c>
 800d880:	2330      	movs	r3, #48	; 0x30
 800d882:	3130      	adds	r1, #48	; 0x30
 800d884:	7083      	strb	r3, [r0, #2]
 800d886:	70c1      	strb	r1, [r0, #3]
 800d888:	1d03      	adds	r3, r0, #4
 800d88a:	e7f1      	b.n	800d870 <__exponent+0x60>

0800d88c <_printf_float>:
 800d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d890:	ed2d 8b02 	vpush	{d8}
 800d894:	b08d      	sub	sp, #52	; 0x34
 800d896:	460c      	mov	r4, r1
 800d898:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d89c:	4616      	mov	r6, r2
 800d89e:	461f      	mov	r7, r3
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	f001 fda5 	bl	800f3f0 <_localeconv_r>
 800d8a6:	f8d0 a000 	ldr.w	sl, [r0]
 800d8aa:	4650      	mov	r0, sl
 800d8ac:	f7f2 fcb0 	bl	8000210 <strlen>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	930a      	str	r3, [sp, #40]	; 0x28
 800d8b4:	6823      	ldr	r3, [r4, #0]
 800d8b6:	9305      	str	r3, [sp, #20]
 800d8b8:	f8d8 3000 	ldr.w	r3, [r8]
 800d8bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d8c0:	3307      	adds	r3, #7
 800d8c2:	f023 0307 	bic.w	r3, r3, #7
 800d8c6:	f103 0208 	add.w	r2, r3, #8
 800d8ca:	f8c8 2000 	str.w	r2, [r8]
 800d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d8d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d8da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d8de:	9307      	str	r3, [sp, #28]
 800d8e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800d8e4:	ee08 0a10 	vmov	s16, r0
 800d8e8:	4b9f      	ldr	r3, [pc, #636]	; (800db68 <_printf_float+0x2dc>)
 800d8ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f2:	f7f3 f93b 	bl	8000b6c <__aeabi_dcmpun>
 800d8f6:	bb88      	cbnz	r0, 800d95c <_printf_float+0xd0>
 800d8f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8fc:	4b9a      	ldr	r3, [pc, #616]	; (800db68 <_printf_float+0x2dc>)
 800d8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d902:	f7f3 f915 	bl	8000b30 <__aeabi_dcmple>
 800d906:	bb48      	cbnz	r0, 800d95c <_printf_float+0xd0>
 800d908:	2200      	movs	r2, #0
 800d90a:	2300      	movs	r3, #0
 800d90c:	4640      	mov	r0, r8
 800d90e:	4649      	mov	r1, r9
 800d910:	f7f3 f904 	bl	8000b1c <__aeabi_dcmplt>
 800d914:	b110      	cbz	r0, 800d91c <_printf_float+0x90>
 800d916:	232d      	movs	r3, #45	; 0x2d
 800d918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d91c:	4b93      	ldr	r3, [pc, #588]	; (800db6c <_printf_float+0x2e0>)
 800d91e:	4894      	ldr	r0, [pc, #592]	; (800db70 <_printf_float+0x2e4>)
 800d920:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d924:	bf94      	ite	ls
 800d926:	4698      	movls	r8, r3
 800d928:	4680      	movhi	r8, r0
 800d92a:	2303      	movs	r3, #3
 800d92c:	6123      	str	r3, [r4, #16]
 800d92e:	9b05      	ldr	r3, [sp, #20]
 800d930:	f023 0204 	bic.w	r2, r3, #4
 800d934:	6022      	str	r2, [r4, #0]
 800d936:	f04f 0900 	mov.w	r9, #0
 800d93a:	9700      	str	r7, [sp, #0]
 800d93c:	4633      	mov	r3, r6
 800d93e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d940:	4621      	mov	r1, r4
 800d942:	4628      	mov	r0, r5
 800d944:	f000 f9d8 	bl	800dcf8 <_printf_common>
 800d948:	3001      	adds	r0, #1
 800d94a:	f040 8090 	bne.w	800da6e <_printf_float+0x1e2>
 800d94e:	f04f 30ff 	mov.w	r0, #4294967295
 800d952:	b00d      	add	sp, #52	; 0x34
 800d954:	ecbd 8b02 	vpop	{d8}
 800d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95c:	4642      	mov	r2, r8
 800d95e:	464b      	mov	r3, r9
 800d960:	4640      	mov	r0, r8
 800d962:	4649      	mov	r1, r9
 800d964:	f7f3 f902 	bl	8000b6c <__aeabi_dcmpun>
 800d968:	b140      	cbz	r0, 800d97c <_printf_float+0xf0>
 800d96a:	464b      	mov	r3, r9
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	bfbc      	itt	lt
 800d970:	232d      	movlt	r3, #45	; 0x2d
 800d972:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d976:	487f      	ldr	r0, [pc, #508]	; (800db74 <_printf_float+0x2e8>)
 800d978:	4b7f      	ldr	r3, [pc, #508]	; (800db78 <_printf_float+0x2ec>)
 800d97a:	e7d1      	b.n	800d920 <_printf_float+0x94>
 800d97c:	6863      	ldr	r3, [r4, #4]
 800d97e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d982:	9206      	str	r2, [sp, #24]
 800d984:	1c5a      	adds	r2, r3, #1
 800d986:	d13f      	bne.n	800da08 <_printf_float+0x17c>
 800d988:	2306      	movs	r3, #6
 800d98a:	6063      	str	r3, [r4, #4]
 800d98c:	9b05      	ldr	r3, [sp, #20]
 800d98e:	6861      	ldr	r1, [r4, #4]
 800d990:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d994:	2300      	movs	r3, #0
 800d996:	9303      	str	r3, [sp, #12]
 800d998:	ab0a      	add	r3, sp, #40	; 0x28
 800d99a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d99e:	ab09      	add	r3, sp, #36	; 0x24
 800d9a0:	ec49 8b10 	vmov	d0, r8, r9
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	6022      	str	r2, [r4, #0]
 800d9a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	f7ff fecd 	bl	800d74c <__cvt>
 800d9b2:	9b06      	ldr	r3, [sp, #24]
 800d9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9b6:	2b47      	cmp	r3, #71	; 0x47
 800d9b8:	4680      	mov	r8, r0
 800d9ba:	d108      	bne.n	800d9ce <_printf_float+0x142>
 800d9bc:	1cc8      	adds	r0, r1, #3
 800d9be:	db02      	blt.n	800d9c6 <_printf_float+0x13a>
 800d9c0:	6863      	ldr	r3, [r4, #4]
 800d9c2:	4299      	cmp	r1, r3
 800d9c4:	dd41      	ble.n	800da4a <_printf_float+0x1be>
 800d9c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800d9ca:	fa5f fb8b 	uxtb.w	fp, fp
 800d9ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d9d2:	d820      	bhi.n	800da16 <_printf_float+0x18a>
 800d9d4:	3901      	subs	r1, #1
 800d9d6:	465a      	mov	r2, fp
 800d9d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d9dc:	9109      	str	r1, [sp, #36]	; 0x24
 800d9de:	f7ff ff17 	bl	800d810 <__exponent>
 800d9e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9e4:	1813      	adds	r3, r2, r0
 800d9e6:	2a01      	cmp	r2, #1
 800d9e8:	4681      	mov	r9, r0
 800d9ea:	6123      	str	r3, [r4, #16]
 800d9ec:	dc02      	bgt.n	800d9f4 <_printf_float+0x168>
 800d9ee:	6822      	ldr	r2, [r4, #0]
 800d9f0:	07d2      	lsls	r2, r2, #31
 800d9f2:	d501      	bpl.n	800d9f8 <_printf_float+0x16c>
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	6123      	str	r3, [r4, #16]
 800d9f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d09c      	beq.n	800d93a <_printf_float+0xae>
 800da00:	232d      	movs	r3, #45	; 0x2d
 800da02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da06:	e798      	b.n	800d93a <_printf_float+0xae>
 800da08:	9a06      	ldr	r2, [sp, #24]
 800da0a:	2a47      	cmp	r2, #71	; 0x47
 800da0c:	d1be      	bne.n	800d98c <_printf_float+0x100>
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1bc      	bne.n	800d98c <_printf_float+0x100>
 800da12:	2301      	movs	r3, #1
 800da14:	e7b9      	b.n	800d98a <_printf_float+0xfe>
 800da16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800da1a:	d118      	bne.n	800da4e <_printf_float+0x1c2>
 800da1c:	2900      	cmp	r1, #0
 800da1e:	6863      	ldr	r3, [r4, #4]
 800da20:	dd0b      	ble.n	800da3a <_printf_float+0x1ae>
 800da22:	6121      	str	r1, [r4, #16]
 800da24:	b913      	cbnz	r3, 800da2c <_printf_float+0x1a0>
 800da26:	6822      	ldr	r2, [r4, #0]
 800da28:	07d0      	lsls	r0, r2, #31
 800da2a:	d502      	bpl.n	800da32 <_printf_float+0x1a6>
 800da2c:	3301      	adds	r3, #1
 800da2e:	440b      	add	r3, r1
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	65a1      	str	r1, [r4, #88]	; 0x58
 800da34:	f04f 0900 	mov.w	r9, #0
 800da38:	e7de      	b.n	800d9f8 <_printf_float+0x16c>
 800da3a:	b913      	cbnz	r3, 800da42 <_printf_float+0x1b6>
 800da3c:	6822      	ldr	r2, [r4, #0]
 800da3e:	07d2      	lsls	r2, r2, #31
 800da40:	d501      	bpl.n	800da46 <_printf_float+0x1ba>
 800da42:	3302      	adds	r3, #2
 800da44:	e7f4      	b.n	800da30 <_printf_float+0x1a4>
 800da46:	2301      	movs	r3, #1
 800da48:	e7f2      	b.n	800da30 <_printf_float+0x1a4>
 800da4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800da4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da50:	4299      	cmp	r1, r3
 800da52:	db05      	blt.n	800da60 <_printf_float+0x1d4>
 800da54:	6823      	ldr	r3, [r4, #0]
 800da56:	6121      	str	r1, [r4, #16]
 800da58:	07d8      	lsls	r0, r3, #31
 800da5a:	d5ea      	bpl.n	800da32 <_printf_float+0x1a6>
 800da5c:	1c4b      	adds	r3, r1, #1
 800da5e:	e7e7      	b.n	800da30 <_printf_float+0x1a4>
 800da60:	2900      	cmp	r1, #0
 800da62:	bfd4      	ite	le
 800da64:	f1c1 0202 	rsble	r2, r1, #2
 800da68:	2201      	movgt	r2, #1
 800da6a:	4413      	add	r3, r2
 800da6c:	e7e0      	b.n	800da30 <_printf_float+0x1a4>
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	055a      	lsls	r2, r3, #21
 800da72:	d407      	bmi.n	800da84 <_printf_float+0x1f8>
 800da74:	6923      	ldr	r3, [r4, #16]
 800da76:	4642      	mov	r2, r8
 800da78:	4631      	mov	r1, r6
 800da7a:	4628      	mov	r0, r5
 800da7c:	47b8      	blx	r7
 800da7e:	3001      	adds	r0, #1
 800da80:	d12c      	bne.n	800dadc <_printf_float+0x250>
 800da82:	e764      	b.n	800d94e <_printf_float+0xc2>
 800da84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da88:	f240 80e0 	bls.w	800dc4c <_printf_float+0x3c0>
 800da8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da90:	2200      	movs	r2, #0
 800da92:	2300      	movs	r3, #0
 800da94:	f7f3 f838 	bl	8000b08 <__aeabi_dcmpeq>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d034      	beq.n	800db06 <_printf_float+0x27a>
 800da9c:	4a37      	ldr	r2, [pc, #220]	; (800db7c <_printf_float+0x2f0>)
 800da9e:	2301      	movs	r3, #1
 800daa0:	4631      	mov	r1, r6
 800daa2:	4628      	mov	r0, r5
 800daa4:	47b8      	blx	r7
 800daa6:	3001      	adds	r0, #1
 800daa8:	f43f af51 	beq.w	800d94e <_printf_float+0xc2>
 800daac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dab0:	429a      	cmp	r2, r3
 800dab2:	db02      	blt.n	800daba <_printf_float+0x22e>
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	07d8      	lsls	r0, r3, #31
 800dab8:	d510      	bpl.n	800dadc <_printf_float+0x250>
 800daba:	ee18 3a10 	vmov	r3, s16
 800dabe:	4652      	mov	r2, sl
 800dac0:	4631      	mov	r1, r6
 800dac2:	4628      	mov	r0, r5
 800dac4:	47b8      	blx	r7
 800dac6:	3001      	adds	r0, #1
 800dac8:	f43f af41 	beq.w	800d94e <_printf_float+0xc2>
 800dacc:	f04f 0800 	mov.w	r8, #0
 800dad0:	f104 091a 	add.w	r9, r4, #26
 800dad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dad6:	3b01      	subs	r3, #1
 800dad8:	4543      	cmp	r3, r8
 800dada:	dc09      	bgt.n	800daf0 <_printf_float+0x264>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	079b      	lsls	r3, r3, #30
 800dae0:	f100 8105 	bmi.w	800dcee <_printf_float+0x462>
 800dae4:	68e0      	ldr	r0, [r4, #12]
 800dae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dae8:	4298      	cmp	r0, r3
 800daea:	bfb8      	it	lt
 800daec:	4618      	movlt	r0, r3
 800daee:	e730      	b.n	800d952 <_printf_float+0xc6>
 800daf0:	2301      	movs	r3, #1
 800daf2:	464a      	mov	r2, r9
 800daf4:	4631      	mov	r1, r6
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b8      	blx	r7
 800dafa:	3001      	adds	r0, #1
 800dafc:	f43f af27 	beq.w	800d94e <_printf_float+0xc2>
 800db00:	f108 0801 	add.w	r8, r8, #1
 800db04:	e7e6      	b.n	800dad4 <_printf_float+0x248>
 800db06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db08:	2b00      	cmp	r3, #0
 800db0a:	dc39      	bgt.n	800db80 <_printf_float+0x2f4>
 800db0c:	4a1b      	ldr	r2, [pc, #108]	; (800db7c <_printf_float+0x2f0>)
 800db0e:	2301      	movs	r3, #1
 800db10:	4631      	mov	r1, r6
 800db12:	4628      	mov	r0, r5
 800db14:	47b8      	blx	r7
 800db16:	3001      	adds	r0, #1
 800db18:	f43f af19 	beq.w	800d94e <_printf_float+0xc2>
 800db1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db20:	4313      	orrs	r3, r2
 800db22:	d102      	bne.n	800db2a <_printf_float+0x29e>
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	07d9      	lsls	r1, r3, #31
 800db28:	d5d8      	bpl.n	800dadc <_printf_float+0x250>
 800db2a:	ee18 3a10 	vmov	r3, s16
 800db2e:	4652      	mov	r2, sl
 800db30:	4631      	mov	r1, r6
 800db32:	4628      	mov	r0, r5
 800db34:	47b8      	blx	r7
 800db36:	3001      	adds	r0, #1
 800db38:	f43f af09 	beq.w	800d94e <_printf_float+0xc2>
 800db3c:	f04f 0900 	mov.w	r9, #0
 800db40:	f104 0a1a 	add.w	sl, r4, #26
 800db44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db46:	425b      	negs	r3, r3
 800db48:	454b      	cmp	r3, r9
 800db4a:	dc01      	bgt.n	800db50 <_printf_float+0x2c4>
 800db4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4e:	e792      	b.n	800da76 <_printf_float+0x1ea>
 800db50:	2301      	movs	r3, #1
 800db52:	4652      	mov	r2, sl
 800db54:	4631      	mov	r1, r6
 800db56:	4628      	mov	r0, r5
 800db58:	47b8      	blx	r7
 800db5a:	3001      	adds	r0, #1
 800db5c:	f43f aef7 	beq.w	800d94e <_printf_float+0xc2>
 800db60:	f109 0901 	add.w	r9, r9, #1
 800db64:	e7ee      	b.n	800db44 <_printf_float+0x2b8>
 800db66:	bf00      	nop
 800db68:	7fefffff 	.word	0x7fefffff
 800db6c:	08013ef8 	.word	0x08013ef8
 800db70:	08013efc 	.word	0x08013efc
 800db74:	08013f04 	.word	0x08013f04
 800db78:	08013f00 	.word	0x08013f00
 800db7c:	08014189 	.word	0x08014189
 800db80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db84:	429a      	cmp	r2, r3
 800db86:	bfa8      	it	ge
 800db88:	461a      	movge	r2, r3
 800db8a:	2a00      	cmp	r2, #0
 800db8c:	4691      	mov	r9, r2
 800db8e:	dc37      	bgt.n	800dc00 <_printf_float+0x374>
 800db90:	f04f 0b00 	mov.w	fp, #0
 800db94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db98:	f104 021a 	add.w	r2, r4, #26
 800db9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db9e:	9305      	str	r3, [sp, #20]
 800dba0:	eba3 0309 	sub.w	r3, r3, r9
 800dba4:	455b      	cmp	r3, fp
 800dba6:	dc33      	bgt.n	800dc10 <_printf_float+0x384>
 800dba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbac:	429a      	cmp	r2, r3
 800dbae:	db3b      	blt.n	800dc28 <_printf_float+0x39c>
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	07da      	lsls	r2, r3, #31
 800dbb4:	d438      	bmi.n	800dc28 <_printf_float+0x39c>
 800dbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbb8:	9a05      	ldr	r2, [sp, #20]
 800dbba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbbc:	1a9a      	subs	r2, r3, r2
 800dbbe:	eba3 0901 	sub.w	r9, r3, r1
 800dbc2:	4591      	cmp	r9, r2
 800dbc4:	bfa8      	it	ge
 800dbc6:	4691      	movge	r9, r2
 800dbc8:	f1b9 0f00 	cmp.w	r9, #0
 800dbcc:	dc35      	bgt.n	800dc3a <_printf_float+0x3ae>
 800dbce:	f04f 0800 	mov.w	r8, #0
 800dbd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbd6:	f104 0a1a 	add.w	sl, r4, #26
 800dbda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbde:	1a9b      	subs	r3, r3, r2
 800dbe0:	eba3 0309 	sub.w	r3, r3, r9
 800dbe4:	4543      	cmp	r3, r8
 800dbe6:	f77f af79 	ble.w	800dadc <_printf_float+0x250>
 800dbea:	2301      	movs	r3, #1
 800dbec:	4652      	mov	r2, sl
 800dbee:	4631      	mov	r1, r6
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	47b8      	blx	r7
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	f43f aeaa 	beq.w	800d94e <_printf_float+0xc2>
 800dbfa:	f108 0801 	add.w	r8, r8, #1
 800dbfe:	e7ec      	b.n	800dbda <_printf_float+0x34e>
 800dc00:	4613      	mov	r3, r2
 800dc02:	4631      	mov	r1, r6
 800dc04:	4642      	mov	r2, r8
 800dc06:	4628      	mov	r0, r5
 800dc08:	47b8      	blx	r7
 800dc0a:	3001      	adds	r0, #1
 800dc0c:	d1c0      	bne.n	800db90 <_printf_float+0x304>
 800dc0e:	e69e      	b.n	800d94e <_printf_float+0xc2>
 800dc10:	2301      	movs	r3, #1
 800dc12:	4631      	mov	r1, r6
 800dc14:	4628      	mov	r0, r5
 800dc16:	9205      	str	r2, [sp, #20]
 800dc18:	47b8      	blx	r7
 800dc1a:	3001      	adds	r0, #1
 800dc1c:	f43f ae97 	beq.w	800d94e <_printf_float+0xc2>
 800dc20:	9a05      	ldr	r2, [sp, #20]
 800dc22:	f10b 0b01 	add.w	fp, fp, #1
 800dc26:	e7b9      	b.n	800db9c <_printf_float+0x310>
 800dc28:	ee18 3a10 	vmov	r3, s16
 800dc2c:	4652      	mov	r2, sl
 800dc2e:	4631      	mov	r1, r6
 800dc30:	4628      	mov	r0, r5
 800dc32:	47b8      	blx	r7
 800dc34:	3001      	adds	r0, #1
 800dc36:	d1be      	bne.n	800dbb6 <_printf_float+0x32a>
 800dc38:	e689      	b.n	800d94e <_printf_float+0xc2>
 800dc3a:	9a05      	ldr	r2, [sp, #20]
 800dc3c:	464b      	mov	r3, r9
 800dc3e:	4442      	add	r2, r8
 800dc40:	4631      	mov	r1, r6
 800dc42:	4628      	mov	r0, r5
 800dc44:	47b8      	blx	r7
 800dc46:	3001      	adds	r0, #1
 800dc48:	d1c1      	bne.n	800dbce <_printf_float+0x342>
 800dc4a:	e680      	b.n	800d94e <_printf_float+0xc2>
 800dc4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc4e:	2a01      	cmp	r2, #1
 800dc50:	dc01      	bgt.n	800dc56 <_printf_float+0x3ca>
 800dc52:	07db      	lsls	r3, r3, #31
 800dc54:	d538      	bpl.n	800dcc8 <_printf_float+0x43c>
 800dc56:	2301      	movs	r3, #1
 800dc58:	4642      	mov	r2, r8
 800dc5a:	4631      	mov	r1, r6
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	47b8      	blx	r7
 800dc60:	3001      	adds	r0, #1
 800dc62:	f43f ae74 	beq.w	800d94e <_printf_float+0xc2>
 800dc66:	ee18 3a10 	vmov	r3, s16
 800dc6a:	4652      	mov	r2, sl
 800dc6c:	4631      	mov	r1, r6
 800dc6e:	4628      	mov	r0, r5
 800dc70:	47b8      	blx	r7
 800dc72:	3001      	adds	r0, #1
 800dc74:	f43f ae6b 	beq.w	800d94e <_printf_float+0xc2>
 800dc78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f7f2 ff42 	bl	8000b08 <__aeabi_dcmpeq>
 800dc84:	b9d8      	cbnz	r0, 800dcbe <_printf_float+0x432>
 800dc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc88:	f108 0201 	add.w	r2, r8, #1
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	4631      	mov	r1, r6
 800dc90:	4628      	mov	r0, r5
 800dc92:	47b8      	blx	r7
 800dc94:	3001      	adds	r0, #1
 800dc96:	d10e      	bne.n	800dcb6 <_printf_float+0x42a>
 800dc98:	e659      	b.n	800d94e <_printf_float+0xc2>
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	4652      	mov	r2, sl
 800dc9e:	4631      	mov	r1, r6
 800dca0:	4628      	mov	r0, r5
 800dca2:	47b8      	blx	r7
 800dca4:	3001      	adds	r0, #1
 800dca6:	f43f ae52 	beq.w	800d94e <_printf_float+0xc2>
 800dcaa:	f108 0801 	add.w	r8, r8, #1
 800dcae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	4543      	cmp	r3, r8
 800dcb4:	dcf1      	bgt.n	800dc9a <_printf_float+0x40e>
 800dcb6:	464b      	mov	r3, r9
 800dcb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dcbc:	e6dc      	b.n	800da78 <_printf_float+0x1ec>
 800dcbe:	f04f 0800 	mov.w	r8, #0
 800dcc2:	f104 0a1a 	add.w	sl, r4, #26
 800dcc6:	e7f2      	b.n	800dcae <_printf_float+0x422>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	4642      	mov	r2, r8
 800dccc:	e7df      	b.n	800dc8e <_printf_float+0x402>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	464a      	mov	r2, r9
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	47b8      	blx	r7
 800dcd8:	3001      	adds	r0, #1
 800dcda:	f43f ae38 	beq.w	800d94e <_printf_float+0xc2>
 800dcde:	f108 0801 	add.w	r8, r8, #1
 800dce2:	68e3      	ldr	r3, [r4, #12]
 800dce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dce6:	1a5b      	subs	r3, r3, r1
 800dce8:	4543      	cmp	r3, r8
 800dcea:	dcf0      	bgt.n	800dcce <_printf_float+0x442>
 800dcec:	e6fa      	b.n	800dae4 <_printf_float+0x258>
 800dcee:	f04f 0800 	mov.w	r8, #0
 800dcf2:	f104 0919 	add.w	r9, r4, #25
 800dcf6:	e7f4      	b.n	800dce2 <_printf_float+0x456>

0800dcf8 <_printf_common>:
 800dcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcfc:	4616      	mov	r6, r2
 800dcfe:	4699      	mov	r9, r3
 800dd00:	688a      	ldr	r2, [r1, #8]
 800dd02:	690b      	ldr	r3, [r1, #16]
 800dd04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	bfb8      	it	lt
 800dd0c:	4613      	movlt	r3, r2
 800dd0e:	6033      	str	r3, [r6, #0]
 800dd10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd14:	4607      	mov	r7, r0
 800dd16:	460c      	mov	r4, r1
 800dd18:	b10a      	cbz	r2, 800dd1e <_printf_common+0x26>
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	6033      	str	r3, [r6, #0]
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	0699      	lsls	r1, r3, #26
 800dd22:	bf42      	ittt	mi
 800dd24:	6833      	ldrmi	r3, [r6, #0]
 800dd26:	3302      	addmi	r3, #2
 800dd28:	6033      	strmi	r3, [r6, #0]
 800dd2a:	6825      	ldr	r5, [r4, #0]
 800dd2c:	f015 0506 	ands.w	r5, r5, #6
 800dd30:	d106      	bne.n	800dd40 <_printf_common+0x48>
 800dd32:	f104 0a19 	add.w	sl, r4, #25
 800dd36:	68e3      	ldr	r3, [r4, #12]
 800dd38:	6832      	ldr	r2, [r6, #0]
 800dd3a:	1a9b      	subs	r3, r3, r2
 800dd3c:	42ab      	cmp	r3, r5
 800dd3e:	dc26      	bgt.n	800dd8e <_printf_common+0x96>
 800dd40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd44:	1e13      	subs	r3, r2, #0
 800dd46:	6822      	ldr	r2, [r4, #0]
 800dd48:	bf18      	it	ne
 800dd4a:	2301      	movne	r3, #1
 800dd4c:	0692      	lsls	r2, r2, #26
 800dd4e:	d42b      	bmi.n	800dda8 <_printf_common+0xb0>
 800dd50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd54:	4649      	mov	r1, r9
 800dd56:	4638      	mov	r0, r7
 800dd58:	47c0      	blx	r8
 800dd5a:	3001      	adds	r0, #1
 800dd5c:	d01e      	beq.n	800dd9c <_printf_common+0xa4>
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	68e5      	ldr	r5, [r4, #12]
 800dd62:	6832      	ldr	r2, [r6, #0]
 800dd64:	f003 0306 	and.w	r3, r3, #6
 800dd68:	2b04      	cmp	r3, #4
 800dd6a:	bf08      	it	eq
 800dd6c:	1aad      	subeq	r5, r5, r2
 800dd6e:	68a3      	ldr	r3, [r4, #8]
 800dd70:	6922      	ldr	r2, [r4, #16]
 800dd72:	bf0c      	ite	eq
 800dd74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd78:	2500      	movne	r5, #0
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	bfc4      	itt	gt
 800dd7e:	1a9b      	subgt	r3, r3, r2
 800dd80:	18ed      	addgt	r5, r5, r3
 800dd82:	2600      	movs	r6, #0
 800dd84:	341a      	adds	r4, #26
 800dd86:	42b5      	cmp	r5, r6
 800dd88:	d11a      	bne.n	800ddc0 <_printf_common+0xc8>
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	e008      	b.n	800dda0 <_printf_common+0xa8>
 800dd8e:	2301      	movs	r3, #1
 800dd90:	4652      	mov	r2, sl
 800dd92:	4649      	mov	r1, r9
 800dd94:	4638      	mov	r0, r7
 800dd96:	47c0      	blx	r8
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d103      	bne.n	800dda4 <_printf_common+0xac>
 800dd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dda4:	3501      	adds	r5, #1
 800dda6:	e7c6      	b.n	800dd36 <_printf_common+0x3e>
 800dda8:	18e1      	adds	r1, r4, r3
 800ddaa:	1c5a      	adds	r2, r3, #1
 800ddac:	2030      	movs	r0, #48	; 0x30
 800ddae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddb2:	4422      	add	r2, r4
 800ddb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddbc:	3302      	adds	r3, #2
 800ddbe:	e7c7      	b.n	800dd50 <_printf_common+0x58>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	4649      	mov	r1, r9
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	47c0      	blx	r8
 800ddca:	3001      	adds	r0, #1
 800ddcc:	d0e6      	beq.n	800dd9c <_printf_common+0xa4>
 800ddce:	3601      	adds	r6, #1
 800ddd0:	e7d9      	b.n	800dd86 <_printf_common+0x8e>
	...

0800ddd4 <_printf_i>:
 800ddd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd8:	7e0f      	ldrb	r7, [r1, #24]
 800ddda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dddc:	2f78      	cmp	r7, #120	; 0x78
 800ddde:	4691      	mov	r9, r2
 800dde0:	4680      	mov	r8, r0
 800dde2:	460c      	mov	r4, r1
 800dde4:	469a      	mov	sl, r3
 800dde6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddea:	d807      	bhi.n	800ddfc <_printf_i+0x28>
 800ddec:	2f62      	cmp	r7, #98	; 0x62
 800ddee:	d80a      	bhi.n	800de06 <_printf_i+0x32>
 800ddf0:	2f00      	cmp	r7, #0
 800ddf2:	f000 80d8 	beq.w	800dfa6 <_printf_i+0x1d2>
 800ddf6:	2f58      	cmp	r7, #88	; 0x58
 800ddf8:	f000 80a3 	beq.w	800df42 <_printf_i+0x16e>
 800ddfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de04:	e03a      	b.n	800de7c <_printf_i+0xa8>
 800de06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de0a:	2b15      	cmp	r3, #21
 800de0c:	d8f6      	bhi.n	800ddfc <_printf_i+0x28>
 800de0e:	a101      	add	r1, pc, #4	; (adr r1, 800de14 <_printf_i+0x40>)
 800de10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de14:	0800de6d 	.word	0x0800de6d
 800de18:	0800de81 	.word	0x0800de81
 800de1c:	0800ddfd 	.word	0x0800ddfd
 800de20:	0800ddfd 	.word	0x0800ddfd
 800de24:	0800ddfd 	.word	0x0800ddfd
 800de28:	0800ddfd 	.word	0x0800ddfd
 800de2c:	0800de81 	.word	0x0800de81
 800de30:	0800ddfd 	.word	0x0800ddfd
 800de34:	0800ddfd 	.word	0x0800ddfd
 800de38:	0800ddfd 	.word	0x0800ddfd
 800de3c:	0800ddfd 	.word	0x0800ddfd
 800de40:	0800df8d 	.word	0x0800df8d
 800de44:	0800deb1 	.word	0x0800deb1
 800de48:	0800df6f 	.word	0x0800df6f
 800de4c:	0800ddfd 	.word	0x0800ddfd
 800de50:	0800ddfd 	.word	0x0800ddfd
 800de54:	0800dfaf 	.word	0x0800dfaf
 800de58:	0800ddfd 	.word	0x0800ddfd
 800de5c:	0800deb1 	.word	0x0800deb1
 800de60:	0800ddfd 	.word	0x0800ddfd
 800de64:	0800ddfd 	.word	0x0800ddfd
 800de68:	0800df77 	.word	0x0800df77
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	1d1a      	adds	r2, r3, #4
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	602a      	str	r2, [r5, #0]
 800de74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de7c:	2301      	movs	r3, #1
 800de7e:	e0a3      	b.n	800dfc8 <_printf_i+0x1f4>
 800de80:	6820      	ldr	r0, [r4, #0]
 800de82:	6829      	ldr	r1, [r5, #0]
 800de84:	0606      	lsls	r6, r0, #24
 800de86:	f101 0304 	add.w	r3, r1, #4
 800de8a:	d50a      	bpl.n	800dea2 <_printf_i+0xce>
 800de8c:	680e      	ldr	r6, [r1, #0]
 800de8e:	602b      	str	r3, [r5, #0]
 800de90:	2e00      	cmp	r6, #0
 800de92:	da03      	bge.n	800de9c <_printf_i+0xc8>
 800de94:	232d      	movs	r3, #45	; 0x2d
 800de96:	4276      	negs	r6, r6
 800de98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de9c:	485e      	ldr	r0, [pc, #376]	; (800e018 <_printf_i+0x244>)
 800de9e:	230a      	movs	r3, #10
 800dea0:	e019      	b.n	800ded6 <_printf_i+0x102>
 800dea2:	680e      	ldr	r6, [r1, #0]
 800dea4:	602b      	str	r3, [r5, #0]
 800dea6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800deaa:	bf18      	it	ne
 800deac:	b236      	sxthne	r6, r6
 800deae:	e7ef      	b.n	800de90 <_printf_i+0xbc>
 800deb0:	682b      	ldr	r3, [r5, #0]
 800deb2:	6820      	ldr	r0, [r4, #0]
 800deb4:	1d19      	adds	r1, r3, #4
 800deb6:	6029      	str	r1, [r5, #0]
 800deb8:	0601      	lsls	r1, r0, #24
 800deba:	d501      	bpl.n	800dec0 <_printf_i+0xec>
 800debc:	681e      	ldr	r6, [r3, #0]
 800debe:	e002      	b.n	800dec6 <_printf_i+0xf2>
 800dec0:	0646      	lsls	r6, r0, #25
 800dec2:	d5fb      	bpl.n	800debc <_printf_i+0xe8>
 800dec4:	881e      	ldrh	r6, [r3, #0]
 800dec6:	4854      	ldr	r0, [pc, #336]	; (800e018 <_printf_i+0x244>)
 800dec8:	2f6f      	cmp	r7, #111	; 0x6f
 800deca:	bf0c      	ite	eq
 800decc:	2308      	moveq	r3, #8
 800dece:	230a      	movne	r3, #10
 800ded0:	2100      	movs	r1, #0
 800ded2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ded6:	6865      	ldr	r5, [r4, #4]
 800ded8:	60a5      	str	r5, [r4, #8]
 800deda:	2d00      	cmp	r5, #0
 800dedc:	bfa2      	ittt	ge
 800dede:	6821      	ldrge	r1, [r4, #0]
 800dee0:	f021 0104 	bicge.w	r1, r1, #4
 800dee4:	6021      	strge	r1, [r4, #0]
 800dee6:	b90e      	cbnz	r6, 800deec <_printf_i+0x118>
 800dee8:	2d00      	cmp	r5, #0
 800deea:	d04d      	beq.n	800df88 <_printf_i+0x1b4>
 800deec:	4615      	mov	r5, r2
 800deee:	fbb6 f1f3 	udiv	r1, r6, r3
 800def2:	fb03 6711 	mls	r7, r3, r1, r6
 800def6:	5dc7      	ldrb	r7, [r0, r7]
 800def8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800defc:	4637      	mov	r7, r6
 800defe:	42bb      	cmp	r3, r7
 800df00:	460e      	mov	r6, r1
 800df02:	d9f4      	bls.n	800deee <_printf_i+0x11a>
 800df04:	2b08      	cmp	r3, #8
 800df06:	d10b      	bne.n	800df20 <_printf_i+0x14c>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	07de      	lsls	r6, r3, #31
 800df0c:	d508      	bpl.n	800df20 <_printf_i+0x14c>
 800df0e:	6923      	ldr	r3, [r4, #16]
 800df10:	6861      	ldr	r1, [r4, #4]
 800df12:	4299      	cmp	r1, r3
 800df14:	bfde      	ittt	le
 800df16:	2330      	movle	r3, #48	; 0x30
 800df18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df20:	1b52      	subs	r2, r2, r5
 800df22:	6122      	str	r2, [r4, #16]
 800df24:	f8cd a000 	str.w	sl, [sp]
 800df28:	464b      	mov	r3, r9
 800df2a:	aa03      	add	r2, sp, #12
 800df2c:	4621      	mov	r1, r4
 800df2e:	4640      	mov	r0, r8
 800df30:	f7ff fee2 	bl	800dcf8 <_printf_common>
 800df34:	3001      	adds	r0, #1
 800df36:	d14c      	bne.n	800dfd2 <_printf_i+0x1fe>
 800df38:	f04f 30ff 	mov.w	r0, #4294967295
 800df3c:	b004      	add	sp, #16
 800df3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df42:	4835      	ldr	r0, [pc, #212]	; (800e018 <_printf_i+0x244>)
 800df44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800df48:	6829      	ldr	r1, [r5, #0]
 800df4a:	6823      	ldr	r3, [r4, #0]
 800df4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800df50:	6029      	str	r1, [r5, #0]
 800df52:	061d      	lsls	r5, r3, #24
 800df54:	d514      	bpl.n	800df80 <_printf_i+0x1ac>
 800df56:	07df      	lsls	r7, r3, #31
 800df58:	bf44      	itt	mi
 800df5a:	f043 0320 	orrmi.w	r3, r3, #32
 800df5e:	6023      	strmi	r3, [r4, #0]
 800df60:	b91e      	cbnz	r6, 800df6a <_printf_i+0x196>
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	f023 0320 	bic.w	r3, r3, #32
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	2310      	movs	r3, #16
 800df6c:	e7b0      	b.n	800ded0 <_printf_i+0xfc>
 800df6e:	6823      	ldr	r3, [r4, #0]
 800df70:	f043 0320 	orr.w	r3, r3, #32
 800df74:	6023      	str	r3, [r4, #0]
 800df76:	2378      	movs	r3, #120	; 0x78
 800df78:	4828      	ldr	r0, [pc, #160]	; (800e01c <_printf_i+0x248>)
 800df7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df7e:	e7e3      	b.n	800df48 <_printf_i+0x174>
 800df80:	0659      	lsls	r1, r3, #25
 800df82:	bf48      	it	mi
 800df84:	b2b6      	uxthmi	r6, r6
 800df86:	e7e6      	b.n	800df56 <_printf_i+0x182>
 800df88:	4615      	mov	r5, r2
 800df8a:	e7bb      	b.n	800df04 <_printf_i+0x130>
 800df8c:	682b      	ldr	r3, [r5, #0]
 800df8e:	6826      	ldr	r6, [r4, #0]
 800df90:	6961      	ldr	r1, [r4, #20]
 800df92:	1d18      	adds	r0, r3, #4
 800df94:	6028      	str	r0, [r5, #0]
 800df96:	0635      	lsls	r5, r6, #24
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	d501      	bpl.n	800dfa0 <_printf_i+0x1cc>
 800df9c:	6019      	str	r1, [r3, #0]
 800df9e:	e002      	b.n	800dfa6 <_printf_i+0x1d2>
 800dfa0:	0670      	lsls	r0, r6, #25
 800dfa2:	d5fb      	bpl.n	800df9c <_printf_i+0x1c8>
 800dfa4:	8019      	strh	r1, [r3, #0]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	6123      	str	r3, [r4, #16]
 800dfaa:	4615      	mov	r5, r2
 800dfac:	e7ba      	b.n	800df24 <_printf_i+0x150>
 800dfae:	682b      	ldr	r3, [r5, #0]
 800dfb0:	1d1a      	adds	r2, r3, #4
 800dfb2:	602a      	str	r2, [r5, #0]
 800dfb4:	681d      	ldr	r5, [r3, #0]
 800dfb6:	6862      	ldr	r2, [r4, #4]
 800dfb8:	2100      	movs	r1, #0
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f7f2 f930 	bl	8000220 <memchr>
 800dfc0:	b108      	cbz	r0, 800dfc6 <_printf_i+0x1f2>
 800dfc2:	1b40      	subs	r0, r0, r5
 800dfc4:	6060      	str	r0, [r4, #4]
 800dfc6:	6863      	ldr	r3, [r4, #4]
 800dfc8:	6123      	str	r3, [r4, #16]
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfd0:	e7a8      	b.n	800df24 <_printf_i+0x150>
 800dfd2:	6923      	ldr	r3, [r4, #16]
 800dfd4:	462a      	mov	r2, r5
 800dfd6:	4649      	mov	r1, r9
 800dfd8:	4640      	mov	r0, r8
 800dfda:	47d0      	blx	sl
 800dfdc:	3001      	adds	r0, #1
 800dfde:	d0ab      	beq.n	800df38 <_printf_i+0x164>
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	079b      	lsls	r3, r3, #30
 800dfe4:	d413      	bmi.n	800e00e <_printf_i+0x23a>
 800dfe6:	68e0      	ldr	r0, [r4, #12]
 800dfe8:	9b03      	ldr	r3, [sp, #12]
 800dfea:	4298      	cmp	r0, r3
 800dfec:	bfb8      	it	lt
 800dfee:	4618      	movlt	r0, r3
 800dff0:	e7a4      	b.n	800df3c <_printf_i+0x168>
 800dff2:	2301      	movs	r3, #1
 800dff4:	4632      	mov	r2, r6
 800dff6:	4649      	mov	r1, r9
 800dff8:	4640      	mov	r0, r8
 800dffa:	47d0      	blx	sl
 800dffc:	3001      	adds	r0, #1
 800dffe:	d09b      	beq.n	800df38 <_printf_i+0x164>
 800e000:	3501      	adds	r5, #1
 800e002:	68e3      	ldr	r3, [r4, #12]
 800e004:	9903      	ldr	r1, [sp, #12]
 800e006:	1a5b      	subs	r3, r3, r1
 800e008:	42ab      	cmp	r3, r5
 800e00a:	dcf2      	bgt.n	800dff2 <_printf_i+0x21e>
 800e00c:	e7eb      	b.n	800dfe6 <_printf_i+0x212>
 800e00e:	2500      	movs	r5, #0
 800e010:	f104 0619 	add.w	r6, r4, #25
 800e014:	e7f5      	b.n	800e002 <_printf_i+0x22e>
 800e016:	bf00      	nop
 800e018:	08013f08 	.word	0x08013f08
 800e01c:	08013f19 	.word	0x08013f19

0800e020 <iprintf>:
 800e020:	b40f      	push	{r0, r1, r2, r3}
 800e022:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <iprintf+0x2c>)
 800e024:	b513      	push	{r0, r1, r4, lr}
 800e026:	681c      	ldr	r4, [r3, #0]
 800e028:	b124      	cbz	r4, 800e034 <iprintf+0x14>
 800e02a:	69a3      	ldr	r3, [r4, #24]
 800e02c:	b913      	cbnz	r3, 800e034 <iprintf+0x14>
 800e02e:	4620      	mov	r0, r4
 800e030:	f001 f924 	bl	800f27c <__sinit>
 800e034:	ab05      	add	r3, sp, #20
 800e036:	9a04      	ldr	r2, [sp, #16]
 800e038:	68a1      	ldr	r1, [r4, #8]
 800e03a:	9301      	str	r3, [sp, #4]
 800e03c:	4620      	mov	r0, r4
 800e03e:	f002 f859 	bl	80100f4 <_vfiprintf_r>
 800e042:	b002      	add	sp, #8
 800e044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e048:	b004      	add	sp, #16
 800e04a:	4770      	bx	lr
 800e04c:	20000014 	.word	0x20000014

0800e050 <_puts_r>:
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	460e      	mov	r6, r1
 800e054:	4605      	mov	r5, r0
 800e056:	b118      	cbz	r0, 800e060 <_puts_r+0x10>
 800e058:	6983      	ldr	r3, [r0, #24]
 800e05a:	b90b      	cbnz	r3, 800e060 <_puts_r+0x10>
 800e05c:	f001 f90e 	bl	800f27c <__sinit>
 800e060:	69ab      	ldr	r3, [r5, #24]
 800e062:	68ac      	ldr	r4, [r5, #8]
 800e064:	b913      	cbnz	r3, 800e06c <_puts_r+0x1c>
 800e066:	4628      	mov	r0, r5
 800e068:	f001 f908 	bl	800f27c <__sinit>
 800e06c:	4b2c      	ldr	r3, [pc, #176]	; (800e120 <_puts_r+0xd0>)
 800e06e:	429c      	cmp	r4, r3
 800e070:	d120      	bne.n	800e0b4 <_puts_r+0x64>
 800e072:	686c      	ldr	r4, [r5, #4]
 800e074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e076:	07db      	lsls	r3, r3, #31
 800e078:	d405      	bmi.n	800e086 <_puts_r+0x36>
 800e07a:	89a3      	ldrh	r3, [r4, #12]
 800e07c:	0598      	lsls	r0, r3, #22
 800e07e:	d402      	bmi.n	800e086 <_puts_r+0x36>
 800e080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e082:	f001 f9ba 	bl	800f3fa <__retarget_lock_acquire_recursive>
 800e086:	89a3      	ldrh	r3, [r4, #12]
 800e088:	0719      	lsls	r1, r3, #28
 800e08a:	d51d      	bpl.n	800e0c8 <_puts_r+0x78>
 800e08c:	6923      	ldr	r3, [r4, #16]
 800e08e:	b1db      	cbz	r3, 800e0c8 <_puts_r+0x78>
 800e090:	3e01      	subs	r6, #1
 800e092:	68a3      	ldr	r3, [r4, #8]
 800e094:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e098:	3b01      	subs	r3, #1
 800e09a:	60a3      	str	r3, [r4, #8]
 800e09c:	bb39      	cbnz	r1, 800e0ee <_puts_r+0x9e>
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	da38      	bge.n	800e114 <_puts_r+0xc4>
 800e0a2:	4622      	mov	r2, r4
 800e0a4:	210a      	movs	r1, #10
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 f880 	bl	800e1ac <__swbuf_r>
 800e0ac:	3001      	adds	r0, #1
 800e0ae:	d011      	beq.n	800e0d4 <_puts_r+0x84>
 800e0b0:	250a      	movs	r5, #10
 800e0b2:	e011      	b.n	800e0d8 <_puts_r+0x88>
 800e0b4:	4b1b      	ldr	r3, [pc, #108]	; (800e124 <_puts_r+0xd4>)
 800e0b6:	429c      	cmp	r4, r3
 800e0b8:	d101      	bne.n	800e0be <_puts_r+0x6e>
 800e0ba:	68ac      	ldr	r4, [r5, #8]
 800e0bc:	e7da      	b.n	800e074 <_puts_r+0x24>
 800e0be:	4b1a      	ldr	r3, [pc, #104]	; (800e128 <_puts_r+0xd8>)
 800e0c0:	429c      	cmp	r4, r3
 800e0c2:	bf08      	it	eq
 800e0c4:	68ec      	ldreq	r4, [r5, #12]
 800e0c6:	e7d5      	b.n	800e074 <_puts_r+0x24>
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f000 f8c0 	bl	800e250 <__swsetup_r>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d0dd      	beq.n	800e090 <_puts_r+0x40>
 800e0d4:	f04f 35ff 	mov.w	r5, #4294967295
 800e0d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0da:	07da      	lsls	r2, r3, #31
 800e0dc:	d405      	bmi.n	800e0ea <_puts_r+0x9a>
 800e0de:	89a3      	ldrh	r3, [r4, #12]
 800e0e0:	059b      	lsls	r3, r3, #22
 800e0e2:	d402      	bmi.n	800e0ea <_puts_r+0x9a>
 800e0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0e6:	f001 f989 	bl	800f3fc <__retarget_lock_release_recursive>
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	bd70      	pop	{r4, r5, r6, pc}
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	da04      	bge.n	800e0fc <_puts_r+0xac>
 800e0f2:	69a2      	ldr	r2, [r4, #24]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	dc06      	bgt.n	800e106 <_puts_r+0xb6>
 800e0f8:	290a      	cmp	r1, #10
 800e0fa:	d004      	beq.n	800e106 <_puts_r+0xb6>
 800e0fc:	6823      	ldr	r3, [r4, #0]
 800e0fe:	1c5a      	adds	r2, r3, #1
 800e100:	6022      	str	r2, [r4, #0]
 800e102:	7019      	strb	r1, [r3, #0]
 800e104:	e7c5      	b.n	800e092 <_puts_r+0x42>
 800e106:	4622      	mov	r2, r4
 800e108:	4628      	mov	r0, r5
 800e10a:	f000 f84f 	bl	800e1ac <__swbuf_r>
 800e10e:	3001      	adds	r0, #1
 800e110:	d1bf      	bne.n	800e092 <_puts_r+0x42>
 800e112:	e7df      	b.n	800e0d4 <_puts_r+0x84>
 800e114:	6823      	ldr	r3, [r4, #0]
 800e116:	250a      	movs	r5, #10
 800e118:	1c5a      	adds	r2, r3, #1
 800e11a:	6022      	str	r2, [r4, #0]
 800e11c:	701d      	strb	r5, [r3, #0]
 800e11e:	e7db      	b.n	800e0d8 <_puts_r+0x88>
 800e120:	08013fdc 	.word	0x08013fdc
 800e124:	08013ffc 	.word	0x08013ffc
 800e128:	08013fbc 	.word	0x08013fbc

0800e12c <puts>:
 800e12c:	4b02      	ldr	r3, [pc, #8]	; (800e138 <puts+0xc>)
 800e12e:	4601      	mov	r1, r0
 800e130:	6818      	ldr	r0, [r3, #0]
 800e132:	f7ff bf8d 	b.w	800e050 <_puts_r>
 800e136:	bf00      	nop
 800e138:	20000014 	.word	0x20000014

0800e13c <iscanf>:
 800e13c:	b40f      	push	{r0, r1, r2, r3}
 800e13e:	4b0a      	ldr	r3, [pc, #40]	; (800e168 <iscanf+0x2c>)
 800e140:	b513      	push	{r0, r1, r4, lr}
 800e142:	681c      	ldr	r4, [r3, #0]
 800e144:	b124      	cbz	r4, 800e150 <iscanf+0x14>
 800e146:	69a3      	ldr	r3, [r4, #24]
 800e148:	b913      	cbnz	r3, 800e150 <iscanf+0x14>
 800e14a:	4620      	mov	r0, r4
 800e14c:	f001 f896 	bl	800f27c <__sinit>
 800e150:	ab05      	add	r3, sp, #20
 800e152:	9a04      	ldr	r2, [sp, #16]
 800e154:	6861      	ldr	r1, [r4, #4]
 800e156:	9301      	str	r3, [sp, #4]
 800e158:	4620      	mov	r0, r4
 800e15a:	f002 faa1 	bl	80106a0 <_vfiscanf_r>
 800e15e:	b002      	add	sp, #8
 800e160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e164:	b004      	add	sp, #16
 800e166:	4770      	bx	lr
 800e168:	20000014 	.word	0x20000014

0800e16c <siprintf>:
 800e16c:	b40e      	push	{r1, r2, r3}
 800e16e:	b500      	push	{lr}
 800e170:	b09c      	sub	sp, #112	; 0x70
 800e172:	ab1d      	add	r3, sp, #116	; 0x74
 800e174:	9002      	str	r0, [sp, #8]
 800e176:	9006      	str	r0, [sp, #24]
 800e178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e17c:	4809      	ldr	r0, [pc, #36]	; (800e1a4 <siprintf+0x38>)
 800e17e:	9107      	str	r1, [sp, #28]
 800e180:	9104      	str	r1, [sp, #16]
 800e182:	4909      	ldr	r1, [pc, #36]	; (800e1a8 <siprintf+0x3c>)
 800e184:	f853 2b04 	ldr.w	r2, [r3], #4
 800e188:	9105      	str	r1, [sp, #20]
 800e18a:	6800      	ldr	r0, [r0, #0]
 800e18c:	9301      	str	r3, [sp, #4]
 800e18e:	a902      	add	r1, sp, #8
 800e190:	f001 fe86 	bl	800fea0 <_svfiprintf_r>
 800e194:	9b02      	ldr	r3, [sp, #8]
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
 800e19a:	b01c      	add	sp, #112	; 0x70
 800e19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1a0:	b003      	add	sp, #12
 800e1a2:	4770      	bx	lr
 800e1a4:	20000014 	.word	0x20000014
 800e1a8:	ffff0208 	.word	0xffff0208

0800e1ac <__swbuf_r>:
 800e1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ae:	460e      	mov	r6, r1
 800e1b0:	4614      	mov	r4, r2
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	b118      	cbz	r0, 800e1be <__swbuf_r+0x12>
 800e1b6:	6983      	ldr	r3, [r0, #24]
 800e1b8:	b90b      	cbnz	r3, 800e1be <__swbuf_r+0x12>
 800e1ba:	f001 f85f 	bl	800f27c <__sinit>
 800e1be:	4b21      	ldr	r3, [pc, #132]	; (800e244 <__swbuf_r+0x98>)
 800e1c0:	429c      	cmp	r4, r3
 800e1c2:	d12b      	bne.n	800e21c <__swbuf_r+0x70>
 800e1c4:	686c      	ldr	r4, [r5, #4]
 800e1c6:	69a3      	ldr	r3, [r4, #24]
 800e1c8:	60a3      	str	r3, [r4, #8]
 800e1ca:	89a3      	ldrh	r3, [r4, #12]
 800e1cc:	071a      	lsls	r2, r3, #28
 800e1ce:	d52f      	bpl.n	800e230 <__swbuf_r+0x84>
 800e1d0:	6923      	ldr	r3, [r4, #16]
 800e1d2:	b36b      	cbz	r3, 800e230 <__swbuf_r+0x84>
 800e1d4:	6923      	ldr	r3, [r4, #16]
 800e1d6:	6820      	ldr	r0, [r4, #0]
 800e1d8:	1ac0      	subs	r0, r0, r3
 800e1da:	6963      	ldr	r3, [r4, #20]
 800e1dc:	b2f6      	uxtb	r6, r6
 800e1de:	4283      	cmp	r3, r0
 800e1e0:	4637      	mov	r7, r6
 800e1e2:	dc04      	bgt.n	800e1ee <__swbuf_r+0x42>
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	f000 ffa2 	bl	800f130 <_fflush_r>
 800e1ec:	bb30      	cbnz	r0, 800e23c <__swbuf_r+0x90>
 800e1ee:	68a3      	ldr	r3, [r4, #8]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	60a3      	str	r3, [r4, #8]
 800e1f4:	6823      	ldr	r3, [r4, #0]
 800e1f6:	1c5a      	adds	r2, r3, #1
 800e1f8:	6022      	str	r2, [r4, #0]
 800e1fa:	701e      	strb	r6, [r3, #0]
 800e1fc:	6963      	ldr	r3, [r4, #20]
 800e1fe:	3001      	adds	r0, #1
 800e200:	4283      	cmp	r3, r0
 800e202:	d004      	beq.n	800e20e <__swbuf_r+0x62>
 800e204:	89a3      	ldrh	r3, [r4, #12]
 800e206:	07db      	lsls	r3, r3, #31
 800e208:	d506      	bpl.n	800e218 <__swbuf_r+0x6c>
 800e20a:	2e0a      	cmp	r6, #10
 800e20c:	d104      	bne.n	800e218 <__swbuf_r+0x6c>
 800e20e:	4621      	mov	r1, r4
 800e210:	4628      	mov	r0, r5
 800e212:	f000 ff8d 	bl	800f130 <_fflush_r>
 800e216:	b988      	cbnz	r0, 800e23c <__swbuf_r+0x90>
 800e218:	4638      	mov	r0, r7
 800e21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e21c:	4b0a      	ldr	r3, [pc, #40]	; (800e248 <__swbuf_r+0x9c>)
 800e21e:	429c      	cmp	r4, r3
 800e220:	d101      	bne.n	800e226 <__swbuf_r+0x7a>
 800e222:	68ac      	ldr	r4, [r5, #8]
 800e224:	e7cf      	b.n	800e1c6 <__swbuf_r+0x1a>
 800e226:	4b09      	ldr	r3, [pc, #36]	; (800e24c <__swbuf_r+0xa0>)
 800e228:	429c      	cmp	r4, r3
 800e22a:	bf08      	it	eq
 800e22c:	68ec      	ldreq	r4, [r5, #12]
 800e22e:	e7ca      	b.n	800e1c6 <__swbuf_r+0x1a>
 800e230:	4621      	mov	r1, r4
 800e232:	4628      	mov	r0, r5
 800e234:	f000 f80c 	bl	800e250 <__swsetup_r>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d0cb      	beq.n	800e1d4 <__swbuf_r+0x28>
 800e23c:	f04f 37ff 	mov.w	r7, #4294967295
 800e240:	e7ea      	b.n	800e218 <__swbuf_r+0x6c>
 800e242:	bf00      	nop
 800e244:	08013fdc 	.word	0x08013fdc
 800e248:	08013ffc 	.word	0x08013ffc
 800e24c:	08013fbc 	.word	0x08013fbc

0800e250 <__swsetup_r>:
 800e250:	4b32      	ldr	r3, [pc, #200]	; (800e31c <__swsetup_r+0xcc>)
 800e252:	b570      	push	{r4, r5, r6, lr}
 800e254:	681d      	ldr	r5, [r3, #0]
 800e256:	4606      	mov	r6, r0
 800e258:	460c      	mov	r4, r1
 800e25a:	b125      	cbz	r5, 800e266 <__swsetup_r+0x16>
 800e25c:	69ab      	ldr	r3, [r5, #24]
 800e25e:	b913      	cbnz	r3, 800e266 <__swsetup_r+0x16>
 800e260:	4628      	mov	r0, r5
 800e262:	f001 f80b 	bl	800f27c <__sinit>
 800e266:	4b2e      	ldr	r3, [pc, #184]	; (800e320 <__swsetup_r+0xd0>)
 800e268:	429c      	cmp	r4, r3
 800e26a:	d10f      	bne.n	800e28c <__swsetup_r+0x3c>
 800e26c:	686c      	ldr	r4, [r5, #4]
 800e26e:	89a3      	ldrh	r3, [r4, #12]
 800e270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e274:	0719      	lsls	r1, r3, #28
 800e276:	d42c      	bmi.n	800e2d2 <__swsetup_r+0x82>
 800e278:	06dd      	lsls	r5, r3, #27
 800e27a:	d411      	bmi.n	800e2a0 <__swsetup_r+0x50>
 800e27c:	2309      	movs	r3, #9
 800e27e:	6033      	str	r3, [r6, #0]
 800e280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e284:	81a3      	strh	r3, [r4, #12]
 800e286:	f04f 30ff 	mov.w	r0, #4294967295
 800e28a:	e03e      	b.n	800e30a <__swsetup_r+0xba>
 800e28c:	4b25      	ldr	r3, [pc, #148]	; (800e324 <__swsetup_r+0xd4>)
 800e28e:	429c      	cmp	r4, r3
 800e290:	d101      	bne.n	800e296 <__swsetup_r+0x46>
 800e292:	68ac      	ldr	r4, [r5, #8]
 800e294:	e7eb      	b.n	800e26e <__swsetup_r+0x1e>
 800e296:	4b24      	ldr	r3, [pc, #144]	; (800e328 <__swsetup_r+0xd8>)
 800e298:	429c      	cmp	r4, r3
 800e29a:	bf08      	it	eq
 800e29c:	68ec      	ldreq	r4, [r5, #12]
 800e29e:	e7e6      	b.n	800e26e <__swsetup_r+0x1e>
 800e2a0:	0758      	lsls	r0, r3, #29
 800e2a2:	d512      	bpl.n	800e2ca <__swsetup_r+0x7a>
 800e2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2a6:	b141      	cbz	r1, 800e2ba <__swsetup_r+0x6a>
 800e2a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2ac:	4299      	cmp	r1, r3
 800e2ae:	d002      	beq.n	800e2b6 <__swsetup_r+0x66>
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f001 fcb9 	bl	800fc28 <_free_r>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	6363      	str	r3, [r4, #52]	; 0x34
 800e2ba:	89a3      	ldrh	r3, [r4, #12]
 800e2bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2c0:	81a3      	strh	r3, [r4, #12]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	6063      	str	r3, [r4, #4]
 800e2c6:	6923      	ldr	r3, [r4, #16]
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	89a3      	ldrh	r3, [r4, #12]
 800e2cc:	f043 0308 	orr.w	r3, r3, #8
 800e2d0:	81a3      	strh	r3, [r4, #12]
 800e2d2:	6923      	ldr	r3, [r4, #16]
 800e2d4:	b94b      	cbnz	r3, 800e2ea <__swsetup_r+0x9a>
 800e2d6:	89a3      	ldrh	r3, [r4, #12]
 800e2d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2e0:	d003      	beq.n	800e2ea <__swsetup_r+0x9a>
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f001 f8af 	bl	800f448 <__smakebuf_r>
 800e2ea:	89a0      	ldrh	r0, [r4, #12]
 800e2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2f0:	f010 0301 	ands.w	r3, r0, #1
 800e2f4:	d00a      	beq.n	800e30c <__swsetup_r+0xbc>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	60a3      	str	r3, [r4, #8]
 800e2fa:	6963      	ldr	r3, [r4, #20]
 800e2fc:	425b      	negs	r3, r3
 800e2fe:	61a3      	str	r3, [r4, #24]
 800e300:	6923      	ldr	r3, [r4, #16]
 800e302:	b943      	cbnz	r3, 800e316 <__swsetup_r+0xc6>
 800e304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e308:	d1ba      	bne.n	800e280 <__swsetup_r+0x30>
 800e30a:	bd70      	pop	{r4, r5, r6, pc}
 800e30c:	0781      	lsls	r1, r0, #30
 800e30e:	bf58      	it	pl
 800e310:	6963      	ldrpl	r3, [r4, #20]
 800e312:	60a3      	str	r3, [r4, #8]
 800e314:	e7f4      	b.n	800e300 <__swsetup_r+0xb0>
 800e316:	2000      	movs	r0, #0
 800e318:	e7f7      	b.n	800e30a <__swsetup_r+0xba>
 800e31a:	bf00      	nop
 800e31c:	20000014 	.word	0x20000014
 800e320:	08013fdc 	.word	0x08013fdc
 800e324:	08013ffc 	.word	0x08013ffc
 800e328:	08013fbc 	.word	0x08013fbc

0800e32c <quorem>:
 800e32c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e330:	6903      	ldr	r3, [r0, #16]
 800e332:	690c      	ldr	r4, [r1, #16]
 800e334:	42a3      	cmp	r3, r4
 800e336:	4607      	mov	r7, r0
 800e338:	f2c0 8081 	blt.w	800e43e <quorem+0x112>
 800e33c:	3c01      	subs	r4, #1
 800e33e:	f101 0814 	add.w	r8, r1, #20
 800e342:	f100 0514 	add.w	r5, r0, #20
 800e346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e34a:	9301      	str	r3, [sp, #4]
 800e34c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e354:	3301      	adds	r3, #1
 800e356:	429a      	cmp	r2, r3
 800e358:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e35c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e360:	fbb2 f6f3 	udiv	r6, r2, r3
 800e364:	d331      	bcc.n	800e3ca <quorem+0x9e>
 800e366:	f04f 0e00 	mov.w	lr, #0
 800e36a:	4640      	mov	r0, r8
 800e36c:	46ac      	mov	ip, r5
 800e36e:	46f2      	mov	sl, lr
 800e370:	f850 2b04 	ldr.w	r2, [r0], #4
 800e374:	b293      	uxth	r3, r2
 800e376:	fb06 e303 	mla	r3, r6, r3, lr
 800e37a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e37e:	b29b      	uxth	r3, r3
 800e380:	ebaa 0303 	sub.w	r3, sl, r3
 800e384:	f8dc a000 	ldr.w	sl, [ip]
 800e388:	0c12      	lsrs	r2, r2, #16
 800e38a:	fa13 f38a 	uxtah	r3, r3, sl
 800e38e:	fb06 e202 	mla	r2, r6, r2, lr
 800e392:	9300      	str	r3, [sp, #0]
 800e394:	9b00      	ldr	r3, [sp, #0]
 800e396:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e39a:	b292      	uxth	r2, r2
 800e39c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e3a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800e3a8:	4581      	cmp	r9, r0
 800e3aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3ae:	f84c 3b04 	str.w	r3, [ip], #4
 800e3b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e3b6:	d2db      	bcs.n	800e370 <quorem+0x44>
 800e3b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e3bc:	b92b      	cbnz	r3, 800e3ca <quorem+0x9e>
 800e3be:	9b01      	ldr	r3, [sp, #4]
 800e3c0:	3b04      	subs	r3, #4
 800e3c2:	429d      	cmp	r5, r3
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	d32e      	bcc.n	800e426 <quorem+0xfa>
 800e3c8:	613c      	str	r4, [r7, #16]
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	f001 fb14 	bl	800f9f8 <__mcmp>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	db24      	blt.n	800e41e <quorem+0xf2>
 800e3d4:	3601      	adds	r6, #1
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f04f 0c00 	mov.w	ip, #0
 800e3dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e3e0:	f8d0 e000 	ldr.w	lr, [r0]
 800e3e4:	b293      	uxth	r3, r2
 800e3e6:	ebac 0303 	sub.w	r3, ip, r3
 800e3ea:	0c12      	lsrs	r2, r2, #16
 800e3ec:	fa13 f38e 	uxtah	r3, r3, lr
 800e3f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e3f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3fe:	45c1      	cmp	r9, r8
 800e400:	f840 3b04 	str.w	r3, [r0], #4
 800e404:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e408:	d2e8      	bcs.n	800e3dc <quorem+0xb0>
 800e40a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e40e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e412:	b922      	cbnz	r2, 800e41e <quorem+0xf2>
 800e414:	3b04      	subs	r3, #4
 800e416:	429d      	cmp	r5, r3
 800e418:	461a      	mov	r2, r3
 800e41a:	d30a      	bcc.n	800e432 <quorem+0x106>
 800e41c:	613c      	str	r4, [r7, #16]
 800e41e:	4630      	mov	r0, r6
 800e420:	b003      	add	sp, #12
 800e422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	3b04      	subs	r3, #4
 800e42a:	2a00      	cmp	r2, #0
 800e42c:	d1cc      	bne.n	800e3c8 <quorem+0x9c>
 800e42e:	3c01      	subs	r4, #1
 800e430:	e7c7      	b.n	800e3c2 <quorem+0x96>
 800e432:	6812      	ldr	r2, [r2, #0]
 800e434:	3b04      	subs	r3, #4
 800e436:	2a00      	cmp	r2, #0
 800e438:	d1f0      	bne.n	800e41c <quorem+0xf0>
 800e43a:	3c01      	subs	r4, #1
 800e43c:	e7eb      	b.n	800e416 <quorem+0xea>
 800e43e:	2000      	movs	r0, #0
 800e440:	e7ee      	b.n	800e420 <quorem+0xf4>
 800e442:	0000      	movs	r0, r0
 800e444:	0000      	movs	r0, r0
	...

0800e448 <_dtoa_r>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	ed2d 8b04 	vpush	{d8-d9}
 800e450:	ec57 6b10 	vmov	r6, r7, d0
 800e454:	b093      	sub	sp, #76	; 0x4c
 800e456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e458:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e45c:	9106      	str	r1, [sp, #24]
 800e45e:	ee10 aa10 	vmov	sl, s0
 800e462:	4604      	mov	r4, r0
 800e464:	9209      	str	r2, [sp, #36]	; 0x24
 800e466:	930c      	str	r3, [sp, #48]	; 0x30
 800e468:	46bb      	mov	fp, r7
 800e46a:	b975      	cbnz	r5, 800e48a <_dtoa_r+0x42>
 800e46c:	2010      	movs	r0, #16
 800e46e:	f001 f82b 	bl	800f4c8 <malloc>
 800e472:	4602      	mov	r2, r0
 800e474:	6260      	str	r0, [r4, #36]	; 0x24
 800e476:	b920      	cbnz	r0, 800e482 <_dtoa_r+0x3a>
 800e478:	4ba7      	ldr	r3, [pc, #668]	; (800e718 <_dtoa_r+0x2d0>)
 800e47a:	21ea      	movs	r1, #234	; 0xea
 800e47c:	48a7      	ldr	r0, [pc, #668]	; (800e71c <_dtoa_r+0x2d4>)
 800e47e:	f002 fd85 	bl	8010f8c <__assert_func>
 800e482:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e486:	6005      	str	r5, [r0, #0]
 800e488:	60c5      	str	r5, [r0, #12]
 800e48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e48c:	6819      	ldr	r1, [r3, #0]
 800e48e:	b151      	cbz	r1, 800e4a6 <_dtoa_r+0x5e>
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	604a      	str	r2, [r1, #4]
 800e494:	2301      	movs	r3, #1
 800e496:	4093      	lsls	r3, r2
 800e498:	608b      	str	r3, [r1, #8]
 800e49a:	4620      	mov	r0, r4
 800e49c:	f001 f86a 	bl	800f574 <_Bfree>
 800e4a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	1e3b      	subs	r3, r7, #0
 800e4a8:	bfaa      	itet	ge
 800e4aa:	2300      	movge	r3, #0
 800e4ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e4b0:	f8c8 3000 	strge.w	r3, [r8]
 800e4b4:	4b9a      	ldr	r3, [pc, #616]	; (800e720 <_dtoa_r+0x2d8>)
 800e4b6:	bfbc      	itt	lt
 800e4b8:	2201      	movlt	r2, #1
 800e4ba:	f8c8 2000 	strlt.w	r2, [r8]
 800e4be:	ea33 030b 	bics.w	r3, r3, fp
 800e4c2:	d11b      	bne.n	800e4fc <_dtoa_r+0xb4>
 800e4c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4d0:	4333      	orrs	r3, r6
 800e4d2:	f000 8592 	beq.w	800effa <_dtoa_r+0xbb2>
 800e4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d8:	b963      	cbnz	r3, 800e4f4 <_dtoa_r+0xac>
 800e4da:	4b92      	ldr	r3, [pc, #584]	; (800e724 <_dtoa_r+0x2dc>)
 800e4dc:	e022      	b.n	800e524 <_dtoa_r+0xdc>
 800e4de:	4b92      	ldr	r3, [pc, #584]	; (800e728 <_dtoa_r+0x2e0>)
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	3308      	adds	r3, #8
 800e4e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e4e6:	6013      	str	r3, [r2, #0]
 800e4e8:	9801      	ldr	r0, [sp, #4]
 800e4ea:	b013      	add	sp, #76	; 0x4c
 800e4ec:	ecbd 8b04 	vpop	{d8-d9}
 800e4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f4:	4b8b      	ldr	r3, [pc, #556]	; (800e724 <_dtoa_r+0x2dc>)
 800e4f6:	9301      	str	r3, [sp, #4]
 800e4f8:	3303      	adds	r3, #3
 800e4fa:	e7f3      	b.n	800e4e4 <_dtoa_r+0x9c>
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2300      	movs	r3, #0
 800e500:	4650      	mov	r0, sl
 800e502:	4659      	mov	r1, fp
 800e504:	f7f2 fb00 	bl	8000b08 <__aeabi_dcmpeq>
 800e508:	ec4b ab19 	vmov	d9, sl, fp
 800e50c:	4680      	mov	r8, r0
 800e50e:	b158      	cbz	r0, 800e528 <_dtoa_r+0xe0>
 800e510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e512:	2301      	movs	r3, #1
 800e514:	6013      	str	r3, [r2, #0]
 800e516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 856b 	beq.w	800eff4 <_dtoa_r+0xbac>
 800e51e:	4883      	ldr	r0, [pc, #524]	; (800e72c <_dtoa_r+0x2e4>)
 800e520:	6018      	str	r0, [r3, #0]
 800e522:	1e43      	subs	r3, r0, #1
 800e524:	9301      	str	r3, [sp, #4]
 800e526:	e7df      	b.n	800e4e8 <_dtoa_r+0xa0>
 800e528:	ec4b ab10 	vmov	d0, sl, fp
 800e52c:	aa10      	add	r2, sp, #64	; 0x40
 800e52e:	a911      	add	r1, sp, #68	; 0x44
 800e530:	4620      	mov	r0, r4
 800e532:	f001 fb07 	bl	800fb44 <__d2b>
 800e536:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e53a:	ee08 0a10 	vmov	s16, r0
 800e53e:	2d00      	cmp	r5, #0
 800e540:	f000 8084 	beq.w	800e64c <_dtoa_r+0x204>
 800e544:	ee19 3a90 	vmov	r3, s19
 800e548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e54c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e550:	4656      	mov	r6, sl
 800e552:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e556:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e55a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e55e:	4b74      	ldr	r3, [pc, #464]	; (800e730 <_dtoa_r+0x2e8>)
 800e560:	2200      	movs	r2, #0
 800e562:	4630      	mov	r0, r6
 800e564:	4639      	mov	r1, r7
 800e566:	f7f1 feaf 	bl	80002c8 <__aeabi_dsub>
 800e56a:	a365      	add	r3, pc, #404	; (adr r3, 800e700 <_dtoa_r+0x2b8>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f2 f862 	bl	8000638 <__aeabi_dmul>
 800e574:	a364      	add	r3, pc, #400	; (adr r3, 800e708 <_dtoa_r+0x2c0>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	f7f1 fea7 	bl	80002cc <__adddf3>
 800e57e:	4606      	mov	r6, r0
 800e580:	4628      	mov	r0, r5
 800e582:	460f      	mov	r7, r1
 800e584:	f7f1 ffee 	bl	8000564 <__aeabi_i2d>
 800e588:	a361      	add	r3, pc, #388	; (adr r3, 800e710 <_dtoa_r+0x2c8>)
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f7f2 f853 	bl	8000638 <__aeabi_dmul>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	4630      	mov	r0, r6
 800e598:	4639      	mov	r1, r7
 800e59a:	f7f1 fe97 	bl	80002cc <__adddf3>
 800e59e:	4606      	mov	r6, r0
 800e5a0:	460f      	mov	r7, r1
 800e5a2:	f7f2 faf9 	bl	8000b98 <__aeabi_d2iz>
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	9000      	str	r0, [sp, #0]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	4639      	mov	r1, r7
 800e5b0:	f7f2 fab4 	bl	8000b1c <__aeabi_dcmplt>
 800e5b4:	b150      	cbz	r0, 800e5cc <_dtoa_r+0x184>
 800e5b6:	9800      	ldr	r0, [sp, #0]
 800e5b8:	f7f1 ffd4 	bl	8000564 <__aeabi_i2d>
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	f7f2 faa2 	bl	8000b08 <__aeabi_dcmpeq>
 800e5c4:	b910      	cbnz	r0, 800e5cc <_dtoa_r+0x184>
 800e5c6:	9b00      	ldr	r3, [sp, #0]
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	9b00      	ldr	r3, [sp, #0]
 800e5ce:	2b16      	cmp	r3, #22
 800e5d0:	d85a      	bhi.n	800e688 <_dtoa_r+0x240>
 800e5d2:	9a00      	ldr	r2, [sp, #0]
 800e5d4:	4b57      	ldr	r3, [pc, #348]	; (800e734 <_dtoa_r+0x2ec>)
 800e5d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5de:	ec51 0b19 	vmov	r0, r1, d9
 800e5e2:	f7f2 fa9b 	bl	8000b1c <__aeabi_dcmplt>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d050      	beq.n	800e68c <_dtoa_r+0x244>
 800e5ea:	9b00      	ldr	r3, [sp, #0]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5f6:	1b5d      	subs	r5, r3, r5
 800e5f8:	1e6b      	subs	r3, r5, #1
 800e5fa:	9305      	str	r3, [sp, #20]
 800e5fc:	bf45      	ittet	mi
 800e5fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800e602:	9304      	strmi	r3, [sp, #16]
 800e604:	2300      	movpl	r3, #0
 800e606:	2300      	movmi	r3, #0
 800e608:	bf4c      	ite	mi
 800e60a:	9305      	strmi	r3, [sp, #20]
 800e60c:	9304      	strpl	r3, [sp, #16]
 800e60e:	9b00      	ldr	r3, [sp, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	db3d      	blt.n	800e690 <_dtoa_r+0x248>
 800e614:	9b05      	ldr	r3, [sp, #20]
 800e616:	9a00      	ldr	r2, [sp, #0]
 800e618:	920a      	str	r2, [sp, #40]	; 0x28
 800e61a:	4413      	add	r3, r2
 800e61c:	9305      	str	r3, [sp, #20]
 800e61e:	2300      	movs	r3, #0
 800e620:	9307      	str	r3, [sp, #28]
 800e622:	9b06      	ldr	r3, [sp, #24]
 800e624:	2b09      	cmp	r3, #9
 800e626:	f200 8089 	bhi.w	800e73c <_dtoa_r+0x2f4>
 800e62a:	2b05      	cmp	r3, #5
 800e62c:	bfc4      	itt	gt
 800e62e:	3b04      	subgt	r3, #4
 800e630:	9306      	strgt	r3, [sp, #24]
 800e632:	9b06      	ldr	r3, [sp, #24]
 800e634:	f1a3 0302 	sub.w	r3, r3, #2
 800e638:	bfcc      	ite	gt
 800e63a:	2500      	movgt	r5, #0
 800e63c:	2501      	movle	r5, #1
 800e63e:	2b03      	cmp	r3, #3
 800e640:	f200 8087 	bhi.w	800e752 <_dtoa_r+0x30a>
 800e644:	e8df f003 	tbb	[pc, r3]
 800e648:	59383a2d 	.word	0x59383a2d
 800e64c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e650:	441d      	add	r5, r3
 800e652:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e656:	2b20      	cmp	r3, #32
 800e658:	bfc1      	itttt	gt
 800e65a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e65e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e662:	fa0b f303 	lslgt.w	r3, fp, r3
 800e666:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e66a:	bfda      	itte	le
 800e66c:	f1c3 0320 	rsble	r3, r3, #32
 800e670:	fa06 f003 	lslle.w	r0, r6, r3
 800e674:	4318      	orrgt	r0, r3
 800e676:	f7f1 ff65 	bl	8000544 <__aeabi_ui2d>
 800e67a:	2301      	movs	r3, #1
 800e67c:	4606      	mov	r6, r0
 800e67e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e682:	3d01      	subs	r5, #1
 800e684:	930e      	str	r3, [sp, #56]	; 0x38
 800e686:	e76a      	b.n	800e55e <_dtoa_r+0x116>
 800e688:	2301      	movs	r3, #1
 800e68a:	e7b2      	b.n	800e5f2 <_dtoa_r+0x1aa>
 800e68c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e68e:	e7b1      	b.n	800e5f4 <_dtoa_r+0x1ac>
 800e690:	9b04      	ldr	r3, [sp, #16]
 800e692:	9a00      	ldr	r2, [sp, #0]
 800e694:	1a9b      	subs	r3, r3, r2
 800e696:	9304      	str	r3, [sp, #16]
 800e698:	4253      	negs	r3, r2
 800e69a:	9307      	str	r3, [sp, #28]
 800e69c:	2300      	movs	r3, #0
 800e69e:	930a      	str	r3, [sp, #40]	; 0x28
 800e6a0:	e7bf      	b.n	800e622 <_dtoa_r+0x1da>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	9308      	str	r3, [sp, #32]
 800e6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	dc55      	bgt.n	800e758 <_dtoa_r+0x310>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e6b6:	e00c      	b.n	800e6d2 <_dtoa_r+0x28a>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e7f3      	b.n	800e6a4 <_dtoa_r+0x25c>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6c0:	9308      	str	r3, [sp, #32]
 800e6c2:	9b00      	ldr	r3, [sp, #0]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	9302      	str	r3, [sp, #8]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	9303      	str	r3, [sp, #12]
 800e6ce:	bfb8      	it	lt
 800e6d0:	2301      	movlt	r3, #1
 800e6d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	6042      	str	r2, [r0, #4]
 800e6d8:	2204      	movs	r2, #4
 800e6da:	f102 0614 	add.w	r6, r2, #20
 800e6de:	429e      	cmp	r6, r3
 800e6e0:	6841      	ldr	r1, [r0, #4]
 800e6e2:	d93d      	bls.n	800e760 <_dtoa_r+0x318>
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f000 ff05 	bl	800f4f4 <_Balloc>
 800e6ea:	9001      	str	r0, [sp, #4]
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d13b      	bne.n	800e768 <_dtoa_r+0x320>
 800e6f0:	4b11      	ldr	r3, [pc, #68]	; (800e738 <_dtoa_r+0x2f0>)
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e6f8:	e6c0      	b.n	800e47c <_dtoa_r+0x34>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e7df      	b.n	800e6be <_dtoa_r+0x276>
 800e6fe:	bf00      	nop
 800e700:	636f4361 	.word	0x636f4361
 800e704:	3fd287a7 	.word	0x3fd287a7
 800e708:	8b60c8b3 	.word	0x8b60c8b3
 800e70c:	3fc68a28 	.word	0x3fc68a28
 800e710:	509f79fb 	.word	0x509f79fb
 800e714:	3fd34413 	.word	0x3fd34413
 800e718:	08013f37 	.word	0x08013f37
 800e71c:	08013f4e 	.word	0x08013f4e
 800e720:	7ff00000 	.word	0x7ff00000
 800e724:	08013f33 	.word	0x08013f33
 800e728:	08013f2a 	.word	0x08013f2a
 800e72c:	0801418a 	.word	0x0801418a
 800e730:	3ff80000 	.word	0x3ff80000
 800e734:	080140a0 	.word	0x080140a0
 800e738:	08013fa9 	.word	0x08013fa9
 800e73c:	2501      	movs	r5, #1
 800e73e:	2300      	movs	r3, #0
 800e740:	9306      	str	r3, [sp, #24]
 800e742:	9508      	str	r5, [sp, #32]
 800e744:	f04f 33ff 	mov.w	r3, #4294967295
 800e748:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e74c:	2200      	movs	r2, #0
 800e74e:	2312      	movs	r3, #18
 800e750:	e7b0      	b.n	800e6b4 <_dtoa_r+0x26c>
 800e752:	2301      	movs	r3, #1
 800e754:	9308      	str	r3, [sp, #32]
 800e756:	e7f5      	b.n	800e744 <_dtoa_r+0x2fc>
 800e758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e75e:	e7b8      	b.n	800e6d2 <_dtoa_r+0x28a>
 800e760:	3101      	adds	r1, #1
 800e762:	6041      	str	r1, [r0, #4]
 800e764:	0052      	lsls	r2, r2, #1
 800e766:	e7b8      	b.n	800e6da <_dtoa_r+0x292>
 800e768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e76a:	9a01      	ldr	r2, [sp, #4]
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	9b03      	ldr	r3, [sp, #12]
 800e770:	2b0e      	cmp	r3, #14
 800e772:	f200 809d 	bhi.w	800e8b0 <_dtoa_r+0x468>
 800e776:	2d00      	cmp	r5, #0
 800e778:	f000 809a 	beq.w	800e8b0 <_dtoa_r+0x468>
 800e77c:	9b00      	ldr	r3, [sp, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	dd32      	ble.n	800e7e8 <_dtoa_r+0x3a0>
 800e782:	4ab7      	ldr	r2, [pc, #732]	; (800ea60 <_dtoa_r+0x618>)
 800e784:	f003 030f 	and.w	r3, r3, #15
 800e788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e78c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e790:	9b00      	ldr	r3, [sp, #0]
 800e792:	05d8      	lsls	r0, r3, #23
 800e794:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e798:	d516      	bpl.n	800e7c8 <_dtoa_r+0x380>
 800e79a:	4bb2      	ldr	r3, [pc, #712]	; (800ea64 <_dtoa_r+0x61c>)
 800e79c:	ec51 0b19 	vmov	r0, r1, d9
 800e7a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7a4:	f7f2 f872 	bl	800088c <__aeabi_ddiv>
 800e7a8:	f007 070f 	and.w	r7, r7, #15
 800e7ac:	4682      	mov	sl, r0
 800e7ae:	468b      	mov	fp, r1
 800e7b0:	2503      	movs	r5, #3
 800e7b2:	4eac      	ldr	r6, [pc, #688]	; (800ea64 <_dtoa_r+0x61c>)
 800e7b4:	b957      	cbnz	r7, 800e7cc <_dtoa_r+0x384>
 800e7b6:	4642      	mov	r2, r8
 800e7b8:	464b      	mov	r3, r9
 800e7ba:	4650      	mov	r0, sl
 800e7bc:	4659      	mov	r1, fp
 800e7be:	f7f2 f865 	bl	800088c <__aeabi_ddiv>
 800e7c2:	4682      	mov	sl, r0
 800e7c4:	468b      	mov	fp, r1
 800e7c6:	e028      	b.n	800e81a <_dtoa_r+0x3d2>
 800e7c8:	2502      	movs	r5, #2
 800e7ca:	e7f2      	b.n	800e7b2 <_dtoa_r+0x36a>
 800e7cc:	07f9      	lsls	r1, r7, #31
 800e7ce:	d508      	bpl.n	800e7e2 <_dtoa_r+0x39a>
 800e7d0:	4640      	mov	r0, r8
 800e7d2:	4649      	mov	r1, r9
 800e7d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e7d8:	f7f1 ff2e 	bl	8000638 <__aeabi_dmul>
 800e7dc:	3501      	adds	r5, #1
 800e7de:	4680      	mov	r8, r0
 800e7e0:	4689      	mov	r9, r1
 800e7e2:	107f      	asrs	r7, r7, #1
 800e7e4:	3608      	adds	r6, #8
 800e7e6:	e7e5      	b.n	800e7b4 <_dtoa_r+0x36c>
 800e7e8:	f000 809b 	beq.w	800e922 <_dtoa_r+0x4da>
 800e7ec:	9b00      	ldr	r3, [sp, #0]
 800e7ee:	4f9d      	ldr	r7, [pc, #628]	; (800ea64 <_dtoa_r+0x61c>)
 800e7f0:	425e      	negs	r6, r3
 800e7f2:	4b9b      	ldr	r3, [pc, #620]	; (800ea60 <_dtoa_r+0x618>)
 800e7f4:	f006 020f 	and.w	r2, r6, #15
 800e7f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	ec51 0b19 	vmov	r0, r1, d9
 800e804:	f7f1 ff18 	bl	8000638 <__aeabi_dmul>
 800e808:	1136      	asrs	r6, r6, #4
 800e80a:	4682      	mov	sl, r0
 800e80c:	468b      	mov	fp, r1
 800e80e:	2300      	movs	r3, #0
 800e810:	2502      	movs	r5, #2
 800e812:	2e00      	cmp	r6, #0
 800e814:	d17a      	bne.n	800e90c <_dtoa_r+0x4c4>
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1d3      	bne.n	800e7c2 <_dtoa_r+0x37a>
 800e81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f000 8082 	beq.w	800e926 <_dtoa_r+0x4de>
 800e822:	4b91      	ldr	r3, [pc, #580]	; (800ea68 <_dtoa_r+0x620>)
 800e824:	2200      	movs	r2, #0
 800e826:	4650      	mov	r0, sl
 800e828:	4659      	mov	r1, fp
 800e82a:	f7f2 f977 	bl	8000b1c <__aeabi_dcmplt>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d079      	beq.n	800e926 <_dtoa_r+0x4de>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d076      	beq.n	800e926 <_dtoa_r+0x4de>
 800e838:	9b02      	ldr	r3, [sp, #8]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	dd36      	ble.n	800e8ac <_dtoa_r+0x464>
 800e83e:	9b00      	ldr	r3, [sp, #0]
 800e840:	4650      	mov	r0, sl
 800e842:	4659      	mov	r1, fp
 800e844:	1e5f      	subs	r7, r3, #1
 800e846:	2200      	movs	r2, #0
 800e848:	4b88      	ldr	r3, [pc, #544]	; (800ea6c <_dtoa_r+0x624>)
 800e84a:	f7f1 fef5 	bl	8000638 <__aeabi_dmul>
 800e84e:	9e02      	ldr	r6, [sp, #8]
 800e850:	4682      	mov	sl, r0
 800e852:	468b      	mov	fp, r1
 800e854:	3501      	adds	r5, #1
 800e856:	4628      	mov	r0, r5
 800e858:	f7f1 fe84 	bl	8000564 <__aeabi_i2d>
 800e85c:	4652      	mov	r2, sl
 800e85e:	465b      	mov	r3, fp
 800e860:	f7f1 feea 	bl	8000638 <__aeabi_dmul>
 800e864:	4b82      	ldr	r3, [pc, #520]	; (800ea70 <_dtoa_r+0x628>)
 800e866:	2200      	movs	r2, #0
 800e868:	f7f1 fd30 	bl	80002cc <__adddf3>
 800e86c:	46d0      	mov	r8, sl
 800e86e:	46d9      	mov	r9, fp
 800e870:	4682      	mov	sl, r0
 800e872:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e876:	2e00      	cmp	r6, #0
 800e878:	d158      	bne.n	800e92c <_dtoa_r+0x4e4>
 800e87a:	4b7e      	ldr	r3, [pc, #504]	; (800ea74 <_dtoa_r+0x62c>)
 800e87c:	2200      	movs	r2, #0
 800e87e:	4640      	mov	r0, r8
 800e880:	4649      	mov	r1, r9
 800e882:	f7f1 fd21 	bl	80002c8 <__aeabi_dsub>
 800e886:	4652      	mov	r2, sl
 800e888:	465b      	mov	r3, fp
 800e88a:	4680      	mov	r8, r0
 800e88c:	4689      	mov	r9, r1
 800e88e:	f7f2 f963 	bl	8000b58 <__aeabi_dcmpgt>
 800e892:	2800      	cmp	r0, #0
 800e894:	f040 8295 	bne.w	800edc2 <_dtoa_r+0x97a>
 800e898:	4652      	mov	r2, sl
 800e89a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e89e:	4640      	mov	r0, r8
 800e8a0:	4649      	mov	r1, r9
 800e8a2:	f7f2 f93b 	bl	8000b1c <__aeabi_dcmplt>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	f040 8289 	bne.w	800edbe <_dtoa_r+0x976>
 800e8ac:	ec5b ab19 	vmov	sl, fp, d9
 800e8b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f2c0 8148 	blt.w	800eb48 <_dtoa_r+0x700>
 800e8b8:	9a00      	ldr	r2, [sp, #0]
 800e8ba:	2a0e      	cmp	r2, #14
 800e8bc:	f300 8144 	bgt.w	800eb48 <_dtoa_r+0x700>
 800e8c0:	4b67      	ldr	r3, [pc, #412]	; (800ea60 <_dtoa_r+0x618>)
 800e8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f280 80d5 	bge.w	800ea7c <_dtoa_r+0x634>
 800e8d2:	9b03      	ldr	r3, [sp, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f300 80d1 	bgt.w	800ea7c <_dtoa_r+0x634>
 800e8da:	f040 826f 	bne.w	800edbc <_dtoa_r+0x974>
 800e8de:	4b65      	ldr	r3, [pc, #404]	; (800ea74 <_dtoa_r+0x62c>)
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	f7f1 fea7 	bl	8000638 <__aeabi_dmul>
 800e8ea:	4652      	mov	r2, sl
 800e8ec:	465b      	mov	r3, fp
 800e8ee:	f7f2 f929 	bl	8000b44 <__aeabi_dcmpge>
 800e8f2:	9e03      	ldr	r6, [sp, #12]
 800e8f4:	4637      	mov	r7, r6
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f040 8245 	bne.w	800ed86 <_dtoa_r+0x93e>
 800e8fc:	9d01      	ldr	r5, [sp, #4]
 800e8fe:	2331      	movs	r3, #49	; 0x31
 800e900:	f805 3b01 	strb.w	r3, [r5], #1
 800e904:	9b00      	ldr	r3, [sp, #0]
 800e906:	3301      	adds	r3, #1
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	e240      	b.n	800ed8e <_dtoa_r+0x946>
 800e90c:	07f2      	lsls	r2, r6, #31
 800e90e:	d505      	bpl.n	800e91c <_dtoa_r+0x4d4>
 800e910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e914:	f7f1 fe90 	bl	8000638 <__aeabi_dmul>
 800e918:	3501      	adds	r5, #1
 800e91a:	2301      	movs	r3, #1
 800e91c:	1076      	asrs	r6, r6, #1
 800e91e:	3708      	adds	r7, #8
 800e920:	e777      	b.n	800e812 <_dtoa_r+0x3ca>
 800e922:	2502      	movs	r5, #2
 800e924:	e779      	b.n	800e81a <_dtoa_r+0x3d2>
 800e926:	9f00      	ldr	r7, [sp, #0]
 800e928:	9e03      	ldr	r6, [sp, #12]
 800e92a:	e794      	b.n	800e856 <_dtoa_r+0x40e>
 800e92c:	9901      	ldr	r1, [sp, #4]
 800e92e:	4b4c      	ldr	r3, [pc, #304]	; (800ea60 <_dtoa_r+0x618>)
 800e930:	4431      	add	r1, r6
 800e932:	910d      	str	r1, [sp, #52]	; 0x34
 800e934:	9908      	ldr	r1, [sp, #32]
 800e936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e93a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e93e:	2900      	cmp	r1, #0
 800e940:	d043      	beq.n	800e9ca <_dtoa_r+0x582>
 800e942:	494d      	ldr	r1, [pc, #308]	; (800ea78 <_dtoa_r+0x630>)
 800e944:	2000      	movs	r0, #0
 800e946:	f7f1 ffa1 	bl	800088c <__aeabi_ddiv>
 800e94a:	4652      	mov	r2, sl
 800e94c:	465b      	mov	r3, fp
 800e94e:	f7f1 fcbb 	bl	80002c8 <__aeabi_dsub>
 800e952:	9d01      	ldr	r5, [sp, #4]
 800e954:	4682      	mov	sl, r0
 800e956:	468b      	mov	fp, r1
 800e958:	4649      	mov	r1, r9
 800e95a:	4640      	mov	r0, r8
 800e95c:	f7f2 f91c 	bl	8000b98 <__aeabi_d2iz>
 800e960:	4606      	mov	r6, r0
 800e962:	f7f1 fdff 	bl	8000564 <__aeabi_i2d>
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	4640      	mov	r0, r8
 800e96c:	4649      	mov	r1, r9
 800e96e:	f7f1 fcab 	bl	80002c8 <__aeabi_dsub>
 800e972:	3630      	adds	r6, #48	; 0x30
 800e974:	f805 6b01 	strb.w	r6, [r5], #1
 800e978:	4652      	mov	r2, sl
 800e97a:	465b      	mov	r3, fp
 800e97c:	4680      	mov	r8, r0
 800e97e:	4689      	mov	r9, r1
 800e980:	f7f2 f8cc 	bl	8000b1c <__aeabi_dcmplt>
 800e984:	2800      	cmp	r0, #0
 800e986:	d163      	bne.n	800ea50 <_dtoa_r+0x608>
 800e988:	4642      	mov	r2, r8
 800e98a:	464b      	mov	r3, r9
 800e98c:	4936      	ldr	r1, [pc, #216]	; (800ea68 <_dtoa_r+0x620>)
 800e98e:	2000      	movs	r0, #0
 800e990:	f7f1 fc9a 	bl	80002c8 <__aeabi_dsub>
 800e994:	4652      	mov	r2, sl
 800e996:	465b      	mov	r3, fp
 800e998:	f7f2 f8c0 	bl	8000b1c <__aeabi_dcmplt>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	f040 80b5 	bne.w	800eb0c <_dtoa_r+0x6c4>
 800e9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9a4:	429d      	cmp	r5, r3
 800e9a6:	d081      	beq.n	800e8ac <_dtoa_r+0x464>
 800e9a8:	4b30      	ldr	r3, [pc, #192]	; (800ea6c <_dtoa_r+0x624>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	4650      	mov	r0, sl
 800e9ae:	4659      	mov	r1, fp
 800e9b0:	f7f1 fe42 	bl	8000638 <__aeabi_dmul>
 800e9b4:	4b2d      	ldr	r3, [pc, #180]	; (800ea6c <_dtoa_r+0x624>)
 800e9b6:	4682      	mov	sl, r0
 800e9b8:	468b      	mov	fp, r1
 800e9ba:	4640      	mov	r0, r8
 800e9bc:	4649      	mov	r1, r9
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f7f1 fe3a 	bl	8000638 <__aeabi_dmul>
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	4689      	mov	r9, r1
 800e9c8:	e7c6      	b.n	800e958 <_dtoa_r+0x510>
 800e9ca:	4650      	mov	r0, sl
 800e9cc:	4659      	mov	r1, fp
 800e9ce:	f7f1 fe33 	bl	8000638 <__aeabi_dmul>
 800e9d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9d4:	9d01      	ldr	r5, [sp, #4]
 800e9d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9d8:	4682      	mov	sl, r0
 800e9da:	468b      	mov	fp, r1
 800e9dc:	4649      	mov	r1, r9
 800e9de:	4640      	mov	r0, r8
 800e9e0:	f7f2 f8da 	bl	8000b98 <__aeabi_d2iz>
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	f7f1 fdbd 	bl	8000564 <__aeabi_i2d>
 800e9ea:	3630      	adds	r6, #48	; 0x30
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	4640      	mov	r0, r8
 800e9f2:	4649      	mov	r1, r9
 800e9f4:	f7f1 fc68 	bl	80002c8 <__aeabi_dsub>
 800e9f8:	f805 6b01 	strb.w	r6, [r5], #1
 800e9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9fe:	429d      	cmp	r5, r3
 800ea00:	4680      	mov	r8, r0
 800ea02:	4689      	mov	r9, r1
 800ea04:	f04f 0200 	mov.w	r2, #0
 800ea08:	d124      	bne.n	800ea54 <_dtoa_r+0x60c>
 800ea0a:	4b1b      	ldr	r3, [pc, #108]	; (800ea78 <_dtoa_r+0x630>)
 800ea0c:	4650      	mov	r0, sl
 800ea0e:	4659      	mov	r1, fp
 800ea10:	f7f1 fc5c 	bl	80002cc <__adddf3>
 800ea14:	4602      	mov	r2, r0
 800ea16:	460b      	mov	r3, r1
 800ea18:	4640      	mov	r0, r8
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	f7f2 f89c 	bl	8000b58 <__aeabi_dcmpgt>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d173      	bne.n	800eb0c <_dtoa_r+0x6c4>
 800ea24:	4652      	mov	r2, sl
 800ea26:	465b      	mov	r3, fp
 800ea28:	4913      	ldr	r1, [pc, #76]	; (800ea78 <_dtoa_r+0x630>)
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	f7f1 fc4c 	bl	80002c8 <__aeabi_dsub>
 800ea30:	4602      	mov	r2, r0
 800ea32:	460b      	mov	r3, r1
 800ea34:	4640      	mov	r0, r8
 800ea36:	4649      	mov	r1, r9
 800ea38:	f7f2 f870 	bl	8000b1c <__aeabi_dcmplt>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	f43f af35 	beq.w	800e8ac <_dtoa_r+0x464>
 800ea42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea44:	1e6b      	subs	r3, r5, #1
 800ea46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea4c:	2b30      	cmp	r3, #48	; 0x30
 800ea4e:	d0f8      	beq.n	800ea42 <_dtoa_r+0x5fa>
 800ea50:	9700      	str	r7, [sp, #0]
 800ea52:	e049      	b.n	800eae8 <_dtoa_r+0x6a0>
 800ea54:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <_dtoa_r+0x624>)
 800ea56:	f7f1 fdef 	bl	8000638 <__aeabi_dmul>
 800ea5a:	4680      	mov	r8, r0
 800ea5c:	4689      	mov	r9, r1
 800ea5e:	e7bd      	b.n	800e9dc <_dtoa_r+0x594>
 800ea60:	080140a0 	.word	0x080140a0
 800ea64:	08014078 	.word	0x08014078
 800ea68:	3ff00000 	.word	0x3ff00000
 800ea6c:	40240000 	.word	0x40240000
 800ea70:	401c0000 	.word	0x401c0000
 800ea74:	40140000 	.word	0x40140000
 800ea78:	3fe00000 	.word	0x3fe00000
 800ea7c:	9d01      	ldr	r5, [sp, #4]
 800ea7e:	4656      	mov	r6, sl
 800ea80:	465f      	mov	r7, fp
 800ea82:	4642      	mov	r2, r8
 800ea84:	464b      	mov	r3, r9
 800ea86:	4630      	mov	r0, r6
 800ea88:	4639      	mov	r1, r7
 800ea8a:	f7f1 feff 	bl	800088c <__aeabi_ddiv>
 800ea8e:	f7f2 f883 	bl	8000b98 <__aeabi_d2iz>
 800ea92:	4682      	mov	sl, r0
 800ea94:	f7f1 fd66 	bl	8000564 <__aeabi_i2d>
 800ea98:	4642      	mov	r2, r8
 800ea9a:	464b      	mov	r3, r9
 800ea9c:	f7f1 fdcc 	bl	8000638 <__aeabi_dmul>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	4639      	mov	r1, r7
 800eaa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eaac:	f7f1 fc0c 	bl	80002c8 <__aeabi_dsub>
 800eab0:	f805 6b01 	strb.w	r6, [r5], #1
 800eab4:	9e01      	ldr	r6, [sp, #4]
 800eab6:	9f03      	ldr	r7, [sp, #12]
 800eab8:	1bae      	subs	r6, r5, r6
 800eaba:	42b7      	cmp	r7, r6
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	d135      	bne.n	800eb2e <_dtoa_r+0x6e6>
 800eac2:	f7f1 fc03 	bl	80002cc <__adddf3>
 800eac6:	4642      	mov	r2, r8
 800eac8:	464b      	mov	r3, r9
 800eaca:	4606      	mov	r6, r0
 800eacc:	460f      	mov	r7, r1
 800eace:	f7f2 f843 	bl	8000b58 <__aeabi_dcmpgt>
 800ead2:	b9d0      	cbnz	r0, 800eb0a <_dtoa_r+0x6c2>
 800ead4:	4642      	mov	r2, r8
 800ead6:	464b      	mov	r3, r9
 800ead8:	4630      	mov	r0, r6
 800eada:	4639      	mov	r1, r7
 800eadc:	f7f2 f814 	bl	8000b08 <__aeabi_dcmpeq>
 800eae0:	b110      	cbz	r0, 800eae8 <_dtoa_r+0x6a0>
 800eae2:	f01a 0f01 	tst.w	sl, #1
 800eae6:	d110      	bne.n	800eb0a <_dtoa_r+0x6c2>
 800eae8:	4620      	mov	r0, r4
 800eaea:	ee18 1a10 	vmov	r1, s16
 800eaee:	f000 fd41 	bl	800f574 <_Bfree>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	9800      	ldr	r0, [sp, #0]
 800eaf6:	702b      	strb	r3, [r5, #0]
 800eaf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eafa:	3001      	adds	r0, #1
 800eafc:	6018      	str	r0, [r3, #0]
 800eafe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	f43f acf1 	beq.w	800e4e8 <_dtoa_r+0xa0>
 800eb06:	601d      	str	r5, [r3, #0]
 800eb08:	e4ee      	b.n	800e4e8 <_dtoa_r+0xa0>
 800eb0a:	9f00      	ldr	r7, [sp, #0]
 800eb0c:	462b      	mov	r3, r5
 800eb0e:	461d      	mov	r5, r3
 800eb10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb14:	2a39      	cmp	r2, #57	; 0x39
 800eb16:	d106      	bne.n	800eb26 <_dtoa_r+0x6de>
 800eb18:	9a01      	ldr	r2, [sp, #4]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d1f7      	bne.n	800eb0e <_dtoa_r+0x6c6>
 800eb1e:	9901      	ldr	r1, [sp, #4]
 800eb20:	2230      	movs	r2, #48	; 0x30
 800eb22:	3701      	adds	r7, #1
 800eb24:	700a      	strb	r2, [r1, #0]
 800eb26:	781a      	ldrb	r2, [r3, #0]
 800eb28:	3201      	adds	r2, #1
 800eb2a:	701a      	strb	r2, [r3, #0]
 800eb2c:	e790      	b.n	800ea50 <_dtoa_r+0x608>
 800eb2e:	4ba6      	ldr	r3, [pc, #664]	; (800edc8 <_dtoa_r+0x980>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	f7f1 fd81 	bl	8000638 <__aeabi_dmul>
 800eb36:	2200      	movs	r2, #0
 800eb38:	2300      	movs	r3, #0
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	460f      	mov	r7, r1
 800eb3e:	f7f1 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d09d      	beq.n	800ea82 <_dtoa_r+0x63a>
 800eb46:	e7cf      	b.n	800eae8 <_dtoa_r+0x6a0>
 800eb48:	9a08      	ldr	r2, [sp, #32]
 800eb4a:	2a00      	cmp	r2, #0
 800eb4c:	f000 80d7 	beq.w	800ecfe <_dtoa_r+0x8b6>
 800eb50:	9a06      	ldr	r2, [sp, #24]
 800eb52:	2a01      	cmp	r2, #1
 800eb54:	f300 80ba 	bgt.w	800eccc <_dtoa_r+0x884>
 800eb58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb5a:	2a00      	cmp	r2, #0
 800eb5c:	f000 80b2 	beq.w	800ecc4 <_dtoa_r+0x87c>
 800eb60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb64:	9e07      	ldr	r6, [sp, #28]
 800eb66:	9d04      	ldr	r5, [sp, #16]
 800eb68:	9a04      	ldr	r2, [sp, #16]
 800eb6a:	441a      	add	r2, r3
 800eb6c:	9204      	str	r2, [sp, #16]
 800eb6e:	9a05      	ldr	r2, [sp, #20]
 800eb70:	2101      	movs	r1, #1
 800eb72:	441a      	add	r2, r3
 800eb74:	4620      	mov	r0, r4
 800eb76:	9205      	str	r2, [sp, #20]
 800eb78:	f000 fdb4 	bl	800f6e4 <__i2b>
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	2d00      	cmp	r5, #0
 800eb80:	dd0c      	ble.n	800eb9c <_dtoa_r+0x754>
 800eb82:	9b05      	ldr	r3, [sp, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	dd09      	ble.n	800eb9c <_dtoa_r+0x754>
 800eb88:	42ab      	cmp	r3, r5
 800eb8a:	9a04      	ldr	r2, [sp, #16]
 800eb8c:	bfa8      	it	ge
 800eb8e:	462b      	movge	r3, r5
 800eb90:	1ad2      	subs	r2, r2, r3
 800eb92:	9204      	str	r2, [sp, #16]
 800eb94:	9a05      	ldr	r2, [sp, #20]
 800eb96:	1aed      	subs	r5, r5, r3
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	9305      	str	r3, [sp, #20]
 800eb9c:	9b07      	ldr	r3, [sp, #28]
 800eb9e:	b31b      	cbz	r3, 800ebe8 <_dtoa_r+0x7a0>
 800eba0:	9b08      	ldr	r3, [sp, #32]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f000 80af 	beq.w	800ed06 <_dtoa_r+0x8be>
 800eba8:	2e00      	cmp	r6, #0
 800ebaa:	dd13      	ble.n	800ebd4 <_dtoa_r+0x78c>
 800ebac:	4639      	mov	r1, r7
 800ebae:	4632      	mov	r2, r6
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 fe57 	bl	800f864 <__pow5mult>
 800ebb6:	ee18 2a10 	vmov	r2, s16
 800ebba:	4601      	mov	r1, r0
 800ebbc:	4607      	mov	r7, r0
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 fda6 	bl	800f710 <__multiply>
 800ebc4:	ee18 1a10 	vmov	r1, s16
 800ebc8:	4680      	mov	r8, r0
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 fcd2 	bl	800f574 <_Bfree>
 800ebd0:	ee08 8a10 	vmov	s16, r8
 800ebd4:	9b07      	ldr	r3, [sp, #28]
 800ebd6:	1b9a      	subs	r2, r3, r6
 800ebd8:	d006      	beq.n	800ebe8 <_dtoa_r+0x7a0>
 800ebda:	ee18 1a10 	vmov	r1, s16
 800ebde:	4620      	mov	r0, r4
 800ebe0:	f000 fe40 	bl	800f864 <__pow5mult>
 800ebe4:	ee08 0a10 	vmov	s16, r0
 800ebe8:	2101      	movs	r1, #1
 800ebea:	4620      	mov	r0, r4
 800ebec:	f000 fd7a 	bl	800f6e4 <__i2b>
 800ebf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	4606      	mov	r6, r0
 800ebf6:	f340 8088 	ble.w	800ed0a <_dtoa_r+0x8c2>
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	4601      	mov	r1, r0
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f000 fe30 	bl	800f864 <__pow5mult>
 800ec04:	9b06      	ldr	r3, [sp, #24]
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	4606      	mov	r6, r0
 800ec0a:	f340 8081 	ble.w	800ed10 <_dtoa_r+0x8c8>
 800ec0e:	f04f 0800 	mov.w	r8, #0
 800ec12:	6933      	ldr	r3, [r6, #16]
 800ec14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec18:	6918      	ldr	r0, [r3, #16]
 800ec1a:	f000 fd13 	bl	800f644 <__hi0bits>
 800ec1e:	f1c0 0020 	rsb	r0, r0, #32
 800ec22:	9b05      	ldr	r3, [sp, #20]
 800ec24:	4418      	add	r0, r3
 800ec26:	f010 001f 	ands.w	r0, r0, #31
 800ec2a:	f000 8092 	beq.w	800ed52 <_dtoa_r+0x90a>
 800ec2e:	f1c0 0320 	rsb	r3, r0, #32
 800ec32:	2b04      	cmp	r3, #4
 800ec34:	f340 808a 	ble.w	800ed4c <_dtoa_r+0x904>
 800ec38:	f1c0 001c 	rsb	r0, r0, #28
 800ec3c:	9b04      	ldr	r3, [sp, #16]
 800ec3e:	4403      	add	r3, r0
 800ec40:	9304      	str	r3, [sp, #16]
 800ec42:	9b05      	ldr	r3, [sp, #20]
 800ec44:	4403      	add	r3, r0
 800ec46:	4405      	add	r5, r0
 800ec48:	9305      	str	r3, [sp, #20]
 800ec4a:	9b04      	ldr	r3, [sp, #16]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dd07      	ble.n	800ec60 <_dtoa_r+0x818>
 800ec50:	ee18 1a10 	vmov	r1, s16
 800ec54:	461a      	mov	r2, r3
 800ec56:	4620      	mov	r0, r4
 800ec58:	f000 fe5e 	bl	800f918 <__lshift>
 800ec5c:	ee08 0a10 	vmov	s16, r0
 800ec60:	9b05      	ldr	r3, [sp, #20]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dd05      	ble.n	800ec72 <_dtoa_r+0x82a>
 800ec66:	4631      	mov	r1, r6
 800ec68:	461a      	mov	r2, r3
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 fe54 	bl	800f918 <__lshift>
 800ec70:	4606      	mov	r6, r0
 800ec72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d06e      	beq.n	800ed56 <_dtoa_r+0x90e>
 800ec78:	ee18 0a10 	vmov	r0, s16
 800ec7c:	4631      	mov	r1, r6
 800ec7e:	f000 febb 	bl	800f9f8 <__mcmp>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	da67      	bge.n	800ed56 <_dtoa_r+0x90e>
 800ec86:	9b00      	ldr	r3, [sp, #0]
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	ee18 1a10 	vmov	r1, s16
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	220a      	movs	r2, #10
 800ec92:	2300      	movs	r3, #0
 800ec94:	4620      	mov	r0, r4
 800ec96:	f000 fc8f 	bl	800f5b8 <__multadd>
 800ec9a:	9b08      	ldr	r3, [sp, #32]
 800ec9c:	ee08 0a10 	vmov	s16, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 81b1 	beq.w	800f008 <_dtoa_r+0xbc0>
 800eca6:	2300      	movs	r3, #0
 800eca8:	4639      	mov	r1, r7
 800ecaa:	220a      	movs	r2, #10
 800ecac:	4620      	mov	r0, r4
 800ecae:	f000 fc83 	bl	800f5b8 <__multadd>
 800ecb2:	9b02      	ldr	r3, [sp, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	4607      	mov	r7, r0
 800ecb8:	f300 808e 	bgt.w	800edd8 <_dtoa_r+0x990>
 800ecbc:	9b06      	ldr	r3, [sp, #24]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	dc51      	bgt.n	800ed66 <_dtoa_r+0x91e>
 800ecc2:	e089      	b.n	800edd8 <_dtoa_r+0x990>
 800ecc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ecca:	e74b      	b.n	800eb64 <_dtoa_r+0x71c>
 800eccc:	9b03      	ldr	r3, [sp, #12]
 800ecce:	1e5e      	subs	r6, r3, #1
 800ecd0:	9b07      	ldr	r3, [sp, #28]
 800ecd2:	42b3      	cmp	r3, r6
 800ecd4:	bfbf      	itttt	lt
 800ecd6:	9b07      	ldrlt	r3, [sp, #28]
 800ecd8:	9607      	strlt	r6, [sp, #28]
 800ecda:	1af2      	sublt	r2, r6, r3
 800ecdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ecde:	bfb6      	itet	lt
 800ece0:	189b      	addlt	r3, r3, r2
 800ece2:	1b9e      	subge	r6, r3, r6
 800ece4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	bfb8      	it	lt
 800ecea:	2600      	movlt	r6, #0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	bfb7      	itett	lt
 800ecf0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ecf4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ecf8:	1a9d      	sublt	r5, r3, r2
 800ecfa:	2300      	movlt	r3, #0
 800ecfc:	e734      	b.n	800eb68 <_dtoa_r+0x720>
 800ecfe:	9e07      	ldr	r6, [sp, #28]
 800ed00:	9d04      	ldr	r5, [sp, #16]
 800ed02:	9f08      	ldr	r7, [sp, #32]
 800ed04:	e73b      	b.n	800eb7e <_dtoa_r+0x736>
 800ed06:	9a07      	ldr	r2, [sp, #28]
 800ed08:	e767      	b.n	800ebda <_dtoa_r+0x792>
 800ed0a:	9b06      	ldr	r3, [sp, #24]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	dc18      	bgt.n	800ed42 <_dtoa_r+0x8fa>
 800ed10:	f1ba 0f00 	cmp.w	sl, #0
 800ed14:	d115      	bne.n	800ed42 <_dtoa_r+0x8fa>
 800ed16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed1a:	b993      	cbnz	r3, 800ed42 <_dtoa_r+0x8fa>
 800ed1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed20:	0d1b      	lsrs	r3, r3, #20
 800ed22:	051b      	lsls	r3, r3, #20
 800ed24:	b183      	cbz	r3, 800ed48 <_dtoa_r+0x900>
 800ed26:	9b04      	ldr	r3, [sp, #16]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	9304      	str	r3, [sp, #16]
 800ed2c:	9b05      	ldr	r3, [sp, #20]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	9305      	str	r3, [sp, #20]
 800ed32:	f04f 0801 	mov.w	r8, #1
 800ed36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f47f af6a 	bne.w	800ec12 <_dtoa_r+0x7ca>
 800ed3e:	2001      	movs	r0, #1
 800ed40:	e76f      	b.n	800ec22 <_dtoa_r+0x7da>
 800ed42:	f04f 0800 	mov.w	r8, #0
 800ed46:	e7f6      	b.n	800ed36 <_dtoa_r+0x8ee>
 800ed48:	4698      	mov	r8, r3
 800ed4a:	e7f4      	b.n	800ed36 <_dtoa_r+0x8ee>
 800ed4c:	f43f af7d 	beq.w	800ec4a <_dtoa_r+0x802>
 800ed50:	4618      	mov	r0, r3
 800ed52:	301c      	adds	r0, #28
 800ed54:	e772      	b.n	800ec3c <_dtoa_r+0x7f4>
 800ed56:	9b03      	ldr	r3, [sp, #12]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	dc37      	bgt.n	800edcc <_dtoa_r+0x984>
 800ed5c:	9b06      	ldr	r3, [sp, #24]
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	dd34      	ble.n	800edcc <_dtoa_r+0x984>
 800ed62:	9b03      	ldr	r3, [sp, #12]
 800ed64:	9302      	str	r3, [sp, #8]
 800ed66:	9b02      	ldr	r3, [sp, #8]
 800ed68:	b96b      	cbnz	r3, 800ed86 <_dtoa_r+0x93e>
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	2205      	movs	r2, #5
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f000 fc22 	bl	800f5b8 <__multadd>
 800ed74:	4601      	mov	r1, r0
 800ed76:	4606      	mov	r6, r0
 800ed78:	ee18 0a10 	vmov	r0, s16
 800ed7c:	f000 fe3c 	bl	800f9f8 <__mcmp>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	f73f adbb 	bgt.w	800e8fc <_dtoa_r+0x4b4>
 800ed86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed88:	9d01      	ldr	r5, [sp, #4]
 800ed8a:	43db      	mvns	r3, r3
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	f04f 0800 	mov.w	r8, #0
 800ed92:	4631      	mov	r1, r6
 800ed94:	4620      	mov	r0, r4
 800ed96:	f000 fbed 	bl	800f574 <_Bfree>
 800ed9a:	2f00      	cmp	r7, #0
 800ed9c:	f43f aea4 	beq.w	800eae8 <_dtoa_r+0x6a0>
 800eda0:	f1b8 0f00 	cmp.w	r8, #0
 800eda4:	d005      	beq.n	800edb2 <_dtoa_r+0x96a>
 800eda6:	45b8      	cmp	r8, r7
 800eda8:	d003      	beq.n	800edb2 <_dtoa_r+0x96a>
 800edaa:	4641      	mov	r1, r8
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fbe1 	bl	800f574 <_Bfree>
 800edb2:	4639      	mov	r1, r7
 800edb4:	4620      	mov	r0, r4
 800edb6:	f000 fbdd 	bl	800f574 <_Bfree>
 800edba:	e695      	b.n	800eae8 <_dtoa_r+0x6a0>
 800edbc:	2600      	movs	r6, #0
 800edbe:	4637      	mov	r7, r6
 800edc0:	e7e1      	b.n	800ed86 <_dtoa_r+0x93e>
 800edc2:	9700      	str	r7, [sp, #0]
 800edc4:	4637      	mov	r7, r6
 800edc6:	e599      	b.n	800e8fc <_dtoa_r+0x4b4>
 800edc8:	40240000 	.word	0x40240000
 800edcc:	9b08      	ldr	r3, [sp, #32]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 80ca 	beq.w	800ef68 <_dtoa_r+0xb20>
 800edd4:	9b03      	ldr	r3, [sp, #12]
 800edd6:	9302      	str	r3, [sp, #8]
 800edd8:	2d00      	cmp	r5, #0
 800edda:	dd05      	ble.n	800ede8 <_dtoa_r+0x9a0>
 800eddc:	4639      	mov	r1, r7
 800edde:	462a      	mov	r2, r5
 800ede0:	4620      	mov	r0, r4
 800ede2:	f000 fd99 	bl	800f918 <__lshift>
 800ede6:	4607      	mov	r7, r0
 800ede8:	f1b8 0f00 	cmp.w	r8, #0
 800edec:	d05b      	beq.n	800eea6 <_dtoa_r+0xa5e>
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	4620      	mov	r0, r4
 800edf2:	f000 fb7f 	bl	800f4f4 <_Balloc>
 800edf6:	4605      	mov	r5, r0
 800edf8:	b928      	cbnz	r0, 800ee06 <_dtoa_r+0x9be>
 800edfa:	4b87      	ldr	r3, [pc, #540]	; (800f018 <_dtoa_r+0xbd0>)
 800edfc:	4602      	mov	r2, r0
 800edfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ee02:	f7ff bb3b 	b.w	800e47c <_dtoa_r+0x34>
 800ee06:	693a      	ldr	r2, [r7, #16]
 800ee08:	3202      	adds	r2, #2
 800ee0a:	0092      	lsls	r2, r2, #2
 800ee0c:	f107 010c 	add.w	r1, r7, #12
 800ee10:	300c      	adds	r0, #12
 800ee12:	f000 fb61 	bl	800f4d8 <memcpy>
 800ee16:	2201      	movs	r2, #1
 800ee18:	4629      	mov	r1, r5
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f000 fd7c 	bl	800f918 <__lshift>
 800ee20:	9b01      	ldr	r3, [sp, #4]
 800ee22:	f103 0901 	add.w	r9, r3, #1
 800ee26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	9305      	str	r3, [sp, #20]
 800ee2e:	f00a 0301 	and.w	r3, sl, #1
 800ee32:	46b8      	mov	r8, r7
 800ee34:	9304      	str	r3, [sp, #16]
 800ee36:	4607      	mov	r7, r0
 800ee38:	4631      	mov	r1, r6
 800ee3a:	ee18 0a10 	vmov	r0, s16
 800ee3e:	f7ff fa75 	bl	800e32c <quorem>
 800ee42:	4641      	mov	r1, r8
 800ee44:	9002      	str	r0, [sp, #8]
 800ee46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ee4a:	ee18 0a10 	vmov	r0, s16
 800ee4e:	f000 fdd3 	bl	800f9f8 <__mcmp>
 800ee52:	463a      	mov	r2, r7
 800ee54:	9003      	str	r0, [sp, #12]
 800ee56:	4631      	mov	r1, r6
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f000 fde9 	bl	800fa30 <__mdiff>
 800ee5e:	68c2      	ldr	r2, [r0, #12]
 800ee60:	f109 3bff 	add.w	fp, r9, #4294967295
 800ee64:	4605      	mov	r5, r0
 800ee66:	bb02      	cbnz	r2, 800eeaa <_dtoa_r+0xa62>
 800ee68:	4601      	mov	r1, r0
 800ee6a:	ee18 0a10 	vmov	r0, s16
 800ee6e:	f000 fdc3 	bl	800f9f8 <__mcmp>
 800ee72:	4602      	mov	r2, r0
 800ee74:	4629      	mov	r1, r5
 800ee76:	4620      	mov	r0, r4
 800ee78:	9207      	str	r2, [sp, #28]
 800ee7a:	f000 fb7b 	bl	800f574 <_Bfree>
 800ee7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ee82:	ea43 0102 	orr.w	r1, r3, r2
 800ee86:	9b04      	ldr	r3, [sp, #16]
 800ee88:	430b      	orrs	r3, r1
 800ee8a:	464d      	mov	r5, r9
 800ee8c:	d10f      	bne.n	800eeae <_dtoa_r+0xa66>
 800ee8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee92:	d02a      	beq.n	800eeea <_dtoa_r+0xaa2>
 800ee94:	9b03      	ldr	r3, [sp, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	dd02      	ble.n	800eea0 <_dtoa_r+0xa58>
 800ee9a:	9b02      	ldr	r3, [sp, #8]
 800ee9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800eea0:	f88b a000 	strb.w	sl, [fp]
 800eea4:	e775      	b.n	800ed92 <_dtoa_r+0x94a>
 800eea6:	4638      	mov	r0, r7
 800eea8:	e7ba      	b.n	800ee20 <_dtoa_r+0x9d8>
 800eeaa:	2201      	movs	r2, #1
 800eeac:	e7e2      	b.n	800ee74 <_dtoa_r+0xa2c>
 800eeae:	9b03      	ldr	r3, [sp, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	db04      	blt.n	800eebe <_dtoa_r+0xa76>
 800eeb4:	9906      	ldr	r1, [sp, #24]
 800eeb6:	430b      	orrs	r3, r1
 800eeb8:	9904      	ldr	r1, [sp, #16]
 800eeba:	430b      	orrs	r3, r1
 800eebc:	d122      	bne.n	800ef04 <_dtoa_r+0xabc>
 800eebe:	2a00      	cmp	r2, #0
 800eec0:	ddee      	ble.n	800eea0 <_dtoa_r+0xa58>
 800eec2:	ee18 1a10 	vmov	r1, s16
 800eec6:	2201      	movs	r2, #1
 800eec8:	4620      	mov	r0, r4
 800eeca:	f000 fd25 	bl	800f918 <__lshift>
 800eece:	4631      	mov	r1, r6
 800eed0:	ee08 0a10 	vmov	s16, r0
 800eed4:	f000 fd90 	bl	800f9f8 <__mcmp>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	dc03      	bgt.n	800eee4 <_dtoa_r+0xa9c>
 800eedc:	d1e0      	bne.n	800eea0 <_dtoa_r+0xa58>
 800eede:	f01a 0f01 	tst.w	sl, #1
 800eee2:	d0dd      	beq.n	800eea0 <_dtoa_r+0xa58>
 800eee4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eee8:	d1d7      	bne.n	800ee9a <_dtoa_r+0xa52>
 800eeea:	2339      	movs	r3, #57	; 0x39
 800eeec:	f88b 3000 	strb.w	r3, [fp]
 800eef0:	462b      	mov	r3, r5
 800eef2:	461d      	mov	r5, r3
 800eef4:	3b01      	subs	r3, #1
 800eef6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eefa:	2a39      	cmp	r2, #57	; 0x39
 800eefc:	d071      	beq.n	800efe2 <_dtoa_r+0xb9a>
 800eefe:	3201      	adds	r2, #1
 800ef00:	701a      	strb	r2, [r3, #0]
 800ef02:	e746      	b.n	800ed92 <_dtoa_r+0x94a>
 800ef04:	2a00      	cmp	r2, #0
 800ef06:	dd07      	ble.n	800ef18 <_dtoa_r+0xad0>
 800ef08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef0c:	d0ed      	beq.n	800eeea <_dtoa_r+0xaa2>
 800ef0e:	f10a 0301 	add.w	r3, sl, #1
 800ef12:	f88b 3000 	strb.w	r3, [fp]
 800ef16:	e73c      	b.n	800ed92 <_dtoa_r+0x94a>
 800ef18:	9b05      	ldr	r3, [sp, #20]
 800ef1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ef1e:	4599      	cmp	r9, r3
 800ef20:	d047      	beq.n	800efb2 <_dtoa_r+0xb6a>
 800ef22:	ee18 1a10 	vmov	r1, s16
 800ef26:	2300      	movs	r3, #0
 800ef28:	220a      	movs	r2, #10
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f000 fb44 	bl	800f5b8 <__multadd>
 800ef30:	45b8      	cmp	r8, r7
 800ef32:	ee08 0a10 	vmov	s16, r0
 800ef36:	f04f 0300 	mov.w	r3, #0
 800ef3a:	f04f 020a 	mov.w	r2, #10
 800ef3e:	4641      	mov	r1, r8
 800ef40:	4620      	mov	r0, r4
 800ef42:	d106      	bne.n	800ef52 <_dtoa_r+0xb0a>
 800ef44:	f000 fb38 	bl	800f5b8 <__multadd>
 800ef48:	4680      	mov	r8, r0
 800ef4a:	4607      	mov	r7, r0
 800ef4c:	f109 0901 	add.w	r9, r9, #1
 800ef50:	e772      	b.n	800ee38 <_dtoa_r+0x9f0>
 800ef52:	f000 fb31 	bl	800f5b8 <__multadd>
 800ef56:	4639      	mov	r1, r7
 800ef58:	4680      	mov	r8, r0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	220a      	movs	r2, #10
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f000 fb2a 	bl	800f5b8 <__multadd>
 800ef64:	4607      	mov	r7, r0
 800ef66:	e7f1      	b.n	800ef4c <_dtoa_r+0xb04>
 800ef68:	9b03      	ldr	r3, [sp, #12]
 800ef6a:	9302      	str	r3, [sp, #8]
 800ef6c:	9d01      	ldr	r5, [sp, #4]
 800ef6e:	ee18 0a10 	vmov	r0, s16
 800ef72:	4631      	mov	r1, r6
 800ef74:	f7ff f9da 	bl	800e32c <quorem>
 800ef78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ef7c:	9b01      	ldr	r3, [sp, #4]
 800ef7e:	f805 ab01 	strb.w	sl, [r5], #1
 800ef82:	1aea      	subs	r2, r5, r3
 800ef84:	9b02      	ldr	r3, [sp, #8]
 800ef86:	4293      	cmp	r3, r2
 800ef88:	dd09      	ble.n	800ef9e <_dtoa_r+0xb56>
 800ef8a:	ee18 1a10 	vmov	r1, s16
 800ef8e:	2300      	movs	r3, #0
 800ef90:	220a      	movs	r2, #10
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fb10 	bl	800f5b8 <__multadd>
 800ef98:	ee08 0a10 	vmov	s16, r0
 800ef9c:	e7e7      	b.n	800ef6e <_dtoa_r+0xb26>
 800ef9e:	9b02      	ldr	r3, [sp, #8]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	bfc8      	it	gt
 800efa4:	461d      	movgt	r5, r3
 800efa6:	9b01      	ldr	r3, [sp, #4]
 800efa8:	bfd8      	it	le
 800efaa:	2501      	movle	r5, #1
 800efac:	441d      	add	r5, r3
 800efae:	f04f 0800 	mov.w	r8, #0
 800efb2:	ee18 1a10 	vmov	r1, s16
 800efb6:	2201      	movs	r2, #1
 800efb8:	4620      	mov	r0, r4
 800efba:	f000 fcad 	bl	800f918 <__lshift>
 800efbe:	4631      	mov	r1, r6
 800efc0:	ee08 0a10 	vmov	s16, r0
 800efc4:	f000 fd18 	bl	800f9f8 <__mcmp>
 800efc8:	2800      	cmp	r0, #0
 800efca:	dc91      	bgt.n	800eef0 <_dtoa_r+0xaa8>
 800efcc:	d102      	bne.n	800efd4 <_dtoa_r+0xb8c>
 800efce:	f01a 0f01 	tst.w	sl, #1
 800efd2:	d18d      	bne.n	800eef0 <_dtoa_r+0xaa8>
 800efd4:	462b      	mov	r3, r5
 800efd6:	461d      	mov	r5, r3
 800efd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efdc:	2a30      	cmp	r2, #48	; 0x30
 800efde:	d0fa      	beq.n	800efd6 <_dtoa_r+0xb8e>
 800efe0:	e6d7      	b.n	800ed92 <_dtoa_r+0x94a>
 800efe2:	9a01      	ldr	r2, [sp, #4]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d184      	bne.n	800eef2 <_dtoa_r+0xaaa>
 800efe8:	9b00      	ldr	r3, [sp, #0]
 800efea:	3301      	adds	r3, #1
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	2331      	movs	r3, #49	; 0x31
 800eff0:	7013      	strb	r3, [r2, #0]
 800eff2:	e6ce      	b.n	800ed92 <_dtoa_r+0x94a>
 800eff4:	4b09      	ldr	r3, [pc, #36]	; (800f01c <_dtoa_r+0xbd4>)
 800eff6:	f7ff ba95 	b.w	800e524 <_dtoa_r+0xdc>
 800effa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800effc:	2b00      	cmp	r3, #0
 800effe:	f47f aa6e 	bne.w	800e4de <_dtoa_r+0x96>
 800f002:	4b07      	ldr	r3, [pc, #28]	; (800f020 <_dtoa_r+0xbd8>)
 800f004:	f7ff ba8e 	b.w	800e524 <_dtoa_r+0xdc>
 800f008:	9b02      	ldr	r3, [sp, #8]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	dcae      	bgt.n	800ef6c <_dtoa_r+0xb24>
 800f00e:	9b06      	ldr	r3, [sp, #24]
 800f010:	2b02      	cmp	r3, #2
 800f012:	f73f aea8 	bgt.w	800ed66 <_dtoa_r+0x91e>
 800f016:	e7a9      	b.n	800ef6c <_dtoa_r+0xb24>
 800f018:	08013fa9 	.word	0x08013fa9
 800f01c:	08014189 	.word	0x08014189
 800f020:	08013f2a 	.word	0x08013f2a

0800f024 <__sflush_r>:
 800f024:	898a      	ldrh	r2, [r1, #12]
 800f026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02a:	4605      	mov	r5, r0
 800f02c:	0710      	lsls	r0, r2, #28
 800f02e:	460c      	mov	r4, r1
 800f030:	d458      	bmi.n	800f0e4 <__sflush_r+0xc0>
 800f032:	684b      	ldr	r3, [r1, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	dc05      	bgt.n	800f044 <__sflush_r+0x20>
 800f038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	dc02      	bgt.n	800f044 <__sflush_r+0x20>
 800f03e:	2000      	movs	r0, #0
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f046:	2e00      	cmp	r6, #0
 800f048:	d0f9      	beq.n	800f03e <__sflush_r+0x1a>
 800f04a:	2300      	movs	r3, #0
 800f04c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f050:	682f      	ldr	r7, [r5, #0]
 800f052:	602b      	str	r3, [r5, #0]
 800f054:	d032      	beq.n	800f0bc <__sflush_r+0x98>
 800f056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f058:	89a3      	ldrh	r3, [r4, #12]
 800f05a:	075a      	lsls	r2, r3, #29
 800f05c:	d505      	bpl.n	800f06a <__sflush_r+0x46>
 800f05e:	6863      	ldr	r3, [r4, #4]
 800f060:	1ac0      	subs	r0, r0, r3
 800f062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f064:	b10b      	cbz	r3, 800f06a <__sflush_r+0x46>
 800f066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f068:	1ac0      	subs	r0, r0, r3
 800f06a:	2300      	movs	r3, #0
 800f06c:	4602      	mov	r2, r0
 800f06e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f070:	6a21      	ldr	r1, [r4, #32]
 800f072:	4628      	mov	r0, r5
 800f074:	47b0      	blx	r6
 800f076:	1c43      	adds	r3, r0, #1
 800f078:	89a3      	ldrh	r3, [r4, #12]
 800f07a:	d106      	bne.n	800f08a <__sflush_r+0x66>
 800f07c:	6829      	ldr	r1, [r5, #0]
 800f07e:	291d      	cmp	r1, #29
 800f080:	d82c      	bhi.n	800f0dc <__sflush_r+0xb8>
 800f082:	4a2a      	ldr	r2, [pc, #168]	; (800f12c <__sflush_r+0x108>)
 800f084:	40ca      	lsrs	r2, r1
 800f086:	07d6      	lsls	r6, r2, #31
 800f088:	d528      	bpl.n	800f0dc <__sflush_r+0xb8>
 800f08a:	2200      	movs	r2, #0
 800f08c:	6062      	str	r2, [r4, #4]
 800f08e:	04d9      	lsls	r1, r3, #19
 800f090:	6922      	ldr	r2, [r4, #16]
 800f092:	6022      	str	r2, [r4, #0]
 800f094:	d504      	bpl.n	800f0a0 <__sflush_r+0x7c>
 800f096:	1c42      	adds	r2, r0, #1
 800f098:	d101      	bne.n	800f09e <__sflush_r+0x7a>
 800f09a:	682b      	ldr	r3, [r5, #0]
 800f09c:	b903      	cbnz	r3, 800f0a0 <__sflush_r+0x7c>
 800f09e:	6560      	str	r0, [r4, #84]	; 0x54
 800f0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0a2:	602f      	str	r7, [r5, #0]
 800f0a4:	2900      	cmp	r1, #0
 800f0a6:	d0ca      	beq.n	800f03e <__sflush_r+0x1a>
 800f0a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0ac:	4299      	cmp	r1, r3
 800f0ae:	d002      	beq.n	800f0b6 <__sflush_r+0x92>
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	f000 fdb9 	bl	800fc28 <_free_r>
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	6360      	str	r0, [r4, #52]	; 0x34
 800f0ba:	e7c1      	b.n	800f040 <__sflush_r+0x1c>
 800f0bc:	6a21      	ldr	r1, [r4, #32]
 800f0be:	2301      	movs	r3, #1
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	47b0      	blx	r6
 800f0c4:	1c41      	adds	r1, r0, #1
 800f0c6:	d1c7      	bne.n	800f058 <__sflush_r+0x34>
 800f0c8:	682b      	ldr	r3, [r5, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d0c4      	beq.n	800f058 <__sflush_r+0x34>
 800f0ce:	2b1d      	cmp	r3, #29
 800f0d0:	d001      	beq.n	800f0d6 <__sflush_r+0xb2>
 800f0d2:	2b16      	cmp	r3, #22
 800f0d4:	d101      	bne.n	800f0da <__sflush_r+0xb6>
 800f0d6:	602f      	str	r7, [r5, #0]
 800f0d8:	e7b1      	b.n	800f03e <__sflush_r+0x1a>
 800f0da:	89a3      	ldrh	r3, [r4, #12]
 800f0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0e0:	81a3      	strh	r3, [r4, #12]
 800f0e2:	e7ad      	b.n	800f040 <__sflush_r+0x1c>
 800f0e4:	690f      	ldr	r7, [r1, #16]
 800f0e6:	2f00      	cmp	r7, #0
 800f0e8:	d0a9      	beq.n	800f03e <__sflush_r+0x1a>
 800f0ea:	0793      	lsls	r3, r2, #30
 800f0ec:	680e      	ldr	r6, [r1, #0]
 800f0ee:	bf08      	it	eq
 800f0f0:	694b      	ldreq	r3, [r1, #20]
 800f0f2:	600f      	str	r7, [r1, #0]
 800f0f4:	bf18      	it	ne
 800f0f6:	2300      	movne	r3, #0
 800f0f8:	eba6 0807 	sub.w	r8, r6, r7
 800f0fc:	608b      	str	r3, [r1, #8]
 800f0fe:	f1b8 0f00 	cmp.w	r8, #0
 800f102:	dd9c      	ble.n	800f03e <__sflush_r+0x1a>
 800f104:	6a21      	ldr	r1, [r4, #32]
 800f106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f108:	4643      	mov	r3, r8
 800f10a:	463a      	mov	r2, r7
 800f10c:	4628      	mov	r0, r5
 800f10e:	47b0      	blx	r6
 800f110:	2800      	cmp	r0, #0
 800f112:	dc06      	bgt.n	800f122 <__sflush_r+0xfe>
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f11a:	81a3      	strh	r3, [r4, #12]
 800f11c:	f04f 30ff 	mov.w	r0, #4294967295
 800f120:	e78e      	b.n	800f040 <__sflush_r+0x1c>
 800f122:	4407      	add	r7, r0
 800f124:	eba8 0800 	sub.w	r8, r8, r0
 800f128:	e7e9      	b.n	800f0fe <__sflush_r+0xda>
 800f12a:	bf00      	nop
 800f12c:	20400001 	.word	0x20400001

0800f130 <_fflush_r>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	690b      	ldr	r3, [r1, #16]
 800f134:	4605      	mov	r5, r0
 800f136:	460c      	mov	r4, r1
 800f138:	b913      	cbnz	r3, 800f140 <_fflush_r+0x10>
 800f13a:	2500      	movs	r5, #0
 800f13c:	4628      	mov	r0, r5
 800f13e:	bd38      	pop	{r3, r4, r5, pc}
 800f140:	b118      	cbz	r0, 800f14a <_fflush_r+0x1a>
 800f142:	6983      	ldr	r3, [r0, #24]
 800f144:	b90b      	cbnz	r3, 800f14a <_fflush_r+0x1a>
 800f146:	f000 f899 	bl	800f27c <__sinit>
 800f14a:	4b14      	ldr	r3, [pc, #80]	; (800f19c <_fflush_r+0x6c>)
 800f14c:	429c      	cmp	r4, r3
 800f14e:	d11b      	bne.n	800f188 <_fflush_r+0x58>
 800f150:	686c      	ldr	r4, [r5, #4]
 800f152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d0ef      	beq.n	800f13a <_fflush_r+0xa>
 800f15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f15c:	07d0      	lsls	r0, r2, #31
 800f15e:	d404      	bmi.n	800f16a <_fflush_r+0x3a>
 800f160:	0599      	lsls	r1, r3, #22
 800f162:	d402      	bmi.n	800f16a <_fflush_r+0x3a>
 800f164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f166:	f000 f948 	bl	800f3fa <__retarget_lock_acquire_recursive>
 800f16a:	4628      	mov	r0, r5
 800f16c:	4621      	mov	r1, r4
 800f16e:	f7ff ff59 	bl	800f024 <__sflush_r>
 800f172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f174:	07da      	lsls	r2, r3, #31
 800f176:	4605      	mov	r5, r0
 800f178:	d4e0      	bmi.n	800f13c <_fflush_r+0xc>
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	059b      	lsls	r3, r3, #22
 800f17e:	d4dd      	bmi.n	800f13c <_fflush_r+0xc>
 800f180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f182:	f000 f93b 	bl	800f3fc <__retarget_lock_release_recursive>
 800f186:	e7d9      	b.n	800f13c <_fflush_r+0xc>
 800f188:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <_fflush_r+0x70>)
 800f18a:	429c      	cmp	r4, r3
 800f18c:	d101      	bne.n	800f192 <_fflush_r+0x62>
 800f18e:	68ac      	ldr	r4, [r5, #8]
 800f190:	e7df      	b.n	800f152 <_fflush_r+0x22>
 800f192:	4b04      	ldr	r3, [pc, #16]	; (800f1a4 <_fflush_r+0x74>)
 800f194:	429c      	cmp	r4, r3
 800f196:	bf08      	it	eq
 800f198:	68ec      	ldreq	r4, [r5, #12]
 800f19a:	e7da      	b.n	800f152 <_fflush_r+0x22>
 800f19c:	08013fdc 	.word	0x08013fdc
 800f1a0:	08013ffc 	.word	0x08013ffc
 800f1a4:	08013fbc 	.word	0x08013fbc

0800f1a8 <fflush>:
 800f1a8:	4601      	mov	r1, r0
 800f1aa:	b920      	cbnz	r0, 800f1b6 <fflush+0xe>
 800f1ac:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <fflush+0x18>)
 800f1ae:	4905      	ldr	r1, [pc, #20]	; (800f1c4 <fflush+0x1c>)
 800f1b0:	6818      	ldr	r0, [r3, #0]
 800f1b2:	f000 b8fe 	b.w	800f3b2 <_fwalk_reent>
 800f1b6:	4b04      	ldr	r3, [pc, #16]	; (800f1c8 <fflush+0x20>)
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	f7ff bfb9 	b.w	800f130 <_fflush_r>
 800f1be:	bf00      	nop
 800f1c0:	08013ef4 	.word	0x08013ef4
 800f1c4:	0800f131 	.word	0x0800f131
 800f1c8:	20000014 	.word	0x20000014

0800f1cc <std>:
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	b510      	push	{r4, lr}
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	e9c0 3300 	strd	r3, r3, [r0]
 800f1d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1da:	6083      	str	r3, [r0, #8]
 800f1dc:	8181      	strh	r1, [r0, #12]
 800f1de:	6643      	str	r3, [r0, #100]	; 0x64
 800f1e0:	81c2      	strh	r2, [r0, #14]
 800f1e2:	6183      	str	r3, [r0, #24]
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	2208      	movs	r2, #8
 800f1e8:	305c      	adds	r0, #92	; 0x5c
 800f1ea:	f7fe faa7 	bl	800d73c <memset>
 800f1ee:	4b05      	ldr	r3, [pc, #20]	; (800f204 <std+0x38>)
 800f1f0:	6263      	str	r3, [r4, #36]	; 0x24
 800f1f2:	4b05      	ldr	r3, [pc, #20]	; (800f208 <std+0x3c>)
 800f1f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f1f6:	4b05      	ldr	r3, [pc, #20]	; (800f20c <std+0x40>)
 800f1f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f1fa:	4b05      	ldr	r3, [pc, #20]	; (800f210 <std+0x44>)
 800f1fc:	6224      	str	r4, [r4, #32]
 800f1fe:	6323      	str	r3, [r4, #48]	; 0x30
 800f200:	bd10      	pop	{r4, pc}
 800f202:	bf00      	nop
 800f204:	08010b4d 	.word	0x08010b4d
 800f208:	08010b6f 	.word	0x08010b6f
 800f20c:	08010ba7 	.word	0x08010ba7
 800f210:	08010bcb 	.word	0x08010bcb

0800f214 <_cleanup_r>:
 800f214:	4901      	ldr	r1, [pc, #4]	; (800f21c <_cleanup_r+0x8>)
 800f216:	f000 b8cc 	b.w	800f3b2 <_fwalk_reent>
 800f21a:	bf00      	nop
 800f21c:	0800f131 	.word	0x0800f131

0800f220 <__sfmoreglue>:
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	2268      	movs	r2, #104	; 0x68
 800f224:	1e4d      	subs	r5, r1, #1
 800f226:	4355      	muls	r5, r2
 800f228:	460e      	mov	r6, r1
 800f22a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f22e:	f000 fd67 	bl	800fd00 <_malloc_r>
 800f232:	4604      	mov	r4, r0
 800f234:	b140      	cbz	r0, 800f248 <__sfmoreglue+0x28>
 800f236:	2100      	movs	r1, #0
 800f238:	e9c0 1600 	strd	r1, r6, [r0]
 800f23c:	300c      	adds	r0, #12
 800f23e:	60a0      	str	r0, [r4, #8]
 800f240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f244:	f7fe fa7a 	bl	800d73c <memset>
 800f248:	4620      	mov	r0, r4
 800f24a:	bd70      	pop	{r4, r5, r6, pc}

0800f24c <__sfp_lock_acquire>:
 800f24c:	4801      	ldr	r0, [pc, #4]	; (800f254 <__sfp_lock_acquire+0x8>)
 800f24e:	f000 b8d4 	b.w	800f3fa <__retarget_lock_acquire_recursive>
 800f252:	bf00      	nop
 800f254:	20000579 	.word	0x20000579

0800f258 <__sfp_lock_release>:
 800f258:	4801      	ldr	r0, [pc, #4]	; (800f260 <__sfp_lock_release+0x8>)
 800f25a:	f000 b8cf 	b.w	800f3fc <__retarget_lock_release_recursive>
 800f25e:	bf00      	nop
 800f260:	20000579 	.word	0x20000579

0800f264 <__sinit_lock_acquire>:
 800f264:	4801      	ldr	r0, [pc, #4]	; (800f26c <__sinit_lock_acquire+0x8>)
 800f266:	f000 b8c8 	b.w	800f3fa <__retarget_lock_acquire_recursive>
 800f26a:	bf00      	nop
 800f26c:	2000057a 	.word	0x2000057a

0800f270 <__sinit_lock_release>:
 800f270:	4801      	ldr	r0, [pc, #4]	; (800f278 <__sinit_lock_release+0x8>)
 800f272:	f000 b8c3 	b.w	800f3fc <__retarget_lock_release_recursive>
 800f276:	bf00      	nop
 800f278:	2000057a 	.word	0x2000057a

0800f27c <__sinit>:
 800f27c:	b510      	push	{r4, lr}
 800f27e:	4604      	mov	r4, r0
 800f280:	f7ff fff0 	bl	800f264 <__sinit_lock_acquire>
 800f284:	69a3      	ldr	r3, [r4, #24]
 800f286:	b11b      	cbz	r3, 800f290 <__sinit+0x14>
 800f288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f28c:	f7ff bff0 	b.w	800f270 <__sinit_lock_release>
 800f290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f294:	6523      	str	r3, [r4, #80]	; 0x50
 800f296:	4b13      	ldr	r3, [pc, #76]	; (800f2e4 <__sinit+0x68>)
 800f298:	4a13      	ldr	r2, [pc, #76]	; (800f2e8 <__sinit+0x6c>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f29e:	42a3      	cmp	r3, r4
 800f2a0:	bf04      	itt	eq
 800f2a2:	2301      	moveq	r3, #1
 800f2a4:	61a3      	streq	r3, [r4, #24]
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 f820 	bl	800f2ec <__sfp>
 800f2ac:	6060      	str	r0, [r4, #4]
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 f81c 	bl	800f2ec <__sfp>
 800f2b4:	60a0      	str	r0, [r4, #8]
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f000 f818 	bl	800f2ec <__sfp>
 800f2bc:	2200      	movs	r2, #0
 800f2be:	60e0      	str	r0, [r4, #12]
 800f2c0:	2104      	movs	r1, #4
 800f2c2:	6860      	ldr	r0, [r4, #4]
 800f2c4:	f7ff ff82 	bl	800f1cc <std>
 800f2c8:	68a0      	ldr	r0, [r4, #8]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	2109      	movs	r1, #9
 800f2ce:	f7ff ff7d 	bl	800f1cc <std>
 800f2d2:	68e0      	ldr	r0, [r4, #12]
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	2112      	movs	r1, #18
 800f2d8:	f7ff ff78 	bl	800f1cc <std>
 800f2dc:	2301      	movs	r3, #1
 800f2de:	61a3      	str	r3, [r4, #24]
 800f2e0:	e7d2      	b.n	800f288 <__sinit+0xc>
 800f2e2:	bf00      	nop
 800f2e4:	08013ef4 	.word	0x08013ef4
 800f2e8:	0800f215 	.word	0x0800f215

0800f2ec <__sfp>:
 800f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ee:	4607      	mov	r7, r0
 800f2f0:	f7ff ffac 	bl	800f24c <__sfp_lock_acquire>
 800f2f4:	4b1e      	ldr	r3, [pc, #120]	; (800f370 <__sfp+0x84>)
 800f2f6:	681e      	ldr	r6, [r3, #0]
 800f2f8:	69b3      	ldr	r3, [r6, #24]
 800f2fa:	b913      	cbnz	r3, 800f302 <__sfp+0x16>
 800f2fc:	4630      	mov	r0, r6
 800f2fe:	f7ff ffbd 	bl	800f27c <__sinit>
 800f302:	3648      	adds	r6, #72	; 0x48
 800f304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f308:	3b01      	subs	r3, #1
 800f30a:	d503      	bpl.n	800f314 <__sfp+0x28>
 800f30c:	6833      	ldr	r3, [r6, #0]
 800f30e:	b30b      	cbz	r3, 800f354 <__sfp+0x68>
 800f310:	6836      	ldr	r6, [r6, #0]
 800f312:	e7f7      	b.n	800f304 <__sfp+0x18>
 800f314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f318:	b9d5      	cbnz	r5, 800f350 <__sfp+0x64>
 800f31a:	4b16      	ldr	r3, [pc, #88]	; (800f374 <__sfp+0x88>)
 800f31c:	60e3      	str	r3, [r4, #12]
 800f31e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f322:	6665      	str	r5, [r4, #100]	; 0x64
 800f324:	f000 f868 	bl	800f3f8 <__retarget_lock_init_recursive>
 800f328:	f7ff ff96 	bl	800f258 <__sfp_lock_release>
 800f32c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f334:	6025      	str	r5, [r4, #0]
 800f336:	61a5      	str	r5, [r4, #24]
 800f338:	2208      	movs	r2, #8
 800f33a:	4629      	mov	r1, r5
 800f33c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f340:	f7fe f9fc 	bl	800d73c <memset>
 800f344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f34c:	4620      	mov	r0, r4
 800f34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f350:	3468      	adds	r4, #104	; 0x68
 800f352:	e7d9      	b.n	800f308 <__sfp+0x1c>
 800f354:	2104      	movs	r1, #4
 800f356:	4638      	mov	r0, r7
 800f358:	f7ff ff62 	bl	800f220 <__sfmoreglue>
 800f35c:	4604      	mov	r4, r0
 800f35e:	6030      	str	r0, [r6, #0]
 800f360:	2800      	cmp	r0, #0
 800f362:	d1d5      	bne.n	800f310 <__sfp+0x24>
 800f364:	f7ff ff78 	bl	800f258 <__sfp_lock_release>
 800f368:	230c      	movs	r3, #12
 800f36a:	603b      	str	r3, [r7, #0]
 800f36c:	e7ee      	b.n	800f34c <__sfp+0x60>
 800f36e:	bf00      	nop
 800f370:	08013ef4 	.word	0x08013ef4
 800f374:	ffff0001 	.word	0xffff0001

0800f378 <_fwalk>:
 800f378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f37c:	460f      	mov	r7, r1
 800f37e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f382:	2600      	movs	r6, #0
 800f384:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800f388:	f1b8 0801 	subs.w	r8, r8, #1
 800f38c:	d505      	bpl.n	800f39a <_fwalk+0x22>
 800f38e:	6824      	ldr	r4, [r4, #0]
 800f390:	2c00      	cmp	r4, #0
 800f392:	d1f7      	bne.n	800f384 <_fwalk+0xc>
 800f394:	4630      	mov	r0, r6
 800f396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f39a:	89ab      	ldrh	r3, [r5, #12]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d906      	bls.n	800f3ae <_fwalk+0x36>
 800f3a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	d002      	beq.n	800f3ae <_fwalk+0x36>
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	47b8      	blx	r7
 800f3ac:	4306      	orrs	r6, r0
 800f3ae:	3568      	adds	r5, #104	; 0x68
 800f3b0:	e7ea      	b.n	800f388 <_fwalk+0x10>

0800f3b2 <_fwalk_reent>:
 800f3b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b6:	4606      	mov	r6, r0
 800f3b8:	4688      	mov	r8, r1
 800f3ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3be:	2700      	movs	r7, #0
 800f3c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3c4:	f1b9 0901 	subs.w	r9, r9, #1
 800f3c8:	d505      	bpl.n	800f3d6 <_fwalk_reent+0x24>
 800f3ca:	6824      	ldr	r4, [r4, #0]
 800f3cc:	2c00      	cmp	r4, #0
 800f3ce:	d1f7      	bne.n	800f3c0 <_fwalk_reent+0xe>
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3d6:	89ab      	ldrh	r3, [r5, #12]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d907      	bls.n	800f3ec <_fwalk_reent+0x3a>
 800f3dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	d003      	beq.n	800f3ec <_fwalk_reent+0x3a>
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	47c0      	blx	r8
 800f3ea:	4307      	orrs	r7, r0
 800f3ec:	3568      	adds	r5, #104	; 0x68
 800f3ee:	e7e9      	b.n	800f3c4 <_fwalk_reent+0x12>

0800f3f0 <_localeconv_r>:
 800f3f0:	4800      	ldr	r0, [pc, #0]	; (800f3f4 <_localeconv_r+0x4>)
 800f3f2:	4770      	bx	lr
 800f3f4:	20000168 	.word	0x20000168

0800f3f8 <__retarget_lock_init_recursive>:
 800f3f8:	4770      	bx	lr

0800f3fa <__retarget_lock_acquire_recursive>:
 800f3fa:	4770      	bx	lr

0800f3fc <__retarget_lock_release_recursive>:
 800f3fc:	4770      	bx	lr

0800f3fe <__swhatbuf_r>:
 800f3fe:	b570      	push	{r4, r5, r6, lr}
 800f400:	460e      	mov	r6, r1
 800f402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f406:	2900      	cmp	r1, #0
 800f408:	b096      	sub	sp, #88	; 0x58
 800f40a:	4614      	mov	r4, r2
 800f40c:	461d      	mov	r5, r3
 800f40e:	da08      	bge.n	800f422 <__swhatbuf_r+0x24>
 800f410:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	602a      	str	r2, [r5, #0]
 800f418:	061a      	lsls	r2, r3, #24
 800f41a:	d410      	bmi.n	800f43e <__swhatbuf_r+0x40>
 800f41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f420:	e00e      	b.n	800f440 <__swhatbuf_r+0x42>
 800f422:	466a      	mov	r2, sp
 800f424:	f001 fdf2 	bl	801100c <_fstat_r>
 800f428:	2800      	cmp	r0, #0
 800f42a:	dbf1      	blt.n	800f410 <__swhatbuf_r+0x12>
 800f42c:	9a01      	ldr	r2, [sp, #4]
 800f42e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f432:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f436:	425a      	negs	r2, r3
 800f438:	415a      	adcs	r2, r3
 800f43a:	602a      	str	r2, [r5, #0]
 800f43c:	e7ee      	b.n	800f41c <__swhatbuf_r+0x1e>
 800f43e:	2340      	movs	r3, #64	; 0x40
 800f440:	2000      	movs	r0, #0
 800f442:	6023      	str	r3, [r4, #0]
 800f444:	b016      	add	sp, #88	; 0x58
 800f446:	bd70      	pop	{r4, r5, r6, pc}

0800f448 <__smakebuf_r>:
 800f448:	898b      	ldrh	r3, [r1, #12]
 800f44a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f44c:	079d      	lsls	r5, r3, #30
 800f44e:	4606      	mov	r6, r0
 800f450:	460c      	mov	r4, r1
 800f452:	d507      	bpl.n	800f464 <__smakebuf_r+0x1c>
 800f454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f458:	6023      	str	r3, [r4, #0]
 800f45a:	6123      	str	r3, [r4, #16]
 800f45c:	2301      	movs	r3, #1
 800f45e:	6163      	str	r3, [r4, #20]
 800f460:	b002      	add	sp, #8
 800f462:	bd70      	pop	{r4, r5, r6, pc}
 800f464:	ab01      	add	r3, sp, #4
 800f466:	466a      	mov	r2, sp
 800f468:	f7ff ffc9 	bl	800f3fe <__swhatbuf_r>
 800f46c:	9900      	ldr	r1, [sp, #0]
 800f46e:	4605      	mov	r5, r0
 800f470:	4630      	mov	r0, r6
 800f472:	f000 fc45 	bl	800fd00 <_malloc_r>
 800f476:	b948      	cbnz	r0, 800f48c <__smakebuf_r+0x44>
 800f478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f47c:	059a      	lsls	r2, r3, #22
 800f47e:	d4ef      	bmi.n	800f460 <__smakebuf_r+0x18>
 800f480:	f023 0303 	bic.w	r3, r3, #3
 800f484:	f043 0302 	orr.w	r3, r3, #2
 800f488:	81a3      	strh	r3, [r4, #12]
 800f48a:	e7e3      	b.n	800f454 <__smakebuf_r+0xc>
 800f48c:	4b0d      	ldr	r3, [pc, #52]	; (800f4c4 <__smakebuf_r+0x7c>)
 800f48e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f490:	89a3      	ldrh	r3, [r4, #12]
 800f492:	6020      	str	r0, [r4, #0]
 800f494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	9b00      	ldr	r3, [sp, #0]
 800f49c:	6163      	str	r3, [r4, #20]
 800f49e:	9b01      	ldr	r3, [sp, #4]
 800f4a0:	6120      	str	r0, [r4, #16]
 800f4a2:	b15b      	cbz	r3, 800f4bc <__smakebuf_r+0x74>
 800f4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f001 fdc1 	bl	8011030 <_isatty_r>
 800f4ae:	b128      	cbz	r0, 800f4bc <__smakebuf_r+0x74>
 800f4b0:	89a3      	ldrh	r3, [r4, #12]
 800f4b2:	f023 0303 	bic.w	r3, r3, #3
 800f4b6:	f043 0301 	orr.w	r3, r3, #1
 800f4ba:	81a3      	strh	r3, [r4, #12]
 800f4bc:	89a0      	ldrh	r0, [r4, #12]
 800f4be:	4305      	orrs	r5, r0
 800f4c0:	81a5      	strh	r5, [r4, #12]
 800f4c2:	e7cd      	b.n	800f460 <__smakebuf_r+0x18>
 800f4c4:	0800f215 	.word	0x0800f215

0800f4c8 <malloc>:
 800f4c8:	4b02      	ldr	r3, [pc, #8]	; (800f4d4 <malloc+0xc>)
 800f4ca:	4601      	mov	r1, r0
 800f4cc:	6818      	ldr	r0, [r3, #0]
 800f4ce:	f000 bc17 	b.w	800fd00 <_malloc_r>
 800f4d2:	bf00      	nop
 800f4d4:	20000014 	.word	0x20000014

0800f4d8 <memcpy>:
 800f4d8:	440a      	add	r2, r1
 800f4da:	4291      	cmp	r1, r2
 800f4dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4e0:	d100      	bne.n	800f4e4 <memcpy+0xc>
 800f4e2:	4770      	bx	lr
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4ee:	4291      	cmp	r1, r2
 800f4f0:	d1f9      	bne.n	800f4e6 <memcpy+0xe>
 800f4f2:	bd10      	pop	{r4, pc}

0800f4f4 <_Balloc>:
 800f4f4:	b570      	push	{r4, r5, r6, lr}
 800f4f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	460d      	mov	r5, r1
 800f4fc:	b976      	cbnz	r6, 800f51c <_Balloc+0x28>
 800f4fe:	2010      	movs	r0, #16
 800f500:	f7ff ffe2 	bl	800f4c8 <malloc>
 800f504:	4602      	mov	r2, r0
 800f506:	6260      	str	r0, [r4, #36]	; 0x24
 800f508:	b920      	cbnz	r0, 800f514 <_Balloc+0x20>
 800f50a:	4b18      	ldr	r3, [pc, #96]	; (800f56c <_Balloc+0x78>)
 800f50c:	4818      	ldr	r0, [pc, #96]	; (800f570 <_Balloc+0x7c>)
 800f50e:	2166      	movs	r1, #102	; 0x66
 800f510:	f001 fd3c 	bl	8010f8c <__assert_func>
 800f514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f518:	6006      	str	r6, [r0, #0]
 800f51a:	60c6      	str	r6, [r0, #12]
 800f51c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f51e:	68f3      	ldr	r3, [r6, #12]
 800f520:	b183      	cbz	r3, 800f544 <_Balloc+0x50>
 800f522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f52a:	b9b8      	cbnz	r0, 800f55c <_Balloc+0x68>
 800f52c:	2101      	movs	r1, #1
 800f52e:	fa01 f605 	lsl.w	r6, r1, r5
 800f532:	1d72      	adds	r2, r6, #5
 800f534:	0092      	lsls	r2, r2, #2
 800f536:	4620      	mov	r0, r4
 800f538:	f000 fb60 	bl	800fbfc <_calloc_r>
 800f53c:	b160      	cbz	r0, 800f558 <_Balloc+0x64>
 800f53e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f542:	e00e      	b.n	800f562 <_Balloc+0x6e>
 800f544:	2221      	movs	r2, #33	; 0x21
 800f546:	2104      	movs	r1, #4
 800f548:	4620      	mov	r0, r4
 800f54a:	f000 fb57 	bl	800fbfc <_calloc_r>
 800f54e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f550:	60f0      	str	r0, [r6, #12]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1e4      	bne.n	800f522 <_Balloc+0x2e>
 800f558:	2000      	movs	r0, #0
 800f55a:	bd70      	pop	{r4, r5, r6, pc}
 800f55c:	6802      	ldr	r2, [r0, #0]
 800f55e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f562:	2300      	movs	r3, #0
 800f564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f568:	e7f7      	b.n	800f55a <_Balloc+0x66>
 800f56a:	bf00      	nop
 800f56c:	08013f37 	.word	0x08013f37
 800f570:	0801401c 	.word	0x0801401c

0800f574 <_Bfree>:
 800f574:	b570      	push	{r4, r5, r6, lr}
 800f576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f578:	4605      	mov	r5, r0
 800f57a:	460c      	mov	r4, r1
 800f57c:	b976      	cbnz	r6, 800f59c <_Bfree+0x28>
 800f57e:	2010      	movs	r0, #16
 800f580:	f7ff ffa2 	bl	800f4c8 <malloc>
 800f584:	4602      	mov	r2, r0
 800f586:	6268      	str	r0, [r5, #36]	; 0x24
 800f588:	b920      	cbnz	r0, 800f594 <_Bfree+0x20>
 800f58a:	4b09      	ldr	r3, [pc, #36]	; (800f5b0 <_Bfree+0x3c>)
 800f58c:	4809      	ldr	r0, [pc, #36]	; (800f5b4 <_Bfree+0x40>)
 800f58e:	218a      	movs	r1, #138	; 0x8a
 800f590:	f001 fcfc 	bl	8010f8c <__assert_func>
 800f594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f598:	6006      	str	r6, [r0, #0]
 800f59a:	60c6      	str	r6, [r0, #12]
 800f59c:	b13c      	cbz	r4, 800f5ae <_Bfree+0x3a>
 800f59e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f5a0:	6862      	ldr	r2, [r4, #4]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5a8:	6021      	str	r1, [r4, #0]
 800f5aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5ae:	bd70      	pop	{r4, r5, r6, pc}
 800f5b0:	08013f37 	.word	0x08013f37
 800f5b4:	0801401c 	.word	0x0801401c

0800f5b8 <__multadd>:
 800f5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5bc:	690d      	ldr	r5, [r1, #16]
 800f5be:	4607      	mov	r7, r0
 800f5c0:	460c      	mov	r4, r1
 800f5c2:	461e      	mov	r6, r3
 800f5c4:	f101 0c14 	add.w	ip, r1, #20
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	f8dc 3000 	ldr.w	r3, [ip]
 800f5ce:	b299      	uxth	r1, r3
 800f5d0:	fb02 6101 	mla	r1, r2, r1, r6
 800f5d4:	0c1e      	lsrs	r6, r3, #16
 800f5d6:	0c0b      	lsrs	r3, r1, #16
 800f5d8:	fb02 3306 	mla	r3, r2, r6, r3
 800f5dc:	b289      	uxth	r1, r1
 800f5de:	3001      	adds	r0, #1
 800f5e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5e4:	4285      	cmp	r5, r0
 800f5e6:	f84c 1b04 	str.w	r1, [ip], #4
 800f5ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5ee:	dcec      	bgt.n	800f5ca <__multadd+0x12>
 800f5f0:	b30e      	cbz	r6, 800f636 <__multadd+0x7e>
 800f5f2:	68a3      	ldr	r3, [r4, #8]
 800f5f4:	42ab      	cmp	r3, r5
 800f5f6:	dc19      	bgt.n	800f62c <__multadd+0x74>
 800f5f8:	6861      	ldr	r1, [r4, #4]
 800f5fa:	4638      	mov	r0, r7
 800f5fc:	3101      	adds	r1, #1
 800f5fe:	f7ff ff79 	bl	800f4f4 <_Balloc>
 800f602:	4680      	mov	r8, r0
 800f604:	b928      	cbnz	r0, 800f612 <__multadd+0x5a>
 800f606:	4602      	mov	r2, r0
 800f608:	4b0c      	ldr	r3, [pc, #48]	; (800f63c <__multadd+0x84>)
 800f60a:	480d      	ldr	r0, [pc, #52]	; (800f640 <__multadd+0x88>)
 800f60c:	21b5      	movs	r1, #181	; 0xb5
 800f60e:	f001 fcbd 	bl	8010f8c <__assert_func>
 800f612:	6922      	ldr	r2, [r4, #16]
 800f614:	3202      	adds	r2, #2
 800f616:	f104 010c 	add.w	r1, r4, #12
 800f61a:	0092      	lsls	r2, r2, #2
 800f61c:	300c      	adds	r0, #12
 800f61e:	f7ff ff5b 	bl	800f4d8 <memcpy>
 800f622:	4621      	mov	r1, r4
 800f624:	4638      	mov	r0, r7
 800f626:	f7ff ffa5 	bl	800f574 <_Bfree>
 800f62a:	4644      	mov	r4, r8
 800f62c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f630:	3501      	adds	r5, #1
 800f632:	615e      	str	r6, [r3, #20]
 800f634:	6125      	str	r5, [r4, #16]
 800f636:	4620      	mov	r0, r4
 800f638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63c:	08013fa9 	.word	0x08013fa9
 800f640:	0801401c 	.word	0x0801401c

0800f644 <__hi0bits>:
 800f644:	0c03      	lsrs	r3, r0, #16
 800f646:	041b      	lsls	r3, r3, #16
 800f648:	b9d3      	cbnz	r3, 800f680 <__hi0bits+0x3c>
 800f64a:	0400      	lsls	r0, r0, #16
 800f64c:	2310      	movs	r3, #16
 800f64e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f652:	bf04      	itt	eq
 800f654:	0200      	lsleq	r0, r0, #8
 800f656:	3308      	addeq	r3, #8
 800f658:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f65c:	bf04      	itt	eq
 800f65e:	0100      	lsleq	r0, r0, #4
 800f660:	3304      	addeq	r3, #4
 800f662:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f666:	bf04      	itt	eq
 800f668:	0080      	lsleq	r0, r0, #2
 800f66a:	3302      	addeq	r3, #2
 800f66c:	2800      	cmp	r0, #0
 800f66e:	db05      	blt.n	800f67c <__hi0bits+0x38>
 800f670:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f674:	f103 0301 	add.w	r3, r3, #1
 800f678:	bf08      	it	eq
 800f67a:	2320      	moveq	r3, #32
 800f67c:	4618      	mov	r0, r3
 800f67e:	4770      	bx	lr
 800f680:	2300      	movs	r3, #0
 800f682:	e7e4      	b.n	800f64e <__hi0bits+0xa>

0800f684 <__lo0bits>:
 800f684:	6803      	ldr	r3, [r0, #0]
 800f686:	f013 0207 	ands.w	r2, r3, #7
 800f68a:	4601      	mov	r1, r0
 800f68c:	d00b      	beq.n	800f6a6 <__lo0bits+0x22>
 800f68e:	07da      	lsls	r2, r3, #31
 800f690:	d423      	bmi.n	800f6da <__lo0bits+0x56>
 800f692:	0798      	lsls	r0, r3, #30
 800f694:	bf49      	itett	mi
 800f696:	085b      	lsrmi	r3, r3, #1
 800f698:	089b      	lsrpl	r3, r3, #2
 800f69a:	2001      	movmi	r0, #1
 800f69c:	600b      	strmi	r3, [r1, #0]
 800f69e:	bf5c      	itt	pl
 800f6a0:	600b      	strpl	r3, [r1, #0]
 800f6a2:	2002      	movpl	r0, #2
 800f6a4:	4770      	bx	lr
 800f6a6:	b298      	uxth	r0, r3
 800f6a8:	b9a8      	cbnz	r0, 800f6d6 <__lo0bits+0x52>
 800f6aa:	0c1b      	lsrs	r3, r3, #16
 800f6ac:	2010      	movs	r0, #16
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	b90a      	cbnz	r2, 800f6b6 <__lo0bits+0x32>
 800f6b2:	3008      	adds	r0, #8
 800f6b4:	0a1b      	lsrs	r3, r3, #8
 800f6b6:	071a      	lsls	r2, r3, #28
 800f6b8:	bf04      	itt	eq
 800f6ba:	091b      	lsreq	r3, r3, #4
 800f6bc:	3004      	addeq	r0, #4
 800f6be:	079a      	lsls	r2, r3, #30
 800f6c0:	bf04      	itt	eq
 800f6c2:	089b      	lsreq	r3, r3, #2
 800f6c4:	3002      	addeq	r0, #2
 800f6c6:	07da      	lsls	r2, r3, #31
 800f6c8:	d403      	bmi.n	800f6d2 <__lo0bits+0x4e>
 800f6ca:	085b      	lsrs	r3, r3, #1
 800f6cc:	f100 0001 	add.w	r0, r0, #1
 800f6d0:	d005      	beq.n	800f6de <__lo0bits+0x5a>
 800f6d2:	600b      	str	r3, [r1, #0]
 800f6d4:	4770      	bx	lr
 800f6d6:	4610      	mov	r0, r2
 800f6d8:	e7e9      	b.n	800f6ae <__lo0bits+0x2a>
 800f6da:	2000      	movs	r0, #0
 800f6dc:	4770      	bx	lr
 800f6de:	2020      	movs	r0, #32
 800f6e0:	4770      	bx	lr
	...

0800f6e4 <__i2b>:
 800f6e4:	b510      	push	{r4, lr}
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	2101      	movs	r1, #1
 800f6ea:	f7ff ff03 	bl	800f4f4 <_Balloc>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	b928      	cbnz	r0, 800f6fe <__i2b+0x1a>
 800f6f2:	4b05      	ldr	r3, [pc, #20]	; (800f708 <__i2b+0x24>)
 800f6f4:	4805      	ldr	r0, [pc, #20]	; (800f70c <__i2b+0x28>)
 800f6f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f6fa:	f001 fc47 	bl	8010f8c <__assert_func>
 800f6fe:	2301      	movs	r3, #1
 800f700:	6144      	str	r4, [r0, #20]
 800f702:	6103      	str	r3, [r0, #16]
 800f704:	bd10      	pop	{r4, pc}
 800f706:	bf00      	nop
 800f708:	08013fa9 	.word	0x08013fa9
 800f70c:	0801401c 	.word	0x0801401c

0800f710 <__multiply>:
 800f710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f714:	4691      	mov	r9, r2
 800f716:	690a      	ldr	r2, [r1, #16]
 800f718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	bfb8      	it	lt
 800f720:	460b      	movlt	r3, r1
 800f722:	460c      	mov	r4, r1
 800f724:	bfbc      	itt	lt
 800f726:	464c      	movlt	r4, r9
 800f728:	4699      	movlt	r9, r3
 800f72a:	6927      	ldr	r7, [r4, #16]
 800f72c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f730:	68a3      	ldr	r3, [r4, #8]
 800f732:	6861      	ldr	r1, [r4, #4]
 800f734:	eb07 060a 	add.w	r6, r7, sl
 800f738:	42b3      	cmp	r3, r6
 800f73a:	b085      	sub	sp, #20
 800f73c:	bfb8      	it	lt
 800f73e:	3101      	addlt	r1, #1
 800f740:	f7ff fed8 	bl	800f4f4 <_Balloc>
 800f744:	b930      	cbnz	r0, 800f754 <__multiply+0x44>
 800f746:	4602      	mov	r2, r0
 800f748:	4b44      	ldr	r3, [pc, #272]	; (800f85c <__multiply+0x14c>)
 800f74a:	4845      	ldr	r0, [pc, #276]	; (800f860 <__multiply+0x150>)
 800f74c:	f240 115d 	movw	r1, #349	; 0x15d
 800f750:	f001 fc1c 	bl	8010f8c <__assert_func>
 800f754:	f100 0514 	add.w	r5, r0, #20
 800f758:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f75c:	462b      	mov	r3, r5
 800f75e:	2200      	movs	r2, #0
 800f760:	4543      	cmp	r3, r8
 800f762:	d321      	bcc.n	800f7a8 <__multiply+0x98>
 800f764:	f104 0314 	add.w	r3, r4, #20
 800f768:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f76c:	f109 0314 	add.w	r3, r9, #20
 800f770:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f774:	9202      	str	r2, [sp, #8]
 800f776:	1b3a      	subs	r2, r7, r4
 800f778:	3a15      	subs	r2, #21
 800f77a:	f022 0203 	bic.w	r2, r2, #3
 800f77e:	3204      	adds	r2, #4
 800f780:	f104 0115 	add.w	r1, r4, #21
 800f784:	428f      	cmp	r7, r1
 800f786:	bf38      	it	cc
 800f788:	2204      	movcc	r2, #4
 800f78a:	9201      	str	r2, [sp, #4]
 800f78c:	9a02      	ldr	r2, [sp, #8]
 800f78e:	9303      	str	r3, [sp, #12]
 800f790:	429a      	cmp	r2, r3
 800f792:	d80c      	bhi.n	800f7ae <__multiply+0x9e>
 800f794:	2e00      	cmp	r6, #0
 800f796:	dd03      	ble.n	800f7a0 <__multiply+0x90>
 800f798:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d05a      	beq.n	800f856 <__multiply+0x146>
 800f7a0:	6106      	str	r6, [r0, #16]
 800f7a2:	b005      	add	sp, #20
 800f7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a8:	f843 2b04 	str.w	r2, [r3], #4
 800f7ac:	e7d8      	b.n	800f760 <__multiply+0x50>
 800f7ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800f7b2:	f1ba 0f00 	cmp.w	sl, #0
 800f7b6:	d024      	beq.n	800f802 <__multiply+0xf2>
 800f7b8:	f104 0e14 	add.w	lr, r4, #20
 800f7bc:	46a9      	mov	r9, r5
 800f7be:	f04f 0c00 	mov.w	ip, #0
 800f7c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f7c6:	f8d9 1000 	ldr.w	r1, [r9]
 800f7ca:	fa1f fb82 	uxth.w	fp, r2
 800f7ce:	b289      	uxth	r1, r1
 800f7d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f7d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f7d8:	f8d9 2000 	ldr.w	r2, [r9]
 800f7dc:	4461      	add	r1, ip
 800f7de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f7e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f7e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f7ea:	b289      	uxth	r1, r1
 800f7ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f7f0:	4577      	cmp	r7, lr
 800f7f2:	f849 1b04 	str.w	r1, [r9], #4
 800f7f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f7fa:	d8e2      	bhi.n	800f7c2 <__multiply+0xb2>
 800f7fc:	9a01      	ldr	r2, [sp, #4]
 800f7fe:	f845 c002 	str.w	ip, [r5, r2]
 800f802:	9a03      	ldr	r2, [sp, #12]
 800f804:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f808:	3304      	adds	r3, #4
 800f80a:	f1b9 0f00 	cmp.w	r9, #0
 800f80e:	d020      	beq.n	800f852 <__multiply+0x142>
 800f810:	6829      	ldr	r1, [r5, #0]
 800f812:	f104 0c14 	add.w	ip, r4, #20
 800f816:	46ae      	mov	lr, r5
 800f818:	f04f 0a00 	mov.w	sl, #0
 800f81c:	f8bc b000 	ldrh.w	fp, [ip]
 800f820:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f824:	fb09 220b 	mla	r2, r9, fp, r2
 800f828:	4492      	add	sl, r2
 800f82a:	b289      	uxth	r1, r1
 800f82c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f830:	f84e 1b04 	str.w	r1, [lr], #4
 800f834:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f838:	f8be 1000 	ldrh.w	r1, [lr]
 800f83c:	0c12      	lsrs	r2, r2, #16
 800f83e:	fb09 1102 	mla	r1, r9, r2, r1
 800f842:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f846:	4567      	cmp	r7, ip
 800f848:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f84c:	d8e6      	bhi.n	800f81c <__multiply+0x10c>
 800f84e:	9a01      	ldr	r2, [sp, #4]
 800f850:	50a9      	str	r1, [r5, r2]
 800f852:	3504      	adds	r5, #4
 800f854:	e79a      	b.n	800f78c <__multiply+0x7c>
 800f856:	3e01      	subs	r6, #1
 800f858:	e79c      	b.n	800f794 <__multiply+0x84>
 800f85a:	bf00      	nop
 800f85c:	08013fa9 	.word	0x08013fa9
 800f860:	0801401c 	.word	0x0801401c

0800f864 <__pow5mult>:
 800f864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f868:	4615      	mov	r5, r2
 800f86a:	f012 0203 	ands.w	r2, r2, #3
 800f86e:	4606      	mov	r6, r0
 800f870:	460f      	mov	r7, r1
 800f872:	d007      	beq.n	800f884 <__pow5mult+0x20>
 800f874:	4c25      	ldr	r4, [pc, #148]	; (800f90c <__pow5mult+0xa8>)
 800f876:	3a01      	subs	r2, #1
 800f878:	2300      	movs	r3, #0
 800f87a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f87e:	f7ff fe9b 	bl	800f5b8 <__multadd>
 800f882:	4607      	mov	r7, r0
 800f884:	10ad      	asrs	r5, r5, #2
 800f886:	d03d      	beq.n	800f904 <__pow5mult+0xa0>
 800f888:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f88a:	b97c      	cbnz	r4, 800f8ac <__pow5mult+0x48>
 800f88c:	2010      	movs	r0, #16
 800f88e:	f7ff fe1b 	bl	800f4c8 <malloc>
 800f892:	4602      	mov	r2, r0
 800f894:	6270      	str	r0, [r6, #36]	; 0x24
 800f896:	b928      	cbnz	r0, 800f8a4 <__pow5mult+0x40>
 800f898:	4b1d      	ldr	r3, [pc, #116]	; (800f910 <__pow5mult+0xac>)
 800f89a:	481e      	ldr	r0, [pc, #120]	; (800f914 <__pow5mult+0xb0>)
 800f89c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f8a0:	f001 fb74 	bl	8010f8c <__assert_func>
 800f8a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8a8:	6004      	str	r4, [r0, #0]
 800f8aa:	60c4      	str	r4, [r0, #12]
 800f8ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8b4:	b94c      	cbnz	r4, 800f8ca <__pow5mult+0x66>
 800f8b6:	f240 2171 	movw	r1, #625	; 0x271
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	f7ff ff12 	bl	800f6e4 <__i2b>
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	6003      	str	r3, [r0, #0]
 800f8ca:	f04f 0900 	mov.w	r9, #0
 800f8ce:	07eb      	lsls	r3, r5, #31
 800f8d0:	d50a      	bpl.n	800f8e8 <__pow5mult+0x84>
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	4622      	mov	r2, r4
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	f7ff ff1a 	bl	800f710 <__multiply>
 800f8dc:	4639      	mov	r1, r7
 800f8de:	4680      	mov	r8, r0
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	f7ff fe47 	bl	800f574 <_Bfree>
 800f8e6:	4647      	mov	r7, r8
 800f8e8:	106d      	asrs	r5, r5, #1
 800f8ea:	d00b      	beq.n	800f904 <__pow5mult+0xa0>
 800f8ec:	6820      	ldr	r0, [r4, #0]
 800f8ee:	b938      	cbnz	r0, 800f900 <__pow5mult+0x9c>
 800f8f0:	4622      	mov	r2, r4
 800f8f2:	4621      	mov	r1, r4
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	f7ff ff0b 	bl	800f710 <__multiply>
 800f8fa:	6020      	str	r0, [r4, #0]
 800f8fc:	f8c0 9000 	str.w	r9, [r0]
 800f900:	4604      	mov	r4, r0
 800f902:	e7e4      	b.n	800f8ce <__pow5mult+0x6a>
 800f904:	4638      	mov	r0, r7
 800f906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f90a:	bf00      	nop
 800f90c:	08014168 	.word	0x08014168
 800f910:	08013f37 	.word	0x08013f37
 800f914:	0801401c 	.word	0x0801401c

0800f918 <__lshift>:
 800f918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f91c:	460c      	mov	r4, r1
 800f91e:	6849      	ldr	r1, [r1, #4]
 800f920:	6923      	ldr	r3, [r4, #16]
 800f922:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	4607      	mov	r7, r0
 800f92a:	4691      	mov	r9, r2
 800f92c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f930:	f108 0601 	add.w	r6, r8, #1
 800f934:	42b3      	cmp	r3, r6
 800f936:	db0b      	blt.n	800f950 <__lshift+0x38>
 800f938:	4638      	mov	r0, r7
 800f93a:	f7ff fddb 	bl	800f4f4 <_Balloc>
 800f93e:	4605      	mov	r5, r0
 800f940:	b948      	cbnz	r0, 800f956 <__lshift+0x3e>
 800f942:	4602      	mov	r2, r0
 800f944:	4b2a      	ldr	r3, [pc, #168]	; (800f9f0 <__lshift+0xd8>)
 800f946:	482b      	ldr	r0, [pc, #172]	; (800f9f4 <__lshift+0xdc>)
 800f948:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f94c:	f001 fb1e 	bl	8010f8c <__assert_func>
 800f950:	3101      	adds	r1, #1
 800f952:	005b      	lsls	r3, r3, #1
 800f954:	e7ee      	b.n	800f934 <__lshift+0x1c>
 800f956:	2300      	movs	r3, #0
 800f958:	f100 0114 	add.w	r1, r0, #20
 800f95c:	f100 0210 	add.w	r2, r0, #16
 800f960:	4618      	mov	r0, r3
 800f962:	4553      	cmp	r3, sl
 800f964:	db37      	blt.n	800f9d6 <__lshift+0xbe>
 800f966:	6920      	ldr	r0, [r4, #16]
 800f968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f96c:	f104 0314 	add.w	r3, r4, #20
 800f970:	f019 091f 	ands.w	r9, r9, #31
 800f974:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f978:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f97c:	d02f      	beq.n	800f9de <__lshift+0xc6>
 800f97e:	f1c9 0e20 	rsb	lr, r9, #32
 800f982:	468a      	mov	sl, r1
 800f984:	f04f 0c00 	mov.w	ip, #0
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	fa02 f209 	lsl.w	r2, r2, r9
 800f98e:	ea42 020c 	orr.w	r2, r2, ip
 800f992:	f84a 2b04 	str.w	r2, [sl], #4
 800f996:	f853 2b04 	ldr.w	r2, [r3], #4
 800f99a:	4298      	cmp	r0, r3
 800f99c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f9a0:	d8f2      	bhi.n	800f988 <__lshift+0x70>
 800f9a2:	1b03      	subs	r3, r0, r4
 800f9a4:	3b15      	subs	r3, #21
 800f9a6:	f023 0303 	bic.w	r3, r3, #3
 800f9aa:	3304      	adds	r3, #4
 800f9ac:	f104 0215 	add.w	r2, r4, #21
 800f9b0:	4290      	cmp	r0, r2
 800f9b2:	bf38      	it	cc
 800f9b4:	2304      	movcc	r3, #4
 800f9b6:	f841 c003 	str.w	ip, [r1, r3]
 800f9ba:	f1bc 0f00 	cmp.w	ip, #0
 800f9be:	d001      	beq.n	800f9c4 <__lshift+0xac>
 800f9c0:	f108 0602 	add.w	r6, r8, #2
 800f9c4:	3e01      	subs	r6, #1
 800f9c6:	4638      	mov	r0, r7
 800f9c8:	612e      	str	r6, [r5, #16]
 800f9ca:	4621      	mov	r1, r4
 800f9cc:	f7ff fdd2 	bl	800f574 <_Bfree>
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f9da:	3301      	adds	r3, #1
 800f9dc:	e7c1      	b.n	800f962 <__lshift+0x4a>
 800f9de:	3904      	subs	r1, #4
 800f9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9e8:	4298      	cmp	r0, r3
 800f9ea:	d8f9      	bhi.n	800f9e0 <__lshift+0xc8>
 800f9ec:	e7ea      	b.n	800f9c4 <__lshift+0xac>
 800f9ee:	bf00      	nop
 800f9f0:	08013fa9 	.word	0x08013fa9
 800f9f4:	0801401c 	.word	0x0801401c

0800f9f8 <__mcmp>:
 800f9f8:	b530      	push	{r4, r5, lr}
 800f9fa:	6902      	ldr	r2, [r0, #16]
 800f9fc:	690c      	ldr	r4, [r1, #16]
 800f9fe:	1b12      	subs	r2, r2, r4
 800fa00:	d10e      	bne.n	800fa20 <__mcmp+0x28>
 800fa02:	f100 0314 	add.w	r3, r0, #20
 800fa06:	3114      	adds	r1, #20
 800fa08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa18:	42a5      	cmp	r5, r4
 800fa1a:	d003      	beq.n	800fa24 <__mcmp+0x2c>
 800fa1c:	d305      	bcc.n	800fa2a <__mcmp+0x32>
 800fa1e:	2201      	movs	r2, #1
 800fa20:	4610      	mov	r0, r2
 800fa22:	bd30      	pop	{r4, r5, pc}
 800fa24:	4283      	cmp	r3, r0
 800fa26:	d3f3      	bcc.n	800fa10 <__mcmp+0x18>
 800fa28:	e7fa      	b.n	800fa20 <__mcmp+0x28>
 800fa2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa2e:	e7f7      	b.n	800fa20 <__mcmp+0x28>

0800fa30 <__mdiff>:
 800fa30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa34:	460c      	mov	r4, r1
 800fa36:	4606      	mov	r6, r0
 800fa38:	4611      	mov	r1, r2
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	4690      	mov	r8, r2
 800fa3e:	f7ff ffdb 	bl	800f9f8 <__mcmp>
 800fa42:	1e05      	subs	r5, r0, #0
 800fa44:	d110      	bne.n	800fa68 <__mdiff+0x38>
 800fa46:	4629      	mov	r1, r5
 800fa48:	4630      	mov	r0, r6
 800fa4a:	f7ff fd53 	bl	800f4f4 <_Balloc>
 800fa4e:	b930      	cbnz	r0, 800fa5e <__mdiff+0x2e>
 800fa50:	4b3a      	ldr	r3, [pc, #232]	; (800fb3c <__mdiff+0x10c>)
 800fa52:	4602      	mov	r2, r0
 800fa54:	f240 2132 	movw	r1, #562	; 0x232
 800fa58:	4839      	ldr	r0, [pc, #228]	; (800fb40 <__mdiff+0x110>)
 800fa5a:	f001 fa97 	bl	8010f8c <__assert_func>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa68:	bfa4      	itt	ge
 800fa6a:	4643      	movge	r3, r8
 800fa6c:	46a0      	movge	r8, r4
 800fa6e:	4630      	mov	r0, r6
 800fa70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa74:	bfa6      	itte	ge
 800fa76:	461c      	movge	r4, r3
 800fa78:	2500      	movge	r5, #0
 800fa7a:	2501      	movlt	r5, #1
 800fa7c:	f7ff fd3a 	bl	800f4f4 <_Balloc>
 800fa80:	b920      	cbnz	r0, 800fa8c <__mdiff+0x5c>
 800fa82:	4b2e      	ldr	r3, [pc, #184]	; (800fb3c <__mdiff+0x10c>)
 800fa84:	4602      	mov	r2, r0
 800fa86:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa8a:	e7e5      	b.n	800fa58 <__mdiff+0x28>
 800fa8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa90:	6926      	ldr	r6, [r4, #16]
 800fa92:	60c5      	str	r5, [r0, #12]
 800fa94:	f104 0914 	add.w	r9, r4, #20
 800fa98:	f108 0514 	add.w	r5, r8, #20
 800fa9c:	f100 0e14 	add.w	lr, r0, #20
 800faa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800faa4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800faa8:	f108 0210 	add.w	r2, r8, #16
 800faac:	46f2      	mov	sl, lr
 800faae:	2100      	movs	r1, #0
 800fab0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fab4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fab8:	fa1f f883 	uxth.w	r8, r3
 800fabc:	fa11 f18b 	uxtah	r1, r1, fp
 800fac0:	0c1b      	lsrs	r3, r3, #16
 800fac2:	eba1 0808 	sub.w	r8, r1, r8
 800fac6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800faca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800face:	fa1f f888 	uxth.w	r8, r8
 800fad2:	1419      	asrs	r1, r3, #16
 800fad4:	454e      	cmp	r6, r9
 800fad6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fada:	f84a 3b04 	str.w	r3, [sl], #4
 800fade:	d8e7      	bhi.n	800fab0 <__mdiff+0x80>
 800fae0:	1b33      	subs	r3, r6, r4
 800fae2:	3b15      	subs	r3, #21
 800fae4:	f023 0303 	bic.w	r3, r3, #3
 800fae8:	3304      	adds	r3, #4
 800faea:	3415      	adds	r4, #21
 800faec:	42a6      	cmp	r6, r4
 800faee:	bf38      	it	cc
 800faf0:	2304      	movcc	r3, #4
 800faf2:	441d      	add	r5, r3
 800faf4:	4473      	add	r3, lr
 800faf6:	469e      	mov	lr, r3
 800faf8:	462e      	mov	r6, r5
 800fafa:	4566      	cmp	r6, ip
 800fafc:	d30e      	bcc.n	800fb1c <__mdiff+0xec>
 800fafe:	f10c 0203 	add.w	r2, ip, #3
 800fb02:	1b52      	subs	r2, r2, r5
 800fb04:	f022 0203 	bic.w	r2, r2, #3
 800fb08:	3d03      	subs	r5, #3
 800fb0a:	45ac      	cmp	ip, r5
 800fb0c:	bf38      	it	cc
 800fb0e:	2200      	movcc	r2, #0
 800fb10:	441a      	add	r2, r3
 800fb12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb16:	b17b      	cbz	r3, 800fb38 <__mdiff+0x108>
 800fb18:	6107      	str	r7, [r0, #16]
 800fb1a:	e7a3      	b.n	800fa64 <__mdiff+0x34>
 800fb1c:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb20:	fa11 f288 	uxtah	r2, r1, r8
 800fb24:	1414      	asrs	r4, r2, #16
 800fb26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fb2a:	b292      	uxth	r2, r2
 800fb2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fb30:	f84e 2b04 	str.w	r2, [lr], #4
 800fb34:	1421      	asrs	r1, r4, #16
 800fb36:	e7e0      	b.n	800fafa <__mdiff+0xca>
 800fb38:	3f01      	subs	r7, #1
 800fb3a:	e7ea      	b.n	800fb12 <__mdiff+0xe2>
 800fb3c:	08013fa9 	.word	0x08013fa9
 800fb40:	0801401c 	.word	0x0801401c

0800fb44 <__d2b>:
 800fb44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb48:	4689      	mov	r9, r1
 800fb4a:	2101      	movs	r1, #1
 800fb4c:	ec57 6b10 	vmov	r6, r7, d0
 800fb50:	4690      	mov	r8, r2
 800fb52:	f7ff fccf 	bl	800f4f4 <_Balloc>
 800fb56:	4604      	mov	r4, r0
 800fb58:	b930      	cbnz	r0, 800fb68 <__d2b+0x24>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	4b25      	ldr	r3, [pc, #148]	; (800fbf4 <__d2b+0xb0>)
 800fb5e:	4826      	ldr	r0, [pc, #152]	; (800fbf8 <__d2b+0xb4>)
 800fb60:	f240 310a 	movw	r1, #778	; 0x30a
 800fb64:	f001 fa12 	bl	8010f8c <__assert_func>
 800fb68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fb6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb70:	bb35      	cbnz	r5, 800fbc0 <__d2b+0x7c>
 800fb72:	2e00      	cmp	r6, #0
 800fb74:	9301      	str	r3, [sp, #4]
 800fb76:	d028      	beq.n	800fbca <__d2b+0x86>
 800fb78:	4668      	mov	r0, sp
 800fb7a:	9600      	str	r6, [sp, #0]
 800fb7c:	f7ff fd82 	bl	800f684 <__lo0bits>
 800fb80:	9900      	ldr	r1, [sp, #0]
 800fb82:	b300      	cbz	r0, 800fbc6 <__d2b+0x82>
 800fb84:	9a01      	ldr	r2, [sp, #4]
 800fb86:	f1c0 0320 	rsb	r3, r0, #32
 800fb8a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb8e:	430b      	orrs	r3, r1
 800fb90:	40c2      	lsrs	r2, r0
 800fb92:	6163      	str	r3, [r4, #20]
 800fb94:	9201      	str	r2, [sp, #4]
 800fb96:	9b01      	ldr	r3, [sp, #4]
 800fb98:	61a3      	str	r3, [r4, #24]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	bf14      	ite	ne
 800fb9e:	2202      	movne	r2, #2
 800fba0:	2201      	moveq	r2, #1
 800fba2:	6122      	str	r2, [r4, #16]
 800fba4:	b1d5      	cbz	r5, 800fbdc <__d2b+0x98>
 800fba6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fbaa:	4405      	add	r5, r0
 800fbac:	f8c9 5000 	str.w	r5, [r9]
 800fbb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbb4:	f8c8 0000 	str.w	r0, [r8]
 800fbb8:	4620      	mov	r0, r4
 800fbba:	b003      	add	sp, #12
 800fbbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fbc4:	e7d5      	b.n	800fb72 <__d2b+0x2e>
 800fbc6:	6161      	str	r1, [r4, #20]
 800fbc8:	e7e5      	b.n	800fb96 <__d2b+0x52>
 800fbca:	a801      	add	r0, sp, #4
 800fbcc:	f7ff fd5a 	bl	800f684 <__lo0bits>
 800fbd0:	9b01      	ldr	r3, [sp, #4]
 800fbd2:	6163      	str	r3, [r4, #20]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	6122      	str	r2, [r4, #16]
 800fbd8:	3020      	adds	r0, #32
 800fbda:	e7e3      	b.n	800fba4 <__d2b+0x60>
 800fbdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fbe0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fbe4:	f8c9 0000 	str.w	r0, [r9]
 800fbe8:	6918      	ldr	r0, [r3, #16]
 800fbea:	f7ff fd2b 	bl	800f644 <__hi0bits>
 800fbee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fbf2:	e7df      	b.n	800fbb4 <__d2b+0x70>
 800fbf4:	08013fa9 	.word	0x08013fa9
 800fbf8:	0801401c 	.word	0x0801401c

0800fbfc <_calloc_r>:
 800fbfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbfe:	fba1 2402 	umull	r2, r4, r1, r2
 800fc02:	b94c      	cbnz	r4, 800fc18 <_calloc_r+0x1c>
 800fc04:	4611      	mov	r1, r2
 800fc06:	9201      	str	r2, [sp, #4]
 800fc08:	f000 f87a 	bl	800fd00 <_malloc_r>
 800fc0c:	9a01      	ldr	r2, [sp, #4]
 800fc0e:	4605      	mov	r5, r0
 800fc10:	b930      	cbnz	r0, 800fc20 <_calloc_r+0x24>
 800fc12:	4628      	mov	r0, r5
 800fc14:	b003      	add	sp, #12
 800fc16:	bd30      	pop	{r4, r5, pc}
 800fc18:	220c      	movs	r2, #12
 800fc1a:	6002      	str	r2, [r0, #0]
 800fc1c:	2500      	movs	r5, #0
 800fc1e:	e7f8      	b.n	800fc12 <_calloc_r+0x16>
 800fc20:	4621      	mov	r1, r4
 800fc22:	f7fd fd8b 	bl	800d73c <memset>
 800fc26:	e7f4      	b.n	800fc12 <_calloc_r+0x16>

0800fc28 <_free_r>:
 800fc28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc2a:	2900      	cmp	r1, #0
 800fc2c:	d044      	beq.n	800fcb8 <_free_r+0x90>
 800fc2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc32:	9001      	str	r0, [sp, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f1a1 0404 	sub.w	r4, r1, #4
 800fc3a:	bfb8      	it	lt
 800fc3c:	18e4      	addlt	r4, r4, r3
 800fc3e:	f001 fa45 	bl	80110cc <__malloc_lock>
 800fc42:	4a1e      	ldr	r2, [pc, #120]	; (800fcbc <_free_r+0x94>)
 800fc44:	9801      	ldr	r0, [sp, #4]
 800fc46:	6813      	ldr	r3, [r2, #0]
 800fc48:	b933      	cbnz	r3, 800fc58 <_free_r+0x30>
 800fc4a:	6063      	str	r3, [r4, #4]
 800fc4c:	6014      	str	r4, [r2, #0]
 800fc4e:	b003      	add	sp, #12
 800fc50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc54:	f001 ba40 	b.w	80110d8 <__malloc_unlock>
 800fc58:	42a3      	cmp	r3, r4
 800fc5a:	d908      	bls.n	800fc6e <_free_r+0x46>
 800fc5c:	6825      	ldr	r5, [r4, #0]
 800fc5e:	1961      	adds	r1, r4, r5
 800fc60:	428b      	cmp	r3, r1
 800fc62:	bf01      	itttt	eq
 800fc64:	6819      	ldreq	r1, [r3, #0]
 800fc66:	685b      	ldreq	r3, [r3, #4]
 800fc68:	1949      	addeq	r1, r1, r5
 800fc6a:	6021      	streq	r1, [r4, #0]
 800fc6c:	e7ed      	b.n	800fc4a <_free_r+0x22>
 800fc6e:	461a      	mov	r2, r3
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	b10b      	cbz	r3, 800fc78 <_free_r+0x50>
 800fc74:	42a3      	cmp	r3, r4
 800fc76:	d9fa      	bls.n	800fc6e <_free_r+0x46>
 800fc78:	6811      	ldr	r1, [r2, #0]
 800fc7a:	1855      	adds	r5, r2, r1
 800fc7c:	42a5      	cmp	r5, r4
 800fc7e:	d10b      	bne.n	800fc98 <_free_r+0x70>
 800fc80:	6824      	ldr	r4, [r4, #0]
 800fc82:	4421      	add	r1, r4
 800fc84:	1854      	adds	r4, r2, r1
 800fc86:	42a3      	cmp	r3, r4
 800fc88:	6011      	str	r1, [r2, #0]
 800fc8a:	d1e0      	bne.n	800fc4e <_free_r+0x26>
 800fc8c:	681c      	ldr	r4, [r3, #0]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	6053      	str	r3, [r2, #4]
 800fc92:	4421      	add	r1, r4
 800fc94:	6011      	str	r1, [r2, #0]
 800fc96:	e7da      	b.n	800fc4e <_free_r+0x26>
 800fc98:	d902      	bls.n	800fca0 <_free_r+0x78>
 800fc9a:	230c      	movs	r3, #12
 800fc9c:	6003      	str	r3, [r0, #0]
 800fc9e:	e7d6      	b.n	800fc4e <_free_r+0x26>
 800fca0:	6825      	ldr	r5, [r4, #0]
 800fca2:	1961      	adds	r1, r4, r5
 800fca4:	428b      	cmp	r3, r1
 800fca6:	bf04      	itt	eq
 800fca8:	6819      	ldreq	r1, [r3, #0]
 800fcaa:	685b      	ldreq	r3, [r3, #4]
 800fcac:	6063      	str	r3, [r4, #4]
 800fcae:	bf04      	itt	eq
 800fcb0:	1949      	addeq	r1, r1, r5
 800fcb2:	6021      	streq	r1, [r4, #0]
 800fcb4:	6054      	str	r4, [r2, #4]
 800fcb6:	e7ca      	b.n	800fc4e <_free_r+0x26>
 800fcb8:	b003      	add	sp, #12
 800fcba:	bd30      	pop	{r4, r5, pc}
 800fcbc:	2000057c 	.word	0x2000057c

0800fcc0 <sbrk_aligned>:
 800fcc0:	b570      	push	{r4, r5, r6, lr}
 800fcc2:	4e0e      	ldr	r6, [pc, #56]	; (800fcfc <sbrk_aligned+0x3c>)
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	6831      	ldr	r1, [r6, #0]
 800fcc8:	4605      	mov	r5, r0
 800fcca:	b911      	cbnz	r1, 800fcd2 <sbrk_aligned+0x12>
 800fccc:	f000 fef6 	bl	8010abc <_sbrk_r>
 800fcd0:	6030      	str	r0, [r6, #0]
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	f000 fef1 	bl	8010abc <_sbrk_r>
 800fcda:	1c43      	adds	r3, r0, #1
 800fcdc:	d00a      	beq.n	800fcf4 <sbrk_aligned+0x34>
 800fcde:	1cc4      	adds	r4, r0, #3
 800fce0:	f024 0403 	bic.w	r4, r4, #3
 800fce4:	42a0      	cmp	r0, r4
 800fce6:	d007      	beq.n	800fcf8 <sbrk_aligned+0x38>
 800fce8:	1a21      	subs	r1, r4, r0
 800fcea:	4628      	mov	r0, r5
 800fcec:	f000 fee6 	bl	8010abc <_sbrk_r>
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	d101      	bne.n	800fcf8 <sbrk_aligned+0x38>
 800fcf4:	f04f 34ff 	mov.w	r4, #4294967295
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}
 800fcfc:	20000580 	.word	0x20000580

0800fd00 <_malloc_r>:
 800fd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd04:	1ccd      	adds	r5, r1, #3
 800fd06:	f025 0503 	bic.w	r5, r5, #3
 800fd0a:	3508      	adds	r5, #8
 800fd0c:	2d0c      	cmp	r5, #12
 800fd0e:	bf38      	it	cc
 800fd10:	250c      	movcc	r5, #12
 800fd12:	2d00      	cmp	r5, #0
 800fd14:	4607      	mov	r7, r0
 800fd16:	db01      	blt.n	800fd1c <_malloc_r+0x1c>
 800fd18:	42a9      	cmp	r1, r5
 800fd1a:	d905      	bls.n	800fd28 <_malloc_r+0x28>
 800fd1c:	230c      	movs	r3, #12
 800fd1e:	603b      	str	r3, [r7, #0]
 800fd20:	2600      	movs	r6, #0
 800fd22:	4630      	mov	r0, r6
 800fd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd28:	4e2e      	ldr	r6, [pc, #184]	; (800fde4 <_malloc_r+0xe4>)
 800fd2a:	f001 f9cf 	bl	80110cc <__malloc_lock>
 800fd2e:	6833      	ldr	r3, [r6, #0]
 800fd30:	461c      	mov	r4, r3
 800fd32:	bb34      	cbnz	r4, 800fd82 <_malloc_r+0x82>
 800fd34:	4629      	mov	r1, r5
 800fd36:	4638      	mov	r0, r7
 800fd38:	f7ff ffc2 	bl	800fcc0 <sbrk_aligned>
 800fd3c:	1c43      	adds	r3, r0, #1
 800fd3e:	4604      	mov	r4, r0
 800fd40:	d14d      	bne.n	800fdde <_malloc_r+0xde>
 800fd42:	6834      	ldr	r4, [r6, #0]
 800fd44:	4626      	mov	r6, r4
 800fd46:	2e00      	cmp	r6, #0
 800fd48:	d140      	bne.n	800fdcc <_malloc_r+0xcc>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	4631      	mov	r1, r6
 800fd4e:	4638      	mov	r0, r7
 800fd50:	eb04 0803 	add.w	r8, r4, r3
 800fd54:	f000 feb2 	bl	8010abc <_sbrk_r>
 800fd58:	4580      	cmp	r8, r0
 800fd5a:	d13a      	bne.n	800fdd2 <_malloc_r+0xd2>
 800fd5c:	6821      	ldr	r1, [r4, #0]
 800fd5e:	3503      	adds	r5, #3
 800fd60:	1a6d      	subs	r5, r5, r1
 800fd62:	f025 0503 	bic.w	r5, r5, #3
 800fd66:	3508      	adds	r5, #8
 800fd68:	2d0c      	cmp	r5, #12
 800fd6a:	bf38      	it	cc
 800fd6c:	250c      	movcc	r5, #12
 800fd6e:	4629      	mov	r1, r5
 800fd70:	4638      	mov	r0, r7
 800fd72:	f7ff ffa5 	bl	800fcc0 <sbrk_aligned>
 800fd76:	3001      	adds	r0, #1
 800fd78:	d02b      	beq.n	800fdd2 <_malloc_r+0xd2>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	442b      	add	r3, r5
 800fd7e:	6023      	str	r3, [r4, #0]
 800fd80:	e00e      	b.n	800fda0 <_malloc_r+0xa0>
 800fd82:	6822      	ldr	r2, [r4, #0]
 800fd84:	1b52      	subs	r2, r2, r5
 800fd86:	d41e      	bmi.n	800fdc6 <_malloc_r+0xc6>
 800fd88:	2a0b      	cmp	r2, #11
 800fd8a:	d916      	bls.n	800fdba <_malloc_r+0xba>
 800fd8c:	1961      	adds	r1, r4, r5
 800fd8e:	42a3      	cmp	r3, r4
 800fd90:	6025      	str	r5, [r4, #0]
 800fd92:	bf18      	it	ne
 800fd94:	6059      	strne	r1, [r3, #4]
 800fd96:	6863      	ldr	r3, [r4, #4]
 800fd98:	bf08      	it	eq
 800fd9a:	6031      	streq	r1, [r6, #0]
 800fd9c:	5162      	str	r2, [r4, r5]
 800fd9e:	604b      	str	r3, [r1, #4]
 800fda0:	4638      	mov	r0, r7
 800fda2:	f104 060b 	add.w	r6, r4, #11
 800fda6:	f001 f997 	bl	80110d8 <__malloc_unlock>
 800fdaa:	f026 0607 	bic.w	r6, r6, #7
 800fdae:	1d23      	adds	r3, r4, #4
 800fdb0:	1af2      	subs	r2, r6, r3
 800fdb2:	d0b6      	beq.n	800fd22 <_malloc_r+0x22>
 800fdb4:	1b9b      	subs	r3, r3, r6
 800fdb6:	50a3      	str	r3, [r4, r2]
 800fdb8:	e7b3      	b.n	800fd22 <_malloc_r+0x22>
 800fdba:	6862      	ldr	r2, [r4, #4]
 800fdbc:	42a3      	cmp	r3, r4
 800fdbe:	bf0c      	ite	eq
 800fdc0:	6032      	streq	r2, [r6, #0]
 800fdc2:	605a      	strne	r2, [r3, #4]
 800fdc4:	e7ec      	b.n	800fda0 <_malloc_r+0xa0>
 800fdc6:	4623      	mov	r3, r4
 800fdc8:	6864      	ldr	r4, [r4, #4]
 800fdca:	e7b2      	b.n	800fd32 <_malloc_r+0x32>
 800fdcc:	4634      	mov	r4, r6
 800fdce:	6876      	ldr	r6, [r6, #4]
 800fdd0:	e7b9      	b.n	800fd46 <_malloc_r+0x46>
 800fdd2:	230c      	movs	r3, #12
 800fdd4:	603b      	str	r3, [r7, #0]
 800fdd6:	4638      	mov	r0, r7
 800fdd8:	f001 f97e 	bl	80110d8 <__malloc_unlock>
 800fddc:	e7a1      	b.n	800fd22 <_malloc_r+0x22>
 800fdde:	6025      	str	r5, [r4, #0]
 800fde0:	e7de      	b.n	800fda0 <_malloc_r+0xa0>
 800fde2:	bf00      	nop
 800fde4:	2000057c 	.word	0x2000057c

0800fde8 <__ssputs_r>:
 800fde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdec:	688e      	ldr	r6, [r1, #8]
 800fdee:	429e      	cmp	r6, r3
 800fdf0:	4682      	mov	sl, r0
 800fdf2:	460c      	mov	r4, r1
 800fdf4:	4690      	mov	r8, r2
 800fdf6:	461f      	mov	r7, r3
 800fdf8:	d838      	bhi.n	800fe6c <__ssputs_r+0x84>
 800fdfa:	898a      	ldrh	r2, [r1, #12]
 800fdfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe00:	d032      	beq.n	800fe68 <__ssputs_r+0x80>
 800fe02:	6825      	ldr	r5, [r4, #0]
 800fe04:	6909      	ldr	r1, [r1, #16]
 800fe06:	eba5 0901 	sub.w	r9, r5, r1
 800fe0a:	6965      	ldr	r5, [r4, #20]
 800fe0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe14:	3301      	adds	r3, #1
 800fe16:	444b      	add	r3, r9
 800fe18:	106d      	asrs	r5, r5, #1
 800fe1a:	429d      	cmp	r5, r3
 800fe1c:	bf38      	it	cc
 800fe1e:	461d      	movcc	r5, r3
 800fe20:	0553      	lsls	r3, r2, #21
 800fe22:	d531      	bpl.n	800fe88 <__ssputs_r+0xa0>
 800fe24:	4629      	mov	r1, r5
 800fe26:	f7ff ff6b 	bl	800fd00 <_malloc_r>
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	b950      	cbnz	r0, 800fe44 <__ssputs_r+0x5c>
 800fe2e:	230c      	movs	r3, #12
 800fe30:	f8ca 3000 	str.w	r3, [sl]
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe3a:	81a3      	strh	r3, [r4, #12]
 800fe3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe44:	6921      	ldr	r1, [r4, #16]
 800fe46:	464a      	mov	r2, r9
 800fe48:	f7ff fb46 	bl	800f4d8 <memcpy>
 800fe4c:	89a3      	ldrh	r3, [r4, #12]
 800fe4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe56:	81a3      	strh	r3, [r4, #12]
 800fe58:	6126      	str	r6, [r4, #16]
 800fe5a:	6165      	str	r5, [r4, #20]
 800fe5c:	444e      	add	r6, r9
 800fe5e:	eba5 0509 	sub.w	r5, r5, r9
 800fe62:	6026      	str	r6, [r4, #0]
 800fe64:	60a5      	str	r5, [r4, #8]
 800fe66:	463e      	mov	r6, r7
 800fe68:	42be      	cmp	r6, r7
 800fe6a:	d900      	bls.n	800fe6e <__ssputs_r+0x86>
 800fe6c:	463e      	mov	r6, r7
 800fe6e:	6820      	ldr	r0, [r4, #0]
 800fe70:	4632      	mov	r2, r6
 800fe72:	4641      	mov	r1, r8
 800fe74:	f001 f910 	bl	8011098 <memmove>
 800fe78:	68a3      	ldr	r3, [r4, #8]
 800fe7a:	1b9b      	subs	r3, r3, r6
 800fe7c:	60a3      	str	r3, [r4, #8]
 800fe7e:	6823      	ldr	r3, [r4, #0]
 800fe80:	4433      	add	r3, r6
 800fe82:	6023      	str	r3, [r4, #0]
 800fe84:	2000      	movs	r0, #0
 800fe86:	e7db      	b.n	800fe40 <__ssputs_r+0x58>
 800fe88:	462a      	mov	r2, r5
 800fe8a:	f001 f92b 	bl	80110e4 <_realloc_r>
 800fe8e:	4606      	mov	r6, r0
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d1e1      	bne.n	800fe58 <__ssputs_r+0x70>
 800fe94:	6921      	ldr	r1, [r4, #16]
 800fe96:	4650      	mov	r0, sl
 800fe98:	f7ff fec6 	bl	800fc28 <_free_r>
 800fe9c:	e7c7      	b.n	800fe2e <__ssputs_r+0x46>
	...

0800fea0 <_svfiprintf_r>:
 800fea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea4:	4698      	mov	r8, r3
 800fea6:	898b      	ldrh	r3, [r1, #12]
 800fea8:	061b      	lsls	r3, r3, #24
 800feaa:	b09d      	sub	sp, #116	; 0x74
 800feac:	4607      	mov	r7, r0
 800feae:	460d      	mov	r5, r1
 800feb0:	4614      	mov	r4, r2
 800feb2:	d50e      	bpl.n	800fed2 <_svfiprintf_r+0x32>
 800feb4:	690b      	ldr	r3, [r1, #16]
 800feb6:	b963      	cbnz	r3, 800fed2 <_svfiprintf_r+0x32>
 800feb8:	2140      	movs	r1, #64	; 0x40
 800feba:	f7ff ff21 	bl	800fd00 <_malloc_r>
 800febe:	6028      	str	r0, [r5, #0]
 800fec0:	6128      	str	r0, [r5, #16]
 800fec2:	b920      	cbnz	r0, 800fece <_svfiprintf_r+0x2e>
 800fec4:	230c      	movs	r3, #12
 800fec6:	603b      	str	r3, [r7, #0]
 800fec8:	f04f 30ff 	mov.w	r0, #4294967295
 800fecc:	e0d1      	b.n	8010072 <_svfiprintf_r+0x1d2>
 800fece:	2340      	movs	r3, #64	; 0x40
 800fed0:	616b      	str	r3, [r5, #20]
 800fed2:	2300      	movs	r3, #0
 800fed4:	9309      	str	r3, [sp, #36]	; 0x24
 800fed6:	2320      	movs	r3, #32
 800fed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fee0:	2330      	movs	r3, #48	; 0x30
 800fee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801008c <_svfiprintf_r+0x1ec>
 800fee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800feea:	f04f 0901 	mov.w	r9, #1
 800feee:	4623      	mov	r3, r4
 800fef0:	469a      	mov	sl, r3
 800fef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fef6:	b10a      	cbz	r2, 800fefc <_svfiprintf_r+0x5c>
 800fef8:	2a25      	cmp	r2, #37	; 0x25
 800fefa:	d1f9      	bne.n	800fef0 <_svfiprintf_r+0x50>
 800fefc:	ebba 0b04 	subs.w	fp, sl, r4
 800ff00:	d00b      	beq.n	800ff1a <_svfiprintf_r+0x7a>
 800ff02:	465b      	mov	r3, fp
 800ff04:	4622      	mov	r2, r4
 800ff06:	4629      	mov	r1, r5
 800ff08:	4638      	mov	r0, r7
 800ff0a:	f7ff ff6d 	bl	800fde8 <__ssputs_r>
 800ff0e:	3001      	adds	r0, #1
 800ff10:	f000 80aa 	beq.w	8010068 <_svfiprintf_r+0x1c8>
 800ff14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff16:	445a      	add	r2, fp
 800ff18:	9209      	str	r2, [sp, #36]	; 0x24
 800ff1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f000 80a2 	beq.w	8010068 <_svfiprintf_r+0x1c8>
 800ff24:	2300      	movs	r3, #0
 800ff26:	f04f 32ff 	mov.w	r2, #4294967295
 800ff2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff2e:	f10a 0a01 	add.w	sl, sl, #1
 800ff32:	9304      	str	r3, [sp, #16]
 800ff34:	9307      	str	r3, [sp, #28]
 800ff36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ff3c:	4654      	mov	r4, sl
 800ff3e:	2205      	movs	r2, #5
 800ff40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff44:	4851      	ldr	r0, [pc, #324]	; (801008c <_svfiprintf_r+0x1ec>)
 800ff46:	f7f0 f96b 	bl	8000220 <memchr>
 800ff4a:	9a04      	ldr	r2, [sp, #16]
 800ff4c:	b9d8      	cbnz	r0, 800ff86 <_svfiprintf_r+0xe6>
 800ff4e:	06d0      	lsls	r0, r2, #27
 800ff50:	bf44      	itt	mi
 800ff52:	2320      	movmi	r3, #32
 800ff54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff58:	0711      	lsls	r1, r2, #28
 800ff5a:	bf44      	itt	mi
 800ff5c:	232b      	movmi	r3, #43	; 0x2b
 800ff5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff62:	f89a 3000 	ldrb.w	r3, [sl]
 800ff66:	2b2a      	cmp	r3, #42	; 0x2a
 800ff68:	d015      	beq.n	800ff96 <_svfiprintf_r+0xf6>
 800ff6a:	9a07      	ldr	r2, [sp, #28]
 800ff6c:	4654      	mov	r4, sl
 800ff6e:	2000      	movs	r0, #0
 800ff70:	f04f 0c0a 	mov.w	ip, #10
 800ff74:	4621      	mov	r1, r4
 800ff76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff7a:	3b30      	subs	r3, #48	; 0x30
 800ff7c:	2b09      	cmp	r3, #9
 800ff7e:	d94e      	bls.n	801001e <_svfiprintf_r+0x17e>
 800ff80:	b1b0      	cbz	r0, 800ffb0 <_svfiprintf_r+0x110>
 800ff82:	9207      	str	r2, [sp, #28]
 800ff84:	e014      	b.n	800ffb0 <_svfiprintf_r+0x110>
 800ff86:	eba0 0308 	sub.w	r3, r0, r8
 800ff8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	9304      	str	r3, [sp, #16]
 800ff92:	46a2      	mov	sl, r4
 800ff94:	e7d2      	b.n	800ff3c <_svfiprintf_r+0x9c>
 800ff96:	9b03      	ldr	r3, [sp, #12]
 800ff98:	1d19      	adds	r1, r3, #4
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	9103      	str	r1, [sp, #12]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	bfbb      	ittet	lt
 800ffa2:	425b      	neglt	r3, r3
 800ffa4:	f042 0202 	orrlt.w	r2, r2, #2
 800ffa8:	9307      	strge	r3, [sp, #28]
 800ffaa:	9307      	strlt	r3, [sp, #28]
 800ffac:	bfb8      	it	lt
 800ffae:	9204      	strlt	r2, [sp, #16]
 800ffb0:	7823      	ldrb	r3, [r4, #0]
 800ffb2:	2b2e      	cmp	r3, #46	; 0x2e
 800ffb4:	d10c      	bne.n	800ffd0 <_svfiprintf_r+0x130>
 800ffb6:	7863      	ldrb	r3, [r4, #1]
 800ffb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ffba:	d135      	bne.n	8010028 <_svfiprintf_r+0x188>
 800ffbc:	9b03      	ldr	r3, [sp, #12]
 800ffbe:	1d1a      	adds	r2, r3, #4
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	9203      	str	r2, [sp, #12]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	bfb8      	it	lt
 800ffc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffcc:	3402      	adds	r4, #2
 800ffce:	9305      	str	r3, [sp, #20]
 800ffd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801009c <_svfiprintf_r+0x1fc>
 800ffd4:	7821      	ldrb	r1, [r4, #0]
 800ffd6:	2203      	movs	r2, #3
 800ffd8:	4650      	mov	r0, sl
 800ffda:	f7f0 f921 	bl	8000220 <memchr>
 800ffde:	b140      	cbz	r0, 800fff2 <_svfiprintf_r+0x152>
 800ffe0:	2340      	movs	r3, #64	; 0x40
 800ffe2:	eba0 000a 	sub.w	r0, r0, sl
 800ffe6:	fa03 f000 	lsl.w	r0, r3, r0
 800ffea:	9b04      	ldr	r3, [sp, #16]
 800ffec:	4303      	orrs	r3, r0
 800ffee:	3401      	adds	r4, #1
 800fff0:	9304      	str	r3, [sp, #16]
 800fff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fff6:	4826      	ldr	r0, [pc, #152]	; (8010090 <_svfiprintf_r+0x1f0>)
 800fff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fffc:	2206      	movs	r2, #6
 800fffe:	f7f0 f90f 	bl	8000220 <memchr>
 8010002:	2800      	cmp	r0, #0
 8010004:	d038      	beq.n	8010078 <_svfiprintf_r+0x1d8>
 8010006:	4b23      	ldr	r3, [pc, #140]	; (8010094 <_svfiprintf_r+0x1f4>)
 8010008:	bb1b      	cbnz	r3, 8010052 <_svfiprintf_r+0x1b2>
 801000a:	9b03      	ldr	r3, [sp, #12]
 801000c:	3307      	adds	r3, #7
 801000e:	f023 0307 	bic.w	r3, r3, #7
 8010012:	3308      	adds	r3, #8
 8010014:	9303      	str	r3, [sp, #12]
 8010016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010018:	4433      	add	r3, r6
 801001a:	9309      	str	r3, [sp, #36]	; 0x24
 801001c:	e767      	b.n	800feee <_svfiprintf_r+0x4e>
 801001e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010022:	460c      	mov	r4, r1
 8010024:	2001      	movs	r0, #1
 8010026:	e7a5      	b.n	800ff74 <_svfiprintf_r+0xd4>
 8010028:	2300      	movs	r3, #0
 801002a:	3401      	adds	r4, #1
 801002c:	9305      	str	r3, [sp, #20]
 801002e:	4619      	mov	r1, r3
 8010030:	f04f 0c0a 	mov.w	ip, #10
 8010034:	4620      	mov	r0, r4
 8010036:	f810 2b01 	ldrb.w	r2, [r0], #1
 801003a:	3a30      	subs	r2, #48	; 0x30
 801003c:	2a09      	cmp	r2, #9
 801003e:	d903      	bls.n	8010048 <_svfiprintf_r+0x1a8>
 8010040:	2b00      	cmp	r3, #0
 8010042:	d0c5      	beq.n	800ffd0 <_svfiprintf_r+0x130>
 8010044:	9105      	str	r1, [sp, #20]
 8010046:	e7c3      	b.n	800ffd0 <_svfiprintf_r+0x130>
 8010048:	fb0c 2101 	mla	r1, ip, r1, r2
 801004c:	4604      	mov	r4, r0
 801004e:	2301      	movs	r3, #1
 8010050:	e7f0      	b.n	8010034 <_svfiprintf_r+0x194>
 8010052:	ab03      	add	r3, sp, #12
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	462a      	mov	r2, r5
 8010058:	4b0f      	ldr	r3, [pc, #60]	; (8010098 <_svfiprintf_r+0x1f8>)
 801005a:	a904      	add	r1, sp, #16
 801005c:	4638      	mov	r0, r7
 801005e:	f7fd fc15 	bl	800d88c <_printf_float>
 8010062:	1c42      	adds	r2, r0, #1
 8010064:	4606      	mov	r6, r0
 8010066:	d1d6      	bne.n	8010016 <_svfiprintf_r+0x176>
 8010068:	89ab      	ldrh	r3, [r5, #12]
 801006a:	065b      	lsls	r3, r3, #25
 801006c:	f53f af2c 	bmi.w	800fec8 <_svfiprintf_r+0x28>
 8010070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010072:	b01d      	add	sp, #116	; 0x74
 8010074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010078:	ab03      	add	r3, sp, #12
 801007a:	9300      	str	r3, [sp, #0]
 801007c:	462a      	mov	r2, r5
 801007e:	4b06      	ldr	r3, [pc, #24]	; (8010098 <_svfiprintf_r+0x1f8>)
 8010080:	a904      	add	r1, sp, #16
 8010082:	4638      	mov	r0, r7
 8010084:	f7fd fea6 	bl	800ddd4 <_printf_i>
 8010088:	e7eb      	b.n	8010062 <_svfiprintf_r+0x1c2>
 801008a:	bf00      	nop
 801008c:	08014174 	.word	0x08014174
 8010090:	0801417e 	.word	0x0801417e
 8010094:	0800d88d 	.word	0x0800d88d
 8010098:	0800fde9 	.word	0x0800fde9
 801009c:	0801417a 	.word	0x0801417a

080100a0 <__sfputc_r>:
 80100a0:	6893      	ldr	r3, [r2, #8]
 80100a2:	3b01      	subs	r3, #1
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	b410      	push	{r4}
 80100a8:	6093      	str	r3, [r2, #8]
 80100aa:	da08      	bge.n	80100be <__sfputc_r+0x1e>
 80100ac:	6994      	ldr	r4, [r2, #24]
 80100ae:	42a3      	cmp	r3, r4
 80100b0:	db01      	blt.n	80100b6 <__sfputc_r+0x16>
 80100b2:	290a      	cmp	r1, #10
 80100b4:	d103      	bne.n	80100be <__sfputc_r+0x1e>
 80100b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100ba:	f7fe b877 	b.w	800e1ac <__swbuf_r>
 80100be:	6813      	ldr	r3, [r2, #0]
 80100c0:	1c58      	adds	r0, r3, #1
 80100c2:	6010      	str	r0, [r2, #0]
 80100c4:	7019      	strb	r1, [r3, #0]
 80100c6:	4608      	mov	r0, r1
 80100c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100cc:	4770      	bx	lr

080100ce <__sfputs_r>:
 80100ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d0:	4606      	mov	r6, r0
 80100d2:	460f      	mov	r7, r1
 80100d4:	4614      	mov	r4, r2
 80100d6:	18d5      	adds	r5, r2, r3
 80100d8:	42ac      	cmp	r4, r5
 80100da:	d101      	bne.n	80100e0 <__sfputs_r+0x12>
 80100dc:	2000      	movs	r0, #0
 80100de:	e007      	b.n	80100f0 <__sfputs_r+0x22>
 80100e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100e4:	463a      	mov	r2, r7
 80100e6:	4630      	mov	r0, r6
 80100e8:	f7ff ffda 	bl	80100a0 <__sfputc_r>
 80100ec:	1c43      	adds	r3, r0, #1
 80100ee:	d1f3      	bne.n	80100d8 <__sfputs_r+0xa>
 80100f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100f4 <_vfiprintf_r>:
 80100f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f8:	460d      	mov	r5, r1
 80100fa:	b09d      	sub	sp, #116	; 0x74
 80100fc:	4614      	mov	r4, r2
 80100fe:	4698      	mov	r8, r3
 8010100:	4606      	mov	r6, r0
 8010102:	b118      	cbz	r0, 801010c <_vfiprintf_r+0x18>
 8010104:	6983      	ldr	r3, [r0, #24]
 8010106:	b90b      	cbnz	r3, 801010c <_vfiprintf_r+0x18>
 8010108:	f7ff f8b8 	bl	800f27c <__sinit>
 801010c:	4b89      	ldr	r3, [pc, #548]	; (8010334 <_vfiprintf_r+0x240>)
 801010e:	429d      	cmp	r5, r3
 8010110:	d11b      	bne.n	801014a <_vfiprintf_r+0x56>
 8010112:	6875      	ldr	r5, [r6, #4]
 8010114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010116:	07d9      	lsls	r1, r3, #31
 8010118:	d405      	bmi.n	8010126 <_vfiprintf_r+0x32>
 801011a:	89ab      	ldrh	r3, [r5, #12]
 801011c:	059a      	lsls	r2, r3, #22
 801011e:	d402      	bmi.n	8010126 <_vfiprintf_r+0x32>
 8010120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010122:	f7ff f96a 	bl	800f3fa <__retarget_lock_acquire_recursive>
 8010126:	89ab      	ldrh	r3, [r5, #12]
 8010128:	071b      	lsls	r3, r3, #28
 801012a:	d501      	bpl.n	8010130 <_vfiprintf_r+0x3c>
 801012c:	692b      	ldr	r3, [r5, #16]
 801012e:	b9eb      	cbnz	r3, 801016c <_vfiprintf_r+0x78>
 8010130:	4629      	mov	r1, r5
 8010132:	4630      	mov	r0, r6
 8010134:	f7fe f88c 	bl	800e250 <__swsetup_r>
 8010138:	b1c0      	cbz	r0, 801016c <_vfiprintf_r+0x78>
 801013a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801013c:	07dc      	lsls	r4, r3, #31
 801013e:	d50e      	bpl.n	801015e <_vfiprintf_r+0x6a>
 8010140:	f04f 30ff 	mov.w	r0, #4294967295
 8010144:	b01d      	add	sp, #116	; 0x74
 8010146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801014a:	4b7b      	ldr	r3, [pc, #492]	; (8010338 <_vfiprintf_r+0x244>)
 801014c:	429d      	cmp	r5, r3
 801014e:	d101      	bne.n	8010154 <_vfiprintf_r+0x60>
 8010150:	68b5      	ldr	r5, [r6, #8]
 8010152:	e7df      	b.n	8010114 <_vfiprintf_r+0x20>
 8010154:	4b79      	ldr	r3, [pc, #484]	; (801033c <_vfiprintf_r+0x248>)
 8010156:	429d      	cmp	r5, r3
 8010158:	bf08      	it	eq
 801015a:	68f5      	ldreq	r5, [r6, #12]
 801015c:	e7da      	b.n	8010114 <_vfiprintf_r+0x20>
 801015e:	89ab      	ldrh	r3, [r5, #12]
 8010160:	0598      	lsls	r0, r3, #22
 8010162:	d4ed      	bmi.n	8010140 <_vfiprintf_r+0x4c>
 8010164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010166:	f7ff f949 	bl	800f3fc <__retarget_lock_release_recursive>
 801016a:	e7e9      	b.n	8010140 <_vfiprintf_r+0x4c>
 801016c:	2300      	movs	r3, #0
 801016e:	9309      	str	r3, [sp, #36]	; 0x24
 8010170:	2320      	movs	r3, #32
 8010172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010176:	f8cd 800c 	str.w	r8, [sp, #12]
 801017a:	2330      	movs	r3, #48	; 0x30
 801017c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010340 <_vfiprintf_r+0x24c>
 8010180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010184:	f04f 0901 	mov.w	r9, #1
 8010188:	4623      	mov	r3, r4
 801018a:	469a      	mov	sl, r3
 801018c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010190:	b10a      	cbz	r2, 8010196 <_vfiprintf_r+0xa2>
 8010192:	2a25      	cmp	r2, #37	; 0x25
 8010194:	d1f9      	bne.n	801018a <_vfiprintf_r+0x96>
 8010196:	ebba 0b04 	subs.w	fp, sl, r4
 801019a:	d00b      	beq.n	80101b4 <_vfiprintf_r+0xc0>
 801019c:	465b      	mov	r3, fp
 801019e:	4622      	mov	r2, r4
 80101a0:	4629      	mov	r1, r5
 80101a2:	4630      	mov	r0, r6
 80101a4:	f7ff ff93 	bl	80100ce <__sfputs_r>
 80101a8:	3001      	adds	r0, #1
 80101aa:	f000 80aa 	beq.w	8010302 <_vfiprintf_r+0x20e>
 80101ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101b0:	445a      	add	r2, fp
 80101b2:	9209      	str	r2, [sp, #36]	; 0x24
 80101b4:	f89a 3000 	ldrb.w	r3, [sl]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 80a2 	beq.w	8010302 <_vfiprintf_r+0x20e>
 80101be:	2300      	movs	r3, #0
 80101c0:	f04f 32ff 	mov.w	r2, #4294967295
 80101c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101c8:	f10a 0a01 	add.w	sl, sl, #1
 80101cc:	9304      	str	r3, [sp, #16]
 80101ce:	9307      	str	r3, [sp, #28]
 80101d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101d4:	931a      	str	r3, [sp, #104]	; 0x68
 80101d6:	4654      	mov	r4, sl
 80101d8:	2205      	movs	r2, #5
 80101da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101de:	4858      	ldr	r0, [pc, #352]	; (8010340 <_vfiprintf_r+0x24c>)
 80101e0:	f7f0 f81e 	bl	8000220 <memchr>
 80101e4:	9a04      	ldr	r2, [sp, #16]
 80101e6:	b9d8      	cbnz	r0, 8010220 <_vfiprintf_r+0x12c>
 80101e8:	06d1      	lsls	r1, r2, #27
 80101ea:	bf44      	itt	mi
 80101ec:	2320      	movmi	r3, #32
 80101ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101f2:	0713      	lsls	r3, r2, #28
 80101f4:	bf44      	itt	mi
 80101f6:	232b      	movmi	r3, #43	; 0x2b
 80101f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010200:	2b2a      	cmp	r3, #42	; 0x2a
 8010202:	d015      	beq.n	8010230 <_vfiprintf_r+0x13c>
 8010204:	9a07      	ldr	r2, [sp, #28]
 8010206:	4654      	mov	r4, sl
 8010208:	2000      	movs	r0, #0
 801020a:	f04f 0c0a 	mov.w	ip, #10
 801020e:	4621      	mov	r1, r4
 8010210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010214:	3b30      	subs	r3, #48	; 0x30
 8010216:	2b09      	cmp	r3, #9
 8010218:	d94e      	bls.n	80102b8 <_vfiprintf_r+0x1c4>
 801021a:	b1b0      	cbz	r0, 801024a <_vfiprintf_r+0x156>
 801021c:	9207      	str	r2, [sp, #28]
 801021e:	e014      	b.n	801024a <_vfiprintf_r+0x156>
 8010220:	eba0 0308 	sub.w	r3, r0, r8
 8010224:	fa09 f303 	lsl.w	r3, r9, r3
 8010228:	4313      	orrs	r3, r2
 801022a:	9304      	str	r3, [sp, #16]
 801022c:	46a2      	mov	sl, r4
 801022e:	e7d2      	b.n	80101d6 <_vfiprintf_r+0xe2>
 8010230:	9b03      	ldr	r3, [sp, #12]
 8010232:	1d19      	adds	r1, r3, #4
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	9103      	str	r1, [sp, #12]
 8010238:	2b00      	cmp	r3, #0
 801023a:	bfbb      	ittet	lt
 801023c:	425b      	neglt	r3, r3
 801023e:	f042 0202 	orrlt.w	r2, r2, #2
 8010242:	9307      	strge	r3, [sp, #28]
 8010244:	9307      	strlt	r3, [sp, #28]
 8010246:	bfb8      	it	lt
 8010248:	9204      	strlt	r2, [sp, #16]
 801024a:	7823      	ldrb	r3, [r4, #0]
 801024c:	2b2e      	cmp	r3, #46	; 0x2e
 801024e:	d10c      	bne.n	801026a <_vfiprintf_r+0x176>
 8010250:	7863      	ldrb	r3, [r4, #1]
 8010252:	2b2a      	cmp	r3, #42	; 0x2a
 8010254:	d135      	bne.n	80102c2 <_vfiprintf_r+0x1ce>
 8010256:	9b03      	ldr	r3, [sp, #12]
 8010258:	1d1a      	adds	r2, r3, #4
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	9203      	str	r2, [sp, #12]
 801025e:	2b00      	cmp	r3, #0
 8010260:	bfb8      	it	lt
 8010262:	f04f 33ff 	movlt.w	r3, #4294967295
 8010266:	3402      	adds	r4, #2
 8010268:	9305      	str	r3, [sp, #20]
 801026a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010350 <_vfiprintf_r+0x25c>
 801026e:	7821      	ldrb	r1, [r4, #0]
 8010270:	2203      	movs	r2, #3
 8010272:	4650      	mov	r0, sl
 8010274:	f7ef ffd4 	bl	8000220 <memchr>
 8010278:	b140      	cbz	r0, 801028c <_vfiprintf_r+0x198>
 801027a:	2340      	movs	r3, #64	; 0x40
 801027c:	eba0 000a 	sub.w	r0, r0, sl
 8010280:	fa03 f000 	lsl.w	r0, r3, r0
 8010284:	9b04      	ldr	r3, [sp, #16]
 8010286:	4303      	orrs	r3, r0
 8010288:	3401      	adds	r4, #1
 801028a:	9304      	str	r3, [sp, #16]
 801028c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010290:	482c      	ldr	r0, [pc, #176]	; (8010344 <_vfiprintf_r+0x250>)
 8010292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010296:	2206      	movs	r2, #6
 8010298:	f7ef ffc2 	bl	8000220 <memchr>
 801029c:	2800      	cmp	r0, #0
 801029e:	d03f      	beq.n	8010320 <_vfiprintf_r+0x22c>
 80102a0:	4b29      	ldr	r3, [pc, #164]	; (8010348 <_vfiprintf_r+0x254>)
 80102a2:	bb1b      	cbnz	r3, 80102ec <_vfiprintf_r+0x1f8>
 80102a4:	9b03      	ldr	r3, [sp, #12]
 80102a6:	3307      	adds	r3, #7
 80102a8:	f023 0307 	bic.w	r3, r3, #7
 80102ac:	3308      	adds	r3, #8
 80102ae:	9303      	str	r3, [sp, #12]
 80102b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b2:	443b      	add	r3, r7
 80102b4:	9309      	str	r3, [sp, #36]	; 0x24
 80102b6:	e767      	b.n	8010188 <_vfiprintf_r+0x94>
 80102b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80102bc:	460c      	mov	r4, r1
 80102be:	2001      	movs	r0, #1
 80102c0:	e7a5      	b.n	801020e <_vfiprintf_r+0x11a>
 80102c2:	2300      	movs	r3, #0
 80102c4:	3401      	adds	r4, #1
 80102c6:	9305      	str	r3, [sp, #20]
 80102c8:	4619      	mov	r1, r3
 80102ca:	f04f 0c0a 	mov.w	ip, #10
 80102ce:	4620      	mov	r0, r4
 80102d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102d4:	3a30      	subs	r2, #48	; 0x30
 80102d6:	2a09      	cmp	r2, #9
 80102d8:	d903      	bls.n	80102e2 <_vfiprintf_r+0x1ee>
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d0c5      	beq.n	801026a <_vfiprintf_r+0x176>
 80102de:	9105      	str	r1, [sp, #20]
 80102e0:	e7c3      	b.n	801026a <_vfiprintf_r+0x176>
 80102e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80102e6:	4604      	mov	r4, r0
 80102e8:	2301      	movs	r3, #1
 80102ea:	e7f0      	b.n	80102ce <_vfiprintf_r+0x1da>
 80102ec:	ab03      	add	r3, sp, #12
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	462a      	mov	r2, r5
 80102f2:	4b16      	ldr	r3, [pc, #88]	; (801034c <_vfiprintf_r+0x258>)
 80102f4:	a904      	add	r1, sp, #16
 80102f6:	4630      	mov	r0, r6
 80102f8:	f7fd fac8 	bl	800d88c <_printf_float>
 80102fc:	4607      	mov	r7, r0
 80102fe:	1c78      	adds	r0, r7, #1
 8010300:	d1d6      	bne.n	80102b0 <_vfiprintf_r+0x1bc>
 8010302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010304:	07d9      	lsls	r1, r3, #31
 8010306:	d405      	bmi.n	8010314 <_vfiprintf_r+0x220>
 8010308:	89ab      	ldrh	r3, [r5, #12]
 801030a:	059a      	lsls	r2, r3, #22
 801030c:	d402      	bmi.n	8010314 <_vfiprintf_r+0x220>
 801030e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010310:	f7ff f874 	bl	800f3fc <__retarget_lock_release_recursive>
 8010314:	89ab      	ldrh	r3, [r5, #12]
 8010316:	065b      	lsls	r3, r3, #25
 8010318:	f53f af12 	bmi.w	8010140 <_vfiprintf_r+0x4c>
 801031c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801031e:	e711      	b.n	8010144 <_vfiprintf_r+0x50>
 8010320:	ab03      	add	r3, sp, #12
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	462a      	mov	r2, r5
 8010326:	4b09      	ldr	r3, [pc, #36]	; (801034c <_vfiprintf_r+0x258>)
 8010328:	a904      	add	r1, sp, #16
 801032a:	4630      	mov	r0, r6
 801032c:	f7fd fd52 	bl	800ddd4 <_printf_i>
 8010330:	e7e4      	b.n	80102fc <_vfiprintf_r+0x208>
 8010332:	bf00      	nop
 8010334:	08013fdc 	.word	0x08013fdc
 8010338:	08013ffc 	.word	0x08013ffc
 801033c:	08013fbc 	.word	0x08013fbc
 8010340:	08014174 	.word	0x08014174
 8010344:	0801417e 	.word	0x0801417e
 8010348:	0800d88d 	.word	0x0800d88d
 801034c:	080100cf 	.word	0x080100cf
 8010350:	0801417a 	.word	0x0801417a

08010354 <__svfiscanf_r>:
 8010354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010358:	461d      	mov	r5, r3
 801035a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801035c:	07df      	lsls	r7, r3, #31
 801035e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010362:	4606      	mov	r6, r0
 8010364:	460c      	mov	r4, r1
 8010366:	4692      	mov	sl, r2
 8010368:	d405      	bmi.n	8010376 <__svfiscanf_r+0x22>
 801036a:	898b      	ldrh	r3, [r1, #12]
 801036c:	0598      	lsls	r0, r3, #22
 801036e:	d402      	bmi.n	8010376 <__svfiscanf_r+0x22>
 8010370:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8010372:	f7ff f842 	bl	800f3fa <__retarget_lock_acquire_recursive>
 8010376:	2300      	movs	r3, #0
 8010378:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 801037c:	4ba6      	ldr	r3, [pc, #664]	; (8010618 <__svfiscanf_r+0x2c4>)
 801037e:	93a0      	str	r3, [sp, #640]	; 0x280
 8010380:	f10d 0804 	add.w	r8, sp, #4
 8010384:	4ba5      	ldr	r3, [pc, #660]	; (801061c <__svfiscanf_r+0x2c8>)
 8010386:	4fa6      	ldr	r7, [pc, #664]	; (8010620 <__svfiscanf_r+0x2cc>)
 8010388:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010624 <__svfiscanf_r+0x2d0>
 801038c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010390:	93a1      	str	r3, [sp, #644]	; 0x284
 8010392:	9500      	str	r5, [sp, #0]
 8010394:	f89a 3000 	ldrb.w	r3, [sl]
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 8173 	beq.w	8010684 <__svfiscanf_r+0x330>
 801039e:	5dd9      	ldrb	r1, [r3, r7]
 80103a0:	f011 0108 	ands.w	r1, r1, #8
 80103a4:	f10a 0501 	add.w	r5, sl, #1
 80103a8:	d019      	beq.n	80103de <__svfiscanf_r+0x8a>
 80103aa:	6863      	ldr	r3, [r4, #4]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	dd0f      	ble.n	80103d0 <__svfiscanf_r+0x7c>
 80103b0:	6823      	ldr	r3, [r4, #0]
 80103b2:	781a      	ldrb	r2, [r3, #0]
 80103b4:	5cba      	ldrb	r2, [r7, r2]
 80103b6:	0711      	lsls	r1, r2, #28
 80103b8:	d401      	bmi.n	80103be <__svfiscanf_r+0x6a>
 80103ba:	46aa      	mov	sl, r5
 80103bc:	e7ea      	b.n	8010394 <__svfiscanf_r+0x40>
 80103be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80103c0:	3201      	adds	r2, #1
 80103c2:	9245      	str	r2, [sp, #276]	; 0x114
 80103c4:	6862      	ldr	r2, [r4, #4]
 80103c6:	3301      	adds	r3, #1
 80103c8:	3a01      	subs	r2, #1
 80103ca:	6062      	str	r2, [r4, #4]
 80103cc:	6023      	str	r3, [r4, #0]
 80103ce:	e7ec      	b.n	80103aa <__svfiscanf_r+0x56>
 80103d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80103d2:	4621      	mov	r1, r4
 80103d4:	4630      	mov	r0, r6
 80103d6:	4798      	blx	r3
 80103d8:	2800      	cmp	r0, #0
 80103da:	d0e9      	beq.n	80103b0 <__svfiscanf_r+0x5c>
 80103dc:	e7ed      	b.n	80103ba <__svfiscanf_r+0x66>
 80103de:	2b25      	cmp	r3, #37	; 0x25
 80103e0:	d012      	beq.n	8010408 <__svfiscanf_r+0xb4>
 80103e2:	469a      	mov	sl, r3
 80103e4:	6863      	ldr	r3, [r4, #4]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	f340 8095 	ble.w	8010516 <__svfiscanf_r+0x1c2>
 80103ec:	6822      	ldr	r2, [r4, #0]
 80103ee:	7813      	ldrb	r3, [r2, #0]
 80103f0:	4553      	cmp	r3, sl
 80103f2:	f040 8147 	bne.w	8010684 <__svfiscanf_r+0x330>
 80103f6:	6863      	ldr	r3, [r4, #4]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	6063      	str	r3, [r4, #4]
 80103fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80103fe:	3201      	adds	r2, #1
 8010400:	3301      	adds	r3, #1
 8010402:	6022      	str	r2, [r4, #0]
 8010404:	9345      	str	r3, [sp, #276]	; 0x114
 8010406:	e7d8      	b.n	80103ba <__svfiscanf_r+0x66>
 8010408:	9141      	str	r1, [sp, #260]	; 0x104
 801040a:	9143      	str	r1, [sp, #268]	; 0x10c
 801040c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8010410:	2b2a      	cmp	r3, #42	; 0x2a
 8010412:	bf02      	ittt	eq
 8010414:	2310      	moveq	r3, #16
 8010416:	9341      	streq	r3, [sp, #260]	; 0x104
 8010418:	f10a 0502 	addeq.w	r5, sl, #2
 801041c:	220a      	movs	r2, #10
 801041e:	46aa      	mov	sl, r5
 8010420:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010424:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010428:	2b09      	cmp	r3, #9
 801042a:	d91e      	bls.n	801046a <__svfiscanf_r+0x116>
 801042c:	487d      	ldr	r0, [pc, #500]	; (8010624 <__svfiscanf_r+0x2d0>)
 801042e:	2203      	movs	r2, #3
 8010430:	f7ef fef6 	bl	8000220 <memchr>
 8010434:	b140      	cbz	r0, 8010448 <__svfiscanf_r+0xf4>
 8010436:	2301      	movs	r3, #1
 8010438:	eba0 0009 	sub.w	r0, r0, r9
 801043c:	fa03 f000 	lsl.w	r0, r3, r0
 8010440:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010442:	4318      	orrs	r0, r3
 8010444:	9041      	str	r0, [sp, #260]	; 0x104
 8010446:	4655      	mov	r5, sl
 8010448:	f815 3b01 	ldrb.w	r3, [r5], #1
 801044c:	2b78      	cmp	r3, #120	; 0x78
 801044e:	d807      	bhi.n	8010460 <__svfiscanf_r+0x10c>
 8010450:	2b57      	cmp	r3, #87	; 0x57
 8010452:	d811      	bhi.n	8010478 <__svfiscanf_r+0x124>
 8010454:	2b25      	cmp	r3, #37	; 0x25
 8010456:	d0c4      	beq.n	80103e2 <__svfiscanf_r+0x8e>
 8010458:	d858      	bhi.n	801050c <__svfiscanf_r+0x1b8>
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 80c8 	beq.w	80105f0 <__svfiscanf_r+0x29c>
 8010460:	2303      	movs	r3, #3
 8010462:	9347      	str	r3, [sp, #284]	; 0x11c
 8010464:	230a      	movs	r3, #10
 8010466:	9342      	str	r3, [sp, #264]	; 0x108
 8010468:	e07c      	b.n	8010564 <__svfiscanf_r+0x210>
 801046a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801046c:	fb02 1103 	mla	r1, r2, r3, r1
 8010470:	3930      	subs	r1, #48	; 0x30
 8010472:	9143      	str	r1, [sp, #268]	; 0x10c
 8010474:	4655      	mov	r5, sl
 8010476:	e7d2      	b.n	801041e <__svfiscanf_r+0xca>
 8010478:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801047c:	2a20      	cmp	r2, #32
 801047e:	d8ef      	bhi.n	8010460 <__svfiscanf_r+0x10c>
 8010480:	a101      	add	r1, pc, #4	; (adr r1, 8010488 <__svfiscanf_r+0x134>)
 8010482:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010486:	bf00      	nop
 8010488:	0801054f 	.word	0x0801054f
 801048c:	08010461 	.word	0x08010461
 8010490:	08010461 	.word	0x08010461
 8010494:	080105ad 	.word	0x080105ad
 8010498:	08010461 	.word	0x08010461
 801049c:	08010461 	.word	0x08010461
 80104a0:	08010461 	.word	0x08010461
 80104a4:	08010461 	.word	0x08010461
 80104a8:	08010461 	.word	0x08010461
 80104ac:	08010461 	.word	0x08010461
 80104b0:	08010461 	.word	0x08010461
 80104b4:	080105c3 	.word	0x080105c3
 80104b8:	08010599 	.word	0x08010599
 80104bc:	08010513 	.word	0x08010513
 80104c0:	08010513 	.word	0x08010513
 80104c4:	08010513 	.word	0x08010513
 80104c8:	08010461 	.word	0x08010461
 80104cc:	0801059d 	.word	0x0801059d
 80104d0:	08010461 	.word	0x08010461
 80104d4:	08010461 	.word	0x08010461
 80104d8:	08010461 	.word	0x08010461
 80104dc:	08010461 	.word	0x08010461
 80104e0:	080105d3 	.word	0x080105d3
 80104e4:	080105a5 	.word	0x080105a5
 80104e8:	08010547 	.word	0x08010547
 80104ec:	08010461 	.word	0x08010461
 80104f0:	08010461 	.word	0x08010461
 80104f4:	080105cf 	.word	0x080105cf
 80104f8:	08010461 	.word	0x08010461
 80104fc:	08010599 	.word	0x08010599
 8010500:	08010461 	.word	0x08010461
 8010504:	08010461 	.word	0x08010461
 8010508:	0801054f 	.word	0x0801054f
 801050c:	3b45      	subs	r3, #69	; 0x45
 801050e:	2b02      	cmp	r3, #2
 8010510:	d8a6      	bhi.n	8010460 <__svfiscanf_r+0x10c>
 8010512:	2305      	movs	r3, #5
 8010514:	e025      	b.n	8010562 <__svfiscanf_r+0x20e>
 8010516:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010518:	4621      	mov	r1, r4
 801051a:	4630      	mov	r0, r6
 801051c:	4798      	blx	r3
 801051e:	2800      	cmp	r0, #0
 8010520:	f43f af64 	beq.w	80103ec <__svfiscanf_r+0x98>
 8010524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010526:	07da      	lsls	r2, r3, #31
 8010528:	f140 80a4 	bpl.w	8010674 <__svfiscanf_r+0x320>
 801052c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801052e:	2800      	cmp	r0, #0
 8010530:	d067      	beq.n	8010602 <__svfiscanf_r+0x2ae>
 8010532:	89a3      	ldrh	r3, [r4, #12]
 8010534:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010538:	bf18      	it	ne
 801053a:	f04f 30ff 	movne.w	r0, #4294967295
 801053e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010546:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010548:	f042 0220 	orr.w	r2, r2, #32
 801054c:	9241      	str	r2, [sp, #260]	; 0x104
 801054e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010554:	9241      	str	r2, [sp, #260]	; 0x104
 8010556:	2210      	movs	r2, #16
 8010558:	2b6f      	cmp	r3, #111	; 0x6f
 801055a:	9242      	str	r2, [sp, #264]	; 0x108
 801055c:	bf34      	ite	cc
 801055e:	2303      	movcc	r3, #3
 8010560:	2304      	movcs	r3, #4
 8010562:	9347      	str	r3, [sp, #284]	; 0x11c
 8010564:	6863      	ldr	r3, [r4, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	dd4e      	ble.n	8010608 <__svfiscanf_r+0x2b4>
 801056a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801056c:	065b      	lsls	r3, r3, #25
 801056e:	d404      	bmi.n	801057a <__svfiscanf_r+0x226>
 8010570:	6823      	ldr	r3, [r4, #0]
 8010572:	781a      	ldrb	r2, [r3, #0]
 8010574:	5cba      	ldrb	r2, [r7, r2]
 8010576:	0710      	lsls	r0, r2, #28
 8010578:	d456      	bmi.n	8010628 <__svfiscanf_r+0x2d4>
 801057a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801057c:	2b02      	cmp	r3, #2
 801057e:	dc65      	bgt.n	801064c <__svfiscanf_r+0x2f8>
 8010580:	466b      	mov	r3, sp
 8010582:	4622      	mov	r2, r4
 8010584:	a941      	add	r1, sp, #260	; 0x104
 8010586:	4630      	mov	r0, r6
 8010588:	f000 f8b2 	bl	80106f0 <_scanf_chars>
 801058c:	2801      	cmp	r0, #1
 801058e:	d079      	beq.n	8010684 <__svfiscanf_r+0x330>
 8010590:	2802      	cmp	r0, #2
 8010592:	f47f af12 	bne.w	80103ba <__svfiscanf_r+0x66>
 8010596:	e7c5      	b.n	8010524 <__svfiscanf_r+0x1d0>
 8010598:	220a      	movs	r2, #10
 801059a:	e7dd      	b.n	8010558 <__svfiscanf_r+0x204>
 801059c:	2300      	movs	r3, #0
 801059e:	9342      	str	r3, [sp, #264]	; 0x108
 80105a0:	2303      	movs	r3, #3
 80105a2:	e7de      	b.n	8010562 <__svfiscanf_r+0x20e>
 80105a4:	2308      	movs	r3, #8
 80105a6:	9342      	str	r3, [sp, #264]	; 0x108
 80105a8:	2304      	movs	r3, #4
 80105aa:	e7da      	b.n	8010562 <__svfiscanf_r+0x20e>
 80105ac:	4629      	mov	r1, r5
 80105ae:	4640      	mov	r0, r8
 80105b0:	f000 fa94 	bl	8010adc <__sccl>
 80105b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80105b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105ba:	9341      	str	r3, [sp, #260]	; 0x104
 80105bc:	4605      	mov	r5, r0
 80105be:	2301      	movs	r3, #1
 80105c0:	e7cf      	b.n	8010562 <__svfiscanf_r+0x20e>
 80105c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80105c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105c8:	9341      	str	r3, [sp, #260]	; 0x104
 80105ca:	2300      	movs	r3, #0
 80105cc:	e7c9      	b.n	8010562 <__svfiscanf_r+0x20e>
 80105ce:	2302      	movs	r3, #2
 80105d0:	e7c7      	b.n	8010562 <__svfiscanf_r+0x20e>
 80105d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80105d4:	06c3      	lsls	r3, r0, #27
 80105d6:	f53f aef0 	bmi.w	80103ba <__svfiscanf_r+0x66>
 80105da:	9b00      	ldr	r3, [sp, #0]
 80105dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80105de:	1d19      	adds	r1, r3, #4
 80105e0:	9100      	str	r1, [sp, #0]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f010 0f01 	tst.w	r0, #1
 80105e8:	bf14      	ite	ne
 80105ea:	801a      	strhne	r2, [r3, #0]
 80105ec:	601a      	streq	r2, [r3, #0]
 80105ee:	e6e4      	b.n	80103ba <__svfiscanf_r+0x66>
 80105f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105f2:	07d8      	lsls	r0, r3, #31
 80105f4:	d405      	bmi.n	8010602 <__svfiscanf_r+0x2ae>
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	0599      	lsls	r1, r3, #22
 80105fa:	d402      	bmi.n	8010602 <__svfiscanf_r+0x2ae>
 80105fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105fe:	f7fe fefd 	bl	800f3fc <__retarget_lock_release_recursive>
 8010602:	f04f 30ff 	mov.w	r0, #4294967295
 8010606:	e79a      	b.n	801053e <__svfiscanf_r+0x1ea>
 8010608:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801060a:	4621      	mov	r1, r4
 801060c:	4630      	mov	r0, r6
 801060e:	4798      	blx	r3
 8010610:	2800      	cmp	r0, #0
 8010612:	d0aa      	beq.n	801056a <__svfiscanf_r+0x216>
 8010614:	e786      	b.n	8010524 <__svfiscanf_r+0x1d0>
 8010616:	bf00      	nop
 8010618:	08010e39 	.word	0x08010e39
 801061c:	080109a9 	.word	0x080109a9
 8010620:	080141dd 	.word	0x080141dd
 8010624:	0801417a 	.word	0x0801417a
 8010628:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801062a:	3201      	adds	r2, #1
 801062c:	9245      	str	r2, [sp, #276]	; 0x114
 801062e:	6862      	ldr	r2, [r4, #4]
 8010630:	3a01      	subs	r2, #1
 8010632:	2a00      	cmp	r2, #0
 8010634:	6062      	str	r2, [r4, #4]
 8010636:	dd02      	ble.n	801063e <__svfiscanf_r+0x2ea>
 8010638:	3301      	adds	r3, #1
 801063a:	6023      	str	r3, [r4, #0]
 801063c:	e798      	b.n	8010570 <__svfiscanf_r+0x21c>
 801063e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010640:	4621      	mov	r1, r4
 8010642:	4630      	mov	r0, r6
 8010644:	4798      	blx	r3
 8010646:	2800      	cmp	r0, #0
 8010648:	d092      	beq.n	8010570 <__svfiscanf_r+0x21c>
 801064a:	e76b      	b.n	8010524 <__svfiscanf_r+0x1d0>
 801064c:	2b04      	cmp	r3, #4
 801064e:	dc06      	bgt.n	801065e <__svfiscanf_r+0x30a>
 8010650:	466b      	mov	r3, sp
 8010652:	4622      	mov	r2, r4
 8010654:	a941      	add	r1, sp, #260	; 0x104
 8010656:	4630      	mov	r0, r6
 8010658:	f000 f8a4 	bl	80107a4 <_scanf_i>
 801065c:	e796      	b.n	801058c <__svfiscanf_r+0x238>
 801065e:	4b0f      	ldr	r3, [pc, #60]	; (801069c <__svfiscanf_r+0x348>)
 8010660:	2b00      	cmp	r3, #0
 8010662:	f43f aeaa 	beq.w	80103ba <__svfiscanf_r+0x66>
 8010666:	466b      	mov	r3, sp
 8010668:	4622      	mov	r2, r4
 801066a:	a941      	add	r1, sp, #260	; 0x104
 801066c:	4630      	mov	r0, r6
 801066e:	f3af 8000 	nop.w
 8010672:	e78b      	b.n	801058c <__svfiscanf_r+0x238>
 8010674:	89a3      	ldrh	r3, [r4, #12]
 8010676:	0599      	lsls	r1, r3, #22
 8010678:	f53f af58 	bmi.w	801052c <__svfiscanf_r+0x1d8>
 801067c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801067e:	f7fe febd 	bl	800f3fc <__retarget_lock_release_recursive>
 8010682:	e753      	b.n	801052c <__svfiscanf_r+0x1d8>
 8010684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010686:	07da      	lsls	r2, r3, #31
 8010688:	d405      	bmi.n	8010696 <__svfiscanf_r+0x342>
 801068a:	89a3      	ldrh	r3, [r4, #12]
 801068c:	059b      	lsls	r3, r3, #22
 801068e:	d402      	bmi.n	8010696 <__svfiscanf_r+0x342>
 8010690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010692:	f7fe feb3 	bl	800f3fc <__retarget_lock_release_recursive>
 8010696:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010698:	e751      	b.n	801053e <__svfiscanf_r+0x1ea>
 801069a:	bf00      	nop
 801069c:	00000000 	.word	0x00000000

080106a0 <_vfiscanf_r>:
 80106a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106a2:	460c      	mov	r4, r1
 80106a4:	4605      	mov	r5, r0
 80106a6:	b138      	cbz	r0, 80106b8 <_vfiscanf_r+0x18>
 80106a8:	6981      	ldr	r1, [r0, #24]
 80106aa:	b929      	cbnz	r1, 80106b8 <_vfiscanf_r+0x18>
 80106ac:	e9cd 2300 	strd	r2, r3, [sp]
 80106b0:	f7fe fde4 	bl	800f27c <__sinit>
 80106b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106b8:	490a      	ldr	r1, [pc, #40]	; (80106e4 <_vfiscanf_r+0x44>)
 80106ba:	428c      	cmp	r4, r1
 80106bc:	d107      	bne.n	80106ce <_vfiscanf_r+0x2e>
 80106be:	686c      	ldr	r4, [r5, #4]
 80106c0:	4621      	mov	r1, r4
 80106c2:	4628      	mov	r0, r5
 80106c4:	b003      	add	sp, #12
 80106c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106ca:	f7ff be43 	b.w	8010354 <__svfiscanf_r>
 80106ce:	4906      	ldr	r1, [pc, #24]	; (80106e8 <_vfiscanf_r+0x48>)
 80106d0:	428c      	cmp	r4, r1
 80106d2:	d101      	bne.n	80106d8 <_vfiscanf_r+0x38>
 80106d4:	68ac      	ldr	r4, [r5, #8]
 80106d6:	e7f3      	b.n	80106c0 <_vfiscanf_r+0x20>
 80106d8:	4904      	ldr	r1, [pc, #16]	; (80106ec <_vfiscanf_r+0x4c>)
 80106da:	428c      	cmp	r4, r1
 80106dc:	bf08      	it	eq
 80106de:	68ec      	ldreq	r4, [r5, #12]
 80106e0:	e7ee      	b.n	80106c0 <_vfiscanf_r+0x20>
 80106e2:	bf00      	nop
 80106e4:	08013fdc 	.word	0x08013fdc
 80106e8:	08013ffc 	.word	0x08013ffc
 80106ec:	08013fbc 	.word	0x08013fbc

080106f0 <_scanf_chars>:
 80106f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106f4:	4615      	mov	r5, r2
 80106f6:	688a      	ldr	r2, [r1, #8]
 80106f8:	4680      	mov	r8, r0
 80106fa:	460c      	mov	r4, r1
 80106fc:	b932      	cbnz	r2, 801070c <_scanf_chars+0x1c>
 80106fe:	698a      	ldr	r2, [r1, #24]
 8010700:	2a00      	cmp	r2, #0
 8010702:	bf0c      	ite	eq
 8010704:	2201      	moveq	r2, #1
 8010706:	f04f 32ff 	movne.w	r2, #4294967295
 801070a:	608a      	str	r2, [r1, #8]
 801070c:	6822      	ldr	r2, [r4, #0]
 801070e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80107a0 <_scanf_chars+0xb0>
 8010712:	06d1      	lsls	r1, r2, #27
 8010714:	bf5f      	itttt	pl
 8010716:	681a      	ldrpl	r2, [r3, #0]
 8010718:	1d11      	addpl	r1, r2, #4
 801071a:	6019      	strpl	r1, [r3, #0]
 801071c:	6816      	ldrpl	r6, [r2, #0]
 801071e:	2700      	movs	r7, #0
 8010720:	69a0      	ldr	r0, [r4, #24]
 8010722:	b188      	cbz	r0, 8010748 <_scanf_chars+0x58>
 8010724:	2801      	cmp	r0, #1
 8010726:	d107      	bne.n	8010738 <_scanf_chars+0x48>
 8010728:	682a      	ldr	r2, [r5, #0]
 801072a:	7811      	ldrb	r1, [r2, #0]
 801072c:	6962      	ldr	r2, [r4, #20]
 801072e:	5c52      	ldrb	r2, [r2, r1]
 8010730:	b952      	cbnz	r2, 8010748 <_scanf_chars+0x58>
 8010732:	2f00      	cmp	r7, #0
 8010734:	d031      	beq.n	801079a <_scanf_chars+0xaa>
 8010736:	e022      	b.n	801077e <_scanf_chars+0x8e>
 8010738:	2802      	cmp	r0, #2
 801073a:	d120      	bne.n	801077e <_scanf_chars+0x8e>
 801073c:	682b      	ldr	r3, [r5, #0]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010744:	071b      	lsls	r3, r3, #28
 8010746:	d41a      	bmi.n	801077e <_scanf_chars+0x8e>
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	06da      	lsls	r2, r3, #27
 801074c:	bf5e      	ittt	pl
 801074e:	682b      	ldrpl	r3, [r5, #0]
 8010750:	781b      	ldrbpl	r3, [r3, #0]
 8010752:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010756:	682a      	ldr	r2, [r5, #0]
 8010758:	686b      	ldr	r3, [r5, #4]
 801075a:	3201      	adds	r2, #1
 801075c:	602a      	str	r2, [r5, #0]
 801075e:	68a2      	ldr	r2, [r4, #8]
 8010760:	3b01      	subs	r3, #1
 8010762:	3a01      	subs	r2, #1
 8010764:	606b      	str	r3, [r5, #4]
 8010766:	3701      	adds	r7, #1
 8010768:	60a2      	str	r2, [r4, #8]
 801076a:	b142      	cbz	r2, 801077e <_scanf_chars+0x8e>
 801076c:	2b00      	cmp	r3, #0
 801076e:	dcd7      	bgt.n	8010720 <_scanf_chars+0x30>
 8010770:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010774:	4629      	mov	r1, r5
 8010776:	4640      	mov	r0, r8
 8010778:	4798      	blx	r3
 801077a:	2800      	cmp	r0, #0
 801077c:	d0d0      	beq.n	8010720 <_scanf_chars+0x30>
 801077e:	6823      	ldr	r3, [r4, #0]
 8010780:	f013 0310 	ands.w	r3, r3, #16
 8010784:	d105      	bne.n	8010792 <_scanf_chars+0xa2>
 8010786:	68e2      	ldr	r2, [r4, #12]
 8010788:	3201      	adds	r2, #1
 801078a:	60e2      	str	r2, [r4, #12]
 801078c:	69a2      	ldr	r2, [r4, #24]
 801078e:	b102      	cbz	r2, 8010792 <_scanf_chars+0xa2>
 8010790:	7033      	strb	r3, [r6, #0]
 8010792:	6923      	ldr	r3, [r4, #16]
 8010794:	443b      	add	r3, r7
 8010796:	6123      	str	r3, [r4, #16]
 8010798:	2000      	movs	r0, #0
 801079a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801079e:	bf00      	nop
 80107a0:	080141dd 	.word	0x080141dd

080107a4 <_scanf_i>:
 80107a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a8:	4698      	mov	r8, r3
 80107aa:	4b76      	ldr	r3, [pc, #472]	; (8010984 <_scanf_i+0x1e0>)
 80107ac:	460c      	mov	r4, r1
 80107ae:	4682      	mov	sl, r0
 80107b0:	4616      	mov	r6, r2
 80107b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80107b6:	b087      	sub	sp, #28
 80107b8:	ab03      	add	r3, sp, #12
 80107ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80107be:	4b72      	ldr	r3, [pc, #456]	; (8010988 <_scanf_i+0x1e4>)
 80107c0:	69a1      	ldr	r1, [r4, #24]
 80107c2:	4a72      	ldr	r2, [pc, #456]	; (801098c <_scanf_i+0x1e8>)
 80107c4:	2903      	cmp	r1, #3
 80107c6:	bf18      	it	ne
 80107c8:	461a      	movne	r2, r3
 80107ca:	68a3      	ldr	r3, [r4, #8]
 80107cc:	9201      	str	r2, [sp, #4]
 80107ce:	1e5a      	subs	r2, r3, #1
 80107d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80107d4:	bf88      	it	hi
 80107d6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80107da:	4627      	mov	r7, r4
 80107dc:	bf82      	ittt	hi
 80107de:	eb03 0905 	addhi.w	r9, r3, r5
 80107e2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80107e6:	60a3      	strhi	r3, [r4, #8]
 80107e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80107ec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80107f0:	bf98      	it	ls
 80107f2:	f04f 0900 	movls.w	r9, #0
 80107f6:	6023      	str	r3, [r4, #0]
 80107f8:	463d      	mov	r5, r7
 80107fa:	f04f 0b00 	mov.w	fp, #0
 80107fe:	6831      	ldr	r1, [r6, #0]
 8010800:	ab03      	add	r3, sp, #12
 8010802:	7809      	ldrb	r1, [r1, #0]
 8010804:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010808:	2202      	movs	r2, #2
 801080a:	f7ef fd09 	bl	8000220 <memchr>
 801080e:	b328      	cbz	r0, 801085c <_scanf_i+0xb8>
 8010810:	f1bb 0f01 	cmp.w	fp, #1
 8010814:	d159      	bne.n	80108ca <_scanf_i+0x126>
 8010816:	6862      	ldr	r2, [r4, #4]
 8010818:	b92a      	cbnz	r2, 8010826 <_scanf_i+0x82>
 801081a:	6822      	ldr	r2, [r4, #0]
 801081c:	2308      	movs	r3, #8
 801081e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010822:	6063      	str	r3, [r4, #4]
 8010824:	6022      	str	r2, [r4, #0]
 8010826:	6822      	ldr	r2, [r4, #0]
 8010828:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801082c:	6022      	str	r2, [r4, #0]
 801082e:	68a2      	ldr	r2, [r4, #8]
 8010830:	1e51      	subs	r1, r2, #1
 8010832:	60a1      	str	r1, [r4, #8]
 8010834:	b192      	cbz	r2, 801085c <_scanf_i+0xb8>
 8010836:	6832      	ldr	r2, [r6, #0]
 8010838:	1c51      	adds	r1, r2, #1
 801083a:	6031      	str	r1, [r6, #0]
 801083c:	7812      	ldrb	r2, [r2, #0]
 801083e:	f805 2b01 	strb.w	r2, [r5], #1
 8010842:	6872      	ldr	r2, [r6, #4]
 8010844:	3a01      	subs	r2, #1
 8010846:	2a00      	cmp	r2, #0
 8010848:	6072      	str	r2, [r6, #4]
 801084a:	dc07      	bgt.n	801085c <_scanf_i+0xb8>
 801084c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010850:	4631      	mov	r1, r6
 8010852:	4650      	mov	r0, sl
 8010854:	4790      	blx	r2
 8010856:	2800      	cmp	r0, #0
 8010858:	f040 8085 	bne.w	8010966 <_scanf_i+0x1c2>
 801085c:	f10b 0b01 	add.w	fp, fp, #1
 8010860:	f1bb 0f03 	cmp.w	fp, #3
 8010864:	d1cb      	bne.n	80107fe <_scanf_i+0x5a>
 8010866:	6863      	ldr	r3, [r4, #4]
 8010868:	b90b      	cbnz	r3, 801086e <_scanf_i+0xca>
 801086a:	230a      	movs	r3, #10
 801086c:	6063      	str	r3, [r4, #4]
 801086e:	6863      	ldr	r3, [r4, #4]
 8010870:	4947      	ldr	r1, [pc, #284]	; (8010990 <_scanf_i+0x1ec>)
 8010872:	6960      	ldr	r0, [r4, #20]
 8010874:	1ac9      	subs	r1, r1, r3
 8010876:	f000 f931 	bl	8010adc <__sccl>
 801087a:	f04f 0b00 	mov.w	fp, #0
 801087e:	68a3      	ldr	r3, [r4, #8]
 8010880:	6822      	ldr	r2, [r4, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d03d      	beq.n	8010902 <_scanf_i+0x15e>
 8010886:	6831      	ldr	r1, [r6, #0]
 8010888:	6960      	ldr	r0, [r4, #20]
 801088a:	f891 c000 	ldrb.w	ip, [r1]
 801088e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010892:	2800      	cmp	r0, #0
 8010894:	d035      	beq.n	8010902 <_scanf_i+0x15e>
 8010896:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801089a:	d124      	bne.n	80108e6 <_scanf_i+0x142>
 801089c:	0510      	lsls	r0, r2, #20
 801089e:	d522      	bpl.n	80108e6 <_scanf_i+0x142>
 80108a0:	f10b 0b01 	add.w	fp, fp, #1
 80108a4:	f1b9 0f00 	cmp.w	r9, #0
 80108a8:	d003      	beq.n	80108b2 <_scanf_i+0x10e>
 80108aa:	3301      	adds	r3, #1
 80108ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80108b0:	60a3      	str	r3, [r4, #8]
 80108b2:	6873      	ldr	r3, [r6, #4]
 80108b4:	3b01      	subs	r3, #1
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	6073      	str	r3, [r6, #4]
 80108ba:	dd1b      	ble.n	80108f4 <_scanf_i+0x150>
 80108bc:	6833      	ldr	r3, [r6, #0]
 80108be:	3301      	adds	r3, #1
 80108c0:	6033      	str	r3, [r6, #0]
 80108c2:	68a3      	ldr	r3, [r4, #8]
 80108c4:	3b01      	subs	r3, #1
 80108c6:	60a3      	str	r3, [r4, #8]
 80108c8:	e7d9      	b.n	801087e <_scanf_i+0xda>
 80108ca:	f1bb 0f02 	cmp.w	fp, #2
 80108ce:	d1ae      	bne.n	801082e <_scanf_i+0x8a>
 80108d0:	6822      	ldr	r2, [r4, #0]
 80108d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80108d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80108da:	d1bf      	bne.n	801085c <_scanf_i+0xb8>
 80108dc:	2310      	movs	r3, #16
 80108de:	6063      	str	r3, [r4, #4]
 80108e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108e4:	e7a2      	b.n	801082c <_scanf_i+0x88>
 80108e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80108ea:	6022      	str	r2, [r4, #0]
 80108ec:	780b      	ldrb	r3, [r1, #0]
 80108ee:	f805 3b01 	strb.w	r3, [r5], #1
 80108f2:	e7de      	b.n	80108b2 <_scanf_i+0x10e>
 80108f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80108f8:	4631      	mov	r1, r6
 80108fa:	4650      	mov	r0, sl
 80108fc:	4798      	blx	r3
 80108fe:	2800      	cmp	r0, #0
 8010900:	d0df      	beq.n	80108c2 <_scanf_i+0x11e>
 8010902:	6823      	ldr	r3, [r4, #0]
 8010904:	05db      	lsls	r3, r3, #23
 8010906:	d50d      	bpl.n	8010924 <_scanf_i+0x180>
 8010908:	42bd      	cmp	r5, r7
 801090a:	d909      	bls.n	8010920 <_scanf_i+0x17c>
 801090c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010914:	4632      	mov	r2, r6
 8010916:	4650      	mov	r0, sl
 8010918:	4798      	blx	r3
 801091a:	f105 39ff 	add.w	r9, r5, #4294967295
 801091e:	464d      	mov	r5, r9
 8010920:	42bd      	cmp	r5, r7
 8010922:	d02d      	beq.n	8010980 <_scanf_i+0x1dc>
 8010924:	6822      	ldr	r2, [r4, #0]
 8010926:	f012 0210 	ands.w	r2, r2, #16
 801092a:	d113      	bne.n	8010954 <_scanf_i+0x1b0>
 801092c:	702a      	strb	r2, [r5, #0]
 801092e:	6863      	ldr	r3, [r4, #4]
 8010930:	9e01      	ldr	r6, [sp, #4]
 8010932:	4639      	mov	r1, r7
 8010934:	4650      	mov	r0, sl
 8010936:	47b0      	blx	r6
 8010938:	6821      	ldr	r1, [r4, #0]
 801093a:	f8d8 3000 	ldr.w	r3, [r8]
 801093e:	f011 0f20 	tst.w	r1, #32
 8010942:	d013      	beq.n	801096c <_scanf_i+0x1c8>
 8010944:	1d1a      	adds	r2, r3, #4
 8010946:	f8c8 2000 	str.w	r2, [r8]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	6018      	str	r0, [r3, #0]
 801094e:	68e3      	ldr	r3, [r4, #12]
 8010950:	3301      	adds	r3, #1
 8010952:	60e3      	str	r3, [r4, #12]
 8010954:	1bed      	subs	r5, r5, r7
 8010956:	44ab      	add	fp, r5
 8010958:	6925      	ldr	r5, [r4, #16]
 801095a:	445d      	add	r5, fp
 801095c:	6125      	str	r5, [r4, #16]
 801095e:	2000      	movs	r0, #0
 8010960:	b007      	add	sp, #28
 8010962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010966:	f04f 0b00 	mov.w	fp, #0
 801096a:	e7ca      	b.n	8010902 <_scanf_i+0x15e>
 801096c:	1d1a      	adds	r2, r3, #4
 801096e:	f8c8 2000 	str.w	r2, [r8]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f011 0f01 	tst.w	r1, #1
 8010978:	bf14      	ite	ne
 801097a:	8018      	strhne	r0, [r3, #0]
 801097c:	6018      	streq	r0, [r3, #0]
 801097e:	e7e6      	b.n	801094e <_scanf_i+0x1aa>
 8010980:	2001      	movs	r0, #1
 8010982:	e7ed      	b.n	8010960 <_scanf_i+0x1bc>
 8010984:	08013cd0 	.word	0x08013cd0
 8010988:	08010dc1 	.word	0x08010dc1
 801098c:	08010cd9 	.word	0x08010cd9
 8010990:	0801419e 	.word	0x0801419e

08010994 <lflush>:
 8010994:	8983      	ldrh	r3, [r0, #12]
 8010996:	f003 0309 	and.w	r3, r3, #9
 801099a:	2b09      	cmp	r3, #9
 801099c:	d101      	bne.n	80109a2 <lflush+0xe>
 801099e:	f7fe bc03 	b.w	800f1a8 <fflush>
 80109a2:	2000      	movs	r0, #0
 80109a4:	4770      	bx	lr
	...

080109a8 <__srefill_r>:
 80109a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109aa:	460c      	mov	r4, r1
 80109ac:	4605      	mov	r5, r0
 80109ae:	b118      	cbz	r0, 80109b8 <__srefill_r+0x10>
 80109b0:	6983      	ldr	r3, [r0, #24]
 80109b2:	b90b      	cbnz	r3, 80109b8 <__srefill_r+0x10>
 80109b4:	f7fe fc62 	bl	800f27c <__sinit>
 80109b8:	4b3b      	ldr	r3, [pc, #236]	; (8010aa8 <__srefill_r+0x100>)
 80109ba:	429c      	cmp	r4, r3
 80109bc:	d10a      	bne.n	80109d4 <__srefill_r+0x2c>
 80109be:	686c      	ldr	r4, [r5, #4]
 80109c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109c4:	2300      	movs	r3, #0
 80109c6:	6063      	str	r3, [r4, #4]
 80109c8:	89a3      	ldrh	r3, [r4, #12]
 80109ca:	069e      	lsls	r6, r3, #26
 80109cc:	d50c      	bpl.n	80109e8 <__srefill_r+0x40>
 80109ce:	f04f 30ff 	mov.w	r0, #4294967295
 80109d2:	e066      	b.n	8010aa2 <__srefill_r+0xfa>
 80109d4:	4b35      	ldr	r3, [pc, #212]	; (8010aac <__srefill_r+0x104>)
 80109d6:	429c      	cmp	r4, r3
 80109d8:	d101      	bne.n	80109de <__srefill_r+0x36>
 80109da:	68ac      	ldr	r4, [r5, #8]
 80109dc:	e7f0      	b.n	80109c0 <__srefill_r+0x18>
 80109de:	4b34      	ldr	r3, [pc, #208]	; (8010ab0 <__srefill_r+0x108>)
 80109e0:	429c      	cmp	r4, r3
 80109e2:	bf08      	it	eq
 80109e4:	68ec      	ldreq	r4, [r5, #12]
 80109e6:	e7eb      	b.n	80109c0 <__srefill_r+0x18>
 80109e8:	0758      	lsls	r0, r3, #29
 80109ea:	d448      	bmi.n	8010a7e <__srefill_r+0xd6>
 80109ec:	06d9      	lsls	r1, r3, #27
 80109ee:	d405      	bmi.n	80109fc <__srefill_r+0x54>
 80109f0:	2309      	movs	r3, #9
 80109f2:	602b      	str	r3, [r5, #0]
 80109f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80109f8:	81a3      	strh	r3, [r4, #12]
 80109fa:	e7e8      	b.n	80109ce <__srefill_r+0x26>
 80109fc:	071a      	lsls	r2, r3, #28
 80109fe:	d50b      	bpl.n	8010a18 <__srefill_r+0x70>
 8010a00:	4621      	mov	r1, r4
 8010a02:	4628      	mov	r0, r5
 8010a04:	f7fe fb94 	bl	800f130 <_fflush_r>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d1e0      	bne.n	80109ce <__srefill_r+0x26>
 8010a0c:	89a3      	ldrh	r3, [r4, #12]
 8010a0e:	60a0      	str	r0, [r4, #8]
 8010a10:	f023 0308 	bic.w	r3, r3, #8
 8010a14:	81a3      	strh	r3, [r4, #12]
 8010a16:	61a0      	str	r0, [r4, #24]
 8010a18:	89a3      	ldrh	r3, [r4, #12]
 8010a1a:	f043 0304 	orr.w	r3, r3, #4
 8010a1e:	81a3      	strh	r3, [r4, #12]
 8010a20:	6923      	ldr	r3, [r4, #16]
 8010a22:	b91b      	cbnz	r3, 8010a2c <__srefill_r+0x84>
 8010a24:	4621      	mov	r1, r4
 8010a26:	4628      	mov	r0, r5
 8010a28:	f7fe fd0e 	bl	800f448 <__smakebuf_r>
 8010a2c:	89a6      	ldrh	r6, [r4, #12]
 8010a2e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8010a32:	07b3      	lsls	r3, r6, #30
 8010a34:	d00f      	beq.n	8010a56 <__srefill_r+0xae>
 8010a36:	2301      	movs	r3, #1
 8010a38:	81a3      	strh	r3, [r4, #12]
 8010a3a:	4b1e      	ldr	r3, [pc, #120]	; (8010ab4 <__srefill_r+0x10c>)
 8010a3c:	491e      	ldr	r1, [pc, #120]	; (8010ab8 <__srefill_r+0x110>)
 8010a3e:	6818      	ldr	r0, [r3, #0]
 8010a40:	f006 0609 	and.w	r6, r6, #9
 8010a44:	f7fe fc98 	bl	800f378 <_fwalk>
 8010a48:	2e09      	cmp	r6, #9
 8010a4a:	81a7      	strh	r7, [r4, #12]
 8010a4c:	d103      	bne.n	8010a56 <__srefill_r+0xae>
 8010a4e:	4621      	mov	r1, r4
 8010a50:	4628      	mov	r0, r5
 8010a52:	f7fe fae7 	bl	800f024 <__sflush_r>
 8010a56:	6922      	ldr	r2, [r4, #16]
 8010a58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a5a:	6963      	ldr	r3, [r4, #20]
 8010a5c:	6a21      	ldr	r1, [r4, #32]
 8010a5e:	6022      	str	r2, [r4, #0]
 8010a60:	4628      	mov	r0, r5
 8010a62:	47b0      	blx	r6
 8010a64:	2800      	cmp	r0, #0
 8010a66:	6060      	str	r0, [r4, #4]
 8010a68:	dc1c      	bgt.n	8010aa4 <__srefill_r+0xfc>
 8010a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a6e:	bf17      	itett	ne
 8010a70:	2200      	movne	r2, #0
 8010a72:	f043 0320 	orreq.w	r3, r3, #32
 8010a76:	6062      	strne	r2, [r4, #4]
 8010a78:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8010a7c:	e7bc      	b.n	80109f8 <__srefill_r+0x50>
 8010a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a80:	2900      	cmp	r1, #0
 8010a82:	d0cd      	beq.n	8010a20 <__srefill_r+0x78>
 8010a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a88:	4299      	cmp	r1, r3
 8010a8a:	d002      	beq.n	8010a92 <__srefill_r+0xea>
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	f7ff f8cb 	bl	800fc28 <_free_r>
 8010a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a94:	6063      	str	r3, [r4, #4]
 8010a96:	2000      	movs	r0, #0
 8010a98:	6360      	str	r0, [r4, #52]	; 0x34
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d0c0      	beq.n	8010a20 <__srefill_r+0x78>
 8010a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010aa0:	6023      	str	r3, [r4, #0]
 8010aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	e7fc      	b.n	8010aa2 <__srefill_r+0xfa>
 8010aa8:	08013fdc 	.word	0x08013fdc
 8010aac:	08013ffc 	.word	0x08013ffc
 8010ab0:	08013fbc 	.word	0x08013fbc
 8010ab4:	08013ef4 	.word	0x08013ef4
 8010ab8:	08010995 	.word	0x08010995

08010abc <_sbrk_r>:
 8010abc:	b538      	push	{r3, r4, r5, lr}
 8010abe:	4d06      	ldr	r5, [pc, #24]	; (8010ad8 <_sbrk_r+0x1c>)
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	4608      	mov	r0, r1
 8010ac6:	602b      	str	r3, [r5, #0]
 8010ac8:	f7f8 ff5e 	bl	8009988 <_sbrk>
 8010acc:	1c43      	adds	r3, r0, #1
 8010ace:	d102      	bne.n	8010ad6 <_sbrk_r+0x1a>
 8010ad0:	682b      	ldr	r3, [r5, #0]
 8010ad2:	b103      	cbz	r3, 8010ad6 <_sbrk_r+0x1a>
 8010ad4:	6023      	str	r3, [r4, #0]
 8010ad6:	bd38      	pop	{r3, r4, r5, pc}
 8010ad8:	20000584 	.word	0x20000584

08010adc <__sccl>:
 8010adc:	b570      	push	{r4, r5, r6, lr}
 8010ade:	780b      	ldrb	r3, [r1, #0]
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	2b5e      	cmp	r3, #94	; 0x5e
 8010ae4:	bf0b      	itete	eq
 8010ae6:	784b      	ldrbeq	r3, [r1, #1]
 8010ae8:	1c48      	addne	r0, r1, #1
 8010aea:	1c88      	addeq	r0, r1, #2
 8010aec:	2200      	movne	r2, #0
 8010aee:	bf08      	it	eq
 8010af0:	2201      	moveq	r2, #1
 8010af2:	1e61      	subs	r1, r4, #1
 8010af4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010af8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010afc:	42a9      	cmp	r1, r5
 8010afe:	d1fb      	bne.n	8010af8 <__sccl+0x1c>
 8010b00:	b90b      	cbnz	r3, 8010b06 <__sccl+0x2a>
 8010b02:	3801      	subs	r0, #1
 8010b04:	bd70      	pop	{r4, r5, r6, pc}
 8010b06:	f082 0201 	eor.w	r2, r2, #1
 8010b0a:	54e2      	strb	r2, [r4, r3]
 8010b0c:	4605      	mov	r5, r0
 8010b0e:	4628      	mov	r0, r5
 8010b10:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010b14:	292d      	cmp	r1, #45	; 0x2d
 8010b16:	d006      	beq.n	8010b26 <__sccl+0x4a>
 8010b18:	295d      	cmp	r1, #93	; 0x5d
 8010b1a:	d0f3      	beq.n	8010b04 <__sccl+0x28>
 8010b1c:	b909      	cbnz	r1, 8010b22 <__sccl+0x46>
 8010b1e:	4628      	mov	r0, r5
 8010b20:	e7f0      	b.n	8010b04 <__sccl+0x28>
 8010b22:	460b      	mov	r3, r1
 8010b24:	e7f1      	b.n	8010b0a <__sccl+0x2e>
 8010b26:	786e      	ldrb	r6, [r5, #1]
 8010b28:	2e5d      	cmp	r6, #93	; 0x5d
 8010b2a:	d0fa      	beq.n	8010b22 <__sccl+0x46>
 8010b2c:	42b3      	cmp	r3, r6
 8010b2e:	dcf8      	bgt.n	8010b22 <__sccl+0x46>
 8010b30:	3502      	adds	r5, #2
 8010b32:	4619      	mov	r1, r3
 8010b34:	3101      	adds	r1, #1
 8010b36:	428e      	cmp	r6, r1
 8010b38:	5462      	strb	r2, [r4, r1]
 8010b3a:	dcfb      	bgt.n	8010b34 <__sccl+0x58>
 8010b3c:	1af1      	subs	r1, r6, r3
 8010b3e:	3901      	subs	r1, #1
 8010b40:	1c58      	adds	r0, r3, #1
 8010b42:	42b3      	cmp	r3, r6
 8010b44:	bfa8      	it	ge
 8010b46:	2100      	movge	r1, #0
 8010b48:	1843      	adds	r3, r0, r1
 8010b4a:	e7e0      	b.n	8010b0e <__sccl+0x32>

08010b4c <__sread>:
 8010b4c:	b510      	push	{r4, lr}
 8010b4e:	460c      	mov	r4, r1
 8010b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b54:	f000 faf6 	bl	8011144 <_read_r>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	bfab      	itete	ge
 8010b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8010b60:	181b      	addge	r3, r3, r0
 8010b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b66:	bfac      	ite	ge
 8010b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b6a:	81a3      	strhlt	r3, [r4, #12]
 8010b6c:	bd10      	pop	{r4, pc}

08010b6e <__swrite>:
 8010b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b72:	461f      	mov	r7, r3
 8010b74:	898b      	ldrh	r3, [r1, #12]
 8010b76:	05db      	lsls	r3, r3, #23
 8010b78:	4605      	mov	r5, r0
 8010b7a:	460c      	mov	r4, r1
 8010b7c:	4616      	mov	r6, r2
 8010b7e:	d505      	bpl.n	8010b8c <__swrite+0x1e>
 8010b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b84:	2302      	movs	r3, #2
 8010b86:	2200      	movs	r2, #0
 8010b88:	f000 fa62 	bl	8011050 <_lseek_r>
 8010b8c:	89a3      	ldrh	r3, [r4, #12]
 8010b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b96:	81a3      	strh	r3, [r4, #12]
 8010b98:	4632      	mov	r2, r6
 8010b9a:	463b      	mov	r3, r7
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba2:	f000 b9e1 	b.w	8010f68 <_write_r>

08010ba6 <__sseek>:
 8010ba6:	b510      	push	{r4, lr}
 8010ba8:	460c      	mov	r4, r1
 8010baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bae:	f000 fa4f 	bl	8011050 <_lseek_r>
 8010bb2:	1c43      	adds	r3, r0, #1
 8010bb4:	89a3      	ldrh	r3, [r4, #12]
 8010bb6:	bf15      	itete	ne
 8010bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010bc2:	81a3      	strheq	r3, [r4, #12]
 8010bc4:	bf18      	it	ne
 8010bc6:	81a3      	strhne	r3, [r4, #12]
 8010bc8:	bd10      	pop	{r4, pc}

08010bca <__sclose>:
 8010bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bce:	f000 b9fb 	b.w	8010fc8 <_close_r>
	...

08010bd4 <_strtol_l.constprop.0>:
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bda:	d001      	beq.n	8010be0 <_strtol_l.constprop.0+0xc>
 8010bdc:	2b24      	cmp	r3, #36	; 0x24
 8010bde:	d906      	bls.n	8010bee <_strtol_l.constprop.0+0x1a>
 8010be0:	f7fc fd82 	bl	800d6e8 <__errno>
 8010be4:	2316      	movs	r3, #22
 8010be6:	6003      	str	r3, [r0, #0]
 8010be8:	2000      	movs	r0, #0
 8010bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010cd4 <_strtol_l.constprop.0+0x100>
 8010bf2:	460d      	mov	r5, r1
 8010bf4:	462e      	mov	r6, r5
 8010bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bfa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010bfe:	f017 0708 	ands.w	r7, r7, #8
 8010c02:	d1f7      	bne.n	8010bf4 <_strtol_l.constprop.0+0x20>
 8010c04:	2c2d      	cmp	r4, #45	; 0x2d
 8010c06:	d132      	bne.n	8010c6e <_strtol_l.constprop.0+0x9a>
 8010c08:	782c      	ldrb	r4, [r5, #0]
 8010c0a:	2701      	movs	r7, #1
 8010c0c:	1cb5      	adds	r5, r6, #2
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d05b      	beq.n	8010cca <_strtol_l.constprop.0+0xf6>
 8010c12:	2b10      	cmp	r3, #16
 8010c14:	d109      	bne.n	8010c2a <_strtol_l.constprop.0+0x56>
 8010c16:	2c30      	cmp	r4, #48	; 0x30
 8010c18:	d107      	bne.n	8010c2a <_strtol_l.constprop.0+0x56>
 8010c1a:	782c      	ldrb	r4, [r5, #0]
 8010c1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010c20:	2c58      	cmp	r4, #88	; 0x58
 8010c22:	d14d      	bne.n	8010cc0 <_strtol_l.constprop.0+0xec>
 8010c24:	786c      	ldrb	r4, [r5, #1]
 8010c26:	2310      	movs	r3, #16
 8010c28:	3502      	adds	r5, #2
 8010c2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010c2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c32:	f04f 0c00 	mov.w	ip, #0
 8010c36:	fbb8 f9f3 	udiv	r9, r8, r3
 8010c3a:	4666      	mov	r6, ip
 8010c3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010c40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010c44:	f1be 0f09 	cmp.w	lr, #9
 8010c48:	d816      	bhi.n	8010c78 <_strtol_l.constprop.0+0xa4>
 8010c4a:	4674      	mov	r4, lr
 8010c4c:	42a3      	cmp	r3, r4
 8010c4e:	dd24      	ble.n	8010c9a <_strtol_l.constprop.0+0xc6>
 8010c50:	f1bc 0f00 	cmp.w	ip, #0
 8010c54:	db1e      	blt.n	8010c94 <_strtol_l.constprop.0+0xc0>
 8010c56:	45b1      	cmp	r9, r6
 8010c58:	d31c      	bcc.n	8010c94 <_strtol_l.constprop.0+0xc0>
 8010c5a:	d101      	bne.n	8010c60 <_strtol_l.constprop.0+0x8c>
 8010c5c:	45a2      	cmp	sl, r4
 8010c5e:	db19      	blt.n	8010c94 <_strtol_l.constprop.0+0xc0>
 8010c60:	fb06 4603 	mla	r6, r6, r3, r4
 8010c64:	f04f 0c01 	mov.w	ip, #1
 8010c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c6c:	e7e8      	b.n	8010c40 <_strtol_l.constprop.0+0x6c>
 8010c6e:	2c2b      	cmp	r4, #43	; 0x2b
 8010c70:	bf04      	itt	eq
 8010c72:	782c      	ldrbeq	r4, [r5, #0]
 8010c74:	1cb5      	addeq	r5, r6, #2
 8010c76:	e7ca      	b.n	8010c0e <_strtol_l.constprop.0+0x3a>
 8010c78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010c7c:	f1be 0f19 	cmp.w	lr, #25
 8010c80:	d801      	bhi.n	8010c86 <_strtol_l.constprop.0+0xb2>
 8010c82:	3c37      	subs	r4, #55	; 0x37
 8010c84:	e7e2      	b.n	8010c4c <_strtol_l.constprop.0+0x78>
 8010c86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010c8a:	f1be 0f19 	cmp.w	lr, #25
 8010c8e:	d804      	bhi.n	8010c9a <_strtol_l.constprop.0+0xc6>
 8010c90:	3c57      	subs	r4, #87	; 0x57
 8010c92:	e7db      	b.n	8010c4c <_strtol_l.constprop.0+0x78>
 8010c94:	f04f 3cff 	mov.w	ip, #4294967295
 8010c98:	e7e6      	b.n	8010c68 <_strtol_l.constprop.0+0x94>
 8010c9a:	f1bc 0f00 	cmp.w	ip, #0
 8010c9e:	da05      	bge.n	8010cac <_strtol_l.constprop.0+0xd8>
 8010ca0:	2322      	movs	r3, #34	; 0x22
 8010ca2:	6003      	str	r3, [r0, #0]
 8010ca4:	4646      	mov	r6, r8
 8010ca6:	b942      	cbnz	r2, 8010cba <_strtol_l.constprop.0+0xe6>
 8010ca8:	4630      	mov	r0, r6
 8010caa:	e79e      	b.n	8010bea <_strtol_l.constprop.0+0x16>
 8010cac:	b107      	cbz	r7, 8010cb0 <_strtol_l.constprop.0+0xdc>
 8010cae:	4276      	negs	r6, r6
 8010cb0:	2a00      	cmp	r2, #0
 8010cb2:	d0f9      	beq.n	8010ca8 <_strtol_l.constprop.0+0xd4>
 8010cb4:	f1bc 0f00 	cmp.w	ip, #0
 8010cb8:	d000      	beq.n	8010cbc <_strtol_l.constprop.0+0xe8>
 8010cba:	1e69      	subs	r1, r5, #1
 8010cbc:	6011      	str	r1, [r2, #0]
 8010cbe:	e7f3      	b.n	8010ca8 <_strtol_l.constprop.0+0xd4>
 8010cc0:	2430      	movs	r4, #48	; 0x30
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d1b1      	bne.n	8010c2a <_strtol_l.constprop.0+0x56>
 8010cc6:	2308      	movs	r3, #8
 8010cc8:	e7af      	b.n	8010c2a <_strtol_l.constprop.0+0x56>
 8010cca:	2c30      	cmp	r4, #48	; 0x30
 8010ccc:	d0a5      	beq.n	8010c1a <_strtol_l.constprop.0+0x46>
 8010cce:	230a      	movs	r3, #10
 8010cd0:	e7ab      	b.n	8010c2a <_strtol_l.constprop.0+0x56>
 8010cd2:	bf00      	nop
 8010cd4:	080141dd 	.word	0x080141dd

08010cd8 <_strtol_r>:
 8010cd8:	f7ff bf7c 	b.w	8010bd4 <_strtol_l.constprop.0>

08010cdc <_strtoul_l.constprop.0>:
 8010cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ce0:	4f36      	ldr	r7, [pc, #216]	; (8010dbc <_strtoul_l.constprop.0+0xe0>)
 8010ce2:	4686      	mov	lr, r0
 8010ce4:	460d      	mov	r5, r1
 8010ce6:	4628      	mov	r0, r5
 8010ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010cec:	5de6      	ldrb	r6, [r4, r7]
 8010cee:	f016 0608 	ands.w	r6, r6, #8
 8010cf2:	d1f8      	bne.n	8010ce6 <_strtoul_l.constprop.0+0xa>
 8010cf4:	2c2d      	cmp	r4, #45	; 0x2d
 8010cf6:	d12f      	bne.n	8010d58 <_strtoul_l.constprop.0+0x7c>
 8010cf8:	782c      	ldrb	r4, [r5, #0]
 8010cfa:	2601      	movs	r6, #1
 8010cfc:	1c85      	adds	r5, r0, #2
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d057      	beq.n	8010db2 <_strtoul_l.constprop.0+0xd6>
 8010d02:	2b10      	cmp	r3, #16
 8010d04:	d109      	bne.n	8010d1a <_strtoul_l.constprop.0+0x3e>
 8010d06:	2c30      	cmp	r4, #48	; 0x30
 8010d08:	d107      	bne.n	8010d1a <_strtoul_l.constprop.0+0x3e>
 8010d0a:	7828      	ldrb	r0, [r5, #0]
 8010d0c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010d10:	2858      	cmp	r0, #88	; 0x58
 8010d12:	d149      	bne.n	8010da8 <_strtoul_l.constprop.0+0xcc>
 8010d14:	786c      	ldrb	r4, [r5, #1]
 8010d16:	2310      	movs	r3, #16
 8010d18:	3502      	adds	r5, #2
 8010d1a:	f04f 38ff 	mov.w	r8, #4294967295
 8010d1e:	2700      	movs	r7, #0
 8010d20:	fbb8 f8f3 	udiv	r8, r8, r3
 8010d24:	fb03 f908 	mul.w	r9, r3, r8
 8010d28:	ea6f 0909 	mvn.w	r9, r9
 8010d2c:	4638      	mov	r0, r7
 8010d2e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010d32:	f1bc 0f09 	cmp.w	ip, #9
 8010d36:	d814      	bhi.n	8010d62 <_strtoul_l.constprop.0+0x86>
 8010d38:	4664      	mov	r4, ip
 8010d3a:	42a3      	cmp	r3, r4
 8010d3c:	dd22      	ble.n	8010d84 <_strtoul_l.constprop.0+0xa8>
 8010d3e:	2f00      	cmp	r7, #0
 8010d40:	db1d      	blt.n	8010d7e <_strtoul_l.constprop.0+0xa2>
 8010d42:	4580      	cmp	r8, r0
 8010d44:	d31b      	bcc.n	8010d7e <_strtoul_l.constprop.0+0xa2>
 8010d46:	d101      	bne.n	8010d4c <_strtoul_l.constprop.0+0x70>
 8010d48:	45a1      	cmp	r9, r4
 8010d4a:	db18      	blt.n	8010d7e <_strtoul_l.constprop.0+0xa2>
 8010d4c:	fb00 4003 	mla	r0, r0, r3, r4
 8010d50:	2701      	movs	r7, #1
 8010d52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d56:	e7ea      	b.n	8010d2e <_strtoul_l.constprop.0+0x52>
 8010d58:	2c2b      	cmp	r4, #43	; 0x2b
 8010d5a:	bf04      	itt	eq
 8010d5c:	782c      	ldrbeq	r4, [r5, #0]
 8010d5e:	1c85      	addeq	r5, r0, #2
 8010d60:	e7cd      	b.n	8010cfe <_strtoul_l.constprop.0+0x22>
 8010d62:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010d66:	f1bc 0f19 	cmp.w	ip, #25
 8010d6a:	d801      	bhi.n	8010d70 <_strtoul_l.constprop.0+0x94>
 8010d6c:	3c37      	subs	r4, #55	; 0x37
 8010d6e:	e7e4      	b.n	8010d3a <_strtoul_l.constprop.0+0x5e>
 8010d70:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010d74:	f1bc 0f19 	cmp.w	ip, #25
 8010d78:	d804      	bhi.n	8010d84 <_strtoul_l.constprop.0+0xa8>
 8010d7a:	3c57      	subs	r4, #87	; 0x57
 8010d7c:	e7dd      	b.n	8010d3a <_strtoul_l.constprop.0+0x5e>
 8010d7e:	f04f 37ff 	mov.w	r7, #4294967295
 8010d82:	e7e6      	b.n	8010d52 <_strtoul_l.constprop.0+0x76>
 8010d84:	2f00      	cmp	r7, #0
 8010d86:	da07      	bge.n	8010d98 <_strtoul_l.constprop.0+0xbc>
 8010d88:	2322      	movs	r3, #34	; 0x22
 8010d8a:	f8ce 3000 	str.w	r3, [lr]
 8010d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d92:	b932      	cbnz	r2, 8010da2 <_strtoul_l.constprop.0+0xc6>
 8010d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d98:	b106      	cbz	r6, 8010d9c <_strtoul_l.constprop.0+0xc0>
 8010d9a:	4240      	negs	r0, r0
 8010d9c:	2a00      	cmp	r2, #0
 8010d9e:	d0f9      	beq.n	8010d94 <_strtoul_l.constprop.0+0xb8>
 8010da0:	b107      	cbz	r7, 8010da4 <_strtoul_l.constprop.0+0xc8>
 8010da2:	1e69      	subs	r1, r5, #1
 8010da4:	6011      	str	r1, [r2, #0]
 8010da6:	e7f5      	b.n	8010d94 <_strtoul_l.constprop.0+0xb8>
 8010da8:	2430      	movs	r4, #48	; 0x30
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1b5      	bne.n	8010d1a <_strtoul_l.constprop.0+0x3e>
 8010dae:	2308      	movs	r3, #8
 8010db0:	e7b3      	b.n	8010d1a <_strtoul_l.constprop.0+0x3e>
 8010db2:	2c30      	cmp	r4, #48	; 0x30
 8010db4:	d0a9      	beq.n	8010d0a <_strtoul_l.constprop.0+0x2e>
 8010db6:	230a      	movs	r3, #10
 8010db8:	e7af      	b.n	8010d1a <_strtoul_l.constprop.0+0x3e>
 8010dba:	bf00      	nop
 8010dbc:	080141dd 	.word	0x080141dd

08010dc0 <_strtoul_r>:
 8010dc0:	f7ff bf8c 	b.w	8010cdc <_strtoul_l.constprop.0>

08010dc4 <__submore>:
 8010dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc8:	460c      	mov	r4, r1
 8010dca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010dd0:	4299      	cmp	r1, r3
 8010dd2:	d11d      	bne.n	8010e10 <__submore+0x4c>
 8010dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010dd8:	f7fe ff92 	bl	800fd00 <_malloc_r>
 8010ddc:	b918      	cbnz	r0, 8010de6 <__submore+0x22>
 8010dde:	f04f 30ff 	mov.w	r0, #4294967295
 8010de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dea:	63a3      	str	r3, [r4, #56]	; 0x38
 8010dec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010df0:	6360      	str	r0, [r4, #52]	; 0x34
 8010df2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010df6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010dfa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010dfe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010e02:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010e06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010e0a:	6020      	str	r0, [r4, #0]
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	e7e8      	b.n	8010de2 <__submore+0x1e>
 8010e10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010e12:	0077      	lsls	r7, r6, #1
 8010e14:	463a      	mov	r2, r7
 8010e16:	f000 f965 	bl	80110e4 <_realloc_r>
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d0de      	beq.n	8010dde <__submore+0x1a>
 8010e20:	eb00 0806 	add.w	r8, r0, r6
 8010e24:	4601      	mov	r1, r0
 8010e26:	4632      	mov	r2, r6
 8010e28:	4640      	mov	r0, r8
 8010e2a:	f7fe fb55 	bl	800f4d8 <memcpy>
 8010e2e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010e32:	f8c4 8000 	str.w	r8, [r4]
 8010e36:	e7e9      	b.n	8010e0c <__submore+0x48>

08010e38 <_ungetc_r>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	4614      	mov	r4, r2
 8010e3c:	1c4a      	adds	r2, r1, #1
 8010e3e:	4606      	mov	r6, r0
 8010e40:	460d      	mov	r5, r1
 8010e42:	d103      	bne.n	8010e4c <_ungetc_r+0x14>
 8010e44:	f04f 35ff 	mov.w	r5, #4294967295
 8010e48:	4628      	mov	r0, r5
 8010e4a:	bd70      	pop	{r4, r5, r6, pc}
 8010e4c:	b118      	cbz	r0, 8010e56 <_ungetc_r+0x1e>
 8010e4e:	6983      	ldr	r3, [r0, #24]
 8010e50:	b90b      	cbnz	r3, 8010e56 <_ungetc_r+0x1e>
 8010e52:	f7fe fa13 	bl	800f27c <__sinit>
 8010e56:	4b41      	ldr	r3, [pc, #260]	; (8010f5c <_ungetc_r+0x124>)
 8010e58:	429c      	cmp	r4, r3
 8010e5a:	d11d      	bne.n	8010e98 <_ungetc_r+0x60>
 8010e5c:	6874      	ldr	r4, [r6, #4]
 8010e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e60:	07db      	lsls	r3, r3, #31
 8010e62:	d405      	bmi.n	8010e70 <_ungetc_r+0x38>
 8010e64:	89a3      	ldrh	r3, [r4, #12]
 8010e66:	0598      	lsls	r0, r3, #22
 8010e68:	d402      	bmi.n	8010e70 <_ungetc_r+0x38>
 8010e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e6c:	f7fe fac5 	bl	800f3fa <__retarget_lock_acquire_recursive>
 8010e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e74:	f023 0320 	bic.w	r3, r3, #32
 8010e78:	0759      	lsls	r1, r3, #29
 8010e7a:	81a3      	strh	r3, [r4, #12]
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	d42d      	bmi.n	8010edc <_ungetc_r+0xa4>
 8010e80:	06d3      	lsls	r3, r2, #27
 8010e82:	d413      	bmi.n	8010eac <_ungetc_r+0x74>
 8010e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e86:	07dd      	lsls	r5, r3, #31
 8010e88:	d4dc      	bmi.n	8010e44 <_ungetc_r+0xc>
 8010e8a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010e8e:	d1d9      	bne.n	8010e44 <_ungetc_r+0xc>
 8010e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e92:	f7fe fab3 	bl	800f3fc <__retarget_lock_release_recursive>
 8010e96:	e7d5      	b.n	8010e44 <_ungetc_r+0xc>
 8010e98:	4b31      	ldr	r3, [pc, #196]	; (8010f60 <_ungetc_r+0x128>)
 8010e9a:	429c      	cmp	r4, r3
 8010e9c:	d101      	bne.n	8010ea2 <_ungetc_r+0x6a>
 8010e9e:	68b4      	ldr	r4, [r6, #8]
 8010ea0:	e7dd      	b.n	8010e5e <_ungetc_r+0x26>
 8010ea2:	4b30      	ldr	r3, [pc, #192]	; (8010f64 <_ungetc_r+0x12c>)
 8010ea4:	429c      	cmp	r4, r3
 8010ea6:	bf08      	it	eq
 8010ea8:	68f4      	ldreq	r4, [r6, #12]
 8010eaa:	e7d8      	b.n	8010e5e <_ungetc_r+0x26>
 8010eac:	0710      	lsls	r0, r2, #28
 8010eae:	d511      	bpl.n	8010ed4 <_ungetc_r+0x9c>
 8010eb0:	4621      	mov	r1, r4
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f7fe f93c 	bl	800f130 <_fflush_r>
 8010eb8:	b130      	cbz	r0, 8010ec8 <_ungetc_r+0x90>
 8010eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ebc:	07d9      	lsls	r1, r3, #31
 8010ebe:	d4c1      	bmi.n	8010e44 <_ungetc_r+0xc>
 8010ec0:	89a3      	ldrh	r3, [r4, #12]
 8010ec2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010ec6:	e7e2      	b.n	8010e8e <_ungetc_r+0x56>
 8010ec8:	89a3      	ldrh	r3, [r4, #12]
 8010eca:	60a0      	str	r0, [r4, #8]
 8010ecc:	f023 0308 	bic.w	r3, r3, #8
 8010ed0:	81a3      	strh	r3, [r4, #12]
 8010ed2:	61a0      	str	r0, [r4, #24]
 8010ed4:	89a3      	ldrh	r3, [r4, #12]
 8010ed6:	f043 0304 	orr.w	r3, r3, #4
 8010eda:	81a3      	strh	r3, [r4, #12]
 8010edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ede:	6862      	ldr	r2, [r4, #4]
 8010ee0:	b2ed      	uxtb	r5, r5
 8010ee2:	b1d3      	cbz	r3, 8010f1a <_ungetc_r+0xe2>
 8010ee4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	dc05      	bgt.n	8010ef6 <_ungetc_r+0xbe>
 8010eea:	4621      	mov	r1, r4
 8010eec:	4630      	mov	r0, r6
 8010eee:	f7ff ff69 	bl	8010dc4 <__submore>
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	d1e1      	bne.n	8010eba <_ungetc_r+0x82>
 8010ef6:	6823      	ldr	r3, [r4, #0]
 8010ef8:	1e5a      	subs	r2, r3, #1
 8010efa:	6022      	str	r2, [r4, #0]
 8010efc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010f00:	6863      	ldr	r3, [r4, #4]
 8010f02:	3301      	adds	r3, #1
 8010f04:	6063      	str	r3, [r4, #4]
 8010f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f08:	07da      	lsls	r2, r3, #31
 8010f0a:	d49d      	bmi.n	8010e48 <_ungetc_r+0x10>
 8010f0c:	89a3      	ldrh	r3, [r4, #12]
 8010f0e:	059b      	lsls	r3, r3, #22
 8010f10:	d49a      	bmi.n	8010e48 <_ungetc_r+0x10>
 8010f12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f14:	f7fe fa72 	bl	800f3fc <__retarget_lock_release_recursive>
 8010f18:	e796      	b.n	8010e48 <_ungetc_r+0x10>
 8010f1a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8010f1c:	6920      	ldr	r0, [r4, #16]
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	f001 0101 	and.w	r1, r1, #1
 8010f24:	b160      	cbz	r0, 8010f40 <_ungetc_r+0x108>
 8010f26:	4298      	cmp	r0, r3
 8010f28:	d20a      	bcs.n	8010f40 <_ungetc_r+0x108>
 8010f2a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8010f2e:	42a8      	cmp	r0, r5
 8010f30:	d106      	bne.n	8010f40 <_ungetc_r+0x108>
 8010f32:	3b01      	subs	r3, #1
 8010f34:	3201      	adds	r2, #1
 8010f36:	6023      	str	r3, [r4, #0]
 8010f38:	6062      	str	r2, [r4, #4]
 8010f3a:	2900      	cmp	r1, #0
 8010f3c:	d184      	bne.n	8010e48 <_ungetc_r+0x10>
 8010f3e:	e7e5      	b.n	8010f0c <_ungetc_r+0xd4>
 8010f40:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f48:	6363      	str	r3, [r4, #52]	; 0x34
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8010f4e:	4623      	mov	r3, r4
 8010f50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010f54:	6023      	str	r3, [r4, #0]
 8010f56:	2301      	movs	r3, #1
 8010f58:	6063      	str	r3, [r4, #4]
 8010f5a:	e7ee      	b.n	8010f3a <_ungetc_r+0x102>
 8010f5c:	08013fdc 	.word	0x08013fdc
 8010f60:	08013ffc 	.word	0x08013ffc
 8010f64:	08013fbc 	.word	0x08013fbc

08010f68 <_write_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	4d07      	ldr	r5, [pc, #28]	; (8010f88 <_write_r+0x20>)
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	4608      	mov	r0, r1
 8010f70:	4611      	mov	r1, r2
 8010f72:	2200      	movs	r2, #0
 8010f74:	602a      	str	r2, [r5, #0]
 8010f76:	461a      	mov	r2, r3
 8010f78:	f7f8 fcb5 	bl	80098e6 <_write>
 8010f7c:	1c43      	adds	r3, r0, #1
 8010f7e:	d102      	bne.n	8010f86 <_write_r+0x1e>
 8010f80:	682b      	ldr	r3, [r5, #0]
 8010f82:	b103      	cbz	r3, 8010f86 <_write_r+0x1e>
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	bd38      	pop	{r3, r4, r5, pc}
 8010f88:	20000584 	.word	0x20000584

08010f8c <__assert_func>:
 8010f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f8e:	4614      	mov	r4, r2
 8010f90:	461a      	mov	r2, r3
 8010f92:	4b09      	ldr	r3, [pc, #36]	; (8010fb8 <__assert_func+0x2c>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4605      	mov	r5, r0
 8010f98:	68d8      	ldr	r0, [r3, #12]
 8010f9a:	b14c      	cbz	r4, 8010fb0 <__assert_func+0x24>
 8010f9c:	4b07      	ldr	r3, [pc, #28]	; (8010fbc <__assert_func+0x30>)
 8010f9e:	9100      	str	r1, [sp, #0]
 8010fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fa4:	4906      	ldr	r1, [pc, #24]	; (8010fc0 <__assert_func+0x34>)
 8010fa6:	462b      	mov	r3, r5
 8010fa8:	f000 f81e 	bl	8010fe8 <fiprintf>
 8010fac:	f000 f8e9 	bl	8011182 <abort>
 8010fb0:	4b04      	ldr	r3, [pc, #16]	; (8010fc4 <__assert_func+0x38>)
 8010fb2:	461c      	mov	r4, r3
 8010fb4:	e7f3      	b.n	8010f9e <__assert_func+0x12>
 8010fb6:	bf00      	nop
 8010fb8:	20000014 	.word	0x20000014
 8010fbc:	080141a0 	.word	0x080141a0
 8010fc0:	080141ad 	.word	0x080141ad
 8010fc4:	080141db 	.word	0x080141db

08010fc8 <_close_r>:
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	4d06      	ldr	r5, [pc, #24]	; (8010fe4 <_close_r+0x1c>)
 8010fcc:	2300      	movs	r3, #0
 8010fce:	4604      	mov	r4, r0
 8010fd0:	4608      	mov	r0, r1
 8010fd2:	602b      	str	r3, [r5, #0]
 8010fd4:	f7f8 fca3 	bl	800991e <_close>
 8010fd8:	1c43      	adds	r3, r0, #1
 8010fda:	d102      	bne.n	8010fe2 <_close_r+0x1a>
 8010fdc:	682b      	ldr	r3, [r5, #0]
 8010fde:	b103      	cbz	r3, 8010fe2 <_close_r+0x1a>
 8010fe0:	6023      	str	r3, [r4, #0]
 8010fe2:	bd38      	pop	{r3, r4, r5, pc}
 8010fe4:	20000584 	.word	0x20000584

08010fe8 <fiprintf>:
 8010fe8:	b40e      	push	{r1, r2, r3}
 8010fea:	b503      	push	{r0, r1, lr}
 8010fec:	4601      	mov	r1, r0
 8010fee:	ab03      	add	r3, sp, #12
 8010ff0:	4805      	ldr	r0, [pc, #20]	; (8011008 <fiprintf+0x20>)
 8010ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ff6:	6800      	ldr	r0, [r0, #0]
 8010ff8:	9301      	str	r3, [sp, #4]
 8010ffa:	f7ff f87b 	bl	80100f4 <_vfiprintf_r>
 8010ffe:	b002      	add	sp, #8
 8011000:	f85d eb04 	ldr.w	lr, [sp], #4
 8011004:	b003      	add	sp, #12
 8011006:	4770      	bx	lr
 8011008:	20000014 	.word	0x20000014

0801100c <_fstat_r>:
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	4d07      	ldr	r5, [pc, #28]	; (801102c <_fstat_r+0x20>)
 8011010:	2300      	movs	r3, #0
 8011012:	4604      	mov	r4, r0
 8011014:	4608      	mov	r0, r1
 8011016:	4611      	mov	r1, r2
 8011018:	602b      	str	r3, [r5, #0]
 801101a:	f7f8 fc8c 	bl	8009936 <_fstat>
 801101e:	1c43      	adds	r3, r0, #1
 8011020:	d102      	bne.n	8011028 <_fstat_r+0x1c>
 8011022:	682b      	ldr	r3, [r5, #0]
 8011024:	b103      	cbz	r3, 8011028 <_fstat_r+0x1c>
 8011026:	6023      	str	r3, [r4, #0]
 8011028:	bd38      	pop	{r3, r4, r5, pc}
 801102a:	bf00      	nop
 801102c:	20000584 	.word	0x20000584

08011030 <_isatty_r>:
 8011030:	b538      	push	{r3, r4, r5, lr}
 8011032:	4d06      	ldr	r5, [pc, #24]	; (801104c <_isatty_r+0x1c>)
 8011034:	2300      	movs	r3, #0
 8011036:	4604      	mov	r4, r0
 8011038:	4608      	mov	r0, r1
 801103a:	602b      	str	r3, [r5, #0]
 801103c:	f7f8 fc8b 	bl	8009956 <_isatty>
 8011040:	1c43      	adds	r3, r0, #1
 8011042:	d102      	bne.n	801104a <_isatty_r+0x1a>
 8011044:	682b      	ldr	r3, [r5, #0]
 8011046:	b103      	cbz	r3, 801104a <_isatty_r+0x1a>
 8011048:	6023      	str	r3, [r4, #0]
 801104a:	bd38      	pop	{r3, r4, r5, pc}
 801104c:	20000584 	.word	0x20000584

08011050 <_lseek_r>:
 8011050:	b538      	push	{r3, r4, r5, lr}
 8011052:	4d07      	ldr	r5, [pc, #28]	; (8011070 <_lseek_r+0x20>)
 8011054:	4604      	mov	r4, r0
 8011056:	4608      	mov	r0, r1
 8011058:	4611      	mov	r1, r2
 801105a:	2200      	movs	r2, #0
 801105c:	602a      	str	r2, [r5, #0]
 801105e:	461a      	mov	r2, r3
 8011060:	f7f8 fc84 	bl	800996c <_lseek>
 8011064:	1c43      	adds	r3, r0, #1
 8011066:	d102      	bne.n	801106e <_lseek_r+0x1e>
 8011068:	682b      	ldr	r3, [r5, #0]
 801106a:	b103      	cbz	r3, 801106e <_lseek_r+0x1e>
 801106c:	6023      	str	r3, [r4, #0]
 801106e:	bd38      	pop	{r3, r4, r5, pc}
 8011070:	20000584 	.word	0x20000584

08011074 <__ascii_mbtowc>:
 8011074:	b082      	sub	sp, #8
 8011076:	b901      	cbnz	r1, 801107a <__ascii_mbtowc+0x6>
 8011078:	a901      	add	r1, sp, #4
 801107a:	b142      	cbz	r2, 801108e <__ascii_mbtowc+0x1a>
 801107c:	b14b      	cbz	r3, 8011092 <__ascii_mbtowc+0x1e>
 801107e:	7813      	ldrb	r3, [r2, #0]
 8011080:	600b      	str	r3, [r1, #0]
 8011082:	7812      	ldrb	r2, [r2, #0]
 8011084:	1e10      	subs	r0, r2, #0
 8011086:	bf18      	it	ne
 8011088:	2001      	movne	r0, #1
 801108a:	b002      	add	sp, #8
 801108c:	4770      	bx	lr
 801108e:	4610      	mov	r0, r2
 8011090:	e7fb      	b.n	801108a <__ascii_mbtowc+0x16>
 8011092:	f06f 0001 	mvn.w	r0, #1
 8011096:	e7f8      	b.n	801108a <__ascii_mbtowc+0x16>

08011098 <memmove>:
 8011098:	4288      	cmp	r0, r1
 801109a:	b510      	push	{r4, lr}
 801109c:	eb01 0402 	add.w	r4, r1, r2
 80110a0:	d902      	bls.n	80110a8 <memmove+0x10>
 80110a2:	4284      	cmp	r4, r0
 80110a4:	4623      	mov	r3, r4
 80110a6:	d807      	bhi.n	80110b8 <memmove+0x20>
 80110a8:	1e43      	subs	r3, r0, #1
 80110aa:	42a1      	cmp	r1, r4
 80110ac:	d008      	beq.n	80110c0 <memmove+0x28>
 80110ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110b6:	e7f8      	b.n	80110aa <memmove+0x12>
 80110b8:	4402      	add	r2, r0
 80110ba:	4601      	mov	r1, r0
 80110bc:	428a      	cmp	r2, r1
 80110be:	d100      	bne.n	80110c2 <memmove+0x2a>
 80110c0:	bd10      	pop	{r4, pc}
 80110c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110ca:	e7f7      	b.n	80110bc <memmove+0x24>

080110cc <__malloc_lock>:
 80110cc:	4801      	ldr	r0, [pc, #4]	; (80110d4 <__malloc_lock+0x8>)
 80110ce:	f7fe b994 	b.w	800f3fa <__retarget_lock_acquire_recursive>
 80110d2:	bf00      	nop
 80110d4:	20000578 	.word	0x20000578

080110d8 <__malloc_unlock>:
 80110d8:	4801      	ldr	r0, [pc, #4]	; (80110e0 <__malloc_unlock+0x8>)
 80110da:	f7fe b98f 	b.w	800f3fc <__retarget_lock_release_recursive>
 80110de:	bf00      	nop
 80110e0:	20000578 	.word	0x20000578

080110e4 <_realloc_r>:
 80110e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e8:	4680      	mov	r8, r0
 80110ea:	4614      	mov	r4, r2
 80110ec:	460e      	mov	r6, r1
 80110ee:	b921      	cbnz	r1, 80110fa <_realloc_r+0x16>
 80110f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110f4:	4611      	mov	r1, r2
 80110f6:	f7fe be03 	b.w	800fd00 <_malloc_r>
 80110fa:	b92a      	cbnz	r2, 8011108 <_realloc_r+0x24>
 80110fc:	f7fe fd94 	bl	800fc28 <_free_r>
 8011100:	4625      	mov	r5, r4
 8011102:	4628      	mov	r0, r5
 8011104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011108:	f000 f842 	bl	8011190 <_malloc_usable_size_r>
 801110c:	4284      	cmp	r4, r0
 801110e:	4607      	mov	r7, r0
 8011110:	d802      	bhi.n	8011118 <_realloc_r+0x34>
 8011112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011116:	d812      	bhi.n	801113e <_realloc_r+0x5a>
 8011118:	4621      	mov	r1, r4
 801111a:	4640      	mov	r0, r8
 801111c:	f7fe fdf0 	bl	800fd00 <_malloc_r>
 8011120:	4605      	mov	r5, r0
 8011122:	2800      	cmp	r0, #0
 8011124:	d0ed      	beq.n	8011102 <_realloc_r+0x1e>
 8011126:	42bc      	cmp	r4, r7
 8011128:	4622      	mov	r2, r4
 801112a:	4631      	mov	r1, r6
 801112c:	bf28      	it	cs
 801112e:	463a      	movcs	r2, r7
 8011130:	f7fe f9d2 	bl	800f4d8 <memcpy>
 8011134:	4631      	mov	r1, r6
 8011136:	4640      	mov	r0, r8
 8011138:	f7fe fd76 	bl	800fc28 <_free_r>
 801113c:	e7e1      	b.n	8011102 <_realloc_r+0x1e>
 801113e:	4635      	mov	r5, r6
 8011140:	e7df      	b.n	8011102 <_realloc_r+0x1e>
	...

08011144 <_read_r>:
 8011144:	b538      	push	{r3, r4, r5, lr}
 8011146:	4d07      	ldr	r5, [pc, #28]	; (8011164 <_read_r+0x20>)
 8011148:	4604      	mov	r4, r0
 801114a:	4608      	mov	r0, r1
 801114c:	4611      	mov	r1, r2
 801114e:	2200      	movs	r2, #0
 8011150:	602a      	str	r2, [r5, #0]
 8011152:	461a      	mov	r2, r3
 8011154:	f7f8 fbaa 	bl	80098ac <_read>
 8011158:	1c43      	adds	r3, r0, #1
 801115a:	d102      	bne.n	8011162 <_read_r+0x1e>
 801115c:	682b      	ldr	r3, [r5, #0]
 801115e:	b103      	cbz	r3, 8011162 <_read_r+0x1e>
 8011160:	6023      	str	r3, [r4, #0]
 8011162:	bd38      	pop	{r3, r4, r5, pc}
 8011164:	20000584 	.word	0x20000584

08011168 <__ascii_wctomb>:
 8011168:	b149      	cbz	r1, 801117e <__ascii_wctomb+0x16>
 801116a:	2aff      	cmp	r2, #255	; 0xff
 801116c:	bf85      	ittet	hi
 801116e:	238a      	movhi	r3, #138	; 0x8a
 8011170:	6003      	strhi	r3, [r0, #0]
 8011172:	700a      	strbls	r2, [r1, #0]
 8011174:	f04f 30ff 	movhi.w	r0, #4294967295
 8011178:	bf98      	it	ls
 801117a:	2001      	movls	r0, #1
 801117c:	4770      	bx	lr
 801117e:	4608      	mov	r0, r1
 8011180:	4770      	bx	lr

08011182 <abort>:
 8011182:	b508      	push	{r3, lr}
 8011184:	2006      	movs	r0, #6
 8011186:	f000 f833 	bl	80111f0 <raise>
 801118a:	2001      	movs	r0, #1
 801118c:	f7f8 fb84 	bl	8009898 <_exit>

08011190 <_malloc_usable_size_r>:
 8011190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011194:	1f18      	subs	r0, r3, #4
 8011196:	2b00      	cmp	r3, #0
 8011198:	bfbc      	itt	lt
 801119a:	580b      	ldrlt	r3, [r1, r0]
 801119c:	18c0      	addlt	r0, r0, r3
 801119e:	4770      	bx	lr

080111a0 <_raise_r>:
 80111a0:	291f      	cmp	r1, #31
 80111a2:	b538      	push	{r3, r4, r5, lr}
 80111a4:	4604      	mov	r4, r0
 80111a6:	460d      	mov	r5, r1
 80111a8:	d904      	bls.n	80111b4 <_raise_r+0x14>
 80111aa:	2316      	movs	r3, #22
 80111ac:	6003      	str	r3, [r0, #0]
 80111ae:	f04f 30ff 	mov.w	r0, #4294967295
 80111b2:	bd38      	pop	{r3, r4, r5, pc}
 80111b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80111b6:	b112      	cbz	r2, 80111be <_raise_r+0x1e>
 80111b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80111bc:	b94b      	cbnz	r3, 80111d2 <_raise_r+0x32>
 80111be:	4620      	mov	r0, r4
 80111c0:	f000 f830 	bl	8011224 <_getpid_r>
 80111c4:	462a      	mov	r2, r5
 80111c6:	4601      	mov	r1, r0
 80111c8:	4620      	mov	r0, r4
 80111ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111ce:	f000 b817 	b.w	8011200 <_kill_r>
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d00a      	beq.n	80111ec <_raise_r+0x4c>
 80111d6:	1c59      	adds	r1, r3, #1
 80111d8:	d103      	bne.n	80111e2 <_raise_r+0x42>
 80111da:	2316      	movs	r3, #22
 80111dc:	6003      	str	r3, [r0, #0]
 80111de:	2001      	movs	r0, #1
 80111e0:	e7e7      	b.n	80111b2 <_raise_r+0x12>
 80111e2:	2400      	movs	r4, #0
 80111e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80111e8:	4628      	mov	r0, r5
 80111ea:	4798      	blx	r3
 80111ec:	2000      	movs	r0, #0
 80111ee:	e7e0      	b.n	80111b2 <_raise_r+0x12>

080111f0 <raise>:
 80111f0:	4b02      	ldr	r3, [pc, #8]	; (80111fc <raise+0xc>)
 80111f2:	4601      	mov	r1, r0
 80111f4:	6818      	ldr	r0, [r3, #0]
 80111f6:	f7ff bfd3 	b.w	80111a0 <_raise_r>
 80111fa:	bf00      	nop
 80111fc:	20000014 	.word	0x20000014

08011200 <_kill_r>:
 8011200:	b538      	push	{r3, r4, r5, lr}
 8011202:	4d07      	ldr	r5, [pc, #28]	; (8011220 <_kill_r+0x20>)
 8011204:	2300      	movs	r3, #0
 8011206:	4604      	mov	r4, r0
 8011208:	4608      	mov	r0, r1
 801120a:	4611      	mov	r1, r2
 801120c:	602b      	str	r3, [r5, #0]
 801120e:	f7f8 fb33 	bl	8009878 <_kill>
 8011212:	1c43      	adds	r3, r0, #1
 8011214:	d102      	bne.n	801121c <_kill_r+0x1c>
 8011216:	682b      	ldr	r3, [r5, #0]
 8011218:	b103      	cbz	r3, 801121c <_kill_r+0x1c>
 801121a:	6023      	str	r3, [r4, #0]
 801121c:	bd38      	pop	{r3, r4, r5, pc}
 801121e:	bf00      	nop
 8011220:	20000584 	.word	0x20000584

08011224 <_getpid_r>:
 8011224:	f7f8 bb20 	b.w	8009868 <_getpid>

08011228 <_init>:
 8011228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801122a:	bf00      	nop
 801122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801122e:	bc08      	pop	{r3}
 8011230:	469e      	mov	lr, r3
 8011232:	4770      	bx	lr

08011234 <_fini>:
 8011234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011236:	bf00      	nop
 8011238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801123a:	bc08      	pop	{r3}
 801123c:	469e      	mov	lr, r3
 801123e:	4770      	bx	lr
