
SHL_Pod_SecondaryBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004188  08004188  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004190  08004190  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004190  08004190  00014190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004194  08004194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  2000000c  080041a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  080041a4  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcca  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002287  00000000  00000000  0002fd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00031f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00032c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025758  00000000  00000000  00033878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e59a  00000000  00000000  00058fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eff88  00000000  00000000  0006756a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001574f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b0  00000000  00000000  00157548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004158 	.word	0x08004158

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004158 	.word	0x08004158

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fcc1 	bl	8000e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f80e 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f9a2 	bl	8000854 <MX_GPIO_Init>
  MX_ETH_Init();
 8000510:	f000 f8d0 	bl	80006b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f940 	bl	8000798 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 f96e 	bl	80007f8 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800051c:	f000 f896 	bl	800064c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f90a 	bl	8000738 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x24>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0b4      	sub	sp, #208	; 0xd0
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fe06 	bl	8004148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2284      	movs	r2, #132	; 0x84
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f003 fdf7 	bl	8004148 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055a:	f001 fe71 	bl	8002240 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b38      	ldr	r3, [pc, #224]	; (8000640 <SystemClock_Config+0x118>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <SystemClock_Config+0x118>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6413      	str	r3, [r2, #64]	; 0x40
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <SystemClock_Config+0x118>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000576:	4b33      	ldr	r3, [pc, #204]	; (8000644 <SystemClock_Config+0x11c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <SystemClock_Config+0x11c>)
 8000580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <SystemClock_Config+0x11c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000598:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800059c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b4:	2348      	movs	r3, #72	; 0x48
 80005b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c0:	2303      	movs	r3, #3
 80005c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fe48 	bl	8002260 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005d6:	f000 f9df 	bl	8000998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f002 f8d1 	bl	80027a8 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800060c:	f000 f9c4 	bl	8000998 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <SystemClock_Config+0x120>)
 8000612:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000614:	2300      	movs	r3, #0
 8000616:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000618:	2300      	movs	r3, #0
 800061a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fac0 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000632:	f000 f9b1 	bl	8000998 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	37d0      	adds	r7, #208	; 0xd0
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000
 8000648:	00200180 	.word	0x00200180

0800064c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_CAN1_Init+0x60>)
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000654:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_CAN1_Init+0x60>)
 8000658:	2210      	movs	r2, #16
 800065a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_CAN1_Init+0x60>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_CAN1_Init+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_CAN1_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_CAN1_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_CAN1_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_CAN1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_CAN1_Init+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_CAN1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_CAN1_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_CAN1_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_CAN1_Init+0x60>)
 800069a:	f000 fc77 	bl	8000f8c <HAL_CAN_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006a4:	f000 f978 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000053c 	.word	0x2000053c
 80006b0:	40006400 	.word	0x40006400

080006b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_ETH_Init+0x78>)
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_ETH_Init+0x7c>)
 80006bc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_ETH_Init+0x78>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_ETH_Init+0x78>)
 80006c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ca:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_ETH_Init+0x78>)
 80006ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ETH_Init+0x78>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_ETH_Init+0x80>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_ETH_Init+0x80>)
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_ETH_Init+0x80>)
 80006e8:	22e1      	movs	r2, #225	; 0xe1
 80006ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_ETH_Init+0x80>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_ETH_Init+0x80>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_ETH_Init+0x80>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_ETH_Init+0x78>)
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <MX_ETH_Init+0x80>)
 8000702:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_ETH_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_ETH_Init+0x78>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_ETH_Init+0x78>)
 8000712:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000716:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_ETH_Init+0x78>)
 800071a:	f000 fe19 	bl	8001350 <HAL_ETH_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000724:	f000 f938 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000564 	.word	0x20000564
 8000730:	40028000 	.word	0x40028000
 8000734:	20000028 	.word	0x20000028

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MX_USART2_UART_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800077c:	f002 fe06 	bl	800338c <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 f907 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200004b8 	.word	0x200004b8
 8000794:	40004400 	.word	0x40004400

08000798 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART3_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007dc:	f002 fdd6 	bl	800338c <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f8d7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000030 	.word	0x20000030
 80007f4:	40004800 	.word	0x40004800

080007f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000802:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2206      	movs	r2, #6
 8000808:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2202      	movs	r2, #2
 800080e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2202      	movs	r2, #2
 800081a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2201      	movs	r2, #1
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	f001 fbb7 	bl	8001fae <HAL_PCD_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f8a7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000b4 	.word	0x200000b4

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <MX_GPIO_Init+0x130>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a45      	ldr	r2, [pc, #276]	; (8000984 <MX_GPIO_Init+0x130>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b43      	ldr	r3, [pc, #268]	; (8000984 <MX_GPIO_Init+0x130>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <MX_GPIO_Init+0x130>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a3f      	ldr	r2, [pc, #252]	; (8000984 <MX_GPIO_Init+0x130>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <MX_GPIO_Init+0x130>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <MX_GPIO_Init+0x130>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a39      	ldr	r2, [pc, #228]	; (8000984 <MX_GPIO_Init+0x130>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <MX_GPIO_Init+0x130>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_GPIO_Init+0x130>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a33      	ldr	r2, [pc, #204]	; (8000984 <MX_GPIO_Init+0x130>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <MX_GPIO_Init+0x130>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <MX_GPIO_Init+0x130>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <MX_GPIO_Init+0x130>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <MX_GPIO_Init+0x130>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_GPIO_Init+0x130>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <MX_GPIO_Init+0x130>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_GPIO_Init+0x130>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_GPIO_Init+0x134>)
 8000902:	f001 fb3b 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2140      	movs	r1, #64	; 0x40
 800090a:	4820      	ldr	r0, [pc, #128]	; (800098c <MX_GPIO_Init+0x138>)
 800090c:	f001 fb36 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_GPIO_Init+0x13c>)
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <MX_GPIO_Init+0x140>)
 8000926:	f001 f97d 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800092a:	f244 0381 	movw	r3, #16513	; 0x4081
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <MX_GPIO_Init+0x134>)
 8000944:	f001 f96e 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000948:	2340      	movs	r3, #64	; 0x40
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <MX_GPIO_Init+0x138>)
 8000960:	f001 f960 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_GPIO_Init+0x138>)
 8000978:	f001 f954 	bl	8001c24 <HAL_GPIO_Init>

}
 800097c:	bf00      	nop
 800097e:	3730      	adds	r7, #48	; 0x30
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40021800 	.word	0x40021800
 8000990:	10110000 	.word	0x10110000
 8000994:	40020800 	.word	0x40020800

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_CAN_MspInit+0x7c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d127      	bne.n	8000a5e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_CAN_MspInit+0x80>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a4e:	2309      	movs	r3, #9
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_CAN_MspInit+0x84>)
 8000a5a:	f001 f8e3 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40006400 	.word	0x40006400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a4e      	ldr	r2, [pc, #312]	; (8000bcc <HAL_ETH_MspInit+0x158>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	f040 8096 	bne.w	8000bc4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a98:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a4c      	ldr	r2, [pc, #304]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a46      	ldr	r2, [pc, #280]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	4b41      	ldr	r3, [pc, #260]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a40      	ldr	r2, [pc, #256]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b3e      	ldr	r3, [pc, #248]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	4b3b      	ldr	r3, [pc, #236]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a3a      	ldr	r2, [pc, #232]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b38      	ldr	r3, [pc, #224]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a34      	ldr	r2, [pc, #208]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a2e      	ldr	r2, [pc, #184]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b40:	2332      	movs	r3, #50	; 0x32
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b50:	230b      	movs	r3, #11
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481e      	ldr	r0, [pc, #120]	; (8000bd4 <HAL_ETH_MspInit+0x160>)
 8000b5c:	f001 f862 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b60:	2386      	movs	r3, #134	; 0x86
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b70:	230b      	movs	r3, #11
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <HAL_ETH_MspInit+0x164>)
 8000b7c:	f001 f852 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b92:	230b      	movs	r3, #11
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <HAL_ETH_MspInit+0x168>)
 8000b9e:	f001 f841 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb4:	230b      	movs	r3, #11
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <HAL_ETH_MspInit+0x16c>)
 8000bc0:	f001 f830 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3738      	adds	r7, #56	; 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40028000 	.word	0x40028000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40021800 	.word	0x40021800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a3c      	ldr	r2, [pc, #240]	; (8000cf4 <HAL_UART_MspInit+0x110>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d144      	bne.n	8000c90 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a3b      	ldr	r2, [pc, #236]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a35      	ldr	r2, [pc, #212]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4824      	ldr	r0, [pc, #144]	; (8000cfc <HAL_UART_MspInit+0x118>)
 8000c6a:	f000 ffdb 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	481d      	ldr	r0, [pc, #116]	; (8000d00 <HAL_UART_MspInit+0x11c>)
 8000c8a:	f000 ffcb 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c8e:	e02d      	b.n	8000cec <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_UART_MspInit+0x120>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d128      	bne.n	8000cec <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_UART_MspInit+0x114>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <HAL_UART_MspInit+0x11c>)
 8000ce8:	f000 ff9c 	bl	8001c24 <HAL_GPIO_Init>
}
 8000cec:	bf00      	nop
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40004800 	.word	0x40004800

08000d08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d28:	d141      	bne.n	8000dae <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d42:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d54:	230a      	movs	r3, #10
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4817      	ldr	r0, [pc, #92]	; (8000dbc <HAL_PCD_MspInit+0xb4>)
 8000d60:	f000 ff60 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <HAL_PCD_MspInit+0xb4>)
 8000d7a:	f000 ff53 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	6353      	str	r3, [r2, #52]	; 0x34
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_PCD_MspInit+0xb0>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f87a 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e62:	f7ff ffd7 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f003 f94b 	bl	8004100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fb49 	bl	8000500 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e7c:	08004198 	.word	0x08004198
  ldr r2, =_sbss
 8000e80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e84:	200005b0 	.word	0x200005b0

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>

08000e8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 fa2a 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 f805 	bl	8000ea4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e9a:	f7ff fd83 	bl	80009a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fa37 	bl	8001336 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 fa0d 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	200005ac 	.word	0x200005ac

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200005ac 	.word	0x200005ac

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0ed      	b.n	800117a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fd1e 	bl	80009ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0202 	bic.w	r2, r2, #2
 8000fbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc0:	f7ff ffb4 	bl	8000f2c <HAL_GetTick>
 8000fc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fc6:	e012      	b.n	8000fee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc8:	f7ff ffb0 	bl	8000f2c <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b0a      	cmp	r3, #10
 8000fd4:	d90b      	bls.n	8000fee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0c5      	b.n	800117a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e5      	bne.n	8000fc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800100c:	f7ff ff8e 	bl	8000f2c <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001012:	e012      	b.n	800103a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001014:	f7ff ff8a 	bl	8000f2c <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d90b      	bls.n	800103a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e09f      	b.n	800117a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0e5      	beq.n	8001014 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7e1b      	ldrb	r3, [r3, #24]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e007      	b.n	8001072 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7e5b      	ldrb	r3, [r3, #25]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e007      	b.n	800109c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800109a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7e9b      	ldrb	r3, [r3, #26]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d108      	bne.n	80010b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0220 	orr.w	r2, r2, #32
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e007      	b.n	80010c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0220 	bic.w	r2, r2, #32
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7edb      	ldrb	r3, [r3, #27]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0210 	bic.w	r2, r2, #16
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e007      	b.n	80010f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0210 	orr.w	r2, r2, #16
 80010ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7f1b      	ldrb	r3, [r3, #28]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d108      	bne.n	800110a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0208 	orr.w	r2, r2, #8
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e007      	b.n	800111a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0208 	bic.w	r2, r2, #8
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7f5b      	ldrb	r3, [r3, #29]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0204 	orr.w	r2, r2, #4
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e007      	b.n	8001144 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0204 	bic.w	r2, r2, #4
 8001142:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	ea42 0103 	orr.w	r1, r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff47 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff5c 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffb0 	bl	80012a4 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001360:	4ba9      	ldr	r3, [pc, #676]	; (8001608 <HAL_ETH_Init+0x2b8>)
 8001362:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e181      	b.n	800167a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fb72 	bl	8000a74 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b9e      	ldr	r3, [pc, #632]	; (800160c <HAL_ETH_Init+0x2bc>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	4a9d      	ldr	r2, [pc, #628]	; (800160c <HAL_ETH_Init+0x2bc>)
 8001396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139a:	6453      	str	r3, [r2, #68]	; 0x44
 800139c:	4b9b      	ldr	r3, [pc, #620]	; (800160c <HAL_ETH_Init+0x2bc>)
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013a8:	4b99      	ldr	r3, [pc, #612]	; (8001610 <HAL_ETH_Init+0x2c0>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a98      	ldr	r2, [pc, #608]	; (8001610 <HAL_ETH_Init+0x2c0>)
 80013ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013b2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013b4:	4b96      	ldr	r3, [pc, #600]	; (8001610 <HAL_ETH_Init+0x2c0>)
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4994      	ldr	r1, [pc, #592]	; (8001610 <HAL_ETH_Init+0x2c0>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0201 	orr.w	r2, r2, #1
 80013d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013da:	f7ff fda7 	bl	8000f2c <HAL_GetTick>
 80013de:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013e0:	e011      	b.n	8001406 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013e2:	f7ff fda3 	bl	8000f2c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013f0:	d909      	bls.n	8001406 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e139      	b.n	800167a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e4      	bne.n	80013e2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f023 031c 	bic.w	r3, r3, #28
 8001426:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001428:	f001 fb8c 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 800142c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4a78      	ldr	r2, [pc, #480]	; (8001614 <HAL_ETH_Init+0x2c4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d908      	bls.n	8001448 <HAL_ETH_Init+0xf8>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4a77      	ldr	r2, [pc, #476]	; (8001618 <HAL_ETH_Init+0x2c8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d804      	bhi.n	8001448 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	e027      	b.n	8001498 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4a73      	ldr	r2, [pc, #460]	; (8001618 <HAL_ETH_Init+0x2c8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d908      	bls.n	8001462 <HAL_ETH_Init+0x112>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <HAL_ETH_Init+0x2b8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d204      	bcs.n	8001462 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f043 030c 	orr.w	r3, r3, #12
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	e01a      	b.n	8001498 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4a68      	ldr	r2, [pc, #416]	; (8001608 <HAL_ETH_Init+0x2b8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d303      	bcc.n	8001472 <HAL_ETH_Init+0x122>
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4a6b      	ldr	r2, [pc, #428]	; (800161c <HAL_ETH_Init+0x2cc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d911      	bls.n	8001496 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4a69      	ldr	r2, [pc, #420]	; (800161c <HAL_ETH_Init+0x2cc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d908      	bls.n	800148c <HAL_ETH_Init+0x13c>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a68      	ldr	r2, [pc, #416]	; (8001620 <HAL_ETH_Init+0x2d0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d804      	bhi.n	800148c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e005      	b.n	8001498 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	e000      	b.n	8001498 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001496:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f954 	bl	8001754 <HAL_ETH_WritePHYRegister>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014b6:	6939      	ldr	r1, [r7, #16]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f9b1 	bl	8001820 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0d7      	b.n	800167a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014ca:	20ff      	movs	r0, #255	; 0xff
 80014cc:	f7ff fd3a 	bl	8000f44 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a5 	beq.w	8001624 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014da:	f7ff fd27 	bl	8000f2c <HAL_GetTick>
 80014de:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	461a      	mov	r2, r3
 80014e6:	2101      	movs	r1, #1
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f8cb 	bl	8001684 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014ee:	f7ff fd1d 	bl	8000f2c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d90f      	bls.n	8001520 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001504:	6939      	ldr	r1, [r7, #16]
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f98a 	bl	8001820 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0ac      	b.n	800167a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0da      	beq.n	80014e0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800152a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800152e:	2100      	movs	r1, #0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f90f 	bl	8001754 <HAL_ETH_WritePHYRegister>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00b      	beq.n	8001554 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f96c 	bl	8001820 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001550:	2301      	movs	r3, #1
 8001552:	e092      	b.n	800167a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001554:	f7ff fcea 	bl	8000f2c <HAL_GetTick>
 8001558:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	461a      	mov	r2, r3
 8001560:	2101      	movs	r1, #1
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f88e 	bl	8001684 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001568:	f7ff fce0 	bl	8000f2c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d90f      	bls.n	800159a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800157e:	6939      	ldr	r1, [r7, #16]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f94d 	bl	8001820 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e06f      	b.n	800167a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0da      	beq.n	800155a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	461a      	mov	r2, r3
 80015aa:	2110      	movs	r1, #16
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f869 	bl	8001684 <HAL_ETH_ReadPHYRegister>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00b      	beq.n	80015d0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015bc:	6939      	ldr	r1, [r7, #16]
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f92e 	bl	8001820 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015cc:	2301      	movs	r3, #1
 80015ce:	e054      	b.n	800167a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	e002      	b.n	80015ea <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	e035      	b.n	8001668 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	e030      	b.n	8001668 <HAL_ETH_Init+0x318>
 8001606:	bf00      	nop
 8001608:	03938700 	.word	0x03938700
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	01312cff 	.word	0x01312cff
 8001618:	02160ebf 	.word	0x02160ebf
 800161c:	05f5e0ff 	.word	0x05f5e0ff
 8001620:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001634:	4313      	orrs	r3, r2
 8001636:	b29b      	uxth	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	2100      	movs	r1, #0
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f889 	bl	8001754 <HAL_ETH_WritePHYRegister>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00b      	beq.n	8001660 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8e6 	bl	8001820 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e00c      	b.n	800167a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001660:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001664:	f7ff fc6e 	bl	8000f44 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f8d8 	bl	8001820 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop

08001684 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	460b      	mov	r3, r1
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b82      	cmp	r3, #130	; 0x82
 80016a4:	d101      	bne.n	80016aa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016a6:	2302      	movs	r3, #2
 80016a8:	e050      	b.n	800174c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2282      	movs	r2, #130	; 0x82
 80016ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 031c 	and.w	r3, r3, #28
 80016c0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8a1b      	ldrh	r3, [r3, #16]
 80016c6:	02db      	lsls	r3, r3, #11
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80016d0:	897b      	ldrh	r3, [r7, #10]
 80016d2:	019b      	lsls	r3, r3, #6
 80016d4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	4313      	orrs	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f023 0302 	bic.w	r3, r3, #2
 80016e4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80016f6:	f7ff fc19 	bl	8000f2c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016fc:	e015      	b.n	800172a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80016fe:	f7ff fc15 	bl	8000f2c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d309      	bcc.n	8001722 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e014      	b.n	800174c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e4      	bne.n	80016fe <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	b29b      	uxth	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	460b      	mov	r3, r1
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b42      	cmp	r3, #66	; 0x42
 8001774:	d101      	bne.n	800177a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	e04e      	b.n	8001818 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2242      	movs	r2, #66	; 0x42
 800177e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 031c 	and.w	r3, r3, #28
 8001790:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8a1b      	ldrh	r3, [r3, #16]
 8001796:	02db      	lsls	r3, r3, #11
 8001798:	b29b      	uxth	r3, r3
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80017a0:	897b      	ldrh	r3, [r7, #10]
 80017a2:	019b      	lsls	r3, r3, #6
 80017a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017d0:	f7ff fbac 	bl	8000f2c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017d6:	e015      	b.n	8001804 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80017d8:	f7ff fba8 	bl	8000f2c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e6:	d309      	bcc.n	80017fc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e00d      	b.n	8001818 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e4      	bne.n	80017d8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0b0      	sub	sp, #192	; 0xc0
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800183c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001844:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800184e:	2300      	movs	r3, #0
 8001850:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186a:	663b      	str	r3, [r7, #96]	; 0x60
 800186c:	e001      	b.n	8001872 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001876:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800187c:	2300      	movs	r3, #0
 800187e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800188c:	2340      	movs	r3, #64	; 0x40
 800188e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80018f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018f8:	4bab      	ldr	r3, [pc, #684]	; (8001ba8 <ETH_MACDMAConfig+0x388>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001900:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001904:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001908:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800190a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800190c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001912:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001916:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800191a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001920:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001924:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001928:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800192a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800192c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800192e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001930:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001934:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001936:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800193a:	4313      	orrs	r3, r2
 800193c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001948:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff faf5 	bl	8000f44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001962:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001964:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001968:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800196a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800196c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800196e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001972:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001978:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800197a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800197e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001984:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001988:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001990:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001992:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fad0 	bl	8000f44 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019ac:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019b6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019c0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80019cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019d0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019d4:	4013      	ands	r3, r2
 80019d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019de:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80019e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019e4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80019e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80019ea:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80019ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80019f0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80019f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80019f6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80019f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80019fc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a10:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fa91 	bl	8000f44 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a2a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fa7c 	bl	8000f44 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a54:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a5e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001a64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a68:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001aaa:	4413      	add	r3, r2
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001ab2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <ETH_MACDMAConfig+0x38c>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001abe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ac2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001ac4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001ac6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ac8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001aca:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001acc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ace:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ad0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001ad2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001ad6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001ada:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ade:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ae0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	f241 0318 	movw	r3, #4120	; 0x1018
 8001af2:	4413      	add	r3, r2
 8001af4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001af8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b02:	4413      	add	r3, r2
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f7ff fa1a 	bl	8000f44 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b18:	4413      	add	r3, r2
 8001b1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b1e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b24:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b28:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b2c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b30:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b34:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b36:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b3a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b48:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7ff f9f3 	bl	8000f44 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b6a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10d      	bne.n	8001b90 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f241 031c 	movw	r3, #4124	; 0x101c
 8001b7c:	4413      	add	r3, r2
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6811      	ldr	r1, [r2, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <ETH_MACDMAConfig+0x390>)
 8001b86:	431a      	orrs	r2, r3
 8001b88:	f241 031c 	movw	r3, #4124	; 0x101c
 8001b8c:	440b      	add	r3, r1
 8001b8e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	461a      	mov	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f80b 	bl	8001bb4 <ETH_MACAddressConfig>
}
 8001b9e:	bf00      	nop
 8001ba0:	37c0      	adds	r7, #192	; 0xc0
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	ff20810f 	.word	0xff20810f
 8001bac:	f8de3f23 	.word	0xf8de3f23
 8001bb0:	00010040 	.word	0x00010040

08001bb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3305      	adds	r3, #5
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	3204      	adds	r2, #4
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <ETH_MACAddressConfig+0x68>)
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3303      	adds	r3, #3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	061a      	lsls	r2, r3, #24
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3302      	adds	r3, #2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <ETH_MACAddressConfig+0x6c>)
 8001c06:	4413      	add	r3, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40028040 	.word	0x40028040
 8001c20:	40028044 	.word	0x40028044

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e175      	b.n	8001f30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 8164 	bne.w	8001f2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d00b      	beq.n	8001c82 <HAL_GPIO_Init+0x5e>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c76:	2b11      	cmp	r3, #17
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d130      	bne.n	8001ce4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0201 	and.w	r2, r3, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x100>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80be 	beq.w	8001f2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a65      	ldr	r2, [pc, #404]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dc6:	4a61      	ldr	r2, [pc, #388]	; (8001f4c <HAL_GPIO_Init+0x328>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_GPIO_Init+0x32c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d037      	beq.n	8001e62 <HAL_GPIO_Init+0x23e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a57      	ldr	r2, [pc, #348]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d031      	beq.n	8001e5e <HAL_GPIO_Init+0x23a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a56      	ldr	r2, [pc, #344]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02b      	beq.n	8001e5a <HAL_GPIO_Init+0x236>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a55      	ldr	r2, [pc, #340]	; (8001f5c <HAL_GPIO_Init+0x338>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d025      	beq.n	8001e56 <HAL_GPIO_Init+0x232>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a54      	ldr	r2, [pc, #336]	; (8001f60 <HAL_GPIO_Init+0x33c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01f      	beq.n	8001e52 <HAL_GPIO_Init+0x22e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a53      	ldr	r2, [pc, #332]	; (8001f64 <HAL_GPIO_Init+0x340>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0x22a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_GPIO_Init+0x344>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a51      	ldr	r2, [pc, #324]	; (8001f6c <HAL_GPIO_Init+0x348>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00d      	beq.n	8001e46 <HAL_GPIO_Init+0x222>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	; (8001f70 <HAL_GPIO_Init+0x34c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x21e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001e3a:	2309      	movs	r3, #9
 8001e3c:	e012      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e3e:	230a      	movs	r3, #10
 8001e40:	e010      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e42:	2308      	movs	r3, #8
 8001e44:	e00e      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e46:	2307      	movs	r3, #7
 8001e48:	e00c      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e00a      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e008      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e62:	2300      	movs	r3, #0
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f002 0203 	and.w	r2, r2, #3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e74:	4935      	ldr	r1, [pc, #212]	; (8001f4c <HAL_GPIO_Init+0x328>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea6:	4a34      	ldr	r2, [pc, #208]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed0:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_GPIO_Init+0x354>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	f67f ae86 	bls.w	8001c44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40021400 	.word	0x40021400
 8001f68:	40021800 	.word	0x40021800
 8001f6c:	40021c00 	.word	0x40021c00
 8001f70:	40022000 	.word	0x40022000
 8001f74:	40022400 	.word	0x40022400
 8001f78:	40013c00 	.word	0x40013c00

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb0:	b08f      	sub	sp, #60	; 0x3c
 8001fb2:	af0a      	add	r7, sp, #40	; 0x28
 8001fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e116      	b.n	80021ee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fe94 	bl	8000d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 fe1e 	bl	8003c40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	687e      	ldr	r6, [r7, #4]
 800200c:	466d      	mov	r5, sp
 800200e:	f106 0410 	add.w	r4, r6, #16
 8002012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800201e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002022:	1d33      	adds	r3, r6, #4
 8002024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f001 fdb2 	bl	8003b90 <USB_CoreInit>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0d7      	b.n	80021ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fe0c 	bl	8003c62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e04a      	b.n	80020e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	333d      	adds	r3, #61	; 0x3d
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	333c      	adds	r3, #60	; 0x3c
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	b298      	uxth	r0, r3
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3342      	adds	r3, #66	; 0x42
 800208c:	4602      	mov	r2, r0
 800208e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	333f      	adds	r3, #63	; 0x3f
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3344      	adds	r3, #68	; 0x44
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	3348      	adds	r3, #72	; 0x48
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3350      	adds	r3, #80	; 0x50
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3301      	adds	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d3af      	bcc.n	8002050 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e044      	b.n	8002180 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	3301      	adds	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d3b5      	bcc.n	80020f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	687e      	ldr	r6, [r7, #4]
 8002192:	466d      	mov	r5, sp
 8002194:	f106 0410 	add.w	r4, r6, #16
 8002198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80021a8:	1d33      	adds	r3, r6, #4
 80021aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ac:	6838      	ldr	r0, [r7, #0]
 80021ae:	f001 fd83 	bl	8003cb8 <USB_DevInit>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e014      	b.n	80021ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d102      	bne.n	80021e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f80b 	bl	80021f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 ff35 	bl	8004056 <USB_DevDisconnect>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080021f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_PCDEx_ActivateLPM+0x44>)
 8002228:	4313      	orrs	r3, r2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	10000003 	.word	0x10000003

08002240 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40007000 	.word	0x40007000

08002260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e291      	b.n	800279a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002284:	4b96      	ldr	r3, [pc, #600]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00c      	beq.n	80022aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002290:	4b93      	ldr	r3, [pc, #588]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62>
 800229c:	4b90      	ldr	r3, [pc, #576]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	4b8d      	ldr	r3, [pc, #564]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <HAL_RCC_OscConfig+0x130>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d168      	bne.n	8002390 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e26b      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x7a>
 80022cc:	4b84      	ldr	r3, [pc, #528]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a83      	ldr	r2, [pc, #524]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e02e      	b.n	8002338 <HAL_RCC_OscConfig+0xd8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x9c>
 80022e2:	4b7f      	ldr	r3, [pc, #508]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7e      	ldr	r2, [pc, #504]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b7c      	ldr	r3, [pc, #496]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7b      	ldr	r2, [pc, #492]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xd8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0xc0>
 8002306:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a75      	ldr	r2, [pc, #468]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b73      	ldr	r3, [pc, #460]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a72      	ldr	r2, [pc, #456]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xd8>
 8002320:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6e      	ldr	r2, [pc, #440]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b6c      	ldr	r3, [pc, #432]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6b      	ldr	r2, [pc, #428]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fdf4 	bl	8000f2c <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fdf0 	bl	8000f2c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e21f      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xe8>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fde0 	bl	8000f2c <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fddc 	bl	8000f2c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e20b      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b57      	ldr	r3, [pc, #348]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x110>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d069      	beq.n	8002472 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023aa:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x190>
 80023b6:	4b4a      	ldr	r3, [pc, #296]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x17a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1df      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	493d      	ldr	r1, [pc, #244]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e040      	b.n	8002472 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d023      	beq.n	8002440 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fd92 	bl	8000f2c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7fe fd8e 	bl	8000f2c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1bd      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4929      	ldr	r1, [pc, #164]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
 800243e:	e018      	b.n	8002472 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fd6e 	bl	8000f2c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7fe fd6a 	bl	8000f2c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e199      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d038      	beq.n	80024f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d019      	beq.n	80024ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 8002488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fd4b 	bl	8000f2c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249a:	f7fe fd47 	bl	8000f2c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e176      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80024ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x23a>
 80024b8:	e01a      	b.n	80024f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80024bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <HAL_RCC_OscConfig+0x280>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fd31 	bl	8000f2c <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ce:	f7fe fd2d 	bl	8000f2c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d903      	bls.n	80024e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e15c      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
 80024e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b91      	ldr	r3, [pc, #580]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ee      	bne.n	80024ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a4 	beq.w	8002646 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a87      	ldr	r2, [pc, #540]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b85      	ldr	r3, [pc, #532]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002526:	4b82      	ldr	r3, [pc, #520]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002532:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a7e      	ldr	r2, [pc, #504]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fcf5 	bl	8000f2c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe fcf1 	bl	8000f2c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	; 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e120      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <HAL_RCC_OscConfig+0x4d0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x31a>
 800256c:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a6e      	ldr	r2, [pc, #440]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e02d      	b.n	80025d6 <HAL_RCC_OscConfig+0x376>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x33c>
 8002582:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a69      	ldr	r2, [pc, #420]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a66      	ldr	r2, [pc, #408]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	e01c      	b.n	80025d6 <HAL_RCC_OscConfig+0x376>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d10c      	bne.n	80025be <HAL_RCC_OscConfig+0x35e>
 80025a4:	4b61      	ldr	r3, [pc, #388]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a60      	ldr	r2, [pc, #384]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
 80025b0:	4b5e      	ldr	r3, [pc, #376]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a5d      	ldr	r2, [pc, #372]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e00b      	b.n	80025d6 <HAL_RCC_OscConfig+0x376>
 80025be:	4b5b      	ldr	r3, [pc, #364]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a5a      	ldr	r2, [pc, #360]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	4b58      	ldr	r3, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d015      	beq.n	800260a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fca5 	bl	8000f2c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fca1 	bl	8000f2c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0ce      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	4b4b      	ldr	r3, [pc, #300]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ee      	beq.n	80025e6 <HAL_RCC_OscConfig+0x386>
 8002608:	e014      	b.n	8002634 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fc8f 	bl	8000f2c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fc8b 	bl	8000f2c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0b8      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b3c      	ldr	r3, [pc, #240]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a3b      	ldr	r2, [pc, #236]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80a4 	beq.w	8002798 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d06b      	beq.n	8002734 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d149      	bne.n	80026f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a30      	ldr	r2, [pc, #192]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fc5c 	bl	8000f2c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fc58 	bl	8000f2c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e087      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	4b28      	ldr	r3, [pc, #160]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	3b01      	subs	r3, #1
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	4313      	orrs	r3, r2
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80026be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fc2c 	bl	8000f2c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fc28 	bl	8000f2c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e057      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x478>
 80026f6:	e04f      	b.n	8002798 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 80026fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fc12 	bl	8000f2c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe fc0e 	bl	8000f2c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e03d      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_OscConfig+0x4cc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x4ac>
 800272a:	e035      	b.n	8002798 <HAL_RCC_OscConfig+0x538>
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_RCC_OscConfig+0x544>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d028      	beq.n	8002794 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d121      	bne.n	8002794 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d11a      	bne.n	8002794 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800276c:	4293      	cmp	r3, r2
 800276e:	d111      	bne.n	8002794 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0d0      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 020f 	bic.w	r2, r3, #15
 80027d6:	4965      	ldr	r1, [pc, #404]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b8      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002812:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	494d      	ldr	r1, [pc, #308]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d040      	beq.n	80028cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b41      	ldr	r3, [pc, #260]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e073      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06b      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4936      	ldr	r1, [pc, #216]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe fb46 	bl	8000f2c <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe fb42 	bl	8000f2c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e053      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d210      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 020f 	bic.w	r2, r3, #15
 80028e2:	4922      	ldr	r1, [pc, #136]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e032      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4916      	ldr	r1, [pc, #88]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	490e      	ldr	r1, [pc, #56]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293a:	f000 f821 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800293e:	4602      	mov	r2, r0
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	490a      	ldr	r1, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1cc>)
 800294c:	5ccb      	ldrb	r3, [r1, r3]
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1d0>)
 8002954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe faa2 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023c00 	.word	0x40023c00
 8002970:	40023800 	.word	0x40023800
 8002974:	08004170 	.word	0x08004170
 8002978:	20000000 	.word	0x20000000
 800297c:	20000004 	.word	0x20000004

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	2300      	movs	r3, #0
 8002992:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002998:	4b67      	ldr	r3, [pc, #412]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d00d      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x40>
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	f200 80bd 	bhi.w	8002b24 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x3a>
 80029b2:	e0b7      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029b6:	60bb      	str	r3, [r7, #8]
      break;
 80029b8:	e0b7      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ba:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029bc:	60bb      	str	r3, [r7, #8]
      break;
 80029be:	e0b4      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c0:	4b5d      	ldr	r3, [pc, #372]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029ca:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d04d      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d6:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	099b      	lsrs	r3, r3, #6
 80029dc:	461a      	mov	r2, r3
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029e6:	f04f 0100 	mov.w	r1, #0
 80029ea:	ea02 0800 	and.w	r8, r2, r0
 80029ee:	ea03 0901 	and.w	r9, r3, r1
 80029f2:	4640      	mov	r0, r8
 80029f4:	4649      	mov	r1, r9
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	014b      	lsls	r3, r1, #5
 8002a00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a04:	0142      	lsls	r2, r0, #5
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	ebb0 0008 	subs.w	r0, r0, r8
 8002a0e:	eb61 0109 	sbc.w	r1, r1, r9
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	018b      	lsls	r3, r1, #6
 8002a1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a20:	0182      	lsls	r2, r0, #6
 8002a22:	1a12      	subs	r2, r2, r0
 8002a24:	eb63 0301 	sbc.w	r3, r3, r1
 8002a28:	f04f 0000 	mov.w	r0, #0
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	00d9      	lsls	r1, r3, #3
 8002a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a36:	00d0      	lsls	r0, r2, #3
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	eb12 0208 	adds.w	r2, r2, r8
 8002a40:	eb43 0309 	adc.w	r3, r3, r9
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	0259      	lsls	r1, r3, #9
 8002a4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a52:	0250      	lsls	r0, r2, #9
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	f7fd fbd0 	bl	8000208 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e04a      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a72:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	ea02 0400 	and.w	r4, r2, r0
 8002a8a:	ea03 0501 	and.w	r5, r3, r1
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	014b      	lsls	r3, r1, #5
 8002a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aa0:	0142      	lsls	r2, r0, #5
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	1b00      	subs	r0, r0, r4
 8002aa8:	eb61 0105 	sbc.w	r1, r1, r5
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	018b      	lsls	r3, r1, #6
 8002ab6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aba:	0182      	lsls	r2, r0, #6
 8002abc:	1a12      	subs	r2, r2, r0
 8002abe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac2:	f04f 0000 	mov.w	r0, #0
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	00d9      	lsls	r1, r3, #3
 8002acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad0:	00d0      	lsls	r0, r2, #3
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	1912      	adds	r2, r2, r4
 8002ad8:	eb45 0303 	adc.w	r3, r5, r3
 8002adc:	f04f 0000 	mov.w	r0, #0
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	0299      	lsls	r1, r3, #10
 8002ae6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aea:	0290      	lsls	r0, r2, #10
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	f7fd fb84 	bl	8000208 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4613      	mov	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	60bb      	str	r3, [r7, #8]
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b26:	60bb      	str	r3, [r7, #8]
      break;
 8002b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	00f42400 	.word	0x00f42400
 8002b40:	007a1200 	.word	0x007a1200

08002b44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0a9b      	lsrs	r3, r3, #10
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08004180 	.word	0x08004180

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b88:	f7ff ffdc 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0b5b      	lsrs	r3, r3, #13
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	08004180 	.word	0x08004180

08002bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bd4:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	4964      	ldr	r1, [pc, #400]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d017      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c06:	4b5d      	ldr	r3, [pc, #372]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	4959      	ldr	r1, [pc, #356]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c24:	d101      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c42:	4b4e      	ldr	r3, [pc, #312]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	494a      	ldr	r1, [pc, #296]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 808b 	beq.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c90:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a39      	ldr	r2, [pc, #228]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9c:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a34      	ldr	r2, [pc, #208]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fe f93a 	bl	8000f2c <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fe f936 	bl	8000f2c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e357      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d035      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d02e      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d02:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d1a:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d114      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f8fe 	bl	8000f2c <HAL_GetTick>
 8002d30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe f8fa 	bl	8000f2c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e319      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ee      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d62:	d111      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d72:	400b      	ands	r3, r1
 8002d74:	4901      	ldr	r1, [pc, #4]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40007000 	.word	0x40007000
 8002d84:	0ffffcff 	.word	0x0ffffcff
 8002d88:	4bb1      	ldr	r3, [pc, #708]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4ab0      	ldr	r2, [pc, #704]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d92:	6093      	str	r3, [r2, #8]
 8002d94:	4bae      	ldr	r3, [pc, #696]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	49ab      	ldr	r1, [pc, #684]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d010      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002db2:	4ba7      	ldr	r3, [pc, #668]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db8:	4aa5      	ldr	r2, [pc, #660]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dc2:	4ba3      	ldr	r3, [pc, #652]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	49a0      	ldr	r1, [pc, #640]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de0:	4b9b      	ldr	r3, [pc, #620]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dee:	4998      	ldr	r1, [pc, #608]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e02:	4b93      	ldr	r3, [pc, #588]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e10:	498f      	ldr	r1, [pc, #572]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e24:	4b8a      	ldr	r3, [pc, #552]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e32:	4987      	ldr	r1, [pc, #540]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e46:	4b82      	ldr	r3, [pc, #520]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	497e      	ldr	r1, [pc, #504]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e68:	4b79      	ldr	r3, [pc, #484]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f023 0203 	bic.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	4976      	ldr	r1, [pc, #472]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e8a:	4b71      	ldr	r3, [pc, #452]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f023 020c 	bic.w	r2, r3, #12
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e98:	496d      	ldr	r1, [pc, #436]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eac:	4b68      	ldr	r3, [pc, #416]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	4965      	ldr	r1, [pc, #404]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ece:	4b60      	ldr	r3, [pc, #384]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	495c      	ldr	r1, [pc, #368]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ef0:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	4954      	ldr	r1, [pc, #336]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f12:	4b4f      	ldr	r3, [pc, #316]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	494b      	ldr	r1, [pc, #300]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f34:	4b46      	ldr	r3, [pc, #280]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	4943      	ldr	r1, [pc, #268]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f56:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	493a      	ldr	r1, [pc, #232]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f86:	4932      	ldr	r1, [pc, #200]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d011      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa8:	4929      	ldr	r1, [pc, #164]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe8:	4919      	ldr	r1, [pc, #100]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300c:	4910      	ldr	r1, [pc, #64]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d006      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80d9 	beq.w	80031da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800302e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003034:	f7fd ff7a 	bl	8000f2c <HAL_GetTick>
 8003038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800303a:	e00b      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800303c:	f7fd ff76 	bl	8000f2c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d904      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e197      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003054:	4b6c      	ldr	r3, [pc, #432]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ed      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d021      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11d      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003074:	4b64      	ldr	r3, [pc, #400]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003082:	4b61      	ldr	r3, [pc, #388]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	0e1b      	lsrs	r3, r3, #24
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	019a      	lsls	r2, r3, #6
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	061b      	lsls	r3, r3, #24
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	071b      	lsls	r3, r3, #28
 80030a8:	4957      	ldr	r1, [pc, #348]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d02e      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030da:	d129      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030dc:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e2:	0c1b      	lsrs	r3, r3, #16
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f0:	0f1b      	lsrs	r3, r3, #28
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	019a      	lsls	r2, r3, #6
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	431a      	orrs	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	071b      	lsls	r3, r3, #28
 8003110:	493d      	ldr	r1, [pc, #244]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003118:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311e:	f023 021f 	bic.w	r2, r3, #31
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	3b01      	subs	r3, #1
 8003128:	4937      	ldr	r1, [pc, #220]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01d      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003142:	0e1b      	lsrs	r3, r3, #24
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800314a:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003150:	0f1b      	lsrs	r3, r3, #28
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	019a      	lsls	r2, r3, #6
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	431a      	orrs	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	071b      	lsls	r3, r3, #28
 8003170:	4925      	ldr	r1, [pc, #148]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d011      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	019a      	lsls	r2, r3, #6
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	071b      	lsls	r3, r3, #28
 80031a0:	4919      	ldr	r1, [pc, #100]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b4:	f7fd feba 	bl	8000f2c <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031bc:	f7fd feb6 	bl	8000f2c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0d7      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ce:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	f040 80cd 	bne.w	800337c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a08      	ldr	r2, [pc, #32]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ee:	f7fd fe9d 	bl	8000f2c <HAL_GetTick>
 80031f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031f6:	f7fd fe99 	bl	8000f2c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b64      	cmp	r3, #100	; 0x64
 8003202:	d903      	bls.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0ba      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003208:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800320c:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003218:	d0ed      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003236:	2b00      	cmp	r3, #0
 8003238:	d02e      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d12a      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003242:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003250:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	0f1b      	lsrs	r3, r3, #28
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	019a      	lsls	r2, r3, #6
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	061b      	lsls	r3, r3, #24
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	071b      	lsls	r3, r3, #28
 8003276:	4944      	ldr	r1, [pc, #272]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800327e:	4b42      	ldr	r3, [pc, #264]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003284:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	493d      	ldr	r1, [pc, #244]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d022      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ac:	d11d      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	0e1b      	lsrs	r3, r3, #24
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032bc:	4b32      	ldr	r3, [pc, #200]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	0f1b      	lsrs	r3, r3, #28
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	019a      	lsls	r2, r3, #6
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	431a      	orrs	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	061b      	lsls	r3, r3, #24
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	071b      	lsls	r3, r3, #28
 80032e2:	4929      	ldr	r1, [pc, #164]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d028      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	0e1b      	lsrs	r3, r3, #24
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	019a      	lsls	r2, r3, #6
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	041b      	lsls	r3, r3, #16
 800331c:	431a      	orrs	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	071b      	lsls	r3, r3, #28
 800332a:	4917      	ldr	r1, [pc, #92]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4911      	ldr	r1, [pc, #68]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003348:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003354:	f7fd fdea 	bl	8000f2c <HAL_GetTick>
 8003358:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800335c:	f7fd fde6 	bl	8000f2c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e007      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800337a:	d1ef      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e040      	b.n	8003420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fc18 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f82c 	bl	8003428 <UART_SetConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fa82 	bl	80038ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fb09 	bl	8003a30 <UART_CheckIdleState>
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4ba7      	ldr	r3, [pc, #668]	; (80036f0 <UART_SetConfig+0x2c8>)
 8003454:	4013      	ands	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	6979      	ldr	r1, [r7, #20]
 800345c:	430b      	orrs	r3, r1
 800345e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a95      	ldr	r2, [pc, #596]	; (80036f4 <UART_SetConfig+0x2cc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d120      	bne.n	80034e6 <UART_SetConfig+0xbe>
 80034a4:	4b94      	ldr	r3, [pc, #592]	; (80036f8 <UART_SetConfig+0x2d0>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d816      	bhi.n	80034e0 <UART_SetConfig+0xb8>
 80034b2:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <UART_SetConfig+0x90>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034d5 	.word	0x080034d5
 80034c0:	080034cf 	.word	0x080034cf
 80034c4:	080034db 	.word	0x080034db
 80034c8:	2301      	movs	r3, #1
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e14f      	b.n	800376e <UART_SetConfig+0x346>
 80034ce:	2302      	movs	r3, #2
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e14c      	b.n	800376e <UART_SetConfig+0x346>
 80034d4:	2304      	movs	r3, #4
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e149      	b.n	800376e <UART_SetConfig+0x346>
 80034da:	2308      	movs	r3, #8
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e146      	b.n	800376e <UART_SetConfig+0x346>
 80034e0:	2310      	movs	r3, #16
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e143      	b.n	800376e <UART_SetConfig+0x346>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a84      	ldr	r2, [pc, #528]	; (80036fc <UART_SetConfig+0x2d4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d132      	bne.n	8003556 <UART_SetConfig+0x12e>
 80034f0:	4b81      	ldr	r3, [pc, #516]	; (80036f8 <UART_SetConfig+0x2d0>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d828      	bhi.n	8003550 <UART_SetConfig+0x128>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <UART_SetConfig+0xdc>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003539 	.word	0x08003539
 8003508:	08003551 	.word	0x08003551
 800350c:	08003551 	.word	0x08003551
 8003510:	08003551 	.word	0x08003551
 8003514:	08003545 	.word	0x08003545
 8003518:	08003551 	.word	0x08003551
 800351c:	08003551 	.word	0x08003551
 8003520:	08003551 	.word	0x08003551
 8003524:	0800353f 	.word	0x0800353f
 8003528:	08003551 	.word	0x08003551
 800352c:	08003551 	.word	0x08003551
 8003530:	08003551 	.word	0x08003551
 8003534:	0800354b 	.word	0x0800354b
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e117      	b.n	800376e <UART_SetConfig+0x346>
 800353e:	2302      	movs	r3, #2
 8003540:	77fb      	strb	r3, [r7, #31]
 8003542:	e114      	b.n	800376e <UART_SetConfig+0x346>
 8003544:	2304      	movs	r3, #4
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e111      	b.n	800376e <UART_SetConfig+0x346>
 800354a:	2308      	movs	r3, #8
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e10e      	b.n	800376e <UART_SetConfig+0x346>
 8003550:	2310      	movs	r3, #16
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e10b      	b.n	800376e <UART_SetConfig+0x346>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a69      	ldr	r2, [pc, #420]	; (8003700 <UART_SetConfig+0x2d8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d120      	bne.n	80035a2 <UART_SetConfig+0x17a>
 8003560:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <UART_SetConfig+0x2d0>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800356a:	2b30      	cmp	r3, #48	; 0x30
 800356c:	d013      	beq.n	8003596 <UART_SetConfig+0x16e>
 800356e:	2b30      	cmp	r3, #48	; 0x30
 8003570:	d814      	bhi.n	800359c <UART_SetConfig+0x174>
 8003572:	2b20      	cmp	r3, #32
 8003574:	d009      	beq.n	800358a <UART_SetConfig+0x162>
 8003576:	2b20      	cmp	r3, #32
 8003578:	d810      	bhi.n	800359c <UART_SetConfig+0x174>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <UART_SetConfig+0x15c>
 800357e:	2b10      	cmp	r3, #16
 8003580:	d006      	beq.n	8003590 <UART_SetConfig+0x168>
 8003582:	e00b      	b.n	800359c <UART_SetConfig+0x174>
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e0f1      	b.n	800376e <UART_SetConfig+0x346>
 800358a:	2302      	movs	r3, #2
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e0ee      	b.n	800376e <UART_SetConfig+0x346>
 8003590:	2304      	movs	r3, #4
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e0eb      	b.n	800376e <UART_SetConfig+0x346>
 8003596:	2308      	movs	r3, #8
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e0e8      	b.n	800376e <UART_SetConfig+0x346>
 800359c:	2310      	movs	r3, #16
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e0e5      	b.n	800376e <UART_SetConfig+0x346>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a57      	ldr	r2, [pc, #348]	; (8003704 <UART_SetConfig+0x2dc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d120      	bne.n	80035ee <UART_SetConfig+0x1c6>
 80035ac:	4b52      	ldr	r3, [pc, #328]	; (80036f8 <UART_SetConfig+0x2d0>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035b6:	2bc0      	cmp	r3, #192	; 0xc0
 80035b8:	d013      	beq.n	80035e2 <UART_SetConfig+0x1ba>
 80035ba:	2bc0      	cmp	r3, #192	; 0xc0
 80035bc:	d814      	bhi.n	80035e8 <UART_SetConfig+0x1c0>
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d009      	beq.n	80035d6 <UART_SetConfig+0x1ae>
 80035c2:	2b80      	cmp	r3, #128	; 0x80
 80035c4:	d810      	bhi.n	80035e8 <UART_SetConfig+0x1c0>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <UART_SetConfig+0x1a8>
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d006      	beq.n	80035dc <UART_SetConfig+0x1b4>
 80035ce:	e00b      	b.n	80035e8 <UART_SetConfig+0x1c0>
 80035d0:	2300      	movs	r3, #0
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e0cb      	b.n	800376e <UART_SetConfig+0x346>
 80035d6:	2302      	movs	r3, #2
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e0c8      	b.n	800376e <UART_SetConfig+0x346>
 80035dc:	2304      	movs	r3, #4
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e0c5      	b.n	800376e <UART_SetConfig+0x346>
 80035e2:	2308      	movs	r3, #8
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e0c2      	b.n	800376e <UART_SetConfig+0x346>
 80035e8:	2310      	movs	r3, #16
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e0bf      	b.n	800376e <UART_SetConfig+0x346>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a45      	ldr	r2, [pc, #276]	; (8003708 <UART_SetConfig+0x2e0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d125      	bne.n	8003644 <UART_SetConfig+0x21c>
 80035f8:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <UART_SetConfig+0x2d0>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003606:	d017      	beq.n	8003638 <UART_SetConfig+0x210>
 8003608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800360c:	d817      	bhi.n	800363e <UART_SetConfig+0x216>
 800360e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003612:	d00b      	beq.n	800362c <UART_SetConfig+0x204>
 8003614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003618:	d811      	bhi.n	800363e <UART_SetConfig+0x216>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <UART_SetConfig+0x1fe>
 800361e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003622:	d006      	beq.n	8003632 <UART_SetConfig+0x20a>
 8003624:	e00b      	b.n	800363e <UART_SetConfig+0x216>
 8003626:	2300      	movs	r3, #0
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e0a0      	b.n	800376e <UART_SetConfig+0x346>
 800362c:	2302      	movs	r3, #2
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e09d      	b.n	800376e <UART_SetConfig+0x346>
 8003632:	2304      	movs	r3, #4
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e09a      	b.n	800376e <UART_SetConfig+0x346>
 8003638:	2308      	movs	r3, #8
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e097      	b.n	800376e <UART_SetConfig+0x346>
 800363e:	2310      	movs	r3, #16
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e094      	b.n	800376e <UART_SetConfig+0x346>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a30      	ldr	r2, [pc, #192]	; (800370c <UART_SetConfig+0x2e4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d125      	bne.n	800369a <UART_SetConfig+0x272>
 800364e:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <UART_SetConfig+0x2d0>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365c:	d017      	beq.n	800368e <UART_SetConfig+0x266>
 800365e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003662:	d817      	bhi.n	8003694 <UART_SetConfig+0x26c>
 8003664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003668:	d00b      	beq.n	8003682 <UART_SetConfig+0x25a>
 800366a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366e:	d811      	bhi.n	8003694 <UART_SetConfig+0x26c>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <UART_SetConfig+0x254>
 8003674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003678:	d006      	beq.n	8003688 <UART_SetConfig+0x260>
 800367a:	e00b      	b.n	8003694 <UART_SetConfig+0x26c>
 800367c:	2301      	movs	r3, #1
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e075      	b.n	800376e <UART_SetConfig+0x346>
 8003682:	2302      	movs	r3, #2
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e072      	b.n	800376e <UART_SetConfig+0x346>
 8003688:	2304      	movs	r3, #4
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e06f      	b.n	800376e <UART_SetConfig+0x346>
 800368e:	2308      	movs	r3, #8
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e06c      	b.n	800376e <UART_SetConfig+0x346>
 8003694:	2310      	movs	r3, #16
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e069      	b.n	800376e <UART_SetConfig+0x346>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <UART_SetConfig+0x2e8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d137      	bne.n	8003714 <UART_SetConfig+0x2ec>
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <UART_SetConfig+0x2d0>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036b2:	d017      	beq.n	80036e4 <UART_SetConfig+0x2bc>
 80036b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036b8:	d817      	bhi.n	80036ea <UART_SetConfig+0x2c2>
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036be:	d00b      	beq.n	80036d8 <UART_SetConfig+0x2b0>
 80036c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c4:	d811      	bhi.n	80036ea <UART_SetConfig+0x2c2>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <UART_SetConfig+0x2aa>
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d006      	beq.n	80036de <UART_SetConfig+0x2b6>
 80036d0:	e00b      	b.n	80036ea <UART_SetConfig+0x2c2>
 80036d2:	2300      	movs	r3, #0
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e04a      	b.n	800376e <UART_SetConfig+0x346>
 80036d8:	2302      	movs	r3, #2
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e047      	b.n	800376e <UART_SetConfig+0x346>
 80036de:	2304      	movs	r3, #4
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	e044      	b.n	800376e <UART_SetConfig+0x346>
 80036e4:	2308      	movs	r3, #8
 80036e6:	77fb      	strb	r3, [r7, #31]
 80036e8:	e041      	b.n	800376e <UART_SetConfig+0x346>
 80036ea:	2310      	movs	r3, #16
 80036ec:	77fb      	strb	r3, [r7, #31]
 80036ee:	e03e      	b.n	800376e <UART_SetConfig+0x346>
 80036f0:	efff69f3 	.word	0xefff69f3
 80036f4:	40011000 	.word	0x40011000
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40004400 	.word	0x40004400
 8003700:	40004800 	.word	0x40004800
 8003704:	40004c00 	.word	0x40004c00
 8003708:	40005000 	.word	0x40005000
 800370c:	40011400 	.word	0x40011400
 8003710:	40007800 	.word	0x40007800
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a71      	ldr	r2, [pc, #452]	; (80038e0 <UART_SetConfig+0x4b8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d125      	bne.n	800376a <UART_SetConfig+0x342>
 800371e:	4b71      	ldr	r3, [pc, #452]	; (80038e4 <UART_SetConfig+0x4bc>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003728:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800372c:	d017      	beq.n	800375e <UART_SetConfig+0x336>
 800372e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003732:	d817      	bhi.n	8003764 <UART_SetConfig+0x33c>
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003738:	d00b      	beq.n	8003752 <UART_SetConfig+0x32a>
 800373a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373e:	d811      	bhi.n	8003764 <UART_SetConfig+0x33c>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <UART_SetConfig+0x324>
 8003744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003748:	d006      	beq.n	8003758 <UART_SetConfig+0x330>
 800374a:	e00b      	b.n	8003764 <UART_SetConfig+0x33c>
 800374c:	2300      	movs	r3, #0
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e00d      	b.n	800376e <UART_SetConfig+0x346>
 8003752:	2302      	movs	r3, #2
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e00a      	b.n	800376e <UART_SetConfig+0x346>
 8003758:	2304      	movs	r3, #4
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e007      	b.n	800376e <UART_SetConfig+0x346>
 800375e:	2308      	movs	r3, #8
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e004      	b.n	800376e <UART_SetConfig+0x346>
 8003764:	2310      	movs	r3, #16
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e001      	b.n	800376e <UART_SetConfig+0x346>
 800376a:	2310      	movs	r3, #16
 800376c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003776:	d15b      	bne.n	8003830 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003778:	7ffb      	ldrb	r3, [r7, #31]
 800377a:	2b08      	cmp	r3, #8
 800377c:	d827      	bhi.n	80037ce <UART_SetConfig+0x3a6>
 800377e:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <UART_SetConfig+0x35c>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037a9 	.word	0x080037a9
 8003788:	080037b1 	.word	0x080037b1
 800378c:	080037b9 	.word	0x080037b9
 8003790:	080037cf 	.word	0x080037cf
 8003794:	080037bf 	.word	0x080037bf
 8003798:	080037cf 	.word	0x080037cf
 800379c:	080037cf 	.word	0x080037cf
 80037a0:	080037cf 	.word	0x080037cf
 80037a4:	080037c7 	.word	0x080037c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a8:	f7ff f9d8 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 80037ac:	61b8      	str	r0, [r7, #24]
        break;
 80037ae:	e013      	b.n	80037d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b0:	f7ff f9e8 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 80037b4:	61b8      	str	r0, [r7, #24]
        break;
 80037b6:	e00f      	b.n	80037d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <UART_SetConfig+0x4c0>)
 80037ba:	61bb      	str	r3, [r7, #24]
        break;
 80037bc:	e00c      	b.n	80037d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037be:	f7ff f8df 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 80037c2:	61b8      	str	r0, [r7, #24]
        break;
 80037c4:	e008      	b.n	80037d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ca:	61bb      	str	r3, [r7, #24]
        break;
 80037cc:	e004      	b.n	80037d8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	77bb      	strb	r3, [r7, #30]
        break;
 80037d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d074      	beq.n	80038c8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d916      	bls.n	800382a <UART_SetConfig+0x402>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003802:	d212      	bcs.n	800382a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	b29b      	uxth	r3, r3
 8003808:	f023 030f 	bic.w	r3, r3, #15
 800380c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	b29a      	uxth	r2, r3
 800381a:	89fb      	ldrh	r3, [r7, #14]
 800381c:	4313      	orrs	r3, r2
 800381e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	89fa      	ldrh	r2, [r7, #14]
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	e04e      	b.n	80038c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	77bb      	strb	r3, [r7, #30]
 800382e:	e04b      	b.n	80038c8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003830:	7ffb      	ldrb	r3, [r7, #31]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d827      	bhi.n	8003886 <UART_SetConfig+0x45e>
 8003836:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0x414>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	08003861 	.word	0x08003861
 8003840:	08003869 	.word	0x08003869
 8003844:	08003871 	.word	0x08003871
 8003848:	08003887 	.word	0x08003887
 800384c:	08003877 	.word	0x08003877
 8003850:	08003887 	.word	0x08003887
 8003854:	08003887 	.word	0x08003887
 8003858:	08003887 	.word	0x08003887
 800385c:	0800387f 	.word	0x0800387f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7ff f97c 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8003864:	61b8      	str	r0, [r7, #24]
        break;
 8003866:	e013      	b.n	8003890 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003868:	f7ff f98c 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 800386c:	61b8      	str	r0, [r7, #24]
        break;
 800386e:	e00f      	b.n	8003890 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <UART_SetConfig+0x4c0>)
 8003872:	61bb      	str	r3, [r7, #24]
        break;
 8003874:	e00c      	b.n	8003890 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003876:	f7ff f883 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800387a:	61b8      	str	r0, [r7, #24]
        break;
 800387c:	e008      	b.n	8003890 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003882:	61bb      	str	r3, [r7, #24]
        break;
 8003884:	e004      	b.n	8003890 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	77bb      	strb	r3, [r7, #30]
        break;
 800388e:	bf00      	nop
    }

    if (pclk != 0U)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	085a      	lsrs	r2, r3, #1
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	441a      	add	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b0f      	cmp	r3, #15
 80038b0:	d908      	bls.n	80038c4 <UART_SetConfig+0x49c>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b8:	d204      	bcs.n	80038c4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	e001      	b.n	80038c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40007c00 	.word	0x40007c00
 80038e4:	40023800 	.word	0x40023800
 80038e8:	00f42400 	.word	0x00f42400

080038ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01a      	beq.n	8003a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ea:	d10a      	bne.n	8003a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a40:	f7fd fa74 	bl	8000f2c <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d10e      	bne.n	8003a72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f817 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e00d      	b.n	8003a8e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa6:	e05e      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d05a      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fd fa3c 	bl	8000f2c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11b      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ad4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e043      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02c      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1a:	d124      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b34:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e00f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d091      	beq.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b90:	b084      	sub	sp, #16
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	f107 001c 	add.w	r0, r7, #28
 8003b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d120      	bne.n	8003bea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <USB_CoreInit+0xac>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa5a 	bl	8004098 <USB_CoreReset>
 8003be4:	4603      	mov	r3, r0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e010      	b.n	8003c0c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa4e 	bl	8004098 <USB_CoreReset>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10b      	bne.n	8003c2a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f043 0206 	orr.w	r2, r3, #6
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c36:	b004      	add	sp, #16
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	ffbdffbf 	.word	0xffbdffbf

08003c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 0201 	bic.w	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	e00b      	b.n	8003ca6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	e001      	b.n	8003ca6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e003      	b.n	8003cae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003ca6:	2032      	movs	r0, #50	; 0x32
 8003ca8:	f7fd f94c 	bl	8000f44 <HAL_Delay>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cb8:	b084      	sub	sp, #16
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	e009      	b.n	8003cec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3340      	adds	r3, #64	; 0x40
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b0e      	cmp	r3, #14
 8003cf0:	d9f2      	bls.n	8003cd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d11c      	bne.n	8003d32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d06:	f043 0302 	orr.w	r3, r3, #2
 8003d0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e005      	b.n	8003d3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2300      	movs	r3, #0
 8003d48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d50:	4619      	mov	r1, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	461a      	mov	r2, r3
 8003d5a:	680b      	ldr	r3, [r1, #0]
 8003d5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10c      	bne.n	8003d7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f959 	bl	8004024 <USB_SetDevSpeed>
 8003d72:	e018      	b.n	8003da6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d74:	2101      	movs	r1, #1
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f954 	bl	8004024 <USB_SetDevSpeed>
 8003d7c:	e013      	b.n	8003da6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d10c      	bne.n	8003d9e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f949 	bl	8004024 <USB_SetDevSpeed>
 8003d92:	e008      	b.n	8003da6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d94:	2101      	movs	r1, #1
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f944 	bl	8004024 <USB_SetDevSpeed>
 8003d9c:	e003      	b.n	8003da6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d9e:	2103      	movs	r1, #3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f93f 	bl	8004024 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003da6:	2110      	movs	r1, #16
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8f3 	bl	8003f94 <USB_FlushTxFifo>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f911 	bl	8003fe0 <USB_FlushRxFifo>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	461a      	mov	r2, r3
 8003de8:	2300      	movs	r3, #0
 8003dea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	e043      	b.n	8003e7a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e08:	d118      	bne.n	8003e3c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e013      	b.n	8003e4e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e32:	461a      	mov	r2, r3
 8003e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e008      	b.n	8003e4e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	3301      	adds	r3, #1
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d3b7      	bcc.n	8003df2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e043      	b.n	8003f10 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e9e:	d118      	bne.n	8003ed2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e013      	b.n	8003ee4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e008      	b.n	8003ee4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f02:	461a      	mov	r2, r3
 8003f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d3b7      	bcc.n	8003e88 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f043 0210 	orr.w	r2, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <USB_DevInit+0x2d4>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f043 0208 	orr.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d105      	bne.n	8003f7c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <USB_DevInit+0x2d8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f88:	b004      	add	sp, #16
 8003f8a:	4770      	bx	lr
 8003f8c:	803c3800 	.word	0x803c3800
 8003f90:	40000004 	.word	0x40000004

08003f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <USB_FlushTxFifo+0x48>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e006      	b.n	8003fce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d0f0      	beq.n	8003fae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	00030d40 	.word	0x00030d40

08003fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <USB_FlushRxFifo+0x40>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d901      	bls.n	8004004 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e006      	b.n	8004012 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d0f0      	beq.n	8003ff2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	00030d40 	.word	0x00030d40

08004024 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004070:	f023 0303 	bic.w	r3, r3, #3
 8004074:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a13      	ldr	r2, [pc, #76]	; (80040fc <USB_CoreReset+0x64>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e01b      	b.n	80040ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	daf2      	bge.n	80040a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3301      	adds	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <USB_CoreReset+0x64>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e006      	b.n	80040ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d0f0      	beq.n	80040ce <USB_CoreReset+0x36>

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	00030d40 	.word	0x00030d40

08004100 <__libc_init_array>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	4d0d      	ldr	r5, [pc, #52]	; (8004138 <__libc_init_array+0x38>)
 8004104:	4c0d      	ldr	r4, [pc, #52]	; (800413c <__libc_init_array+0x3c>)
 8004106:	1b64      	subs	r4, r4, r5
 8004108:	10a4      	asrs	r4, r4, #2
 800410a:	2600      	movs	r6, #0
 800410c:	42a6      	cmp	r6, r4
 800410e:	d109      	bne.n	8004124 <__libc_init_array+0x24>
 8004110:	4d0b      	ldr	r5, [pc, #44]	; (8004140 <__libc_init_array+0x40>)
 8004112:	4c0c      	ldr	r4, [pc, #48]	; (8004144 <__libc_init_array+0x44>)
 8004114:	f000 f820 	bl	8004158 <_init>
 8004118:	1b64      	subs	r4, r4, r5
 800411a:	10a4      	asrs	r4, r4, #2
 800411c:	2600      	movs	r6, #0
 800411e:	42a6      	cmp	r6, r4
 8004120:	d105      	bne.n	800412e <__libc_init_array+0x2e>
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	f855 3b04 	ldr.w	r3, [r5], #4
 8004128:	4798      	blx	r3
 800412a:	3601      	adds	r6, #1
 800412c:	e7ee      	b.n	800410c <__libc_init_array+0xc>
 800412e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004132:	4798      	blx	r3
 8004134:	3601      	adds	r6, #1
 8004136:	e7f2      	b.n	800411e <__libc_init_array+0x1e>
 8004138:	08004190 	.word	0x08004190
 800413c:	08004190 	.word	0x08004190
 8004140:	08004190 	.word	0x08004190
 8004144:	08004194 	.word	0x08004194

08004148 <memset>:
 8004148:	4402      	add	r2, r0
 800414a:	4603      	mov	r3, r0
 800414c:	4293      	cmp	r3, r2
 800414e:	d100      	bne.n	8004152 <memset+0xa>
 8004150:	4770      	bx	lr
 8004152:	f803 1b01 	strb.w	r1, [r3], #1
 8004156:	e7f9      	b.n	800414c <memset+0x4>

08004158 <_init>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr

08004164 <_fini>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr
